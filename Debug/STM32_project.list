
STM32_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010024  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d8  080101b8  080101b8  000111b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010590  08010590  000122d8  2**0
                  CONTENTS
  4 .ARM          00000008  08010590  08010590  00011590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010598  08010598  000122d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010598  08010598  00011598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801059c  0801059c  0001159c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002d8  20000000  080105a0  00012000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000122d8  2**0
                  CONTENTS
 10 .bss          00002158  200002d8  200002d8  000122d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002430  20002430  000122d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000122d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e303  00000000  00000000  00012308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004997  00000000  00000000  0003060b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001af0  00000000  00000000  00034fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000014e0  00000000  00000000  00036a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002847d  00000000  00000000  00037f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024e79  00000000  00000000  000603f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e3768  00000000  00000000  0008526e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001689d6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008344  00000000  00000000  00168a1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004d  00000000  00000000  00170d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002d8 	.word	0x200002d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801019c 	.word	0x0801019c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002dc 	.word	0x200002dc
 80001cc:	0801019c 	.word	0x0801019c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96a 	b.w	8000f74 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d14e      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	458c      	cmp	ip, r1
 8000cc8:	4686      	mov	lr, r0
 8000cca:	fab2 f282 	clz	r2, r2
 8000cce:	d962      	bls.n	8000d96 <__udivmoddi4+0xde>
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0320 	rsb	r3, r2, #32
 8000cd6:	4091      	lsls	r1, r2
 8000cd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	4319      	orrs	r1, r3
 8000ce2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f f68c 	uxth.w	r6, ip
 8000cee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb04 f106 	mul.w	r1, r4, r6
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d0e:	f080 8112 	bcs.w	8000f36 <__udivmoddi4+0x27e>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 810f 	bls.w	8000f36 <__udivmoddi4+0x27e>
 8000d18:	3c02      	subs	r4, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d26:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f606 	mul.w	r6, r0, r6
 8000d32:	429e      	cmp	r6, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x94>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d3e:	f080 80fc 	bcs.w	8000f3a <__udivmoddi4+0x282>
 8000d42:	429e      	cmp	r6, r3
 8000d44:	f240 80f9 	bls.w	8000f3a <__udivmoddi4+0x282>
 8000d48:	4463      	add	r3, ip
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d52:	2100      	movs	r1, #0
 8000d54:	b11d      	cbz	r5, 8000d5e <__udivmoddi4+0xa6>
 8000d56:	40d3      	lsrs	r3, r2
 8000d58:	2200      	movs	r2, #0
 8000d5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d905      	bls.n	8000d72 <__udivmoddi4+0xba>
 8000d66:	b10d      	cbz	r5, 8000d6c <__udivmoddi4+0xb4>
 8000d68:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e7f5      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d72:	fab3 f183 	clz	r1, r3
 8000d76:	2900      	cmp	r1, #0
 8000d78:	d146      	bne.n	8000e08 <__udivmoddi4+0x150>
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	d302      	bcc.n	8000d84 <__udivmoddi4+0xcc>
 8000d7e:	4290      	cmp	r0, r2
 8000d80:	f0c0 80f0 	bcc.w	8000f64 <__udivmoddi4+0x2ac>
 8000d84:	1a86      	subs	r6, r0, r2
 8000d86:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	d0e6      	beq.n	8000d5e <__udivmoddi4+0xa6>
 8000d90:	e9c5 6300 	strd	r6, r3, [r5]
 8000d94:	e7e3      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	f040 8090 	bne.w	8000ebc <__udivmoddi4+0x204>
 8000d9c:	eba1 040c 	sub.w	r4, r1, ip
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	2101      	movs	r1, #1
 8000daa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb08 4416 	mls	r4, r8, r6, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb07 f006 	mul.w	r0, r7, r6
 8000dbe:	4298      	cmp	r0, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x11c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x11a>
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	f200 80cd 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000dd2:	4626      	mov	r6, r4
 8000dd4:	1a1c      	subs	r4, r3, r0
 8000dd6:	fa1f f38e 	uxth.w	r3, lr
 8000dda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dde:	fb08 4410 	mls	r4, r8, r0, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb00 f707 	mul.w	r7, r0, r7
 8000dea:	429f      	cmp	r7, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x148>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x146>
 8000df8:	429f      	cmp	r7, r3
 8000dfa:	f200 80b0 	bhi.w	8000f5e <__udivmoddi4+0x2a6>
 8000dfe:	4620      	mov	r0, r4
 8000e00:	1bdb      	subs	r3, r3, r7
 8000e02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e06:	e7a5      	b.n	8000d54 <__udivmoddi4+0x9c>
 8000e08:	f1c1 0620 	rsb	r6, r1, #32
 8000e0c:	408b      	lsls	r3, r1
 8000e0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e12:	431f      	orrs	r7, r3
 8000e14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e18:	fa04 f301 	lsl.w	r3, r4, r1
 8000e1c:	ea43 030c 	orr.w	r3, r3, ip
 8000e20:	40f4      	lsrs	r4, r6
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	0c38      	lsrs	r0, r7, #16
 8000e28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e30:	fa1f fc87 	uxth.w	ip, r7
 8000e34:	fb00 441e 	mls	r4, r0, lr, r4
 8000e38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e40:	45a1      	cmp	r9, r4
 8000e42:	fa02 f201 	lsl.w	r2, r2, r1
 8000e46:	d90a      	bls.n	8000e5e <__udivmoddi4+0x1a6>
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e4e:	f080 8084 	bcs.w	8000f5a <__udivmoddi4+0x2a2>
 8000e52:	45a1      	cmp	r9, r4
 8000e54:	f240 8081 	bls.w	8000f5a <__udivmoddi4+0x2a2>
 8000e58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	eba4 0409 	sub.w	r4, r4, r9
 8000e62:	fa1f f983 	uxth.w	r9, r3
 8000e66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x1d2>
 8000e7a:	193c      	adds	r4, r7, r4
 8000e7c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e80:	d267      	bcs.n	8000f52 <__udivmoddi4+0x29a>
 8000e82:	45a4      	cmp	ip, r4
 8000e84:	d965      	bls.n	8000f52 <__udivmoddi4+0x29a>
 8000e86:	3b02      	subs	r3, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e92:	eba4 040c 	sub.w	r4, r4, ip
 8000e96:	429c      	cmp	r4, r3
 8000e98:	46ce      	mov	lr, r9
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	d351      	bcc.n	8000f42 <__udivmoddi4+0x28a>
 8000e9e:	d04e      	beq.n	8000f3e <__udivmoddi4+0x286>
 8000ea0:	b155      	cbz	r5, 8000eb8 <__udivmoddi4+0x200>
 8000ea2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ea6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	40cb      	lsrs	r3, r1
 8000eb0:	431e      	orrs	r6, r3
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	e750      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000ebc:	f1c2 0320 	rsb	r3, r2, #32
 8000ec0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ecc:	4094      	lsls	r4, r2
 8000ece:	430c      	orrs	r4, r1
 8000ed0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ed8:	fa1f f78c 	uxth.w	r7, ip
 8000edc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee4:	0c23      	lsrs	r3, r4, #16
 8000ee6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eea:	fb00 f107 	mul.w	r1, r0, r7
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x24c>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000efa:	d22c      	bcs.n	8000f56 <__udivmoddi4+0x29e>
 8000efc:	4299      	cmp	r1, r3
 8000efe:	d92a      	bls.n	8000f56 <__udivmoddi4+0x29e>
 8000f00:	3802      	subs	r0, #2
 8000f02:	4463      	add	r3, ip
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f14:	fb01 f307 	mul.w	r3, r1, r7
 8000f18:	42a3      	cmp	r3, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x276>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f24:	d213      	bcs.n	8000f4e <__udivmoddi4+0x296>
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	d911      	bls.n	8000f4e <__udivmoddi4+0x296>
 8000f2a:	3902      	subs	r1, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	1ae4      	subs	r4, r4, r3
 8000f30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f34:	e739      	b.n	8000daa <__udivmoddi4+0xf2>
 8000f36:	4604      	mov	r4, r0
 8000f38:	e6f0      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e706      	b.n	8000d4c <__udivmoddi4+0x94>
 8000f3e:	45c8      	cmp	r8, r9
 8000f40:	d2ae      	bcs.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	e7a8      	b.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f4e:	4631      	mov	r1, r6
 8000f50:	e7ed      	b.n	8000f2e <__udivmoddi4+0x276>
 8000f52:	4603      	mov	r3, r0
 8000f54:	e799      	b.n	8000e8a <__udivmoddi4+0x1d2>
 8000f56:	4630      	mov	r0, r6
 8000f58:	e7d4      	b.n	8000f04 <__udivmoddi4+0x24c>
 8000f5a:	46d6      	mov	lr, sl
 8000f5c:	e77f      	b.n	8000e5e <__udivmoddi4+0x1a6>
 8000f5e:	4463      	add	r3, ip
 8000f60:	3802      	subs	r0, #2
 8000f62:	e74d      	b.n	8000e00 <__udivmoddi4+0x148>
 8000f64:	4606      	mov	r6, r0
 8000f66:	4623      	mov	r3, r4
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e70f      	b.n	8000d8c <__udivmoddi4+0xd4>
 8000f6c:	3e02      	subs	r6, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	e730      	b.n	8000dd4 <__udivmoddi4+0x11c>
 8000f72:	bf00      	nop

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <dcRemoval>:

#include "filter.h"


DC_FILTER_T dcRemoval(float x, float prev_w, float alpha)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b08b      	sub	sp, #44	@ 0x2c
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	ed87 0a05 	vstr	s0, [r7, #20]
 8000f82:	edc7 0a04 	vstr	s1, [r7, #16]
 8000f86:	ed87 1a03 	vstr	s2, [r7, #12]
  DC_FILTER_T filtered;
  filtered.w = x + alpha * prev_w;
 8000f8a:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f8e:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f96:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f9e:	edc7 7a06 	vstr	s15, [r7, #24]
  filtered.result = filtered.w - prev_w;
 8000fa2:	ed97 7a06 	vldr	s14, [r7, #24]
 8000fa6:	edd7 7a04 	vldr	s15, [r7, #16]
 8000faa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fae:	edc7 7a07 	vstr	s15, [r7, #28]

  return filtered;
 8000fb2:	f107 0320 	add.w	r3, r7, #32
 8000fb6:	f107 0218 	add.w	r2, r7, #24
 8000fba:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fbe:	e883 0003 	stmia.w	r3, {r0, r1}
 8000fc2:	6a3a      	ldr	r2, [r7, #32]
 8000fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fc6:	ee07 2a10 	vmov	s14, r2
 8000fca:	ee07 3a90 	vmov	s15, r3
}
 8000fce:	eeb0 0a47 	vmov.f32	s0, s14
 8000fd2:	eef0 0a67 	vmov.f32	s1, s15
 8000fd6:	372c      	adds	r7, #44	@ 0x2c
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr

08000fe0 <lowPassButterworthFilter>:

//Low pass butterworth filter order=1 alpha1=0.1
void lowPassButterworthFilter(float x, BUTTERWORTH_FILTER_T * filterResult)
{
 8000fe0:	b5b0      	push	{r4, r5, r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	ed87 0a01 	vstr	s0, [r7, #4]
 8000fea:	6038      	str	r0, [r7, #0]
	filterResult->v[0] = filterResult->v[1];
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685a      	ldr	r2, [r3, #4]
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	601a      	str	r2, [r3, #0]

    //Fs = 100Hz and Fc = 10Hz
    //filterResult->v[1] = (2.452372752527856026e-1 * x) + (0.50952544949442879485 * filterResult->v[0]);

    //Fs = 100Hz and Fc = 4Hz
    filterResult->v[1] = (1.367287359973195227e-1 * x) + (0.72654252800536101020 * filterResult->v[0]); //Very precise butterworth filter
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	f7ff faa7 	bl	8000548 <__aeabi_f2d>
 8000ffa:	a319      	add	r3, pc, #100	@ (adr r3, 8001060 <lowPassButterworthFilter+0x80>)
 8000ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001000:	f7ff fafa 	bl	80005f8 <__aeabi_dmul>
 8001004:	4602      	mov	r2, r0
 8001006:	460b      	mov	r3, r1
 8001008:	4614      	mov	r4, r2
 800100a:	461d      	mov	r5, r3
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff fa99 	bl	8000548 <__aeabi_f2d>
 8001016:	a314      	add	r3, pc, #80	@ (adr r3, 8001068 <lowPassButterworthFilter+0x88>)
 8001018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800101c:	f7ff faec 	bl	80005f8 <__aeabi_dmul>
 8001020:	4602      	mov	r2, r0
 8001022:	460b      	mov	r3, r1
 8001024:	4620      	mov	r0, r4
 8001026:	4629      	mov	r1, r5
 8001028:	f7ff f930 	bl	800028c <__adddf3>
 800102c:	4602      	mov	r2, r0
 800102e:	460b      	mov	r3, r1
 8001030:	4610      	mov	r0, r2
 8001032:	4619      	mov	r1, r3
 8001034:	f7ff fdd8 	bl	8000be8 <__aeabi_d2f>
 8001038:	4602      	mov	r2, r0
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	605a      	str	r2, [r3, #4]

    filterResult->result = filterResult->v[0] + filterResult->v[1];
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	ed93 7a00 	vldr	s14, [r3]
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	edd3 7a01 	vldr	s15, [r3, #4]
 800104a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8001054:	bf00      	nop
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bdb0      	pop	{r4, r5, r7, pc}
 800105c:	f3af 8000 	nop.w
 8001060:	c4c41579 	.word	0xc4c41579
 8001064:	3fc18053 	.word	0x3fc18053
 8001068:	1d9df544 	.word	0x1d9df544
 800106c:	3fe73fd6 	.word	0x3fe73fd6

08001070 <meanDiff>:

float meanDiff(float M, MEAN_DIFF_FILTER_T* filterValues)
{
 8001070:	b480      	push	{r7}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
 8001076:	ed87 0a01 	vstr	s0, [r7, #4]
 800107a:	6038      	str	r0, [r7, #0]
  float avg = 0;
 800107c:	f04f 0300 	mov.w	r3, #0
 8001080:	60fb      	str	r3, [r7, #12]

  filterValues->sum -= filterValues->values[filterValues->index];
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800108e:	683a      	ldr	r2, [r7, #0]
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	4413      	add	r3, r2
 8001094:	edd3 7a00 	vldr	s15, [r3]
 8001098:	ee77 7a67 	vsub.f32	s15, s14, s15
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
  filterValues->values[filterValues->index] = M;
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80010a8:	683a      	ldr	r2, [r7, #0]
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	4413      	add	r3, r2
 80010ae:	687a      	ldr	r2, [r7, #4]
 80010b0:	601a      	str	r2, [r3, #0]
  filterValues->sum += filterValues->values[filterValues->index];
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80010be:	683a      	ldr	r2, [r7, #0]
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	4413      	add	r3, r2
 80010c4:	edd3 7a00 	vldr	s15, [r3]
 80010c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40

  filterValues->index++;
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80010d8:	3301      	adds	r3, #1
 80010da:	b2da      	uxtb	r2, r3
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  filterValues->index = filterValues->index % MEAN_FILTER_SIZE;
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	f893 203c 	ldrb.w	r2, [r3, #60]	@ 0x3c
 80010e8:	4b19      	ldr	r3, [pc, #100]	@ (8001150 <meanDiff+0xe0>)
 80010ea:	fba3 1302 	umull	r1, r3, r3, r2
 80010ee:	08d9      	lsrs	r1, r3, #3
 80010f0:	460b      	mov	r3, r1
 80010f2:	011b      	lsls	r3, r3, #4
 80010f4:	1a5b      	subs	r3, r3, r1
 80010f6:	1ad3      	subs	r3, r2, r3
 80010f8:	b2da      	uxtb	r2, r3
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(filterValues->count < MEAN_FILTER_SIZE)
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001106:	2b0e      	cmp	r3, #14
 8001108:	d807      	bhi.n	800111a <meanDiff+0xaa>
    filterValues->count++;
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001110:	3301      	adds	r3, #1
 8001112:	b2da      	uxtb	r2, r3
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  avg = filterValues->sum / filterValues->count;
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	edd3 6a10 	vldr	s13, [r3, #64]	@ 0x40
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001126:	ee07 3a90 	vmov	s15, r3
 800112a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800112e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001132:	edc7 7a03 	vstr	s15, [r7, #12]
  return avg - M;
 8001136:	ed97 7a03 	vldr	s14, [r7, #12]
 800113a:	edd7 7a01 	vldr	s15, [r7, #4]
 800113e:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8001142:	eeb0 0a67 	vmov.f32	s0, s15
 8001146:	3714      	adds	r7, #20
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr
 8001150:	88888889 	.word	0x88888889

08001154 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800115a:	f001 fc2b 	bl	80029b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800115e:	f000 f8bf 	bl	80012e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001162:	f000 fab5 	bl	80016d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001166:	f000 fa7d 	bl	8001664 <MX_DMA_Init>
  MX_I2C1_Init();
 800116a:	f000 f983 	bl	8001474 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 800116e:	f00b fa0f 	bl	800c590 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8001172:	f000 f91f 	bl	80013b4 <MX_ADC1_Init>
  MX_I2S2_Init();
 8001176:	f000 f9ab 	bl	80014d0 <MX_I2S2_Init>
  MX_TIM2_Init();
 800117a:	f000 f9d7 	bl	800152c <MX_TIM2_Init>
  MX_UART4_Init();
 800117e:	f000 fa47 	bl	8001610 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

    MAX30102_Init(); // configure the heart rate sensor
 8001182:	f000 fcf7 	bl	8001b74 <MAX30102_Init>
		i2s_buffer[2 * i] = (int16_t)(10000.0f * sinf(2.0f * PI * adjusted_freq * i / SAMPLE_RATE)); // Left channel (sine wave)
		i2s_buffer[2 * i + 1] = 0; // Right channel (silence)
	}
    HAL_I2S_Transmit_DMA(&hi2s2, (uint16_t *)i2s_buffer, 2 * num_cycles);
*/
    HAL_TIM_Base_Start(&htim2); // enable microphone sample timer
 8001186:	4845      	ldr	r0, [pc, #276]	@ (800129c <main+0x148>)
 8001188:	f006 fd5e 	bl	8007c48 <HAL_TIM_Base_Start>

    HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, 2 * MIC_OVERSAMPLING); // cast to 32 because STM moment
 800118c:	2208      	movs	r2, #8
 800118e:	4944      	ldr	r1, [pc, #272]	@ (80012a0 <main+0x14c>)
 8001190:	4844      	ldr	r0, [pc, #272]	@ (80012a4 <main+0x150>)
 8001192:	f001 fce9 	bl	8002b68 <HAL_ADC_Start_DMA>
	HAL_I2S_Transmit_DMA(&hi2s2, (uint16_t*)audio_tx_buffer, 2);
 8001196:	2202      	movs	r2, #2
 8001198:	4943      	ldr	r1, [pc, #268]	@ (80012a8 <main+0x154>)
 800119a:	4844      	ldr	r0, [pc, #272]	@ (80012ac <main+0x158>)
 800119c:	f004 f876 	bl	800528c <HAL_I2S_Transmit_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	currentMillis = millis();
 80011a0:	f001 fbc4 	bl	800292c <millis>
 80011a4:	4603      	mov	r3, r0
 80011a6:	461a      	mov	r2, r3
 80011a8:	4b41      	ldr	r3, [pc, #260]	@ (80012b0 <main+0x15c>)
 80011aa:	601a      	str	r2, [r3, #0]

	while (1)
	{
		if( pulseOximiterIntFlag )
 80011ac:	4b41      	ldr	r3, [pc, #260]	@ (80012b4 <main+0x160>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d009      	beq.n	80011ca <main+0x76>
		{
			if (MAX30102_DumpFifo() == HAL_OK) {
 80011b6:	f000 fd55 	bl	8001c64 <MAX30102_DumpFifo>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d104      	bne.n	80011ca <main+0x76>

				pulseOximiterIntFlag = 0;
 80011c0:	4b3c      	ldr	r3, [pc, #240]	@ (80012b4 <main+0x160>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	701a      	strb	r2, [r3, #0]

				MAX30102_ProcessData();
 80011c6:	f000 fd5f 	bl	8001c88 <MAX30102_ProcessData>
			}
		}

		// Display the data over the built in USB every 5 seconds
		currentMillis = millis();
 80011ca:	f001 fbaf 	bl	800292c <millis>
 80011ce:	4603      	mov	r3, r0
 80011d0:	461a      	mov	r2, r3
 80011d2:	4b37      	ldr	r3, [pc, #220]	@ (80012b0 <main+0x15c>)
 80011d4:	601a      	str	r2, [r3, #0]
		if( currentMillis - lastMillis > SEND_PULSEOX_PERIOD_MS )
 80011d6:	4b36      	ldr	r3, [pc, #216]	@ (80012b0 <main+0x15c>)
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	4b37      	ldr	r3, [pc, #220]	@ (80012b8 <main+0x164>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	1ad3      	subs	r3, r2, r3
 80011e0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80011e4:	dde2      	ble.n	80011ac <main+0x58>
		{
			float bpm = MAX30102_getBPM();
 80011e6:	f001 f865 	bl	80022b4 <MAX30102_getBPM>
 80011ea:	ed87 0a03 	vstr	s0, [r7, #12]
			float spo2 = MAX30102_getSPO2();
 80011ee:	f001 f86f 	bl	80022d0 <MAX30102_getSPO2>
 80011f2:	ed87 0a02 	vstr	s0, [r7, #8]

			// Convert BPM to 8-bit integer
			if (bpm > 255.0f) bpm = 255.0f;
 80011f6:	edd7 7a03 	vldr	s15, [r7, #12]
 80011fa:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80012bc <main+0x168>
 80011fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001206:	dd01      	ble.n	800120c <main+0xb8>
 8001208:	4b2d      	ldr	r3, [pc, #180]	@ (80012c0 <main+0x16c>)
 800120a:	60fb      	str	r3, [r7, #12]
			txBuffer[0] = (uint8_t)bpm;
 800120c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001210:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001214:	edc7 7a01 	vstr	s15, [r7, #4]
 8001218:	793b      	ldrb	r3, [r7, #4]
 800121a:	b2da      	uxtb	r2, r3
 800121c:	4b29      	ldr	r3, [pc, #164]	@ (80012c4 <main+0x170>)
 800121e:	701a      	strb	r2, [r3, #0]

			// Convert SpO2 to 8-bit integer with range mapping (90%-100%)
			if (spo2 < 90.0f) spo2 = 90.0f;
 8001220:	edd7 7a02 	vldr	s15, [r7, #8]
 8001224:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 80012c8 <main+0x174>
 8001228:	eef4 7ac7 	vcmpe.f32	s15, s14
 800122c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001230:	d501      	bpl.n	8001236 <main+0xe2>
 8001232:	4b26      	ldr	r3, [pc, #152]	@ (80012cc <main+0x178>)
 8001234:	60bb      	str	r3, [r7, #8]
			if (spo2 > 100.0f) spo2 = 100.0f;
 8001236:	edd7 7a02 	vldr	s15, [r7, #8]
 800123a:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 80012d0 <main+0x17c>
 800123e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001246:	dd01      	ble.n	800124c <main+0xf8>
 8001248:	4b22      	ldr	r3, [pc, #136]	@ (80012d4 <main+0x180>)
 800124a:	60bb      	str	r3, [r7, #8]
			txBuffer[1] = (uint8_t)((spo2 - 90.0f) * 255.0f / 10.0f);
 800124c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001250:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80012c8 <main+0x174>
 8001254:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001258:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80012bc <main+0x168>
 800125c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001260:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8001264:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001268:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800126c:	edc7 7a01 	vstr	s15, [r7, #4]
 8001270:	793b      	ldrb	r3, [r7, #4]
 8001272:	b2da      	uxtb	r2, r3
 8001274:	4b13      	ldr	r3, [pc, #76]	@ (80012c4 <main+0x170>)
 8001276:	705a      	strb	r2, [r3, #1]

			// Transmit the data over UART
			HAL_UART_Transmit(&huart4, txBuffer, 2, HAL_MAX_DELAY);
 8001278:	f04f 33ff 	mov.w	r3, #4294967295
 800127c:	2202      	movs	r2, #2
 800127e:	4911      	ldr	r1, [pc, #68]	@ (80012c4 <main+0x170>)
 8001280:	4815      	ldr	r0, [pc, #84]	@ (80012d8 <main+0x184>)
 8001282:	f007 faef 	bl	8008864 <HAL_UART_Transmit>

			HAL_GPIO_TogglePin(GPIOD, LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin);
 8001286:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 800128a:	4814      	ldr	r0, [pc, #80]	@ (80012dc <main+0x188>)
 800128c:	f002 fe67 	bl	8003f5e <HAL_GPIO_TogglePin>
			lastMillis = currentMillis;
 8001290:	4b07      	ldr	r3, [pc, #28]	@ (80012b0 <main+0x15c>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a08      	ldr	r2, [pc, #32]	@ (80012b8 <main+0x164>)
 8001296:	6013      	str	r3, [r2, #0]
		if( pulseOximiterIntFlag )
 8001298:	e788      	b.n	80011ac <main+0x58>
 800129a:	bf00      	nop
 800129c:	20000498 	.word	0x20000498
 80012a0:	20000534 	.word	0x20000534
 80012a4:	200002f4 	.word	0x200002f4
 80012a8:	20000544 	.word	0x20000544
 80012ac:	200003f0 	.word	0x200003f0
 80012b0:	20000528 	.word	0x20000528
 80012b4:	20000530 	.word	0x20000530
 80012b8:	2000052c 	.word	0x2000052c
 80012bc:	437f0000 	.word	0x437f0000
 80012c0:	437f0000 	.word	0x437f0000
 80012c4:	20000548 	.word	0x20000548
 80012c8:	42b40000 	.word	0x42b40000
 80012cc:	42b40000 	.word	0x42b40000
 80012d0:	42c80000 	.word	0x42c80000
 80012d4:	42c80000 	.word	0x42c80000
 80012d8:	200004e0 	.word	0x200004e0
 80012dc:	40020c00 	.word	0x40020c00

080012e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b094      	sub	sp, #80	@ 0x50
 80012e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012e6:	f107 0320 	add.w	r3, r7, #32
 80012ea:	2230      	movs	r2, #48	@ 0x30
 80012ec:	2100      	movs	r1, #0
 80012ee:	4618      	mov	r0, r3
 80012f0:	f00c fd2d 	bl	800dd4e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012f4:	f107 030c 	add.w	r3, r7, #12
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
 8001300:	60da      	str	r2, [r3, #12]
 8001302:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001304:	2300      	movs	r3, #0
 8001306:	60bb      	str	r3, [r7, #8]
 8001308:	4b28      	ldr	r3, [pc, #160]	@ (80013ac <SystemClock_Config+0xcc>)
 800130a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800130c:	4a27      	ldr	r2, [pc, #156]	@ (80013ac <SystemClock_Config+0xcc>)
 800130e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001312:	6413      	str	r3, [r2, #64]	@ 0x40
 8001314:	4b25      	ldr	r3, [pc, #148]	@ (80013ac <SystemClock_Config+0xcc>)
 8001316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001318:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800131c:	60bb      	str	r3, [r7, #8]
 800131e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001320:	2300      	movs	r3, #0
 8001322:	607b      	str	r3, [r7, #4]
 8001324:	4b22      	ldr	r3, [pc, #136]	@ (80013b0 <SystemClock_Config+0xd0>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a21      	ldr	r2, [pc, #132]	@ (80013b0 <SystemClock_Config+0xd0>)
 800132a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800132e:	6013      	str	r3, [r2, #0]
 8001330:	4b1f      	ldr	r3, [pc, #124]	@ (80013b0 <SystemClock_Config+0xd0>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001338:	607b      	str	r3, [r7, #4]
 800133a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800133c:	2301      	movs	r3, #1
 800133e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001340:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001344:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001346:	2302      	movs	r3, #2
 8001348:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800134a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800134e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001350:	2308      	movs	r3, #8
 8001352:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001354:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001358:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800135a:	2302      	movs	r3, #2
 800135c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800135e:	2307      	movs	r3, #7
 8001360:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001362:	f107 0320 	add.w	r3, r7, #32
 8001366:	4618      	mov	r0, r3
 8001368:	f005 fe44 	bl	8006ff4 <HAL_RCC_OscConfig>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001372:	f000 fba9 	bl	8001ac8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001376:	230f      	movs	r3, #15
 8001378:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800137a:	2302      	movs	r3, #2
 800137c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800137e:	2300      	movs	r3, #0
 8001380:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001382:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001386:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001388:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800138c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800138e:	f107 030c 	add.w	r3, r7, #12
 8001392:	2105      	movs	r1, #5
 8001394:	4618      	mov	r0, r3
 8001396:	f006 f8a5 	bl	80074e4 <HAL_RCC_ClockConfig>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80013a0:	f000 fb92 	bl	8001ac8 <Error_Handler>
  }
}
 80013a4:	bf00      	nop
 80013a6:	3750      	adds	r7, #80	@ 0x50
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	40023800 	.word	0x40023800
 80013b0:	40007000 	.word	0x40007000

080013b4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013ba:	463b      	mov	r3, r7
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	605a      	str	r2, [r3, #4]
 80013c2:	609a      	str	r2, [r3, #8]
 80013c4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80013c6:	4b29      	ldr	r3, [pc, #164]	@ (800146c <MX_ADC1_Init+0xb8>)
 80013c8:	4a29      	ldr	r2, [pc, #164]	@ (8001470 <MX_ADC1_Init+0xbc>)
 80013ca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80013cc:	4b27      	ldr	r3, [pc, #156]	@ (800146c <MX_ADC1_Init+0xb8>)
 80013ce:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80013d2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80013d4:	4b25      	ldr	r3, [pc, #148]	@ (800146c <MX_ADC1_Init+0xb8>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80013da:	4b24      	ldr	r3, [pc, #144]	@ (800146c <MX_ADC1_Init+0xb8>)
 80013dc:	2201      	movs	r2, #1
 80013de:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80013e0:	4b22      	ldr	r3, [pc, #136]	@ (800146c <MX_ADC1_Init+0xb8>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013e6:	4b21      	ldr	r3, [pc, #132]	@ (800146c <MX_ADC1_Init+0xb8>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80013ee:	4b1f      	ldr	r3, [pc, #124]	@ (800146c <MX_ADC1_Init+0xb8>)
 80013f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80013f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 80013f6:	4b1d      	ldr	r3, [pc, #116]	@ (800146c <MX_ADC1_Init+0xb8>)
 80013f8:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80013fc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013fe:	4b1b      	ldr	r3, [pc, #108]	@ (800146c <MX_ADC1_Init+0xb8>)
 8001400:	2200      	movs	r2, #0
 8001402:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001404:	4b19      	ldr	r3, [pc, #100]	@ (800146c <MX_ADC1_Init+0xb8>)
 8001406:	2202      	movs	r2, #2
 8001408:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800140a:	4b18      	ldr	r3, [pc, #96]	@ (800146c <MX_ADC1_Init+0xb8>)
 800140c:	2201      	movs	r2, #1
 800140e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001412:	4b16      	ldr	r3, [pc, #88]	@ (800146c <MX_ADC1_Init+0xb8>)
 8001414:	2201      	movs	r2, #1
 8001416:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001418:	4814      	ldr	r0, [pc, #80]	@ (800146c <MX_ADC1_Init+0xb8>)
 800141a:	f001 fb61 	bl	8002ae0 <HAL_ADC_Init>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001424:	f000 fb50 	bl	8001ac8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001428:	2300      	movs	r3, #0
 800142a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800142c:	2301      	movs	r3, #1
 800142e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8001430:	2302      	movs	r3, #2
 8001432:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001434:	463b      	mov	r3, r7
 8001436:	4619      	mov	r1, r3
 8001438:	480c      	ldr	r0, [pc, #48]	@ (800146c <MX_ADC1_Init+0xb8>)
 800143a:	f001 fcb9 	bl	8002db0 <HAL_ADC_ConfigChannel>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001444:	f000 fb40 	bl	8001ac8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001448:	2301      	movs	r3, #1
 800144a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800144c:	2302      	movs	r3, #2
 800144e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001450:	463b      	mov	r3, r7
 8001452:	4619      	mov	r1, r3
 8001454:	4805      	ldr	r0, [pc, #20]	@ (800146c <MX_ADC1_Init+0xb8>)
 8001456:	f001 fcab 	bl	8002db0 <HAL_ADC_ConfigChannel>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8001460:	f000 fb32 	bl	8001ac8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001464:	bf00      	nop
 8001466:	3710      	adds	r7, #16
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	200002f4 	.word	0x200002f4
 8001470:	40012000 	.word	0x40012000

08001474 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001478:	4b12      	ldr	r3, [pc, #72]	@ (80014c4 <MX_I2C1_Init+0x50>)
 800147a:	4a13      	ldr	r2, [pc, #76]	@ (80014c8 <MX_I2C1_Init+0x54>)
 800147c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800147e:	4b11      	ldr	r3, [pc, #68]	@ (80014c4 <MX_I2C1_Init+0x50>)
 8001480:	4a12      	ldr	r2, [pc, #72]	@ (80014cc <MX_I2C1_Init+0x58>)
 8001482:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001484:	4b0f      	ldr	r3, [pc, #60]	@ (80014c4 <MX_I2C1_Init+0x50>)
 8001486:	2200      	movs	r2, #0
 8001488:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800148a:	4b0e      	ldr	r3, [pc, #56]	@ (80014c4 <MX_I2C1_Init+0x50>)
 800148c:	2200      	movs	r2, #0
 800148e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001490:	4b0c      	ldr	r3, [pc, #48]	@ (80014c4 <MX_I2C1_Init+0x50>)
 8001492:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001496:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001498:	4b0a      	ldr	r3, [pc, #40]	@ (80014c4 <MX_I2C1_Init+0x50>)
 800149a:	2200      	movs	r2, #0
 800149c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800149e:	4b09      	ldr	r3, [pc, #36]	@ (80014c4 <MX_I2C1_Init+0x50>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014a4:	4b07      	ldr	r3, [pc, #28]	@ (80014c4 <MX_I2C1_Init+0x50>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014aa:	4b06      	ldr	r3, [pc, #24]	@ (80014c4 <MX_I2C1_Init+0x50>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014b0:	4804      	ldr	r0, [pc, #16]	@ (80014c4 <MX_I2C1_Init+0x50>)
 80014b2:	f002 fd87 	bl	8003fc4 <HAL_I2C_Init>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80014bc:	f000 fb04 	bl	8001ac8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014c0:	bf00      	nop
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	2000039c 	.word	0x2000039c
 80014c8:	40005400 	.word	0x40005400
 80014cc:	00061a80 	.word	0x00061a80

080014d0 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80014d4:	4b13      	ldr	r3, [pc, #76]	@ (8001524 <MX_I2S2_Init+0x54>)
 80014d6:	4a14      	ldr	r2, [pc, #80]	@ (8001528 <MX_I2S2_Init+0x58>)
 80014d8:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80014da:	4b12      	ldr	r3, [pc, #72]	@ (8001524 <MX_I2S2_Init+0x54>)
 80014dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014e0:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80014e2:	4b10      	ldr	r3, [pc, #64]	@ (8001524 <MX_I2S2_Init+0x54>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 80014e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001524 <MX_I2S2_Init+0x54>)
 80014ea:	2201      	movs	r2, #1
 80014ec:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80014ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001524 <MX_I2S2_Init+0x54>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 80014f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001524 <MX_I2S2_Init+0x54>)
 80014f6:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 80014fa:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80014fc:	4b09      	ldr	r3, [pc, #36]	@ (8001524 <MX_I2S2_Init+0x54>)
 80014fe:	2200      	movs	r2, #0
 8001500:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8001502:	4b08      	ldr	r3, [pc, #32]	@ (8001524 <MX_I2S2_Init+0x54>)
 8001504:	2200      	movs	r2, #0
 8001506:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001508:	4b06      	ldr	r3, [pc, #24]	@ (8001524 <MX_I2S2_Init+0x54>)
 800150a:	2200      	movs	r2, #0
 800150c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800150e:	4805      	ldr	r0, [pc, #20]	@ (8001524 <MX_I2S2_Init+0x54>)
 8001510:	f003 fd7c 	bl	800500c <HAL_I2S_Init>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 800151a:	f000 fad5 	bl	8001ac8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	200003f0 	.word	0x200003f0
 8001528:	40003800 	.word	0x40003800

0800152c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b08e      	sub	sp, #56	@ 0x38
 8001530:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001532:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001536:	2200      	movs	r2, #0
 8001538:	601a      	str	r2, [r3, #0]
 800153a:	605a      	str	r2, [r3, #4]
 800153c:	609a      	str	r2, [r3, #8]
 800153e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001540:	f107 0320 	add.w	r3, r7, #32
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800154a:	1d3b      	adds	r3, r7, #4
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	605a      	str	r2, [r3, #4]
 8001552:	609a      	str	r2, [r3, #8]
 8001554:	60da      	str	r2, [r3, #12]
 8001556:	611a      	str	r2, [r3, #16]
 8001558:	615a      	str	r2, [r3, #20]
 800155a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800155c:	4b2b      	ldr	r3, [pc, #172]	@ (800160c <MX_TIM2_Init+0xe0>)
 800155e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001562:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001564:	4b29      	ldr	r3, [pc, #164]	@ (800160c <MX_TIM2_Init+0xe0>)
 8001566:	2200      	movs	r2, #0
 8001568:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800156a:	4b28      	ldr	r3, [pc, #160]	@ (800160c <MX_TIM2_Init+0xe0>)
 800156c:	2200      	movs	r2, #0
 800156e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 439;
 8001570:	4b26      	ldr	r3, [pc, #152]	@ (800160c <MX_TIM2_Init+0xe0>)
 8001572:	f240 12b7 	movw	r2, #439	@ 0x1b7
 8001576:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001578:	4b24      	ldr	r3, [pc, #144]	@ (800160c <MX_TIM2_Init+0xe0>)
 800157a:	2200      	movs	r2, #0
 800157c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800157e:	4b23      	ldr	r3, [pc, #140]	@ (800160c <MX_TIM2_Init+0xe0>)
 8001580:	2200      	movs	r2, #0
 8001582:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001584:	4821      	ldr	r0, [pc, #132]	@ (800160c <MX_TIM2_Init+0xe0>)
 8001586:	f006 fb0f 	bl	8007ba8 <HAL_TIM_Base_Init>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001590:	f000 fa9a 	bl	8001ac8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001594:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001598:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800159a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800159e:	4619      	mov	r1, r3
 80015a0:	481a      	ldr	r0, [pc, #104]	@ (800160c <MX_TIM2_Init+0xe0>)
 80015a2:	f006 fcd5 	bl	8007f50 <HAL_TIM_ConfigClockSource>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80015ac:	f000 fa8c 	bl	8001ac8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80015b0:	4816      	ldr	r0, [pc, #88]	@ (800160c <MX_TIM2_Init+0xe0>)
 80015b2:	f006 fbb1 	bl	8007d18 <HAL_TIM_PWM_Init>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80015bc:	f000 fa84 	bl	8001ac8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80015c0:	2320      	movs	r3, #32
 80015c2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015c4:	2300      	movs	r3, #0
 80015c6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015c8:	f107 0320 	add.w	r3, r7, #32
 80015cc:	4619      	mov	r1, r3
 80015ce:	480f      	ldr	r0, [pc, #60]	@ (800160c <MX_TIM2_Init+0xe0>)
 80015d0:	f007 f87c 	bl	80086cc <HAL_TIMEx_MasterConfigSynchronization>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80015da:	f000 fa75 	bl	8001ac8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015de:	2360      	movs	r3, #96	@ 0x60
 80015e0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80015e2:	2300      	movs	r3, #0
 80015e4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015e6:	2300      	movs	r3, #0
 80015e8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015ea:	2300      	movs	r3, #0
 80015ec:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015ee:	1d3b      	adds	r3, r7, #4
 80015f0:	2200      	movs	r2, #0
 80015f2:	4619      	mov	r1, r3
 80015f4:	4805      	ldr	r0, [pc, #20]	@ (800160c <MX_TIM2_Init+0xe0>)
 80015f6:	f006 fbe9 	bl	8007dcc <HAL_TIM_PWM_ConfigChannel>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001600:	f000 fa62 	bl	8001ac8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001604:	bf00      	nop
 8001606:	3738      	adds	r7, #56	@ 0x38
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	20000498 	.word	0x20000498

08001610 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001614:	4b11      	ldr	r3, [pc, #68]	@ (800165c <MX_UART4_Init+0x4c>)
 8001616:	4a12      	ldr	r2, [pc, #72]	@ (8001660 <MX_UART4_Init+0x50>)
 8001618:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 800161a:	4b10      	ldr	r3, [pc, #64]	@ (800165c <MX_UART4_Init+0x4c>)
 800161c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001620:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001622:	4b0e      	ldr	r3, [pc, #56]	@ (800165c <MX_UART4_Init+0x4c>)
 8001624:	2200      	movs	r2, #0
 8001626:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001628:	4b0c      	ldr	r3, [pc, #48]	@ (800165c <MX_UART4_Init+0x4c>)
 800162a:	2200      	movs	r2, #0
 800162c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800162e:	4b0b      	ldr	r3, [pc, #44]	@ (800165c <MX_UART4_Init+0x4c>)
 8001630:	2200      	movs	r2, #0
 8001632:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001634:	4b09      	ldr	r3, [pc, #36]	@ (800165c <MX_UART4_Init+0x4c>)
 8001636:	220c      	movs	r2, #12
 8001638:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800163a:	4b08      	ldr	r3, [pc, #32]	@ (800165c <MX_UART4_Init+0x4c>)
 800163c:	2200      	movs	r2, #0
 800163e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001640:	4b06      	ldr	r3, [pc, #24]	@ (800165c <MX_UART4_Init+0x4c>)
 8001642:	2200      	movs	r2, #0
 8001644:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001646:	4805      	ldr	r0, [pc, #20]	@ (800165c <MX_UART4_Init+0x4c>)
 8001648:	f007 f8bc 	bl	80087c4 <HAL_UART_Init>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001652:	f000 fa39 	bl	8001ac8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001656:	bf00      	nop
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	200004e0 	.word	0x200004e0
 8001660:	40004c00 	.word	0x40004c00

08001664 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800166a:	2300      	movs	r3, #0
 800166c:	607b      	str	r3, [r7, #4]
 800166e:	4b17      	ldr	r3, [pc, #92]	@ (80016cc <MX_DMA_Init+0x68>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001672:	4a16      	ldr	r2, [pc, #88]	@ (80016cc <MX_DMA_Init+0x68>)
 8001674:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001678:	6313      	str	r3, [r2, #48]	@ 0x30
 800167a:	4b14      	ldr	r3, [pc, #80]	@ (80016cc <MX_DMA_Init+0x68>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001682:	607b      	str	r3, [r7, #4]
 8001684:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	603b      	str	r3, [r7, #0]
 800168a:	4b10      	ldr	r3, [pc, #64]	@ (80016cc <MX_DMA_Init+0x68>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800168e:	4a0f      	ldr	r2, [pc, #60]	@ (80016cc <MX_DMA_Init+0x68>)
 8001690:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001694:	6313      	str	r3, [r2, #48]	@ 0x30
 8001696:	4b0d      	ldr	r3, [pc, #52]	@ (80016cc <MX_DMA_Init+0x68>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800169a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800169e:	603b      	str	r3, [r7, #0]
 80016a0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80016a2:	2200      	movs	r2, #0
 80016a4:	2100      	movs	r1, #0
 80016a6:	200f      	movs	r0, #15
 80016a8:	f001 fefd 	bl	80034a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80016ac:	200f      	movs	r0, #15
 80016ae:	f001 ff16 	bl	80034de <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80016b2:	2200      	movs	r2, #0
 80016b4:	2100      	movs	r1, #0
 80016b6:	2038      	movs	r0, #56	@ 0x38
 80016b8:	f001 fef5 	bl	80034a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80016bc:	2038      	movs	r0, #56	@ 0x38
 80016be:	f001 ff0e 	bl	80034de <HAL_NVIC_EnableIRQ>

}
 80016c2:	bf00      	nop
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	40023800 	.word	0x40023800

080016d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b08c      	sub	sp, #48	@ 0x30
 80016d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d6:	f107 031c 	add.w	r3, r7, #28
 80016da:	2200      	movs	r2, #0
 80016dc:	601a      	str	r2, [r3, #0]
 80016de:	605a      	str	r2, [r3, #4]
 80016e0:	609a      	str	r2, [r3, #8]
 80016e2:	60da      	str	r2, [r3, #12]
 80016e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	61bb      	str	r3, [r7, #24]
 80016ea:	4b7f      	ldr	r3, [pc, #508]	@ (80018e8 <MX_GPIO_Init+0x218>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ee:	4a7e      	ldr	r2, [pc, #504]	@ (80018e8 <MX_GPIO_Init+0x218>)
 80016f0:	f043 0310 	orr.w	r3, r3, #16
 80016f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016f6:	4b7c      	ldr	r3, [pc, #496]	@ (80018e8 <MX_GPIO_Init+0x218>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fa:	f003 0310 	and.w	r3, r3, #16
 80016fe:	61bb      	str	r3, [r7, #24]
 8001700:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001702:	2300      	movs	r3, #0
 8001704:	617b      	str	r3, [r7, #20]
 8001706:	4b78      	ldr	r3, [pc, #480]	@ (80018e8 <MX_GPIO_Init+0x218>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800170a:	4a77      	ldr	r2, [pc, #476]	@ (80018e8 <MX_GPIO_Init+0x218>)
 800170c:	f043 0304 	orr.w	r3, r3, #4
 8001710:	6313      	str	r3, [r2, #48]	@ 0x30
 8001712:	4b75      	ldr	r3, [pc, #468]	@ (80018e8 <MX_GPIO_Init+0x218>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001716:	f003 0304 	and.w	r3, r3, #4
 800171a:	617b      	str	r3, [r7, #20]
 800171c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800171e:	2300      	movs	r3, #0
 8001720:	613b      	str	r3, [r7, #16]
 8001722:	4b71      	ldr	r3, [pc, #452]	@ (80018e8 <MX_GPIO_Init+0x218>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001726:	4a70      	ldr	r2, [pc, #448]	@ (80018e8 <MX_GPIO_Init+0x218>)
 8001728:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800172c:	6313      	str	r3, [r2, #48]	@ 0x30
 800172e:	4b6e      	ldr	r3, [pc, #440]	@ (80018e8 <MX_GPIO_Init+0x218>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001732:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001736:	613b      	str	r3, [r7, #16]
 8001738:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800173a:	2300      	movs	r3, #0
 800173c:	60fb      	str	r3, [r7, #12]
 800173e:	4b6a      	ldr	r3, [pc, #424]	@ (80018e8 <MX_GPIO_Init+0x218>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001742:	4a69      	ldr	r2, [pc, #420]	@ (80018e8 <MX_GPIO_Init+0x218>)
 8001744:	f043 0301 	orr.w	r3, r3, #1
 8001748:	6313      	str	r3, [r2, #48]	@ 0x30
 800174a:	4b67      	ldr	r3, [pc, #412]	@ (80018e8 <MX_GPIO_Init+0x218>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800174e:	f003 0301 	and.w	r3, r3, #1
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001756:	2300      	movs	r3, #0
 8001758:	60bb      	str	r3, [r7, #8]
 800175a:	4b63      	ldr	r3, [pc, #396]	@ (80018e8 <MX_GPIO_Init+0x218>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175e:	4a62      	ldr	r2, [pc, #392]	@ (80018e8 <MX_GPIO_Init+0x218>)
 8001760:	f043 0302 	orr.w	r3, r3, #2
 8001764:	6313      	str	r3, [r2, #48]	@ 0x30
 8001766:	4b60      	ldr	r3, [pc, #384]	@ (80018e8 <MX_GPIO_Init+0x218>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800176a:	f003 0302 	and.w	r3, r3, #2
 800176e:	60bb      	str	r3, [r7, #8]
 8001770:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	607b      	str	r3, [r7, #4]
 8001776:	4b5c      	ldr	r3, [pc, #368]	@ (80018e8 <MX_GPIO_Init+0x218>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800177a:	4a5b      	ldr	r2, [pc, #364]	@ (80018e8 <MX_GPIO_Init+0x218>)
 800177c:	f043 0308 	orr.w	r3, r3, #8
 8001780:	6313      	str	r3, [r2, #48]	@ 0x30
 8001782:	4b59      	ldr	r3, [pc, #356]	@ (80018e8 <MX_GPIO_Init+0x218>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001786:	f003 0308 	and.w	r3, r3, #8
 800178a:	607b      	str	r3, [r7, #4]
 800178c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800178e:	2200      	movs	r2, #0
 8001790:	2108      	movs	r1, #8
 8001792:	4856      	ldr	r0, [pc, #344]	@ (80018ec <MX_GPIO_Init+0x21c>)
 8001794:	f002 fbca 	bl	8003f2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001798:	2201      	movs	r2, #1
 800179a:	2101      	movs	r1, #1
 800179c:	4854      	ldr	r0, [pc, #336]	@ (80018f0 <MX_GPIO_Init+0x220>)
 800179e:	f002 fbc5 	bl	8003f2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADC_debug_GPIO_Port, ADC_debug_Pin, GPIO_PIN_RESET);
 80017a2:	2200      	movs	r2, #0
 80017a4:	2102      	movs	r1, #2
 80017a6:	4852      	ldr	r0, [pc, #328]	@ (80018f0 <MX_GPIO_Init+0x220>)
 80017a8:	f002 fbc0 	bl	8003f2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80017ac:	2200      	movs	r2, #0
 80017ae:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80017b2:	4850      	ldr	r0, [pc, #320]	@ (80018f4 <MX_GPIO_Init+0x224>)
 80017b4:	f002 fbba 	bl	8003f2c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80017b8:	2308      	movs	r3, #8
 80017ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017bc:	2301      	movs	r3, #1
 80017be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c0:	2300      	movs	r3, #0
 80017c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c4:	2300      	movs	r3, #0
 80017c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80017c8:	f107 031c 	add.w	r3, r7, #28
 80017cc:	4619      	mov	r1, r3
 80017ce:	4847      	ldr	r0, [pc, #284]	@ (80018ec <MX_GPIO_Init+0x21c>)
 80017d0:	f002 fa10 	bl	8003bf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80017d4:	2301      	movs	r3, #1
 80017d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017d8:	2301      	movs	r3, #1
 80017da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017dc:	2300      	movs	r3, #0
 80017de:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e0:	2300      	movs	r3, #0
 80017e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80017e4:	f107 031c 	add.w	r3, r7, #28
 80017e8:	4619      	mov	r1, r3
 80017ea:	4841      	ldr	r0, [pc, #260]	@ (80018f0 <MX_GPIO_Init+0x220>)
 80017ec:	f002 fa02 	bl	8003bf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_debug_Pin */
  GPIO_InitStruct.Pin = ADC_debug_Pin;
 80017f0:	2302      	movs	r3, #2
 80017f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017f4:	2301      	movs	r3, #1
 80017f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f8:	2300      	movs	r3, #0
 80017fa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017fc:	2303      	movs	r3, #3
 80017fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ADC_debug_GPIO_Port, &GPIO_InitStruct);
 8001800:	f107 031c 	add.w	r3, r7, #28
 8001804:	4619      	mov	r1, r3
 8001806:	483a      	ldr	r0, [pc, #232]	@ (80018f0 <MX_GPIO_Init+0x220>)
 8001808:	f002 f9f4 	bl	8003bf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800180c:	2310      	movs	r3, #16
 800180e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001810:	2302      	movs	r3, #2
 8001812:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001814:	2300      	movs	r3, #0
 8001816:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001818:	2300      	movs	r3, #0
 800181a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800181c:	2306      	movs	r3, #6
 800181e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001820:	f107 031c 	add.w	r3, r7, #28
 8001824:	4619      	mov	r1, r3
 8001826:	4834      	ldr	r0, [pc, #208]	@ (80018f8 <MX_GPIO_Init+0x228>)
 8001828:	f002 f9e4 	bl	8003bf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800182c:	23e0      	movs	r3, #224	@ 0xe0
 800182e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001830:	2302      	movs	r3, #2
 8001832:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001834:	2300      	movs	r3, #0
 8001836:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001838:	2300      	movs	r3, #0
 800183a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800183c:	2305      	movs	r3, #5
 800183e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001840:	f107 031c 	add.w	r3, r7, #28
 8001844:	4619      	mov	r1, r3
 8001846:	482c      	ldr	r0, [pc, #176]	@ (80018f8 <MX_GPIO_Init+0x228>)
 8001848:	f002 f9d4 	bl	8003bf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Pulse_Oximeter_Int_Pin */
  GPIO_InitStruct.Pin = Pulse_Oximeter_Int_Pin;
 800184c:	2301      	movs	r3, #1
 800184e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001850:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001854:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001856:	2301      	movs	r3, #1
 8001858:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(Pulse_Oximeter_Int_GPIO_Port, &GPIO_InitStruct);
 800185a:	f107 031c 	add.w	r3, r7, #28
 800185e:	4619      	mov	r1, r3
 8001860:	4826      	ldr	r0, [pc, #152]	@ (80018fc <MX_GPIO_Init+0x22c>)
 8001862:	f002 f9c7 	bl	8003bf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001866:	2304      	movs	r3, #4
 8001868:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800186a:	2300      	movs	r3, #0
 800186c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186e:	2300      	movs	r3, #0
 8001870:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001872:	f107 031c 	add.w	r3, r7, #28
 8001876:	4619      	mov	r1, r3
 8001878:	4820      	ldr	r0, [pc, #128]	@ (80018fc <MX_GPIO_Init+0x22c>)
 800187a:	f002 f9bb 	bl	8003bf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800187e:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8001882:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001884:	2301      	movs	r3, #1
 8001886:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001888:	2300      	movs	r3, #0
 800188a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188c:	2300      	movs	r3, #0
 800188e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001890:	f107 031c 	add.w	r3, r7, #28
 8001894:	4619      	mov	r1, r3
 8001896:	4817      	ldr	r0, [pc, #92]	@ (80018f4 <MX_GPIO_Init+0x224>)
 8001898:	f002 f9ac 	bl	8003bf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800189c:	2320      	movs	r3, #32
 800189e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018a0:	2300      	movs	r3, #0
 80018a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a4:	2300      	movs	r3, #0
 80018a6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80018a8:	f107 031c 	add.w	r3, r7, #28
 80018ac:	4619      	mov	r1, r3
 80018ae:	4811      	ldr	r0, [pc, #68]	@ (80018f4 <MX_GPIO_Init+0x224>)
 80018b0:	f002 f9a0 	bl	8003bf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80018b4:	2302      	movs	r3, #2
 80018b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80018b8:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80018bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018be:	2300      	movs	r3, #0
 80018c0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80018c2:	f107 031c 	add.w	r3, r7, #28
 80018c6:	4619      	mov	r1, r3
 80018c8:	4808      	ldr	r0, [pc, #32]	@ (80018ec <MX_GPIO_Init+0x21c>)
 80018ca:	f002 f993 	bl	8003bf4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80018ce:	2200      	movs	r2, #0
 80018d0:	2100      	movs	r1, #0
 80018d2:	2006      	movs	r0, #6
 80018d4:	f001 fde7 	bl	80034a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80018d8:	2006      	movs	r0, #6
 80018da:	f001 fe00 	bl	80034de <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018de:	bf00      	nop
 80018e0:	3730      	adds	r7, #48	@ 0x30
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	40023800 	.word	0x40023800
 80018ec:	40021000 	.word	0x40021000
 80018f0:	40020800 	.word	0x40020800
 80018f4:	40020c00 	.word	0x40020c00
 80018f8:	40020000 	.word	0x40020000
 80018fc:	40020400 	.word	0x40020400

08001900 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	4603      	mov	r3, r0
 8001908:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == Pulse_Oximeter_Int_Pin)
 800190a:	88fb      	ldrh	r3, [r7, #6]
 800190c:	2b01      	cmp	r3, #1
 800190e:	d102      	bne.n	8001916 <HAL_GPIO_EXTI_Callback+0x16>
	{
		pulseOximiterIntFlag = 1;
 8001910:	4b04      	ldr	r3, [pc, #16]	@ (8001924 <HAL_GPIO_EXTI_Callback+0x24>)
 8001912:	2201      	movs	r2, #1
 8001914:	701a      	strb	r2, [r3, #0]
	}
}
 8001916:	bf00      	nop
 8001918:	370c      	adds	r7, #12
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	20000530 	.word	0x20000530

08001928 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8001928:	b5b0      	push	{r4, r5, r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
	static float adc_dc_left = 0.0; // left microphone is PA0 i think
	static float adc_dc_right = 0.0;
	static uint16_t adc_sum_left = 0;
	static uint16_t adc_sum_right = 0;

	if (hadc->Instance == ADC1) {
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a5c      	ldr	r2, [pc, #368]	@ (8001aa8 <HAL_ADC_ConvCpltCallback+0x180>)
 8001936:	4293      	cmp	r3, r2
 8001938:	f040 80a4 	bne.w	8001a84 <HAL_ADC_ConvCpltCallback+0x15c>
		adc_sum_left = 0;
 800193c:	4b5b      	ldr	r3, [pc, #364]	@ (8001aac <HAL_ADC_ConvCpltCallback+0x184>)
 800193e:	2200      	movs	r2, #0
 8001940:	801a      	strh	r2, [r3, #0]
		adc_sum_right = 0;
 8001942:	4b5b      	ldr	r3, [pc, #364]	@ (8001ab0 <HAL_ADC_ConvCpltCallback+0x188>)
 8001944:	2200      	movs	r2, #0
 8001946:	801a      	strh	r2, [r3, #0]

		for (int i = 0; i < MIC_OVERSAMPLING; i++) {
 8001948:	2300      	movs	r3, #0
 800194a:	60fb      	str	r3, [r7, #12]
 800194c:	e019      	b.n	8001982 <HAL_ADC_ConvCpltCallback+0x5a>
			adc_sum_left += adc_buffer[2*i];
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	005b      	lsls	r3, r3, #1
 8001952:	4a58      	ldr	r2, [pc, #352]	@ (8001ab4 <HAL_ADC_ConvCpltCallback+0x18c>)
 8001954:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001958:	4b54      	ldr	r3, [pc, #336]	@ (8001aac <HAL_ADC_ConvCpltCallback+0x184>)
 800195a:	881b      	ldrh	r3, [r3, #0]
 800195c:	4413      	add	r3, r2
 800195e:	b29a      	uxth	r2, r3
 8001960:	4b52      	ldr	r3, [pc, #328]	@ (8001aac <HAL_ADC_ConvCpltCallback+0x184>)
 8001962:	801a      	strh	r2, [r3, #0]
			adc_sum_right += adc_buffer[2*i + 1];
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	3301      	adds	r3, #1
 800196a:	4a52      	ldr	r2, [pc, #328]	@ (8001ab4 <HAL_ADC_ConvCpltCallback+0x18c>)
 800196c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001970:	4b4f      	ldr	r3, [pc, #316]	@ (8001ab0 <HAL_ADC_ConvCpltCallback+0x188>)
 8001972:	881b      	ldrh	r3, [r3, #0]
 8001974:	4413      	add	r3, r2
 8001976:	b29a      	uxth	r2, r3
 8001978:	4b4d      	ldr	r3, [pc, #308]	@ (8001ab0 <HAL_ADC_ConvCpltCallback+0x188>)
 800197a:	801a      	strh	r2, [r3, #0]
		for (int i = 0; i < MIC_OVERSAMPLING; i++) {
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	3301      	adds	r3, #1
 8001980:	60fb      	str	r3, [r7, #12]
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	2b03      	cmp	r3, #3
 8001986:	dde2      	ble.n	800194e <HAL_ADC_ConvCpltCallback+0x26>
		}
		adc_sum_left = adc_buffer[0] * 4;
 8001988:	4b4a      	ldr	r3, [pc, #296]	@ (8001ab4 <HAL_ADC_ConvCpltCallback+0x18c>)
 800198a:	881b      	ldrh	r3, [r3, #0]
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	b29a      	uxth	r2, r3
 8001990:	4b46      	ldr	r3, [pc, #280]	@ (8001aac <HAL_ADC_ConvCpltCallback+0x184>)
 8001992:	801a      	strh	r2, [r3, #0]
		adc_sum_right = adc_buffer[1] * 4;
 8001994:	4b47      	ldr	r3, [pc, #284]	@ (8001ab4 <HAL_ADC_ConvCpltCallback+0x18c>)
 8001996:	885b      	ldrh	r3, [r3, #2]
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	b29a      	uxth	r2, r3
 800199c:	4b44      	ldr	r3, [pc, #272]	@ (8001ab0 <HAL_ADC_ConvCpltCallback+0x188>)
 800199e:	801a      	strh	r2, [r3, #0]

		adc_dc_left 	= ADC_DC_FILT_COEFF * adc_dc_left 	+ (1-ADC_DC_FILT_COEFF) * adc_sum_left; // calculate dc offset
 80019a0:	4b45      	ldr	r3, [pc, #276]	@ (8001ab8 <HAL_ADC_ConvCpltCallback+0x190>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7fe fdcf 	bl	8000548 <__aeabi_f2d>
 80019aa:	a33b      	add	r3, pc, #236	@ (adr r3, 8001a98 <HAL_ADC_ConvCpltCallback+0x170>)
 80019ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b0:	f7fe fe22 	bl	80005f8 <__aeabi_dmul>
 80019b4:	4602      	mov	r2, r0
 80019b6:	460b      	mov	r3, r1
 80019b8:	4614      	mov	r4, r2
 80019ba:	461d      	mov	r5, r3
 80019bc:	4b3b      	ldr	r3, [pc, #236]	@ (8001aac <HAL_ADC_ConvCpltCallback+0x184>)
 80019be:	881b      	ldrh	r3, [r3, #0]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7fe fdaf 	bl	8000524 <__aeabi_i2d>
 80019c6:	a336      	add	r3, pc, #216	@ (adr r3, 8001aa0 <HAL_ADC_ConvCpltCallback+0x178>)
 80019c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019cc:	f7fe fe14 	bl	80005f8 <__aeabi_dmul>
 80019d0:	4602      	mov	r2, r0
 80019d2:	460b      	mov	r3, r1
 80019d4:	4620      	mov	r0, r4
 80019d6:	4629      	mov	r1, r5
 80019d8:	f7fe fc58 	bl	800028c <__adddf3>
 80019dc:	4602      	mov	r2, r0
 80019de:	460b      	mov	r3, r1
 80019e0:	4610      	mov	r0, r2
 80019e2:	4619      	mov	r1, r3
 80019e4:	f7ff f900 	bl	8000be8 <__aeabi_d2f>
 80019e8:	4603      	mov	r3, r0
 80019ea:	4a33      	ldr	r2, [pc, #204]	@ (8001ab8 <HAL_ADC_ConvCpltCallback+0x190>)
 80019ec:	6013      	str	r3, [r2, #0]
		adc_dc_right 	= ADC_DC_FILT_COEFF * adc_dc_right 	+ (1-ADC_DC_FILT_COEFF) * adc_sum_right; // calculate dc offset
 80019ee:	4b33      	ldr	r3, [pc, #204]	@ (8001abc <HAL_ADC_ConvCpltCallback+0x194>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7fe fda8 	bl	8000548 <__aeabi_f2d>
 80019f8:	a327      	add	r3, pc, #156	@ (adr r3, 8001a98 <HAL_ADC_ConvCpltCallback+0x170>)
 80019fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019fe:	f7fe fdfb 	bl	80005f8 <__aeabi_dmul>
 8001a02:	4602      	mov	r2, r0
 8001a04:	460b      	mov	r3, r1
 8001a06:	4614      	mov	r4, r2
 8001a08:	461d      	mov	r5, r3
 8001a0a:	4b29      	ldr	r3, [pc, #164]	@ (8001ab0 <HAL_ADC_ConvCpltCallback+0x188>)
 8001a0c:	881b      	ldrh	r3, [r3, #0]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7fe fd88 	bl	8000524 <__aeabi_i2d>
 8001a14:	a322      	add	r3, pc, #136	@ (adr r3, 8001aa0 <HAL_ADC_ConvCpltCallback+0x178>)
 8001a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a1a:	f7fe fded 	bl	80005f8 <__aeabi_dmul>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	460b      	mov	r3, r1
 8001a22:	4620      	mov	r0, r4
 8001a24:	4629      	mov	r1, r5
 8001a26:	f7fe fc31 	bl	800028c <__adddf3>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	4610      	mov	r0, r2
 8001a30:	4619      	mov	r1, r3
 8001a32:	f7ff f8d9 	bl	8000be8 <__aeabi_d2f>
 8001a36:	4603      	mov	r3, r0
 8001a38:	4a20      	ldr	r2, [pc, #128]	@ (8001abc <HAL_ADC_ConvCpltCallback+0x194>)
 8001a3a:	6013      	str	r3, [r2, #0]

		audio_tx_buffer[0] = (int16_t)(adc_dc_left - adc_sum_left); // remove dc offset from sum and invert
 8001a3c:	4b1e      	ldr	r3, [pc, #120]	@ (8001ab8 <HAL_ADC_ConvCpltCallback+0x190>)
 8001a3e:	ed93 7a00 	vldr	s14, [r3]
 8001a42:	4b1a      	ldr	r3, [pc, #104]	@ (8001aac <HAL_ADC_ConvCpltCallback+0x184>)
 8001a44:	881b      	ldrh	r3, [r3, #0]
 8001a46:	ee07 3a90 	vmov	s15, r3
 8001a4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a56:	ee17 3a90 	vmov	r3, s15
 8001a5a:	b21a      	sxth	r2, r3
 8001a5c:	4b18      	ldr	r3, [pc, #96]	@ (8001ac0 <HAL_ADC_ConvCpltCallback+0x198>)
 8001a5e:	801a      	strh	r2, [r3, #0]
		audio_tx_buffer[1] = (int16_t)(adc_dc_right - adc_sum_right); // remove dc offset from sum and invert
 8001a60:	4b16      	ldr	r3, [pc, #88]	@ (8001abc <HAL_ADC_ConvCpltCallback+0x194>)
 8001a62:	ed93 7a00 	vldr	s14, [r3]
 8001a66:	4b12      	ldr	r3, [pc, #72]	@ (8001ab0 <HAL_ADC_ConvCpltCallback+0x188>)
 8001a68:	881b      	ldrh	r3, [r3, #0]
 8001a6a:	ee07 3a90 	vmov	s15, r3
 8001a6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a76:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a7a:	ee17 3a90 	vmov	r3, s15
 8001a7e:	b21a      	sxth	r2, r3
 8001a80:	4b0f      	ldr	r3, [pc, #60]	@ (8001ac0 <HAL_ADC_ConvCpltCallback+0x198>)
 8001a82:	805a      	strh	r2, [r3, #2]
	}

	HAL_GPIO_TogglePin(GPIOC, ADC_debug_Pin);
 8001a84:	2102      	movs	r1, #2
 8001a86:	480f      	ldr	r0, [pc, #60]	@ (8001ac4 <HAL_ADC_ConvCpltCallback+0x19c>)
 8001a88:	f002 fa69 	bl	8003f5e <HAL_GPIO_TogglePin>
}
 8001a8c:	bf00      	nop
 8001a8e:	3710      	adds	r7, #16
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bdb0      	pop	{r4, r5, r7, pc}
 8001a94:	f3af 8000 	nop.w
 8001a98:	d916872b 	.word	0xd916872b
 8001a9c:	3feff7ce 	.word	0x3feff7ce
 8001aa0:	d2f1aa00 	.word	0xd2f1aa00
 8001aa4:	3f50624d 	.word	0x3f50624d
 8001aa8:	40012000 	.word	0x40012000
 8001aac:	2000054a 	.word	0x2000054a
 8001ab0:	2000054c 	.word	0x2000054c
 8001ab4:	20000534 	.word	0x20000534
 8001ab8:	20000550 	.word	0x20000550
 8001abc:	20000554 	.word	0x20000554
 8001ac0:	20000544 	.word	0x20000544
 8001ac4:	40020800 	.word	0x40020800

08001ac8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001acc:	b672      	cpsid	i
}
 8001ace:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001ad0:	bf00      	nop
 8001ad2:	e7fd      	b.n	8001ad0 <Error_Handler+0x8>

08001ad4 <MAX30102_WriteRegister>:
uint8_t max30102_sensor_data[6 * MAX30102_SAMPLES_PER_BURST] = {0};


/* USER CODE BEGIN 0 */
// I2C write to register
HAL_StatusTypeDef MAX30102_WriteRegister(uint8_t reg, uint8_t value) {
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b086      	sub	sp, #24
 8001ad8:	af04      	add	r7, sp, #16
 8001ada:	4603      	mov	r3, r0
 8001adc:	460a      	mov	r2, r1
 8001ade:	71fb      	strb	r3, [r7, #7]
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	71bb      	strb	r3, [r7, #6]
    return HAL_I2C_Mem_Write(&hi2c1, (MAX30102_ADDRESS << 1), reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 100);
 8001ae4:	79fb      	ldrb	r3, [r7, #7]
 8001ae6:	b29a      	uxth	r2, r3
 8001ae8:	2364      	movs	r3, #100	@ 0x64
 8001aea:	9302      	str	r3, [sp, #8]
 8001aec:	2301      	movs	r3, #1
 8001aee:	9301      	str	r3, [sp, #4]
 8001af0:	1dbb      	adds	r3, r7, #6
 8001af2:	9300      	str	r3, [sp, #0]
 8001af4:	2301      	movs	r3, #1
 8001af6:	21ae      	movs	r1, #174	@ 0xae
 8001af8:	4803      	ldr	r0, [pc, #12]	@ (8001b08 <MAX30102_WriteRegister+0x34>)
 8001afa:	f002 fba7 	bl	800424c <HAL_I2C_Mem_Write>
 8001afe:	4603      	mov	r3, r0
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3708      	adds	r7, #8
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	2000039c 	.word	0x2000039c

08001b0c <MAX30102_ReadRegister>:

// I2C read from register
HAL_StatusTypeDef MAX30102_ReadRegister(uint8_t reg, uint8_t *value) {
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b086      	sub	sp, #24
 8001b10:	af04      	add	r7, sp, #16
 8001b12:	4603      	mov	r3, r0
 8001b14:	6039      	str	r1, [r7, #0]
 8001b16:	71fb      	strb	r3, [r7, #7]
    return HAL_I2C_Mem_Read(&hi2c1, (MAX30102_ADDRESS << 1), reg, I2C_MEMADD_SIZE_8BIT, value, 1, 100);
 8001b18:	79fb      	ldrb	r3, [r7, #7]
 8001b1a:	b29a      	uxth	r2, r3
 8001b1c:	2364      	movs	r3, #100	@ 0x64
 8001b1e:	9302      	str	r3, [sp, #8]
 8001b20:	2301      	movs	r3, #1
 8001b22:	9301      	str	r3, [sp, #4]
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	9300      	str	r3, [sp, #0]
 8001b28:	2301      	movs	r3, #1
 8001b2a:	21ae      	movs	r1, #174	@ 0xae
 8001b2c:	4803      	ldr	r0, [pc, #12]	@ (8001b3c <MAX30102_ReadRegister+0x30>)
 8001b2e:	f002 fc87 	bl	8004440 <HAL_I2C_Mem_Read>
 8001b32:	4603      	mov	r3, r0
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3708      	adds	r7, #8
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	2000039c 	.word	0x2000039c

08001b40 <MAX30102_ReadFIFO>:

// Read FIFO data
uint8_t MAX30102_ReadFIFO(uint8_t *buffer, uint8_t length) {
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b086      	sub	sp, #24
 8001b44:	af04      	add	r7, sp, #16
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	460b      	mov	r3, r1
 8001b4a:	70fb      	strb	r3, [r7, #3]
    return HAL_I2C_Mem_Read(&hi2c1, (MAX30102_ADDRESS << 1), REG_FIFO_DATA, I2C_MEMADD_SIZE_8BIT, buffer, length, 100);
 8001b4c:	78fb      	ldrb	r3, [r7, #3]
 8001b4e:	b29b      	uxth	r3, r3
 8001b50:	2264      	movs	r2, #100	@ 0x64
 8001b52:	9202      	str	r2, [sp, #8]
 8001b54:	9301      	str	r3, [sp, #4]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	9300      	str	r3, [sp, #0]
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	2207      	movs	r2, #7
 8001b5e:	21ae      	movs	r1, #174	@ 0xae
 8001b60:	4803      	ldr	r0, [pc, #12]	@ (8001b70 <MAX30102_ReadFIFO+0x30>)
 8001b62:	f002 fc6d 	bl	8004440 <HAL_I2C_Mem_Read>
 8001b66:	4603      	mov	r3, r0
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3708      	adds	r7, #8
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	2000039c 	.word	0x2000039c

08001b74 <MAX30102_Init>:

// MAX30102 initialization
uint8_t MAX30102_Init(void) {
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
    uint8_t part_id = 0;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	71bb      	strb	r3, [r7, #6]

    // Read MAX30102 ID to verify device presence
    if (MAX30102_ReadRegister(REG_PART_ID, &part_id) != HAL_OK || part_id != 0x15) {
 8001b7e:	1dbb      	adds	r3, r7, #6
 8001b80:	4619      	mov	r1, r3
 8001b82:	20ff      	movs	r0, #255	@ 0xff
 8001b84:	f7ff ffc2 	bl	8001b0c <MAX30102_ReadRegister>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d102      	bne.n	8001b94 <MAX30102_Init+0x20>
 8001b8e:	79bb      	ldrb	r3, [r7, #6]
 8001b90:	2b15      	cmp	r3, #21
 8001b92:	d001      	beq.n	8001b98 <MAX30102_Init+0x24>
        return 0;  // Device not found
 8001b94:	2300      	movs	r3, #0
 8001b96:	e02b      	b.n	8001bf0 <MAX30102_Init+0x7c>
    }

    // Reset MAX30102
    MAX30102_WriteRegister(REG_MODE_CONFIG, (1 << 6));  // Reset MAX30102  (bit 6)
 8001b98:	2140      	movs	r1, #64	@ 0x40
 8001b9a:	2009      	movs	r0, #9
 8001b9c:	f7ff ff9a 	bl	8001ad4 <MAX30102_WriteRegister>
    HAL_Delay(10);
 8001ba0:	200a      	movs	r0, #10
 8001ba2:	f000 ff79 	bl	8002a98 <HAL_Delay>

    // Configure SPO2 mode
    MAX30102_WriteRegister(REG_MODE_CONFIG, 0b011 << BIT_MODE);  // Use heart rate mode only (or 0x07 to enable SPO2)
 8001ba6:	2103      	movs	r1, #3
 8001ba8:	2009      	movs	r0, #9
 8001baa:	f7ff ff93 	bl	8001ad4 <MAX30102_WriteRegister>
    uint8_t spo2_bits = (0b01 << BIT_SPO2_ADC_RGE) |  (0b000 << BIT_SPO2_SR) | (0b01 << BIT_LED_PW); //pw of 11 browns out supply
 8001bae:	2321      	movs	r3, #33	@ 0x21
 8001bb0:	71fb      	strb	r3, [r7, #7]
    MAX30102_WriteRegister(REG_SPO2_CONFIG, spo2_bits);  // Set ADC range and sampling rate
 8001bb2:	79fb      	ldrb	r3, [r7, #7]
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	200a      	movs	r0, #10
 8001bb8:	f7ff ff8c 	bl	8001ad4 <MAX30102_WriteRegister>

    // Set LED brightness (0x24 represents medium brightness, adjustable)
    redLEDCurrent = 50;
 8001bbc:	4b0e      	ldr	r3, [pc, #56]	@ (8001bf8 <MAX30102_Init+0x84>)
 8001bbe:	2232      	movs	r2, #50	@ 0x32
 8001bc0:	701a      	strb	r2, [r3, #0]
    MAX30102_setLedCurrent(RED_LED, redLEDCurrent);
 8001bc2:	4b0d      	ldr	r3, [pc, #52]	@ (8001bf8 <MAX30102_Init+0x84>)
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	2001      	movs	r0, #1
 8001bca:	f000 f825 	bl	8001c18 <MAX30102_setLedCurrent>
    MAX30102_setLedCurrent(IR_LED, redLEDCurrent);
 8001bce:	4b0a      	ldr	r3, [pc, #40]	@ (8001bf8 <MAX30102_Init+0x84>)
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	2002      	movs	r0, #2
 8001bd6:	f000 f81f 	bl	8001c18 <MAX30102_setLedCurrent>

    // interrupts
    MAX30102_WriteRegister(REG_FIFO_CONFIG, (0b000 << BIT_SMP_AVG) | ((32 - MAX30102_SAMPLES_PER_BURST) << BIT_FIFO_A_FULL_VAL)); // max value is 15 min is 0
 8001bda:	2100      	movs	r1, #0
 8001bdc:	2008      	movs	r0, #8
 8001bde:	f7ff ff79 	bl	8001ad4 <MAX30102_WriteRegister>
    MAX30102_WriteRegister(REG_INT1_EN, 1 << BIT_EN_A_FULL_INT);
 8001be2:	2180      	movs	r1, #128	@ 0x80
 8001be4:	2002      	movs	r0, #2
 8001be6:	f7ff ff75 	bl	8001ad4 <MAX30102_WriteRegister>

    MAX30102_ClearInterrupt();
 8001bea:	f000 f807 	bl	8001bfc <MAX30102_ClearInterrupt>

    return 1;  // Initialization successful
 8001bee:	2301      	movs	r3, #1
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3708      	adds	r7, #8
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	20000624 	.word	0x20000624

08001bfc <MAX30102_ClearInterrupt>:

void MAX30102_ClearInterrupt(void) {
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
	uint8_t reset = 0;
 8001c02:	2300      	movs	r3, #0
 8001c04:	71fb      	strb	r3, [r7, #7]
	MAX30102_ReadRegister(REG_STATUS, &reset); // clears initial interrupt
 8001c06:	1dfb      	adds	r3, r7, #7
 8001c08:	4619      	mov	r1, r3
 8001c0a:	2000      	movs	r0, #0
 8001c0c:	f7ff ff7e 	bl	8001b0c <MAX30102_ReadRegister>
}
 8001c10:	bf00      	nop
 8001c12:	3708      	adds	r7, #8
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}

08001c18 <MAX30102_setLedCurrent>:
	return 1;
}


uint8_t MAX30102_setLedCurrent(uint8_t led, uint8_t currentLevel)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	4603      	mov	r3, r0
 8001c20:	460a      	mov	r2, r1
 8001c22:	71fb      	strb	r3, [r7, #7]
 8001c24:	4613      	mov	r3, r2
 8001c26:	71bb      	strb	r3, [r7, #6]
	uint8_t ledRegister = 0;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	73fb      	strb	r3, [r7, #15]

	switch(led){
 8001c2c:	79fb      	ldrb	r3, [r7, #7]
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d002      	beq.n	8001c38 <MAX30102_setLedCurrent+0x20>
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d003      	beq.n	8001c3e <MAX30102_setLedCurrent+0x26>
 8001c36:	e005      	b.n	8001c44 <MAX30102_setLedCurrent+0x2c>
	case RED_LED: 	ledRegister = REG_LED1_PA; break;
 8001c38:	230c      	movs	r3, #12
 8001c3a:	73fb      	strb	r3, [r7, #15]
 8001c3c:	e002      	b.n	8001c44 <MAX30102_setLedCurrent+0x2c>
	case IR_LED:	ledRegister = REG_LED2_PA; break;
 8001c3e:	230d      	movs	r3, #13
 8001c40:	73fb      	strb	r3, [r7, #15]
 8001c42:	bf00      	nop
	}

	if( MAX30102_WriteRegister(ledRegister, currentLevel) != HAL_OK){
 8001c44:	79ba      	ldrb	r2, [r7, #6]
 8001c46:	7bfb      	ldrb	r3, [r7, #15]
 8001c48:	4611      	mov	r1, r2
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7ff ff42 	bl	8001ad4 <MAX30102_WriteRegister>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <MAX30102_setLedCurrent+0x42>
		return 0;
 8001c56:	2300      	movs	r3, #0
 8001c58:	e000      	b.n	8001c5c <MAX30102_setLedCurrent+0x44>
	}
	return 1;
 8001c5a:	2301      	movs	r3, #1
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3710      	adds	r7, #16
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <MAX30102_DumpFifo>:

uint8_t MAX30102_DumpFifo() {
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
	uint8_t retval = MAX30102_ReadFIFO(max30102_sensor_data, 6 * MAX30102_SAMPLES_PER_BURST);
 8001c6a:	21c0      	movs	r1, #192	@ 0xc0
 8001c6c:	4805      	ldr	r0, [pc, #20]	@ (8001c84 <MAX30102_DumpFifo+0x20>)
 8001c6e:	f7ff ff67 	bl	8001b40 <MAX30102_ReadFIFO>
 8001c72:	4603      	mov	r3, r0
 8001c74:	71fb      	strb	r3, [r7, #7]
	MAX30102_ClearInterrupt();
 8001c76:	f7ff ffc1 	bl	8001bfc <MAX30102_ClearInterrupt>
	return retval;
 8001c7a:	79fb      	ldrb	r3, [r7, #7]
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3708      	adds	r7, #8
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	20000630 	.word	0x20000630

08001c88 <MAX30102_ProcessData>:

void MAX30102_ProcessData() {
 8001c88:	b5b0      	push	{r4, r5, r7, lr}
 8001c8a:	b08e      	sub	sp, #56	@ 0x38
 8001c8c:	af00      	add	r7, sp, #0
	for (int i = 0 ; i < MAX30102_SAMPLES_PER_BURST; i++) {
 8001c8e:	2300      	movs	r3, #0
 8001c90:	637b      	str	r3, [r7, #52]	@ 0x34
 8001c92:	e048      	b.n	8001d26 <MAX30102_ProcessData+0x9e>
		// heart rate mode only needs red, so only save red data initially long term
		FIFO_LED_DATA rawData = {0};
 8001c94:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	605a      	str	r2, [r3, #4]
		uint8_t n = i*6;
 8001c9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	0052      	lsls	r2, r2, #1
 8001ca6:	4413      	add	r3, r2
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
		rawData.redLedRaw = ((max30102_sensor_data[n+0] << 16) | (max30102_sensor_data[n+1] << 8) | max30102_sensor_data[n+2]);
 8001cae:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001cb2:	4a21      	ldr	r2, [pc, #132]	@ (8001d38 <MAX30102_ProcessData+0xb0>)
 8001cb4:	5cd3      	ldrb	r3, [r2, r3]
 8001cb6:	041a      	lsls	r2, r3, #16
 8001cb8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	491e      	ldr	r1, [pc, #120]	@ (8001d38 <MAX30102_ProcessData+0xb0>)
 8001cc0:	5ccb      	ldrb	r3, [r1, r3]
 8001cc2:	021b      	lsls	r3, r3, #8
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8001cca:	3202      	adds	r2, #2
 8001ccc:	491a      	ldr	r1, [pc, #104]	@ (8001d38 <MAX30102_ProcessData+0xb0>)
 8001cce:	5c8a      	ldrb	r2, [r1, r2]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	62bb      	str	r3, [r7, #40]	@ 0x28
		rawData.irLedRaw = 	((max30102_sensor_data[n+3] << 16) | (max30102_sensor_data[n+4] << 8) | max30102_sensor_data[n+5]);
 8001cd4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001cd8:	3303      	adds	r3, #3
 8001cda:	4a17      	ldr	r2, [pc, #92]	@ (8001d38 <MAX30102_ProcessData+0xb0>)
 8001cdc:	5cd3      	ldrb	r3, [r2, r3]
 8001cde:	041a      	lsls	r2, r3, #16
 8001ce0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001ce4:	3304      	adds	r3, #4
 8001ce6:	4914      	ldr	r1, [pc, #80]	@ (8001d38 <MAX30102_ProcessData+0xb0>)
 8001ce8:	5ccb      	ldrb	r3, [r1, r3]
 8001cea:	021b      	lsls	r3, r3, #8
 8001cec:	4313      	orrs	r3, r2
 8001cee:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8001cf2:	3205      	adds	r2, #5
 8001cf4:	4910      	ldr	r1, [pc, #64]	@ (8001d38 <MAX30102_ProcessData+0xb0>)
 8001cf6:	5c8a      	ldrb	r2, [r1, r2]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	62fb      	str	r3, [r7, #44]	@ 0x2c

		pulseOximeter = pulseOximeter_update(rawData);
 8001cfc:	4c0f      	ldr	r4, [pc, #60]	@ (8001d3c <MAX30102_ProcessData+0xb4>)
 8001cfe:	4638      	mov	r0, r7
 8001d00:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001d04:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001d08:	f000 f97c 	bl	8002004 <pulseOximeter_update>
 8001d0c:	4625      	mov	r5, r4
 8001d0e:	463c      	mov	r4, r7
 8001d10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d18:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d1c:	e885 0003 	stmia.w	r5, {r0, r1}
	for (int i = 0 ; i < MAX30102_SAMPLES_PER_BURST; i++) {
 8001d20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d22:	3301      	adds	r3, #1
 8001d24:	637b      	str	r3, [r7, #52]	@ 0x34
 8001d26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d28:	2b1f      	cmp	r3, #31
 8001d2a:	ddb3      	ble.n	8001c94 <MAX30102_ProcessData+0xc>

	}
}
 8001d2c:	bf00      	nop
 8001d2e:	bf00      	nop
 8001d30:	3738      	adds	r7, #56	@ 0x38
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bdb0      	pop	{r4, r5, r7, pc}
 8001d36:	bf00      	nop
 8001d38:	20000630 	.word	0x20000630
 8001d3c:	20000558 	.word	0x20000558

08001d40 <compare>:

	currentTemperature = temperature;
}

// Comparison function for qsort
int compare(const void *a, const void *b) {
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	6039      	str	r1, [r7, #0]
    return (*(int*)a - *(int*)b);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	1ad3      	subs	r3, r2, r3
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	370c      	adds	r7, #12
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr

08001d60 <getMedian>:

// Function to calculate the median
double getMedian(int arr[], int size) {
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	6039      	str	r1, [r7, #0]
    // Sort the array
    qsort(arr, size, sizeof(int), compare);
 8001d6a:	6839      	ldr	r1, [r7, #0]
 8001d6c:	4b0d      	ldr	r3, [pc, #52]	@ (8001da4 <getMedian+0x44>)
 8001d6e:	2204      	movs	r2, #4
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f00b f948 	bl	800d006 <qsort>

    return arr[size - 1 - 3];
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001d7c:	3b04      	subs	r3, #4
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	4413      	add	r3, r2
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7fe fbcc 	bl	8000524 <__aeabi_i2d>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	460b      	mov	r3, r1
 8001d90:	ec43 2b17 	vmov	d7, r2, r3
}
 8001d94:	eeb0 0a47 	vmov.f32	s0, s14
 8001d98:	eef0 0a67 	vmov.f32	s1, s15
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	08001d41 	.word	0x08001d41

08001da8 <detectPulse>:


bool detectPulse(float sensor_value)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b084      	sub	sp, #16
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	ed87 0a01 	vstr	s0, [r7, #4]
  static float prev_sensor_value = 0;
  static uint8_t values_went_down = 0;
  static uint16_t currentBeatIndex = 0;

  if(sensor_value > PULSE_MAX_THRESHOLD)
 8001db2:	edd7 7a01 	vldr	s15, [r7, #4]
 8001db6:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 8001f28 <detectPulse+0x180>
 8001dba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dc2:	dd0b      	ble.n	8001ddc <detectPulse+0x34>
  {
    currentPulseDetectorState = PULSE_IDLE;
 8001dc4:	4b59      	ldr	r3, [pc, #356]	@ (8001f2c <detectPulse+0x184>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	701a      	strb	r2, [r3, #0]
    prev_sensor_value = 0;
 8001dca:	4b59      	ldr	r3, [pc, #356]	@ (8001f30 <detectPulse+0x188>)
 8001dcc:	f04f 0200 	mov.w	r2, #0
 8001dd0:	601a      	str	r2, [r3, #0]
    values_went_down = 0;
 8001dd2:	4b58      	ldr	r3, [pc, #352]	@ (8001f34 <detectPulse+0x18c>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	701a      	strb	r2, [r3, #0]
    return false;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	e09b      	b.n	8001f14 <detectPulse+0x16c>
  }

  currentBeatIndex++;
 8001ddc:	4b56      	ldr	r3, [pc, #344]	@ (8001f38 <detectPulse+0x190>)
 8001dde:	881b      	ldrh	r3, [r3, #0]
 8001de0:	3301      	adds	r3, #1
 8001de2:	b29a      	uxth	r2, r3
 8001de4:	4b54      	ldr	r3, [pc, #336]	@ (8001f38 <detectPulse+0x190>)
 8001de6:	801a      	strh	r2, [r3, #0]

  switch(currentPulseDetectorState)
 8001de8:	4b50      	ldr	r3, [pc, #320]	@ (8001f2c <detectPulse+0x184>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d06e      	beq.n	8001ece <detectPulse+0x126>
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	f300 808b 	bgt.w	8001f0c <detectPulse+0x164>
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d002      	beq.n	8001e00 <detectPulse+0x58>
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d011      	beq.n	8001e22 <detectPulse+0x7a>
 8001dfe:	e085      	b.n	8001f0c <detectPulse+0x164>
  {
    case PULSE_IDLE:
      if(sensor_value >= PULSE_MIN_THRESHOLD) {
 8001e00:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e04:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8001f3c <detectPulse+0x194>
 8001e08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e10:	da00      	bge.n	8001e14 <detectPulse+0x6c>
        currentPulseDetectorState = PULSE_TRACE_UP;
        values_went_down = 0;
      }
      break;
 8001e12:	e07b      	b.n	8001f0c <detectPulse+0x164>
        currentPulseDetectorState = PULSE_TRACE_UP;
 8001e14:	4b45      	ldr	r3, [pc, #276]	@ (8001f2c <detectPulse+0x184>)
 8001e16:	2201      	movs	r2, #1
 8001e18:	701a      	strb	r2, [r3, #0]
        values_went_down = 0;
 8001e1a:	4b46      	ldr	r3, [pc, #280]	@ (8001f34 <detectPulse+0x18c>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	701a      	strb	r2, [r3, #0]
      break;
 8001e20:	e074      	b.n	8001f0c <detectPulse+0x164>

    case PULSE_TRACE_UP:
      if (!(sensor_value > prev_sensor_value))
 8001e22:	4b43      	ldr	r3, [pc, #268]	@ (8001f30 <detectPulse+0x188>)
 8001e24:	edd3 7a00 	vldr	s15, [r3]
 8001e28:	ed97 7a01 	vldr	s14, [r7, #4]
 8001e2c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e34:	bfcc      	ite	gt
 8001e36:	2301      	movgt	r3, #1
 8001e38:	2300      	movle	r3, #0
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	f083 0301 	eor.w	r3, r3, #1
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d061      	beq.n	8001f0a <detectPulse+0x162>
      {
    	if (currentBeatIndex > 0) valuesBPM[bpmIndex] = currentBeatIndex;
 8001e46:	4b3c      	ldr	r3, [pc, #240]	@ (8001f38 <detectPulse+0x190>)
 8001e48:	881b      	ldrh	r3, [r3, #0]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d007      	beq.n	8001e5e <detectPulse+0xb6>
 8001e4e:	4b3a      	ldr	r3, [pc, #232]	@ (8001f38 <detectPulse+0x190>)
 8001e50:	8819      	ldrh	r1, [r3, #0]
 8001e52:	4b3b      	ldr	r3, [pc, #236]	@ (8001f40 <detectPulse+0x198>)
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	461a      	mov	r2, r3
 8001e58:	4b3a      	ldr	r3, [pc, #232]	@ (8001f44 <detectPulse+0x19c>)
 8001e5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    	currentBeatIndex = 0;
 8001e5e:	4b36      	ldr	r3, [pc, #216]	@ (8001f38 <detectPulse+0x190>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	801a      	strh	r2, [r3, #0]

        bpmIndex++;
 8001e64:	4b36      	ldr	r3, [pc, #216]	@ (8001f40 <detectPulse+0x198>)
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	3301      	adds	r3, #1
 8001e6a:	b2da      	uxtb	r2, r3
 8001e6c:	4b34      	ldr	r3, [pc, #208]	@ (8001f40 <detectPulse+0x198>)
 8001e6e:	701a      	strb	r2, [r3, #0]

        if (bpmIndex >= PULSE_BPM_SAMPLE_SIZE){
 8001e70:	4b33      	ldr	r3, [pc, #204]	@ (8001f40 <detectPulse+0x198>)
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	2b09      	cmp	r3, #9
 8001e76:	d925      	bls.n	8001ec4 <detectPulse+0x11c>
        	bpmIndex = 0;
 8001e78:	4b31      	ldr	r3, [pc, #196]	@ (8001f40 <detectPulse+0x198>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	701a      	strb	r2, [r3, #0]
        	uint16_t medianIdx = getMedian(valuesBPM, (int)PULSE_BPM_SAMPLE_SIZE);
 8001e7e:	210a      	movs	r1, #10
 8001e80:	4830      	ldr	r0, [pc, #192]	@ (8001f44 <detectPulse+0x19c>)
 8001e82:	f7ff ff6d 	bl	8001d60 <getMedian>
 8001e86:	ec53 2b10 	vmov	r2, r3, d0
 8001e8a:	4610      	mov	r0, r2
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	f7fe fe8b 	bl	8000ba8 <__aeabi_d2uiz>
 8001e92:	4603      	mov	r3, r0
 8001e94:	81fb      	strh	r3, [r7, #14]

        	if(medianIdx > 0)
 8001e96:	89fb      	ldrh	r3, [r7, #14]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d013      	beq.n	8001ec4 <detectPulse+0x11c>
        		currentBPM = (60.0 * MAX30102_SAMPLE_RATE) / medianIdx;
 8001e9c:	89fb      	ldrh	r3, [r7, #14]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7fe fb40 	bl	8000524 <__aeabi_i2d>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	460b      	mov	r3, r1
 8001ea8:	a11d      	add	r1, pc, #116	@ (adr r1, 8001f20 <detectPulse+0x178>)
 8001eaa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001eae:	f7fe fccd 	bl	800084c <__aeabi_ddiv>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	4610      	mov	r0, r2
 8001eb8:	4619      	mov	r1, r3
 8001eba:	f7fe fe95 	bl	8000be8 <__aeabi_d2f>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	4a21      	ldr	r2, [pc, #132]	@ (8001f48 <detectPulse+0x1a0>)
 8001ec2:	6013      	str	r3, [r2, #0]
        }

        currentPulseDetectorState = PULSE_TRACE_DOWN;
 8001ec4:	4b19      	ldr	r3, [pc, #100]	@ (8001f2c <detectPulse+0x184>)
 8001ec6:	2202      	movs	r2, #2
 8001ec8:	701a      	strb	r2, [r3, #0]

        return true;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e022      	b.n	8001f14 <detectPulse+0x16c>
      }
      break;

    case PULSE_TRACE_DOWN:
      if(sensor_value < prev_sensor_value)
 8001ece:	4b18      	ldr	r3, [pc, #96]	@ (8001f30 <detectPulse+0x188>)
 8001ed0:	edd3 7a00 	vldr	s15, [r3]
 8001ed4:	ed97 7a01 	vldr	s14, [r7, #4]
 8001ed8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001edc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ee0:	d505      	bpl.n	8001eee <detectPulse+0x146>
      {
        values_went_down++;
 8001ee2:	4b14      	ldr	r3, [pc, #80]	@ (8001f34 <detectPulse+0x18c>)
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	b2da      	uxtb	r2, r3
 8001eea:	4b12      	ldr	r3, [pc, #72]	@ (8001f34 <detectPulse+0x18c>)
 8001eec:	701a      	strb	r2, [r3, #0]
      }


      if(sensor_value < PULSE_MIN_THRESHOLD)
 8001eee:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ef2:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8001f3c <detectPulse+0x194>
 8001ef6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001efe:	d400      	bmi.n	8001f02 <detectPulse+0x15a>
      {
        currentPulseDetectorState = PULSE_IDLE;
      }
      break;
 8001f00:	e004      	b.n	8001f0c <detectPulse+0x164>
        currentPulseDetectorState = PULSE_IDLE;
 8001f02:	4b0a      	ldr	r3, [pc, #40]	@ (8001f2c <detectPulse+0x184>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	701a      	strb	r2, [r3, #0]
      break;
 8001f08:	e000      	b.n	8001f0c <detectPulse+0x164>
      break;
 8001f0a:	bf00      	nop
  }

  prev_sensor_value = sensor_value;
 8001f0c:	4a08      	ldr	r2, [pc, #32]	@ (8001f30 <detectPulse+0x188>)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6013      	str	r3, [r2, #0]
  return false;
 8001f12:	2300      	movs	r3, #0
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3710      	adds	r7, #16
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	f3af 8000 	nop.w
 8001f20:	00000000 	.word	0x00000000
 8001f24:	40a77000 	.word	0x40a77000
 8001f28:	44fa0000 	.word	0x44fa0000
 8001f2c:	2000062c 	.word	0x2000062c
 8001f30:	200006f0 	.word	0x200006f0
 8001f34:	200006f4 	.word	0x200006f4
 8001f38:	200006f6 	.word	0x200006f6
 8001f3c:	42c80000 	.word	0x42c80000
 8001f40:	20000610 	.word	0x20000610
 8001f44:	200005e8 	.word	0x200005e8
 8001f48:	200005e4 	.word	0x200005e4

08001f4c <balanceIntesities>:

void balanceIntesities( float redLedDC, float IRLedDC )
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	ed87 0a01 	vstr	s0, [r7, #4]
 8001f56:	edc7 0a00 	vstr	s1, [r7]
	uint32_t currentTime = millis();
 8001f5a:	f000 fce7 	bl	800292c <millis>
 8001f5e:	60f8      	str	r0, [r7, #12]
  if( currentTime - lastREDLedCurrentCheck >= RED_LED_CURRENT_ADJUSTMENT_MS)
 8001f60:	4b25      	ldr	r3, [pc, #148]	@ (8001ff8 <balanceIntesities+0xac>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	461a      	mov	r2, r3
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	1a9b      	subs	r3, r3, r2
 8001f6a:	2bc7      	cmp	r3, #199	@ 0xc7
 8001f6c:	d940      	bls.n	8001ff0 <balanceIntesities+0xa4>
  {
	if( IRLedDC - redLedDC > MAGIC_ACCEPTABLE_INTENSITY_DIFF && redLEDCurrent < 51)
 8001f6e:	ed97 7a00 	vldr	s14, [r7]
 8001f72:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f7a:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8001ffc <balanceIntesities+0xb0>
 8001f7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f86:	dd10      	ble.n	8001faa <balanceIntesities+0x5e>
 8001f88:	4b1d      	ldr	r3, [pc, #116]	@ (8002000 <balanceIntesities+0xb4>)
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	2b32      	cmp	r3, #50	@ 0x32
 8001f8e:	d80c      	bhi.n	8001faa <balanceIntesities+0x5e>
    {
		redLEDCurrent++;
 8001f90:	4b1b      	ldr	r3, [pc, #108]	@ (8002000 <balanceIntesities+0xb4>)
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	3301      	adds	r3, #1
 8001f96:	b2da      	uxtb	r2, r3
 8001f98:	4b19      	ldr	r3, [pc, #100]	@ (8002000 <balanceIntesities+0xb4>)
 8001f9a:	701a      	strb	r2, [r3, #0]
		MAX30102_setLedCurrent(RED_LED, redLEDCurrent);
 8001f9c:	4b18      	ldr	r3, [pc, #96]	@ (8002000 <balanceIntesities+0xb4>)
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	2001      	movs	r0, #1
 8001fa4:	f7ff fe38 	bl	8001c18 <MAX30102_setLedCurrent>
 8001fa8:	e01c      	b.n	8001fe4 <balanceIntesities+0x98>
    }
    else if(redLedDC - IRLedDC > MAGIC_ACCEPTABLE_INTENSITY_DIFF && redLEDCurrent > 0)
 8001faa:	ed97 7a01 	vldr	s14, [r7, #4]
 8001fae:	edd7 7a00 	vldr	s15, [r7]
 8001fb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fb6:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8001ffc <balanceIntesities+0xb0>
 8001fba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fc2:	dd0f      	ble.n	8001fe4 <balanceIntesities+0x98>
 8001fc4:	4b0e      	ldr	r3, [pc, #56]	@ (8002000 <balanceIntesities+0xb4>)
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d00b      	beq.n	8001fe4 <balanceIntesities+0x98>
    {
    	redLEDCurrent--;
 8001fcc:	4b0c      	ldr	r3, [pc, #48]	@ (8002000 <balanceIntesities+0xb4>)
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	3b01      	subs	r3, #1
 8001fd2:	b2da      	uxtb	r2, r3
 8001fd4:	4b0a      	ldr	r3, [pc, #40]	@ (8002000 <balanceIntesities+0xb4>)
 8001fd6:	701a      	strb	r2, [r3, #0]
    	MAX30102_setLedCurrent(RED_LED, redLEDCurrent);
 8001fd8:	4b09      	ldr	r3, [pc, #36]	@ (8002000 <balanceIntesities+0xb4>)
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	4619      	mov	r1, r3
 8001fde:	2001      	movs	r0, #1
 8001fe0:	f7ff fe1a 	bl	8001c18 <MAX30102_setLedCurrent>
    }

    lastREDLedCurrentCheck = millis();
 8001fe4:	f000 fca2 	bl	800292c <millis>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	461a      	mov	r2, r3
 8001fec:	4b02      	ldr	r3, [pc, #8]	@ (8001ff8 <balanceIntesities+0xac>)
 8001fee:	601a      	str	r2, [r3, #0]
  }
}
 8001ff0:	bf00      	nop
 8001ff2:	3710      	adds	r7, #16
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	20000628 	.word	0x20000628
 8001ffc:	461c4000 	.word	0x461c4000
 8002000:	20000624 	.word	0x20000624

08002004 <pulseOximeter_update>:

MAX30102 pulseOximeter_update(FIFO_LED_DATA m_fifoData)
	{
 8002004:	b5b0      	push	{r4, r5, r7, lr}
 8002006:	b090      	sub	sp, #64	@ 0x40
 8002008:	af00      	add	r7, sp, #0
 800200a:	60f8      	str	r0, [r7, #12]
 800200c:	1d3b      	adds	r3, r7, #4
 800200e:	e883 0006 	stmia.w	r3, {r1, r2}
		MAX30102 result = {
 8002012:	f107 0310 	add.w	r3, r7, #16
 8002016:	2228      	movs	r2, #40	@ 0x28
 8002018:	2100      	movs	r1, #0
 800201a:	4618      	mov	r0, r3
 800201c:	f00b fe97 	bl	800dd4e <memset>
 8002020:	4b96      	ldr	r3, [pc, #600]	@ (800227c <pulseOximeter_update+0x278>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	627b      	str	r3, [r7, #36]	@ 0x24
 8002026:	4b96      	ldr	r3, [pc, #600]	@ (8002280 <pulseOximeter_update+0x27c>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	633b      	str	r3, [r7, #48]	@ 0x30
		/*float dcFilteredIR*/ 0.0,
		/*float dcFilteredRed*/ 0.0,
		/*float temperature;*/ currentTemperature
	};

	dcFilterIR = dcRemoval( (float)m_fifoData.irLedRaw, dcFilterIR.w, ALPHA );
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	ee07 3a90 	vmov	s15, r3
 8002032:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002036:	4b93      	ldr	r3, [pc, #588]	@ (8002284 <pulseOximeter_update+0x280>)
 8002038:	ed93 7a00 	vldr	s14, [r3]
 800203c:	ed9f 1a92 	vldr	s2, [pc, #584]	@ 8002288 <pulseOximeter_update+0x284>
 8002040:	eef0 0a47 	vmov.f32	s1, s14
 8002044:	eeb0 0a67 	vmov.f32	s0, s15
 8002048:	f7fe ff96 	bl	8000f78 <dcRemoval>
 800204c:	eeb0 7a40 	vmov.f32	s14, s0
 8002050:	eef0 7a60 	vmov.f32	s15, s1
 8002054:	4b8b      	ldr	r3, [pc, #556]	@ (8002284 <pulseOximeter_update+0x280>)
 8002056:	ed83 7a00 	vstr	s14, [r3]
 800205a:	edc3 7a01 	vstr	s15, [r3, #4]
	dcFilterRed = dcRemoval( (float)m_fifoData.redLedRaw, dcFilterRed.w, ALPHA );
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	ee07 3a90 	vmov	s15, r3
 8002064:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002068:	4b88      	ldr	r3, [pc, #544]	@ (800228c <pulseOximeter_update+0x288>)
 800206a:	ed93 7a00 	vldr	s14, [r3]
 800206e:	ed9f 1a86 	vldr	s2, [pc, #536]	@ 8002288 <pulseOximeter_update+0x284>
 8002072:	eef0 0a47 	vmov.f32	s1, s14
 8002076:	eeb0 0a67 	vmov.f32	s0, s15
 800207a:	f7fe ff7d 	bl	8000f78 <dcRemoval>
 800207e:	eeb0 7a40 	vmov.f32	s14, s0
 8002082:	eef0 7a60 	vmov.f32	s15, s1
 8002086:	4b81      	ldr	r3, [pc, #516]	@ (800228c <pulseOximeter_update+0x288>)
 8002088:	ed83 7a00 	vstr	s14, [r3]
 800208c:	edc3 7a01 	vstr	s15, [r3, #4]

	float meanDiffResIR = meanDiff( dcFilterIR.result, &meanDiffIR);
 8002090:	4b7c      	ldr	r3, [pc, #496]	@ (8002284 <pulseOximeter_update+0x280>)
 8002092:	edd3 7a01 	vldr	s15, [r3, #4]
 8002096:	487e      	ldr	r0, [pc, #504]	@ (8002290 <pulseOximeter_update+0x28c>)
 8002098:	eeb0 0a67 	vmov.f32	s0, s15
 800209c:	f7fe ffe8 	bl	8001070 <meanDiff>
 80020a0:	ed87 0a0f 	vstr	s0, [r7, #60]	@ 0x3c
	lowPassButterworthFilter( meanDiffResIR/*-dcFilterIR.result*/, &lpbFilterIR );
 80020a4:	487b      	ldr	r0, [pc, #492]	@ (8002294 <pulseOximeter_update+0x290>)
 80020a6:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 80020aa:	f7fe ff99 	bl	8000fe0 <lowPassButterworthFilter>

	irACValueSqSum += dcFilterIR.result * dcFilterIR.result;
 80020ae:	4b75      	ldr	r3, [pc, #468]	@ (8002284 <pulseOximeter_update+0x280>)
 80020b0:	ed93 7a01 	vldr	s14, [r3, #4]
 80020b4:	4b73      	ldr	r3, [pc, #460]	@ (8002284 <pulseOximeter_update+0x280>)
 80020b6:	edd3 7a01 	vldr	s15, [r3, #4]
 80020ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020be:	4b76      	ldr	r3, [pc, #472]	@ (8002298 <pulseOximeter_update+0x294>)
 80020c0:	edd3 7a00 	vldr	s15, [r3]
 80020c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020c8:	4b73      	ldr	r3, [pc, #460]	@ (8002298 <pulseOximeter_update+0x294>)
 80020ca:	edc3 7a00 	vstr	s15, [r3]
	redACValueSqSum += dcFilterRed.result * dcFilterRed.result;
 80020ce:	4b6f      	ldr	r3, [pc, #444]	@ (800228c <pulseOximeter_update+0x288>)
 80020d0:	ed93 7a01 	vldr	s14, [r3, #4]
 80020d4:	4b6d      	ldr	r3, [pc, #436]	@ (800228c <pulseOximeter_update+0x288>)
 80020d6:	edd3 7a01 	vldr	s15, [r3, #4]
 80020da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020de:	4b6f      	ldr	r3, [pc, #444]	@ (800229c <pulseOximeter_update+0x298>)
 80020e0:	edd3 7a00 	vldr	s15, [r3]
 80020e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020e8:	4b6c      	ldr	r3, [pc, #432]	@ (800229c <pulseOximeter_update+0x298>)
 80020ea:	edc3 7a00 	vstr	s15, [r3]
	samplesRecorded++;
 80020ee:	4b6c      	ldr	r3, [pc, #432]	@ (80022a0 <pulseOximeter_update+0x29c>)
 80020f0:	881b      	ldrh	r3, [r3, #0]
 80020f2:	3301      	adds	r3, #1
 80020f4:	b29a      	uxth	r2, r3
 80020f6:	4b6a      	ldr	r3, [pc, #424]	@ (80022a0 <pulseOximeter_update+0x29c>)
 80020f8:	801a      	strh	r2, [r3, #0]

	if( detectPulse( lpbFilterIR.result ) &&  samplesRecorded > 0 )
 80020fa:	4b66      	ldr	r3, [pc, #408]	@ (8002294 <pulseOximeter_update+0x290>)
 80020fc:	edd3 7a02 	vldr	s15, [r3, #8]
 8002100:	eeb0 0a67 	vmov.f32	s0, s15
 8002104:	f7ff fe50 	bl	8001da8 <detectPulse>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	f000 8088 	beq.w	8002220 <pulseOximeter_update+0x21c>
 8002110:	4b63      	ldr	r3, [pc, #396]	@ (80022a0 <pulseOximeter_update+0x29c>)
 8002112:	881b      	ldrh	r3, [r3, #0]
 8002114:	2b00      	cmp	r3, #0
 8002116:	f000 8083 	beq.w	8002220 <pulseOximeter_update+0x21c>
	{
		result.pulseDetected=true;
 800211a:	2301      	movs	r3, #1
 800211c:	743b      	strb	r3, [r7, #16]
		pulsesDetected++;
 800211e:	4b61      	ldr	r3, [pc, #388]	@ (80022a4 <pulseOximeter_update+0x2a0>)
 8002120:	881b      	ldrh	r3, [r3, #0]
 8002122:	3301      	adds	r3, #1
 8002124:	b29a      	uxth	r2, r3
 8002126:	4b5f      	ldr	r3, [pc, #380]	@ (80022a4 <pulseOximeter_update+0x2a0>)
 8002128:	801a      	strh	r2, [r3, #0]

		if( (pulsesDetected % RESET_SPO2_EVERY_N_PULSES == 0) )
 800212a:	4b5e      	ldr	r3, [pc, #376]	@ (80022a4 <pulseOximeter_update+0x2a0>)
 800212c:	881b      	ldrh	r3, [r3, #0]
 800212e:	f003 0303 	and.w	r3, r3, #3
 8002132:	b29b      	uxth	r3, r3
 8002134:	2b00      	cmp	r3, #0
 8002136:	d173      	bne.n	8002220 <pulseOximeter_update+0x21c>
		{
			float ratioRMS = log( sqrt(redACValueSqSum/samplesRecorded) ) / log( sqrt(irACValueSqSum/samplesRecorded) );
 8002138:	4b58      	ldr	r3, [pc, #352]	@ (800229c <pulseOximeter_update+0x298>)
 800213a:	ed93 7a00 	vldr	s14, [r3]
 800213e:	4b58      	ldr	r3, [pc, #352]	@ (80022a0 <pulseOximeter_update+0x29c>)
 8002140:	881b      	ldrh	r3, [r3, #0]
 8002142:	ee07 3a90 	vmov	s15, r3
 8002146:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800214a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800214e:	ee16 0a90 	vmov	r0, s13
 8002152:	f7fe f9f9 	bl	8000548 <__aeabi_f2d>
 8002156:	4602      	mov	r2, r0
 8002158:	460b      	mov	r3, r1
 800215a:	ec43 2b10 	vmov	d0, r2, r3
 800215e:	f00d fd55 	bl	800fc0c <sqrt>
 8002162:	eeb0 7a40 	vmov.f32	s14, s0
 8002166:	eef0 7a60 	vmov.f32	s15, s1
 800216a:	eeb0 0a47 	vmov.f32	s0, s14
 800216e:	eef0 0a67 	vmov.f32	s1, s15
 8002172:	f00d fd0d 	bl	800fb90 <log>
 8002176:	ec55 4b10 	vmov	r4, r5, d0
 800217a:	4b47      	ldr	r3, [pc, #284]	@ (8002298 <pulseOximeter_update+0x294>)
 800217c:	ed93 7a00 	vldr	s14, [r3]
 8002180:	4b47      	ldr	r3, [pc, #284]	@ (80022a0 <pulseOximeter_update+0x29c>)
 8002182:	881b      	ldrh	r3, [r3, #0]
 8002184:	ee07 3a90 	vmov	s15, r3
 8002188:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800218c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002190:	ee16 0a90 	vmov	r0, s13
 8002194:	f7fe f9d8 	bl	8000548 <__aeabi_f2d>
 8002198:	4602      	mov	r2, r0
 800219a:	460b      	mov	r3, r1
 800219c:	ec43 2b10 	vmov	d0, r2, r3
 80021a0:	f00d fd34 	bl	800fc0c <sqrt>
 80021a4:	eeb0 7a40 	vmov.f32	s14, s0
 80021a8:	eef0 7a60 	vmov.f32	s15, s1
 80021ac:	eeb0 0a47 	vmov.f32	s0, s14
 80021b0:	eef0 0a67 	vmov.f32	s1, s15
 80021b4:	f00d fcec 	bl	800fb90 <log>
 80021b8:	ec53 2b10 	vmov	r2, r3, d0
 80021bc:	4620      	mov	r0, r4
 80021be:	4629      	mov	r1, r5
 80021c0:	f7fe fb44 	bl	800084c <__aeabi_ddiv>
 80021c4:	4602      	mov	r2, r0
 80021c6:	460b      	mov	r3, r1
 80021c8:	4610      	mov	r0, r2
 80021ca:	4619      	mov	r1, r3
 80021cc:	f7fe fd0c 	bl	8000be8 <__aeabi_d2f>
 80021d0:	4603      	mov	r3, r0
 80021d2:	63bb      	str	r3, [r7, #56]	@ 0x38
			currentSpO2Value = 114.0 - 18.0 * ratioRMS;
 80021d4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80021d6:	f7fe f9b7 	bl	8000548 <__aeabi_f2d>
 80021da:	f04f 0200 	mov.w	r2, #0
 80021de:	4b32      	ldr	r3, [pc, #200]	@ (80022a8 <pulseOximeter_update+0x2a4>)
 80021e0:	f7fe fa0a 	bl	80005f8 <__aeabi_dmul>
 80021e4:	4602      	mov	r2, r0
 80021e6:	460b      	mov	r3, r1
 80021e8:	f04f 0000 	mov.w	r0, #0
 80021ec:	492f      	ldr	r1, [pc, #188]	@ (80022ac <pulseOximeter_update+0x2a8>)
 80021ee:	f7fe f84b 	bl	8000288 <__aeabi_dsub>
 80021f2:	4602      	mov	r2, r0
 80021f4:	460b      	mov	r3, r1
 80021f6:	4610      	mov	r0, r2
 80021f8:	4619      	mov	r1, r3
 80021fa:	f7fe fcf5 	bl	8000be8 <__aeabi_d2f>
 80021fe:	4603      	mov	r3, r0
 8002200:	4a1e      	ldr	r2, [pc, #120]	@ (800227c <pulseOximeter_update+0x278>)
 8002202:	6013      	str	r3, [r2, #0]

			//uint8_t ratio =  ((redACValueSqSum/samplesRecorded) * 100) / (irACValueSqSum/samplesRecorded);
			//if (ratio > 183) ratio = 183;
			//currentSpO2Value = uch_spo2_table[ratio];

			result.SpO2 = currentSpO2Value;
 8002204:	4b1d      	ldr	r3, [pc, #116]	@ (800227c <pulseOximeter_update+0x278>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	627b      	str	r3, [r7, #36]	@ 0x24

			irACValueSqSum = 0;
 800220a:	4b23      	ldr	r3, [pc, #140]	@ (8002298 <pulseOximeter_update+0x294>)
 800220c:	f04f 0200 	mov.w	r2, #0
 8002210:	601a      	str	r2, [r3, #0]
			redACValueSqSum = 0;
 8002212:	4b22      	ldr	r3, [pc, #136]	@ (800229c <pulseOximeter_update+0x298>)
 8002214:	f04f 0200 	mov.w	r2, #0
 8002218:	601a      	str	r2, [r3, #0]
			samplesRecorded = 0;
 800221a:	4b21      	ldr	r3, [pc, #132]	@ (80022a0 <pulseOximeter_update+0x29c>)
 800221c:	2200      	movs	r2, #0
 800221e:	801a      	strh	r2, [r3, #0]
		}
	}

	balanceIntesities( dcFilterRed.w, dcFilterIR.w );
 8002220:	4b1a      	ldr	r3, [pc, #104]	@ (800228c <pulseOximeter_update+0x288>)
 8002222:	edd3 7a00 	vldr	s15, [r3]
 8002226:	4b17      	ldr	r3, [pc, #92]	@ (8002284 <pulseOximeter_update+0x280>)
 8002228:	ed93 7a00 	vldr	s14, [r3]
 800222c:	eef0 0a47 	vmov.f32	s1, s14
 8002230:	eeb0 0a67 	vmov.f32	s0, s15
 8002234:	f7ff fe8a 	bl	8001f4c <balanceIntesities>

	result.heartBPM = currentBPM;
 8002238:	4b1d      	ldr	r3, [pc, #116]	@ (80022b0 <pulseOximeter_update+0x2ac>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	617b      	str	r3, [r7, #20]
	result.irCardiogram = lpbFilterIR.result;
 800223e:	4b15      	ldr	r3, [pc, #84]	@ (8002294 <pulseOximeter_update+0x290>)
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	61bb      	str	r3, [r7, #24]
	result.irDcValue = dcFilterIR.w;
 8002244:	4b0f      	ldr	r3, [pc, #60]	@ (8002284 <pulseOximeter_update+0x280>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	61fb      	str	r3, [r7, #28]
	result.redDcValue = dcFilterRed.w;
 800224a:	4b10      	ldr	r3, [pc, #64]	@ (800228c <pulseOximeter_update+0x288>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	623b      	str	r3, [r7, #32]
	result.dcFilteredIR = dcFilterIR.result;
 8002250:	4b0c      	ldr	r3, [pc, #48]	@ (8002284 <pulseOximeter_update+0x280>)
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	62fb      	str	r3, [r7, #44]	@ 0x2c
	result.dcFilteredRed = dcFilterRed.result;
 8002256:	4b0d      	ldr	r3, [pc, #52]	@ (800228c <pulseOximeter_update+0x288>)
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	633b      	str	r3, [r7, #48]	@ 0x30

	return result;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	461d      	mov	r5, r3
 8002260:	f107 0410 	add.w	r4, r7, #16
 8002264:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002266:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002268:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800226a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800226c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002270:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8002274:	68f8      	ldr	r0, [r7, #12]
 8002276:	3740      	adds	r7, #64	@ 0x40
 8002278:	46bd      	mov	sp, r7
 800227a:	bdb0      	pop	{r4, r5, r7, pc}
 800227c:	20000620 	.word	0x20000620
 8002280:	20000000 	.word	0x20000000
 8002284:	20000580 	.word	0x20000580
 8002288:	3f733333 	.word	0x3f733333
 800228c:	20000588 	.word	0x20000588
 8002290:	20000590 	.word	0x20000590
 8002294:	200005d8 	.word	0x200005d8
 8002298:	20000614 	.word	0x20000614
 800229c:	20000618 	.word	0x20000618
 80022a0:	2000061c 	.word	0x2000061c
 80022a4:	2000061e 	.word	0x2000061e
 80022a8:	40320000 	.word	0x40320000
 80022ac:	405c8000 	.word	0x405c8000
 80022b0:	200005e4 	.word	0x200005e4

080022b4 <MAX30102_getBPM>:

float MAX30102_getBPM(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
	return pulseOximeter.heartBPM;
 80022b8:	4b04      	ldr	r3, [pc, #16]	@ (80022cc <MAX30102_getBPM+0x18>)
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	ee07 3a90 	vmov	s15, r3
}
 80022c0:	eeb0 0a67 	vmov.f32	s0, s15
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr
 80022cc:	20000558 	.word	0x20000558

080022d0 <MAX30102_getSPO2>:
float MAX30102_getSPO2(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
	return pulseOximeter.SpO2;
 80022d4:	4b04      	ldr	r3, [pc, #16]	@ (80022e8 <MAX30102_getSPO2+0x18>)
 80022d6:	695b      	ldr	r3, [r3, #20]
 80022d8:	ee07 3a90 	vmov	s15, r3
}
 80022dc:	eeb0 0a67 	vmov.f32	s0, s15
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr
 80022e8:	20000558 	.word	0x20000558

080022ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022f2:	2300      	movs	r3, #0
 80022f4:	607b      	str	r3, [r7, #4]
 80022f6:	4b10      	ldr	r3, [pc, #64]	@ (8002338 <HAL_MspInit+0x4c>)
 80022f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022fa:	4a0f      	ldr	r2, [pc, #60]	@ (8002338 <HAL_MspInit+0x4c>)
 80022fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002300:	6453      	str	r3, [r2, #68]	@ 0x44
 8002302:	4b0d      	ldr	r3, [pc, #52]	@ (8002338 <HAL_MspInit+0x4c>)
 8002304:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002306:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800230a:	607b      	str	r3, [r7, #4]
 800230c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800230e:	2300      	movs	r3, #0
 8002310:	603b      	str	r3, [r7, #0]
 8002312:	4b09      	ldr	r3, [pc, #36]	@ (8002338 <HAL_MspInit+0x4c>)
 8002314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002316:	4a08      	ldr	r2, [pc, #32]	@ (8002338 <HAL_MspInit+0x4c>)
 8002318:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800231c:	6413      	str	r3, [r2, #64]	@ 0x40
 800231e:	4b06      	ldr	r3, [pc, #24]	@ (8002338 <HAL_MspInit+0x4c>)
 8002320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002322:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002326:	603b      	str	r3, [r7, #0]
 8002328:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800232a:	2007      	movs	r0, #7
 800232c:	f001 f8b0 	bl	8003490 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002330:	bf00      	nop
 8002332:	3708      	adds	r7, #8
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	40023800 	.word	0x40023800

0800233c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b08a      	sub	sp, #40	@ 0x28
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002344:	f107 0314 	add.w	r3, r7, #20
 8002348:	2200      	movs	r2, #0
 800234a:	601a      	str	r2, [r3, #0]
 800234c:	605a      	str	r2, [r3, #4]
 800234e:	609a      	str	r2, [r3, #8]
 8002350:	60da      	str	r2, [r3, #12]
 8002352:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a2f      	ldr	r2, [pc, #188]	@ (8002418 <HAL_ADC_MspInit+0xdc>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d158      	bne.n	8002410 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800235e:	2300      	movs	r3, #0
 8002360:	613b      	str	r3, [r7, #16]
 8002362:	4b2e      	ldr	r3, [pc, #184]	@ (800241c <HAL_ADC_MspInit+0xe0>)
 8002364:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002366:	4a2d      	ldr	r2, [pc, #180]	@ (800241c <HAL_ADC_MspInit+0xe0>)
 8002368:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800236c:	6453      	str	r3, [r2, #68]	@ 0x44
 800236e:	4b2b      	ldr	r3, [pc, #172]	@ (800241c <HAL_ADC_MspInit+0xe0>)
 8002370:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002372:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002376:	613b      	str	r3, [r7, #16]
 8002378:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800237a:	2300      	movs	r3, #0
 800237c:	60fb      	str	r3, [r7, #12]
 800237e:	4b27      	ldr	r3, [pc, #156]	@ (800241c <HAL_ADC_MspInit+0xe0>)
 8002380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002382:	4a26      	ldr	r2, [pc, #152]	@ (800241c <HAL_ADC_MspInit+0xe0>)
 8002384:	f043 0301 	orr.w	r3, r3, #1
 8002388:	6313      	str	r3, [r2, #48]	@ 0x30
 800238a:	4b24      	ldr	r3, [pc, #144]	@ (800241c <HAL_ADC_MspInit+0xe0>)
 800238c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800238e:	f003 0301 	and.w	r3, r3, #1
 8002392:	60fb      	str	r3, [r7, #12]
 8002394:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002396:	2303      	movs	r3, #3
 8002398:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800239a:	2303      	movs	r3, #3
 800239c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239e:	2300      	movs	r3, #0
 80023a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023a2:	f107 0314 	add.w	r3, r7, #20
 80023a6:	4619      	mov	r1, r3
 80023a8:	481d      	ldr	r0, [pc, #116]	@ (8002420 <HAL_ADC_MspInit+0xe4>)
 80023aa:	f001 fc23 	bl	8003bf4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80023ae:	4b1d      	ldr	r3, [pc, #116]	@ (8002424 <HAL_ADC_MspInit+0xe8>)
 80023b0:	4a1d      	ldr	r2, [pc, #116]	@ (8002428 <HAL_ADC_MspInit+0xec>)
 80023b2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80023b4:	4b1b      	ldr	r3, [pc, #108]	@ (8002424 <HAL_ADC_MspInit+0xe8>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023ba:	4b1a      	ldr	r3, [pc, #104]	@ (8002424 <HAL_ADC_MspInit+0xe8>)
 80023bc:	2200      	movs	r2, #0
 80023be:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80023c0:	4b18      	ldr	r3, [pc, #96]	@ (8002424 <HAL_ADC_MspInit+0xe8>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80023c6:	4b17      	ldr	r3, [pc, #92]	@ (8002424 <HAL_ADC_MspInit+0xe8>)
 80023c8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80023cc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80023ce:	4b15      	ldr	r3, [pc, #84]	@ (8002424 <HAL_ADC_MspInit+0xe8>)
 80023d0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80023d4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80023d6:	4b13      	ldr	r3, [pc, #76]	@ (8002424 <HAL_ADC_MspInit+0xe8>)
 80023d8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80023dc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80023de:	4b11      	ldr	r3, [pc, #68]	@ (8002424 <HAL_ADC_MspInit+0xe8>)
 80023e0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80023e4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80023e6:	4b0f      	ldr	r3, [pc, #60]	@ (8002424 <HAL_ADC_MspInit+0xe8>)
 80023e8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80023ec:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80023ee:	4b0d      	ldr	r3, [pc, #52]	@ (8002424 <HAL_ADC_MspInit+0xe8>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80023f4:	480b      	ldr	r0, [pc, #44]	@ (8002424 <HAL_ADC_MspInit+0xe8>)
 80023f6:	f001 f88d 	bl	8003514 <HAL_DMA_Init>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d001      	beq.n	8002404 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8002400:	f7ff fb62 	bl	8001ac8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	4a07      	ldr	r2, [pc, #28]	@ (8002424 <HAL_ADC_MspInit+0xe8>)
 8002408:	639a      	str	r2, [r3, #56]	@ 0x38
 800240a:	4a06      	ldr	r2, [pc, #24]	@ (8002424 <HAL_ADC_MspInit+0xe8>)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002410:	bf00      	nop
 8002412:	3728      	adds	r7, #40	@ 0x28
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	40012000 	.word	0x40012000
 800241c:	40023800 	.word	0x40023800
 8002420:	40020000 	.word	0x40020000
 8002424:	2000033c 	.word	0x2000033c
 8002428:	40026410 	.word	0x40026410

0800242c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b08a      	sub	sp, #40	@ 0x28
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002434:	f107 0314 	add.w	r3, r7, #20
 8002438:	2200      	movs	r2, #0
 800243a:	601a      	str	r2, [r3, #0]
 800243c:	605a      	str	r2, [r3, #4]
 800243e:	609a      	str	r2, [r3, #8]
 8002440:	60da      	str	r2, [r3, #12]
 8002442:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a19      	ldr	r2, [pc, #100]	@ (80024b0 <HAL_I2C_MspInit+0x84>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d12c      	bne.n	80024a8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800244e:	2300      	movs	r3, #0
 8002450:	613b      	str	r3, [r7, #16]
 8002452:	4b18      	ldr	r3, [pc, #96]	@ (80024b4 <HAL_I2C_MspInit+0x88>)
 8002454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002456:	4a17      	ldr	r2, [pc, #92]	@ (80024b4 <HAL_I2C_MspInit+0x88>)
 8002458:	f043 0302 	orr.w	r3, r3, #2
 800245c:	6313      	str	r3, [r2, #48]	@ 0x30
 800245e:	4b15      	ldr	r3, [pc, #84]	@ (80024b4 <HAL_I2C_MspInit+0x88>)
 8002460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002462:	f003 0302 	and.w	r3, r3, #2
 8002466:	613b      	str	r3, [r7, #16]
 8002468:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800246a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800246e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002470:	2312      	movs	r3, #18
 8002472:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002474:	2301      	movs	r3, #1
 8002476:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002478:	2300      	movs	r3, #0
 800247a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800247c:	2304      	movs	r3, #4
 800247e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002480:	f107 0314 	add.w	r3, r7, #20
 8002484:	4619      	mov	r1, r3
 8002486:	480c      	ldr	r0, [pc, #48]	@ (80024b8 <HAL_I2C_MspInit+0x8c>)
 8002488:	f001 fbb4 	bl	8003bf4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800248c:	2300      	movs	r3, #0
 800248e:	60fb      	str	r3, [r7, #12]
 8002490:	4b08      	ldr	r3, [pc, #32]	@ (80024b4 <HAL_I2C_MspInit+0x88>)
 8002492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002494:	4a07      	ldr	r2, [pc, #28]	@ (80024b4 <HAL_I2C_MspInit+0x88>)
 8002496:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800249a:	6413      	str	r3, [r2, #64]	@ 0x40
 800249c:	4b05      	ldr	r3, [pc, #20]	@ (80024b4 <HAL_I2C_MspInit+0x88>)
 800249e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024a4:	60fb      	str	r3, [r7, #12]
 80024a6:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80024a8:	bf00      	nop
 80024aa:	3728      	adds	r7, #40	@ 0x28
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	40005400 	.word	0x40005400
 80024b4:	40023800 	.word	0x40023800
 80024b8:	40020400 	.word	0x40020400

080024bc <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b08e      	sub	sp, #56	@ 0x38
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024c8:	2200      	movs	r2, #0
 80024ca:	601a      	str	r2, [r3, #0]
 80024cc:	605a      	str	r2, [r3, #4]
 80024ce:	609a      	str	r2, [r3, #8]
 80024d0:	60da      	str	r2, [r3, #12]
 80024d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024d4:	f107 0314 	add.w	r3, r7, #20
 80024d8:	2200      	movs	r2, #0
 80024da:	601a      	str	r2, [r3, #0]
 80024dc:	605a      	str	r2, [r3, #4]
 80024de:	609a      	str	r2, [r3, #8]
 80024e0:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI2)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a4a      	ldr	r2, [pc, #296]	@ (8002610 <HAL_I2S_MspInit+0x154>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	f040 808d 	bne.w	8002608 <HAL_I2S_MspInit+0x14c>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80024ee:	2301      	movs	r3, #1
 80024f0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 336;
 80024f2:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80024f6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80024f8:	2302      	movs	r3, #2
 80024fa:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024fc:	f107 0314 	add.w	r3, r7, #20
 8002500:	4618      	mov	r0, r3
 8002502:	f005 fa0f 	bl	8007924 <HAL_RCCEx_PeriphCLKConfig>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d001      	beq.n	8002510 <HAL_I2S_MspInit+0x54>
    {
      Error_Handler();
 800250c:	f7ff fadc 	bl	8001ac8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002510:	2300      	movs	r3, #0
 8002512:	613b      	str	r3, [r7, #16]
 8002514:	4b3f      	ldr	r3, [pc, #252]	@ (8002614 <HAL_I2S_MspInit+0x158>)
 8002516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002518:	4a3e      	ldr	r2, [pc, #248]	@ (8002614 <HAL_I2S_MspInit+0x158>)
 800251a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800251e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002520:	4b3c      	ldr	r3, [pc, #240]	@ (8002614 <HAL_I2S_MspInit+0x158>)
 8002522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002524:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002528:	613b      	str	r3, [r7, #16]
 800252a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800252c:	2300      	movs	r3, #0
 800252e:	60fb      	str	r3, [r7, #12]
 8002530:	4b38      	ldr	r3, [pc, #224]	@ (8002614 <HAL_I2S_MspInit+0x158>)
 8002532:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002534:	4a37      	ldr	r2, [pc, #220]	@ (8002614 <HAL_I2S_MspInit+0x158>)
 8002536:	f043 0304 	orr.w	r3, r3, #4
 800253a:	6313      	str	r3, [r2, #48]	@ 0x30
 800253c:	4b35      	ldr	r3, [pc, #212]	@ (8002614 <HAL_I2S_MspInit+0x158>)
 800253e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002540:	f003 0304 	and.w	r3, r3, #4
 8002544:	60fb      	str	r3, [r7, #12]
 8002546:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002548:	2300      	movs	r3, #0
 800254a:	60bb      	str	r3, [r7, #8]
 800254c:	4b31      	ldr	r3, [pc, #196]	@ (8002614 <HAL_I2S_MspInit+0x158>)
 800254e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002550:	4a30      	ldr	r2, [pc, #192]	@ (8002614 <HAL_I2S_MspInit+0x158>)
 8002552:	f043 0302 	orr.w	r3, r3, #2
 8002556:	6313      	str	r3, [r2, #48]	@ 0x30
 8002558:	4b2e      	ldr	r3, [pc, #184]	@ (8002614 <HAL_I2S_MspInit+0x158>)
 800255a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800255c:	f003 0302 	and.w	r3, r3, #2
 8002560:	60bb      	str	r3, [r7, #8]
 8002562:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8002564:	2308      	movs	r3, #8
 8002566:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002568:	2302      	movs	r3, #2
 800256a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256c:	2300      	movs	r3, #0
 800256e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002570:	2300      	movs	r3, #0
 8002572:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002574:	2305      	movs	r3, #5
 8002576:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8002578:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800257c:	4619      	mov	r1, r3
 800257e:	4826      	ldr	r0, [pc, #152]	@ (8002618 <HAL_I2S_MspInit+0x15c>)
 8002580:	f001 fb38 	bl	8003bf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8002584:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002588:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800258a:	2302      	movs	r3, #2
 800258c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258e:	2300      	movs	r3, #0
 8002590:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002592:	2300      	movs	r3, #0
 8002594:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002596:	2305      	movs	r3, #5
 8002598:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800259a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800259e:	4619      	mov	r1, r3
 80025a0:	481e      	ldr	r0, [pc, #120]	@ (800261c <HAL_I2S_MspInit+0x160>)
 80025a2:	f001 fb27 	bl	8003bf4 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80025a6:	4b1e      	ldr	r3, [pc, #120]	@ (8002620 <HAL_I2S_MspInit+0x164>)
 80025a8:	4a1e      	ldr	r2, [pc, #120]	@ (8002624 <HAL_I2S_MspInit+0x168>)
 80025aa:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80025ac:	4b1c      	ldr	r3, [pc, #112]	@ (8002620 <HAL_I2S_MspInit+0x164>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80025b2:	4b1b      	ldr	r3, [pc, #108]	@ (8002620 <HAL_I2S_MspInit+0x164>)
 80025b4:	2240      	movs	r2, #64	@ 0x40
 80025b6:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025b8:	4b19      	ldr	r3, [pc, #100]	@ (8002620 <HAL_I2S_MspInit+0x164>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80025be:	4b18      	ldr	r3, [pc, #96]	@ (8002620 <HAL_I2S_MspInit+0x164>)
 80025c0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80025c4:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80025c6:	4b16      	ldr	r3, [pc, #88]	@ (8002620 <HAL_I2S_MspInit+0x164>)
 80025c8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80025cc:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80025ce:	4b14      	ldr	r3, [pc, #80]	@ (8002620 <HAL_I2S_MspInit+0x164>)
 80025d0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80025d4:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 80025d6:	4b12      	ldr	r3, [pc, #72]	@ (8002620 <HAL_I2S_MspInit+0x164>)
 80025d8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80025dc:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80025de:	4b10      	ldr	r3, [pc, #64]	@ (8002620 <HAL_I2S_MspInit+0x164>)
 80025e0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80025e4:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80025e6:	4b0e      	ldr	r3, [pc, #56]	@ (8002620 <HAL_I2S_MspInit+0x164>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80025ec:	480c      	ldr	r0, [pc, #48]	@ (8002620 <HAL_I2S_MspInit+0x164>)
 80025ee:	f000 ff91 	bl	8003514 <HAL_DMA_Init>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d001      	beq.n	80025fc <HAL_I2S_MspInit+0x140>
    {
      Error_Handler();
 80025f8:	f7ff fa66 	bl	8001ac8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	4a08      	ldr	r2, [pc, #32]	@ (8002620 <HAL_I2S_MspInit+0x164>)
 8002600:	639a      	str	r2, [r3, #56]	@ 0x38
 8002602:	4a07      	ldr	r2, [pc, #28]	@ (8002620 <HAL_I2S_MspInit+0x164>)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8002608:	bf00      	nop
 800260a:	3738      	adds	r7, #56	@ 0x38
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	40003800 	.word	0x40003800
 8002614:	40023800 	.word	0x40023800
 8002618:	40020800 	.word	0x40020800
 800261c:	40020400 	.word	0x40020400
 8002620:	20000438 	.word	0x20000438
 8002624:	40026070 	.word	0x40026070

08002628 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002628:	b480      	push	{r7}
 800262a:	b085      	sub	sp, #20
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002638:	d10d      	bne.n	8002656 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800263a:	2300      	movs	r3, #0
 800263c:	60fb      	str	r3, [r7, #12]
 800263e:	4b09      	ldr	r3, [pc, #36]	@ (8002664 <HAL_TIM_Base_MspInit+0x3c>)
 8002640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002642:	4a08      	ldr	r2, [pc, #32]	@ (8002664 <HAL_TIM_Base_MspInit+0x3c>)
 8002644:	f043 0301 	orr.w	r3, r3, #1
 8002648:	6413      	str	r3, [r2, #64]	@ 0x40
 800264a:	4b06      	ldr	r3, [pc, #24]	@ (8002664 <HAL_TIM_Base_MspInit+0x3c>)
 800264c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800264e:	f003 0301 	and.w	r3, r3, #1
 8002652:	60fb      	str	r3, [r7, #12]
 8002654:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8002656:	bf00      	nop
 8002658:	3714      	adds	r7, #20
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop
 8002664:	40023800 	.word	0x40023800

08002668 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b08a      	sub	sp, #40	@ 0x28
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002670:	f107 0314 	add.w	r3, r7, #20
 8002674:	2200      	movs	r2, #0
 8002676:	601a      	str	r2, [r3, #0]
 8002678:	605a      	str	r2, [r3, #4]
 800267a:	609a      	str	r2, [r3, #8]
 800267c:	60da      	str	r2, [r3, #12]
 800267e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a19      	ldr	r2, [pc, #100]	@ (80026ec <HAL_UART_MspInit+0x84>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d12c      	bne.n	80026e4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800268a:	2300      	movs	r3, #0
 800268c:	613b      	str	r3, [r7, #16]
 800268e:	4b18      	ldr	r3, [pc, #96]	@ (80026f0 <HAL_UART_MspInit+0x88>)
 8002690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002692:	4a17      	ldr	r2, [pc, #92]	@ (80026f0 <HAL_UART_MspInit+0x88>)
 8002694:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002698:	6413      	str	r3, [r2, #64]	@ 0x40
 800269a:	4b15      	ldr	r3, [pc, #84]	@ (80026f0 <HAL_UART_MspInit+0x88>)
 800269c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800269e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80026a2:	613b      	str	r3, [r7, #16]
 80026a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026a6:	2300      	movs	r3, #0
 80026a8:	60fb      	str	r3, [r7, #12]
 80026aa:	4b11      	ldr	r3, [pc, #68]	@ (80026f0 <HAL_UART_MspInit+0x88>)
 80026ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ae:	4a10      	ldr	r2, [pc, #64]	@ (80026f0 <HAL_UART_MspInit+0x88>)
 80026b0:	f043 0304 	orr.w	r3, r3, #4
 80026b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80026b6:	4b0e      	ldr	r3, [pc, #56]	@ (80026f0 <HAL_UART_MspInit+0x88>)
 80026b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ba:	f003 0304 	and.w	r3, r3, #4
 80026be:	60fb      	str	r3, [r7, #12]
 80026c0:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80026c2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80026c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c8:	2302      	movs	r3, #2
 80026ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026cc:	2300      	movs	r3, #0
 80026ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026d0:	2303      	movs	r3, #3
 80026d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80026d4:	2308      	movs	r3, #8
 80026d6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026d8:	f107 0314 	add.w	r3, r7, #20
 80026dc:	4619      	mov	r1, r3
 80026de:	4805      	ldr	r0, [pc, #20]	@ (80026f4 <HAL_UART_MspInit+0x8c>)
 80026e0:	f001 fa88 	bl	8003bf4 <HAL_GPIO_Init>

  /* USER CODE END UART4_MspInit 1 */

  }

}
 80026e4:	bf00      	nop
 80026e6:	3728      	adds	r7, #40	@ 0x28
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	40004c00 	.word	0x40004c00
 80026f0:	40023800 	.word	0x40023800
 80026f4:	40020800 	.word	0x40020800

080026f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80026fc:	bf00      	nop
 80026fe:	e7fd      	b.n	80026fc <NMI_Handler+0x4>

08002700 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002704:	bf00      	nop
 8002706:	e7fd      	b.n	8002704 <HardFault_Handler+0x4>

08002708 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800270c:	bf00      	nop
 800270e:	e7fd      	b.n	800270c <MemManage_Handler+0x4>

08002710 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002714:	bf00      	nop
 8002716:	e7fd      	b.n	8002714 <BusFault_Handler+0x4>

08002718 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800271c:	bf00      	nop
 800271e:	e7fd      	b.n	800271c <UsageFault_Handler+0x4>

08002720 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002720:	b480      	push	{r7}
 8002722:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002724:	bf00      	nop
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr

0800272e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800272e:	b480      	push	{r7}
 8002730:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002732:	bf00      	nop
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr

0800273c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002740:	bf00      	nop
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr

0800274a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800274a:	b580      	push	{r7, lr}
 800274c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800274e:	f000 f983 	bl	8002a58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002752:	bf00      	nop
 8002754:	bd80      	pop	{r7, pc}

08002756 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002756:	b580      	push	{r7, lr}
 8002758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Pulse_Oximeter_Int_Pin);
 800275a:	2001      	movs	r0, #1
 800275c:	f001 fc1a 	bl	8003f94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002760:	bf00      	nop
 8002762:	bd80      	pop	{r7, pc}

08002764 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8002768:	4802      	ldr	r0, [pc, #8]	@ (8002774 <DMA1_Stream4_IRQHandler+0x10>)
 800276a:	f000 ffd9 	bl	8003720 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800276e:	bf00      	nop
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	20000438 	.word	0x20000438

08002778 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800277c:	4802      	ldr	r0, [pc, #8]	@ (8002788 <DMA2_Stream0_IRQHandler+0x10>)
 800277e:	f000 ffcf 	bl	8003720 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002782:	bf00      	nop
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	2000033c 	.word	0x2000033c

0800278c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002790:	4802      	ldr	r0, [pc, #8]	@ (800279c <OTG_FS_IRQHandler+0x10>)
 8002792:	f003 fb21 	bl	8005dd8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002796:	bf00      	nop
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	20001be0 	.word	0x20001be0

080027a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0
  return 1;
 80027a4:	2301      	movs	r3, #1
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr

080027b0 <_kill>:

int _kill(int pid, int sig)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80027ba:	f00b fb1b 	bl	800ddf4 <__errno>
 80027be:	4603      	mov	r3, r0
 80027c0:	2216      	movs	r2, #22
 80027c2:	601a      	str	r2, [r3, #0]
  return -1;
 80027c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3708      	adds	r7, #8
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <_exit>:

void _exit (int status)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80027d8:	f04f 31ff 	mov.w	r1, #4294967295
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f7ff ffe7 	bl	80027b0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80027e2:	bf00      	nop
 80027e4:	e7fd      	b.n	80027e2 <_exit+0x12>

080027e6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027e6:	b580      	push	{r7, lr}
 80027e8:	b086      	sub	sp, #24
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	60f8      	str	r0, [r7, #12]
 80027ee:	60b9      	str	r1, [r7, #8]
 80027f0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027f2:	2300      	movs	r3, #0
 80027f4:	617b      	str	r3, [r7, #20]
 80027f6:	e00a      	b.n	800280e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80027f8:	f3af 8000 	nop.w
 80027fc:	4601      	mov	r1, r0
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	1c5a      	adds	r2, r3, #1
 8002802:	60ba      	str	r2, [r7, #8]
 8002804:	b2ca      	uxtb	r2, r1
 8002806:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	3301      	adds	r3, #1
 800280c:	617b      	str	r3, [r7, #20]
 800280e:	697a      	ldr	r2, [r7, #20]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	429a      	cmp	r2, r3
 8002814:	dbf0      	blt.n	80027f8 <_read+0x12>
  }

  return len;
 8002816:	687b      	ldr	r3, [r7, #4]
}
 8002818:	4618      	mov	r0, r3
 800281a:	3718      	adds	r7, #24
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}

08002820 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b086      	sub	sp, #24
 8002824:	af00      	add	r7, sp, #0
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800282c:	2300      	movs	r3, #0
 800282e:	617b      	str	r3, [r7, #20]
 8002830:	e009      	b.n	8002846 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	1c5a      	adds	r2, r3, #1
 8002836:	60ba      	str	r2, [r7, #8]
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	4618      	mov	r0, r3
 800283c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	3301      	adds	r3, #1
 8002844:	617b      	str	r3, [r7, #20]
 8002846:	697a      	ldr	r2, [r7, #20]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	429a      	cmp	r2, r3
 800284c:	dbf1      	blt.n	8002832 <_write+0x12>
  }
  return len;
 800284e:	687b      	ldr	r3, [r7, #4]
}
 8002850:	4618      	mov	r0, r3
 8002852:	3718      	adds	r7, #24
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}

08002858 <_close>:

int _close(int file)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002860:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002864:	4618      	mov	r0, r3
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002880:	605a      	str	r2, [r3, #4]
  return 0;
 8002882:	2300      	movs	r3, #0
}
 8002884:	4618      	mov	r0, r3
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <_isatty>:

int _isatty(int file)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002898:	2301      	movs	r3, #1
}
 800289a:	4618      	mov	r0, r3
 800289c:	370c      	adds	r7, #12
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr

080028a6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80028a6:	b480      	push	{r7}
 80028a8:	b085      	sub	sp, #20
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	60f8      	str	r0, [r7, #12]
 80028ae:	60b9      	str	r1, [r7, #8]
 80028b0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80028b2:	2300      	movs	r3, #0
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3714      	adds	r7, #20
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr

080028c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b086      	sub	sp, #24
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028c8:	4a14      	ldr	r2, [pc, #80]	@ (800291c <_sbrk+0x5c>)
 80028ca:	4b15      	ldr	r3, [pc, #84]	@ (8002920 <_sbrk+0x60>)
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028d4:	4b13      	ldr	r3, [pc, #76]	@ (8002924 <_sbrk+0x64>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d102      	bne.n	80028e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028dc:	4b11      	ldr	r3, [pc, #68]	@ (8002924 <_sbrk+0x64>)
 80028de:	4a12      	ldr	r2, [pc, #72]	@ (8002928 <_sbrk+0x68>)
 80028e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028e2:	4b10      	ldr	r3, [pc, #64]	@ (8002924 <_sbrk+0x64>)
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4413      	add	r3, r2
 80028ea:	693a      	ldr	r2, [r7, #16]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d207      	bcs.n	8002900 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028f0:	f00b fa80 	bl	800ddf4 <__errno>
 80028f4:	4603      	mov	r3, r0
 80028f6:	220c      	movs	r2, #12
 80028f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028fa:	f04f 33ff 	mov.w	r3, #4294967295
 80028fe:	e009      	b.n	8002914 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002900:	4b08      	ldr	r3, [pc, #32]	@ (8002924 <_sbrk+0x64>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002906:	4b07      	ldr	r3, [pc, #28]	@ (8002924 <_sbrk+0x64>)
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4413      	add	r3, r2
 800290e:	4a05      	ldr	r2, [pc, #20]	@ (8002924 <_sbrk+0x64>)
 8002910:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002912:	68fb      	ldr	r3, [r7, #12]
}
 8002914:	4618      	mov	r0, r3
 8002916:	3718      	adds	r7, #24
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	20020000 	.word	0x20020000
 8002920:	00000400 	.word	0x00000400
 8002924:	200006f8 	.word	0x200006f8
 8002928:	20002430 	.word	0x20002430

0800292c <millis>:
  }
}

// Get number of elapsed milliseconds
uint32_t millis(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8002930:	f000 f8a6 	bl	8002a80 <HAL_GetTick>
 8002934:	4603      	mov	r3, r0
}
 8002936:	4618      	mov	r0, r3
 8002938:	bd80      	pop	{r7, pc}
	...

0800293c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002940:	4b06      	ldr	r3, [pc, #24]	@ (800295c <SystemInit+0x20>)
 8002942:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002946:	4a05      	ldr	r2, [pc, #20]	@ (800295c <SystemInit+0x20>)
 8002948:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800294c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002950:	bf00      	nop
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	e000ed00 	.word	0xe000ed00

08002960 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

   ldr   sp, =_estack     /* set stack pointer */
 8002960:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002998 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002964:	f7ff ffea 	bl	800293c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002968:	480c      	ldr	r0, [pc, #48]	@ (800299c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800296a:	490d      	ldr	r1, [pc, #52]	@ (80029a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800296c:	4a0d      	ldr	r2, [pc, #52]	@ (80029a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800296e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002970:	e002      	b.n	8002978 <LoopCopyDataInit>

08002972 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002972:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002974:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002976:	3304      	adds	r3, #4

08002978 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002978:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800297a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800297c:	d3f9      	bcc.n	8002972 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800297e:	4a0a      	ldr	r2, [pc, #40]	@ (80029a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002980:	4c0a      	ldr	r4, [pc, #40]	@ (80029ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8002982:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002984:	e001      	b.n	800298a <LoopFillZerobss>

08002986 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002986:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002988:	3204      	adds	r2, #4

0800298a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800298a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800298c:	d3fb      	bcc.n	8002986 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800298e:	f00b fa37 	bl	800de00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002992:	f7fe fbdf 	bl	8001154 <main>
  bx  lr    
 8002996:	4770      	bx	lr
   ldr   sp, =_estack     /* set stack pointer */
 8002998:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800299c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029a0:	200002d8 	.word	0x200002d8
  ldr r2, =_sidata
 80029a4:	080105a0 	.word	0x080105a0
  ldr r2, =_sbss
 80029a8:	200002d8 	.word	0x200002d8
  ldr r4, =_ebss
 80029ac:	20002430 	.word	0x20002430

080029b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80029b0:	e7fe      	b.n	80029b0 <ADC_IRQHandler>
	...

080029b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80029b8:	4b0e      	ldr	r3, [pc, #56]	@ (80029f4 <HAL_Init+0x40>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a0d      	ldr	r2, [pc, #52]	@ (80029f4 <HAL_Init+0x40>)
 80029be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80029c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80029c4:	4b0b      	ldr	r3, [pc, #44]	@ (80029f4 <HAL_Init+0x40>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a0a      	ldr	r2, [pc, #40]	@ (80029f4 <HAL_Init+0x40>)
 80029ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80029ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029d0:	4b08      	ldr	r3, [pc, #32]	@ (80029f4 <HAL_Init+0x40>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a07      	ldr	r2, [pc, #28]	@ (80029f4 <HAL_Init+0x40>)
 80029d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029dc:	2003      	movs	r0, #3
 80029de:	f000 fd57 	bl	8003490 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029e2:	2000      	movs	r0, #0
 80029e4:	f000 f808 	bl	80029f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029e8:	f7ff fc80 	bl	80022ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	40023c00 	.word	0x40023c00

080029f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a00:	4b12      	ldr	r3, [pc, #72]	@ (8002a4c <HAL_InitTick+0x54>)
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	4b12      	ldr	r3, [pc, #72]	@ (8002a50 <HAL_InitTick+0x58>)
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	4619      	mov	r1, r3
 8002a0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a16:	4618      	mov	r0, r3
 8002a18:	f000 fd6f 	bl	80034fa <HAL_SYSTICK_Config>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d001      	beq.n	8002a26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e00e      	b.n	8002a44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2b0f      	cmp	r3, #15
 8002a2a:	d80a      	bhi.n	8002a42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	6879      	ldr	r1, [r7, #4]
 8002a30:	f04f 30ff 	mov.w	r0, #4294967295
 8002a34:	f000 fd37 	bl	80034a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a38:	4a06      	ldr	r2, [pc, #24]	@ (8002a54 <HAL_InitTick+0x5c>)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	e000      	b.n	8002a44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3708      	adds	r7, #8
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	20000004 	.word	0x20000004
 8002a50:	2000000c 	.word	0x2000000c
 8002a54:	20000008 	.word	0x20000008

08002a58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a5c:	4b06      	ldr	r3, [pc, #24]	@ (8002a78 <HAL_IncTick+0x20>)
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	461a      	mov	r2, r3
 8002a62:	4b06      	ldr	r3, [pc, #24]	@ (8002a7c <HAL_IncTick+0x24>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4413      	add	r3, r2
 8002a68:	4a04      	ldr	r2, [pc, #16]	@ (8002a7c <HAL_IncTick+0x24>)
 8002a6a:	6013      	str	r3, [r2, #0]
}
 8002a6c:	bf00      	nop
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	2000000c 	.word	0x2000000c
 8002a7c:	200006fc 	.word	0x200006fc

08002a80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a80:	b480      	push	{r7}
 8002a82:	af00      	add	r7, sp, #0
  return uwTick;
 8002a84:	4b03      	ldr	r3, [pc, #12]	@ (8002a94 <HAL_GetTick+0x14>)
 8002a86:	681b      	ldr	r3, [r3, #0]
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop
 8002a94:	200006fc 	.word	0x200006fc

08002a98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002aa0:	f7ff ffee 	bl	8002a80 <HAL_GetTick>
 8002aa4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ab0:	d005      	beq.n	8002abe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ab2:	4b0a      	ldr	r3, [pc, #40]	@ (8002adc <HAL_Delay+0x44>)
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	4413      	add	r3, r2
 8002abc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002abe:	bf00      	nop
 8002ac0:	f7ff ffde 	bl	8002a80 <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	68fa      	ldr	r2, [r7, #12]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d8f7      	bhi.n	8002ac0 <HAL_Delay+0x28>
  {
  }
}
 8002ad0:	bf00      	nop
 8002ad2:	bf00      	nop
 8002ad4:	3710      	adds	r7, #16
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	2000000c 	.word	0x2000000c

08002ae0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d101      	bne.n	8002af6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e033      	b.n	8002b5e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d109      	bne.n	8002b12 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f7ff fc1c 	bl	800233c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b16:	f003 0310 	and.w	r3, r3, #16
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d118      	bne.n	8002b50 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b22:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002b26:	f023 0302 	bic.w	r3, r3, #2
 8002b2a:	f043 0202 	orr.w	r2, r3, #2
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f000 fa5e 	bl	8002ff4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b42:	f023 0303 	bic.w	r3, r3, #3
 8002b46:	f043 0201 	orr.w	r2, r3, #1
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	641a      	str	r2, [r3, #64]	@ 0x40
 8002b4e:	e001      	b.n	8002b54 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3710      	adds	r7, #16
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
	...

08002b68 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b086      	sub	sp, #24
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	60b9      	str	r1, [r7, #8]
 8002b72:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002b74:	2300      	movs	r3, #0
 8002b76:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d101      	bne.n	8002b86 <HAL_ADC_Start_DMA+0x1e>
 8002b82:	2302      	movs	r3, #2
 8002b84:	e0e9      	b.n	8002d5a <HAL_ADC_Start_DMA+0x1f2>
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2201      	movs	r2, #1
 8002b8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	f003 0301 	and.w	r3, r3, #1
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d018      	beq.n	8002bce <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	689a      	ldr	r2, [r3, #8]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f042 0201 	orr.w	r2, r2, #1
 8002baa:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002bac:	4b6d      	ldr	r3, [pc, #436]	@ (8002d64 <HAL_ADC_Start_DMA+0x1fc>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a6d      	ldr	r2, [pc, #436]	@ (8002d68 <HAL_ADC_Start_DMA+0x200>)
 8002bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb6:	0c9a      	lsrs	r2, r3, #18
 8002bb8:	4613      	mov	r3, r2
 8002bba:	005b      	lsls	r3, r3, #1
 8002bbc:	4413      	add	r3, r2
 8002bbe:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002bc0:	e002      	b.n	8002bc8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	3b01      	subs	r3, #1
 8002bc6:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d1f9      	bne.n	8002bc2 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bd8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002bdc:	d107      	bne.n	8002bee <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	689a      	ldr	r2, [r3, #8]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002bec:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f003 0301 	and.w	r3, r3, #1
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	f040 80a1 	bne.w	8002d40 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c02:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002c06:	f023 0301 	bic.w	r3, r3, #1
 8002c0a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d007      	beq.n	8002c30 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c24:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002c28:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c34:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c3c:	d106      	bne.n	8002c4c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c42:	f023 0206 	bic.w	r2, r3, #6
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	645a      	str	r2, [r3, #68]	@ 0x44
 8002c4a:	e002      	b.n	8002c52 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2200      	movs	r2, #0
 8002c56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c5a:	4b44      	ldr	r3, [pc, #272]	@ (8002d6c <HAL_ADC_Start_DMA+0x204>)
 8002c5c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c62:	4a43      	ldr	r2, [pc, #268]	@ (8002d70 <HAL_ADC_Start_DMA+0x208>)
 8002c64:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c6a:	4a42      	ldr	r2, [pc, #264]	@ (8002d74 <HAL_ADC_Start_DMA+0x20c>)
 8002c6c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c72:	4a41      	ldr	r2, [pc, #260]	@ (8002d78 <HAL_ADC_Start_DMA+0x210>)
 8002c74:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002c7e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	685a      	ldr	r2, [r3, #4]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002c8e:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	689a      	ldr	r2, [r3, #8]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c9e:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	334c      	adds	r3, #76	@ 0x4c
 8002caa:	4619      	mov	r1, r3
 8002cac:	68ba      	ldr	r2, [r7, #8]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f000 fcde 	bl	8003670 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f003 031f 	and.w	r3, r3, #31
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d12a      	bne.n	8002d16 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a2d      	ldr	r2, [pc, #180]	@ (8002d7c <HAL_ADC_Start_DMA+0x214>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d015      	beq.n	8002cf6 <HAL_ADC_Start_DMA+0x18e>
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a2c      	ldr	r2, [pc, #176]	@ (8002d80 <HAL_ADC_Start_DMA+0x218>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d105      	bne.n	8002ce0 <HAL_ADC_Start_DMA+0x178>
 8002cd4:	4b25      	ldr	r3, [pc, #148]	@ (8002d6c <HAL_ADC_Start_DMA+0x204>)
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f003 031f 	and.w	r3, r3, #31
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d00a      	beq.n	8002cf6 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a27      	ldr	r2, [pc, #156]	@ (8002d84 <HAL_ADC_Start_DMA+0x21c>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d136      	bne.n	8002d58 <HAL_ADC_Start_DMA+0x1f0>
 8002cea:	4b20      	ldr	r3, [pc, #128]	@ (8002d6c <HAL_ADC_Start_DMA+0x204>)
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	f003 0310 	and.w	r3, r3, #16
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d130      	bne.n	8002d58 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d129      	bne.n	8002d58 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	689a      	ldr	r2, [r3, #8]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002d12:	609a      	str	r2, [r3, #8]
 8002d14:	e020      	b.n	8002d58 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a18      	ldr	r2, [pc, #96]	@ (8002d7c <HAL_ADC_Start_DMA+0x214>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d11b      	bne.n	8002d58 <HAL_ADC_Start_DMA+0x1f0>
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d114      	bne.n	8002d58 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	689a      	ldr	r2, [r3, #8]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002d3c:	609a      	str	r2, [r3, #8]
 8002d3e:	e00b      	b.n	8002d58 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d44:	f043 0210 	orr.w	r2, r3, #16
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d50:	f043 0201 	orr.w	r2, r3, #1
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002d58:	2300      	movs	r3, #0
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3718      	adds	r7, #24
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	20000004 	.word	0x20000004
 8002d68:	431bde83 	.word	0x431bde83
 8002d6c:	40012300 	.word	0x40012300
 8002d70:	080031ed 	.word	0x080031ed
 8002d74:	080032a7 	.word	0x080032a7
 8002d78:	080032c3 	.word	0x080032c3
 8002d7c:	40012000 	.word	0x40012000
 8002d80:	40012100 	.word	0x40012100
 8002d84:	40012200 	.word	0x40012200

08002d88 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002d90:	bf00      	nop
 8002d92:	370c      	adds	r7, #12
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr

08002d9c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002da4:	bf00      	nop
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr

08002db0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b085      	sub	sp, #20
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d101      	bne.n	8002dcc <HAL_ADC_ConfigChannel+0x1c>
 8002dc8:	2302      	movs	r3, #2
 8002dca:	e105      	b.n	8002fd8 <HAL_ADC_ConfigChannel+0x228>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	2b09      	cmp	r3, #9
 8002dda:	d925      	bls.n	8002e28 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	68d9      	ldr	r1, [r3, #12]
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	461a      	mov	r2, r3
 8002dea:	4613      	mov	r3, r2
 8002dec:	005b      	lsls	r3, r3, #1
 8002dee:	4413      	add	r3, r2
 8002df0:	3b1e      	subs	r3, #30
 8002df2:	2207      	movs	r2, #7
 8002df4:	fa02 f303 	lsl.w	r3, r2, r3
 8002df8:	43da      	mvns	r2, r3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	400a      	ands	r2, r1
 8002e00:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	68d9      	ldr	r1, [r3, #12]
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	689a      	ldr	r2, [r3, #8]
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	4618      	mov	r0, r3
 8002e14:	4603      	mov	r3, r0
 8002e16:	005b      	lsls	r3, r3, #1
 8002e18:	4403      	add	r3, r0
 8002e1a:	3b1e      	subs	r3, #30
 8002e1c:	409a      	lsls	r2, r3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	430a      	orrs	r2, r1
 8002e24:	60da      	str	r2, [r3, #12]
 8002e26:	e022      	b.n	8002e6e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	6919      	ldr	r1, [r3, #16]
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	461a      	mov	r2, r3
 8002e36:	4613      	mov	r3, r2
 8002e38:	005b      	lsls	r3, r3, #1
 8002e3a:	4413      	add	r3, r2
 8002e3c:	2207      	movs	r2, #7
 8002e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e42:	43da      	mvns	r2, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	400a      	ands	r2, r1
 8002e4a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	6919      	ldr	r1, [r3, #16]
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	689a      	ldr	r2, [r3, #8]
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	4603      	mov	r3, r0
 8002e60:	005b      	lsls	r3, r3, #1
 8002e62:	4403      	add	r3, r0
 8002e64:	409a      	lsls	r2, r3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	430a      	orrs	r2, r1
 8002e6c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	2b06      	cmp	r3, #6
 8002e74:	d824      	bhi.n	8002ec0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	685a      	ldr	r2, [r3, #4]
 8002e80:	4613      	mov	r3, r2
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	4413      	add	r3, r2
 8002e86:	3b05      	subs	r3, #5
 8002e88:	221f      	movs	r2, #31
 8002e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8e:	43da      	mvns	r2, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	400a      	ands	r2, r1
 8002e96:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	685a      	ldr	r2, [r3, #4]
 8002eaa:	4613      	mov	r3, r2
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	4413      	add	r3, r2
 8002eb0:	3b05      	subs	r3, #5
 8002eb2:	fa00 f203 	lsl.w	r2, r0, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	430a      	orrs	r2, r1
 8002ebc:	635a      	str	r2, [r3, #52]	@ 0x34
 8002ebe:	e04c      	b.n	8002f5a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	2b0c      	cmp	r3, #12
 8002ec6:	d824      	bhi.n	8002f12 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	685a      	ldr	r2, [r3, #4]
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	4413      	add	r3, r2
 8002ed8:	3b23      	subs	r3, #35	@ 0x23
 8002eda:	221f      	movs	r2, #31
 8002edc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee0:	43da      	mvns	r2, r3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	400a      	ands	r2, r1
 8002ee8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	685a      	ldr	r2, [r3, #4]
 8002efc:	4613      	mov	r3, r2
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	4413      	add	r3, r2
 8002f02:	3b23      	subs	r3, #35	@ 0x23
 8002f04:	fa00 f203 	lsl.w	r2, r0, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	430a      	orrs	r2, r1
 8002f0e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002f10:	e023      	b.n	8002f5a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	685a      	ldr	r2, [r3, #4]
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	4413      	add	r3, r2
 8002f22:	3b41      	subs	r3, #65	@ 0x41
 8002f24:	221f      	movs	r2, #31
 8002f26:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2a:	43da      	mvns	r2, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	400a      	ands	r2, r1
 8002f32:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	4618      	mov	r0, r3
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	685a      	ldr	r2, [r3, #4]
 8002f46:	4613      	mov	r3, r2
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	4413      	add	r3, r2
 8002f4c:	3b41      	subs	r3, #65	@ 0x41
 8002f4e:	fa00 f203 	lsl.w	r2, r0, r3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	430a      	orrs	r2, r1
 8002f58:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f5a:	4b22      	ldr	r3, [pc, #136]	@ (8002fe4 <HAL_ADC_ConfigChannel+0x234>)
 8002f5c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a21      	ldr	r2, [pc, #132]	@ (8002fe8 <HAL_ADC_ConfigChannel+0x238>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d109      	bne.n	8002f7c <HAL_ADC_ConfigChannel+0x1cc>
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2b12      	cmp	r3, #18
 8002f6e:	d105      	bne.n	8002f7c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a19      	ldr	r2, [pc, #100]	@ (8002fe8 <HAL_ADC_ConfigChannel+0x238>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d123      	bne.n	8002fce <HAL_ADC_ConfigChannel+0x21e>
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2b10      	cmp	r3, #16
 8002f8c:	d003      	beq.n	8002f96 <HAL_ADC_ConfigChannel+0x1e6>
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	2b11      	cmp	r3, #17
 8002f94:	d11b      	bne.n	8002fce <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2b10      	cmp	r3, #16
 8002fa8:	d111      	bne.n	8002fce <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002faa:	4b10      	ldr	r3, [pc, #64]	@ (8002fec <HAL_ADC_ConfigChannel+0x23c>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a10      	ldr	r2, [pc, #64]	@ (8002ff0 <HAL_ADC_ConfigChannel+0x240>)
 8002fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb4:	0c9a      	lsrs	r2, r3, #18
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	4413      	add	r3, r2
 8002fbc:	005b      	lsls	r3, r3, #1
 8002fbe:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002fc0:	e002      	b.n	8002fc8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	3b01      	subs	r3, #1
 8002fc6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d1f9      	bne.n	8002fc2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002fd6:	2300      	movs	r3, #0
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3714      	adds	r7, #20
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr
 8002fe4:	40012300 	.word	0x40012300
 8002fe8:	40012000 	.word	0x40012000
 8002fec:	20000004 	.word	0x20000004
 8002ff0:	431bde83 	.word	0x431bde83

08002ff4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b085      	sub	sp, #20
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ffc:	4b79      	ldr	r3, [pc, #484]	@ (80031e4 <ADC_Init+0x1f0>)
 8002ffe:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	685a      	ldr	r2, [r3, #4]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	431a      	orrs	r2, r3
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	685a      	ldr	r2, [r3, #4]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003028:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	6859      	ldr	r1, [r3, #4]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	691b      	ldr	r3, [r3, #16]
 8003034:	021a      	lsls	r2, r3, #8
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	430a      	orrs	r2, r1
 800303c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	685a      	ldr	r2, [r3, #4]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800304c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	6859      	ldr	r1, [r3, #4]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	689a      	ldr	r2, [r3, #8]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	430a      	orrs	r2, r1
 800305e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	689a      	ldr	r2, [r3, #8]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800306e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	6899      	ldr	r1, [r3, #8]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	68da      	ldr	r2, [r3, #12]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	430a      	orrs	r2, r1
 8003080:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003086:	4a58      	ldr	r2, [pc, #352]	@ (80031e8 <ADC_Init+0x1f4>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d022      	beq.n	80030d2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	689a      	ldr	r2, [r3, #8]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800309a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	6899      	ldr	r1, [r3, #8]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	430a      	orrs	r2, r1
 80030ac:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	689a      	ldr	r2, [r3, #8]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80030bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	6899      	ldr	r1, [r3, #8]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	430a      	orrs	r2, r1
 80030ce:	609a      	str	r2, [r3, #8]
 80030d0:	e00f      	b.n	80030f2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	689a      	ldr	r2, [r3, #8]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80030e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	689a      	ldr	r2, [r3, #8]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80030f0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	689a      	ldr	r2, [r3, #8]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f022 0202 	bic.w	r2, r2, #2
 8003100:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	6899      	ldr	r1, [r3, #8]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	7e1b      	ldrb	r3, [r3, #24]
 800310c:	005a      	lsls	r2, r3, #1
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	430a      	orrs	r2, r1
 8003114:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f893 3020 	ldrb.w	r3, [r3, #32]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d01b      	beq.n	8003158 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	685a      	ldr	r2, [r3, #4]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800312e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	685a      	ldr	r2, [r3, #4]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800313e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	6859      	ldr	r1, [r3, #4]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800314a:	3b01      	subs	r3, #1
 800314c:	035a      	lsls	r2, r3, #13
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	430a      	orrs	r2, r1
 8003154:	605a      	str	r2, [r3, #4]
 8003156:	e007      	b.n	8003168 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	685a      	ldr	r2, [r3, #4]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003166:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003176:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	69db      	ldr	r3, [r3, #28]
 8003182:	3b01      	subs	r3, #1
 8003184:	051a      	lsls	r2, r3, #20
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	430a      	orrs	r2, r1
 800318c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	689a      	ldr	r2, [r3, #8]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800319c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	6899      	ldr	r1, [r3, #8]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80031aa:	025a      	lsls	r2, r3, #9
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	430a      	orrs	r2, r1
 80031b2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	689a      	ldr	r2, [r3, #8]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	6899      	ldr	r1, [r3, #8]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	695b      	ldr	r3, [r3, #20]
 80031ce:	029a      	lsls	r2, r3, #10
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	430a      	orrs	r2, r1
 80031d6:	609a      	str	r2, [r3, #8]
}
 80031d8:	bf00      	nop
 80031da:	3714      	adds	r7, #20
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr
 80031e4:	40012300 	.word	0x40012300
 80031e8:	0f000001 	.word	0x0f000001

080031ec <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031f8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031fe:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003202:	2b00      	cmp	r3, #0
 8003204:	d13c      	bne.n	8003280 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800320a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d12b      	bne.n	8003278 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003224:	2b00      	cmp	r3, #0
 8003226:	d127      	bne.n	8003278 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800322e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003232:	2b00      	cmp	r3, #0
 8003234:	d006      	beq.n	8003244 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003240:	2b00      	cmp	r3, #0
 8003242:	d119      	bne.n	8003278 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	685a      	ldr	r2, [r3, #4]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f022 0220 	bic.w	r2, r2, #32
 8003252:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003258:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003264:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d105      	bne.n	8003278 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003270:	f043 0201 	orr.w	r2, r3, #1
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003278:	68f8      	ldr	r0, [r7, #12]
 800327a:	f7fe fb55 	bl	8001928 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800327e:	e00e      	b.n	800329e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003284:	f003 0310 	and.w	r3, r3, #16
 8003288:	2b00      	cmp	r3, #0
 800328a:	d003      	beq.n	8003294 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800328c:	68f8      	ldr	r0, [r7, #12]
 800328e:	f7ff fd85 	bl	8002d9c <HAL_ADC_ErrorCallback>
}
 8003292:	e004      	b.n	800329e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003298:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	4798      	blx	r3
}
 800329e:	bf00      	nop
 80032a0:	3710      	adds	r7, #16
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}

080032a6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80032a6:	b580      	push	{r7, lr}
 80032a8:	b084      	sub	sp, #16
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032b2:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80032b4:	68f8      	ldr	r0, [r7, #12]
 80032b6:	f7ff fd67 	bl	8002d88 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80032ba:	bf00      	nop
 80032bc:	3710      	adds	r7, #16
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80032c2:	b580      	push	{r7, lr}
 80032c4:	b084      	sub	sp, #16
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032ce:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2240      	movs	r2, #64	@ 0x40
 80032d4:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032da:	f043 0204 	orr.w	r2, r3, #4
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80032e2:	68f8      	ldr	r0, [r7, #12]
 80032e4:	f7ff fd5a 	bl	8002d9c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80032e8:	bf00      	nop
 80032ea:	3710      	adds	r7, #16
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b085      	sub	sp, #20
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f003 0307 	and.w	r3, r3, #7
 80032fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003300:	4b0c      	ldr	r3, [pc, #48]	@ (8003334 <__NVIC_SetPriorityGrouping+0x44>)
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003306:	68ba      	ldr	r2, [r7, #8]
 8003308:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800330c:	4013      	ands	r3, r2
 800330e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003318:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800331c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003320:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003322:	4a04      	ldr	r2, [pc, #16]	@ (8003334 <__NVIC_SetPriorityGrouping+0x44>)
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	60d3      	str	r3, [r2, #12]
}
 8003328:	bf00      	nop
 800332a:	3714      	adds	r7, #20
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr
 8003334:	e000ed00 	.word	0xe000ed00

08003338 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003338:	b480      	push	{r7}
 800333a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800333c:	4b04      	ldr	r3, [pc, #16]	@ (8003350 <__NVIC_GetPriorityGrouping+0x18>)
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	0a1b      	lsrs	r3, r3, #8
 8003342:	f003 0307 	and.w	r3, r3, #7
}
 8003346:	4618      	mov	r0, r3
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr
 8003350:	e000ed00 	.word	0xe000ed00

08003354 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	4603      	mov	r3, r0
 800335c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800335e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003362:	2b00      	cmp	r3, #0
 8003364:	db0b      	blt.n	800337e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003366:	79fb      	ldrb	r3, [r7, #7]
 8003368:	f003 021f 	and.w	r2, r3, #31
 800336c:	4907      	ldr	r1, [pc, #28]	@ (800338c <__NVIC_EnableIRQ+0x38>)
 800336e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003372:	095b      	lsrs	r3, r3, #5
 8003374:	2001      	movs	r0, #1
 8003376:	fa00 f202 	lsl.w	r2, r0, r2
 800337a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800337e:	bf00      	nop
 8003380:	370c      	adds	r7, #12
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr
 800338a:	bf00      	nop
 800338c:	e000e100 	.word	0xe000e100

08003390 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	4603      	mov	r3, r0
 8003398:	6039      	str	r1, [r7, #0]
 800339a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800339c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	db0a      	blt.n	80033ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	b2da      	uxtb	r2, r3
 80033a8:	490c      	ldr	r1, [pc, #48]	@ (80033dc <__NVIC_SetPriority+0x4c>)
 80033aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ae:	0112      	lsls	r2, r2, #4
 80033b0:	b2d2      	uxtb	r2, r2
 80033b2:	440b      	add	r3, r1
 80033b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033b8:	e00a      	b.n	80033d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	b2da      	uxtb	r2, r3
 80033be:	4908      	ldr	r1, [pc, #32]	@ (80033e0 <__NVIC_SetPriority+0x50>)
 80033c0:	79fb      	ldrb	r3, [r7, #7]
 80033c2:	f003 030f 	and.w	r3, r3, #15
 80033c6:	3b04      	subs	r3, #4
 80033c8:	0112      	lsls	r2, r2, #4
 80033ca:	b2d2      	uxtb	r2, r2
 80033cc:	440b      	add	r3, r1
 80033ce:	761a      	strb	r2, [r3, #24]
}
 80033d0:	bf00      	nop
 80033d2:	370c      	adds	r7, #12
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr
 80033dc:	e000e100 	.word	0xe000e100
 80033e0:	e000ed00 	.word	0xe000ed00

080033e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b089      	sub	sp, #36	@ 0x24
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	60f8      	str	r0, [r7, #12]
 80033ec:	60b9      	str	r1, [r7, #8]
 80033ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f003 0307 	and.w	r3, r3, #7
 80033f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	f1c3 0307 	rsb	r3, r3, #7
 80033fe:	2b04      	cmp	r3, #4
 8003400:	bf28      	it	cs
 8003402:	2304      	movcs	r3, #4
 8003404:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	3304      	adds	r3, #4
 800340a:	2b06      	cmp	r3, #6
 800340c:	d902      	bls.n	8003414 <NVIC_EncodePriority+0x30>
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	3b03      	subs	r3, #3
 8003412:	e000      	b.n	8003416 <NVIC_EncodePriority+0x32>
 8003414:	2300      	movs	r3, #0
 8003416:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003418:	f04f 32ff 	mov.w	r2, #4294967295
 800341c:	69bb      	ldr	r3, [r7, #24]
 800341e:	fa02 f303 	lsl.w	r3, r2, r3
 8003422:	43da      	mvns	r2, r3
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	401a      	ands	r2, r3
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800342c:	f04f 31ff 	mov.w	r1, #4294967295
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	fa01 f303 	lsl.w	r3, r1, r3
 8003436:	43d9      	mvns	r1, r3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800343c:	4313      	orrs	r3, r2
         );
}
 800343e:	4618      	mov	r0, r3
 8003440:	3724      	adds	r7, #36	@ 0x24
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr
	...

0800344c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	3b01      	subs	r3, #1
 8003458:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800345c:	d301      	bcc.n	8003462 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800345e:	2301      	movs	r3, #1
 8003460:	e00f      	b.n	8003482 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003462:	4a0a      	ldr	r2, [pc, #40]	@ (800348c <SysTick_Config+0x40>)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	3b01      	subs	r3, #1
 8003468:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800346a:	210f      	movs	r1, #15
 800346c:	f04f 30ff 	mov.w	r0, #4294967295
 8003470:	f7ff ff8e 	bl	8003390 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003474:	4b05      	ldr	r3, [pc, #20]	@ (800348c <SysTick_Config+0x40>)
 8003476:	2200      	movs	r2, #0
 8003478:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800347a:	4b04      	ldr	r3, [pc, #16]	@ (800348c <SysTick_Config+0x40>)
 800347c:	2207      	movs	r2, #7
 800347e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003480:	2300      	movs	r3, #0
}
 8003482:	4618      	mov	r0, r3
 8003484:	3708      	adds	r7, #8
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	e000e010 	.word	0xe000e010

08003490 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b082      	sub	sp, #8
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f7ff ff29 	bl	80032f0 <__NVIC_SetPriorityGrouping>
}
 800349e:	bf00      	nop
 80034a0:	3708      	adds	r7, #8
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b086      	sub	sp, #24
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	4603      	mov	r3, r0
 80034ae:	60b9      	str	r1, [r7, #8]
 80034b0:	607a      	str	r2, [r7, #4]
 80034b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80034b4:	2300      	movs	r3, #0
 80034b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034b8:	f7ff ff3e 	bl	8003338 <__NVIC_GetPriorityGrouping>
 80034bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	68b9      	ldr	r1, [r7, #8]
 80034c2:	6978      	ldr	r0, [r7, #20]
 80034c4:	f7ff ff8e 	bl	80033e4 <NVIC_EncodePriority>
 80034c8:	4602      	mov	r2, r0
 80034ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034ce:	4611      	mov	r1, r2
 80034d0:	4618      	mov	r0, r3
 80034d2:	f7ff ff5d 	bl	8003390 <__NVIC_SetPriority>
}
 80034d6:	bf00      	nop
 80034d8:	3718      	adds	r7, #24
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}

080034de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034de:	b580      	push	{r7, lr}
 80034e0:	b082      	sub	sp, #8
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	4603      	mov	r3, r0
 80034e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ec:	4618      	mov	r0, r3
 80034ee:	f7ff ff31 	bl	8003354 <__NVIC_EnableIRQ>
}
 80034f2:	bf00      	nop
 80034f4:	3708      	adds	r7, #8
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}

080034fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034fa:	b580      	push	{r7, lr}
 80034fc:	b082      	sub	sp, #8
 80034fe:	af00      	add	r7, sp, #0
 8003500:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f7ff ffa2 	bl	800344c <SysTick_Config>
 8003508:	4603      	mov	r3, r0
}
 800350a:	4618      	mov	r0, r3
 800350c:	3708      	adds	r7, #8
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
	...

08003514 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b086      	sub	sp, #24
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800351c:	2300      	movs	r3, #0
 800351e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003520:	f7ff faae 	bl	8002a80 <HAL_GetTick>
 8003524:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d101      	bne.n	8003530 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e099      	b.n	8003664 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2202      	movs	r2, #2
 8003534:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f022 0201 	bic.w	r2, r2, #1
 800354e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003550:	e00f      	b.n	8003572 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003552:	f7ff fa95 	bl	8002a80 <HAL_GetTick>
 8003556:	4602      	mov	r2, r0
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	2b05      	cmp	r3, #5
 800355e:	d908      	bls.n	8003572 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2220      	movs	r2, #32
 8003564:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2203      	movs	r2, #3
 800356a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e078      	b.n	8003664 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0301 	and.w	r3, r3, #1
 800357c:	2b00      	cmp	r3, #0
 800357e:	d1e8      	bne.n	8003552 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003588:	697a      	ldr	r2, [r7, #20]
 800358a:	4b38      	ldr	r3, [pc, #224]	@ (800366c <HAL_DMA_Init+0x158>)
 800358c:	4013      	ands	r3, r2
 800358e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	685a      	ldr	r2, [r3, #4]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800359e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	691b      	ldr	r3, [r3, #16]
 80035a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	699b      	ldr	r3, [r3, #24]
 80035b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6a1b      	ldr	r3, [r3, #32]
 80035bc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035be:	697a      	ldr	r2, [r7, #20]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035c8:	2b04      	cmp	r3, #4
 80035ca:	d107      	bne.n	80035dc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035d4:	4313      	orrs	r3, r2
 80035d6:	697a      	ldr	r2, [r7, #20]
 80035d8:	4313      	orrs	r3, r2
 80035da:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	697a      	ldr	r2, [r7, #20]
 80035e2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	695b      	ldr	r3, [r3, #20]
 80035ea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	f023 0307 	bic.w	r3, r3, #7
 80035f2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f8:	697a      	ldr	r2, [r7, #20]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003602:	2b04      	cmp	r3, #4
 8003604:	d117      	bne.n	8003636 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800360a:	697a      	ldr	r2, [r7, #20]
 800360c:	4313      	orrs	r3, r2
 800360e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003614:	2b00      	cmp	r3, #0
 8003616:	d00e      	beq.n	8003636 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f000 fa6f 	bl	8003afc <DMA_CheckFifoParam>
 800361e:	4603      	mov	r3, r0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d008      	beq.n	8003636 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2240      	movs	r2, #64	@ 0x40
 8003628:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2201      	movs	r2, #1
 800362e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003632:	2301      	movs	r3, #1
 8003634:	e016      	b.n	8003664 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	697a      	ldr	r2, [r7, #20]
 800363c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f000 fa26 	bl	8003a90 <DMA_CalcBaseAndBitshift>
 8003644:	4603      	mov	r3, r0
 8003646:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800364c:	223f      	movs	r2, #63	@ 0x3f
 800364e:	409a      	lsls	r2, r3
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2201      	movs	r2, #1
 800365e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003662:	2300      	movs	r3, #0
}
 8003664:	4618      	mov	r0, r3
 8003666:	3718      	adds	r7, #24
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}
 800366c:	f010803f 	.word	0xf010803f

08003670 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b086      	sub	sp, #24
 8003674:	af00      	add	r7, sp, #0
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	60b9      	str	r1, [r7, #8]
 800367a:	607a      	str	r2, [r7, #4]
 800367c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800367e:	2300      	movs	r3, #0
 8003680:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003686:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800368e:	2b01      	cmp	r3, #1
 8003690:	d101      	bne.n	8003696 <HAL_DMA_Start_IT+0x26>
 8003692:	2302      	movs	r3, #2
 8003694:	e040      	b.n	8003718 <HAL_DMA_Start_IT+0xa8>
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2201      	movs	r2, #1
 800369a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d12f      	bne.n	800370a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2202      	movs	r2, #2
 80036ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2200      	movs	r2, #0
 80036b6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	68b9      	ldr	r1, [r7, #8]
 80036be:	68f8      	ldr	r0, [r7, #12]
 80036c0:	f000 f9b8 	bl	8003a34 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036c8:	223f      	movs	r2, #63	@ 0x3f
 80036ca:	409a      	lsls	r2, r3
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f042 0216 	orr.w	r2, r2, #22
 80036de:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d007      	beq.n	80036f8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f042 0208 	orr.w	r2, r2, #8
 80036f6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f042 0201 	orr.w	r2, r2, #1
 8003706:	601a      	str	r2, [r3, #0]
 8003708:	e005      	b.n	8003716 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003712:	2302      	movs	r3, #2
 8003714:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003716:	7dfb      	ldrb	r3, [r7, #23]
}
 8003718:	4618      	mov	r0, r3
 800371a:	3718      	adds	r7, #24
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}

08003720 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b086      	sub	sp, #24
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003728:	2300      	movs	r3, #0
 800372a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800372c:	4b8e      	ldr	r3, [pc, #568]	@ (8003968 <HAL_DMA_IRQHandler+0x248>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a8e      	ldr	r2, [pc, #568]	@ (800396c <HAL_DMA_IRQHandler+0x24c>)
 8003732:	fba2 2303 	umull	r2, r3, r2, r3
 8003736:	0a9b      	lsrs	r3, r3, #10
 8003738:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800373e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800374a:	2208      	movs	r2, #8
 800374c:	409a      	lsls	r2, r3
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	4013      	ands	r3, r2
 8003752:	2b00      	cmp	r3, #0
 8003754:	d01a      	beq.n	800378c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0304 	and.w	r3, r3, #4
 8003760:	2b00      	cmp	r3, #0
 8003762:	d013      	beq.n	800378c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f022 0204 	bic.w	r2, r2, #4
 8003772:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003778:	2208      	movs	r2, #8
 800377a:	409a      	lsls	r2, r3
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003784:	f043 0201 	orr.w	r2, r3, #1
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003790:	2201      	movs	r2, #1
 8003792:	409a      	lsls	r2, r3
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	4013      	ands	r3, r2
 8003798:	2b00      	cmp	r3, #0
 800379a:	d012      	beq.n	80037c2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	695b      	ldr	r3, [r3, #20]
 80037a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d00b      	beq.n	80037c2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037ae:	2201      	movs	r2, #1
 80037b0:	409a      	lsls	r2, r3
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037ba:	f043 0202 	orr.w	r2, r3, #2
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037c6:	2204      	movs	r2, #4
 80037c8:	409a      	lsls	r2, r3
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	4013      	ands	r3, r2
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d012      	beq.n	80037f8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0302 	and.w	r3, r3, #2
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d00b      	beq.n	80037f8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037e4:	2204      	movs	r2, #4
 80037e6:	409a      	lsls	r2, r3
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037f0:	f043 0204 	orr.w	r2, r3, #4
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037fc:	2210      	movs	r2, #16
 80037fe:	409a      	lsls	r2, r3
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	4013      	ands	r3, r2
 8003804:	2b00      	cmp	r3, #0
 8003806:	d043      	beq.n	8003890 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0308 	and.w	r3, r3, #8
 8003812:	2b00      	cmp	r3, #0
 8003814:	d03c      	beq.n	8003890 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800381a:	2210      	movs	r2, #16
 800381c:	409a      	lsls	r2, r3
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800382c:	2b00      	cmp	r3, #0
 800382e:	d018      	beq.n	8003862 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d108      	bne.n	8003850 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003842:	2b00      	cmp	r3, #0
 8003844:	d024      	beq.n	8003890 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	4798      	blx	r3
 800384e:	e01f      	b.n	8003890 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003854:	2b00      	cmp	r3, #0
 8003856:	d01b      	beq.n	8003890 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	4798      	blx	r3
 8003860:	e016      	b.n	8003890 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800386c:	2b00      	cmp	r3, #0
 800386e:	d107      	bne.n	8003880 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f022 0208 	bic.w	r2, r2, #8
 800387e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003884:	2b00      	cmp	r3, #0
 8003886:	d003      	beq.n	8003890 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003894:	2220      	movs	r2, #32
 8003896:	409a      	lsls	r2, r3
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	4013      	ands	r3, r2
 800389c:	2b00      	cmp	r3, #0
 800389e:	f000 808f 	beq.w	80039c0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0310 	and.w	r3, r3, #16
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	f000 8087 	beq.w	80039c0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038b6:	2220      	movs	r2, #32
 80038b8:	409a      	lsls	r2, r3
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	2b05      	cmp	r3, #5
 80038c8:	d136      	bne.n	8003938 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f022 0216 	bic.w	r2, r2, #22
 80038d8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	695a      	ldr	r2, [r3, #20]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80038e8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d103      	bne.n	80038fa <HAL_DMA_IRQHandler+0x1da>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d007      	beq.n	800390a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f022 0208 	bic.w	r2, r2, #8
 8003908:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800390e:	223f      	movs	r2, #63	@ 0x3f
 8003910:	409a      	lsls	r2, r3
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2201      	movs	r2, #1
 800391a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800392a:	2b00      	cmp	r3, #0
 800392c:	d07e      	beq.n	8003a2c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	4798      	blx	r3
        }
        return;
 8003936:	e079      	b.n	8003a2c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d01d      	beq.n	8003982 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003950:	2b00      	cmp	r3, #0
 8003952:	d10d      	bne.n	8003970 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003958:	2b00      	cmp	r3, #0
 800395a:	d031      	beq.n	80039c0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	4798      	blx	r3
 8003964:	e02c      	b.n	80039c0 <HAL_DMA_IRQHandler+0x2a0>
 8003966:	bf00      	nop
 8003968:	20000004 	.word	0x20000004
 800396c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003974:	2b00      	cmp	r3, #0
 8003976:	d023      	beq.n	80039c0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	4798      	blx	r3
 8003980:	e01e      	b.n	80039c0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800398c:	2b00      	cmp	r3, #0
 800398e:	d10f      	bne.n	80039b0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f022 0210 	bic.w	r2, r2, #16
 800399e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2200      	movs	r2, #0
 80039ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d003      	beq.n	80039c0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d032      	beq.n	8003a2e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039cc:	f003 0301 	and.w	r3, r3, #1
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d022      	beq.n	8003a1a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2205      	movs	r2, #5
 80039d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f022 0201 	bic.w	r2, r2, #1
 80039ea:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	3301      	adds	r3, #1
 80039f0:	60bb      	str	r3, [r7, #8]
 80039f2:	697a      	ldr	r2, [r7, #20]
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d307      	bcc.n	8003a08 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0301 	and.w	r3, r3, #1
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d1f2      	bne.n	80039ec <HAL_DMA_IRQHandler+0x2cc>
 8003a06:	e000      	b.n	8003a0a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003a08:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2200      	movs	r2, #0
 8003a16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d005      	beq.n	8003a2e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	4798      	blx	r3
 8003a2a:	e000      	b.n	8003a2e <HAL_DMA_IRQHandler+0x30e>
        return;
 8003a2c:	bf00      	nop
    }
  }
}
 8003a2e:	3718      	adds	r7, #24
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b085      	sub	sp, #20
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	60b9      	str	r1, [r7, #8]
 8003a3e:	607a      	str	r2, [r7, #4]
 8003a40:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003a50:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	683a      	ldr	r2, [r7, #0]
 8003a58:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	2b40      	cmp	r3, #64	@ 0x40
 8003a60:	d108      	bne.n	8003a74 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	68ba      	ldr	r2, [r7, #8]
 8003a70:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003a72:	e007      	b.n	8003a84 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	68ba      	ldr	r2, [r7, #8]
 8003a7a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	60da      	str	r2, [r3, #12]
}
 8003a84:	bf00      	nop
 8003a86:	3714      	adds	r7, #20
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr

08003a90 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b085      	sub	sp, #20
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	3b10      	subs	r3, #16
 8003aa0:	4a14      	ldr	r2, [pc, #80]	@ (8003af4 <DMA_CalcBaseAndBitshift+0x64>)
 8003aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa6:	091b      	lsrs	r3, r3, #4
 8003aa8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003aaa:	4a13      	ldr	r2, [pc, #76]	@ (8003af8 <DMA_CalcBaseAndBitshift+0x68>)
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	4413      	add	r3, r2
 8003ab0:	781b      	ldrb	r3, [r3, #0]
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2b03      	cmp	r3, #3
 8003abc:	d909      	bls.n	8003ad2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003ac6:	f023 0303 	bic.w	r3, r3, #3
 8003aca:	1d1a      	adds	r2, r3, #4
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	659a      	str	r2, [r3, #88]	@ 0x58
 8003ad0:	e007      	b.n	8003ae2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003ada:	f023 0303 	bic.w	r3, r3, #3
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3714      	adds	r7, #20
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr
 8003af2:	bf00      	nop
 8003af4:	aaaaaaab 	.word	0xaaaaaaab
 8003af8:	08010218 	.word	0x08010218

08003afc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b085      	sub	sp, #20
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b04:	2300      	movs	r3, #0
 8003b06:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b0c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	699b      	ldr	r3, [r3, #24]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d11f      	bne.n	8003b56 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	2b03      	cmp	r3, #3
 8003b1a:	d856      	bhi.n	8003bca <DMA_CheckFifoParam+0xce>
 8003b1c:	a201      	add	r2, pc, #4	@ (adr r2, 8003b24 <DMA_CheckFifoParam+0x28>)
 8003b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b22:	bf00      	nop
 8003b24:	08003b35 	.word	0x08003b35
 8003b28:	08003b47 	.word	0x08003b47
 8003b2c:	08003b35 	.word	0x08003b35
 8003b30:	08003bcb 	.word	0x08003bcb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b38:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d046      	beq.n	8003bce <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b44:	e043      	b.n	8003bce <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b4a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003b4e:	d140      	bne.n	8003bd2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b54:	e03d      	b.n	8003bd2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	699b      	ldr	r3, [r3, #24]
 8003b5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b5e:	d121      	bne.n	8003ba4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	2b03      	cmp	r3, #3
 8003b64:	d837      	bhi.n	8003bd6 <DMA_CheckFifoParam+0xda>
 8003b66:	a201      	add	r2, pc, #4	@ (adr r2, 8003b6c <DMA_CheckFifoParam+0x70>)
 8003b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b6c:	08003b7d 	.word	0x08003b7d
 8003b70:	08003b83 	.word	0x08003b83
 8003b74:	08003b7d 	.word	0x08003b7d
 8003b78:	08003b95 	.word	0x08003b95
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	73fb      	strb	r3, [r7, #15]
      break;
 8003b80:	e030      	b.n	8003be4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b86:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d025      	beq.n	8003bda <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b92:	e022      	b.n	8003bda <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b98:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003b9c:	d11f      	bne.n	8003bde <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003ba2:	e01c      	b.n	8003bde <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d903      	bls.n	8003bb2 <DMA_CheckFifoParam+0xb6>
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	2b03      	cmp	r3, #3
 8003bae:	d003      	beq.n	8003bb8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003bb0:	e018      	b.n	8003be4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	73fb      	strb	r3, [r7, #15]
      break;
 8003bb6:	e015      	b.n	8003be4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bbc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d00e      	beq.n	8003be2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	73fb      	strb	r3, [r7, #15]
      break;
 8003bc8:	e00b      	b.n	8003be2 <DMA_CheckFifoParam+0xe6>
      break;
 8003bca:	bf00      	nop
 8003bcc:	e00a      	b.n	8003be4 <DMA_CheckFifoParam+0xe8>
      break;
 8003bce:	bf00      	nop
 8003bd0:	e008      	b.n	8003be4 <DMA_CheckFifoParam+0xe8>
      break;
 8003bd2:	bf00      	nop
 8003bd4:	e006      	b.n	8003be4 <DMA_CheckFifoParam+0xe8>
      break;
 8003bd6:	bf00      	nop
 8003bd8:	e004      	b.n	8003be4 <DMA_CheckFifoParam+0xe8>
      break;
 8003bda:	bf00      	nop
 8003bdc:	e002      	b.n	8003be4 <DMA_CheckFifoParam+0xe8>
      break;   
 8003bde:	bf00      	nop
 8003be0:	e000      	b.n	8003be4 <DMA_CheckFifoParam+0xe8>
      break;
 8003be2:	bf00      	nop
    }
  } 
  
  return status; 
 8003be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3714      	adds	r7, #20
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr
 8003bf2:	bf00      	nop

08003bf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b089      	sub	sp, #36	@ 0x24
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003c02:	2300      	movs	r3, #0
 8003c04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003c06:	2300      	movs	r3, #0
 8003c08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	61fb      	str	r3, [r7, #28]
 8003c0e:	e16b      	b.n	8003ee8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003c10:	2201      	movs	r2, #1
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	fa02 f303 	lsl.w	r3, r2, r3
 8003c18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	697a      	ldr	r2, [r7, #20]
 8003c20:	4013      	ands	r3, r2
 8003c22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003c24:	693a      	ldr	r2, [r7, #16]
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	f040 815a 	bne.w	8003ee2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	f003 0303 	and.w	r3, r3, #3
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d005      	beq.n	8003c46 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c42:	2b02      	cmp	r3, #2
 8003c44:	d130      	bne.n	8003ca8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003c4c:	69fb      	ldr	r3, [r7, #28]
 8003c4e:	005b      	lsls	r3, r3, #1
 8003c50:	2203      	movs	r2, #3
 8003c52:	fa02 f303 	lsl.w	r3, r2, r3
 8003c56:	43db      	mvns	r3, r3
 8003c58:	69ba      	ldr	r2, [r7, #24]
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	68da      	ldr	r2, [r3, #12]
 8003c62:	69fb      	ldr	r3, [r7, #28]
 8003c64:	005b      	lsls	r3, r3, #1
 8003c66:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6a:	69ba      	ldr	r2, [r7, #24]
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	69ba      	ldr	r2, [r7, #24]
 8003c74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	fa02 f303 	lsl.w	r3, r2, r3
 8003c84:	43db      	mvns	r3, r3
 8003c86:	69ba      	ldr	r2, [r7, #24]
 8003c88:	4013      	ands	r3, r2
 8003c8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	091b      	lsrs	r3, r3, #4
 8003c92:	f003 0201 	and.w	r2, r3, #1
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9c:	69ba      	ldr	r2, [r7, #24]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	69ba      	ldr	r2, [r7, #24]
 8003ca6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	f003 0303 	and.w	r3, r3, #3
 8003cb0:	2b03      	cmp	r3, #3
 8003cb2:	d017      	beq.n	8003ce4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	005b      	lsls	r3, r3, #1
 8003cbe:	2203      	movs	r2, #3
 8003cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc4:	43db      	mvns	r3, r3
 8003cc6:	69ba      	ldr	r2, [r7, #24]
 8003cc8:	4013      	ands	r3, r2
 8003cca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	689a      	ldr	r2, [r3, #8]
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	005b      	lsls	r3, r3, #1
 8003cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd8:	69ba      	ldr	r2, [r7, #24]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	69ba      	ldr	r2, [r7, #24]
 8003ce2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	f003 0303 	and.w	r3, r3, #3
 8003cec:	2b02      	cmp	r3, #2
 8003cee:	d123      	bne.n	8003d38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	08da      	lsrs	r2, r3, #3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	3208      	adds	r2, #8
 8003cf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	f003 0307 	and.w	r3, r3, #7
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	220f      	movs	r2, #15
 8003d08:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0c:	43db      	mvns	r3, r3
 8003d0e:	69ba      	ldr	r2, [r7, #24]
 8003d10:	4013      	ands	r3, r2
 8003d12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	691a      	ldr	r2, [r3, #16]
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	f003 0307 	and.w	r3, r3, #7
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	fa02 f303 	lsl.w	r3, r2, r3
 8003d24:	69ba      	ldr	r2, [r7, #24]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	08da      	lsrs	r2, r3, #3
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	3208      	adds	r2, #8
 8003d32:	69b9      	ldr	r1, [r7, #24]
 8003d34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	005b      	lsls	r3, r3, #1
 8003d42:	2203      	movs	r2, #3
 8003d44:	fa02 f303 	lsl.w	r3, r2, r3
 8003d48:	43db      	mvns	r3, r3
 8003d4a:	69ba      	ldr	r2, [r7, #24]
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f003 0203 	and.w	r2, r3, #3
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	005b      	lsls	r3, r3, #1
 8003d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d60:	69ba      	ldr	r2, [r7, #24]
 8003d62:	4313      	orrs	r3, r2
 8003d64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	69ba      	ldr	r2, [r7, #24]
 8003d6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	f000 80b4 	beq.w	8003ee2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	60fb      	str	r3, [r7, #12]
 8003d7e:	4b60      	ldr	r3, [pc, #384]	@ (8003f00 <HAL_GPIO_Init+0x30c>)
 8003d80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d82:	4a5f      	ldr	r2, [pc, #380]	@ (8003f00 <HAL_GPIO_Init+0x30c>)
 8003d84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003d88:	6453      	str	r3, [r2, #68]	@ 0x44
 8003d8a:	4b5d      	ldr	r3, [pc, #372]	@ (8003f00 <HAL_GPIO_Init+0x30c>)
 8003d8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d92:	60fb      	str	r3, [r7, #12]
 8003d94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d96:	4a5b      	ldr	r2, [pc, #364]	@ (8003f04 <HAL_GPIO_Init+0x310>)
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	089b      	lsrs	r3, r3, #2
 8003d9c:	3302      	adds	r3, #2
 8003d9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003da2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003da4:	69fb      	ldr	r3, [r7, #28]
 8003da6:	f003 0303 	and.w	r3, r3, #3
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	220f      	movs	r2, #15
 8003dae:	fa02 f303 	lsl.w	r3, r2, r3
 8003db2:	43db      	mvns	r3, r3
 8003db4:	69ba      	ldr	r2, [r7, #24]
 8003db6:	4013      	ands	r3, r2
 8003db8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a52      	ldr	r2, [pc, #328]	@ (8003f08 <HAL_GPIO_Init+0x314>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d02b      	beq.n	8003e1a <HAL_GPIO_Init+0x226>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a51      	ldr	r2, [pc, #324]	@ (8003f0c <HAL_GPIO_Init+0x318>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d025      	beq.n	8003e16 <HAL_GPIO_Init+0x222>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a50      	ldr	r2, [pc, #320]	@ (8003f10 <HAL_GPIO_Init+0x31c>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d01f      	beq.n	8003e12 <HAL_GPIO_Init+0x21e>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4a4f      	ldr	r2, [pc, #316]	@ (8003f14 <HAL_GPIO_Init+0x320>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d019      	beq.n	8003e0e <HAL_GPIO_Init+0x21a>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a4e      	ldr	r2, [pc, #312]	@ (8003f18 <HAL_GPIO_Init+0x324>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d013      	beq.n	8003e0a <HAL_GPIO_Init+0x216>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4a4d      	ldr	r2, [pc, #308]	@ (8003f1c <HAL_GPIO_Init+0x328>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d00d      	beq.n	8003e06 <HAL_GPIO_Init+0x212>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a4c      	ldr	r2, [pc, #304]	@ (8003f20 <HAL_GPIO_Init+0x32c>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d007      	beq.n	8003e02 <HAL_GPIO_Init+0x20e>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4a4b      	ldr	r2, [pc, #300]	@ (8003f24 <HAL_GPIO_Init+0x330>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d101      	bne.n	8003dfe <HAL_GPIO_Init+0x20a>
 8003dfa:	2307      	movs	r3, #7
 8003dfc:	e00e      	b.n	8003e1c <HAL_GPIO_Init+0x228>
 8003dfe:	2308      	movs	r3, #8
 8003e00:	e00c      	b.n	8003e1c <HAL_GPIO_Init+0x228>
 8003e02:	2306      	movs	r3, #6
 8003e04:	e00a      	b.n	8003e1c <HAL_GPIO_Init+0x228>
 8003e06:	2305      	movs	r3, #5
 8003e08:	e008      	b.n	8003e1c <HAL_GPIO_Init+0x228>
 8003e0a:	2304      	movs	r3, #4
 8003e0c:	e006      	b.n	8003e1c <HAL_GPIO_Init+0x228>
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e004      	b.n	8003e1c <HAL_GPIO_Init+0x228>
 8003e12:	2302      	movs	r3, #2
 8003e14:	e002      	b.n	8003e1c <HAL_GPIO_Init+0x228>
 8003e16:	2301      	movs	r3, #1
 8003e18:	e000      	b.n	8003e1c <HAL_GPIO_Init+0x228>
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	69fa      	ldr	r2, [r7, #28]
 8003e1e:	f002 0203 	and.w	r2, r2, #3
 8003e22:	0092      	lsls	r2, r2, #2
 8003e24:	4093      	lsls	r3, r2
 8003e26:	69ba      	ldr	r2, [r7, #24]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e2c:	4935      	ldr	r1, [pc, #212]	@ (8003f04 <HAL_GPIO_Init+0x310>)
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	089b      	lsrs	r3, r3, #2
 8003e32:	3302      	adds	r3, #2
 8003e34:	69ba      	ldr	r2, [r7, #24]
 8003e36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e3a:	4b3b      	ldr	r3, [pc, #236]	@ (8003f28 <HAL_GPIO_Init+0x334>)
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	43db      	mvns	r3, r3
 8003e44:	69ba      	ldr	r2, [r7, #24]
 8003e46:	4013      	ands	r3, r2
 8003e48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d003      	beq.n	8003e5e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003e56:	69ba      	ldr	r2, [r7, #24]
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003e5e:	4a32      	ldr	r2, [pc, #200]	@ (8003f28 <HAL_GPIO_Init+0x334>)
 8003e60:	69bb      	ldr	r3, [r7, #24]
 8003e62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e64:	4b30      	ldr	r3, [pc, #192]	@ (8003f28 <HAL_GPIO_Init+0x334>)
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	43db      	mvns	r3, r3
 8003e6e:	69ba      	ldr	r2, [r7, #24]
 8003e70:	4013      	ands	r3, r2
 8003e72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d003      	beq.n	8003e88 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003e80:	69ba      	ldr	r2, [r7, #24]
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003e88:	4a27      	ldr	r2, [pc, #156]	@ (8003f28 <HAL_GPIO_Init+0x334>)
 8003e8a:	69bb      	ldr	r3, [r7, #24]
 8003e8c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003e8e:	4b26      	ldr	r3, [pc, #152]	@ (8003f28 <HAL_GPIO_Init+0x334>)
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	43db      	mvns	r3, r3
 8003e98:	69ba      	ldr	r2, [r7, #24]
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d003      	beq.n	8003eb2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003eaa:	69ba      	ldr	r2, [r7, #24]
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003eb2:	4a1d      	ldr	r2, [pc, #116]	@ (8003f28 <HAL_GPIO_Init+0x334>)
 8003eb4:	69bb      	ldr	r3, [r7, #24]
 8003eb6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003eb8:	4b1b      	ldr	r3, [pc, #108]	@ (8003f28 <HAL_GPIO_Init+0x334>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	43db      	mvns	r3, r3
 8003ec2:	69ba      	ldr	r2, [r7, #24]
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d003      	beq.n	8003edc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003ed4:	69ba      	ldr	r2, [r7, #24]
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003edc:	4a12      	ldr	r2, [pc, #72]	@ (8003f28 <HAL_GPIO_Init+0x334>)
 8003ede:	69bb      	ldr	r3, [r7, #24]
 8003ee0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	3301      	adds	r3, #1
 8003ee6:	61fb      	str	r3, [r7, #28]
 8003ee8:	69fb      	ldr	r3, [r7, #28]
 8003eea:	2b0f      	cmp	r3, #15
 8003eec:	f67f ae90 	bls.w	8003c10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ef0:	bf00      	nop
 8003ef2:	bf00      	nop
 8003ef4:	3724      	adds	r7, #36	@ 0x24
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr
 8003efe:	bf00      	nop
 8003f00:	40023800 	.word	0x40023800
 8003f04:	40013800 	.word	0x40013800
 8003f08:	40020000 	.word	0x40020000
 8003f0c:	40020400 	.word	0x40020400
 8003f10:	40020800 	.word	0x40020800
 8003f14:	40020c00 	.word	0x40020c00
 8003f18:	40021000 	.word	0x40021000
 8003f1c:	40021400 	.word	0x40021400
 8003f20:	40021800 	.word	0x40021800
 8003f24:	40021c00 	.word	0x40021c00
 8003f28:	40013c00 	.word	0x40013c00

08003f2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	460b      	mov	r3, r1
 8003f36:	807b      	strh	r3, [r7, #2]
 8003f38:	4613      	mov	r3, r2
 8003f3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f3c:	787b      	ldrb	r3, [r7, #1]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d003      	beq.n	8003f4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f42:	887a      	ldrh	r2, [r7, #2]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003f48:	e003      	b.n	8003f52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003f4a:	887b      	ldrh	r3, [r7, #2]
 8003f4c:	041a      	lsls	r2, r3, #16
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	619a      	str	r2, [r3, #24]
}
 8003f52:	bf00      	nop
 8003f54:	370c      	adds	r7, #12
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr

08003f5e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003f5e:	b480      	push	{r7}
 8003f60:	b085      	sub	sp, #20
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	6078      	str	r0, [r7, #4]
 8003f66:	460b      	mov	r3, r1
 8003f68:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	695b      	ldr	r3, [r3, #20]
 8003f6e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003f70:	887a      	ldrh	r2, [r7, #2]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	4013      	ands	r3, r2
 8003f76:	041a      	lsls	r2, r3, #16
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	43d9      	mvns	r1, r3
 8003f7c:	887b      	ldrh	r3, [r7, #2]
 8003f7e:	400b      	ands	r3, r1
 8003f80:	431a      	orrs	r2, r3
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	619a      	str	r2, [r3, #24]
}
 8003f86:	bf00      	nop
 8003f88:	3714      	adds	r7, #20
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr
	...

08003f94 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b082      	sub	sp, #8
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003f9e:	4b08      	ldr	r3, [pc, #32]	@ (8003fc0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003fa0:	695a      	ldr	r2, [r3, #20]
 8003fa2:	88fb      	ldrh	r3, [r7, #6]
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d006      	beq.n	8003fb8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003faa:	4a05      	ldr	r2, [pc, #20]	@ (8003fc0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003fac:	88fb      	ldrh	r3, [r7, #6]
 8003fae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003fb0:	88fb      	ldrh	r3, [r7, #6]
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f7fd fca4 	bl	8001900 <HAL_GPIO_EXTI_Callback>
  }
}
 8003fb8:	bf00      	nop
 8003fba:	3708      	adds	r7, #8
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	40013c00 	.word	0x40013c00

08003fc4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b084      	sub	sp, #16
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d101      	bne.n	8003fd6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e12b      	b.n	800422e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d106      	bne.n	8003ff0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f7fe fa1e 	bl	800242c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2224      	movs	r2, #36	@ 0x24
 8003ff4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f022 0201 	bic.w	r2, r2, #1
 8004006:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004016:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004026:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004028:	f003 fc54 	bl	80078d4 <HAL_RCC_GetPCLK1Freq>
 800402c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	4a81      	ldr	r2, [pc, #516]	@ (8004238 <HAL_I2C_Init+0x274>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d807      	bhi.n	8004048 <HAL_I2C_Init+0x84>
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	4a80      	ldr	r2, [pc, #512]	@ (800423c <HAL_I2C_Init+0x278>)
 800403c:	4293      	cmp	r3, r2
 800403e:	bf94      	ite	ls
 8004040:	2301      	movls	r3, #1
 8004042:	2300      	movhi	r3, #0
 8004044:	b2db      	uxtb	r3, r3
 8004046:	e006      	b.n	8004056 <HAL_I2C_Init+0x92>
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	4a7d      	ldr	r2, [pc, #500]	@ (8004240 <HAL_I2C_Init+0x27c>)
 800404c:	4293      	cmp	r3, r2
 800404e:	bf94      	ite	ls
 8004050:	2301      	movls	r3, #1
 8004052:	2300      	movhi	r3, #0
 8004054:	b2db      	uxtb	r3, r3
 8004056:	2b00      	cmp	r3, #0
 8004058:	d001      	beq.n	800405e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e0e7      	b.n	800422e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	4a78      	ldr	r2, [pc, #480]	@ (8004244 <HAL_I2C_Init+0x280>)
 8004062:	fba2 2303 	umull	r2, r3, r2, r3
 8004066:	0c9b      	lsrs	r3, r3, #18
 8004068:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	68ba      	ldr	r2, [r7, #8]
 800407a:	430a      	orrs	r2, r1
 800407c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	6a1b      	ldr	r3, [r3, #32]
 8004084:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	4a6a      	ldr	r2, [pc, #424]	@ (8004238 <HAL_I2C_Init+0x274>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d802      	bhi.n	8004098 <HAL_I2C_Init+0xd4>
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	3301      	adds	r3, #1
 8004096:	e009      	b.n	80040ac <HAL_I2C_Init+0xe8>
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800409e:	fb02 f303 	mul.w	r3, r2, r3
 80040a2:	4a69      	ldr	r2, [pc, #420]	@ (8004248 <HAL_I2C_Init+0x284>)
 80040a4:	fba2 2303 	umull	r2, r3, r2, r3
 80040a8:	099b      	lsrs	r3, r3, #6
 80040aa:	3301      	adds	r3, #1
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	6812      	ldr	r2, [r2, #0]
 80040b0:	430b      	orrs	r3, r1
 80040b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	69db      	ldr	r3, [r3, #28]
 80040ba:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80040be:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	495c      	ldr	r1, [pc, #368]	@ (8004238 <HAL_I2C_Init+0x274>)
 80040c8:	428b      	cmp	r3, r1
 80040ca:	d819      	bhi.n	8004100 <HAL_I2C_Init+0x13c>
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	1e59      	subs	r1, r3, #1
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	005b      	lsls	r3, r3, #1
 80040d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80040da:	1c59      	adds	r1, r3, #1
 80040dc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80040e0:	400b      	ands	r3, r1
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d00a      	beq.n	80040fc <HAL_I2C_Init+0x138>
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	1e59      	subs	r1, r3, #1
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	005b      	lsls	r3, r3, #1
 80040f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80040f4:	3301      	adds	r3, #1
 80040f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040fa:	e051      	b.n	80041a0 <HAL_I2C_Init+0x1dc>
 80040fc:	2304      	movs	r3, #4
 80040fe:	e04f      	b.n	80041a0 <HAL_I2C_Init+0x1dc>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d111      	bne.n	800412c <HAL_I2C_Init+0x168>
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	1e58      	subs	r0, r3, #1
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6859      	ldr	r1, [r3, #4]
 8004110:	460b      	mov	r3, r1
 8004112:	005b      	lsls	r3, r3, #1
 8004114:	440b      	add	r3, r1
 8004116:	fbb0 f3f3 	udiv	r3, r0, r3
 800411a:	3301      	adds	r3, #1
 800411c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004120:	2b00      	cmp	r3, #0
 8004122:	bf0c      	ite	eq
 8004124:	2301      	moveq	r3, #1
 8004126:	2300      	movne	r3, #0
 8004128:	b2db      	uxtb	r3, r3
 800412a:	e012      	b.n	8004152 <HAL_I2C_Init+0x18e>
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	1e58      	subs	r0, r3, #1
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6859      	ldr	r1, [r3, #4]
 8004134:	460b      	mov	r3, r1
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	440b      	add	r3, r1
 800413a:	0099      	lsls	r1, r3, #2
 800413c:	440b      	add	r3, r1
 800413e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004142:	3301      	adds	r3, #1
 8004144:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004148:	2b00      	cmp	r3, #0
 800414a:	bf0c      	ite	eq
 800414c:	2301      	moveq	r3, #1
 800414e:	2300      	movne	r3, #0
 8004150:	b2db      	uxtb	r3, r3
 8004152:	2b00      	cmp	r3, #0
 8004154:	d001      	beq.n	800415a <HAL_I2C_Init+0x196>
 8004156:	2301      	movs	r3, #1
 8004158:	e022      	b.n	80041a0 <HAL_I2C_Init+0x1dc>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d10e      	bne.n	8004180 <HAL_I2C_Init+0x1bc>
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	1e58      	subs	r0, r3, #1
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6859      	ldr	r1, [r3, #4]
 800416a:	460b      	mov	r3, r1
 800416c:	005b      	lsls	r3, r3, #1
 800416e:	440b      	add	r3, r1
 8004170:	fbb0 f3f3 	udiv	r3, r0, r3
 8004174:	3301      	adds	r3, #1
 8004176:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800417a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800417e:	e00f      	b.n	80041a0 <HAL_I2C_Init+0x1dc>
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	1e58      	subs	r0, r3, #1
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6859      	ldr	r1, [r3, #4]
 8004188:	460b      	mov	r3, r1
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	440b      	add	r3, r1
 800418e:	0099      	lsls	r1, r3, #2
 8004190:	440b      	add	r3, r1
 8004192:	fbb0 f3f3 	udiv	r3, r0, r3
 8004196:	3301      	adds	r3, #1
 8004198:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800419c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80041a0:	6879      	ldr	r1, [r7, #4]
 80041a2:	6809      	ldr	r1, [r1, #0]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	69da      	ldr	r2, [r3, #28]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a1b      	ldr	r3, [r3, #32]
 80041ba:	431a      	orrs	r2, r3
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	430a      	orrs	r2, r1
 80041c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80041ce:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	6911      	ldr	r1, [r2, #16]
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	68d2      	ldr	r2, [r2, #12]
 80041da:	4311      	orrs	r1, r2
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	6812      	ldr	r2, [r2, #0]
 80041e0:	430b      	orrs	r3, r1
 80041e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	68db      	ldr	r3, [r3, #12]
 80041ea:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	695a      	ldr	r2, [r3, #20]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	699b      	ldr	r3, [r3, #24]
 80041f6:	431a      	orrs	r2, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	430a      	orrs	r2, r1
 80041fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f042 0201 	orr.w	r2, r2, #1
 800420e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2220      	movs	r2, #32
 800421a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800422c:	2300      	movs	r3, #0
}
 800422e:	4618      	mov	r0, r3
 8004230:	3710      	adds	r7, #16
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
 8004236:	bf00      	nop
 8004238:	000186a0 	.word	0x000186a0
 800423c:	001e847f 	.word	0x001e847f
 8004240:	003d08ff 	.word	0x003d08ff
 8004244:	431bde83 	.word	0x431bde83
 8004248:	10624dd3 	.word	0x10624dd3

0800424c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b088      	sub	sp, #32
 8004250:	af02      	add	r7, sp, #8
 8004252:	60f8      	str	r0, [r7, #12]
 8004254:	4608      	mov	r0, r1
 8004256:	4611      	mov	r1, r2
 8004258:	461a      	mov	r2, r3
 800425a:	4603      	mov	r3, r0
 800425c:	817b      	strh	r3, [r7, #10]
 800425e:	460b      	mov	r3, r1
 8004260:	813b      	strh	r3, [r7, #8]
 8004262:	4613      	mov	r3, r2
 8004264:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004266:	f7fe fc0b 	bl	8002a80 <HAL_GetTick>
 800426a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004272:	b2db      	uxtb	r3, r3
 8004274:	2b20      	cmp	r3, #32
 8004276:	f040 80d9 	bne.w	800442c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	9300      	str	r3, [sp, #0]
 800427e:	2319      	movs	r3, #25
 8004280:	2201      	movs	r2, #1
 8004282:	496d      	ldr	r1, [pc, #436]	@ (8004438 <HAL_I2C_Mem_Write+0x1ec>)
 8004284:	68f8      	ldr	r0, [r7, #12]
 8004286:	f000 fc8b 	bl	8004ba0 <I2C_WaitOnFlagUntilTimeout>
 800428a:	4603      	mov	r3, r0
 800428c:	2b00      	cmp	r3, #0
 800428e:	d001      	beq.n	8004294 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004290:	2302      	movs	r3, #2
 8004292:	e0cc      	b.n	800442e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800429a:	2b01      	cmp	r3, #1
 800429c:	d101      	bne.n	80042a2 <HAL_I2C_Mem_Write+0x56>
 800429e:	2302      	movs	r3, #2
 80042a0:	e0c5      	b.n	800442e <HAL_I2C_Mem_Write+0x1e2>
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2201      	movs	r2, #1
 80042a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 0301 	and.w	r3, r3, #1
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d007      	beq.n	80042c8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f042 0201 	orr.w	r2, r2, #1
 80042c6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80042d6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2221      	movs	r2, #33	@ 0x21
 80042dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2240      	movs	r2, #64	@ 0x40
 80042e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2200      	movs	r2, #0
 80042ec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	6a3a      	ldr	r2, [r7, #32]
 80042f2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80042f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042fe:	b29a      	uxth	r2, r3
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	4a4d      	ldr	r2, [pc, #308]	@ (800443c <HAL_I2C_Mem_Write+0x1f0>)
 8004308:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800430a:	88f8      	ldrh	r0, [r7, #6]
 800430c:	893a      	ldrh	r2, [r7, #8]
 800430e:	8979      	ldrh	r1, [r7, #10]
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	9301      	str	r3, [sp, #4]
 8004314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004316:	9300      	str	r3, [sp, #0]
 8004318:	4603      	mov	r3, r0
 800431a:	68f8      	ldr	r0, [r7, #12]
 800431c:	f000 fac2 	bl	80048a4 <I2C_RequestMemoryWrite>
 8004320:	4603      	mov	r3, r0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d052      	beq.n	80043cc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e081      	b.n	800442e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800432a:	697a      	ldr	r2, [r7, #20]
 800432c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800432e:	68f8      	ldr	r0, [r7, #12]
 8004330:	f000 fd50 	bl	8004dd4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004334:	4603      	mov	r3, r0
 8004336:	2b00      	cmp	r3, #0
 8004338:	d00d      	beq.n	8004356 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800433e:	2b04      	cmp	r3, #4
 8004340:	d107      	bne.n	8004352 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004350:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e06b      	b.n	800442e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800435a:	781a      	ldrb	r2, [r3, #0]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004366:	1c5a      	adds	r2, r3, #1
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004370:	3b01      	subs	r3, #1
 8004372:	b29a      	uxth	r2, r3
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800437c:	b29b      	uxth	r3, r3
 800437e:	3b01      	subs	r3, #1
 8004380:	b29a      	uxth	r2, r3
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	695b      	ldr	r3, [r3, #20]
 800438c:	f003 0304 	and.w	r3, r3, #4
 8004390:	2b04      	cmp	r3, #4
 8004392:	d11b      	bne.n	80043cc <HAL_I2C_Mem_Write+0x180>
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004398:	2b00      	cmp	r3, #0
 800439a:	d017      	beq.n	80043cc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043a0:	781a      	ldrb	r2, [r3, #0]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ac:	1c5a      	adds	r2, r3, #1
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043b6:	3b01      	subs	r3, #1
 80043b8:	b29a      	uxth	r2, r3
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	3b01      	subs	r3, #1
 80043c6:	b29a      	uxth	r2, r3
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d1aa      	bne.n	800432a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043d4:	697a      	ldr	r2, [r7, #20]
 80043d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80043d8:	68f8      	ldr	r0, [r7, #12]
 80043da:	f000 fd43 	bl	8004e64 <I2C_WaitOnBTFFlagUntilTimeout>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d00d      	beq.n	8004400 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043e8:	2b04      	cmp	r3, #4
 80043ea:	d107      	bne.n	80043fc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043fa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e016      	b.n	800442e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800440e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2220      	movs	r2, #32
 8004414:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2200      	movs	r2, #0
 800441c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2200      	movs	r2, #0
 8004424:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004428:	2300      	movs	r3, #0
 800442a:	e000      	b.n	800442e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800442c:	2302      	movs	r3, #2
  }
}
 800442e:	4618      	mov	r0, r3
 8004430:	3718      	adds	r7, #24
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	00100002 	.word	0x00100002
 800443c:	ffff0000 	.word	0xffff0000

08004440 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b08c      	sub	sp, #48	@ 0x30
 8004444:	af02      	add	r7, sp, #8
 8004446:	60f8      	str	r0, [r7, #12]
 8004448:	4608      	mov	r0, r1
 800444a:	4611      	mov	r1, r2
 800444c:	461a      	mov	r2, r3
 800444e:	4603      	mov	r3, r0
 8004450:	817b      	strh	r3, [r7, #10]
 8004452:	460b      	mov	r3, r1
 8004454:	813b      	strh	r3, [r7, #8]
 8004456:	4613      	mov	r3, r2
 8004458:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800445a:	f7fe fb11 	bl	8002a80 <HAL_GetTick>
 800445e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004466:	b2db      	uxtb	r3, r3
 8004468:	2b20      	cmp	r3, #32
 800446a:	f040 8214 	bne.w	8004896 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800446e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004470:	9300      	str	r3, [sp, #0]
 8004472:	2319      	movs	r3, #25
 8004474:	2201      	movs	r2, #1
 8004476:	497b      	ldr	r1, [pc, #492]	@ (8004664 <HAL_I2C_Mem_Read+0x224>)
 8004478:	68f8      	ldr	r0, [r7, #12]
 800447a:	f000 fb91 	bl	8004ba0 <I2C_WaitOnFlagUntilTimeout>
 800447e:	4603      	mov	r3, r0
 8004480:	2b00      	cmp	r3, #0
 8004482:	d001      	beq.n	8004488 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004484:	2302      	movs	r3, #2
 8004486:	e207      	b.n	8004898 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800448e:	2b01      	cmp	r3, #1
 8004490:	d101      	bne.n	8004496 <HAL_I2C_Mem_Read+0x56>
 8004492:	2302      	movs	r3, #2
 8004494:	e200      	b.n	8004898 <HAL_I2C_Mem_Read+0x458>
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2201      	movs	r2, #1
 800449a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 0301 	and.w	r3, r3, #1
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d007      	beq.n	80044bc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f042 0201 	orr.w	r2, r2, #1
 80044ba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80044ca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2222      	movs	r2, #34	@ 0x22
 80044d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2240      	movs	r2, #64	@ 0x40
 80044d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2200      	movs	r2, #0
 80044e0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044e6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80044ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044f2:	b29a      	uxth	r2, r3
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	4a5b      	ldr	r2, [pc, #364]	@ (8004668 <HAL_I2C_Mem_Read+0x228>)
 80044fc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80044fe:	88f8      	ldrh	r0, [r7, #6]
 8004500:	893a      	ldrh	r2, [r7, #8]
 8004502:	8979      	ldrh	r1, [r7, #10]
 8004504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004506:	9301      	str	r3, [sp, #4]
 8004508:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800450a:	9300      	str	r3, [sp, #0]
 800450c:	4603      	mov	r3, r0
 800450e:	68f8      	ldr	r0, [r7, #12]
 8004510:	f000 fa5e 	bl	80049d0 <I2C_RequestMemoryRead>
 8004514:	4603      	mov	r3, r0
 8004516:	2b00      	cmp	r3, #0
 8004518:	d001      	beq.n	800451e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e1bc      	b.n	8004898 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004522:	2b00      	cmp	r3, #0
 8004524:	d113      	bne.n	800454e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004526:	2300      	movs	r3, #0
 8004528:	623b      	str	r3, [r7, #32]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	695b      	ldr	r3, [r3, #20]
 8004530:	623b      	str	r3, [r7, #32]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	699b      	ldr	r3, [r3, #24]
 8004538:	623b      	str	r3, [r7, #32]
 800453a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800454a:	601a      	str	r2, [r3, #0]
 800454c:	e190      	b.n	8004870 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004552:	2b01      	cmp	r3, #1
 8004554:	d11b      	bne.n	800458e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004564:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004566:	2300      	movs	r3, #0
 8004568:	61fb      	str	r3, [r7, #28]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	695b      	ldr	r3, [r3, #20]
 8004570:	61fb      	str	r3, [r7, #28]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	699b      	ldr	r3, [r3, #24]
 8004578:	61fb      	str	r3, [r7, #28]
 800457a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800458a:	601a      	str	r2, [r3, #0]
 800458c:	e170      	b.n	8004870 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004592:	2b02      	cmp	r3, #2
 8004594:	d11b      	bne.n	80045ce <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045a4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80045b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045b6:	2300      	movs	r3, #0
 80045b8:	61bb      	str	r3, [r7, #24]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	695b      	ldr	r3, [r3, #20]
 80045c0:	61bb      	str	r3, [r7, #24]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	699b      	ldr	r3, [r3, #24]
 80045c8:	61bb      	str	r3, [r7, #24]
 80045ca:	69bb      	ldr	r3, [r7, #24]
 80045cc:	e150      	b.n	8004870 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045ce:	2300      	movs	r3, #0
 80045d0:	617b      	str	r3, [r7, #20]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	695b      	ldr	r3, [r3, #20]
 80045d8:	617b      	str	r3, [r7, #20]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	699b      	ldr	r3, [r3, #24]
 80045e0:	617b      	str	r3, [r7, #20]
 80045e2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80045e4:	e144      	b.n	8004870 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045ea:	2b03      	cmp	r3, #3
 80045ec:	f200 80f1 	bhi.w	80047d2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d123      	bne.n	8004640 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045fa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80045fc:	68f8      	ldr	r0, [r7, #12]
 80045fe:	f000 fc79 	bl	8004ef4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004602:	4603      	mov	r3, r0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d001      	beq.n	800460c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e145      	b.n	8004898 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	691a      	ldr	r2, [r3, #16]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004616:	b2d2      	uxtb	r2, r2
 8004618:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800461e:	1c5a      	adds	r2, r3, #1
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004628:	3b01      	subs	r3, #1
 800462a:	b29a      	uxth	r2, r3
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004634:	b29b      	uxth	r3, r3
 8004636:	3b01      	subs	r3, #1
 8004638:	b29a      	uxth	r2, r3
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800463e:	e117      	b.n	8004870 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004644:	2b02      	cmp	r3, #2
 8004646:	d14e      	bne.n	80046e6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800464a:	9300      	str	r3, [sp, #0]
 800464c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800464e:	2200      	movs	r2, #0
 8004650:	4906      	ldr	r1, [pc, #24]	@ (800466c <HAL_I2C_Mem_Read+0x22c>)
 8004652:	68f8      	ldr	r0, [r7, #12]
 8004654:	f000 faa4 	bl	8004ba0 <I2C_WaitOnFlagUntilTimeout>
 8004658:	4603      	mov	r3, r0
 800465a:	2b00      	cmp	r3, #0
 800465c:	d008      	beq.n	8004670 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e11a      	b.n	8004898 <HAL_I2C_Mem_Read+0x458>
 8004662:	bf00      	nop
 8004664:	00100002 	.word	0x00100002
 8004668:	ffff0000 	.word	0xffff0000
 800466c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800467e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	691a      	ldr	r2, [r3, #16]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800468a:	b2d2      	uxtb	r2, r2
 800468c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004692:	1c5a      	adds	r2, r3, #1
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800469c:	3b01      	subs	r3, #1
 800469e:	b29a      	uxth	r2, r3
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046a8:	b29b      	uxth	r3, r3
 80046aa:	3b01      	subs	r3, #1
 80046ac:	b29a      	uxth	r2, r3
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	691a      	ldr	r2, [r3, #16]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046bc:	b2d2      	uxtb	r2, r2
 80046be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046c4:	1c5a      	adds	r2, r3, #1
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046ce:	3b01      	subs	r3, #1
 80046d0:	b29a      	uxth	r2, r3
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046da:	b29b      	uxth	r3, r3
 80046dc:	3b01      	subs	r3, #1
 80046de:	b29a      	uxth	r2, r3
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80046e4:	e0c4      	b.n	8004870 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80046e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046e8:	9300      	str	r3, [sp, #0]
 80046ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046ec:	2200      	movs	r2, #0
 80046ee:	496c      	ldr	r1, [pc, #432]	@ (80048a0 <HAL_I2C_Mem_Read+0x460>)
 80046f0:	68f8      	ldr	r0, [r7, #12]
 80046f2:	f000 fa55 	bl	8004ba0 <I2C_WaitOnFlagUntilTimeout>
 80046f6:	4603      	mov	r3, r0
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d001      	beq.n	8004700 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e0cb      	b.n	8004898 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800470e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	691a      	ldr	r2, [r3, #16]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800471a:	b2d2      	uxtb	r2, r2
 800471c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004722:	1c5a      	adds	r2, r3, #1
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800472c:	3b01      	subs	r3, #1
 800472e:	b29a      	uxth	r2, r3
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004738:	b29b      	uxth	r3, r3
 800473a:	3b01      	subs	r3, #1
 800473c:	b29a      	uxth	r2, r3
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004744:	9300      	str	r3, [sp, #0]
 8004746:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004748:	2200      	movs	r2, #0
 800474a:	4955      	ldr	r1, [pc, #340]	@ (80048a0 <HAL_I2C_Mem_Read+0x460>)
 800474c:	68f8      	ldr	r0, [r7, #12]
 800474e:	f000 fa27 	bl	8004ba0 <I2C_WaitOnFlagUntilTimeout>
 8004752:	4603      	mov	r3, r0
 8004754:	2b00      	cmp	r3, #0
 8004756:	d001      	beq.n	800475c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	e09d      	b.n	8004898 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800476a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	691a      	ldr	r2, [r3, #16]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004776:	b2d2      	uxtb	r2, r2
 8004778:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800477e:	1c5a      	adds	r2, r3, #1
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004788:	3b01      	subs	r3, #1
 800478a:	b29a      	uxth	r2, r3
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004794:	b29b      	uxth	r3, r3
 8004796:	3b01      	subs	r3, #1
 8004798:	b29a      	uxth	r2, r3
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	691a      	ldr	r2, [r3, #16]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047a8:	b2d2      	uxtb	r2, r2
 80047aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047b0:	1c5a      	adds	r2, r3, #1
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047ba:	3b01      	subs	r3, #1
 80047bc:	b29a      	uxth	r2, r3
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	3b01      	subs	r3, #1
 80047ca:	b29a      	uxth	r2, r3
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80047d0:	e04e      	b.n	8004870 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047d4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80047d6:	68f8      	ldr	r0, [r7, #12]
 80047d8:	f000 fb8c 	bl	8004ef4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d001      	beq.n	80047e6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e058      	b.n	8004898 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	691a      	ldr	r2, [r3, #16]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047f0:	b2d2      	uxtb	r2, r2
 80047f2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047f8:	1c5a      	adds	r2, r3, #1
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004802:	3b01      	subs	r3, #1
 8004804:	b29a      	uxth	r2, r3
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800480e:	b29b      	uxth	r3, r3
 8004810:	3b01      	subs	r3, #1
 8004812:	b29a      	uxth	r2, r3
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	695b      	ldr	r3, [r3, #20]
 800481e:	f003 0304 	and.w	r3, r3, #4
 8004822:	2b04      	cmp	r3, #4
 8004824:	d124      	bne.n	8004870 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800482a:	2b03      	cmp	r3, #3
 800482c:	d107      	bne.n	800483e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800483c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	691a      	ldr	r2, [r3, #16]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004848:	b2d2      	uxtb	r2, r2
 800484a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004850:	1c5a      	adds	r2, r3, #1
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800485a:	3b01      	subs	r3, #1
 800485c:	b29a      	uxth	r2, r3
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004866:	b29b      	uxth	r3, r3
 8004868:	3b01      	subs	r3, #1
 800486a:	b29a      	uxth	r2, r3
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004874:	2b00      	cmp	r3, #0
 8004876:	f47f aeb6 	bne.w	80045e6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2220      	movs	r2, #32
 800487e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2200      	movs	r2, #0
 8004886:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2200      	movs	r2, #0
 800488e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004892:	2300      	movs	r3, #0
 8004894:	e000      	b.n	8004898 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004896:	2302      	movs	r3, #2
  }
}
 8004898:	4618      	mov	r0, r3
 800489a:	3728      	adds	r7, #40	@ 0x28
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}
 80048a0:	00010004 	.word	0x00010004

080048a4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b088      	sub	sp, #32
 80048a8:	af02      	add	r7, sp, #8
 80048aa:	60f8      	str	r0, [r7, #12]
 80048ac:	4608      	mov	r0, r1
 80048ae:	4611      	mov	r1, r2
 80048b0:	461a      	mov	r2, r3
 80048b2:	4603      	mov	r3, r0
 80048b4:	817b      	strh	r3, [r7, #10]
 80048b6:	460b      	mov	r3, r1
 80048b8:	813b      	strh	r3, [r7, #8]
 80048ba:	4613      	mov	r3, r2
 80048bc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80048cc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80048ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048d0:	9300      	str	r3, [sp, #0]
 80048d2:	6a3b      	ldr	r3, [r7, #32]
 80048d4:	2200      	movs	r2, #0
 80048d6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80048da:	68f8      	ldr	r0, [r7, #12]
 80048dc:	f000 f960 	bl	8004ba0 <I2C_WaitOnFlagUntilTimeout>
 80048e0:	4603      	mov	r3, r0
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d00d      	beq.n	8004902 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048f4:	d103      	bne.n	80048fe <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80048fc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e05f      	b.n	80049c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004902:	897b      	ldrh	r3, [r7, #10]
 8004904:	b2db      	uxtb	r3, r3
 8004906:	461a      	mov	r2, r3
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004910:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004914:	6a3a      	ldr	r2, [r7, #32]
 8004916:	492d      	ldr	r1, [pc, #180]	@ (80049cc <I2C_RequestMemoryWrite+0x128>)
 8004918:	68f8      	ldr	r0, [r7, #12]
 800491a:	f000 f9bb 	bl	8004c94 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800491e:	4603      	mov	r3, r0
 8004920:	2b00      	cmp	r3, #0
 8004922:	d001      	beq.n	8004928 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	e04c      	b.n	80049c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004928:	2300      	movs	r3, #0
 800492a:	617b      	str	r3, [r7, #20]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	695b      	ldr	r3, [r3, #20]
 8004932:	617b      	str	r3, [r7, #20]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	699b      	ldr	r3, [r3, #24]
 800493a:	617b      	str	r3, [r7, #20]
 800493c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800493e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004940:	6a39      	ldr	r1, [r7, #32]
 8004942:	68f8      	ldr	r0, [r7, #12]
 8004944:	f000 fa46 	bl	8004dd4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004948:	4603      	mov	r3, r0
 800494a:	2b00      	cmp	r3, #0
 800494c:	d00d      	beq.n	800496a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004952:	2b04      	cmp	r3, #4
 8004954:	d107      	bne.n	8004966 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004964:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e02b      	b.n	80049c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800496a:	88fb      	ldrh	r3, [r7, #6]
 800496c:	2b01      	cmp	r3, #1
 800496e:	d105      	bne.n	800497c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004970:	893b      	ldrh	r3, [r7, #8]
 8004972:	b2da      	uxtb	r2, r3
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	611a      	str	r2, [r3, #16]
 800497a:	e021      	b.n	80049c0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800497c:	893b      	ldrh	r3, [r7, #8]
 800497e:	0a1b      	lsrs	r3, r3, #8
 8004980:	b29b      	uxth	r3, r3
 8004982:	b2da      	uxtb	r2, r3
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800498a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800498c:	6a39      	ldr	r1, [r7, #32]
 800498e:	68f8      	ldr	r0, [r7, #12]
 8004990:	f000 fa20 	bl	8004dd4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004994:	4603      	mov	r3, r0
 8004996:	2b00      	cmp	r3, #0
 8004998:	d00d      	beq.n	80049b6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800499e:	2b04      	cmp	r3, #4
 80049a0:	d107      	bne.n	80049b2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049b0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e005      	b.n	80049c2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80049b6:	893b      	ldrh	r3, [r7, #8]
 80049b8:	b2da      	uxtb	r2, r3
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80049c0:	2300      	movs	r3, #0
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3718      	adds	r7, #24
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	bf00      	nop
 80049cc:	00010002 	.word	0x00010002

080049d0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b088      	sub	sp, #32
 80049d4:	af02      	add	r7, sp, #8
 80049d6:	60f8      	str	r0, [r7, #12]
 80049d8:	4608      	mov	r0, r1
 80049da:	4611      	mov	r1, r2
 80049dc:	461a      	mov	r2, r3
 80049de:	4603      	mov	r3, r0
 80049e0:	817b      	strh	r3, [r7, #10]
 80049e2:	460b      	mov	r3, r1
 80049e4:	813b      	strh	r3, [r7, #8]
 80049e6:	4613      	mov	r3, r2
 80049e8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80049f8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a08:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a0c:	9300      	str	r3, [sp, #0]
 8004a0e:	6a3b      	ldr	r3, [r7, #32]
 8004a10:	2200      	movs	r2, #0
 8004a12:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004a16:	68f8      	ldr	r0, [r7, #12]
 8004a18:	f000 f8c2 	bl	8004ba0 <I2C_WaitOnFlagUntilTimeout>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d00d      	beq.n	8004a3e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a30:	d103      	bne.n	8004a3a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a38:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	e0aa      	b.n	8004b94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004a3e:	897b      	ldrh	r3, [r7, #10]
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	461a      	mov	r2, r3
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004a4c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a50:	6a3a      	ldr	r2, [r7, #32]
 8004a52:	4952      	ldr	r1, [pc, #328]	@ (8004b9c <I2C_RequestMemoryRead+0x1cc>)
 8004a54:	68f8      	ldr	r0, [r7, #12]
 8004a56:	f000 f91d 	bl	8004c94 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d001      	beq.n	8004a64 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e097      	b.n	8004b94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a64:	2300      	movs	r3, #0
 8004a66:	617b      	str	r3, [r7, #20]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	695b      	ldr	r3, [r3, #20]
 8004a6e:	617b      	str	r3, [r7, #20]
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	699b      	ldr	r3, [r3, #24]
 8004a76:	617b      	str	r3, [r7, #20]
 8004a78:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a7c:	6a39      	ldr	r1, [r7, #32]
 8004a7e:	68f8      	ldr	r0, [r7, #12]
 8004a80:	f000 f9a8 	bl	8004dd4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a84:	4603      	mov	r3, r0
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d00d      	beq.n	8004aa6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a8e:	2b04      	cmp	r3, #4
 8004a90:	d107      	bne.n	8004aa2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004aa0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e076      	b.n	8004b94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004aa6:	88fb      	ldrh	r3, [r7, #6]
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d105      	bne.n	8004ab8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004aac:	893b      	ldrh	r3, [r7, #8]
 8004aae:	b2da      	uxtb	r2, r3
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	611a      	str	r2, [r3, #16]
 8004ab6:	e021      	b.n	8004afc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004ab8:	893b      	ldrh	r3, [r7, #8]
 8004aba:	0a1b      	lsrs	r3, r3, #8
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	b2da      	uxtb	r2, r3
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ac6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ac8:	6a39      	ldr	r1, [r7, #32]
 8004aca:	68f8      	ldr	r0, [r7, #12]
 8004acc:	f000 f982 	bl	8004dd4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d00d      	beq.n	8004af2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ada:	2b04      	cmp	r3, #4
 8004adc:	d107      	bne.n	8004aee <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004aec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	e050      	b.n	8004b94 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004af2:	893b      	ldrh	r3, [r7, #8]
 8004af4:	b2da      	uxtb	r2, r3
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004afc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004afe:	6a39      	ldr	r1, [r7, #32]
 8004b00:	68f8      	ldr	r0, [r7, #12]
 8004b02:	f000 f967 	bl	8004dd4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b06:	4603      	mov	r3, r0
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d00d      	beq.n	8004b28 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b10:	2b04      	cmp	r3, #4
 8004b12:	d107      	bne.n	8004b24 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b22:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e035      	b.n	8004b94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b36:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b3a:	9300      	str	r3, [sp, #0]
 8004b3c:	6a3b      	ldr	r3, [r7, #32]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004b44:	68f8      	ldr	r0, [r7, #12]
 8004b46:	f000 f82b 	bl	8004ba0 <I2C_WaitOnFlagUntilTimeout>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d00d      	beq.n	8004b6c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b5e:	d103      	bne.n	8004b68 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b66:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004b68:	2303      	movs	r3, #3
 8004b6a:	e013      	b.n	8004b94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004b6c:	897b      	ldrh	r3, [r7, #10]
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	f043 0301 	orr.w	r3, r3, #1
 8004b74:	b2da      	uxtb	r2, r3
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b7e:	6a3a      	ldr	r2, [r7, #32]
 8004b80:	4906      	ldr	r1, [pc, #24]	@ (8004b9c <I2C_RequestMemoryRead+0x1cc>)
 8004b82:	68f8      	ldr	r0, [r7, #12]
 8004b84:	f000 f886 	bl	8004c94 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d001      	beq.n	8004b92 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e000      	b.n	8004b94 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004b92:	2300      	movs	r3, #0
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3718      	adds	r7, #24
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}
 8004b9c:	00010002 	.word	0x00010002

08004ba0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b084      	sub	sp, #16
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	60f8      	str	r0, [r7, #12]
 8004ba8:	60b9      	str	r1, [r7, #8]
 8004baa:	603b      	str	r3, [r7, #0]
 8004bac:	4613      	mov	r3, r2
 8004bae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004bb0:	e048      	b.n	8004c44 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bb8:	d044      	beq.n	8004c44 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bba:	f7fd ff61 	bl	8002a80 <HAL_GetTick>
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	69bb      	ldr	r3, [r7, #24]
 8004bc2:	1ad3      	subs	r3, r2, r3
 8004bc4:	683a      	ldr	r2, [r7, #0]
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	d302      	bcc.n	8004bd0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d139      	bne.n	8004c44 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	0c1b      	lsrs	r3, r3, #16
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d10d      	bne.n	8004bf6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	695b      	ldr	r3, [r3, #20]
 8004be0:	43da      	mvns	r2, r3
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	4013      	ands	r3, r2
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	bf0c      	ite	eq
 8004bec:	2301      	moveq	r3, #1
 8004bee:	2300      	movne	r3, #0
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	e00c      	b.n	8004c10 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	699b      	ldr	r3, [r3, #24]
 8004bfc:	43da      	mvns	r2, r3
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	4013      	ands	r3, r2
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	bf0c      	ite	eq
 8004c08:	2301      	moveq	r3, #1
 8004c0a:	2300      	movne	r3, #0
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	461a      	mov	r2, r3
 8004c10:	79fb      	ldrb	r3, [r7, #7]
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d116      	bne.n	8004c44 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2220      	movs	r2, #32
 8004c20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2200      	movs	r2, #0
 8004c28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c30:	f043 0220 	orr.w	r2, r3, #32
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e023      	b.n	8004c8c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	0c1b      	lsrs	r3, r3, #16
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d10d      	bne.n	8004c6a <I2C_WaitOnFlagUntilTimeout+0xca>
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	695b      	ldr	r3, [r3, #20]
 8004c54:	43da      	mvns	r2, r3
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	4013      	ands	r3, r2
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	bf0c      	ite	eq
 8004c60:	2301      	moveq	r3, #1
 8004c62:	2300      	movne	r3, #0
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	461a      	mov	r2, r3
 8004c68:	e00c      	b.n	8004c84 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	699b      	ldr	r3, [r3, #24]
 8004c70:	43da      	mvns	r2, r3
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	4013      	ands	r3, r2
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	bf0c      	ite	eq
 8004c7c:	2301      	moveq	r3, #1
 8004c7e:	2300      	movne	r3, #0
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	461a      	mov	r2, r3
 8004c84:	79fb      	ldrb	r3, [r7, #7]
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d093      	beq.n	8004bb2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c8a:	2300      	movs	r3, #0
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3710      	adds	r7, #16
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}

08004c94 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b084      	sub	sp, #16
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	60f8      	str	r0, [r7, #12]
 8004c9c:	60b9      	str	r1, [r7, #8]
 8004c9e:	607a      	str	r2, [r7, #4]
 8004ca0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004ca2:	e071      	b.n	8004d88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	695b      	ldr	r3, [r3, #20]
 8004caa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cb2:	d123      	bne.n	8004cfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004cc2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004ccc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2220      	movs	r2, #32
 8004cd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ce8:	f043 0204 	orr.w	r2, r3, #4
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e067      	b.n	8004dcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d02:	d041      	beq.n	8004d88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d04:	f7fd febc 	bl	8002a80 <HAL_GetTick>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d302      	bcc.n	8004d1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d136      	bne.n	8004d88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	0c1b      	lsrs	r3, r3, #16
 8004d1e:	b2db      	uxtb	r3, r3
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d10c      	bne.n	8004d3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	695b      	ldr	r3, [r3, #20]
 8004d2a:	43da      	mvns	r2, r3
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	4013      	ands	r3, r2
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	bf14      	ite	ne
 8004d36:	2301      	movne	r3, #1
 8004d38:	2300      	moveq	r3, #0
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	e00b      	b.n	8004d56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	699b      	ldr	r3, [r3, #24]
 8004d44:	43da      	mvns	r2, r3
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	4013      	ands	r3, r2
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	bf14      	ite	ne
 8004d50:	2301      	movne	r3, #1
 8004d52:	2300      	moveq	r3, #0
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d016      	beq.n	8004d88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2220      	movs	r2, #32
 8004d64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d74:	f043 0220 	orr.w	r2, r3, #32
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	e021      	b.n	8004dcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	0c1b      	lsrs	r3, r3, #16
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	d10c      	bne.n	8004dac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	695b      	ldr	r3, [r3, #20]
 8004d98:	43da      	mvns	r2, r3
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	bf14      	ite	ne
 8004da4:	2301      	movne	r3, #1
 8004da6:	2300      	moveq	r3, #0
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	e00b      	b.n	8004dc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	699b      	ldr	r3, [r3, #24]
 8004db2:	43da      	mvns	r2, r3
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	4013      	ands	r3, r2
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	bf14      	ite	ne
 8004dbe:	2301      	movne	r3, #1
 8004dc0:	2300      	moveq	r3, #0
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	f47f af6d 	bne.w	8004ca4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004dca:	2300      	movs	r3, #0
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3710      	adds	r7, #16
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b084      	sub	sp, #16
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	60b9      	str	r1, [r7, #8]
 8004dde:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004de0:	e034      	b.n	8004e4c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004de2:	68f8      	ldr	r0, [r7, #12]
 8004de4:	f000 f8e3 	bl	8004fae <I2C_IsAcknowledgeFailed>
 8004de8:	4603      	mov	r3, r0
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d001      	beq.n	8004df2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e034      	b.n	8004e5c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004df8:	d028      	beq.n	8004e4c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dfa:	f7fd fe41 	bl	8002a80 <HAL_GetTick>
 8004dfe:	4602      	mov	r2, r0
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	1ad3      	subs	r3, r2, r3
 8004e04:	68ba      	ldr	r2, [r7, #8]
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d302      	bcc.n	8004e10 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d11d      	bne.n	8004e4c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	695b      	ldr	r3, [r3, #20]
 8004e16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e1a:	2b80      	cmp	r3, #128	@ 0x80
 8004e1c:	d016      	beq.n	8004e4c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2200      	movs	r2, #0
 8004e22:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2220      	movs	r2, #32
 8004e28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e38:	f043 0220 	orr.w	r2, r3, #32
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2200      	movs	r2, #0
 8004e44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e007      	b.n	8004e5c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	695b      	ldr	r3, [r3, #20]
 8004e52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e56:	2b80      	cmp	r3, #128	@ 0x80
 8004e58:	d1c3      	bne.n	8004de2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004e5a:	2300      	movs	r3, #0
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3710      	adds	r7, #16
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}

08004e64 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b084      	sub	sp, #16
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	60f8      	str	r0, [r7, #12]
 8004e6c:	60b9      	str	r1, [r7, #8]
 8004e6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e70:	e034      	b.n	8004edc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e72:	68f8      	ldr	r0, [r7, #12]
 8004e74:	f000 f89b 	bl	8004fae <I2C_IsAcknowledgeFailed>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d001      	beq.n	8004e82 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e034      	b.n	8004eec <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e88:	d028      	beq.n	8004edc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e8a:	f7fd fdf9 	bl	8002a80 <HAL_GetTick>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	1ad3      	subs	r3, r2, r3
 8004e94:	68ba      	ldr	r2, [r7, #8]
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d302      	bcc.n	8004ea0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d11d      	bne.n	8004edc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	695b      	ldr	r3, [r3, #20]
 8004ea6:	f003 0304 	and.w	r3, r3, #4
 8004eaa:	2b04      	cmp	r3, #4
 8004eac:	d016      	beq.n	8004edc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2220      	movs	r2, #32
 8004eb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ec8:	f043 0220 	orr.w	r2, r3, #32
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e007      	b.n	8004eec <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	695b      	ldr	r3, [r3, #20]
 8004ee2:	f003 0304 	and.w	r3, r3, #4
 8004ee6:	2b04      	cmp	r3, #4
 8004ee8:	d1c3      	bne.n	8004e72 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004eea:	2300      	movs	r3, #0
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3710      	adds	r7, #16
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}

08004ef4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b084      	sub	sp, #16
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	60f8      	str	r0, [r7, #12]
 8004efc:	60b9      	str	r1, [r7, #8]
 8004efe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f00:	e049      	b.n	8004f96 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	695b      	ldr	r3, [r3, #20]
 8004f08:	f003 0310 	and.w	r3, r3, #16
 8004f0c:	2b10      	cmp	r3, #16
 8004f0e:	d119      	bne.n	8004f44 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f06f 0210 	mvn.w	r2, #16
 8004f18:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2220      	movs	r2, #32
 8004f24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	e030      	b.n	8004fa6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f44:	f7fd fd9c 	bl	8002a80 <HAL_GetTick>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	1ad3      	subs	r3, r2, r3
 8004f4e:	68ba      	ldr	r2, [r7, #8]
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d302      	bcc.n	8004f5a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d11d      	bne.n	8004f96 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	695b      	ldr	r3, [r3, #20]
 8004f60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f64:	2b40      	cmp	r3, #64	@ 0x40
 8004f66:	d016      	beq.n	8004f96 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2220      	movs	r2, #32
 8004f72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f82:	f043 0220 	orr.w	r2, r3, #32
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	e007      	b.n	8004fa6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	695b      	ldr	r3, [r3, #20]
 8004f9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fa0:	2b40      	cmp	r3, #64	@ 0x40
 8004fa2:	d1ae      	bne.n	8004f02 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004fa4:	2300      	movs	r3, #0
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3710      	adds	r7, #16
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}

08004fae <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004fae:	b480      	push	{r7}
 8004fb0:	b083      	sub	sp, #12
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	695b      	ldr	r3, [r3, #20]
 8004fbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fc0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fc4:	d11b      	bne.n	8004ffe <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004fce:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2220      	movs	r2, #32
 8004fda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fea:	f043 0204 	orr.w	r2, r3, #4
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e000      	b.n	8005000 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004ffe:	2300      	movs	r3, #0
}
 8005000:	4618      	mov	r0, r3
 8005002:	370c      	adds	r7, #12
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr

0800500c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b088      	sub	sp, #32
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d101      	bne.n	800501e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e128      	b.n	8005270 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005024:	b2db      	uxtb	r3, r3
 8005026:	2b00      	cmp	r3, #0
 8005028:	d109      	bne.n	800503e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2200      	movs	r2, #0
 800502e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4a90      	ldr	r2, [pc, #576]	@ (8005278 <HAL_I2S_Init+0x26c>)
 8005036:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f7fd fa3f 	bl	80024bc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2202      	movs	r2, #2
 8005042:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	69db      	ldr	r3, [r3, #28]
 800504c:	687a      	ldr	r2, [r7, #4]
 800504e:	6812      	ldr	r2, [r2, #0]
 8005050:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005054:	f023 030f 	bic.w	r3, r3, #15
 8005058:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	2202      	movs	r2, #2
 8005060:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	695b      	ldr	r3, [r3, #20]
 8005066:	2b02      	cmp	r3, #2
 8005068:	d060      	beq.n	800512c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	68db      	ldr	r3, [r3, #12]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d102      	bne.n	8005078 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8005072:	2310      	movs	r3, #16
 8005074:	617b      	str	r3, [r7, #20]
 8005076:	e001      	b.n	800507c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005078:	2320      	movs	r3, #32
 800507a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	2b20      	cmp	r3, #32
 8005082:	d802      	bhi.n	800508a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	005b      	lsls	r3, r3, #1
 8005088:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800508a:	2001      	movs	r0, #1
 800508c:	f002 fd2c 	bl	8007ae8 <HAL_RCCEx_GetPeriphCLKFreq>
 8005090:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	691b      	ldr	r3, [r3, #16]
 8005096:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800509a:	d125      	bne.n	80050e8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	68db      	ldr	r3, [r3, #12]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d010      	beq.n	80050c6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	68fa      	ldr	r2, [r7, #12]
 80050aa:	fbb2 f2f3 	udiv	r2, r2, r3
 80050ae:	4613      	mov	r3, r2
 80050b0:	009b      	lsls	r3, r3, #2
 80050b2:	4413      	add	r3, r2
 80050b4:	005b      	lsls	r3, r3, #1
 80050b6:	461a      	mov	r2, r3
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	695b      	ldr	r3, [r3, #20]
 80050bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80050c0:	3305      	adds	r3, #5
 80050c2:	613b      	str	r3, [r7, #16]
 80050c4:	e01f      	b.n	8005106 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	00db      	lsls	r3, r3, #3
 80050ca:	68fa      	ldr	r2, [r7, #12]
 80050cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80050d0:	4613      	mov	r3, r2
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	4413      	add	r3, r2
 80050d6:	005b      	lsls	r3, r3, #1
 80050d8:	461a      	mov	r2, r3
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	695b      	ldr	r3, [r3, #20]
 80050de:	fbb2 f3f3 	udiv	r3, r2, r3
 80050e2:	3305      	adds	r3, #5
 80050e4:	613b      	str	r3, [r7, #16]
 80050e6:	e00e      	b.n	8005106 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80050e8:	68fa      	ldr	r2, [r7, #12]
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80050f0:	4613      	mov	r3, r2
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	4413      	add	r3, r2
 80050f6:	005b      	lsls	r3, r3, #1
 80050f8:	461a      	mov	r2, r3
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	695b      	ldr	r3, [r3, #20]
 80050fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005102:	3305      	adds	r3, #5
 8005104:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	4a5c      	ldr	r2, [pc, #368]	@ (800527c <HAL_I2S_Init+0x270>)
 800510a:	fba2 2303 	umull	r2, r3, r2, r3
 800510e:	08db      	lsrs	r3, r3, #3
 8005110:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	f003 0301 	and.w	r3, r3, #1
 8005118:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800511a:	693a      	ldr	r2, [r7, #16]
 800511c:	69bb      	ldr	r3, [r7, #24]
 800511e:	1ad3      	subs	r3, r2, r3
 8005120:	085b      	lsrs	r3, r3, #1
 8005122:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005124:	69bb      	ldr	r3, [r7, #24]
 8005126:	021b      	lsls	r3, r3, #8
 8005128:	61bb      	str	r3, [r7, #24]
 800512a:	e003      	b.n	8005134 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800512c:	2302      	movs	r3, #2
 800512e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005130:	2300      	movs	r3, #0
 8005132:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005134:	69fb      	ldr	r3, [r7, #28]
 8005136:	2b01      	cmp	r3, #1
 8005138:	d902      	bls.n	8005140 <HAL_I2S_Init+0x134>
 800513a:	69fb      	ldr	r3, [r7, #28]
 800513c:	2bff      	cmp	r3, #255	@ 0xff
 800513e:	d907      	bls.n	8005150 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005144:	f043 0210 	orr.w	r2, r3, #16
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	e08f      	b.n	8005270 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	691a      	ldr	r2, [r3, #16]
 8005154:	69bb      	ldr	r3, [r7, #24]
 8005156:	ea42 0103 	orr.w	r1, r2, r3
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	69fa      	ldr	r2, [r7, #28]
 8005160:	430a      	orrs	r2, r1
 8005162:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	69db      	ldr	r3, [r3, #28]
 800516a:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800516e:	f023 030f 	bic.w	r3, r3, #15
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	6851      	ldr	r1, [r2, #4]
 8005176:	687a      	ldr	r2, [r7, #4]
 8005178:	6892      	ldr	r2, [r2, #8]
 800517a:	4311      	orrs	r1, r2
 800517c:	687a      	ldr	r2, [r7, #4]
 800517e:	68d2      	ldr	r2, [r2, #12]
 8005180:	4311      	orrs	r1, r2
 8005182:	687a      	ldr	r2, [r7, #4]
 8005184:	6992      	ldr	r2, [r2, #24]
 8005186:	430a      	orrs	r2, r1
 8005188:	431a      	orrs	r2, r3
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005192:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6a1b      	ldr	r3, [r3, #32]
 8005198:	2b01      	cmp	r3, #1
 800519a:	d161      	bne.n	8005260 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	4a38      	ldr	r2, [pc, #224]	@ (8005280 <HAL_I2S_Init+0x274>)
 80051a0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a37      	ldr	r2, [pc, #220]	@ (8005284 <HAL_I2S_Init+0x278>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d101      	bne.n	80051b0 <HAL_I2S_Init+0x1a4>
 80051ac:	4b36      	ldr	r3, [pc, #216]	@ (8005288 <HAL_I2S_Init+0x27c>)
 80051ae:	e001      	b.n	80051b4 <HAL_I2S_Init+0x1a8>
 80051b0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80051b4:	69db      	ldr	r3, [r3, #28]
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	6812      	ldr	r2, [r2, #0]
 80051ba:	4932      	ldr	r1, [pc, #200]	@ (8005284 <HAL_I2S_Init+0x278>)
 80051bc:	428a      	cmp	r2, r1
 80051be:	d101      	bne.n	80051c4 <HAL_I2S_Init+0x1b8>
 80051c0:	4a31      	ldr	r2, [pc, #196]	@ (8005288 <HAL_I2S_Init+0x27c>)
 80051c2:	e001      	b.n	80051c8 <HAL_I2S_Init+0x1bc>
 80051c4:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80051c8:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80051cc:	f023 030f 	bic.w	r3, r3, #15
 80051d0:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a2b      	ldr	r2, [pc, #172]	@ (8005284 <HAL_I2S_Init+0x278>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d101      	bne.n	80051e0 <HAL_I2S_Init+0x1d4>
 80051dc:	4b2a      	ldr	r3, [pc, #168]	@ (8005288 <HAL_I2S_Init+0x27c>)
 80051de:	e001      	b.n	80051e4 <HAL_I2S_Init+0x1d8>
 80051e0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80051e4:	2202      	movs	r2, #2
 80051e6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a25      	ldr	r2, [pc, #148]	@ (8005284 <HAL_I2S_Init+0x278>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d101      	bne.n	80051f6 <HAL_I2S_Init+0x1ea>
 80051f2:	4b25      	ldr	r3, [pc, #148]	@ (8005288 <HAL_I2S_Init+0x27c>)
 80051f4:	e001      	b.n	80051fa <HAL_I2S_Init+0x1ee>
 80051f6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80051fa:	69db      	ldr	r3, [r3, #28]
 80051fc:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005206:	d003      	beq.n	8005210 <HAL_I2S_Init+0x204>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d103      	bne.n	8005218 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005210:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005214:	613b      	str	r3, [r7, #16]
 8005216:	e001      	b.n	800521c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005218:	2300      	movs	r3, #0
 800521a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005226:	4313      	orrs	r3, r2
 8005228:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	68db      	ldr	r3, [r3, #12]
 800522e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005230:	4313      	orrs	r3, r2
 8005232:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	699b      	ldr	r3, [r3, #24]
 8005238:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800523a:	4313      	orrs	r3, r2
 800523c:	b29a      	uxth	r2, r3
 800523e:	897b      	ldrh	r3, [r7, #10]
 8005240:	4313      	orrs	r3, r2
 8005242:	b29b      	uxth	r3, r3
 8005244:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005248:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a0d      	ldr	r2, [pc, #52]	@ (8005284 <HAL_I2S_Init+0x278>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d101      	bne.n	8005258 <HAL_I2S_Init+0x24c>
 8005254:	4b0c      	ldr	r3, [pc, #48]	@ (8005288 <HAL_I2S_Init+0x27c>)
 8005256:	e001      	b.n	800525c <HAL_I2S_Init+0x250>
 8005258:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800525c:	897a      	ldrh	r2, [r7, #10]
 800525e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2201      	movs	r2, #1
 800526a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 800526e:	2300      	movs	r3, #0
}
 8005270:	4618      	mov	r0, r3
 8005272:	3720      	adds	r7, #32
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}
 8005278:	08005589 	.word	0x08005589
 800527c:	cccccccd 	.word	0xcccccccd
 8005280:	0800569d 	.word	0x0800569d
 8005284:	40003800 	.word	0x40003800
 8005288:	40003400 	.word	0x40003400

0800528c <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b086      	sub	sp, #24
 8005290:	af00      	add	r7, sp, #0
 8005292:	60f8      	str	r0, [r7, #12]
 8005294:	60b9      	str	r1, [r7, #8]
 8005296:	4613      	mov	r3, r2
 8005298:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d002      	beq.n	80052a6 <HAL_I2S_Transmit_DMA+0x1a>
 80052a0:	88fb      	ldrh	r3, [r7, #6]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d101      	bne.n	80052aa <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e08a      	b.n	80053c0 <HAL_I2S_Transmit_DMA+0x134>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	d001      	beq.n	80052ba <HAL_I2S_Transmit_DMA+0x2e>
  {
    return HAL_BUSY;
 80052b6:	2302      	movs	r3, #2
 80052b8:	e082      	b.n	80053c0 <HAL_I2S_Transmit_DMA+0x134>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d101      	bne.n	80052ca <HAL_I2S_Transmit_DMA+0x3e>
 80052c6:	2302      	movs	r3, #2
 80052c8:	e07a      	b.n	80053c0 <HAL_I2S_Transmit_DMA+0x134>
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2201      	movs	r2, #1
 80052ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2203      	movs	r2, #3
 80052d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2200      	movs	r2, #0
 80052de:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pTxBuffPtr = pData;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	68ba      	ldr	r2, [r7, #8]
 80052e4:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	69db      	ldr	r3, [r3, #28]
 80052ec:	f003 0307 	and.w	r3, r3, #7
 80052f0:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	2b03      	cmp	r3, #3
 80052f6:	d002      	beq.n	80052fe <HAL_I2S_Transmit_DMA+0x72>
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	2b05      	cmp	r3, #5
 80052fc:	d10a      	bne.n	8005314 <HAL_I2S_Transmit_DMA+0x88>
  {
    hi2s->TxXferSize = (Size << 1U);
 80052fe:	88fb      	ldrh	r3, [r7, #6]
 8005300:	005b      	lsls	r3, r3, #1
 8005302:	b29a      	uxth	r2, r3
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 8005308:	88fb      	ldrh	r3, [r7, #6]
 800530a:	005b      	lsls	r3, r3, #1
 800530c:	b29a      	uxth	r2, r3
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005312:	e005      	b.n	8005320 <HAL_I2S_Transmit_DMA+0x94>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	88fa      	ldrh	r2, [r7, #6]
 8005318:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	88fa      	ldrh	r2, [r7, #6]
 800531e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005324:	4a28      	ldr	r2, [pc, #160]	@ (80053c8 <HAL_I2S_Transmit_DMA+0x13c>)
 8005326:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800532c:	4a27      	ldr	r2, [pc, #156]	@ (80053cc <HAL_I2S_Transmit_DMA+0x140>)
 800532e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005334:	4a26      	ldr	r2, [pc, #152]	@ (80053d0 <HAL_I2S_Transmit_DMA+0x144>)
 8005336:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005340:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005348:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800534e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005350:	f7fe f98e 	bl	8003670 <HAL_DMA_Start_IT>
 8005354:	4603      	mov	r3, r0
 8005356:	2b00      	cmp	r3, #0
 8005358:	d00f      	beq.n	800537a <HAL_I2S_Transmit_DMA+0xee>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800535e:	f043 0208 	orr.w	r2, r3, #8
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2201      	movs	r2, #1
 800536a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2200      	movs	r2, #0
 8005372:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	e022      	b.n	80053c0 <HAL_I2S_Transmit_DMA+0x134>
  }

  __HAL_UNLOCK(hi2s);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2200      	movs	r2, #0
 800537e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	f003 0302 	and.w	r3, r3, #2
 800538c:	2b00      	cmp	r3, #0
 800538e:	d107      	bne.n	80053a0 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	685a      	ldr	r2, [r3, #4]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f042 0202 	orr.w	r2, r2, #2
 800539e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	69db      	ldr	r3, [r3, #28]
 80053a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d107      	bne.n	80053be <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	69da      	ldr	r2, [r3, #28]
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80053bc:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 80053be:	2300      	movs	r3, #0
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	3718      	adds	r7, #24
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}
 80053c8:	08005467 	.word	0x08005467
 80053cc:	08005425 	.word	0x08005425
 80053d0:	08005483 	.word	0x08005483

080053d4 <HAL_I2S_TxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b083      	sub	sp, #12
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxHalfCpltCallback could be implemented in the user file
   */
}
 80053dc:	bf00      	nop
 80053de:	370c      	adds	r7, #12
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr

080053e8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b083      	sub	sp, #12
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80053f0:	bf00      	nop
 80053f2:	370c      	adds	r7, #12
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr

080053fc <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b083      	sub	sp, #12
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8005404:	bf00      	nop
 8005406:	370c      	adds	r7, #12
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr

08005410 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005410:	b480      	push	{r7}
 8005412:	b083      	sub	sp, #12
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005418:	bf00      	nop
 800541a:	370c      	adds	r7, #12
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr

08005424 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b084      	sub	sp, #16
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005430:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	69db      	ldr	r3, [r3, #28]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d10e      	bne.n	8005458 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	685a      	ldr	r2, [r3, #4]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f022 0202 	bic.w	r2, r2, #2
 8005448:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2200      	movs	r2, #0
 800544e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8005458:	68f8      	ldr	r0, [r7, #12]
 800545a:	f7ff ffc5 	bl	80053e8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800545e:	bf00      	nop
 8005460:	3710      	adds	r7, #16
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}

08005466 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005466:	b580      	push	{r7, lr}
 8005468:	b084      	sub	sp, #16
 800546a:	af00      	add	r7, sp, #0
 800546c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005472:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8005474:	68f8      	ldr	r0, [r7, #12]
 8005476:	f7ff ffad 	bl	80053d4 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800547a:	bf00      	nop
 800547c:	3710      	adds	r7, #16
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}

08005482 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8005482:	b580      	push	{r7, lr}
 8005484:	b084      	sub	sp, #16
 8005486:	af00      	add	r7, sp, #0
 8005488:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800548e:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	685a      	ldr	r2, [r3, #4]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f022 0203 	bic.w	r2, r2, #3
 800549e:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2200      	movs	r2, #0
 80054a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2200      	movs	r2, #0
 80054aa:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2201      	movs	r2, #1
 80054b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054b8:	f043 0208 	orr.w	r2, r3, #8
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80054c0:	68f8      	ldr	r0, [r7, #12]
 80054c2:	f7ff ffa5 	bl	8005410 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80054c6:	bf00      	nop
 80054c8:	3710      	adds	r7, #16
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}

080054ce <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80054ce:	b580      	push	{r7, lr}
 80054d0:	b082      	sub	sp, #8
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054da:	881a      	ldrh	r2, [r3, #0]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054e6:	1c9a      	adds	r2, r3, #2
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	3b01      	subs	r3, #1
 80054f4:	b29a      	uxth	r2, r3
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054fe:	b29b      	uxth	r3, r3
 8005500:	2b00      	cmp	r3, #0
 8005502:	d10e      	bne.n	8005522 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	685a      	ldr	r2, [r3, #4]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005512:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2201      	movs	r2, #1
 8005518:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f7ff ff63 	bl	80053e8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005522:	bf00      	nop
 8005524:	3708      	adds	r7, #8
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}

0800552a <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800552a:	b580      	push	{r7, lr}
 800552c:	b082      	sub	sp, #8
 800552e:	af00      	add	r7, sp, #0
 8005530:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	68da      	ldr	r2, [r3, #12]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800553c:	b292      	uxth	r2, r2
 800553e:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005544:	1c9a      	adds	r2, r3, #2
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800554e:	b29b      	uxth	r3, r3
 8005550:	3b01      	subs	r3, #1
 8005552:	b29a      	uxth	r2, r3
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800555c:	b29b      	uxth	r3, r3
 800555e:	2b00      	cmp	r3, #0
 8005560:	d10e      	bne.n	8005580 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	685a      	ldr	r2, [r3, #4]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005570:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2201      	movs	r2, #1
 8005576:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f7ff ff3e 	bl	80053fc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005580:	bf00      	nop
 8005582:	3708      	adds	r7, #8
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}

08005588 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b086      	sub	sp, #24
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	2b04      	cmp	r3, #4
 80055a2:	d13a      	bne.n	800561a <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	f003 0301 	and.w	r3, r3, #1
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	d109      	bne.n	80055c2 <I2S_IRQHandler+0x3a>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055b8:	2b40      	cmp	r3, #64	@ 0x40
 80055ba:	d102      	bne.n	80055c2 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f7ff ffb4 	bl	800552a <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055c8:	2b40      	cmp	r3, #64	@ 0x40
 80055ca:	d126      	bne.n	800561a <I2S_IRQHandler+0x92>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	f003 0320 	and.w	r3, r3, #32
 80055d6:	2b20      	cmp	r3, #32
 80055d8:	d11f      	bne.n	800561a <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	685a      	ldr	r2, [r3, #4]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80055e8:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80055ea:	2300      	movs	r3, #0
 80055ec:	613b      	str	r3, [r7, #16]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	68db      	ldr	r3, [r3, #12]
 80055f4:	613b      	str	r3, [r7, #16]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	613b      	str	r3, [r7, #16]
 80055fe:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2201      	movs	r2, #1
 8005604:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800560c:	f043 0202 	orr.w	r2, r3, #2
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f7ff fefb 	bl	8005410 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005620:	b2db      	uxtb	r3, r3
 8005622:	2b03      	cmp	r3, #3
 8005624:	d136      	bne.n	8005694 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	f003 0302 	and.w	r3, r3, #2
 800562c:	2b02      	cmp	r3, #2
 800562e:	d109      	bne.n	8005644 <I2S_IRQHandler+0xbc>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800563a:	2b80      	cmp	r3, #128	@ 0x80
 800563c:	d102      	bne.n	8005644 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f7ff ff45 	bl	80054ce <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	f003 0308 	and.w	r3, r3, #8
 800564a:	2b08      	cmp	r3, #8
 800564c:	d122      	bne.n	8005694 <I2S_IRQHandler+0x10c>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	f003 0320 	and.w	r3, r3, #32
 8005658:	2b20      	cmp	r3, #32
 800565a:	d11b      	bne.n	8005694 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	685a      	ldr	r2, [r3, #4]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800566a:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800566c:	2300      	movs	r3, #0
 800566e:	60fb      	str	r3, [r7, #12]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	60fb      	str	r3, [r7, #12]
 8005678:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2201      	movs	r2, #1
 800567e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005686:	f043 0204 	orr.w	r2, r3, #4
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f7ff febe 	bl	8005410 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005694:	bf00      	nop
 8005696:	3718      	adds	r7, #24
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}

0800569c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b088      	sub	sp, #32
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a92      	ldr	r2, [pc, #584]	@ (80058fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d101      	bne.n	80056ba <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80056b6:	4b92      	ldr	r3, [pc, #584]	@ (8005900 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80056b8:	e001      	b.n	80056be <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80056ba:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a8b      	ldr	r2, [pc, #556]	@ (80058fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d101      	bne.n	80056d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80056d4:	4b8a      	ldr	r3, [pc, #552]	@ (8005900 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80056d6:	e001      	b.n	80056dc <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80056d8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80056e8:	d004      	beq.n	80056f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	f040 8099 	bne.w	8005826 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80056f4:	69fb      	ldr	r3, [r7, #28]
 80056f6:	f003 0302 	and.w	r3, r3, #2
 80056fa:	2b02      	cmp	r3, #2
 80056fc:	d107      	bne.n	800570e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005704:	2b00      	cmp	r3, #0
 8005706:	d002      	beq.n	800570e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f000 f925 	bl	8005958 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800570e:	69bb      	ldr	r3, [r7, #24]
 8005710:	f003 0301 	and.w	r3, r3, #1
 8005714:	2b01      	cmp	r3, #1
 8005716:	d107      	bne.n	8005728 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800571e:	2b00      	cmp	r3, #0
 8005720:	d002      	beq.n	8005728 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f000 f9c8 	bl	8005ab8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005728:	69bb      	ldr	r3, [r7, #24]
 800572a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800572e:	2b40      	cmp	r3, #64	@ 0x40
 8005730:	d13a      	bne.n	80057a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	f003 0320 	and.w	r3, r3, #32
 8005738:	2b00      	cmp	r3, #0
 800573a:	d035      	beq.n	80057a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a6e      	ldr	r2, [pc, #440]	@ (80058fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d101      	bne.n	800574a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8005746:	4b6e      	ldr	r3, [pc, #440]	@ (8005900 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005748:	e001      	b.n	800574e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800574a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800574e:	685a      	ldr	r2, [r3, #4]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4969      	ldr	r1, [pc, #420]	@ (80058fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005756:	428b      	cmp	r3, r1
 8005758:	d101      	bne.n	800575e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800575a:	4b69      	ldr	r3, [pc, #420]	@ (8005900 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800575c:	e001      	b.n	8005762 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800575e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005762:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005766:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	685a      	ldr	r2, [r3, #4]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005776:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005778:	2300      	movs	r3, #0
 800577a:	60fb      	str	r3, [r7, #12]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	68db      	ldr	r3, [r3, #12]
 8005782:	60fb      	str	r3, [r7, #12]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	60fb      	str	r3, [r7, #12]
 800578c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2201      	movs	r2, #1
 8005792:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800579a:	f043 0202 	orr.w	r2, r3, #2
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f7ff fe34 	bl	8005410 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80057a8:	69fb      	ldr	r3, [r7, #28]
 80057aa:	f003 0308 	and.w	r3, r3, #8
 80057ae:	2b08      	cmp	r3, #8
 80057b0:	f040 80c3 	bne.w	800593a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	f003 0320 	and.w	r3, r3, #32
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	f000 80bd 	beq.w	800593a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	685a      	ldr	r2, [r3, #4]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80057ce:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a49      	ldr	r2, [pc, #292]	@ (80058fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d101      	bne.n	80057de <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80057da:	4b49      	ldr	r3, [pc, #292]	@ (8005900 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80057dc:	e001      	b.n	80057e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80057de:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80057e2:	685a      	ldr	r2, [r3, #4]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4944      	ldr	r1, [pc, #272]	@ (80058fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80057ea:	428b      	cmp	r3, r1
 80057ec:	d101      	bne.n	80057f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80057ee:	4b44      	ldr	r3, [pc, #272]	@ (8005900 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80057f0:	e001      	b.n	80057f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80057f2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80057f6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80057fa:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80057fc:	2300      	movs	r3, #0
 80057fe:	60bb      	str	r3, [r7, #8]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	60bb      	str	r3, [r7, #8]
 8005808:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2201      	movs	r2, #1
 800580e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005816:	f043 0204 	orr.w	r2, r3, #4
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f7ff fdf6 	bl	8005410 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005824:	e089      	b.n	800593a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005826:	69bb      	ldr	r3, [r7, #24]
 8005828:	f003 0302 	and.w	r3, r3, #2
 800582c:	2b02      	cmp	r3, #2
 800582e:	d107      	bne.n	8005840 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005836:	2b00      	cmp	r3, #0
 8005838:	d002      	beq.n	8005840 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f000 f8be 	bl	80059bc <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005840:	69fb      	ldr	r3, [r7, #28]
 8005842:	f003 0301 	and.w	r3, r3, #1
 8005846:	2b01      	cmp	r3, #1
 8005848:	d107      	bne.n	800585a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005850:	2b00      	cmp	r3, #0
 8005852:	d002      	beq.n	800585a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f000 f8fd 	bl	8005a54 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800585a:	69fb      	ldr	r3, [r7, #28]
 800585c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005860:	2b40      	cmp	r3, #64	@ 0x40
 8005862:	d12f      	bne.n	80058c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	f003 0320 	and.w	r3, r3, #32
 800586a:	2b00      	cmp	r3, #0
 800586c:	d02a      	beq.n	80058c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	685a      	ldr	r2, [r3, #4]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800587c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a1e      	ldr	r2, [pc, #120]	@ (80058fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d101      	bne.n	800588c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005888:	4b1d      	ldr	r3, [pc, #116]	@ (8005900 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800588a:	e001      	b.n	8005890 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800588c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005890:	685a      	ldr	r2, [r3, #4]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4919      	ldr	r1, [pc, #100]	@ (80058fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005898:	428b      	cmp	r3, r1
 800589a:	d101      	bne.n	80058a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800589c:	4b18      	ldr	r3, [pc, #96]	@ (8005900 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800589e:	e001      	b.n	80058a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80058a0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80058a4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80058a8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2201      	movs	r2, #1
 80058ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058b6:	f043 0202 	orr.w	r2, r3, #2
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f7ff fda6 	bl	8005410 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80058c4:	69bb      	ldr	r3, [r7, #24]
 80058c6:	f003 0308 	and.w	r3, r3, #8
 80058ca:	2b08      	cmp	r3, #8
 80058cc:	d136      	bne.n	800593c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	f003 0320 	and.w	r3, r3, #32
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d031      	beq.n	800593c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a07      	ldr	r2, [pc, #28]	@ (80058fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d101      	bne.n	80058e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80058e2:	4b07      	ldr	r3, [pc, #28]	@ (8005900 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80058e4:	e001      	b.n	80058ea <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80058e6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80058ea:	685a      	ldr	r2, [r3, #4]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4902      	ldr	r1, [pc, #8]	@ (80058fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80058f2:	428b      	cmp	r3, r1
 80058f4:	d106      	bne.n	8005904 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80058f6:	4b02      	ldr	r3, [pc, #8]	@ (8005900 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80058f8:	e006      	b.n	8005908 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80058fa:	bf00      	nop
 80058fc:	40003800 	.word	0x40003800
 8005900:	40003400 	.word	0x40003400
 8005904:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005908:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800590c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	685a      	ldr	r2, [r3, #4]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800591c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2201      	movs	r2, #1
 8005922:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800592a:	f043 0204 	orr.w	r2, r3, #4
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f7ff fd6c 	bl	8005410 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005938:	e000      	b.n	800593c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800593a:	bf00      	nop
}
 800593c:	bf00      	nop
 800593e:	3720      	adds	r7, #32
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}

08005944 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005944:	b480      	push	{r7}
 8005946:	b083      	sub	sp, #12
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800594c:	bf00      	nop
 800594e:	370c      	adds	r7, #12
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr

08005958 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b082      	sub	sp, #8
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005964:	1c99      	adds	r1, r3, #2
 8005966:	687a      	ldr	r2, [r7, #4]
 8005968:	6251      	str	r1, [r2, #36]	@ 0x24
 800596a:	881a      	ldrh	r2, [r3, #0]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005976:	b29b      	uxth	r3, r3
 8005978:	3b01      	subs	r3, #1
 800597a:	b29a      	uxth	r2, r3
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005984:	b29b      	uxth	r3, r3
 8005986:	2b00      	cmp	r3, #0
 8005988:	d113      	bne.n	80059b2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	685a      	ldr	r2, [r3, #4]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005998:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800599e:	b29b      	uxth	r3, r3
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d106      	bne.n	80059b2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2201      	movs	r2, #1
 80059a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80059ac:	6878      	ldr	r0, [r7, #4]
 80059ae:	f7ff ffc9 	bl	8005944 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80059b2:	bf00      	nop
 80059b4:	3708      	adds	r7, #8
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}
	...

080059bc <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b082      	sub	sp, #8
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059c8:	1c99      	adds	r1, r3, #2
 80059ca:	687a      	ldr	r2, [r7, #4]
 80059cc:	6251      	str	r1, [r2, #36]	@ 0x24
 80059ce:	8819      	ldrh	r1, [r3, #0]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a1d      	ldr	r2, [pc, #116]	@ (8005a4c <I2SEx_TxISR_I2SExt+0x90>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d101      	bne.n	80059de <I2SEx_TxISR_I2SExt+0x22>
 80059da:	4b1d      	ldr	r3, [pc, #116]	@ (8005a50 <I2SEx_TxISR_I2SExt+0x94>)
 80059dc:	e001      	b.n	80059e2 <I2SEx_TxISR_I2SExt+0x26>
 80059de:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80059e2:	460a      	mov	r2, r1
 80059e4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	3b01      	subs	r3, #1
 80059ee:	b29a      	uxth	r2, r3
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d121      	bne.n	8005a42 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a12      	ldr	r2, [pc, #72]	@ (8005a4c <I2SEx_TxISR_I2SExt+0x90>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d101      	bne.n	8005a0c <I2SEx_TxISR_I2SExt+0x50>
 8005a08:	4b11      	ldr	r3, [pc, #68]	@ (8005a50 <I2SEx_TxISR_I2SExt+0x94>)
 8005a0a:	e001      	b.n	8005a10 <I2SEx_TxISR_I2SExt+0x54>
 8005a0c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005a10:	685a      	ldr	r2, [r3, #4]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	490d      	ldr	r1, [pc, #52]	@ (8005a4c <I2SEx_TxISR_I2SExt+0x90>)
 8005a18:	428b      	cmp	r3, r1
 8005a1a:	d101      	bne.n	8005a20 <I2SEx_TxISR_I2SExt+0x64>
 8005a1c:	4b0c      	ldr	r3, [pc, #48]	@ (8005a50 <I2SEx_TxISR_I2SExt+0x94>)
 8005a1e:	e001      	b.n	8005a24 <I2SEx_TxISR_I2SExt+0x68>
 8005a20:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005a24:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005a28:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d106      	bne.n	8005a42 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f7ff ff81 	bl	8005944 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005a42:	bf00      	nop
 8005a44:	3708      	adds	r7, #8
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
 8005a4a:	bf00      	nop
 8005a4c:	40003800 	.word	0x40003800
 8005a50:	40003400 	.word	0x40003400

08005a54 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b082      	sub	sp, #8
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	68d8      	ldr	r0, [r3, #12]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a66:	1c99      	adds	r1, r3, #2
 8005a68:	687a      	ldr	r2, [r7, #4]
 8005a6a:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8005a6c:	b282      	uxth	r2, r0
 8005a6e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005a74:	b29b      	uxth	r3, r3
 8005a76:	3b01      	subs	r3, #1
 8005a78:	b29a      	uxth	r2, r3
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d113      	bne.n	8005ab0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	685a      	ldr	r2, [r3, #4]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005a96:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a9c:	b29b      	uxth	r3, r3
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d106      	bne.n	8005ab0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f7ff ff4a 	bl	8005944 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005ab0:	bf00      	nop
 8005ab2:	3708      	adds	r7, #8
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}

08005ab8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b082      	sub	sp, #8
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a20      	ldr	r2, [pc, #128]	@ (8005b48 <I2SEx_RxISR_I2SExt+0x90>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d101      	bne.n	8005ace <I2SEx_RxISR_I2SExt+0x16>
 8005aca:	4b20      	ldr	r3, [pc, #128]	@ (8005b4c <I2SEx_RxISR_I2SExt+0x94>)
 8005acc:	e001      	b.n	8005ad2 <I2SEx_RxISR_I2SExt+0x1a>
 8005ace:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005ad2:	68d8      	ldr	r0, [r3, #12]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ad8:	1c99      	adds	r1, r3, #2
 8005ada:	687a      	ldr	r2, [r7, #4]
 8005adc:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8005ade:	b282      	uxth	r2, r0
 8005ae0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005ae6:	b29b      	uxth	r3, r3
 8005ae8:	3b01      	subs	r3, #1
 8005aea:	b29a      	uxth	r2, r3
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d121      	bne.n	8005b3e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a12      	ldr	r2, [pc, #72]	@ (8005b48 <I2SEx_RxISR_I2SExt+0x90>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d101      	bne.n	8005b08 <I2SEx_RxISR_I2SExt+0x50>
 8005b04:	4b11      	ldr	r3, [pc, #68]	@ (8005b4c <I2SEx_RxISR_I2SExt+0x94>)
 8005b06:	e001      	b.n	8005b0c <I2SEx_RxISR_I2SExt+0x54>
 8005b08:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005b0c:	685a      	ldr	r2, [r3, #4]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	490d      	ldr	r1, [pc, #52]	@ (8005b48 <I2SEx_RxISR_I2SExt+0x90>)
 8005b14:	428b      	cmp	r3, r1
 8005b16:	d101      	bne.n	8005b1c <I2SEx_RxISR_I2SExt+0x64>
 8005b18:	4b0c      	ldr	r3, [pc, #48]	@ (8005b4c <I2SEx_RxISR_I2SExt+0x94>)
 8005b1a:	e001      	b.n	8005b20 <I2SEx_RxISR_I2SExt+0x68>
 8005b1c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005b20:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005b24:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d106      	bne.n	8005b3e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2201      	movs	r2, #1
 8005b34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f7ff ff03 	bl	8005944 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005b3e:	bf00      	nop
 8005b40:	3708      	adds	r7, #8
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}
 8005b46:	bf00      	nop
 8005b48:	40003800 	.word	0x40003800
 8005b4c:	40003400 	.word	0x40003400

08005b50 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b086      	sub	sp, #24
 8005b54:	af02      	add	r7, sp, #8
 8005b56:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d101      	bne.n	8005b62 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	e101      	b.n	8005d66 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8005b6e:	b2db      	uxtb	r3, r3
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d106      	bne.n	8005b82 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2200      	movs	r2, #0
 8005b78:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f006 fee7 	bl	800c950 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2203      	movs	r2, #3
 8005b86:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005b90:	d102      	bne.n	8005b98 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f003 fb34 	bl	800920a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6818      	ldr	r0, [r3, #0]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	7c1a      	ldrb	r2, [r3, #16]
 8005baa:	f88d 2000 	strb.w	r2, [sp]
 8005bae:	3304      	adds	r3, #4
 8005bb0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005bb2:	f003 fa13 	bl	8008fdc <USB_CoreInit>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d005      	beq.n	8005bc8 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2202      	movs	r2, #2
 8005bc0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	e0ce      	b.n	8005d66 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	2100      	movs	r1, #0
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f003 fb2c 	bl	800922c <USB_SetCurrentMode>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d005      	beq.n	8005be6 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2202      	movs	r2, #2
 8005bde:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	e0bf      	b.n	8005d66 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005be6:	2300      	movs	r3, #0
 8005be8:	73fb      	strb	r3, [r7, #15]
 8005bea:	e04a      	b.n	8005c82 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005bec:	7bfa      	ldrb	r2, [r7, #15]
 8005bee:	6879      	ldr	r1, [r7, #4]
 8005bf0:	4613      	mov	r3, r2
 8005bf2:	00db      	lsls	r3, r3, #3
 8005bf4:	4413      	add	r3, r2
 8005bf6:	009b      	lsls	r3, r3, #2
 8005bf8:	440b      	add	r3, r1
 8005bfa:	3315      	adds	r3, #21
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005c00:	7bfa      	ldrb	r2, [r7, #15]
 8005c02:	6879      	ldr	r1, [r7, #4]
 8005c04:	4613      	mov	r3, r2
 8005c06:	00db      	lsls	r3, r3, #3
 8005c08:	4413      	add	r3, r2
 8005c0a:	009b      	lsls	r3, r3, #2
 8005c0c:	440b      	add	r3, r1
 8005c0e:	3314      	adds	r3, #20
 8005c10:	7bfa      	ldrb	r2, [r7, #15]
 8005c12:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005c14:	7bfa      	ldrb	r2, [r7, #15]
 8005c16:	7bfb      	ldrb	r3, [r7, #15]
 8005c18:	b298      	uxth	r0, r3
 8005c1a:	6879      	ldr	r1, [r7, #4]
 8005c1c:	4613      	mov	r3, r2
 8005c1e:	00db      	lsls	r3, r3, #3
 8005c20:	4413      	add	r3, r2
 8005c22:	009b      	lsls	r3, r3, #2
 8005c24:	440b      	add	r3, r1
 8005c26:	332e      	adds	r3, #46	@ 0x2e
 8005c28:	4602      	mov	r2, r0
 8005c2a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005c2c:	7bfa      	ldrb	r2, [r7, #15]
 8005c2e:	6879      	ldr	r1, [r7, #4]
 8005c30:	4613      	mov	r3, r2
 8005c32:	00db      	lsls	r3, r3, #3
 8005c34:	4413      	add	r3, r2
 8005c36:	009b      	lsls	r3, r3, #2
 8005c38:	440b      	add	r3, r1
 8005c3a:	3318      	adds	r3, #24
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005c40:	7bfa      	ldrb	r2, [r7, #15]
 8005c42:	6879      	ldr	r1, [r7, #4]
 8005c44:	4613      	mov	r3, r2
 8005c46:	00db      	lsls	r3, r3, #3
 8005c48:	4413      	add	r3, r2
 8005c4a:	009b      	lsls	r3, r3, #2
 8005c4c:	440b      	add	r3, r1
 8005c4e:	331c      	adds	r3, #28
 8005c50:	2200      	movs	r2, #0
 8005c52:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005c54:	7bfa      	ldrb	r2, [r7, #15]
 8005c56:	6879      	ldr	r1, [r7, #4]
 8005c58:	4613      	mov	r3, r2
 8005c5a:	00db      	lsls	r3, r3, #3
 8005c5c:	4413      	add	r3, r2
 8005c5e:	009b      	lsls	r3, r3, #2
 8005c60:	440b      	add	r3, r1
 8005c62:	3320      	adds	r3, #32
 8005c64:	2200      	movs	r2, #0
 8005c66:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005c68:	7bfa      	ldrb	r2, [r7, #15]
 8005c6a:	6879      	ldr	r1, [r7, #4]
 8005c6c:	4613      	mov	r3, r2
 8005c6e:	00db      	lsls	r3, r3, #3
 8005c70:	4413      	add	r3, r2
 8005c72:	009b      	lsls	r3, r3, #2
 8005c74:	440b      	add	r3, r1
 8005c76:	3324      	adds	r3, #36	@ 0x24
 8005c78:	2200      	movs	r2, #0
 8005c7a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c7c:	7bfb      	ldrb	r3, [r7, #15]
 8005c7e:	3301      	adds	r3, #1
 8005c80:	73fb      	strb	r3, [r7, #15]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	791b      	ldrb	r3, [r3, #4]
 8005c86:	7bfa      	ldrb	r2, [r7, #15]
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	d3af      	bcc.n	8005bec <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	73fb      	strb	r3, [r7, #15]
 8005c90:	e044      	b.n	8005d1c <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005c92:	7bfa      	ldrb	r2, [r7, #15]
 8005c94:	6879      	ldr	r1, [r7, #4]
 8005c96:	4613      	mov	r3, r2
 8005c98:	00db      	lsls	r3, r3, #3
 8005c9a:	4413      	add	r3, r2
 8005c9c:	009b      	lsls	r3, r3, #2
 8005c9e:	440b      	add	r3, r1
 8005ca0:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005ca8:	7bfa      	ldrb	r2, [r7, #15]
 8005caa:	6879      	ldr	r1, [r7, #4]
 8005cac:	4613      	mov	r3, r2
 8005cae:	00db      	lsls	r3, r3, #3
 8005cb0:	4413      	add	r3, r2
 8005cb2:	009b      	lsls	r3, r3, #2
 8005cb4:	440b      	add	r3, r1
 8005cb6:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8005cba:	7bfa      	ldrb	r2, [r7, #15]
 8005cbc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005cbe:	7bfa      	ldrb	r2, [r7, #15]
 8005cc0:	6879      	ldr	r1, [r7, #4]
 8005cc2:	4613      	mov	r3, r2
 8005cc4:	00db      	lsls	r3, r3, #3
 8005cc6:	4413      	add	r3, r2
 8005cc8:	009b      	lsls	r3, r3, #2
 8005cca:	440b      	add	r3, r1
 8005ccc:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005cd4:	7bfa      	ldrb	r2, [r7, #15]
 8005cd6:	6879      	ldr	r1, [r7, #4]
 8005cd8:	4613      	mov	r3, r2
 8005cda:	00db      	lsls	r3, r3, #3
 8005cdc:	4413      	add	r3, r2
 8005cde:	009b      	lsls	r3, r3, #2
 8005ce0:	440b      	add	r3, r1
 8005ce2:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005cea:	7bfa      	ldrb	r2, [r7, #15]
 8005cec:	6879      	ldr	r1, [r7, #4]
 8005cee:	4613      	mov	r3, r2
 8005cf0:	00db      	lsls	r3, r3, #3
 8005cf2:	4413      	add	r3, r2
 8005cf4:	009b      	lsls	r3, r3, #2
 8005cf6:	440b      	add	r3, r1
 8005cf8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005d00:	7bfa      	ldrb	r2, [r7, #15]
 8005d02:	6879      	ldr	r1, [r7, #4]
 8005d04:	4613      	mov	r3, r2
 8005d06:	00db      	lsls	r3, r3, #3
 8005d08:	4413      	add	r3, r2
 8005d0a:	009b      	lsls	r3, r3, #2
 8005d0c:	440b      	add	r3, r1
 8005d0e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005d12:	2200      	movs	r2, #0
 8005d14:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005d16:	7bfb      	ldrb	r3, [r7, #15]
 8005d18:	3301      	adds	r3, #1
 8005d1a:	73fb      	strb	r3, [r7, #15]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	791b      	ldrb	r3, [r3, #4]
 8005d20:	7bfa      	ldrb	r2, [r7, #15]
 8005d22:	429a      	cmp	r2, r3
 8005d24:	d3b5      	bcc.n	8005c92 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6818      	ldr	r0, [r3, #0]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	7c1a      	ldrb	r2, [r3, #16]
 8005d2e:	f88d 2000 	strb.w	r2, [sp]
 8005d32:	3304      	adds	r3, #4
 8005d34:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005d36:	f003 fac5 	bl	80092c4 <USB_DevInit>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d005      	beq.n	8005d4c <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2202      	movs	r2, #2
 8005d44:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	e00c      	b.n	8005d66 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2201      	movs	r2, #1
 8005d56:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f004 fb0f 	bl	800a382 <USB_DevDisconnect>

  return HAL_OK;
 8005d64:	2300      	movs	r3, #0
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3710      	adds	r7, #16
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}

08005d6e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005d6e:	b580      	push	{r7, lr}
 8005d70:	b084      	sub	sp, #16
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d101      	bne.n	8005d8a <HAL_PCD_Start+0x1c>
 8005d86:	2302      	movs	r3, #2
 8005d88:	e022      	b.n	8005dd0 <HAL_PCD_Start+0x62>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	68db      	ldr	r3, [r3, #12]
 8005d96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d009      	beq.n	8005db2 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d105      	bne.n	8005db2 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005daa:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4618      	mov	r0, r3
 8005db8:	f003 fa16 	bl	80091e8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	f004 fabd 	bl	800a340 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005dce:	2300      	movs	r3, #0
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3710      	adds	r7, #16
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}

08005dd8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005dd8:	b590      	push	{r4, r7, lr}
 8005dda:	b08d      	sub	sp, #52	@ 0x34
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005de6:	6a3b      	ldr	r3, [r7, #32]
 8005de8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4618      	mov	r0, r3
 8005df0:	f004 fb7b 	bl	800a4ea <USB_GetMode>
 8005df4:	4603      	mov	r3, r0
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	f040 848c 	bne.w	8006714 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4618      	mov	r0, r3
 8005e02:	f004 fadf 	bl	800a3c4 <USB_ReadInterrupts>
 8005e06:	4603      	mov	r3, r0
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	f000 8482 	beq.w	8006712 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005e0e:	69fb      	ldr	r3, [r7, #28]
 8005e10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	0a1b      	lsrs	r3, r3, #8
 8005e18:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4618      	mov	r0, r3
 8005e28:	f004 facc 	bl	800a3c4 <USB_ReadInterrupts>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	f003 0302 	and.w	r3, r3, #2
 8005e32:	2b02      	cmp	r3, #2
 8005e34:	d107      	bne.n	8005e46 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	695a      	ldr	r2, [r3, #20]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f002 0202 	and.w	r2, r2, #2
 8005e44:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f004 faba 	bl	800a3c4 <USB_ReadInterrupts>
 8005e50:	4603      	mov	r3, r0
 8005e52:	f003 0310 	and.w	r3, r3, #16
 8005e56:	2b10      	cmp	r3, #16
 8005e58:	d161      	bne.n	8005f1e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	699a      	ldr	r2, [r3, #24]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f022 0210 	bic.w	r2, r2, #16
 8005e68:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005e6a:	6a3b      	ldr	r3, [r7, #32]
 8005e6c:	6a1b      	ldr	r3, [r3, #32]
 8005e6e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005e70:	69bb      	ldr	r3, [r7, #24]
 8005e72:	f003 020f 	and.w	r2, r3, #15
 8005e76:	4613      	mov	r3, r2
 8005e78:	00db      	lsls	r3, r3, #3
 8005e7a:	4413      	add	r3, r2
 8005e7c:	009b      	lsls	r3, r3, #2
 8005e7e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005e82:	687a      	ldr	r2, [r7, #4]
 8005e84:	4413      	add	r3, r2
 8005e86:	3304      	adds	r3, #4
 8005e88:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005e8a:	69bb      	ldr	r3, [r7, #24]
 8005e8c:	0c5b      	lsrs	r3, r3, #17
 8005e8e:	f003 030f 	and.w	r3, r3, #15
 8005e92:	2b02      	cmp	r3, #2
 8005e94:	d124      	bne.n	8005ee0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005e96:	69ba      	ldr	r2, [r7, #24]
 8005e98:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8005e9c:	4013      	ands	r3, r2
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d035      	beq.n	8005f0e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005ea6:	69bb      	ldr	r3, [r7, #24]
 8005ea8:	091b      	lsrs	r3, r3, #4
 8005eaa:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005eac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	461a      	mov	r2, r3
 8005eb4:	6a38      	ldr	r0, [r7, #32]
 8005eb6:	f004 f8f1 	bl	800a09c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	68da      	ldr	r2, [r3, #12]
 8005ebe:	69bb      	ldr	r3, [r7, #24]
 8005ec0:	091b      	lsrs	r3, r3, #4
 8005ec2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ec6:	441a      	add	r2, r3
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	695a      	ldr	r2, [r3, #20]
 8005ed0:	69bb      	ldr	r3, [r7, #24]
 8005ed2:	091b      	lsrs	r3, r3, #4
 8005ed4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ed8:	441a      	add	r2, r3
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	615a      	str	r2, [r3, #20]
 8005ede:	e016      	b.n	8005f0e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005ee0:	69bb      	ldr	r3, [r7, #24]
 8005ee2:	0c5b      	lsrs	r3, r3, #17
 8005ee4:	f003 030f 	and.w	r3, r3, #15
 8005ee8:	2b06      	cmp	r3, #6
 8005eea:	d110      	bne.n	8005f0e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005ef2:	2208      	movs	r2, #8
 8005ef4:	4619      	mov	r1, r3
 8005ef6:	6a38      	ldr	r0, [r7, #32]
 8005ef8:	f004 f8d0 	bl	800a09c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	695a      	ldr	r2, [r3, #20]
 8005f00:	69bb      	ldr	r3, [r7, #24]
 8005f02:	091b      	lsrs	r3, r3, #4
 8005f04:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005f08:	441a      	add	r2, r3
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	699a      	ldr	r2, [r3, #24]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f042 0210 	orr.w	r2, r2, #16
 8005f1c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4618      	mov	r0, r3
 8005f24:	f004 fa4e 	bl	800a3c4 <USB_ReadInterrupts>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005f2e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005f32:	f040 80a7 	bne.w	8006084 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005f36:	2300      	movs	r3, #0
 8005f38:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f004 fa53 	bl	800a3ea <USB_ReadDevAllOutEpInterrupt>
 8005f44:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8005f46:	e099      	b.n	800607c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005f48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f4a:	f003 0301 	and.w	r3, r3, #1
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	f000 808e 	beq.w	8006070 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f5a:	b2d2      	uxtb	r2, r2
 8005f5c:	4611      	mov	r1, r2
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f004 fa77 	bl	800a452 <USB_ReadDevOutEPInterrupt>
 8005f64:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	f003 0301 	and.w	r3, r3, #1
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d00c      	beq.n	8005f8a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f72:	015a      	lsls	r2, r3, #5
 8005f74:	69fb      	ldr	r3, [r7, #28]
 8005f76:	4413      	add	r3, r2
 8005f78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f7c:	461a      	mov	r2, r3
 8005f7e:	2301      	movs	r3, #1
 8005f80:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005f82:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f000 fea3 	bl	8006cd0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	f003 0308 	and.w	r3, r3, #8
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d00c      	beq.n	8005fae <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f96:	015a      	lsls	r2, r3, #5
 8005f98:	69fb      	ldr	r3, [r7, #28]
 8005f9a:	4413      	add	r3, r2
 8005f9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	2308      	movs	r3, #8
 8005fa4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005fa6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f000 ff79 	bl	8006ea0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	f003 0310 	and.w	r3, r3, #16
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d008      	beq.n	8005fca <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fba:	015a      	lsls	r2, r3, #5
 8005fbc:	69fb      	ldr	r3, [r7, #28]
 8005fbe:	4413      	add	r3, r2
 8005fc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fc4:	461a      	mov	r2, r3
 8005fc6:	2310      	movs	r3, #16
 8005fc8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	f003 0302 	and.w	r3, r3, #2
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d030      	beq.n	8006036 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005fd4:	6a3b      	ldr	r3, [r7, #32]
 8005fd6:	695b      	ldr	r3, [r3, #20]
 8005fd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fdc:	2b80      	cmp	r3, #128	@ 0x80
 8005fde:	d109      	bne.n	8005ff4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005fe0:	69fb      	ldr	r3, [r7, #28]
 8005fe2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	69fa      	ldr	r2, [r7, #28]
 8005fea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005fee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005ff2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005ff4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ff6:	4613      	mov	r3, r2
 8005ff8:	00db      	lsls	r3, r3, #3
 8005ffa:	4413      	add	r3, r2
 8005ffc:	009b      	lsls	r3, r3, #2
 8005ffe:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006002:	687a      	ldr	r2, [r7, #4]
 8006004:	4413      	add	r3, r2
 8006006:	3304      	adds	r3, #4
 8006008:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	78db      	ldrb	r3, [r3, #3]
 800600e:	2b01      	cmp	r3, #1
 8006010:	d108      	bne.n	8006024 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	2200      	movs	r2, #0
 8006016:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800601a:	b2db      	uxtb	r3, r3
 800601c:	4619      	mov	r1, r3
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f006 fdaa 	bl	800cb78 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8006024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006026:	015a      	lsls	r2, r3, #5
 8006028:	69fb      	ldr	r3, [r7, #28]
 800602a:	4413      	add	r3, r2
 800602c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006030:	461a      	mov	r2, r3
 8006032:	2302      	movs	r3, #2
 8006034:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	f003 0320 	and.w	r3, r3, #32
 800603c:	2b00      	cmp	r3, #0
 800603e:	d008      	beq.n	8006052 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006042:	015a      	lsls	r2, r3, #5
 8006044:	69fb      	ldr	r3, [r7, #28]
 8006046:	4413      	add	r3, r2
 8006048:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800604c:	461a      	mov	r2, r3
 800604e:	2320      	movs	r3, #32
 8006050:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006058:	2b00      	cmp	r3, #0
 800605a:	d009      	beq.n	8006070 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800605c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800605e:	015a      	lsls	r2, r3, #5
 8006060:	69fb      	ldr	r3, [r7, #28]
 8006062:	4413      	add	r3, r2
 8006064:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006068:	461a      	mov	r2, r3
 800606a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800606e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8006070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006072:	3301      	adds	r3, #1
 8006074:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8006076:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006078:	085b      	lsrs	r3, r3, #1
 800607a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800607c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800607e:	2b00      	cmp	r3, #0
 8006080:	f47f af62 	bne.w	8005f48 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4618      	mov	r0, r3
 800608a:	f004 f99b 	bl	800a3c4 <USB_ReadInterrupts>
 800608e:	4603      	mov	r3, r0
 8006090:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006094:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006098:	f040 80db 	bne.w	8006252 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4618      	mov	r0, r3
 80060a2:	f004 f9bc 	bl	800a41e <USB_ReadDevAllInEpInterrupt>
 80060a6:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80060a8:	2300      	movs	r3, #0
 80060aa:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80060ac:	e0cd      	b.n	800624a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80060ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060b0:	f003 0301 	and.w	r3, r3, #1
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	f000 80c2 	beq.w	800623e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060c0:	b2d2      	uxtb	r2, r2
 80060c2:	4611      	mov	r1, r2
 80060c4:	4618      	mov	r0, r3
 80060c6:	f004 f9e2 	bl	800a48e <USB_ReadDevInEPInterrupt>
 80060ca:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	f003 0301 	and.w	r3, r3, #1
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d057      	beq.n	8006186 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80060d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060d8:	f003 030f 	and.w	r3, r3, #15
 80060dc:	2201      	movs	r2, #1
 80060de:	fa02 f303 	lsl.w	r3, r2, r3
 80060e2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80060e4:	69fb      	ldr	r3, [r7, #28]
 80060e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	43db      	mvns	r3, r3
 80060f0:	69f9      	ldr	r1, [r7, #28]
 80060f2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80060f6:	4013      	ands	r3, r2
 80060f8:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80060fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060fc:	015a      	lsls	r2, r3, #5
 80060fe:	69fb      	ldr	r3, [r7, #28]
 8006100:	4413      	add	r3, r2
 8006102:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006106:	461a      	mov	r2, r3
 8006108:	2301      	movs	r3, #1
 800610a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	799b      	ldrb	r3, [r3, #6]
 8006110:	2b01      	cmp	r3, #1
 8006112:	d132      	bne.n	800617a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006114:	6879      	ldr	r1, [r7, #4]
 8006116:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006118:	4613      	mov	r3, r2
 800611a:	00db      	lsls	r3, r3, #3
 800611c:	4413      	add	r3, r2
 800611e:	009b      	lsls	r3, r3, #2
 8006120:	440b      	add	r3, r1
 8006122:	3320      	adds	r3, #32
 8006124:	6819      	ldr	r1, [r3, #0]
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800612a:	4613      	mov	r3, r2
 800612c:	00db      	lsls	r3, r3, #3
 800612e:	4413      	add	r3, r2
 8006130:	009b      	lsls	r3, r3, #2
 8006132:	4403      	add	r3, r0
 8006134:	331c      	adds	r3, #28
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4419      	add	r1, r3
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800613e:	4613      	mov	r3, r2
 8006140:	00db      	lsls	r3, r3, #3
 8006142:	4413      	add	r3, r2
 8006144:	009b      	lsls	r3, r3, #2
 8006146:	4403      	add	r3, r0
 8006148:	3320      	adds	r3, #32
 800614a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800614c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800614e:	2b00      	cmp	r3, #0
 8006150:	d113      	bne.n	800617a <HAL_PCD_IRQHandler+0x3a2>
 8006152:	6879      	ldr	r1, [r7, #4]
 8006154:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006156:	4613      	mov	r3, r2
 8006158:	00db      	lsls	r3, r3, #3
 800615a:	4413      	add	r3, r2
 800615c:	009b      	lsls	r3, r3, #2
 800615e:	440b      	add	r3, r1
 8006160:	3324      	adds	r3, #36	@ 0x24
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d108      	bne.n	800617a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6818      	ldr	r0, [r3, #0]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006172:	461a      	mov	r2, r3
 8006174:	2101      	movs	r1, #1
 8006176:	f004 f9e9 	bl	800a54c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800617a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800617c:	b2db      	uxtb	r3, r3
 800617e:	4619      	mov	r1, r3
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f006 fc74 	bl	800ca6e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	f003 0308 	and.w	r3, r3, #8
 800618c:	2b00      	cmp	r3, #0
 800618e:	d008      	beq.n	80061a2 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006192:	015a      	lsls	r2, r3, #5
 8006194:	69fb      	ldr	r3, [r7, #28]
 8006196:	4413      	add	r3, r2
 8006198:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800619c:	461a      	mov	r2, r3
 800619e:	2308      	movs	r3, #8
 80061a0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	f003 0310 	and.w	r3, r3, #16
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d008      	beq.n	80061be <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80061ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ae:	015a      	lsls	r2, r3, #5
 80061b0:	69fb      	ldr	r3, [r7, #28]
 80061b2:	4413      	add	r3, r2
 80061b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061b8:	461a      	mov	r2, r3
 80061ba:	2310      	movs	r3, #16
 80061bc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d008      	beq.n	80061da <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80061c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ca:	015a      	lsls	r2, r3, #5
 80061cc:	69fb      	ldr	r3, [r7, #28]
 80061ce:	4413      	add	r3, r2
 80061d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061d4:	461a      	mov	r2, r3
 80061d6:	2340      	movs	r3, #64	@ 0x40
 80061d8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	f003 0302 	and.w	r3, r3, #2
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d023      	beq.n	800622c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80061e4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80061e6:	6a38      	ldr	r0, [r7, #32]
 80061e8:	f003 f9d0 	bl	800958c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80061ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061ee:	4613      	mov	r3, r2
 80061f0:	00db      	lsls	r3, r3, #3
 80061f2:	4413      	add	r3, r2
 80061f4:	009b      	lsls	r3, r3, #2
 80061f6:	3310      	adds	r3, #16
 80061f8:	687a      	ldr	r2, [r7, #4]
 80061fa:	4413      	add	r3, r2
 80061fc:	3304      	adds	r3, #4
 80061fe:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	78db      	ldrb	r3, [r3, #3]
 8006204:	2b01      	cmp	r3, #1
 8006206:	d108      	bne.n	800621a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	2200      	movs	r2, #0
 800620c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800620e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006210:	b2db      	uxtb	r3, r3
 8006212:	4619      	mov	r1, r3
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f006 fcc1 	bl	800cb9c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800621a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800621c:	015a      	lsls	r2, r3, #5
 800621e:	69fb      	ldr	r3, [r7, #28]
 8006220:	4413      	add	r3, r2
 8006222:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006226:	461a      	mov	r2, r3
 8006228:	2302      	movs	r3, #2
 800622a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006232:	2b00      	cmp	r3, #0
 8006234:	d003      	beq.n	800623e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006236:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f000 fcbd 	bl	8006bb8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800623e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006240:	3301      	adds	r3, #1
 8006242:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8006244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006246:	085b      	lsrs	r3, r3, #1
 8006248:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800624a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800624c:	2b00      	cmp	r3, #0
 800624e:	f47f af2e 	bne.w	80060ae <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4618      	mov	r0, r3
 8006258:	f004 f8b4 	bl	800a3c4 <USB_ReadInterrupts>
 800625c:	4603      	mov	r3, r0
 800625e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006262:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006266:	d122      	bne.n	80062ae <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006268:	69fb      	ldr	r3, [r7, #28]
 800626a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	69fa      	ldr	r2, [r7, #28]
 8006272:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006276:	f023 0301 	bic.w	r3, r3, #1
 800627a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8006282:	2b01      	cmp	r3, #1
 8006284:	d108      	bne.n	8006298 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2200      	movs	r2, #0
 800628a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800628e:	2100      	movs	r1, #0
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f000 fea3 	bl	8006fdc <HAL_PCDEx_LPM_Callback>
 8006296:	e002      	b.n	800629e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f006 fc5f 	bl	800cb5c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	695a      	ldr	r2, [r3, #20]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80062ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4618      	mov	r0, r3
 80062b4:	f004 f886 	bl	800a3c4 <USB_ReadInterrupts>
 80062b8:	4603      	mov	r3, r0
 80062ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80062be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80062c2:	d112      	bne.n	80062ea <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80062c4:	69fb      	ldr	r3, [r7, #28]
 80062c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	f003 0301 	and.w	r3, r3, #1
 80062d0:	2b01      	cmp	r3, #1
 80062d2:	d102      	bne.n	80062da <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f006 fc1b 	bl	800cb10 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	695a      	ldr	r2, [r3, #20]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80062e8:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4618      	mov	r0, r3
 80062f0:	f004 f868 	bl	800a3c4 <USB_ReadInterrupts>
 80062f4:	4603      	mov	r3, r0
 80062f6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80062fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062fe:	f040 80b7 	bne.w	8006470 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006302:	69fb      	ldr	r3, [r7, #28]
 8006304:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	69fa      	ldr	r2, [r7, #28]
 800630c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006310:	f023 0301 	bic.w	r3, r3, #1
 8006314:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	2110      	movs	r1, #16
 800631c:	4618      	mov	r0, r3
 800631e:	f003 f935 	bl	800958c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006322:	2300      	movs	r3, #0
 8006324:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006326:	e046      	b.n	80063b6 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006328:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800632a:	015a      	lsls	r2, r3, #5
 800632c:	69fb      	ldr	r3, [r7, #28]
 800632e:	4413      	add	r3, r2
 8006330:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006334:	461a      	mov	r2, r3
 8006336:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800633a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800633c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800633e:	015a      	lsls	r2, r3, #5
 8006340:	69fb      	ldr	r3, [r7, #28]
 8006342:	4413      	add	r3, r2
 8006344:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800634c:	0151      	lsls	r1, r2, #5
 800634e:	69fa      	ldr	r2, [r7, #28]
 8006350:	440a      	add	r2, r1
 8006352:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006356:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800635a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800635c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800635e:	015a      	lsls	r2, r3, #5
 8006360:	69fb      	ldr	r3, [r7, #28]
 8006362:	4413      	add	r3, r2
 8006364:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006368:	461a      	mov	r2, r3
 800636a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800636e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006370:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006372:	015a      	lsls	r2, r3, #5
 8006374:	69fb      	ldr	r3, [r7, #28]
 8006376:	4413      	add	r3, r2
 8006378:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006380:	0151      	lsls	r1, r2, #5
 8006382:	69fa      	ldr	r2, [r7, #28]
 8006384:	440a      	add	r2, r1
 8006386:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800638a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800638e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006392:	015a      	lsls	r2, r3, #5
 8006394:	69fb      	ldr	r3, [r7, #28]
 8006396:	4413      	add	r3, r2
 8006398:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80063a0:	0151      	lsls	r1, r2, #5
 80063a2:	69fa      	ldr	r2, [r7, #28]
 80063a4:	440a      	add	r2, r1
 80063a6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80063aa:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80063ae:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80063b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063b2:	3301      	adds	r3, #1
 80063b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	791b      	ldrb	r3, [r3, #4]
 80063ba:	461a      	mov	r2, r3
 80063bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063be:	4293      	cmp	r3, r2
 80063c0:	d3b2      	bcc.n	8006328 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80063c2:	69fb      	ldr	r3, [r7, #28]
 80063c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063c8:	69db      	ldr	r3, [r3, #28]
 80063ca:	69fa      	ldr	r2, [r7, #28]
 80063cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80063d0:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80063d4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	7bdb      	ldrb	r3, [r3, #15]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d016      	beq.n	800640c <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80063de:	69fb      	ldr	r3, [r7, #28]
 80063e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80063e8:	69fa      	ldr	r2, [r7, #28]
 80063ea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80063ee:	f043 030b 	orr.w	r3, r3, #11
 80063f2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80063f6:	69fb      	ldr	r3, [r7, #28]
 80063f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063fe:	69fa      	ldr	r2, [r7, #28]
 8006400:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006404:	f043 030b 	orr.w	r3, r3, #11
 8006408:	6453      	str	r3, [r2, #68]	@ 0x44
 800640a:	e015      	b.n	8006438 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800640c:	69fb      	ldr	r3, [r7, #28]
 800640e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006412:	695b      	ldr	r3, [r3, #20]
 8006414:	69fa      	ldr	r2, [r7, #28]
 8006416:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800641a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800641e:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8006422:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006424:	69fb      	ldr	r3, [r7, #28]
 8006426:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800642a:	691b      	ldr	r3, [r3, #16]
 800642c:	69fa      	ldr	r2, [r7, #28]
 800642e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006432:	f043 030b 	orr.w	r3, r3, #11
 8006436:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006438:	69fb      	ldr	r3, [r7, #28]
 800643a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	69fa      	ldr	r2, [r7, #28]
 8006442:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006446:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800644a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6818      	ldr	r0, [r3, #0]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800645a:	461a      	mov	r2, r3
 800645c:	f004 f876 	bl	800a54c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	695a      	ldr	r2, [r3, #20]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800646e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4618      	mov	r0, r3
 8006476:	f003 ffa5 	bl	800a3c4 <USB_ReadInterrupts>
 800647a:	4603      	mov	r3, r0
 800647c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006480:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006484:	d123      	bne.n	80064ce <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4618      	mov	r0, r3
 800648c:	f004 f83b 	bl	800a506 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4618      	mov	r0, r3
 8006496:	f003 f8f2 	bl	800967e <USB_GetDevSpeed>
 800649a:	4603      	mov	r3, r0
 800649c:	461a      	mov	r2, r3
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681c      	ldr	r4, [r3, #0]
 80064a6:	f001 fa09 	bl	80078bc <HAL_RCC_GetHCLKFreq>
 80064aa:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80064b0:	461a      	mov	r2, r3
 80064b2:	4620      	mov	r0, r4
 80064b4:	f002 fdf6 	bl	80090a4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f006 fb00 	bl	800cabe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	695a      	ldr	r2, [r3, #20]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80064cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4618      	mov	r0, r3
 80064d4:	f003 ff76 	bl	800a3c4 <USB_ReadInterrupts>
 80064d8:	4603      	mov	r3, r0
 80064da:	f003 0308 	and.w	r3, r3, #8
 80064de:	2b08      	cmp	r3, #8
 80064e0:	d10a      	bne.n	80064f8 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f006 fadd 	bl	800caa2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	695a      	ldr	r2, [r3, #20]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f002 0208 	and.w	r2, r2, #8
 80064f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4618      	mov	r0, r3
 80064fe:	f003 ff61 	bl	800a3c4 <USB_ReadInterrupts>
 8006502:	4603      	mov	r3, r0
 8006504:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006508:	2b80      	cmp	r3, #128	@ 0x80
 800650a:	d123      	bne.n	8006554 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800650c:	6a3b      	ldr	r3, [r7, #32]
 800650e:	699b      	ldr	r3, [r3, #24]
 8006510:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006514:	6a3b      	ldr	r3, [r7, #32]
 8006516:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006518:	2301      	movs	r3, #1
 800651a:	627b      	str	r3, [r7, #36]	@ 0x24
 800651c:	e014      	b.n	8006548 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800651e:	6879      	ldr	r1, [r7, #4]
 8006520:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006522:	4613      	mov	r3, r2
 8006524:	00db      	lsls	r3, r3, #3
 8006526:	4413      	add	r3, r2
 8006528:	009b      	lsls	r3, r3, #2
 800652a:	440b      	add	r3, r1
 800652c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8006530:	781b      	ldrb	r3, [r3, #0]
 8006532:	2b01      	cmp	r3, #1
 8006534:	d105      	bne.n	8006542 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8006536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006538:	b2db      	uxtb	r3, r3
 800653a:	4619      	mov	r1, r3
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f000 fb0a 	bl	8006b56 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006544:	3301      	adds	r3, #1
 8006546:	627b      	str	r3, [r7, #36]	@ 0x24
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	791b      	ldrb	r3, [r3, #4]
 800654c:	461a      	mov	r2, r3
 800654e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006550:	4293      	cmp	r3, r2
 8006552:	d3e4      	bcc.n	800651e <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4618      	mov	r0, r3
 800655a:	f003 ff33 	bl	800a3c4 <USB_ReadInterrupts>
 800655e:	4603      	mov	r3, r0
 8006560:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006564:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006568:	d13c      	bne.n	80065e4 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800656a:	2301      	movs	r3, #1
 800656c:	627b      	str	r3, [r7, #36]	@ 0x24
 800656e:	e02b      	b.n	80065c8 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8006570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006572:	015a      	lsls	r2, r3, #5
 8006574:	69fb      	ldr	r3, [r7, #28]
 8006576:	4413      	add	r3, r2
 8006578:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006580:	6879      	ldr	r1, [r7, #4]
 8006582:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006584:	4613      	mov	r3, r2
 8006586:	00db      	lsls	r3, r3, #3
 8006588:	4413      	add	r3, r2
 800658a:	009b      	lsls	r3, r3, #2
 800658c:	440b      	add	r3, r1
 800658e:	3318      	adds	r3, #24
 8006590:	781b      	ldrb	r3, [r3, #0]
 8006592:	2b01      	cmp	r3, #1
 8006594:	d115      	bne.n	80065c2 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8006596:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006598:	2b00      	cmp	r3, #0
 800659a:	da12      	bge.n	80065c2 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800659c:	6879      	ldr	r1, [r7, #4]
 800659e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065a0:	4613      	mov	r3, r2
 80065a2:	00db      	lsls	r3, r3, #3
 80065a4:	4413      	add	r3, r2
 80065a6:	009b      	lsls	r3, r3, #2
 80065a8:	440b      	add	r3, r1
 80065aa:	3317      	adds	r3, #23
 80065ac:	2201      	movs	r2, #1
 80065ae:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80065b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065b2:	b2db      	uxtb	r3, r3
 80065b4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80065b8:	b2db      	uxtb	r3, r3
 80065ba:	4619      	mov	r1, r3
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f000 faca 	bl	8006b56 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80065c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065c4:	3301      	adds	r3, #1
 80065c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	791b      	ldrb	r3, [r3, #4]
 80065cc:	461a      	mov	r2, r3
 80065ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d3cd      	bcc.n	8006570 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	695a      	ldr	r2, [r3, #20]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80065e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4618      	mov	r0, r3
 80065ea:	f003 feeb 	bl	800a3c4 <USB_ReadInterrupts>
 80065ee:	4603      	mov	r3, r0
 80065f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80065f4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80065f8:	d156      	bne.n	80066a8 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80065fa:	2301      	movs	r3, #1
 80065fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80065fe:	e045      	b.n	800668c <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8006600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006602:	015a      	lsls	r2, r3, #5
 8006604:	69fb      	ldr	r3, [r7, #28]
 8006606:	4413      	add	r3, r2
 8006608:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006610:	6879      	ldr	r1, [r7, #4]
 8006612:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006614:	4613      	mov	r3, r2
 8006616:	00db      	lsls	r3, r3, #3
 8006618:	4413      	add	r3, r2
 800661a:	009b      	lsls	r3, r3, #2
 800661c:	440b      	add	r3, r1
 800661e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8006622:	781b      	ldrb	r3, [r3, #0]
 8006624:	2b01      	cmp	r3, #1
 8006626:	d12e      	bne.n	8006686 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006628:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800662a:	2b00      	cmp	r3, #0
 800662c:	da2b      	bge.n	8006686 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800662e:	69bb      	ldr	r3, [r7, #24]
 8006630:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800663a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800663e:	429a      	cmp	r2, r3
 8006640:	d121      	bne.n	8006686 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8006642:	6879      	ldr	r1, [r7, #4]
 8006644:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006646:	4613      	mov	r3, r2
 8006648:	00db      	lsls	r3, r3, #3
 800664a:	4413      	add	r3, r2
 800664c:	009b      	lsls	r3, r3, #2
 800664e:	440b      	add	r3, r1
 8006650:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8006654:	2201      	movs	r2, #1
 8006656:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8006658:	6a3b      	ldr	r3, [r7, #32]
 800665a:	699b      	ldr	r3, [r3, #24]
 800665c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006660:	6a3b      	ldr	r3, [r7, #32]
 8006662:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8006664:	6a3b      	ldr	r3, [r7, #32]
 8006666:	695b      	ldr	r3, [r3, #20]
 8006668:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800666c:	2b00      	cmp	r3, #0
 800666e:	d10a      	bne.n	8006686 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8006670:	69fb      	ldr	r3, [r7, #28]
 8006672:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	69fa      	ldr	r2, [r7, #28]
 800667a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800667e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006682:	6053      	str	r3, [r2, #4]
            break;
 8006684:	e008      	b.n	8006698 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006688:	3301      	adds	r3, #1
 800668a:	627b      	str	r3, [r7, #36]	@ 0x24
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	791b      	ldrb	r3, [r3, #4]
 8006690:	461a      	mov	r2, r3
 8006692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006694:	4293      	cmp	r3, r2
 8006696:	d3b3      	bcc.n	8006600 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	695a      	ldr	r2, [r3, #20]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80066a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4618      	mov	r0, r3
 80066ae:	f003 fe89 	bl	800a3c4 <USB_ReadInterrupts>
 80066b2:	4603      	mov	r3, r0
 80066b4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80066b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066bc:	d10a      	bne.n	80066d4 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f006 fa7e 	bl	800cbc0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	695a      	ldr	r2, [r3, #20]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80066d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4618      	mov	r0, r3
 80066da:	f003 fe73 	bl	800a3c4 <USB_ReadInterrupts>
 80066de:	4603      	mov	r3, r0
 80066e0:	f003 0304 	and.w	r3, r3, #4
 80066e4:	2b04      	cmp	r3, #4
 80066e6:	d115      	bne.n	8006714 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80066f0:	69bb      	ldr	r3, [r7, #24]
 80066f2:	f003 0304 	and.w	r3, r3, #4
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d002      	beq.n	8006700 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f006 fa6e 	bl	800cbdc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	6859      	ldr	r1, [r3, #4]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	69ba      	ldr	r2, [r7, #24]
 800670c:	430a      	orrs	r2, r1
 800670e:	605a      	str	r2, [r3, #4]
 8006710:	e000      	b.n	8006714 <HAL_PCD_IRQHandler+0x93c>
      return;
 8006712:	bf00      	nop
    }
  }
}
 8006714:	3734      	adds	r7, #52	@ 0x34
 8006716:	46bd      	mov	sp, r7
 8006718:	bd90      	pop	{r4, r7, pc}

0800671a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800671a:	b580      	push	{r7, lr}
 800671c:	b082      	sub	sp, #8
 800671e:	af00      	add	r7, sp, #0
 8006720:	6078      	str	r0, [r7, #4]
 8006722:	460b      	mov	r3, r1
 8006724:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800672c:	2b01      	cmp	r3, #1
 800672e:	d101      	bne.n	8006734 <HAL_PCD_SetAddress+0x1a>
 8006730:	2302      	movs	r3, #2
 8006732:	e012      	b.n	800675a <HAL_PCD_SetAddress+0x40>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2201      	movs	r2, #1
 8006738:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	78fa      	ldrb	r2, [r7, #3]
 8006740:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	78fa      	ldrb	r2, [r7, #3]
 8006748:	4611      	mov	r1, r2
 800674a:	4618      	mov	r0, r3
 800674c:	f003 fdd2 	bl	800a2f4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2200      	movs	r2, #0
 8006754:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006758:	2300      	movs	r3, #0
}
 800675a:	4618      	mov	r0, r3
 800675c:	3708      	adds	r7, #8
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}

08006762 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006762:	b580      	push	{r7, lr}
 8006764:	b084      	sub	sp, #16
 8006766:	af00      	add	r7, sp, #0
 8006768:	6078      	str	r0, [r7, #4]
 800676a:	4608      	mov	r0, r1
 800676c:	4611      	mov	r1, r2
 800676e:	461a      	mov	r2, r3
 8006770:	4603      	mov	r3, r0
 8006772:	70fb      	strb	r3, [r7, #3]
 8006774:	460b      	mov	r3, r1
 8006776:	803b      	strh	r3, [r7, #0]
 8006778:	4613      	mov	r3, r2
 800677a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800677c:	2300      	movs	r3, #0
 800677e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006780:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006784:	2b00      	cmp	r3, #0
 8006786:	da0f      	bge.n	80067a8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006788:	78fb      	ldrb	r3, [r7, #3]
 800678a:	f003 020f 	and.w	r2, r3, #15
 800678e:	4613      	mov	r3, r2
 8006790:	00db      	lsls	r3, r3, #3
 8006792:	4413      	add	r3, r2
 8006794:	009b      	lsls	r3, r3, #2
 8006796:	3310      	adds	r3, #16
 8006798:	687a      	ldr	r2, [r7, #4]
 800679a:	4413      	add	r3, r2
 800679c:	3304      	adds	r3, #4
 800679e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2201      	movs	r2, #1
 80067a4:	705a      	strb	r2, [r3, #1]
 80067a6:	e00f      	b.n	80067c8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80067a8:	78fb      	ldrb	r3, [r7, #3]
 80067aa:	f003 020f 	and.w	r2, r3, #15
 80067ae:	4613      	mov	r3, r2
 80067b0:	00db      	lsls	r3, r3, #3
 80067b2:	4413      	add	r3, r2
 80067b4:	009b      	lsls	r3, r3, #2
 80067b6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80067ba:	687a      	ldr	r2, [r7, #4]
 80067bc:	4413      	add	r3, r2
 80067be:	3304      	adds	r3, #4
 80067c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2200      	movs	r2, #0
 80067c6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80067c8:	78fb      	ldrb	r3, [r7, #3]
 80067ca:	f003 030f 	and.w	r3, r3, #15
 80067ce:	b2da      	uxtb	r2, r3
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80067d4:	883b      	ldrh	r3, [r7, #0]
 80067d6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	78ba      	ldrb	r2, [r7, #2]
 80067e2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	785b      	ldrb	r3, [r3, #1]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d004      	beq.n	80067f6 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	781b      	ldrb	r3, [r3, #0]
 80067f0:	461a      	mov	r2, r3
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80067f6:	78bb      	ldrb	r3, [r7, #2]
 80067f8:	2b02      	cmp	r3, #2
 80067fa:	d102      	bne.n	8006802 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2200      	movs	r2, #0
 8006800:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006808:	2b01      	cmp	r3, #1
 800680a:	d101      	bne.n	8006810 <HAL_PCD_EP_Open+0xae>
 800680c:	2302      	movs	r3, #2
 800680e:	e00e      	b.n	800682e <HAL_PCD_EP_Open+0xcc>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2201      	movs	r2, #1
 8006814:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	68f9      	ldr	r1, [r7, #12]
 800681e:	4618      	mov	r0, r3
 8006820:	f002 ff52 	bl	80096c8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2200      	movs	r2, #0
 8006828:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800682c:	7afb      	ldrb	r3, [r7, #11]
}
 800682e:	4618      	mov	r0, r3
 8006830:	3710      	adds	r7, #16
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}

08006836 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006836:	b580      	push	{r7, lr}
 8006838:	b084      	sub	sp, #16
 800683a:	af00      	add	r7, sp, #0
 800683c:	6078      	str	r0, [r7, #4]
 800683e:	460b      	mov	r3, r1
 8006840:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006842:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006846:	2b00      	cmp	r3, #0
 8006848:	da0f      	bge.n	800686a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800684a:	78fb      	ldrb	r3, [r7, #3]
 800684c:	f003 020f 	and.w	r2, r3, #15
 8006850:	4613      	mov	r3, r2
 8006852:	00db      	lsls	r3, r3, #3
 8006854:	4413      	add	r3, r2
 8006856:	009b      	lsls	r3, r3, #2
 8006858:	3310      	adds	r3, #16
 800685a:	687a      	ldr	r2, [r7, #4]
 800685c:	4413      	add	r3, r2
 800685e:	3304      	adds	r3, #4
 8006860:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	2201      	movs	r2, #1
 8006866:	705a      	strb	r2, [r3, #1]
 8006868:	e00f      	b.n	800688a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800686a:	78fb      	ldrb	r3, [r7, #3]
 800686c:	f003 020f 	and.w	r2, r3, #15
 8006870:	4613      	mov	r3, r2
 8006872:	00db      	lsls	r3, r3, #3
 8006874:	4413      	add	r3, r2
 8006876:	009b      	lsls	r3, r3, #2
 8006878:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800687c:	687a      	ldr	r2, [r7, #4]
 800687e:	4413      	add	r3, r2
 8006880:	3304      	adds	r3, #4
 8006882:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2200      	movs	r2, #0
 8006888:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800688a:	78fb      	ldrb	r3, [r7, #3]
 800688c:	f003 030f 	and.w	r3, r3, #15
 8006890:	b2da      	uxtb	r2, r3
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800689c:	2b01      	cmp	r3, #1
 800689e:	d101      	bne.n	80068a4 <HAL_PCD_EP_Close+0x6e>
 80068a0:	2302      	movs	r3, #2
 80068a2:	e00e      	b.n	80068c2 <HAL_PCD_EP_Close+0x8c>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2201      	movs	r2, #1
 80068a8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	68f9      	ldr	r1, [r7, #12]
 80068b2:	4618      	mov	r0, r3
 80068b4:	f002 ff90 	bl	80097d8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2200      	movs	r2, #0
 80068bc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80068c0:	2300      	movs	r3, #0
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3710      	adds	r7, #16
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}

080068ca <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80068ca:	b580      	push	{r7, lr}
 80068cc:	b086      	sub	sp, #24
 80068ce:	af00      	add	r7, sp, #0
 80068d0:	60f8      	str	r0, [r7, #12]
 80068d2:	607a      	str	r2, [r7, #4]
 80068d4:	603b      	str	r3, [r7, #0]
 80068d6:	460b      	mov	r3, r1
 80068d8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80068da:	7afb      	ldrb	r3, [r7, #11]
 80068dc:	f003 020f 	and.w	r2, r3, #15
 80068e0:	4613      	mov	r3, r2
 80068e2:	00db      	lsls	r3, r3, #3
 80068e4:	4413      	add	r3, r2
 80068e6:	009b      	lsls	r3, r3, #2
 80068e8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80068ec:	68fa      	ldr	r2, [r7, #12]
 80068ee:	4413      	add	r3, r2
 80068f0:	3304      	adds	r3, #4
 80068f2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	687a      	ldr	r2, [r7, #4]
 80068f8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	683a      	ldr	r2, [r7, #0]
 80068fe:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	2200      	movs	r2, #0
 8006904:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	2200      	movs	r2, #0
 800690a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800690c:	7afb      	ldrb	r3, [r7, #11]
 800690e:	f003 030f 	and.w	r3, r3, #15
 8006912:	b2da      	uxtb	r2, r3
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	799b      	ldrb	r3, [r3, #6]
 800691c:	2b01      	cmp	r3, #1
 800691e:	d102      	bne.n	8006926 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006920:	687a      	ldr	r2, [r7, #4]
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	6818      	ldr	r0, [r3, #0]
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	799b      	ldrb	r3, [r3, #6]
 800692e:	461a      	mov	r2, r3
 8006930:	6979      	ldr	r1, [r7, #20]
 8006932:	f003 f82d 	bl	8009990 <USB_EPStartXfer>

  return HAL_OK;
 8006936:	2300      	movs	r3, #0
}
 8006938:	4618      	mov	r0, r3
 800693a:	3718      	adds	r7, #24
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}

08006940 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8006940:	b480      	push	{r7}
 8006942:	b083      	sub	sp, #12
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
 8006948:	460b      	mov	r3, r1
 800694a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800694c:	78fb      	ldrb	r3, [r7, #3]
 800694e:	f003 020f 	and.w	r2, r3, #15
 8006952:	6879      	ldr	r1, [r7, #4]
 8006954:	4613      	mov	r3, r2
 8006956:	00db      	lsls	r3, r3, #3
 8006958:	4413      	add	r3, r2
 800695a:	009b      	lsls	r3, r3, #2
 800695c:	440b      	add	r3, r1
 800695e:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8006962:	681b      	ldr	r3, [r3, #0]
}
 8006964:	4618      	mov	r0, r3
 8006966:	370c      	adds	r7, #12
 8006968:	46bd      	mov	sp, r7
 800696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696e:	4770      	bx	lr

08006970 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b086      	sub	sp, #24
 8006974:	af00      	add	r7, sp, #0
 8006976:	60f8      	str	r0, [r7, #12]
 8006978:	607a      	str	r2, [r7, #4]
 800697a:	603b      	str	r3, [r7, #0]
 800697c:	460b      	mov	r3, r1
 800697e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006980:	7afb      	ldrb	r3, [r7, #11]
 8006982:	f003 020f 	and.w	r2, r3, #15
 8006986:	4613      	mov	r3, r2
 8006988:	00db      	lsls	r3, r3, #3
 800698a:	4413      	add	r3, r2
 800698c:	009b      	lsls	r3, r3, #2
 800698e:	3310      	adds	r3, #16
 8006990:	68fa      	ldr	r2, [r7, #12]
 8006992:	4413      	add	r3, r2
 8006994:	3304      	adds	r3, #4
 8006996:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	687a      	ldr	r2, [r7, #4]
 800699c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	683a      	ldr	r2, [r7, #0]
 80069a2:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	2200      	movs	r2, #0
 80069a8:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	2201      	movs	r2, #1
 80069ae:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80069b0:	7afb      	ldrb	r3, [r7, #11]
 80069b2:	f003 030f 	and.w	r3, r3, #15
 80069b6:	b2da      	uxtb	r2, r3
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	799b      	ldrb	r3, [r3, #6]
 80069c0:	2b01      	cmp	r3, #1
 80069c2:	d102      	bne.n	80069ca <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80069c4:	687a      	ldr	r2, [r7, #4]
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	6818      	ldr	r0, [r3, #0]
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	799b      	ldrb	r3, [r3, #6]
 80069d2:	461a      	mov	r2, r3
 80069d4:	6979      	ldr	r1, [r7, #20]
 80069d6:	f002 ffdb 	bl	8009990 <USB_EPStartXfer>

  return HAL_OK;
 80069da:	2300      	movs	r3, #0
}
 80069dc:	4618      	mov	r0, r3
 80069de:	3718      	adds	r7, #24
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}

080069e4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b084      	sub	sp, #16
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	460b      	mov	r3, r1
 80069ee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80069f0:	78fb      	ldrb	r3, [r7, #3]
 80069f2:	f003 030f 	and.w	r3, r3, #15
 80069f6:	687a      	ldr	r2, [r7, #4]
 80069f8:	7912      	ldrb	r2, [r2, #4]
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d901      	bls.n	8006a02 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80069fe:	2301      	movs	r3, #1
 8006a00:	e04f      	b.n	8006aa2 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006a02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	da0f      	bge.n	8006a2a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006a0a:	78fb      	ldrb	r3, [r7, #3]
 8006a0c:	f003 020f 	and.w	r2, r3, #15
 8006a10:	4613      	mov	r3, r2
 8006a12:	00db      	lsls	r3, r3, #3
 8006a14:	4413      	add	r3, r2
 8006a16:	009b      	lsls	r3, r3, #2
 8006a18:	3310      	adds	r3, #16
 8006a1a:	687a      	ldr	r2, [r7, #4]
 8006a1c:	4413      	add	r3, r2
 8006a1e:	3304      	adds	r3, #4
 8006a20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	2201      	movs	r2, #1
 8006a26:	705a      	strb	r2, [r3, #1]
 8006a28:	e00d      	b.n	8006a46 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006a2a:	78fa      	ldrb	r2, [r7, #3]
 8006a2c:	4613      	mov	r3, r2
 8006a2e:	00db      	lsls	r3, r3, #3
 8006a30:	4413      	add	r3, r2
 8006a32:	009b      	lsls	r3, r3, #2
 8006a34:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006a38:	687a      	ldr	r2, [r7, #4]
 8006a3a:	4413      	add	r3, r2
 8006a3c:	3304      	adds	r3, #4
 8006a3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2200      	movs	r2, #0
 8006a44:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	2201      	movs	r2, #1
 8006a4a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006a4c:	78fb      	ldrb	r3, [r7, #3]
 8006a4e:	f003 030f 	and.w	r3, r3, #15
 8006a52:	b2da      	uxtb	r2, r3
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006a5e:	2b01      	cmp	r3, #1
 8006a60:	d101      	bne.n	8006a66 <HAL_PCD_EP_SetStall+0x82>
 8006a62:	2302      	movs	r3, #2
 8006a64:	e01d      	b.n	8006aa2 <HAL_PCD_EP_SetStall+0xbe>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2201      	movs	r2, #1
 8006a6a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	68f9      	ldr	r1, [r7, #12]
 8006a74:	4618      	mov	r0, r3
 8006a76:	f003 fb69 	bl	800a14c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006a7a:	78fb      	ldrb	r3, [r7, #3]
 8006a7c:	f003 030f 	and.w	r3, r3, #15
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d109      	bne.n	8006a98 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6818      	ldr	r0, [r3, #0]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	7999      	ldrb	r1, [r3, #6]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006a92:	461a      	mov	r2, r3
 8006a94:	f003 fd5a 	bl	800a54c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006aa0:	2300      	movs	r3, #0
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3710      	adds	r7, #16
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}

08006aaa <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006aaa:	b580      	push	{r7, lr}
 8006aac:	b084      	sub	sp, #16
 8006aae:	af00      	add	r7, sp, #0
 8006ab0:	6078      	str	r0, [r7, #4]
 8006ab2:	460b      	mov	r3, r1
 8006ab4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006ab6:	78fb      	ldrb	r3, [r7, #3]
 8006ab8:	f003 030f 	and.w	r3, r3, #15
 8006abc:	687a      	ldr	r2, [r7, #4]
 8006abe:	7912      	ldrb	r2, [r2, #4]
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d901      	bls.n	8006ac8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	e042      	b.n	8006b4e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006ac8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	da0f      	bge.n	8006af0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006ad0:	78fb      	ldrb	r3, [r7, #3]
 8006ad2:	f003 020f 	and.w	r2, r3, #15
 8006ad6:	4613      	mov	r3, r2
 8006ad8:	00db      	lsls	r3, r3, #3
 8006ada:	4413      	add	r3, r2
 8006adc:	009b      	lsls	r3, r3, #2
 8006ade:	3310      	adds	r3, #16
 8006ae0:	687a      	ldr	r2, [r7, #4]
 8006ae2:	4413      	add	r3, r2
 8006ae4:	3304      	adds	r3, #4
 8006ae6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2201      	movs	r2, #1
 8006aec:	705a      	strb	r2, [r3, #1]
 8006aee:	e00f      	b.n	8006b10 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006af0:	78fb      	ldrb	r3, [r7, #3]
 8006af2:	f003 020f 	and.w	r2, r3, #15
 8006af6:	4613      	mov	r3, r2
 8006af8:	00db      	lsls	r3, r3, #3
 8006afa:	4413      	add	r3, r2
 8006afc:	009b      	lsls	r3, r3, #2
 8006afe:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006b02:	687a      	ldr	r2, [r7, #4]
 8006b04:	4413      	add	r3, r2
 8006b06:	3304      	adds	r3, #4
 8006b08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2200      	movs	r2, #0
 8006b14:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006b16:	78fb      	ldrb	r3, [r7, #3]
 8006b18:	f003 030f 	and.w	r3, r3, #15
 8006b1c:	b2da      	uxtb	r2, r3
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006b28:	2b01      	cmp	r3, #1
 8006b2a:	d101      	bne.n	8006b30 <HAL_PCD_EP_ClrStall+0x86>
 8006b2c:	2302      	movs	r3, #2
 8006b2e:	e00e      	b.n	8006b4e <HAL_PCD_EP_ClrStall+0xa4>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2201      	movs	r2, #1
 8006b34:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	68f9      	ldr	r1, [r7, #12]
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f003 fb72 	bl	800a228 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2200      	movs	r2, #0
 8006b48:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006b4c:	2300      	movs	r3, #0
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3710      	adds	r7, #16
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}

08006b56 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006b56:	b580      	push	{r7, lr}
 8006b58:	b084      	sub	sp, #16
 8006b5a:	af00      	add	r7, sp, #0
 8006b5c:	6078      	str	r0, [r7, #4]
 8006b5e:	460b      	mov	r3, r1
 8006b60:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006b62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	da0c      	bge.n	8006b84 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006b6a:	78fb      	ldrb	r3, [r7, #3]
 8006b6c:	f003 020f 	and.w	r2, r3, #15
 8006b70:	4613      	mov	r3, r2
 8006b72:	00db      	lsls	r3, r3, #3
 8006b74:	4413      	add	r3, r2
 8006b76:	009b      	lsls	r3, r3, #2
 8006b78:	3310      	adds	r3, #16
 8006b7a:	687a      	ldr	r2, [r7, #4]
 8006b7c:	4413      	add	r3, r2
 8006b7e:	3304      	adds	r3, #4
 8006b80:	60fb      	str	r3, [r7, #12]
 8006b82:	e00c      	b.n	8006b9e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006b84:	78fb      	ldrb	r3, [r7, #3]
 8006b86:	f003 020f 	and.w	r2, r3, #15
 8006b8a:	4613      	mov	r3, r2
 8006b8c:	00db      	lsls	r3, r3, #3
 8006b8e:	4413      	add	r3, r2
 8006b90:	009b      	lsls	r3, r3, #2
 8006b92:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006b96:	687a      	ldr	r2, [r7, #4]
 8006b98:	4413      	add	r3, r2
 8006b9a:	3304      	adds	r3, #4
 8006b9c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	68f9      	ldr	r1, [r7, #12]
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f003 f991 	bl	8009ecc <USB_EPStopXfer>
 8006baa:	4603      	mov	r3, r0
 8006bac:	72fb      	strb	r3, [r7, #11]

  return ret;
 8006bae:	7afb      	ldrb	r3, [r7, #11]
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3710      	adds	r7, #16
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}

08006bb8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b08a      	sub	sp, #40	@ 0x28
 8006bbc:	af02      	add	r7, sp, #8
 8006bbe:	6078      	str	r0, [r7, #4]
 8006bc0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006bcc:	683a      	ldr	r2, [r7, #0]
 8006bce:	4613      	mov	r3, r2
 8006bd0:	00db      	lsls	r3, r3, #3
 8006bd2:	4413      	add	r3, r2
 8006bd4:	009b      	lsls	r3, r3, #2
 8006bd6:	3310      	adds	r3, #16
 8006bd8:	687a      	ldr	r2, [r7, #4]
 8006bda:	4413      	add	r3, r2
 8006bdc:	3304      	adds	r3, #4
 8006bde:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	695a      	ldr	r2, [r3, #20]
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	691b      	ldr	r3, [r3, #16]
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d901      	bls.n	8006bf0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006bec:	2301      	movs	r3, #1
 8006bee:	e06b      	b.n	8006cc8 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	691a      	ldr	r2, [r3, #16]
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	695b      	ldr	r3, [r3, #20]
 8006bf8:	1ad3      	subs	r3, r2, r3
 8006bfa:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	689b      	ldr	r3, [r3, #8]
 8006c00:	69fa      	ldr	r2, [r7, #28]
 8006c02:	429a      	cmp	r2, r3
 8006c04:	d902      	bls.n	8006c0c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006c0c:	69fb      	ldr	r3, [r7, #28]
 8006c0e:	3303      	adds	r3, #3
 8006c10:	089b      	lsrs	r3, r3, #2
 8006c12:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006c14:	e02a      	b.n	8006c6c <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	691a      	ldr	r2, [r3, #16]
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	695b      	ldr	r3, [r3, #20]
 8006c1e:	1ad3      	subs	r3, r2, r3
 8006c20:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	689b      	ldr	r3, [r3, #8]
 8006c26:	69fa      	ldr	r2, [r7, #28]
 8006c28:	429a      	cmp	r2, r3
 8006c2a:	d902      	bls.n	8006c32 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	689b      	ldr	r3, [r3, #8]
 8006c30:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006c32:	69fb      	ldr	r3, [r7, #28]
 8006c34:	3303      	adds	r3, #3
 8006c36:	089b      	lsrs	r3, r3, #2
 8006c38:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	68d9      	ldr	r1, [r3, #12]
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	b2da      	uxtb	r2, r3
 8006c42:	69fb      	ldr	r3, [r7, #28]
 8006c44:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006c4a:	9300      	str	r3, [sp, #0]
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	6978      	ldr	r0, [r7, #20]
 8006c50:	f003 f9e6 	bl	800a020 <USB_WritePacket>

    ep->xfer_buff  += len;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	68da      	ldr	r2, [r3, #12]
 8006c58:	69fb      	ldr	r3, [r7, #28]
 8006c5a:	441a      	add	r2, r3
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	695a      	ldr	r2, [r3, #20]
 8006c64:	69fb      	ldr	r3, [r7, #28]
 8006c66:	441a      	add	r2, r3
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	015a      	lsls	r2, r3, #5
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	4413      	add	r3, r2
 8006c74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c78:	699b      	ldr	r3, [r3, #24]
 8006c7a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006c7c:	69ba      	ldr	r2, [r7, #24]
 8006c7e:	429a      	cmp	r2, r3
 8006c80:	d809      	bhi.n	8006c96 <PCD_WriteEmptyTxFifo+0xde>
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	695a      	ldr	r2, [r3, #20]
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d203      	bcs.n	8006c96 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	691b      	ldr	r3, [r3, #16]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d1bf      	bne.n	8006c16 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	691a      	ldr	r2, [r3, #16]
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	695b      	ldr	r3, [r3, #20]
 8006c9e:	429a      	cmp	r2, r3
 8006ca0:	d811      	bhi.n	8006cc6 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	f003 030f 	and.w	r3, r3, #15
 8006ca8:	2201      	movs	r2, #1
 8006caa:	fa02 f303 	lsl.w	r3, r2, r3
 8006cae:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cb6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	43db      	mvns	r3, r3
 8006cbc:	6939      	ldr	r1, [r7, #16]
 8006cbe:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006cc2:	4013      	ands	r3, r2
 8006cc4:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8006cc6:	2300      	movs	r3, #0
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3720      	adds	r7, #32
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}

08006cd0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b088      	sub	sp, #32
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
 8006cd8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ce0:	69fb      	ldr	r3, [r7, #28]
 8006ce2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006ce4:	69fb      	ldr	r3, [r7, #28]
 8006ce6:	333c      	adds	r3, #60	@ 0x3c
 8006ce8:	3304      	adds	r3, #4
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	015a      	lsls	r2, r3, #5
 8006cf2:	69bb      	ldr	r3, [r7, #24]
 8006cf4:	4413      	add	r3, r2
 8006cf6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cfa:	689b      	ldr	r3, [r3, #8]
 8006cfc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	799b      	ldrb	r3, [r3, #6]
 8006d02:	2b01      	cmp	r3, #1
 8006d04:	d17b      	bne.n	8006dfe <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	f003 0308 	and.w	r3, r3, #8
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d015      	beq.n	8006d3c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	4a61      	ldr	r2, [pc, #388]	@ (8006e98 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	f240 80b9 	bls.w	8006e8c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	f000 80b3 	beq.w	8006e8c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	015a      	lsls	r2, r3, #5
 8006d2a:	69bb      	ldr	r3, [r7, #24]
 8006d2c:	4413      	add	r3, r2
 8006d2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d32:	461a      	mov	r2, r3
 8006d34:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d38:	6093      	str	r3, [r2, #8]
 8006d3a:	e0a7      	b.n	8006e8c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	f003 0320 	and.w	r3, r3, #32
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d009      	beq.n	8006d5a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	015a      	lsls	r2, r3, #5
 8006d4a:	69bb      	ldr	r3, [r7, #24]
 8006d4c:	4413      	add	r3, r2
 8006d4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d52:	461a      	mov	r2, r3
 8006d54:	2320      	movs	r3, #32
 8006d56:	6093      	str	r3, [r2, #8]
 8006d58:	e098      	b.n	8006e8c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006d5a:	693b      	ldr	r3, [r7, #16]
 8006d5c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	f040 8093 	bne.w	8006e8c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	4a4b      	ldr	r2, [pc, #300]	@ (8006e98 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d90f      	bls.n	8006d8e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d00a      	beq.n	8006d8e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	015a      	lsls	r2, r3, #5
 8006d7c:	69bb      	ldr	r3, [r7, #24]
 8006d7e:	4413      	add	r3, r2
 8006d80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d84:	461a      	mov	r2, r3
 8006d86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d8a:	6093      	str	r3, [r2, #8]
 8006d8c:	e07e      	b.n	8006e8c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8006d8e:	683a      	ldr	r2, [r7, #0]
 8006d90:	4613      	mov	r3, r2
 8006d92:	00db      	lsls	r3, r3, #3
 8006d94:	4413      	add	r3, r2
 8006d96:	009b      	lsls	r3, r3, #2
 8006d98:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006d9c:	687a      	ldr	r2, [r7, #4]
 8006d9e:	4413      	add	r3, r2
 8006da0:	3304      	adds	r3, #4
 8006da2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	6a1a      	ldr	r2, [r3, #32]
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	0159      	lsls	r1, r3, #5
 8006dac:	69bb      	ldr	r3, [r7, #24]
 8006dae:	440b      	add	r3, r1
 8006db0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006db4:	691b      	ldr	r3, [r3, #16]
 8006db6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006dba:	1ad2      	subs	r2, r2, r3
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d114      	bne.n	8006df0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	691b      	ldr	r3, [r3, #16]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d109      	bne.n	8006de2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6818      	ldr	r0, [r3, #0]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006dd8:	461a      	mov	r2, r3
 8006dda:	2101      	movs	r1, #1
 8006ddc:	f003 fbb6 	bl	800a54c <USB_EP0_OutStart>
 8006de0:	e006      	b.n	8006df0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	68da      	ldr	r2, [r3, #12]
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	695b      	ldr	r3, [r3, #20]
 8006dea:	441a      	add	r2, r3
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	b2db      	uxtb	r3, r3
 8006df4:	4619      	mov	r1, r3
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f005 fe1e 	bl	800ca38 <HAL_PCD_DataOutStageCallback>
 8006dfc:	e046      	b.n	8006e8c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	4a26      	ldr	r2, [pc, #152]	@ (8006e9c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d124      	bne.n	8006e50 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d00a      	beq.n	8006e26 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	015a      	lsls	r2, r3, #5
 8006e14:	69bb      	ldr	r3, [r7, #24]
 8006e16:	4413      	add	r3, r2
 8006e18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e1c:	461a      	mov	r2, r3
 8006e1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e22:	6093      	str	r3, [r2, #8]
 8006e24:	e032      	b.n	8006e8c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	f003 0320 	and.w	r3, r3, #32
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d008      	beq.n	8006e42 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	015a      	lsls	r2, r3, #5
 8006e34:	69bb      	ldr	r3, [r7, #24]
 8006e36:	4413      	add	r3, r2
 8006e38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e3c:	461a      	mov	r2, r3
 8006e3e:	2320      	movs	r3, #32
 8006e40:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	b2db      	uxtb	r3, r3
 8006e46:	4619      	mov	r1, r3
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f005 fdf5 	bl	800ca38 <HAL_PCD_DataOutStageCallback>
 8006e4e:	e01d      	b.n	8006e8c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d114      	bne.n	8006e80 <PCD_EP_OutXfrComplete_int+0x1b0>
 8006e56:	6879      	ldr	r1, [r7, #4]
 8006e58:	683a      	ldr	r2, [r7, #0]
 8006e5a:	4613      	mov	r3, r2
 8006e5c:	00db      	lsls	r3, r3, #3
 8006e5e:	4413      	add	r3, r2
 8006e60:	009b      	lsls	r3, r3, #2
 8006e62:	440b      	add	r3, r1
 8006e64:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d108      	bne.n	8006e80 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6818      	ldr	r0, [r3, #0]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006e78:	461a      	mov	r2, r3
 8006e7a:	2100      	movs	r1, #0
 8006e7c:	f003 fb66 	bl	800a54c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	b2db      	uxtb	r3, r3
 8006e84:	4619      	mov	r1, r3
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f005 fdd6 	bl	800ca38 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006e8c:	2300      	movs	r3, #0
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3720      	adds	r7, #32
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}
 8006e96:	bf00      	nop
 8006e98:	4f54300a 	.word	0x4f54300a
 8006e9c:	4f54310a 	.word	0x4f54310a

08006ea0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b086      	sub	sp, #24
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
 8006ea8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	333c      	adds	r3, #60	@ 0x3c
 8006eb8:	3304      	adds	r3, #4
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	015a      	lsls	r2, r3, #5
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	4413      	add	r3, r2
 8006ec6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006eca:	689b      	ldr	r3, [r3, #8]
 8006ecc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	4a15      	ldr	r2, [pc, #84]	@ (8006f28 <PCD_EP_OutSetupPacket_int+0x88>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d90e      	bls.n	8006ef4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d009      	beq.n	8006ef4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	015a      	lsls	r2, r3, #5
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	4413      	add	r3, r2
 8006ee8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006eec:	461a      	mov	r2, r3
 8006eee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ef2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f005 fd8d 	bl	800ca14 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	4a0a      	ldr	r2, [pc, #40]	@ (8006f28 <PCD_EP_OutSetupPacket_int+0x88>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d90c      	bls.n	8006f1c <PCD_EP_OutSetupPacket_int+0x7c>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	799b      	ldrb	r3, [r3, #6]
 8006f06:	2b01      	cmp	r3, #1
 8006f08:	d108      	bne.n	8006f1c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6818      	ldr	r0, [r3, #0]
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006f14:	461a      	mov	r2, r3
 8006f16:	2101      	movs	r1, #1
 8006f18:	f003 fb18 	bl	800a54c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006f1c:	2300      	movs	r3, #0
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3718      	adds	r7, #24
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}
 8006f26:	bf00      	nop
 8006f28:	4f54300a 	.word	0x4f54300a

08006f2c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b085      	sub	sp, #20
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
 8006f34:	460b      	mov	r3, r1
 8006f36:	70fb      	strb	r3, [r7, #3]
 8006f38:	4613      	mov	r3, r2
 8006f3a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f42:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006f44:	78fb      	ldrb	r3, [r7, #3]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d107      	bne.n	8006f5a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006f4a:	883b      	ldrh	r3, [r7, #0]
 8006f4c:	0419      	lsls	r1, r3, #16
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	68ba      	ldr	r2, [r7, #8]
 8006f54:	430a      	orrs	r2, r1
 8006f56:	629a      	str	r2, [r3, #40]	@ 0x28
 8006f58:	e028      	b.n	8006fac <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f60:	0c1b      	lsrs	r3, r3, #16
 8006f62:	68ba      	ldr	r2, [r7, #8]
 8006f64:	4413      	add	r3, r2
 8006f66:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006f68:	2300      	movs	r3, #0
 8006f6a:	73fb      	strb	r3, [r7, #15]
 8006f6c:	e00d      	b.n	8006f8a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681a      	ldr	r2, [r3, #0]
 8006f72:	7bfb      	ldrb	r3, [r7, #15]
 8006f74:	3340      	adds	r3, #64	@ 0x40
 8006f76:	009b      	lsls	r3, r3, #2
 8006f78:	4413      	add	r3, r2
 8006f7a:	685b      	ldr	r3, [r3, #4]
 8006f7c:	0c1b      	lsrs	r3, r3, #16
 8006f7e:	68ba      	ldr	r2, [r7, #8]
 8006f80:	4413      	add	r3, r2
 8006f82:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006f84:	7bfb      	ldrb	r3, [r7, #15]
 8006f86:	3301      	adds	r3, #1
 8006f88:	73fb      	strb	r3, [r7, #15]
 8006f8a:	7bfa      	ldrb	r2, [r7, #15]
 8006f8c:	78fb      	ldrb	r3, [r7, #3]
 8006f8e:	3b01      	subs	r3, #1
 8006f90:	429a      	cmp	r2, r3
 8006f92:	d3ec      	bcc.n	8006f6e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006f94:	883b      	ldrh	r3, [r7, #0]
 8006f96:	0418      	lsls	r0, r3, #16
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6819      	ldr	r1, [r3, #0]
 8006f9c:	78fb      	ldrb	r3, [r7, #3]
 8006f9e:	3b01      	subs	r3, #1
 8006fa0:	68ba      	ldr	r2, [r7, #8]
 8006fa2:	4302      	orrs	r2, r0
 8006fa4:	3340      	adds	r3, #64	@ 0x40
 8006fa6:	009b      	lsls	r3, r3, #2
 8006fa8:	440b      	add	r3, r1
 8006faa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006fac:	2300      	movs	r3, #0
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3714      	adds	r7, #20
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb8:	4770      	bx	lr

08006fba <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006fba:	b480      	push	{r7}
 8006fbc:	b083      	sub	sp, #12
 8006fbe:	af00      	add	r7, sp, #0
 8006fc0:	6078      	str	r0, [r7, #4]
 8006fc2:	460b      	mov	r3, r1
 8006fc4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	887a      	ldrh	r2, [r7, #2]
 8006fcc:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8006fce:	2300      	movs	r3, #0
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	370c      	adds	r7, #12
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fda:	4770      	bx	lr

08006fdc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b083      	sub	sp, #12
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
 8006fe4:	460b      	mov	r3, r1
 8006fe6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006fe8:	bf00      	nop
 8006fea:	370c      	adds	r7, #12
 8006fec:	46bd      	mov	sp, r7
 8006fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff2:	4770      	bx	lr

08006ff4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b086      	sub	sp, #24
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d101      	bne.n	8007006 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007002:	2301      	movs	r3, #1
 8007004:	e267      	b.n	80074d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f003 0301 	and.w	r3, r3, #1
 800700e:	2b00      	cmp	r3, #0
 8007010:	d075      	beq.n	80070fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007012:	4b88      	ldr	r3, [pc, #544]	@ (8007234 <HAL_RCC_OscConfig+0x240>)
 8007014:	689b      	ldr	r3, [r3, #8]
 8007016:	f003 030c 	and.w	r3, r3, #12
 800701a:	2b04      	cmp	r3, #4
 800701c:	d00c      	beq.n	8007038 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800701e:	4b85      	ldr	r3, [pc, #532]	@ (8007234 <HAL_RCC_OscConfig+0x240>)
 8007020:	689b      	ldr	r3, [r3, #8]
 8007022:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007026:	2b08      	cmp	r3, #8
 8007028:	d112      	bne.n	8007050 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800702a:	4b82      	ldr	r3, [pc, #520]	@ (8007234 <HAL_RCC_OscConfig+0x240>)
 800702c:	685b      	ldr	r3, [r3, #4]
 800702e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007032:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007036:	d10b      	bne.n	8007050 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007038:	4b7e      	ldr	r3, [pc, #504]	@ (8007234 <HAL_RCC_OscConfig+0x240>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007040:	2b00      	cmp	r3, #0
 8007042:	d05b      	beq.n	80070fc <HAL_RCC_OscConfig+0x108>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d157      	bne.n	80070fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800704c:	2301      	movs	r3, #1
 800704e:	e242      	b.n	80074d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007058:	d106      	bne.n	8007068 <HAL_RCC_OscConfig+0x74>
 800705a:	4b76      	ldr	r3, [pc, #472]	@ (8007234 <HAL_RCC_OscConfig+0x240>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4a75      	ldr	r2, [pc, #468]	@ (8007234 <HAL_RCC_OscConfig+0x240>)
 8007060:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007064:	6013      	str	r3, [r2, #0]
 8007066:	e01d      	b.n	80070a4 <HAL_RCC_OscConfig+0xb0>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007070:	d10c      	bne.n	800708c <HAL_RCC_OscConfig+0x98>
 8007072:	4b70      	ldr	r3, [pc, #448]	@ (8007234 <HAL_RCC_OscConfig+0x240>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a6f      	ldr	r2, [pc, #444]	@ (8007234 <HAL_RCC_OscConfig+0x240>)
 8007078:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800707c:	6013      	str	r3, [r2, #0]
 800707e:	4b6d      	ldr	r3, [pc, #436]	@ (8007234 <HAL_RCC_OscConfig+0x240>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4a6c      	ldr	r2, [pc, #432]	@ (8007234 <HAL_RCC_OscConfig+0x240>)
 8007084:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007088:	6013      	str	r3, [r2, #0]
 800708a:	e00b      	b.n	80070a4 <HAL_RCC_OscConfig+0xb0>
 800708c:	4b69      	ldr	r3, [pc, #420]	@ (8007234 <HAL_RCC_OscConfig+0x240>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a68      	ldr	r2, [pc, #416]	@ (8007234 <HAL_RCC_OscConfig+0x240>)
 8007092:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007096:	6013      	str	r3, [r2, #0]
 8007098:	4b66      	ldr	r3, [pc, #408]	@ (8007234 <HAL_RCC_OscConfig+0x240>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a65      	ldr	r2, [pc, #404]	@ (8007234 <HAL_RCC_OscConfig+0x240>)
 800709e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80070a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d013      	beq.n	80070d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070ac:	f7fb fce8 	bl	8002a80 <HAL_GetTick>
 80070b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070b2:	e008      	b.n	80070c6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80070b4:	f7fb fce4 	bl	8002a80 <HAL_GetTick>
 80070b8:	4602      	mov	r2, r0
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	1ad3      	subs	r3, r2, r3
 80070be:	2b64      	cmp	r3, #100	@ 0x64
 80070c0:	d901      	bls.n	80070c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80070c2:	2303      	movs	r3, #3
 80070c4:	e207      	b.n	80074d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070c6:	4b5b      	ldr	r3, [pc, #364]	@ (8007234 <HAL_RCC_OscConfig+0x240>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d0f0      	beq.n	80070b4 <HAL_RCC_OscConfig+0xc0>
 80070d2:	e014      	b.n	80070fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070d4:	f7fb fcd4 	bl	8002a80 <HAL_GetTick>
 80070d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80070da:	e008      	b.n	80070ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80070dc:	f7fb fcd0 	bl	8002a80 <HAL_GetTick>
 80070e0:	4602      	mov	r2, r0
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	1ad3      	subs	r3, r2, r3
 80070e6:	2b64      	cmp	r3, #100	@ 0x64
 80070e8:	d901      	bls.n	80070ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80070ea:	2303      	movs	r3, #3
 80070ec:	e1f3      	b.n	80074d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80070ee:	4b51      	ldr	r3, [pc, #324]	@ (8007234 <HAL_RCC_OscConfig+0x240>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d1f0      	bne.n	80070dc <HAL_RCC_OscConfig+0xe8>
 80070fa:	e000      	b.n	80070fe <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f003 0302 	and.w	r3, r3, #2
 8007106:	2b00      	cmp	r3, #0
 8007108:	d063      	beq.n	80071d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800710a:	4b4a      	ldr	r3, [pc, #296]	@ (8007234 <HAL_RCC_OscConfig+0x240>)
 800710c:	689b      	ldr	r3, [r3, #8]
 800710e:	f003 030c 	and.w	r3, r3, #12
 8007112:	2b00      	cmp	r3, #0
 8007114:	d00b      	beq.n	800712e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007116:	4b47      	ldr	r3, [pc, #284]	@ (8007234 <HAL_RCC_OscConfig+0x240>)
 8007118:	689b      	ldr	r3, [r3, #8]
 800711a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800711e:	2b08      	cmp	r3, #8
 8007120:	d11c      	bne.n	800715c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007122:	4b44      	ldr	r3, [pc, #272]	@ (8007234 <HAL_RCC_OscConfig+0x240>)
 8007124:	685b      	ldr	r3, [r3, #4]
 8007126:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800712a:	2b00      	cmp	r3, #0
 800712c:	d116      	bne.n	800715c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800712e:	4b41      	ldr	r3, [pc, #260]	@ (8007234 <HAL_RCC_OscConfig+0x240>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f003 0302 	and.w	r3, r3, #2
 8007136:	2b00      	cmp	r3, #0
 8007138:	d005      	beq.n	8007146 <HAL_RCC_OscConfig+0x152>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	68db      	ldr	r3, [r3, #12]
 800713e:	2b01      	cmp	r3, #1
 8007140:	d001      	beq.n	8007146 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007142:	2301      	movs	r3, #1
 8007144:	e1c7      	b.n	80074d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007146:	4b3b      	ldr	r3, [pc, #236]	@ (8007234 <HAL_RCC_OscConfig+0x240>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	691b      	ldr	r3, [r3, #16]
 8007152:	00db      	lsls	r3, r3, #3
 8007154:	4937      	ldr	r1, [pc, #220]	@ (8007234 <HAL_RCC_OscConfig+0x240>)
 8007156:	4313      	orrs	r3, r2
 8007158:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800715a:	e03a      	b.n	80071d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	68db      	ldr	r3, [r3, #12]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d020      	beq.n	80071a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007164:	4b34      	ldr	r3, [pc, #208]	@ (8007238 <HAL_RCC_OscConfig+0x244>)
 8007166:	2201      	movs	r2, #1
 8007168:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800716a:	f7fb fc89 	bl	8002a80 <HAL_GetTick>
 800716e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007170:	e008      	b.n	8007184 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007172:	f7fb fc85 	bl	8002a80 <HAL_GetTick>
 8007176:	4602      	mov	r2, r0
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	1ad3      	subs	r3, r2, r3
 800717c:	2b02      	cmp	r3, #2
 800717e:	d901      	bls.n	8007184 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007180:	2303      	movs	r3, #3
 8007182:	e1a8      	b.n	80074d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007184:	4b2b      	ldr	r3, [pc, #172]	@ (8007234 <HAL_RCC_OscConfig+0x240>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f003 0302 	and.w	r3, r3, #2
 800718c:	2b00      	cmp	r3, #0
 800718e:	d0f0      	beq.n	8007172 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007190:	4b28      	ldr	r3, [pc, #160]	@ (8007234 <HAL_RCC_OscConfig+0x240>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	691b      	ldr	r3, [r3, #16]
 800719c:	00db      	lsls	r3, r3, #3
 800719e:	4925      	ldr	r1, [pc, #148]	@ (8007234 <HAL_RCC_OscConfig+0x240>)
 80071a0:	4313      	orrs	r3, r2
 80071a2:	600b      	str	r3, [r1, #0]
 80071a4:	e015      	b.n	80071d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80071a6:	4b24      	ldr	r3, [pc, #144]	@ (8007238 <HAL_RCC_OscConfig+0x244>)
 80071a8:	2200      	movs	r2, #0
 80071aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071ac:	f7fb fc68 	bl	8002a80 <HAL_GetTick>
 80071b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80071b2:	e008      	b.n	80071c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80071b4:	f7fb fc64 	bl	8002a80 <HAL_GetTick>
 80071b8:	4602      	mov	r2, r0
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	1ad3      	subs	r3, r2, r3
 80071be:	2b02      	cmp	r3, #2
 80071c0:	d901      	bls.n	80071c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80071c2:	2303      	movs	r3, #3
 80071c4:	e187      	b.n	80074d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80071c6:	4b1b      	ldr	r3, [pc, #108]	@ (8007234 <HAL_RCC_OscConfig+0x240>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f003 0302 	and.w	r3, r3, #2
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d1f0      	bne.n	80071b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f003 0308 	and.w	r3, r3, #8
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d036      	beq.n	800724c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	695b      	ldr	r3, [r3, #20]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d016      	beq.n	8007214 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80071e6:	4b15      	ldr	r3, [pc, #84]	@ (800723c <HAL_RCC_OscConfig+0x248>)
 80071e8:	2201      	movs	r2, #1
 80071ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071ec:	f7fb fc48 	bl	8002a80 <HAL_GetTick>
 80071f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80071f2:	e008      	b.n	8007206 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80071f4:	f7fb fc44 	bl	8002a80 <HAL_GetTick>
 80071f8:	4602      	mov	r2, r0
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	1ad3      	subs	r3, r2, r3
 80071fe:	2b02      	cmp	r3, #2
 8007200:	d901      	bls.n	8007206 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007202:	2303      	movs	r3, #3
 8007204:	e167      	b.n	80074d6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007206:	4b0b      	ldr	r3, [pc, #44]	@ (8007234 <HAL_RCC_OscConfig+0x240>)
 8007208:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800720a:	f003 0302 	and.w	r3, r3, #2
 800720e:	2b00      	cmp	r3, #0
 8007210:	d0f0      	beq.n	80071f4 <HAL_RCC_OscConfig+0x200>
 8007212:	e01b      	b.n	800724c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007214:	4b09      	ldr	r3, [pc, #36]	@ (800723c <HAL_RCC_OscConfig+0x248>)
 8007216:	2200      	movs	r2, #0
 8007218:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800721a:	f7fb fc31 	bl	8002a80 <HAL_GetTick>
 800721e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007220:	e00e      	b.n	8007240 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007222:	f7fb fc2d 	bl	8002a80 <HAL_GetTick>
 8007226:	4602      	mov	r2, r0
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	1ad3      	subs	r3, r2, r3
 800722c:	2b02      	cmp	r3, #2
 800722e:	d907      	bls.n	8007240 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007230:	2303      	movs	r3, #3
 8007232:	e150      	b.n	80074d6 <HAL_RCC_OscConfig+0x4e2>
 8007234:	40023800 	.word	0x40023800
 8007238:	42470000 	.word	0x42470000
 800723c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007240:	4b88      	ldr	r3, [pc, #544]	@ (8007464 <HAL_RCC_OscConfig+0x470>)
 8007242:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007244:	f003 0302 	and.w	r3, r3, #2
 8007248:	2b00      	cmp	r3, #0
 800724a:	d1ea      	bne.n	8007222 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f003 0304 	and.w	r3, r3, #4
 8007254:	2b00      	cmp	r3, #0
 8007256:	f000 8097 	beq.w	8007388 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800725a:	2300      	movs	r3, #0
 800725c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800725e:	4b81      	ldr	r3, [pc, #516]	@ (8007464 <HAL_RCC_OscConfig+0x470>)
 8007260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007262:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007266:	2b00      	cmp	r3, #0
 8007268:	d10f      	bne.n	800728a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800726a:	2300      	movs	r3, #0
 800726c:	60bb      	str	r3, [r7, #8]
 800726e:	4b7d      	ldr	r3, [pc, #500]	@ (8007464 <HAL_RCC_OscConfig+0x470>)
 8007270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007272:	4a7c      	ldr	r2, [pc, #496]	@ (8007464 <HAL_RCC_OscConfig+0x470>)
 8007274:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007278:	6413      	str	r3, [r2, #64]	@ 0x40
 800727a:	4b7a      	ldr	r3, [pc, #488]	@ (8007464 <HAL_RCC_OscConfig+0x470>)
 800727c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800727e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007282:	60bb      	str	r3, [r7, #8]
 8007284:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007286:	2301      	movs	r3, #1
 8007288:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800728a:	4b77      	ldr	r3, [pc, #476]	@ (8007468 <HAL_RCC_OscConfig+0x474>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007292:	2b00      	cmp	r3, #0
 8007294:	d118      	bne.n	80072c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007296:	4b74      	ldr	r3, [pc, #464]	@ (8007468 <HAL_RCC_OscConfig+0x474>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a73      	ldr	r2, [pc, #460]	@ (8007468 <HAL_RCC_OscConfig+0x474>)
 800729c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80072a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80072a2:	f7fb fbed 	bl	8002a80 <HAL_GetTick>
 80072a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072a8:	e008      	b.n	80072bc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80072aa:	f7fb fbe9 	bl	8002a80 <HAL_GetTick>
 80072ae:	4602      	mov	r2, r0
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	1ad3      	subs	r3, r2, r3
 80072b4:	2b02      	cmp	r3, #2
 80072b6:	d901      	bls.n	80072bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80072b8:	2303      	movs	r3, #3
 80072ba:	e10c      	b.n	80074d6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072bc:	4b6a      	ldr	r3, [pc, #424]	@ (8007468 <HAL_RCC_OscConfig+0x474>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d0f0      	beq.n	80072aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	689b      	ldr	r3, [r3, #8]
 80072cc:	2b01      	cmp	r3, #1
 80072ce:	d106      	bne.n	80072de <HAL_RCC_OscConfig+0x2ea>
 80072d0:	4b64      	ldr	r3, [pc, #400]	@ (8007464 <HAL_RCC_OscConfig+0x470>)
 80072d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072d4:	4a63      	ldr	r2, [pc, #396]	@ (8007464 <HAL_RCC_OscConfig+0x470>)
 80072d6:	f043 0301 	orr.w	r3, r3, #1
 80072da:	6713      	str	r3, [r2, #112]	@ 0x70
 80072dc:	e01c      	b.n	8007318 <HAL_RCC_OscConfig+0x324>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	689b      	ldr	r3, [r3, #8]
 80072e2:	2b05      	cmp	r3, #5
 80072e4:	d10c      	bne.n	8007300 <HAL_RCC_OscConfig+0x30c>
 80072e6:	4b5f      	ldr	r3, [pc, #380]	@ (8007464 <HAL_RCC_OscConfig+0x470>)
 80072e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072ea:	4a5e      	ldr	r2, [pc, #376]	@ (8007464 <HAL_RCC_OscConfig+0x470>)
 80072ec:	f043 0304 	orr.w	r3, r3, #4
 80072f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80072f2:	4b5c      	ldr	r3, [pc, #368]	@ (8007464 <HAL_RCC_OscConfig+0x470>)
 80072f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072f6:	4a5b      	ldr	r2, [pc, #364]	@ (8007464 <HAL_RCC_OscConfig+0x470>)
 80072f8:	f043 0301 	orr.w	r3, r3, #1
 80072fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80072fe:	e00b      	b.n	8007318 <HAL_RCC_OscConfig+0x324>
 8007300:	4b58      	ldr	r3, [pc, #352]	@ (8007464 <HAL_RCC_OscConfig+0x470>)
 8007302:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007304:	4a57      	ldr	r2, [pc, #348]	@ (8007464 <HAL_RCC_OscConfig+0x470>)
 8007306:	f023 0301 	bic.w	r3, r3, #1
 800730a:	6713      	str	r3, [r2, #112]	@ 0x70
 800730c:	4b55      	ldr	r3, [pc, #340]	@ (8007464 <HAL_RCC_OscConfig+0x470>)
 800730e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007310:	4a54      	ldr	r2, [pc, #336]	@ (8007464 <HAL_RCC_OscConfig+0x470>)
 8007312:	f023 0304 	bic.w	r3, r3, #4
 8007316:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	689b      	ldr	r3, [r3, #8]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d015      	beq.n	800734c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007320:	f7fb fbae 	bl	8002a80 <HAL_GetTick>
 8007324:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007326:	e00a      	b.n	800733e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007328:	f7fb fbaa 	bl	8002a80 <HAL_GetTick>
 800732c:	4602      	mov	r2, r0
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	1ad3      	subs	r3, r2, r3
 8007332:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007336:	4293      	cmp	r3, r2
 8007338:	d901      	bls.n	800733e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800733a:	2303      	movs	r3, #3
 800733c:	e0cb      	b.n	80074d6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800733e:	4b49      	ldr	r3, [pc, #292]	@ (8007464 <HAL_RCC_OscConfig+0x470>)
 8007340:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007342:	f003 0302 	and.w	r3, r3, #2
 8007346:	2b00      	cmp	r3, #0
 8007348:	d0ee      	beq.n	8007328 <HAL_RCC_OscConfig+0x334>
 800734a:	e014      	b.n	8007376 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800734c:	f7fb fb98 	bl	8002a80 <HAL_GetTick>
 8007350:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007352:	e00a      	b.n	800736a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007354:	f7fb fb94 	bl	8002a80 <HAL_GetTick>
 8007358:	4602      	mov	r2, r0
 800735a:	693b      	ldr	r3, [r7, #16]
 800735c:	1ad3      	subs	r3, r2, r3
 800735e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007362:	4293      	cmp	r3, r2
 8007364:	d901      	bls.n	800736a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007366:	2303      	movs	r3, #3
 8007368:	e0b5      	b.n	80074d6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800736a:	4b3e      	ldr	r3, [pc, #248]	@ (8007464 <HAL_RCC_OscConfig+0x470>)
 800736c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800736e:	f003 0302 	and.w	r3, r3, #2
 8007372:	2b00      	cmp	r3, #0
 8007374:	d1ee      	bne.n	8007354 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007376:	7dfb      	ldrb	r3, [r7, #23]
 8007378:	2b01      	cmp	r3, #1
 800737a:	d105      	bne.n	8007388 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800737c:	4b39      	ldr	r3, [pc, #228]	@ (8007464 <HAL_RCC_OscConfig+0x470>)
 800737e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007380:	4a38      	ldr	r2, [pc, #224]	@ (8007464 <HAL_RCC_OscConfig+0x470>)
 8007382:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007386:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	699b      	ldr	r3, [r3, #24]
 800738c:	2b00      	cmp	r3, #0
 800738e:	f000 80a1 	beq.w	80074d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007392:	4b34      	ldr	r3, [pc, #208]	@ (8007464 <HAL_RCC_OscConfig+0x470>)
 8007394:	689b      	ldr	r3, [r3, #8]
 8007396:	f003 030c 	and.w	r3, r3, #12
 800739a:	2b08      	cmp	r3, #8
 800739c:	d05c      	beq.n	8007458 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	699b      	ldr	r3, [r3, #24]
 80073a2:	2b02      	cmp	r3, #2
 80073a4:	d141      	bne.n	800742a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80073a6:	4b31      	ldr	r3, [pc, #196]	@ (800746c <HAL_RCC_OscConfig+0x478>)
 80073a8:	2200      	movs	r2, #0
 80073aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073ac:	f7fb fb68 	bl	8002a80 <HAL_GetTick>
 80073b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80073b2:	e008      	b.n	80073c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073b4:	f7fb fb64 	bl	8002a80 <HAL_GetTick>
 80073b8:	4602      	mov	r2, r0
 80073ba:	693b      	ldr	r3, [r7, #16]
 80073bc:	1ad3      	subs	r3, r2, r3
 80073be:	2b02      	cmp	r3, #2
 80073c0:	d901      	bls.n	80073c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80073c2:	2303      	movs	r3, #3
 80073c4:	e087      	b.n	80074d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80073c6:	4b27      	ldr	r3, [pc, #156]	@ (8007464 <HAL_RCC_OscConfig+0x470>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d1f0      	bne.n	80073b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	69da      	ldr	r2, [r3, #28]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6a1b      	ldr	r3, [r3, #32]
 80073da:	431a      	orrs	r2, r3
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073e0:	019b      	lsls	r3, r3, #6
 80073e2:	431a      	orrs	r2, r3
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073e8:	085b      	lsrs	r3, r3, #1
 80073ea:	3b01      	subs	r3, #1
 80073ec:	041b      	lsls	r3, r3, #16
 80073ee:	431a      	orrs	r2, r3
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073f4:	061b      	lsls	r3, r3, #24
 80073f6:	491b      	ldr	r1, [pc, #108]	@ (8007464 <HAL_RCC_OscConfig+0x470>)
 80073f8:	4313      	orrs	r3, r2
 80073fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80073fc:	4b1b      	ldr	r3, [pc, #108]	@ (800746c <HAL_RCC_OscConfig+0x478>)
 80073fe:	2201      	movs	r2, #1
 8007400:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007402:	f7fb fb3d 	bl	8002a80 <HAL_GetTick>
 8007406:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007408:	e008      	b.n	800741c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800740a:	f7fb fb39 	bl	8002a80 <HAL_GetTick>
 800740e:	4602      	mov	r2, r0
 8007410:	693b      	ldr	r3, [r7, #16]
 8007412:	1ad3      	subs	r3, r2, r3
 8007414:	2b02      	cmp	r3, #2
 8007416:	d901      	bls.n	800741c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007418:	2303      	movs	r3, #3
 800741a:	e05c      	b.n	80074d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800741c:	4b11      	ldr	r3, [pc, #68]	@ (8007464 <HAL_RCC_OscConfig+0x470>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007424:	2b00      	cmp	r3, #0
 8007426:	d0f0      	beq.n	800740a <HAL_RCC_OscConfig+0x416>
 8007428:	e054      	b.n	80074d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800742a:	4b10      	ldr	r3, [pc, #64]	@ (800746c <HAL_RCC_OscConfig+0x478>)
 800742c:	2200      	movs	r2, #0
 800742e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007430:	f7fb fb26 	bl	8002a80 <HAL_GetTick>
 8007434:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007436:	e008      	b.n	800744a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007438:	f7fb fb22 	bl	8002a80 <HAL_GetTick>
 800743c:	4602      	mov	r2, r0
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	1ad3      	subs	r3, r2, r3
 8007442:	2b02      	cmp	r3, #2
 8007444:	d901      	bls.n	800744a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007446:	2303      	movs	r3, #3
 8007448:	e045      	b.n	80074d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800744a:	4b06      	ldr	r3, [pc, #24]	@ (8007464 <HAL_RCC_OscConfig+0x470>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007452:	2b00      	cmp	r3, #0
 8007454:	d1f0      	bne.n	8007438 <HAL_RCC_OscConfig+0x444>
 8007456:	e03d      	b.n	80074d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	699b      	ldr	r3, [r3, #24]
 800745c:	2b01      	cmp	r3, #1
 800745e:	d107      	bne.n	8007470 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007460:	2301      	movs	r3, #1
 8007462:	e038      	b.n	80074d6 <HAL_RCC_OscConfig+0x4e2>
 8007464:	40023800 	.word	0x40023800
 8007468:	40007000 	.word	0x40007000
 800746c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007470:	4b1b      	ldr	r3, [pc, #108]	@ (80074e0 <HAL_RCC_OscConfig+0x4ec>)
 8007472:	685b      	ldr	r3, [r3, #4]
 8007474:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	699b      	ldr	r3, [r3, #24]
 800747a:	2b01      	cmp	r3, #1
 800747c:	d028      	beq.n	80074d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007488:	429a      	cmp	r2, r3
 800748a:	d121      	bne.n	80074d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007496:	429a      	cmp	r2, r3
 8007498:	d11a      	bne.n	80074d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800749a:	68fa      	ldr	r2, [r7, #12]
 800749c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80074a0:	4013      	ands	r3, r2
 80074a2:	687a      	ldr	r2, [r7, #4]
 80074a4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80074a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d111      	bne.n	80074d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074b6:	085b      	lsrs	r3, r3, #1
 80074b8:	3b01      	subs	r3, #1
 80074ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80074bc:	429a      	cmp	r2, r3
 80074be:	d107      	bne.n	80074d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80074cc:	429a      	cmp	r2, r3
 80074ce:	d001      	beq.n	80074d4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80074d0:	2301      	movs	r3, #1
 80074d2:	e000      	b.n	80074d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80074d4:	2300      	movs	r3, #0
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3718      	adds	r7, #24
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}
 80074de:	bf00      	nop
 80074e0:	40023800 	.word	0x40023800

080074e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b084      	sub	sp, #16
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
 80074ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d101      	bne.n	80074f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80074f4:	2301      	movs	r3, #1
 80074f6:	e0cc      	b.n	8007692 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80074f8:	4b68      	ldr	r3, [pc, #416]	@ (800769c <HAL_RCC_ClockConfig+0x1b8>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f003 0307 	and.w	r3, r3, #7
 8007500:	683a      	ldr	r2, [r7, #0]
 8007502:	429a      	cmp	r2, r3
 8007504:	d90c      	bls.n	8007520 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007506:	4b65      	ldr	r3, [pc, #404]	@ (800769c <HAL_RCC_ClockConfig+0x1b8>)
 8007508:	683a      	ldr	r2, [r7, #0]
 800750a:	b2d2      	uxtb	r2, r2
 800750c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800750e:	4b63      	ldr	r3, [pc, #396]	@ (800769c <HAL_RCC_ClockConfig+0x1b8>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f003 0307 	and.w	r3, r3, #7
 8007516:	683a      	ldr	r2, [r7, #0]
 8007518:	429a      	cmp	r2, r3
 800751a:	d001      	beq.n	8007520 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800751c:	2301      	movs	r3, #1
 800751e:	e0b8      	b.n	8007692 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f003 0302 	and.w	r3, r3, #2
 8007528:	2b00      	cmp	r3, #0
 800752a:	d020      	beq.n	800756e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f003 0304 	and.w	r3, r3, #4
 8007534:	2b00      	cmp	r3, #0
 8007536:	d005      	beq.n	8007544 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007538:	4b59      	ldr	r3, [pc, #356]	@ (80076a0 <HAL_RCC_ClockConfig+0x1bc>)
 800753a:	689b      	ldr	r3, [r3, #8]
 800753c:	4a58      	ldr	r2, [pc, #352]	@ (80076a0 <HAL_RCC_ClockConfig+0x1bc>)
 800753e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007542:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f003 0308 	and.w	r3, r3, #8
 800754c:	2b00      	cmp	r3, #0
 800754e:	d005      	beq.n	800755c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007550:	4b53      	ldr	r3, [pc, #332]	@ (80076a0 <HAL_RCC_ClockConfig+0x1bc>)
 8007552:	689b      	ldr	r3, [r3, #8]
 8007554:	4a52      	ldr	r2, [pc, #328]	@ (80076a0 <HAL_RCC_ClockConfig+0x1bc>)
 8007556:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800755a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800755c:	4b50      	ldr	r3, [pc, #320]	@ (80076a0 <HAL_RCC_ClockConfig+0x1bc>)
 800755e:	689b      	ldr	r3, [r3, #8]
 8007560:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	689b      	ldr	r3, [r3, #8]
 8007568:	494d      	ldr	r1, [pc, #308]	@ (80076a0 <HAL_RCC_ClockConfig+0x1bc>)
 800756a:	4313      	orrs	r3, r2
 800756c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f003 0301 	and.w	r3, r3, #1
 8007576:	2b00      	cmp	r3, #0
 8007578:	d044      	beq.n	8007604 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	685b      	ldr	r3, [r3, #4]
 800757e:	2b01      	cmp	r3, #1
 8007580:	d107      	bne.n	8007592 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007582:	4b47      	ldr	r3, [pc, #284]	@ (80076a0 <HAL_RCC_ClockConfig+0x1bc>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800758a:	2b00      	cmp	r3, #0
 800758c:	d119      	bne.n	80075c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800758e:	2301      	movs	r3, #1
 8007590:	e07f      	b.n	8007692 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	685b      	ldr	r3, [r3, #4]
 8007596:	2b02      	cmp	r3, #2
 8007598:	d003      	beq.n	80075a2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800759e:	2b03      	cmp	r3, #3
 80075a0:	d107      	bne.n	80075b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80075a2:	4b3f      	ldr	r3, [pc, #252]	@ (80076a0 <HAL_RCC_ClockConfig+0x1bc>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d109      	bne.n	80075c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80075ae:	2301      	movs	r3, #1
 80075b0:	e06f      	b.n	8007692 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80075b2:	4b3b      	ldr	r3, [pc, #236]	@ (80076a0 <HAL_RCC_ClockConfig+0x1bc>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f003 0302 	and.w	r3, r3, #2
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d101      	bne.n	80075c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80075be:	2301      	movs	r3, #1
 80075c0:	e067      	b.n	8007692 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80075c2:	4b37      	ldr	r3, [pc, #220]	@ (80076a0 <HAL_RCC_ClockConfig+0x1bc>)
 80075c4:	689b      	ldr	r3, [r3, #8]
 80075c6:	f023 0203 	bic.w	r2, r3, #3
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	685b      	ldr	r3, [r3, #4]
 80075ce:	4934      	ldr	r1, [pc, #208]	@ (80076a0 <HAL_RCC_ClockConfig+0x1bc>)
 80075d0:	4313      	orrs	r3, r2
 80075d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80075d4:	f7fb fa54 	bl	8002a80 <HAL_GetTick>
 80075d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80075da:	e00a      	b.n	80075f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80075dc:	f7fb fa50 	bl	8002a80 <HAL_GetTick>
 80075e0:	4602      	mov	r2, r0
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	1ad3      	subs	r3, r2, r3
 80075e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d901      	bls.n	80075f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80075ee:	2303      	movs	r3, #3
 80075f0:	e04f      	b.n	8007692 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80075f2:	4b2b      	ldr	r3, [pc, #172]	@ (80076a0 <HAL_RCC_ClockConfig+0x1bc>)
 80075f4:	689b      	ldr	r3, [r3, #8]
 80075f6:	f003 020c 	and.w	r2, r3, #12
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	685b      	ldr	r3, [r3, #4]
 80075fe:	009b      	lsls	r3, r3, #2
 8007600:	429a      	cmp	r2, r3
 8007602:	d1eb      	bne.n	80075dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007604:	4b25      	ldr	r3, [pc, #148]	@ (800769c <HAL_RCC_ClockConfig+0x1b8>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f003 0307 	and.w	r3, r3, #7
 800760c:	683a      	ldr	r2, [r7, #0]
 800760e:	429a      	cmp	r2, r3
 8007610:	d20c      	bcs.n	800762c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007612:	4b22      	ldr	r3, [pc, #136]	@ (800769c <HAL_RCC_ClockConfig+0x1b8>)
 8007614:	683a      	ldr	r2, [r7, #0]
 8007616:	b2d2      	uxtb	r2, r2
 8007618:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800761a:	4b20      	ldr	r3, [pc, #128]	@ (800769c <HAL_RCC_ClockConfig+0x1b8>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f003 0307 	and.w	r3, r3, #7
 8007622:	683a      	ldr	r2, [r7, #0]
 8007624:	429a      	cmp	r2, r3
 8007626:	d001      	beq.n	800762c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007628:	2301      	movs	r3, #1
 800762a:	e032      	b.n	8007692 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f003 0304 	and.w	r3, r3, #4
 8007634:	2b00      	cmp	r3, #0
 8007636:	d008      	beq.n	800764a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007638:	4b19      	ldr	r3, [pc, #100]	@ (80076a0 <HAL_RCC_ClockConfig+0x1bc>)
 800763a:	689b      	ldr	r3, [r3, #8]
 800763c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	68db      	ldr	r3, [r3, #12]
 8007644:	4916      	ldr	r1, [pc, #88]	@ (80076a0 <HAL_RCC_ClockConfig+0x1bc>)
 8007646:	4313      	orrs	r3, r2
 8007648:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f003 0308 	and.w	r3, r3, #8
 8007652:	2b00      	cmp	r3, #0
 8007654:	d009      	beq.n	800766a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007656:	4b12      	ldr	r3, [pc, #72]	@ (80076a0 <HAL_RCC_ClockConfig+0x1bc>)
 8007658:	689b      	ldr	r3, [r3, #8]
 800765a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	691b      	ldr	r3, [r3, #16]
 8007662:	00db      	lsls	r3, r3, #3
 8007664:	490e      	ldr	r1, [pc, #56]	@ (80076a0 <HAL_RCC_ClockConfig+0x1bc>)
 8007666:	4313      	orrs	r3, r2
 8007668:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800766a:	f000 f821 	bl	80076b0 <HAL_RCC_GetSysClockFreq>
 800766e:	4602      	mov	r2, r0
 8007670:	4b0b      	ldr	r3, [pc, #44]	@ (80076a0 <HAL_RCC_ClockConfig+0x1bc>)
 8007672:	689b      	ldr	r3, [r3, #8]
 8007674:	091b      	lsrs	r3, r3, #4
 8007676:	f003 030f 	and.w	r3, r3, #15
 800767a:	490a      	ldr	r1, [pc, #40]	@ (80076a4 <HAL_RCC_ClockConfig+0x1c0>)
 800767c:	5ccb      	ldrb	r3, [r1, r3]
 800767e:	fa22 f303 	lsr.w	r3, r2, r3
 8007682:	4a09      	ldr	r2, [pc, #36]	@ (80076a8 <HAL_RCC_ClockConfig+0x1c4>)
 8007684:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8007686:	4b09      	ldr	r3, [pc, #36]	@ (80076ac <HAL_RCC_ClockConfig+0x1c8>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4618      	mov	r0, r3
 800768c:	f7fb f9b4 	bl	80029f8 <HAL_InitTick>

  return HAL_OK;
 8007690:	2300      	movs	r3, #0
}
 8007692:	4618      	mov	r0, r3
 8007694:	3710      	adds	r7, #16
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}
 800769a:	bf00      	nop
 800769c:	40023c00 	.word	0x40023c00
 80076a0:	40023800 	.word	0x40023800
 80076a4:	08010200 	.word	0x08010200
 80076a8:	20000004 	.word	0x20000004
 80076ac:	20000008 	.word	0x20000008

080076b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80076b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80076b4:	b094      	sub	sp, #80	@ 0x50
 80076b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80076b8:	2300      	movs	r3, #0
 80076ba:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80076bc:	2300      	movs	r3, #0
 80076be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80076c0:	2300      	movs	r3, #0
 80076c2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80076c4:	2300      	movs	r3, #0
 80076c6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80076c8:	4b79      	ldr	r3, [pc, #484]	@ (80078b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80076ca:	689b      	ldr	r3, [r3, #8]
 80076cc:	f003 030c 	and.w	r3, r3, #12
 80076d0:	2b08      	cmp	r3, #8
 80076d2:	d00d      	beq.n	80076f0 <HAL_RCC_GetSysClockFreq+0x40>
 80076d4:	2b08      	cmp	r3, #8
 80076d6:	f200 80e1 	bhi.w	800789c <HAL_RCC_GetSysClockFreq+0x1ec>
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d002      	beq.n	80076e4 <HAL_RCC_GetSysClockFreq+0x34>
 80076de:	2b04      	cmp	r3, #4
 80076e0:	d003      	beq.n	80076ea <HAL_RCC_GetSysClockFreq+0x3a>
 80076e2:	e0db      	b.n	800789c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80076e4:	4b73      	ldr	r3, [pc, #460]	@ (80078b4 <HAL_RCC_GetSysClockFreq+0x204>)
 80076e6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80076e8:	e0db      	b.n	80078a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80076ea:	4b73      	ldr	r3, [pc, #460]	@ (80078b8 <HAL_RCC_GetSysClockFreq+0x208>)
 80076ec:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80076ee:	e0d8      	b.n	80078a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80076f0:	4b6f      	ldr	r3, [pc, #444]	@ (80078b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80076f8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80076fa:	4b6d      	ldr	r3, [pc, #436]	@ (80078b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007702:	2b00      	cmp	r3, #0
 8007704:	d063      	beq.n	80077ce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007706:	4b6a      	ldr	r3, [pc, #424]	@ (80078b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007708:	685b      	ldr	r3, [r3, #4]
 800770a:	099b      	lsrs	r3, r3, #6
 800770c:	2200      	movs	r2, #0
 800770e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007710:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8007712:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007714:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007718:	633b      	str	r3, [r7, #48]	@ 0x30
 800771a:	2300      	movs	r3, #0
 800771c:	637b      	str	r3, [r7, #52]	@ 0x34
 800771e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8007722:	4622      	mov	r2, r4
 8007724:	462b      	mov	r3, r5
 8007726:	f04f 0000 	mov.w	r0, #0
 800772a:	f04f 0100 	mov.w	r1, #0
 800772e:	0159      	lsls	r1, r3, #5
 8007730:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007734:	0150      	lsls	r0, r2, #5
 8007736:	4602      	mov	r2, r0
 8007738:	460b      	mov	r3, r1
 800773a:	4621      	mov	r1, r4
 800773c:	1a51      	subs	r1, r2, r1
 800773e:	6139      	str	r1, [r7, #16]
 8007740:	4629      	mov	r1, r5
 8007742:	eb63 0301 	sbc.w	r3, r3, r1
 8007746:	617b      	str	r3, [r7, #20]
 8007748:	f04f 0200 	mov.w	r2, #0
 800774c:	f04f 0300 	mov.w	r3, #0
 8007750:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007754:	4659      	mov	r1, fp
 8007756:	018b      	lsls	r3, r1, #6
 8007758:	4651      	mov	r1, sl
 800775a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800775e:	4651      	mov	r1, sl
 8007760:	018a      	lsls	r2, r1, #6
 8007762:	4651      	mov	r1, sl
 8007764:	ebb2 0801 	subs.w	r8, r2, r1
 8007768:	4659      	mov	r1, fp
 800776a:	eb63 0901 	sbc.w	r9, r3, r1
 800776e:	f04f 0200 	mov.w	r2, #0
 8007772:	f04f 0300 	mov.w	r3, #0
 8007776:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800777a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800777e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007782:	4690      	mov	r8, r2
 8007784:	4699      	mov	r9, r3
 8007786:	4623      	mov	r3, r4
 8007788:	eb18 0303 	adds.w	r3, r8, r3
 800778c:	60bb      	str	r3, [r7, #8]
 800778e:	462b      	mov	r3, r5
 8007790:	eb49 0303 	adc.w	r3, r9, r3
 8007794:	60fb      	str	r3, [r7, #12]
 8007796:	f04f 0200 	mov.w	r2, #0
 800779a:	f04f 0300 	mov.w	r3, #0
 800779e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80077a2:	4629      	mov	r1, r5
 80077a4:	024b      	lsls	r3, r1, #9
 80077a6:	4621      	mov	r1, r4
 80077a8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80077ac:	4621      	mov	r1, r4
 80077ae:	024a      	lsls	r2, r1, #9
 80077b0:	4610      	mov	r0, r2
 80077b2:	4619      	mov	r1, r3
 80077b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80077b6:	2200      	movs	r2, #0
 80077b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80077ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80077bc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80077c0:	f7f9 fa62 	bl	8000c88 <__aeabi_uldivmod>
 80077c4:	4602      	mov	r2, r0
 80077c6:	460b      	mov	r3, r1
 80077c8:	4613      	mov	r3, r2
 80077ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80077cc:	e058      	b.n	8007880 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80077ce:	4b38      	ldr	r3, [pc, #224]	@ (80078b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	099b      	lsrs	r3, r3, #6
 80077d4:	2200      	movs	r2, #0
 80077d6:	4618      	mov	r0, r3
 80077d8:	4611      	mov	r1, r2
 80077da:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80077de:	623b      	str	r3, [r7, #32]
 80077e0:	2300      	movs	r3, #0
 80077e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80077e4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80077e8:	4642      	mov	r2, r8
 80077ea:	464b      	mov	r3, r9
 80077ec:	f04f 0000 	mov.w	r0, #0
 80077f0:	f04f 0100 	mov.w	r1, #0
 80077f4:	0159      	lsls	r1, r3, #5
 80077f6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80077fa:	0150      	lsls	r0, r2, #5
 80077fc:	4602      	mov	r2, r0
 80077fe:	460b      	mov	r3, r1
 8007800:	4641      	mov	r1, r8
 8007802:	ebb2 0a01 	subs.w	sl, r2, r1
 8007806:	4649      	mov	r1, r9
 8007808:	eb63 0b01 	sbc.w	fp, r3, r1
 800780c:	f04f 0200 	mov.w	r2, #0
 8007810:	f04f 0300 	mov.w	r3, #0
 8007814:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007818:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800781c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007820:	ebb2 040a 	subs.w	r4, r2, sl
 8007824:	eb63 050b 	sbc.w	r5, r3, fp
 8007828:	f04f 0200 	mov.w	r2, #0
 800782c:	f04f 0300 	mov.w	r3, #0
 8007830:	00eb      	lsls	r3, r5, #3
 8007832:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007836:	00e2      	lsls	r2, r4, #3
 8007838:	4614      	mov	r4, r2
 800783a:	461d      	mov	r5, r3
 800783c:	4643      	mov	r3, r8
 800783e:	18e3      	adds	r3, r4, r3
 8007840:	603b      	str	r3, [r7, #0]
 8007842:	464b      	mov	r3, r9
 8007844:	eb45 0303 	adc.w	r3, r5, r3
 8007848:	607b      	str	r3, [r7, #4]
 800784a:	f04f 0200 	mov.w	r2, #0
 800784e:	f04f 0300 	mov.w	r3, #0
 8007852:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007856:	4629      	mov	r1, r5
 8007858:	028b      	lsls	r3, r1, #10
 800785a:	4621      	mov	r1, r4
 800785c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007860:	4621      	mov	r1, r4
 8007862:	028a      	lsls	r2, r1, #10
 8007864:	4610      	mov	r0, r2
 8007866:	4619      	mov	r1, r3
 8007868:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800786a:	2200      	movs	r2, #0
 800786c:	61bb      	str	r3, [r7, #24]
 800786e:	61fa      	str	r2, [r7, #28]
 8007870:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007874:	f7f9 fa08 	bl	8000c88 <__aeabi_uldivmod>
 8007878:	4602      	mov	r2, r0
 800787a:	460b      	mov	r3, r1
 800787c:	4613      	mov	r3, r2
 800787e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8007880:	4b0b      	ldr	r3, [pc, #44]	@ (80078b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007882:	685b      	ldr	r3, [r3, #4]
 8007884:	0c1b      	lsrs	r3, r3, #16
 8007886:	f003 0303 	and.w	r3, r3, #3
 800788a:	3301      	adds	r3, #1
 800788c:	005b      	lsls	r3, r3, #1
 800788e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8007890:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007892:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007894:	fbb2 f3f3 	udiv	r3, r2, r3
 8007898:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800789a:	e002      	b.n	80078a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800789c:	4b05      	ldr	r3, [pc, #20]	@ (80078b4 <HAL_RCC_GetSysClockFreq+0x204>)
 800789e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80078a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80078a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	3750      	adds	r7, #80	@ 0x50
 80078a8:	46bd      	mov	sp, r7
 80078aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80078ae:	bf00      	nop
 80078b0:	40023800 	.word	0x40023800
 80078b4:	00f42400 	.word	0x00f42400
 80078b8:	007a1200 	.word	0x007a1200

080078bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80078bc:	b480      	push	{r7}
 80078be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80078c0:	4b03      	ldr	r3, [pc, #12]	@ (80078d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80078c2:	681b      	ldr	r3, [r3, #0]
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	46bd      	mov	sp, r7
 80078c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078cc:	4770      	bx	lr
 80078ce:	bf00      	nop
 80078d0:	20000004 	.word	0x20000004

080078d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80078d8:	f7ff fff0 	bl	80078bc <HAL_RCC_GetHCLKFreq>
 80078dc:	4602      	mov	r2, r0
 80078de:	4b05      	ldr	r3, [pc, #20]	@ (80078f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80078e0:	689b      	ldr	r3, [r3, #8]
 80078e2:	0a9b      	lsrs	r3, r3, #10
 80078e4:	f003 0307 	and.w	r3, r3, #7
 80078e8:	4903      	ldr	r1, [pc, #12]	@ (80078f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80078ea:	5ccb      	ldrb	r3, [r1, r3]
 80078ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	bd80      	pop	{r7, pc}
 80078f4:	40023800 	.word	0x40023800
 80078f8:	08010210 	.word	0x08010210

080078fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007900:	f7ff ffdc 	bl	80078bc <HAL_RCC_GetHCLKFreq>
 8007904:	4602      	mov	r2, r0
 8007906:	4b05      	ldr	r3, [pc, #20]	@ (800791c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007908:	689b      	ldr	r3, [r3, #8]
 800790a:	0b5b      	lsrs	r3, r3, #13
 800790c:	f003 0307 	and.w	r3, r3, #7
 8007910:	4903      	ldr	r1, [pc, #12]	@ (8007920 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007912:	5ccb      	ldrb	r3, [r1, r3]
 8007914:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007918:	4618      	mov	r0, r3
 800791a:	bd80      	pop	{r7, pc}
 800791c:	40023800 	.word	0x40023800
 8007920:	08010210 	.word	0x08010210

08007924 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b086      	sub	sp, #24
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800792c:	2300      	movs	r3, #0
 800792e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007930:	2300      	movs	r3, #0
 8007932:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f003 0301 	and.w	r3, r3, #1
 800793c:	2b00      	cmp	r3, #0
 800793e:	d105      	bne.n	800794c <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007948:	2b00      	cmp	r3, #0
 800794a:	d035      	beq.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800794c:	4b62      	ldr	r3, [pc, #392]	@ (8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800794e:	2200      	movs	r2, #0
 8007950:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007952:	f7fb f895 	bl	8002a80 <HAL_GetTick>
 8007956:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007958:	e008      	b.n	800796c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800795a:	f7fb f891 	bl	8002a80 <HAL_GetTick>
 800795e:	4602      	mov	r2, r0
 8007960:	697b      	ldr	r3, [r7, #20]
 8007962:	1ad3      	subs	r3, r2, r3
 8007964:	2b02      	cmp	r3, #2
 8007966:	d901      	bls.n	800796c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007968:	2303      	movs	r3, #3
 800796a:	e0b0      	b.n	8007ace <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800796c:	4b5b      	ldr	r3, [pc, #364]	@ (8007adc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007974:	2b00      	cmp	r3, #0
 8007976:	d1f0      	bne.n	800795a <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	685b      	ldr	r3, [r3, #4]
 800797c:	019a      	lsls	r2, r3, #6
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	689b      	ldr	r3, [r3, #8]
 8007982:	071b      	lsls	r3, r3, #28
 8007984:	4955      	ldr	r1, [pc, #340]	@ (8007adc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007986:	4313      	orrs	r3, r2
 8007988:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800798c:	4b52      	ldr	r3, [pc, #328]	@ (8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800798e:	2201      	movs	r2, #1
 8007990:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007992:	f7fb f875 	bl	8002a80 <HAL_GetTick>
 8007996:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007998:	e008      	b.n	80079ac <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800799a:	f7fb f871 	bl	8002a80 <HAL_GetTick>
 800799e:	4602      	mov	r2, r0
 80079a0:	697b      	ldr	r3, [r7, #20]
 80079a2:	1ad3      	subs	r3, r2, r3
 80079a4:	2b02      	cmp	r3, #2
 80079a6:	d901      	bls.n	80079ac <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80079a8:	2303      	movs	r3, #3
 80079aa:	e090      	b.n	8007ace <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80079ac:	4b4b      	ldr	r3, [pc, #300]	@ (8007adc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d0f0      	beq.n	800799a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f003 0302 	and.w	r3, r3, #2
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	f000 8083 	beq.w	8007acc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80079c6:	2300      	movs	r3, #0
 80079c8:	60fb      	str	r3, [r7, #12]
 80079ca:	4b44      	ldr	r3, [pc, #272]	@ (8007adc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80079cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079ce:	4a43      	ldr	r2, [pc, #268]	@ (8007adc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80079d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80079d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80079d6:	4b41      	ldr	r3, [pc, #260]	@ (8007adc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80079d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80079de:	60fb      	str	r3, [r7, #12]
 80079e0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80079e2:	4b3f      	ldr	r3, [pc, #252]	@ (8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4a3e      	ldr	r2, [pc, #248]	@ (8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80079e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80079ec:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80079ee:	f7fb f847 	bl	8002a80 <HAL_GetTick>
 80079f2:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80079f4:	e008      	b.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80079f6:	f7fb f843 	bl	8002a80 <HAL_GetTick>
 80079fa:	4602      	mov	r2, r0
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	1ad3      	subs	r3, r2, r3
 8007a00:	2b02      	cmp	r3, #2
 8007a02:	d901      	bls.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8007a04:	2303      	movs	r3, #3
 8007a06:	e062      	b.n	8007ace <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8007a08:	4b35      	ldr	r3, [pc, #212]	@ (8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d0f0      	beq.n	80079f6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007a14:	4b31      	ldr	r3, [pc, #196]	@ (8007adc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007a16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a18:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a1c:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d02f      	beq.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	68db      	ldr	r3, [r3, #12]
 8007a28:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a2c:	693a      	ldr	r2, [r7, #16]
 8007a2e:	429a      	cmp	r2, r3
 8007a30:	d028      	beq.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007a32:	4b2a      	ldr	r3, [pc, #168]	@ (8007adc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007a34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a3a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007a3c:	4b29      	ldr	r3, [pc, #164]	@ (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007a3e:	2201      	movs	r2, #1
 8007a40:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007a42:	4b28      	ldr	r3, [pc, #160]	@ (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007a44:	2200      	movs	r2, #0
 8007a46:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007a48:	4a24      	ldr	r2, [pc, #144]	@ (8007adc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007a4a:	693b      	ldr	r3, [r7, #16]
 8007a4c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007a4e:	4b23      	ldr	r3, [pc, #140]	@ (8007adc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007a50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a52:	f003 0301 	and.w	r3, r3, #1
 8007a56:	2b01      	cmp	r3, #1
 8007a58:	d114      	bne.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007a5a:	f7fb f811 	bl	8002a80 <HAL_GetTick>
 8007a5e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a60:	e00a      	b.n	8007a78 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a62:	f7fb f80d 	bl	8002a80 <HAL_GetTick>
 8007a66:	4602      	mov	r2, r0
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	1ad3      	subs	r3, r2, r3
 8007a6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d901      	bls.n	8007a78 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8007a74:	2303      	movs	r3, #3
 8007a76:	e02a      	b.n	8007ace <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a78:	4b18      	ldr	r3, [pc, #96]	@ (8007adc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007a7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a7c:	f003 0302 	and.w	r3, r3, #2
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d0ee      	beq.n	8007a62 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	68db      	ldr	r3, [r3, #12]
 8007a88:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a8c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007a90:	d10d      	bne.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8007a92:	4b12      	ldr	r3, [pc, #72]	@ (8007adc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007a94:	689b      	ldr	r3, [r3, #8]
 8007a96:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	68db      	ldr	r3, [r3, #12]
 8007a9e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8007aa2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007aa6:	490d      	ldr	r1, [pc, #52]	@ (8007adc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007aa8:	4313      	orrs	r3, r2
 8007aaa:	608b      	str	r3, [r1, #8]
 8007aac:	e005      	b.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007aae:	4b0b      	ldr	r3, [pc, #44]	@ (8007adc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007ab0:	689b      	ldr	r3, [r3, #8]
 8007ab2:	4a0a      	ldr	r2, [pc, #40]	@ (8007adc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007ab4:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8007ab8:	6093      	str	r3, [r2, #8]
 8007aba:	4b08      	ldr	r3, [pc, #32]	@ (8007adc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007abc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	68db      	ldr	r3, [r3, #12]
 8007ac2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007ac6:	4905      	ldr	r1, [pc, #20]	@ (8007adc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007ac8:	4313      	orrs	r3, r2
 8007aca:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007acc:	2300      	movs	r3, #0
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3718      	adds	r7, #24
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}
 8007ad6:	bf00      	nop
 8007ad8:	42470068 	.word	0x42470068
 8007adc:	40023800 	.word	0x40023800
 8007ae0:	40007000 	.word	0x40007000
 8007ae4:	42470e40 	.word	0x42470e40

08007ae8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b087      	sub	sp, #28
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8007af0:	2300      	movs	r3, #0
 8007af2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8007af4:	2300      	movs	r3, #0
 8007af6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8007af8:	2300      	movs	r3, #0
 8007afa:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8007afc:	2300      	movs	r3, #0
 8007afe:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2b01      	cmp	r3, #1
 8007b04:	d13f      	bne.n	8007b86 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8007b06:	4b24      	ldr	r3, [pc, #144]	@ (8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007b08:	689b      	ldr	r3, [r3, #8]
 8007b0a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007b0e:	60fb      	str	r3, [r7, #12]
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d006      	beq.n	8007b24 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007b1c:	d12f      	bne.n	8007b7e <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8007b1e:	4b1f      	ldr	r3, [pc, #124]	@ (8007b9c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8007b20:	617b      	str	r3, [r7, #20]
          break;
 8007b22:	e02f      	b.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007b24:	4b1c      	ldr	r3, [pc, #112]	@ (8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007b26:	685b      	ldr	r3, [r3, #4]
 8007b28:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007b2c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007b30:	d108      	bne.n	8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007b32:	4b19      	ldr	r3, [pc, #100]	@ (8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007b34:	685b      	ldr	r3, [r3, #4]
 8007b36:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007b3a:	4a19      	ldr	r2, [pc, #100]	@ (8007ba0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8007b3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b40:	613b      	str	r3, [r7, #16]
 8007b42:	e007      	b.n	8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007b44:	4b14      	ldr	r3, [pc, #80]	@ (8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007b46:	685b      	ldr	r3, [r3, #4]
 8007b48:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007b4c:	4a15      	ldr	r2, [pc, #84]	@ (8007ba4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8007b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b52:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8007b54:	4b10      	ldr	r3, [pc, #64]	@ (8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007b56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007b5a:	099b      	lsrs	r3, r3, #6
 8007b5c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	fb02 f303 	mul.w	r3, r2, r3
 8007b66:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8007b68:	4b0b      	ldr	r3, [pc, #44]	@ (8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007b6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007b6e:	0f1b      	lsrs	r3, r3, #28
 8007b70:	f003 0307 	and.w	r3, r3, #7
 8007b74:	68ba      	ldr	r2, [r7, #8]
 8007b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b7a:	617b      	str	r3, [r7, #20]
          break;
 8007b7c:	e002      	b.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8007b7e:	2300      	movs	r3, #0
 8007b80:	617b      	str	r3, [r7, #20]
          break;
 8007b82:	bf00      	nop
        }
      }
      break;
 8007b84:	e000      	b.n	8007b88 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8007b86:	bf00      	nop
    }
  }
  return frequency;
 8007b88:	697b      	ldr	r3, [r7, #20]
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	371c      	adds	r7, #28
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b94:	4770      	bx	lr
 8007b96:	bf00      	nop
 8007b98:	40023800 	.word	0x40023800
 8007b9c:	00bb8000 	.word	0x00bb8000
 8007ba0:	007a1200 	.word	0x007a1200
 8007ba4:	00f42400 	.word	0x00f42400

08007ba8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b082      	sub	sp, #8
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d101      	bne.n	8007bba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	e041      	b.n	8007c3e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007bc0:	b2db      	uxtb	r3, r3
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d106      	bne.n	8007bd4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f7fa fd2a 	bl	8002628 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2202      	movs	r2, #2
 8007bd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681a      	ldr	r2, [r3, #0]
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	3304      	adds	r3, #4
 8007be4:	4619      	mov	r1, r3
 8007be6:	4610      	mov	r0, r2
 8007be8:	f000 fa7a 	bl	80080e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2201      	movs	r2, #1
 8007bf0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2201      	movs	r2, #1
 8007bf8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2201      	movs	r2, #1
 8007c00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2201      	movs	r2, #1
 8007c08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2201      	movs	r2, #1
 8007c10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2201      	movs	r2, #1
 8007c18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2201      	movs	r2, #1
 8007c20:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2201      	movs	r2, #1
 8007c28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2201      	movs	r2, #1
 8007c30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2201      	movs	r2, #1
 8007c38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007c3c:	2300      	movs	r3, #0
}
 8007c3e:	4618      	mov	r0, r3
 8007c40:	3708      	adds	r7, #8
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}
	...

08007c48 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b085      	sub	sp, #20
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c56:	b2db      	uxtb	r3, r3
 8007c58:	2b01      	cmp	r3, #1
 8007c5a:	d001      	beq.n	8007c60 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007c5c:	2301      	movs	r3, #1
 8007c5e:	e046      	b.n	8007cee <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2202      	movs	r2, #2
 8007c64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	4a23      	ldr	r2, [pc, #140]	@ (8007cfc <HAL_TIM_Base_Start+0xb4>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d022      	beq.n	8007cb8 <HAL_TIM_Base_Start+0x70>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c7a:	d01d      	beq.n	8007cb8 <HAL_TIM_Base_Start+0x70>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	4a1f      	ldr	r2, [pc, #124]	@ (8007d00 <HAL_TIM_Base_Start+0xb8>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d018      	beq.n	8007cb8 <HAL_TIM_Base_Start+0x70>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4a1e      	ldr	r2, [pc, #120]	@ (8007d04 <HAL_TIM_Base_Start+0xbc>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d013      	beq.n	8007cb8 <HAL_TIM_Base_Start+0x70>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4a1c      	ldr	r2, [pc, #112]	@ (8007d08 <HAL_TIM_Base_Start+0xc0>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d00e      	beq.n	8007cb8 <HAL_TIM_Base_Start+0x70>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4a1b      	ldr	r2, [pc, #108]	@ (8007d0c <HAL_TIM_Base_Start+0xc4>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d009      	beq.n	8007cb8 <HAL_TIM_Base_Start+0x70>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4a19      	ldr	r2, [pc, #100]	@ (8007d10 <HAL_TIM_Base_Start+0xc8>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d004      	beq.n	8007cb8 <HAL_TIM_Base_Start+0x70>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	4a18      	ldr	r2, [pc, #96]	@ (8007d14 <HAL_TIM_Base_Start+0xcc>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d111      	bne.n	8007cdc <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	689b      	ldr	r3, [r3, #8]
 8007cbe:	f003 0307 	and.w	r3, r3, #7
 8007cc2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	2b06      	cmp	r3, #6
 8007cc8:	d010      	beq.n	8007cec <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	681a      	ldr	r2, [r3, #0]
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f042 0201 	orr.w	r2, r2, #1
 8007cd8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cda:	e007      	b.n	8007cec <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	681a      	ldr	r2, [r3, #0]
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f042 0201 	orr.w	r2, r2, #1
 8007cea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007cec:	2300      	movs	r3, #0
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3714      	adds	r7, #20
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf8:	4770      	bx	lr
 8007cfa:	bf00      	nop
 8007cfc:	40010000 	.word	0x40010000
 8007d00:	40000400 	.word	0x40000400
 8007d04:	40000800 	.word	0x40000800
 8007d08:	40000c00 	.word	0x40000c00
 8007d0c:	40010400 	.word	0x40010400
 8007d10:	40014000 	.word	0x40014000
 8007d14:	40001800 	.word	0x40001800

08007d18 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b082      	sub	sp, #8
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d101      	bne.n	8007d2a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007d26:	2301      	movs	r3, #1
 8007d28:	e041      	b.n	8007dae <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007d30:	b2db      	uxtb	r3, r3
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d106      	bne.n	8007d44 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f000 f839 	bl	8007db6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2202      	movs	r2, #2
 8007d48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681a      	ldr	r2, [r3, #0]
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	3304      	adds	r3, #4
 8007d54:	4619      	mov	r1, r3
 8007d56:	4610      	mov	r0, r2
 8007d58:	f000 f9c2 	bl	80080e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2201      	movs	r2, #1
 8007d60:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2201      	movs	r2, #1
 8007d68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2201      	movs	r2, #1
 8007d70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2201      	movs	r2, #1
 8007d78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2201      	movs	r2, #1
 8007d80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2201      	movs	r2, #1
 8007d88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2201      	movs	r2, #1
 8007d90:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2201      	movs	r2, #1
 8007d98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2201      	movs	r2, #1
 8007da0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2201      	movs	r2, #1
 8007da8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007dac:	2300      	movs	r3, #0
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	3708      	adds	r7, #8
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}

08007db6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007db6:	b480      	push	{r7}
 8007db8:	b083      	sub	sp, #12
 8007dba:	af00      	add	r7, sp, #0
 8007dbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007dbe:	bf00      	nop
 8007dc0:	370c      	adds	r7, #12
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc8:	4770      	bx	lr
	...

08007dcc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b086      	sub	sp, #24
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	60f8      	str	r0, [r7, #12]
 8007dd4:	60b9      	str	r1, [r7, #8]
 8007dd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007de2:	2b01      	cmp	r3, #1
 8007de4:	d101      	bne.n	8007dea <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007de6:	2302      	movs	r3, #2
 8007de8:	e0ae      	b.n	8007f48 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	2201      	movs	r2, #1
 8007dee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2b0c      	cmp	r3, #12
 8007df6:	f200 809f 	bhi.w	8007f38 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007dfa:	a201      	add	r2, pc, #4	@ (adr r2, 8007e00 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e00:	08007e35 	.word	0x08007e35
 8007e04:	08007f39 	.word	0x08007f39
 8007e08:	08007f39 	.word	0x08007f39
 8007e0c:	08007f39 	.word	0x08007f39
 8007e10:	08007e75 	.word	0x08007e75
 8007e14:	08007f39 	.word	0x08007f39
 8007e18:	08007f39 	.word	0x08007f39
 8007e1c:	08007f39 	.word	0x08007f39
 8007e20:	08007eb7 	.word	0x08007eb7
 8007e24:	08007f39 	.word	0x08007f39
 8007e28:	08007f39 	.word	0x08007f39
 8007e2c:	08007f39 	.word	0x08007f39
 8007e30:	08007ef7 	.word	0x08007ef7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	68b9      	ldr	r1, [r7, #8]
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	f000 f9fc 	bl	8008238 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	699a      	ldr	r2, [r3, #24]
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f042 0208 	orr.w	r2, r2, #8
 8007e4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	699a      	ldr	r2, [r3, #24]
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f022 0204 	bic.w	r2, r2, #4
 8007e5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	6999      	ldr	r1, [r3, #24]
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	691a      	ldr	r2, [r3, #16]
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	430a      	orrs	r2, r1
 8007e70:	619a      	str	r2, [r3, #24]
      break;
 8007e72:	e064      	b.n	8007f3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	68b9      	ldr	r1, [r7, #8]
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f000 fa4c 	bl	8008318 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	699a      	ldr	r2, [r3, #24]
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007e8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	699a      	ldr	r2, [r3, #24]
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007e9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	6999      	ldr	r1, [r3, #24]
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	691b      	ldr	r3, [r3, #16]
 8007eaa:	021a      	lsls	r2, r3, #8
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	430a      	orrs	r2, r1
 8007eb2:	619a      	str	r2, [r3, #24]
      break;
 8007eb4:	e043      	b.n	8007f3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	68b9      	ldr	r1, [r7, #8]
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	f000 faa1 	bl	8008404 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	69da      	ldr	r2, [r3, #28]
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f042 0208 	orr.w	r2, r2, #8
 8007ed0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	69da      	ldr	r2, [r3, #28]
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f022 0204 	bic.w	r2, r2, #4
 8007ee0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	69d9      	ldr	r1, [r3, #28]
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	691a      	ldr	r2, [r3, #16]
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	430a      	orrs	r2, r1
 8007ef2:	61da      	str	r2, [r3, #28]
      break;
 8007ef4:	e023      	b.n	8007f3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	68b9      	ldr	r1, [r7, #8]
 8007efc:	4618      	mov	r0, r3
 8007efe:	f000 faf5 	bl	80084ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	69da      	ldr	r2, [r3, #28]
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007f10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	69da      	ldr	r2, [r3, #28]
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007f20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	69d9      	ldr	r1, [r3, #28]
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	691b      	ldr	r3, [r3, #16]
 8007f2c:	021a      	lsls	r2, r3, #8
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	430a      	orrs	r2, r1
 8007f34:	61da      	str	r2, [r3, #28]
      break;
 8007f36:	e002      	b.n	8007f3e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007f38:	2301      	movs	r3, #1
 8007f3a:	75fb      	strb	r3, [r7, #23]
      break;
 8007f3c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	2200      	movs	r2, #0
 8007f42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007f46:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	3718      	adds	r7, #24
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}

08007f50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b084      	sub	sp, #16
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
 8007f58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007f64:	2b01      	cmp	r3, #1
 8007f66:	d101      	bne.n	8007f6c <HAL_TIM_ConfigClockSource+0x1c>
 8007f68:	2302      	movs	r3, #2
 8007f6a:	e0b4      	b.n	80080d6 <HAL_TIM_ConfigClockSource+0x186>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2201      	movs	r2, #1
 8007f70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2202      	movs	r2, #2
 8007f78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	689b      	ldr	r3, [r3, #8]
 8007f82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007f84:	68bb      	ldr	r3, [r7, #8]
 8007f86:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007f8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007f92:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	68ba      	ldr	r2, [r7, #8]
 8007f9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007fa4:	d03e      	beq.n	8008024 <HAL_TIM_ConfigClockSource+0xd4>
 8007fa6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007faa:	f200 8087 	bhi.w	80080bc <HAL_TIM_ConfigClockSource+0x16c>
 8007fae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007fb2:	f000 8086 	beq.w	80080c2 <HAL_TIM_ConfigClockSource+0x172>
 8007fb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007fba:	d87f      	bhi.n	80080bc <HAL_TIM_ConfigClockSource+0x16c>
 8007fbc:	2b70      	cmp	r3, #112	@ 0x70
 8007fbe:	d01a      	beq.n	8007ff6 <HAL_TIM_ConfigClockSource+0xa6>
 8007fc0:	2b70      	cmp	r3, #112	@ 0x70
 8007fc2:	d87b      	bhi.n	80080bc <HAL_TIM_ConfigClockSource+0x16c>
 8007fc4:	2b60      	cmp	r3, #96	@ 0x60
 8007fc6:	d050      	beq.n	800806a <HAL_TIM_ConfigClockSource+0x11a>
 8007fc8:	2b60      	cmp	r3, #96	@ 0x60
 8007fca:	d877      	bhi.n	80080bc <HAL_TIM_ConfigClockSource+0x16c>
 8007fcc:	2b50      	cmp	r3, #80	@ 0x50
 8007fce:	d03c      	beq.n	800804a <HAL_TIM_ConfigClockSource+0xfa>
 8007fd0:	2b50      	cmp	r3, #80	@ 0x50
 8007fd2:	d873      	bhi.n	80080bc <HAL_TIM_ConfigClockSource+0x16c>
 8007fd4:	2b40      	cmp	r3, #64	@ 0x40
 8007fd6:	d058      	beq.n	800808a <HAL_TIM_ConfigClockSource+0x13a>
 8007fd8:	2b40      	cmp	r3, #64	@ 0x40
 8007fda:	d86f      	bhi.n	80080bc <HAL_TIM_ConfigClockSource+0x16c>
 8007fdc:	2b30      	cmp	r3, #48	@ 0x30
 8007fde:	d064      	beq.n	80080aa <HAL_TIM_ConfigClockSource+0x15a>
 8007fe0:	2b30      	cmp	r3, #48	@ 0x30
 8007fe2:	d86b      	bhi.n	80080bc <HAL_TIM_ConfigClockSource+0x16c>
 8007fe4:	2b20      	cmp	r3, #32
 8007fe6:	d060      	beq.n	80080aa <HAL_TIM_ConfigClockSource+0x15a>
 8007fe8:	2b20      	cmp	r3, #32
 8007fea:	d867      	bhi.n	80080bc <HAL_TIM_ConfigClockSource+0x16c>
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d05c      	beq.n	80080aa <HAL_TIM_ConfigClockSource+0x15a>
 8007ff0:	2b10      	cmp	r3, #16
 8007ff2:	d05a      	beq.n	80080aa <HAL_TIM_ConfigClockSource+0x15a>
 8007ff4:	e062      	b.n	80080bc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008006:	f000 fb41 	bl	800868c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	689b      	ldr	r3, [r3, #8]
 8008010:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008018:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	68ba      	ldr	r2, [r7, #8]
 8008020:	609a      	str	r2, [r3, #8]
      break;
 8008022:	e04f      	b.n	80080c4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008034:	f000 fb2a 	bl	800868c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	689a      	ldr	r2, [r3, #8]
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008046:	609a      	str	r2, [r3, #8]
      break;
 8008048:	e03c      	b.n	80080c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008056:	461a      	mov	r2, r3
 8008058:	f000 fa9e 	bl	8008598 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	2150      	movs	r1, #80	@ 0x50
 8008062:	4618      	mov	r0, r3
 8008064:	f000 faf7 	bl	8008656 <TIM_ITRx_SetConfig>
      break;
 8008068:	e02c      	b.n	80080c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008076:	461a      	mov	r2, r3
 8008078:	f000 fabd 	bl	80085f6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	2160      	movs	r1, #96	@ 0x60
 8008082:	4618      	mov	r0, r3
 8008084:	f000 fae7 	bl	8008656 <TIM_ITRx_SetConfig>
      break;
 8008088:	e01c      	b.n	80080c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008096:	461a      	mov	r2, r3
 8008098:	f000 fa7e 	bl	8008598 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	2140      	movs	r1, #64	@ 0x40
 80080a2:	4618      	mov	r0, r3
 80080a4:	f000 fad7 	bl	8008656 <TIM_ITRx_SetConfig>
      break;
 80080a8:	e00c      	b.n	80080c4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681a      	ldr	r2, [r3, #0]
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	4619      	mov	r1, r3
 80080b4:	4610      	mov	r0, r2
 80080b6:	f000 face 	bl	8008656 <TIM_ITRx_SetConfig>
      break;
 80080ba:	e003      	b.n	80080c4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80080bc:	2301      	movs	r3, #1
 80080be:	73fb      	strb	r3, [r7, #15]
      break;
 80080c0:	e000      	b.n	80080c4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80080c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2201      	movs	r2, #1
 80080c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2200      	movs	r2, #0
 80080d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80080d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	3710      	adds	r7, #16
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}
	...

080080e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80080e0:	b480      	push	{r7}
 80080e2:	b085      	sub	sp, #20
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
 80080e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	4a46      	ldr	r2, [pc, #280]	@ (800820c <TIM_Base_SetConfig+0x12c>)
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d013      	beq.n	8008120 <TIM_Base_SetConfig+0x40>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080fe:	d00f      	beq.n	8008120 <TIM_Base_SetConfig+0x40>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	4a43      	ldr	r2, [pc, #268]	@ (8008210 <TIM_Base_SetConfig+0x130>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d00b      	beq.n	8008120 <TIM_Base_SetConfig+0x40>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	4a42      	ldr	r2, [pc, #264]	@ (8008214 <TIM_Base_SetConfig+0x134>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d007      	beq.n	8008120 <TIM_Base_SetConfig+0x40>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	4a41      	ldr	r2, [pc, #260]	@ (8008218 <TIM_Base_SetConfig+0x138>)
 8008114:	4293      	cmp	r3, r2
 8008116:	d003      	beq.n	8008120 <TIM_Base_SetConfig+0x40>
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	4a40      	ldr	r2, [pc, #256]	@ (800821c <TIM_Base_SetConfig+0x13c>)
 800811c:	4293      	cmp	r3, r2
 800811e:	d108      	bne.n	8008132 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008126:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	685b      	ldr	r3, [r3, #4]
 800812c:	68fa      	ldr	r2, [r7, #12]
 800812e:	4313      	orrs	r3, r2
 8008130:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	4a35      	ldr	r2, [pc, #212]	@ (800820c <TIM_Base_SetConfig+0x12c>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d02b      	beq.n	8008192 <TIM_Base_SetConfig+0xb2>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008140:	d027      	beq.n	8008192 <TIM_Base_SetConfig+0xb2>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	4a32      	ldr	r2, [pc, #200]	@ (8008210 <TIM_Base_SetConfig+0x130>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d023      	beq.n	8008192 <TIM_Base_SetConfig+0xb2>
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	4a31      	ldr	r2, [pc, #196]	@ (8008214 <TIM_Base_SetConfig+0x134>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d01f      	beq.n	8008192 <TIM_Base_SetConfig+0xb2>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	4a30      	ldr	r2, [pc, #192]	@ (8008218 <TIM_Base_SetConfig+0x138>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d01b      	beq.n	8008192 <TIM_Base_SetConfig+0xb2>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	4a2f      	ldr	r2, [pc, #188]	@ (800821c <TIM_Base_SetConfig+0x13c>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d017      	beq.n	8008192 <TIM_Base_SetConfig+0xb2>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	4a2e      	ldr	r2, [pc, #184]	@ (8008220 <TIM_Base_SetConfig+0x140>)
 8008166:	4293      	cmp	r3, r2
 8008168:	d013      	beq.n	8008192 <TIM_Base_SetConfig+0xb2>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	4a2d      	ldr	r2, [pc, #180]	@ (8008224 <TIM_Base_SetConfig+0x144>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d00f      	beq.n	8008192 <TIM_Base_SetConfig+0xb2>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	4a2c      	ldr	r2, [pc, #176]	@ (8008228 <TIM_Base_SetConfig+0x148>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d00b      	beq.n	8008192 <TIM_Base_SetConfig+0xb2>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	4a2b      	ldr	r2, [pc, #172]	@ (800822c <TIM_Base_SetConfig+0x14c>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d007      	beq.n	8008192 <TIM_Base_SetConfig+0xb2>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	4a2a      	ldr	r2, [pc, #168]	@ (8008230 <TIM_Base_SetConfig+0x150>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d003      	beq.n	8008192 <TIM_Base_SetConfig+0xb2>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	4a29      	ldr	r2, [pc, #164]	@ (8008234 <TIM_Base_SetConfig+0x154>)
 800818e:	4293      	cmp	r3, r2
 8008190:	d108      	bne.n	80081a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008198:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	68db      	ldr	r3, [r3, #12]
 800819e:	68fa      	ldr	r2, [r7, #12]
 80081a0:	4313      	orrs	r3, r2
 80081a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	695b      	ldr	r3, [r3, #20]
 80081ae:	4313      	orrs	r3, r2
 80081b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	68fa      	ldr	r2, [r7, #12]
 80081b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	689a      	ldr	r2, [r3, #8]
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	681a      	ldr	r2, [r3, #0]
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	4a10      	ldr	r2, [pc, #64]	@ (800820c <TIM_Base_SetConfig+0x12c>)
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d003      	beq.n	80081d8 <TIM_Base_SetConfig+0xf8>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	4a12      	ldr	r2, [pc, #72]	@ (800821c <TIM_Base_SetConfig+0x13c>)
 80081d4:	4293      	cmp	r3, r2
 80081d6:	d103      	bne.n	80081e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	691a      	ldr	r2, [r3, #16]
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2201      	movs	r2, #1
 80081e4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	691b      	ldr	r3, [r3, #16]
 80081ea:	f003 0301 	and.w	r3, r3, #1
 80081ee:	2b01      	cmp	r3, #1
 80081f0:	d105      	bne.n	80081fe <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	691b      	ldr	r3, [r3, #16]
 80081f6:	f023 0201 	bic.w	r2, r3, #1
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	611a      	str	r2, [r3, #16]
  }
}
 80081fe:	bf00      	nop
 8008200:	3714      	adds	r7, #20
 8008202:	46bd      	mov	sp, r7
 8008204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008208:	4770      	bx	lr
 800820a:	bf00      	nop
 800820c:	40010000 	.word	0x40010000
 8008210:	40000400 	.word	0x40000400
 8008214:	40000800 	.word	0x40000800
 8008218:	40000c00 	.word	0x40000c00
 800821c:	40010400 	.word	0x40010400
 8008220:	40014000 	.word	0x40014000
 8008224:	40014400 	.word	0x40014400
 8008228:	40014800 	.word	0x40014800
 800822c:	40001800 	.word	0x40001800
 8008230:	40001c00 	.word	0x40001c00
 8008234:	40002000 	.word	0x40002000

08008238 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008238:	b480      	push	{r7}
 800823a:	b087      	sub	sp, #28
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
 8008240:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6a1b      	ldr	r3, [r3, #32]
 8008246:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6a1b      	ldr	r3, [r3, #32]
 800824c:	f023 0201 	bic.w	r2, r3, #1
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	685b      	ldr	r3, [r3, #4]
 8008258:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	699b      	ldr	r3, [r3, #24]
 800825e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008266:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	f023 0303 	bic.w	r3, r3, #3
 800826e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	68fa      	ldr	r2, [r7, #12]
 8008276:	4313      	orrs	r3, r2
 8008278:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800827a:	697b      	ldr	r3, [r7, #20]
 800827c:	f023 0302 	bic.w	r3, r3, #2
 8008280:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	689b      	ldr	r3, [r3, #8]
 8008286:	697a      	ldr	r2, [r7, #20]
 8008288:	4313      	orrs	r3, r2
 800828a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	4a20      	ldr	r2, [pc, #128]	@ (8008310 <TIM_OC1_SetConfig+0xd8>)
 8008290:	4293      	cmp	r3, r2
 8008292:	d003      	beq.n	800829c <TIM_OC1_SetConfig+0x64>
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	4a1f      	ldr	r2, [pc, #124]	@ (8008314 <TIM_OC1_SetConfig+0xdc>)
 8008298:	4293      	cmp	r3, r2
 800829a:	d10c      	bne.n	80082b6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800829c:	697b      	ldr	r3, [r7, #20]
 800829e:	f023 0308 	bic.w	r3, r3, #8
 80082a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	68db      	ldr	r3, [r3, #12]
 80082a8:	697a      	ldr	r2, [r7, #20]
 80082aa:	4313      	orrs	r3, r2
 80082ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	f023 0304 	bic.w	r3, r3, #4
 80082b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	4a15      	ldr	r2, [pc, #84]	@ (8008310 <TIM_OC1_SetConfig+0xd8>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d003      	beq.n	80082c6 <TIM_OC1_SetConfig+0x8e>
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	4a14      	ldr	r2, [pc, #80]	@ (8008314 <TIM_OC1_SetConfig+0xdc>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d111      	bne.n	80082ea <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80082c6:	693b      	ldr	r3, [r7, #16]
 80082c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80082cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80082ce:	693b      	ldr	r3, [r7, #16]
 80082d0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80082d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	695b      	ldr	r3, [r3, #20]
 80082da:	693a      	ldr	r2, [r7, #16]
 80082dc:	4313      	orrs	r3, r2
 80082de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	699b      	ldr	r3, [r3, #24]
 80082e4:	693a      	ldr	r2, [r7, #16]
 80082e6:	4313      	orrs	r3, r2
 80082e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	693a      	ldr	r2, [r7, #16]
 80082ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	68fa      	ldr	r2, [r7, #12]
 80082f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	685a      	ldr	r2, [r3, #4]
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	697a      	ldr	r2, [r7, #20]
 8008302:	621a      	str	r2, [r3, #32]
}
 8008304:	bf00      	nop
 8008306:	371c      	adds	r7, #28
 8008308:	46bd      	mov	sp, r7
 800830a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830e:	4770      	bx	lr
 8008310:	40010000 	.word	0x40010000
 8008314:	40010400 	.word	0x40010400

08008318 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008318:	b480      	push	{r7}
 800831a:	b087      	sub	sp, #28
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
 8008320:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6a1b      	ldr	r3, [r3, #32]
 8008326:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6a1b      	ldr	r3, [r3, #32]
 800832c:	f023 0210 	bic.w	r2, r3, #16
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	685b      	ldr	r3, [r3, #4]
 8008338:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	699b      	ldr	r3, [r3, #24]
 800833e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008346:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800834e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	021b      	lsls	r3, r3, #8
 8008356:	68fa      	ldr	r2, [r7, #12]
 8008358:	4313      	orrs	r3, r2
 800835a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800835c:	697b      	ldr	r3, [r7, #20]
 800835e:	f023 0320 	bic.w	r3, r3, #32
 8008362:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	689b      	ldr	r3, [r3, #8]
 8008368:	011b      	lsls	r3, r3, #4
 800836a:	697a      	ldr	r2, [r7, #20]
 800836c:	4313      	orrs	r3, r2
 800836e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	4a22      	ldr	r2, [pc, #136]	@ (80083fc <TIM_OC2_SetConfig+0xe4>)
 8008374:	4293      	cmp	r3, r2
 8008376:	d003      	beq.n	8008380 <TIM_OC2_SetConfig+0x68>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	4a21      	ldr	r2, [pc, #132]	@ (8008400 <TIM_OC2_SetConfig+0xe8>)
 800837c:	4293      	cmp	r3, r2
 800837e:	d10d      	bne.n	800839c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008380:	697b      	ldr	r3, [r7, #20]
 8008382:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008386:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	68db      	ldr	r3, [r3, #12]
 800838c:	011b      	lsls	r3, r3, #4
 800838e:	697a      	ldr	r2, [r7, #20]
 8008390:	4313      	orrs	r3, r2
 8008392:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008394:	697b      	ldr	r3, [r7, #20]
 8008396:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800839a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	4a17      	ldr	r2, [pc, #92]	@ (80083fc <TIM_OC2_SetConfig+0xe4>)
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d003      	beq.n	80083ac <TIM_OC2_SetConfig+0x94>
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	4a16      	ldr	r2, [pc, #88]	@ (8008400 <TIM_OC2_SetConfig+0xe8>)
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d113      	bne.n	80083d4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80083ac:	693b      	ldr	r3, [r7, #16]
 80083ae:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80083b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80083b4:	693b      	ldr	r3, [r7, #16]
 80083b6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80083ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	695b      	ldr	r3, [r3, #20]
 80083c0:	009b      	lsls	r3, r3, #2
 80083c2:	693a      	ldr	r2, [r7, #16]
 80083c4:	4313      	orrs	r3, r2
 80083c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	699b      	ldr	r3, [r3, #24]
 80083cc:	009b      	lsls	r3, r3, #2
 80083ce:	693a      	ldr	r2, [r7, #16]
 80083d0:	4313      	orrs	r3, r2
 80083d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	693a      	ldr	r2, [r7, #16]
 80083d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	68fa      	ldr	r2, [r7, #12]
 80083de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	685a      	ldr	r2, [r3, #4]
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	697a      	ldr	r2, [r7, #20]
 80083ec:	621a      	str	r2, [r3, #32]
}
 80083ee:	bf00      	nop
 80083f0:	371c      	adds	r7, #28
 80083f2:	46bd      	mov	sp, r7
 80083f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f8:	4770      	bx	lr
 80083fa:	bf00      	nop
 80083fc:	40010000 	.word	0x40010000
 8008400:	40010400 	.word	0x40010400

08008404 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008404:	b480      	push	{r7}
 8008406:	b087      	sub	sp, #28
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
 800840c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6a1b      	ldr	r3, [r3, #32]
 8008412:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6a1b      	ldr	r3, [r3, #32]
 8008418:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	685b      	ldr	r3, [r3, #4]
 8008424:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	69db      	ldr	r3, [r3, #28]
 800842a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008432:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	f023 0303 	bic.w	r3, r3, #3
 800843a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	68fa      	ldr	r2, [r7, #12]
 8008442:	4313      	orrs	r3, r2
 8008444:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008446:	697b      	ldr	r3, [r7, #20]
 8008448:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800844c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	689b      	ldr	r3, [r3, #8]
 8008452:	021b      	lsls	r3, r3, #8
 8008454:	697a      	ldr	r2, [r7, #20]
 8008456:	4313      	orrs	r3, r2
 8008458:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	4a21      	ldr	r2, [pc, #132]	@ (80084e4 <TIM_OC3_SetConfig+0xe0>)
 800845e:	4293      	cmp	r3, r2
 8008460:	d003      	beq.n	800846a <TIM_OC3_SetConfig+0x66>
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	4a20      	ldr	r2, [pc, #128]	@ (80084e8 <TIM_OC3_SetConfig+0xe4>)
 8008466:	4293      	cmp	r3, r2
 8008468:	d10d      	bne.n	8008486 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800846a:	697b      	ldr	r3, [r7, #20]
 800846c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008470:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	68db      	ldr	r3, [r3, #12]
 8008476:	021b      	lsls	r3, r3, #8
 8008478:	697a      	ldr	r2, [r7, #20]
 800847a:	4313      	orrs	r3, r2
 800847c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800847e:	697b      	ldr	r3, [r7, #20]
 8008480:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008484:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	4a16      	ldr	r2, [pc, #88]	@ (80084e4 <TIM_OC3_SetConfig+0xe0>)
 800848a:	4293      	cmp	r3, r2
 800848c:	d003      	beq.n	8008496 <TIM_OC3_SetConfig+0x92>
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	4a15      	ldr	r2, [pc, #84]	@ (80084e8 <TIM_OC3_SetConfig+0xe4>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d113      	bne.n	80084be <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008496:	693b      	ldr	r3, [r7, #16]
 8008498:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800849c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800849e:	693b      	ldr	r3, [r7, #16]
 80084a0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80084a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	695b      	ldr	r3, [r3, #20]
 80084aa:	011b      	lsls	r3, r3, #4
 80084ac:	693a      	ldr	r2, [r7, #16]
 80084ae:	4313      	orrs	r3, r2
 80084b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	699b      	ldr	r3, [r3, #24]
 80084b6:	011b      	lsls	r3, r3, #4
 80084b8:	693a      	ldr	r2, [r7, #16]
 80084ba:	4313      	orrs	r3, r2
 80084bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	693a      	ldr	r2, [r7, #16]
 80084c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	68fa      	ldr	r2, [r7, #12]
 80084c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	685a      	ldr	r2, [r3, #4]
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	697a      	ldr	r2, [r7, #20]
 80084d6:	621a      	str	r2, [r3, #32]
}
 80084d8:	bf00      	nop
 80084da:	371c      	adds	r7, #28
 80084dc:	46bd      	mov	sp, r7
 80084de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e2:	4770      	bx	lr
 80084e4:	40010000 	.word	0x40010000
 80084e8:	40010400 	.word	0x40010400

080084ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80084ec:	b480      	push	{r7}
 80084ee:	b087      	sub	sp, #28
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
 80084f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6a1b      	ldr	r3, [r3, #32]
 80084fa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6a1b      	ldr	r3, [r3, #32]
 8008500:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	685b      	ldr	r3, [r3, #4]
 800850c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	69db      	ldr	r3, [r3, #28]
 8008512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800851a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008522:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	021b      	lsls	r3, r3, #8
 800852a:	68fa      	ldr	r2, [r7, #12]
 800852c:	4313      	orrs	r3, r2
 800852e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008530:	693b      	ldr	r3, [r7, #16]
 8008532:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008536:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	689b      	ldr	r3, [r3, #8]
 800853c:	031b      	lsls	r3, r3, #12
 800853e:	693a      	ldr	r2, [r7, #16]
 8008540:	4313      	orrs	r3, r2
 8008542:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	4a12      	ldr	r2, [pc, #72]	@ (8008590 <TIM_OC4_SetConfig+0xa4>)
 8008548:	4293      	cmp	r3, r2
 800854a:	d003      	beq.n	8008554 <TIM_OC4_SetConfig+0x68>
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	4a11      	ldr	r2, [pc, #68]	@ (8008594 <TIM_OC4_SetConfig+0xa8>)
 8008550:	4293      	cmp	r3, r2
 8008552:	d109      	bne.n	8008568 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008554:	697b      	ldr	r3, [r7, #20]
 8008556:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800855a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	695b      	ldr	r3, [r3, #20]
 8008560:	019b      	lsls	r3, r3, #6
 8008562:	697a      	ldr	r2, [r7, #20]
 8008564:	4313      	orrs	r3, r2
 8008566:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	697a      	ldr	r2, [r7, #20]
 800856c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	68fa      	ldr	r2, [r7, #12]
 8008572:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	685a      	ldr	r2, [r3, #4]
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	693a      	ldr	r2, [r7, #16]
 8008580:	621a      	str	r2, [r3, #32]
}
 8008582:	bf00      	nop
 8008584:	371c      	adds	r7, #28
 8008586:	46bd      	mov	sp, r7
 8008588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858c:	4770      	bx	lr
 800858e:	bf00      	nop
 8008590:	40010000 	.word	0x40010000
 8008594:	40010400 	.word	0x40010400

08008598 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008598:	b480      	push	{r7}
 800859a:	b087      	sub	sp, #28
 800859c:	af00      	add	r7, sp, #0
 800859e:	60f8      	str	r0, [r7, #12]
 80085a0:	60b9      	str	r1, [r7, #8]
 80085a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	6a1b      	ldr	r3, [r3, #32]
 80085a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	6a1b      	ldr	r3, [r3, #32]
 80085ae:	f023 0201 	bic.w	r2, r3, #1
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	699b      	ldr	r3, [r3, #24]
 80085ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80085bc:	693b      	ldr	r3, [r7, #16]
 80085be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80085c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	011b      	lsls	r3, r3, #4
 80085c8:	693a      	ldr	r2, [r7, #16]
 80085ca:	4313      	orrs	r3, r2
 80085cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80085ce:	697b      	ldr	r3, [r7, #20]
 80085d0:	f023 030a 	bic.w	r3, r3, #10
 80085d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80085d6:	697a      	ldr	r2, [r7, #20]
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	4313      	orrs	r3, r2
 80085dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	693a      	ldr	r2, [r7, #16]
 80085e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	697a      	ldr	r2, [r7, #20]
 80085e8:	621a      	str	r2, [r3, #32]
}
 80085ea:	bf00      	nop
 80085ec:	371c      	adds	r7, #28
 80085ee:	46bd      	mov	sp, r7
 80085f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f4:	4770      	bx	lr

080085f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80085f6:	b480      	push	{r7}
 80085f8:	b087      	sub	sp, #28
 80085fa:	af00      	add	r7, sp, #0
 80085fc:	60f8      	str	r0, [r7, #12]
 80085fe:	60b9      	str	r1, [r7, #8]
 8008600:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	6a1b      	ldr	r3, [r3, #32]
 8008606:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	6a1b      	ldr	r3, [r3, #32]
 800860c:	f023 0210 	bic.w	r2, r3, #16
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	699b      	ldr	r3, [r3, #24]
 8008618:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800861a:	693b      	ldr	r3, [r7, #16]
 800861c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008620:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	031b      	lsls	r3, r3, #12
 8008626:	693a      	ldr	r2, [r7, #16]
 8008628:	4313      	orrs	r3, r2
 800862a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008632:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	011b      	lsls	r3, r3, #4
 8008638:	697a      	ldr	r2, [r7, #20]
 800863a:	4313      	orrs	r3, r2
 800863c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	693a      	ldr	r2, [r7, #16]
 8008642:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	697a      	ldr	r2, [r7, #20]
 8008648:	621a      	str	r2, [r3, #32]
}
 800864a:	bf00      	nop
 800864c:	371c      	adds	r7, #28
 800864e:	46bd      	mov	sp, r7
 8008650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008654:	4770      	bx	lr

08008656 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008656:	b480      	push	{r7}
 8008658:	b085      	sub	sp, #20
 800865a:	af00      	add	r7, sp, #0
 800865c:	6078      	str	r0, [r7, #4]
 800865e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	689b      	ldr	r3, [r3, #8]
 8008664:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800866c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800866e:	683a      	ldr	r2, [r7, #0]
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	4313      	orrs	r3, r2
 8008674:	f043 0307 	orr.w	r3, r3, #7
 8008678:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	68fa      	ldr	r2, [r7, #12]
 800867e:	609a      	str	r2, [r3, #8]
}
 8008680:	bf00      	nop
 8008682:	3714      	adds	r7, #20
 8008684:	46bd      	mov	sp, r7
 8008686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868a:	4770      	bx	lr

0800868c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800868c:	b480      	push	{r7}
 800868e:	b087      	sub	sp, #28
 8008690:	af00      	add	r7, sp, #0
 8008692:	60f8      	str	r0, [r7, #12]
 8008694:	60b9      	str	r1, [r7, #8]
 8008696:	607a      	str	r2, [r7, #4]
 8008698:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	689b      	ldr	r3, [r3, #8]
 800869e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80086a0:	697b      	ldr	r3, [r7, #20]
 80086a2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80086a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	021a      	lsls	r2, r3, #8
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	431a      	orrs	r2, r3
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	4313      	orrs	r3, r2
 80086b4:	697a      	ldr	r2, [r7, #20]
 80086b6:	4313      	orrs	r3, r2
 80086b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	697a      	ldr	r2, [r7, #20]
 80086be:	609a      	str	r2, [r3, #8]
}
 80086c0:	bf00      	nop
 80086c2:	371c      	adds	r7, #28
 80086c4:	46bd      	mov	sp, r7
 80086c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ca:	4770      	bx	lr

080086cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80086cc:	b480      	push	{r7}
 80086ce:	b085      	sub	sp, #20
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
 80086d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80086dc:	2b01      	cmp	r3, #1
 80086de:	d101      	bne.n	80086e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80086e0:	2302      	movs	r3, #2
 80086e2:	e05a      	b.n	800879a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2201      	movs	r2, #1
 80086e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2202      	movs	r2, #2
 80086f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	685b      	ldr	r3, [r3, #4]
 80086fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	689b      	ldr	r3, [r3, #8]
 8008702:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800870a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	68fa      	ldr	r2, [r7, #12]
 8008712:	4313      	orrs	r3, r2
 8008714:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	68fa      	ldr	r2, [r7, #12]
 800871c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	4a21      	ldr	r2, [pc, #132]	@ (80087a8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008724:	4293      	cmp	r3, r2
 8008726:	d022      	beq.n	800876e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008730:	d01d      	beq.n	800876e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	4a1d      	ldr	r2, [pc, #116]	@ (80087ac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008738:	4293      	cmp	r3, r2
 800873a:	d018      	beq.n	800876e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	4a1b      	ldr	r2, [pc, #108]	@ (80087b0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008742:	4293      	cmp	r3, r2
 8008744:	d013      	beq.n	800876e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	4a1a      	ldr	r2, [pc, #104]	@ (80087b4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800874c:	4293      	cmp	r3, r2
 800874e:	d00e      	beq.n	800876e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	4a18      	ldr	r2, [pc, #96]	@ (80087b8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008756:	4293      	cmp	r3, r2
 8008758:	d009      	beq.n	800876e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	4a17      	ldr	r2, [pc, #92]	@ (80087bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008760:	4293      	cmp	r3, r2
 8008762:	d004      	beq.n	800876e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	4a15      	ldr	r2, [pc, #84]	@ (80087c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800876a:	4293      	cmp	r3, r2
 800876c:	d10c      	bne.n	8008788 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800876e:	68bb      	ldr	r3, [r7, #8]
 8008770:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008774:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	685b      	ldr	r3, [r3, #4]
 800877a:	68ba      	ldr	r2, [r7, #8]
 800877c:	4313      	orrs	r3, r2
 800877e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	68ba      	ldr	r2, [r7, #8]
 8008786:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2201      	movs	r2, #1
 800878c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2200      	movs	r2, #0
 8008794:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008798:	2300      	movs	r3, #0
}
 800879a:	4618      	mov	r0, r3
 800879c:	3714      	adds	r7, #20
 800879e:	46bd      	mov	sp, r7
 80087a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a4:	4770      	bx	lr
 80087a6:	bf00      	nop
 80087a8:	40010000 	.word	0x40010000
 80087ac:	40000400 	.word	0x40000400
 80087b0:	40000800 	.word	0x40000800
 80087b4:	40000c00 	.word	0x40000c00
 80087b8:	40010400 	.word	0x40010400
 80087bc:	40014000 	.word	0x40014000
 80087c0:	40001800 	.word	0x40001800

080087c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b082      	sub	sp, #8
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d101      	bne.n	80087d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80087d2:	2301      	movs	r3, #1
 80087d4:	e042      	b.n	800885c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80087dc:	b2db      	uxtb	r3, r3
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d106      	bne.n	80087f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2200      	movs	r2, #0
 80087e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	f7f9 ff3c 	bl	8002668 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2224      	movs	r2, #36	@ 0x24
 80087f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	68da      	ldr	r2, [r3, #12]
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008806:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f000 f973 	bl	8008af4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	691a      	ldr	r2, [r3, #16]
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800881c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	695a      	ldr	r2, [r3, #20]
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800882c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	68da      	ldr	r2, [r3, #12]
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800883c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2200      	movs	r2, #0
 8008842:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2220      	movs	r2, #32
 8008848:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2220      	movs	r2, #32
 8008850:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2200      	movs	r2, #0
 8008858:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800885a:	2300      	movs	r3, #0
}
 800885c:	4618      	mov	r0, r3
 800885e:	3708      	adds	r7, #8
 8008860:	46bd      	mov	sp, r7
 8008862:	bd80      	pop	{r7, pc}

08008864 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b08a      	sub	sp, #40	@ 0x28
 8008868:	af02      	add	r7, sp, #8
 800886a:	60f8      	str	r0, [r7, #12]
 800886c:	60b9      	str	r1, [r7, #8]
 800886e:	603b      	str	r3, [r7, #0]
 8008870:	4613      	mov	r3, r2
 8008872:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008874:	2300      	movs	r3, #0
 8008876:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800887e:	b2db      	uxtb	r3, r3
 8008880:	2b20      	cmp	r3, #32
 8008882:	d175      	bne.n	8008970 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d002      	beq.n	8008890 <HAL_UART_Transmit+0x2c>
 800888a:	88fb      	ldrh	r3, [r7, #6]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d101      	bne.n	8008894 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008890:	2301      	movs	r3, #1
 8008892:	e06e      	b.n	8008972 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	2200      	movs	r2, #0
 8008898:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	2221      	movs	r2, #33	@ 0x21
 800889e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80088a2:	f7fa f8ed 	bl	8002a80 <HAL_GetTick>
 80088a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	88fa      	ldrh	r2, [r7, #6]
 80088ac:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	88fa      	ldrh	r2, [r7, #6]
 80088b2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	689b      	ldr	r3, [r3, #8]
 80088b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80088bc:	d108      	bne.n	80088d0 <HAL_UART_Transmit+0x6c>
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	691b      	ldr	r3, [r3, #16]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d104      	bne.n	80088d0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80088c6:	2300      	movs	r3, #0
 80088c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	61bb      	str	r3, [r7, #24]
 80088ce:	e003      	b.n	80088d8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80088d4:	2300      	movs	r3, #0
 80088d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80088d8:	e02e      	b.n	8008938 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	9300      	str	r3, [sp, #0]
 80088de:	697b      	ldr	r3, [r7, #20]
 80088e0:	2200      	movs	r2, #0
 80088e2:	2180      	movs	r1, #128	@ 0x80
 80088e4:	68f8      	ldr	r0, [r7, #12]
 80088e6:	f000 f848 	bl	800897a <UART_WaitOnFlagUntilTimeout>
 80088ea:	4603      	mov	r3, r0
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d005      	beq.n	80088fc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	2220      	movs	r2, #32
 80088f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80088f8:	2303      	movs	r3, #3
 80088fa:	e03a      	b.n	8008972 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80088fc:	69fb      	ldr	r3, [r7, #28]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d10b      	bne.n	800891a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008902:	69bb      	ldr	r3, [r7, #24]
 8008904:	881b      	ldrh	r3, [r3, #0]
 8008906:	461a      	mov	r2, r3
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008910:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008912:	69bb      	ldr	r3, [r7, #24]
 8008914:	3302      	adds	r3, #2
 8008916:	61bb      	str	r3, [r7, #24]
 8008918:	e007      	b.n	800892a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800891a:	69fb      	ldr	r3, [r7, #28]
 800891c:	781a      	ldrb	r2, [r3, #0]
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008924:	69fb      	ldr	r3, [r7, #28]
 8008926:	3301      	adds	r3, #1
 8008928:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800892e:	b29b      	uxth	r3, r3
 8008930:	3b01      	subs	r3, #1
 8008932:	b29a      	uxth	r2, r3
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800893c:	b29b      	uxth	r3, r3
 800893e:	2b00      	cmp	r3, #0
 8008940:	d1cb      	bne.n	80088da <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	9300      	str	r3, [sp, #0]
 8008946:	697b      	ldr	r3, [r7, #20]
 8008948:	2200      	movs	r2, #0
 800894a:	2140      	movs	r1, #64	@ 0x40
 800894c:	68f8      	ldr	r0, [r7, #12]
 800894e:	f000 f814 	bl	800897a <UART_WaitOnFlagUntilTimeout>
 8008952:	4603      	mov	r3, r0
 8008954:	2b00      	cmp	r3, #0
 8008956:	d005      	beq.n	8008964 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	2220      	movs	r2, #32
 800895c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8008960:	2303      	movs	r3, #3
 8008962:	e006      	b.n	8008972 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	2220      	movs	r2, #32
 8008968:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800896c:	2300      	movs	r3, #0
 800896e:	e000      	b.n	8008972 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8008970:	2302      	movs	r3, #2
  }
}
 8008972:	4618      	mov	r0, r3
 8008974:	3720      	adds	r7, #32
 8008976:	46bd      	mov	sp, r7
 8008978:	bd80      	pop	{r7, pc}

0800897a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800897a:	b580      	push	{r7, lr}
 800897c:	b086      	sub	sp, #24
 800897e:	af00      	add	r7, sp, #0
 8008980:	60f8      	str	r0, [r7, #12]
 8008982:	60b9      	str	r1, [r7, #8]
 8008984:	603b      	str	r3, [r7, #0]
 8008986:	4613      	mov	r3, r2
 8008988:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800898a:	e03b      	b.n	8008a04 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800898c:	6a3b      	ldr	r3, [r7, #32]
 800898e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008992:	d037      	beq.n	8008a04 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008994:	f7fa f874 	bl	8002a80 <HAL_GetTick>
 8008998:	4602      	mov	r2, r0
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	1ad3      	subs	r3, r2, r3
 800899e:	6a3a      	ldr	r2, [r7, #32]
 80089a0:	429a      	cmp	r2, r3
 80089a2:	d302      	bcc.n	80089aa <UART_WaitOnFlagUntilTimeout+0x30>
 80089a4:	6a3b      	ldr	r3, [r7, #32]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d101      	bne.n	80089ae <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80089aa:	2303      	movs	r3, #3
 80089ac:	e03a      	b.n	8008a24 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	68db      	ldr	r3, [r3, #12]
 80089b4:	f003 0304 	and.w	r3, r3, #4
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d023      	beq.n	8008a04 <UART_WaitOnFlagUntilTimeout+0x8a>
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	2b80      	cmp	r3, #128	@ 0x80
 80089c0:	d020      	beq.n	8008a04 <UART_WaitOnFlagUntilTimeout+0x8a>
 80089c2:	68bb      	ldr	r3, [r7, #8]
 80089c4:	2b40      	cmp	r3, #64	@ 0x40
 80089c6:	d01d      	beq.n	8008a04 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f003 0308 	and.w	r3, r3, #8
 80089d2:	2b08      	cmp	r3, #8
 80089d4:	d116      	bne.n	8008a04 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80089d6:	2300      	movs	r3, #0
 80089d8:	617b      	str	r3, [r7, #20]
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	617b      	str	r3, [r7, #20]
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	685b      	ldr	r3, [r3, #4]
 80089e8:	617b      	str	r3, [r7, #20]
 80089ea:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80089ec:	68f8      	ldr	r0, [r7, #12]
 80089ee:	f000 f81d 	bl	8008a2c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	2208      	movs	r2, #8
 80089f6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	2200      	movs	r2, #0
 80089fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008a00:	2301      	movs	r3, #1
 8008a02:	e00f      	b.n	8008a24 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	681a      	ldr	r2, [r3, #0]
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	4013      	ands	r3, r2
 8008a0e:	68ba      	ldr	r2, [r7, #8]
 8008a10:	429a      	cmp	r2, r3
 8008a12:	bf0c      	ite	eq
 8008a14:	2301      	moveq	r3, #1
 8008a16:	2300      	movne	r3, #0
 8008a18:	b2db      	uxtb	r3, r3
 8008a1a:	461a      	mov	r2, r3
 8008a1c:	79fb      	ldrb	r3, [r7, #7]
 8008a1e:	429a      	cmp	r2, r3
 8008a20:	d0b4      	beq.n	800898c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008a22:	2300      	movs	r3, #0
}
 8008a24:	4618      	mov	r0, r3
 8008a26:	3718      	adds	r7, #24
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	bd80      	pop	{r7, pc}

08008a2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008a2c:	b480      	push	{r7}
 8008a2e:	b095      	sub	sp, #84	@ 0x54
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	330c      	adds	r3, #12
 8008a3a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a3e:	e853 3f00 	ldrex	r3, [r3]
 8008a42:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008a44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a46:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008a4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	330c      	adds	r3, #12
 8008a52:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008a54:	643a      	str	r2, [r7, #64]	@ 0x40
 8008a56:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a58:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008a5a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008a5c:	e841 2300 	strex	r3, r2, [r1]
 8008a60:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008a62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d1e5      	bne.n	8008a34 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	3314      	adds	r3, #20
 8008a6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a70:	6a3b      	ldr	r3, [r7, #32]
 8008a72:	e853 3f00 	ldrex	r3, [r3]
 8008a76:	61fb      	str	r3, [r7, #28]
   return(result);
 8008a78:	69fb      	ldr	r3, [r7, #28]
 8008a7a:	f023 0301 	bic.w	r3, r3, #1
 8008a7e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	3314      	adds	r3, #20
 8008a86:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008a88:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008a8a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a8c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008a8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008a90:	e841 2300 	strex	r3, r2, [r1]
 8008a94:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d1e5      	bne.n	8008a68 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008aa0:	2b01      	cmp	r3, #1
 8008aa2:	d119      	bne.n	8008ad8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	330c      	adds	r3, #12
 8008aaa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	e853 3f00 	ldrex	r3, [r3]
 8008ab2:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	f023 0310 	bic.w	r3, r3, #16
 8008aba:	647b      	str	r3, [r7, #68]	@ 0x44
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	330c      	adds	r3, #12
 8008ac2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008ac4:	61ba      	str	r2, [r7, #24]
 8008ac6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ac8:	6979      	ldr	r1, [r7, #20]
 8008aca:	69ba      	ldr	r2, [r7, #24]
 8008acc:	e841 2300 	strex	r3, r2, [r1]
 8008ad0:	613b      	str	r3, [r7, #16]
   return(result);
 8008ad2:	693b      	ldr	r3, [r7, #16]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d1e5      	bne.n	8008aa4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2220      	movs	r2, #32
 8008adc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008ae6:	bf00      	nop
 8008ae8:	3754      	adds	r7, #84	@ 0x54
 8008aea:	46bd      	mov	sp, r7
 8008aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af0:	4770      	bx	lr
	...

08008af4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008af4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008af8:	b0c0      	sub	sp, #256	@ 0x100
 8008afa:	af00      	add	r7, sp, #0
 8008afc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	691b      	ldr	r3, [r3, #16]
 8008b08:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b10:	68d9      	ldr	r1, [r3, #12]
 8008b12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b16:	681a      	ldr	r2, [r3, #0]
 8008b18:	ea40 0301 	orr.w	r3, r0, r1
 8008b1c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008b1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b22:	689a      	ldr	r2, [r3, #8]
 8008b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b28:	691b      	ldr	r3, [r3, #16]
 8008b2a:	431a      	orrs	r2, r3
 8008b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b30:	695b      	ldr	r3, [r3, #20]
 8008b32:	431a      	orrs	r2, r3
 8008b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b38:	69db      	ldr	r3, [r3, #28]
 8008b3a:	4313      	orrs	r3, r2
 8008b3c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	68db      	ldr	r3, [r3, #12]
 8008b48:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008b4c:	f021 010c 	bic.w	r1, r1, #12
 8008b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b54:	681a      	ldr	r2, [r3, #0]
 8008b56:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008b5a:	430b      	orrs	r3, r1
 8008b5c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008b5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	695b      	ldr	r3, [r3, #20]
 8008b66:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008b6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b6e:	6999      	ldr	r1, [r3, #24]
 8008b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b74:	681a      	ldr	r2, [r3, #0]
 8008b76:	ea40 0301 	orr.w	r3, r0, r1
 8008b7a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b80:	681a      	ldr	r2, [r3, #0]
 8008b82:	4b8f      	ldr	r3, [pc, #572]	@ (8008dc0 <UART_SetConfig+0x2cc>)
 8008b84:	429a      	cmp	r2, r3
 8008b86:	d005      	beq.n	8008b94 <UART_SetConfig+0xa0>
 8008b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b8c:	681a      	ldr	r2, [r3, #0]
 8008b8e:	4b8d      	ldr	r3, [pc, #564]	@ (8008dc4 <UART_SetConfig+0x2d0>)
 8008b90:	429a      	cmp	r2, r3
 8008b92:	d104      	bne.n	8008b9e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008b94:	f7fe feb2 	bl	80078fc <HAL_RCC_GetPCLK2Freq>
 8008b98:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008b9c:	e003      	b.n	8008ba6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008b9e:	f7fe fe99 	bl	80078d4 <HAL_RCC_GetPCLK1Freq>
 8008ba2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008ba6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008baa:	69db      	ldr	r3, [r3, #28]
 8008bac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008bb0:	f040 810c 	bne.w	8008dcc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008bb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008bb8:	2200      	movs	r2, #0
 8008bba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008bbe:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008bc2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008bc6:	4622      	mov	r2, r4
 8008bc8:	462b      	mov	r3, r5
 8008bca:	1891      	adds	r1, r2, r2
 8008bcc:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008bce:	415b      	adcs	r3, r3
 8008bd0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008bd2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008bd6:	4621      	mov	r1, r4
 8008bd8:	eb12 0801 	adds.w	r8, r2, r1
 8008bdc:	4629      	mov	r1, r5
 8008bde:	eb43 0901 	adc.w	r9, r3, r1
 8008be2:	f04f 0200 	mov.w	r2, #0
 8008be6:	f04f 0300 	mov.w	r3, #0
 8008bea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008bee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008bf2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008bf6:	4690      	mov	r8, r2
 8008bf8:	4699      	mov	r9, r3
 8008bfa:	4623      	mov	r3, r4
 8008bfc:	eb18 0303 	adds.w	r3, r8, r3
 8008c00:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008c04:	462b      	mov	r3, r5
 8008c06:	eb49 0303 	adc.w	r3, r9, r3
 8008c0a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008c0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c12:	685b      	ldr	r3, [r3, #4]
 8008c14:	2200      	movs	r2, #0
 8008c16:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008c1a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008c1e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008c22:	460b      	mov	r3, r1
 8008c24:	18db      	adds	r3, r3, r3
 8008c26:	653b      	str	r3, [r7, #80]	@ 0x50
 8008c28:	4613      	mov	r3, r2
 8008c2a:	eb42 0303 	adc.w	r3, r2, r3
 8008c2e:	657b      	str	r3, [r7, #84]	@ 0x54
 8008c30:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008c34:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008c38:	f7f8 f826 	bl	8000c88 <__aeabi_uldivmod>
 8008c3c:	4602      	mov	r2, r0
 8008c3e:	460b      	mov	r3, r1
 8008c40:	4b61      	ldr	r3, [pc, #388]	@ (8008dc8 <UART_SetConfig+0x2d4>)
 8008c42:	fba3 2302 	umull	r2, r3, r3, r2
 8008c46:	095b      	lsrs	r3, r3, #5
 8008c48:	011c      	lsls	r4, r3, #4
 8008c4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008c4e:	2200      	movs	r2, #0
 8008c50:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008c54:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008c58:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008c5c:	4642      	mov	r2, r8
 8008c5e:	464b      	mov	r3, r9
 8008c60:	1891      	adds	r1, r2, r2
 8008c62:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008c64:	415b      	adcs	r3, r3
 8008c66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008c68:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008c6c:	4641      	mov	r1, r8
 8008c6e:	eb12 0a01 	adds.w	sl, r2, r1
 8008c72:	4649      	mov	r1, r9
 8008c74:	eb43 0b01 	adc.w	fp, r3, r1
 8008c78:	f04f 0200 	mov.w	r2, #0
 8008c7c:	f04f 0300 	mov.w	r3, #0
 8008c80:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008c84:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008c88:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008c8c:	4692      	mov	sl, r2
 8008c8e:	469b      	mov	fp, r3
 8008c90:	4643      	mov	r3, r8
 8008c92:	eb1a 0303 	adds.w	r3, sl, r3
 8008c96:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008c9a:	464b      	mov	r3, r9
 8008c9c:	eb4b 0303 	adc.w	r3, fp, r3
 8008ca0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ca8:	685b      	ldr	r3, [r3, #4]
 8008caa:	2200      	movs	r2, #0
 8008cac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008cb0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008cb4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008cb8:	460b      	mov	r3, r1
 8008cba:	18db      	adds	r3, r3, r3
 8008cbc:	643b      	str	r3, [r7, #64]	@ 0x40
 8008cbe:	4613      	mov	r3, r2
 8008cc0:	eb42 0303 	adc.w	r3, r2, r3
 8008cc4:	647b      	str	r3, [r7, #68]	@ 0x44
 8008cc6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008cca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008cce:	f7f7 ffdb 	bl	8000c88 <__aeabi_uldivmod>
 8008cd2:	4602      	mov	r2, r0
 8008cd4:	460b      	mov	r3, r1
 8008cd6:	4611      	mov	r1, r2
 8008cd8:	4b3b      	ldr	r3, [pc, #236]	@ (8008dc8 <UART_SetConfig+0x2d4>)
 8008cda:	fba3 2301 	umull	r2, r3, r3, r1
 8008cde:	095b      	lsrs	r3, r3, #5
 8008ce0:	2264      	movs	r2, #100	@ 0x64
 8008ce2:	fb02 f303 	mul.w	r3, r2, r3
 8008ce6:	1acb      	subs	r3, r1, r3
 8008ce8:	00db      	lsls	r3, r3, #3
 8008cea:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008cee:	4b36      	ldr	r3, [pc, #216]	@ (8008dc8 <UART_SetConfig+0x2d4>)
 8008cf0:	fba3 2302 	umull	r2, r3, r3, r2
 8008cf4:	095b      	lsrs	r3, r3, #5
 8008cf6:	005b      	lsls	r3, r3, #1
 8008cf8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008cfc:	441c      	add	r4, r3
 8008cfe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008d02:	2200      	movs	r2, #0
 8008d04:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008d08:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008d0c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008d10:	4642      	mov	r2, r8
 8008d12:	464b      	mov	r3, r9
 8008d14:	1891      	adds	r1, r2, r2
 8008d16:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008d18:	415b      	adcs	r3, r3
 8008d1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008d1c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008d20:	4641      	mov	r1, r8
 8008d22:	1851      	adds	r1, r2, r1
 8008d24:	6339      	str	r1, [r7, #48]	@ 0x30
 8008d26:	4649      	mov	r1, r9
 8008d28:	414b      	adcs	r3, r1
 8008d2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d2c:	f04f 0200 	mov.w	r2, #0
 8008d30:	f04f 0300 	mov.w	r3, #0
 8008d34:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008d38:	4659      	mov	r1, fp
 8008d3a:	00cb      	lsls	r3, r1, #3
 8008d3c:	4651      	mov	r1, sl
 8008d3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008d42:	4651      	mov	r1, sl
 8008d44:	00ca      	lsls	r2, r1, #3
 8008d46:	4610      	mov	r0, r2
 8008d48:	4619      	mov	r1, r3
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	4642      	mov	r2, r8
 8008d4e:	189b      	adds	r3, r3, r2
 8008d50:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008d54:	464b      	mov	r3, r9
 8008d56:	460a      	mov	r2, r1
 8008d58:	eb42 0303 	adc.w	r3, r2, r3
 8008d5c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d64:	685b      	ldr	r3, [r3, #4]
 8008d66:	2200      	movs	r2, #0
 8008d68:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008d6c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008d70:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008d74:	460b      	mov	r3, r1
 8008d76:	18db      	adds	r3, r3, r3
 8008d78:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008d7a:	4613      	mov	r3, r2
 8008d7c:	eb42 0303 	adc.w	r3, r2, r3
 8008d80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008d82:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008d86:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008d8a:	f7f7 ff7d 	bl	8000c88 <__aeabi_uldivmod>
 8008d8e:	4602      	mov	r2, r0
 8008d90:	460b      	mov	r3, r1
 8008d92:	4b0d      	ldr	r3, [pc, #52]	@ (8008dc8 <UART_SetConfig+0x2d4>)
 8008d94:	fba3 1302 	umull	r1, r3, r3, r2
 8008d98:	095b      	lsrs	r3, r3, #5
 8008d9a:	2164      	movs	r1, #100	@ 0x64
 8008d9c:	fb01 f303 	mul.w	r3, r1, r3
 8008da0:	1ad3      	subs	r3, r2, r3
 8008da2:	00db      	lsls	r3, r3, #3
 8008da4:	3332      	adds	r3, #50	@ 0x32
 8008da6:	4a08      	ldr	r2, [pc, #32]	@ (8008dc8 <UART_SetConfig+0x2d4>)
 8008da8:	fba2 2303 	umull	r2, r3, r2, r3
 8008dac:	095b      	lsrs	r3, r3, #5
 8008dae:	f003 0207 	and.w	r2, r3, #7
 8008db2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	4422      	add	r2, r4
 8008dba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008dbc:	e106      	b.n	8008fcc <UART_SetConfig+0x4d8>
 8008dbe:	bf00      	nop
 8008dc0:	40011000 	.word	0x40011000
 8008dc4:	40011400 	.word	0x40011400
 8008dc8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008dcc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008dd6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008dda:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008dde:	4642      	mov	r2, r8
 8008de0:	464b      	mov	r3, r9
 8008de2:	1891      	adds	r1, r2, r2
 8008de4:	6239      	str	r1, [r7, #32]
 8008de6:	415b      	adcs	r3, r3
 8008de8:	627b      	str	r3, [r7, #36]	@ 0x24
 8008dea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008dee:	4641      	mov	r1, r8
 8008df0:	1854      	adds	r4, r2, r1
 8008df2:	4649      	mov	r1, r9
 8008df4:	eb43 0501 	adc.w	r5, r3, r1
 8008df8:	f04f 0200 	mov.w	r2, #0
 8008dfc:	f04f 0300 	mov.w	r3, #0
 8008e00:	00eb      	lsls	r3, r5, #3
 8008e02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008e06:	00e2      	lsls	r2, r4, #3
 8008e08:	4614      	mov	r4, r2
 8008e0a:	461d      	mov	r5, r3
 8008e0c:	4643      	mov	r3, r8
 8008e0e:	18e3      	adds	r3, r4, r3
 8008e10:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008e14:	464b      	mov	r3, r9
 8008e16:	eb45 0303 	adc.w	r3, r5, r3
 8008e1a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008e1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e22:	685b      	ldr	r3, [r3, #4]
 8008e24:	2200      	movs	r2, #0
 8008e26:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008e2a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008e2e:	f04f 0200 	mov.w	r2, #0
 8008e32:	f04f 0300 	mov.w	r3, #0
 8008e36:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008e3a:	4629      	mov	r1, r5
 8008e3c:	008b      	lsls	r3, r1, #2
 8008e3e:	4621      	mov	r1, r4
 8008e40:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008e44:	4621      	mov	r1, r4
 8008e46:	008a      	lsls	r2, r1, #2
 8008e48:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008e4c:	f7f7 ff1c 	bl	8000c88 <__aeabi_uldivmod>
 8008e50:	4602      	mov	r2, r0
 8008e52:	460b      	mov	r3, r1
 8008e54:	4b60      	ldr	r3, [pc, #384]	@ (8008fd8 <UART_SetConfig+0x4e4>)
 8008e56:	fba3 2302 	umull	r2, r3, r3, r2
 8008e5a:	095b      	lsrs	r3, r3, #5
 8008e5c:	011c      	lsls	r4, r3, #4
 8008e5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008e62:	2200      	movs	r2, #0
 8008e64:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008e68:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008e6c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008e70:	4642      	mov	r2, r8
 8008e72:	464b      	mov	r3, r9
 8008e74:	1891      	adds	r1, r2, r2
 8008e76:	61b9      	str	r1, [r7, #24]
 8008e78:	415b      	adcs	r3, r3
 8008e7a:	61fb      	str	r3, [r7, #28]
 8008e7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008e80:	4641      	mov	r1, r8
 8008e82:	1851      	adds	r1, r2, r1
 8008e84:	6139      	str	r1, [r7, #16]
 8008e86:	4649      	mov	r1, r9
 8008e88:	414b      	adcs	r3, r1
 8008e8a:	617b      	str	r3, [r7, #20]
 8008e8c:	f04f 0200 	mov.w	r2, #0
 8008e90:	f04f 0300 	mov.w	r3, #0
 8008e94:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008e98:	4659      	mov	r1, fp
 8008e9a:	00cb      	lsls	r3, r1, #3
 8008e9c:	4651      	mov	r1, sl
 8008e9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008ea2:	4651      	mov	r1, sl
 8008ea4:	00ca      	lsls	r2, r1, #3
 8008ea6:	4610      	mov	r0, r2
 8008ea8:	4619      	mov	r1, r3
 8008eaa:	4603      	mov	r3, r0
 8008eac:	4642      	mov	r2, r8
 8008eae:	189b      	adds	r3, r3, r2
 8008eb0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008eb4:	464b      	mov	r3, r9
 8008eb6:	460a      	mov	r2, r1
 8008eb8:	eb42 0303 	adc.w	r3, r2, r3
 8008ebc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ec4:	685b      	ldr	r3, [r3, #4]
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008eca:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008ecc:	f04f 0200 	mov.w	r2, #0
 8008ed0:	f04f 0300 	mov.w	r3, #0
 8008ed4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008ed8:	4649      	mov	r1, r9
 8008eda:	008b      	lsls	r3, r1, #2
 8008edc:	4641      	mov	r1, r8
 8008ede:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008ee2:	4641      	mov	r1, r8
 8008ee4:	008a      	lsls	r2, r1, #2
 8008ee6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008eea:	f7f7 fecd 	bl	8000c88 <__aeabi_uldivmod>
 8008eee:	4602      	mov	r2, r0
 8008ef0:	460b      	mov	r3, r1
 8008ef2:	4611      	mov	r1, r2
 8008ef4:	4b38      	ldr	r3, [pc, #224]	@ (8008fd8 <UART_SetConfig+0x4e4>)
 8008ef6:	fba3 2301 	umull	r2, r3, r3, r1
 8008efa:	095b      	lsrs	r3, r3, #5
 8008efc:	2264      	movs	r2, #100	@ 0x64
 8008efe:	fb02 f303 	mul.w	r3, r2, r3
 8008f02:	1acb      	subs	r3, r1, r3
 8008f04:	011b      	lsls	r3, r3, #4
 8008f06:	3332      	adds	r3, #50	@ 0x32
 8008f08:	4a33      	ldr	r2, [pc, #204]	@ (8008fd8 <UART_SetConfig+0x4e4>)
 8008f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8008f0e:	095b      	lsrs	r3, r3, #5
 8008f10:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008f14:	441c      	add	r4, r3
 8008f16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	673b      	str	r3, [r7, #112]	@ 0x70
 8008f1e:	677a      	str	r2, [r7, #116]	@ 0x74
 8008f20:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008f24:	4642      	mov	r2, r8
 8008f26:	464b      	mov	r3, r9
 8008f28:	1891      	adds	r1, r2, r2
 8008f2a:	60b9      	str	r1, [r7, #8]
 8008f2c:	415b      	adcs	r3, r3
 8008f2e:	60fb      	str	r3, [r7, #12]
 8008f30:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008f34:	4641      	mov	r1, r8
 8008f36:	1851      	adds	r1, r2, r1
 8008f38:	6039      	str	r1, [r7, #0]
 8008f3a:	4649      	mov	r1, r9
 8008f3c:	414b      	adcs	r3, r1
 8008f3e:	607b      	str	r3, [r7, #4]
 8008f40:	f04f 0200 	mov.w	r2, #0
 8008f44:	f04f 0300 	mov.w	r3, #0
 8008f48:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008f4c:	4659      	mov	r1, fp
 8008f4e:	00cb      	lsls	r3, r1, #3
 8008f50:	4651      	mov	r1, sl
 8008f52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008f56:	4651      	mov	r1, sl
 8008f58:	00ca      	lsls	r2, r1, #3
 8008f5a:	4610      	mov	r0, r2
 8008f5c:	4619      	mov	r1, r3
 8008f5e:	4603      	mov	r3, r0
 8008f60:	4642      	mov	r2, r8
 8008f62:	189b      	adds	r3, r3, r2
 8008f64:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008f66:	464b      	mov	r3, r9
 8008f68:	460a      	mov	r2, r1
 8008f6a:	eb42 0303 	adc.w	r3, r2, r3
 8008f6e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f74:	685b      	ldr	r3, [r3, #4]
 8008f76:	2200      	movs	r2, #0
 8008f78:	663b      	str	r3, [r7, #96]	@ 0x60
 8008f7a:	667a      	str	r2, [r7, #100]	@ 0x64
 8008f7c:	f04f 0200 	mov.w	r2, #0
 8008f80:	f04f 0300 	mov.w	r3, #0
 8008f84:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008f88:	4649      	mov	r1, r9
 8008f8a:	008b      	lsls	r3, r1, #2
 8008f8c:	4641      	mov	r1, r8
 8008f8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008f92:	4641      	mov	r1, r8
 8008f94:	008a      	lsls	r2, r1, #2
 8008f96:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008f9a:	f7f7 fe75 	bl	8000c88 <__aeabi_uldivmod>
 8008f9e:	4602      	mov	r2, r0
 8008fa0:	460b      	mov	r3, r1
 8008fa2:	4b0d      	ldr	r3, [pc, #52]	@ (8008fd8 <UART_SetConfig+0x4e4>)
 8008fa4:	fba3 1302 	umull	r1, r3, r3, r2
 8008fa8:	095b      	lsrs	r3, r3, #5
 8008faa:	2164      	movs	r1, #100	@ 0x64
 8008fac:	fb01 f303 	mul.w	r3, r1, r3
 8008fb0:	1ad3      	subs	r3, r2, r3
 8008fb2:	011b      	lsls	r3, r3, #4
 8008fb4:	3332      	adds	r3, #50	@ 0x32
 8008fb6:	4a08      	ldr	r2, [pc, #32]	@ (8008fd8 <UART_SetConfig+0x4e4>)
 8008fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8008fbc:	095b      	lsrs	r3, r3, #5
 8008fbe:	f003 020f 	and.w	r2, r3, #15
 8008fc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	4422      	add	r2, r4
 8008fca:	609a      	str	r2, [r3, #8]
}
 8008fcc:	bf00      	nop
 8008fce:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008fd8:	51eb851f 	.word	0x51eb851f

08008fdc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008fdc:	b084      	sub	sp, #16
 8008fde:	b580      	push	{r7, lr}
 8008fe0:	b084      	sub	sp, #16
 8008fe2:	af00      	add	r7, sp, #0
 8008fe4:	6078      	str	r0, [r7, #4]
 8008fe6:	f107 001c 	add.w	r0, r7, #28
 8008fea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008fee:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8008ff2:	2b01      	cmp	r3, #1
 8008ff4:	d123      	bne.n	800903e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ffa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	68db      	ldr	r3, [r3, #12]
 8009006:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800900a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800900e:	687a      	ldr	r2, [r7, #4]
 8009010:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	68db      	ldr	r3, [r3, #12]
 8009016:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800901e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009022:	2b01      	cmp	r3, #1
 8009024:	d105      	bne.n	8009032 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	68db      	ldr	r3, [r3, #12]
 800902a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f001 fae8 	bl	800a608 <USB_CoreReset>
 8009038:	4603      	mov	r3, r0
 800903a:	73fb      	strb	r3, [r7, #15]
 800903c:	e01b      	b.n	8009076 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	68db      	ldr	r3, [r3, #12]
 8009042:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f001 fadc 	bl	800a608 <USB_CoreReset>
 8009050:	4603      	mov	r3, r0
 8009052:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009054:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009058:	2b00      	cmp	r3, #0
 800905a:	d106      	bne.n	800906a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009060:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	639a      	str	r2, [r3, #56]	@ 0x38
 8009068:	e005      	b.n	8009076 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800906e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009076:	7fbb      	ldrb	r3, [r7, #30]
 8009078:	2b01      	cmp	r3, #1
 800907a:	d10b      	bne.n	8009094 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	689b      	ldr	r3, [r3, #8]
 8009080:	f043 0206 	orr.w	r2, r3, #6
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	689b      	ldr	r3, [r3, #8]
 800908c:	f043 0220 	orr.w	r2, r3, #32
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009094:	7bfb      	ldrb	r3, [r7, #15]
}
 8009096:	4618      	mov	r0, r3
 8009098:	3710      	adds	r7, #16
 800909a:	46bd      	mov	sp, r7
 800909c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80090a0:	b004      	add	sp, #16
 80090a2:	4770      	bx	lr

080090a4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80090a4:	b480      	push	{r7}
 80090a6:	b087      	sub	sp, #28
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	60f8      	str	r0, [r7, #12]
 80090ac:	60b9      	str	r1, [r7, #8]
 80090ae:	4613      	mov	r3, r2
 80090b0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80090b2:	79fb      	ldrb	r3, [r7, #7]
 80090b4:	2b02      	cmp	r3, #2
 80090b6:	d165      	bne.n	8009184 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80090b8:	68bb      	ldr	r3, [r7, #8]
 80090ba:	4a41      	ldr	r2, [pc, #260]	@ (80091c0 <USB_SetTurnaroundTime+0x11c>)
 80090bc:	4293      	cmp	r3, r2
 80090be:	d906      	bls.n	80090ce <USB_SetTurnaroundTime+0x2a>
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	4a40      	ldr	r2, [pc, #256]	@ (80091c4 <USB_SetTurnaroundTime+0x120>)
 80090c4:	4293      	cmp	r3, r2
 80090c6:	d202      	bcs.n	80090ce <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80090c8:	230f      	movs	r3, #15
 80090ca:	617b      	str	r3, [r7, #20]
 80090cc:	e062      	b.n	8009194 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80090ce:	68bb      	ldr	r3, [r7, #8]
 80090d0:	4a3c      	ldr	r2, [pc, #240]	@ (80091c4 <USB_SetTurnaroundTime+0x120>)
 80090d2:	4293      	cmp	r3, r2
 80090d4:	d306      	bcc.n	80090e4 <USB_SetTurnaroundTime+0x40>
 80090d6:	68bb      	ldr	r3, [r7, #8]
 80090d8:	4a3b      	ldr	r2, [pc, #236]	@ (80091c8 <USB_SetTurnaroundTime+0x124>)
 80090da:	4293      	cmp	r3, r2
 80090dc:	d202      	bcs.n	80090e4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80090de:	230e      	movs	r3, #14
 80090e0:	617b      	str	r3, [r7, #20]
 80090e2:	e057      	b.n	8009194 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	4a38      	ldr	r2, [pc, #224]	@ (80091c8 <USB_SetTurnaroundTime+0x124>)
 80090e8:	4293      	cmp	r3, r2
 80090ea:	d306      	bcc.n	80090fa <USB_SetTurnaroundTime+0x56>
 80090ec:	68bb      	ldr	r3, [r7, #8]
 80090ee:	4a37      	ldr	r2, [pc, #220]	@ (80091cc <USB_SetTurnaroundTime+0x128>)
 80090f0:	4293      	cmp	r3, r2
 80090f2:	d202      	bcs.n	80090fa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80090f4:	230d      	movs	r3, #13
 80090f6:	617b      	str	r3, [r7, #20]
 80090f8:	e04c      	b.n	8009194 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80090fa:	68bb      	ldr	r3, [r7, #8]
 80090fc:	4a33      	ldr	r2, [pc, #204]	@ (80091cc <USB_SetTurnaroundTime+0x128>)
 80090fe:	4293      	cmp	r3, r2
 8009100:	d306      	bcc.n	8009110 <USB_SetTurnaroundTime+0x6c>
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	4a32      	ldr	r2, [pc, #200]	@ (80091d0 <USB_SetTurnaroundTime+0x12c>)
 8009106:	4293      	cmp	r3, r2
 8009108:	d802      	bhi.n	8009110 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800910a:	230c      	movs	r3, #12
 800910c:	617b      	str	r3, [r7, #20]
 800910e:	e041      	b.n	8009194 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009110:	68bb      	ldr	r3, [r7, #8]
 8009112:	4a2f      	ldr	r2, [pc, #188]	@ (80091d0 <USB_SetTurnaroundTime+0x12c>)
 8009114:	4293      	cmp	r3, r2
 8009116:	d906      	bls.n	8009126 <USB_SetTurnaroundTime+0x82>
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	4a2e      	ldr	r2, [pc, #184]	@ (80091d4 <USB_SetTurnaroundTime+0x130>)
 800911c:	4293      	cmp	r3, r2
 800911e:	d802      	bhi.n	8009126 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009120:	230b      	movs	r3, #11
 8009122:	617b      	str	r3, [r7, #20]
 8009124:	e036      	b.n	8009194 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009126:	68bb      	ldr	r3, [r7, #8]
 8009128:	4a2a      	ldr	r2, [pc, #168]	@ (80091d4 <USB_SetTurnaroundTime+0x130>)
 800912a:	4293      	cmp	r3, r2
 800912c:	d906      	bls.n	800913c <USB_SetTurnaroundTime+0x98>
 800912e:	68bb      	ldr	r3, [r7, #8]
 8009130:	4a29      	ldr	r2, [pc, #164]	@ (80091d8 <USB_SetTurnaroundTime+0x134>)
 8009132:	4293      	cmp	r3, r2
 8009134:	d802      	bhi.n	800913c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009136:	230a      	movs	r3, #10
 8009138:	617b      	str	r3, [r7, #20]
 800913a:	e02b      	b.n	8009194 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	4a26      	ldr	r2, [pc, #152]	@ (80091d8 <USB_SetTurnaroundTime+0x134>)
 8009140:	4293      	cmp	r3, r2
 8009142:	d906      	bls.n	8009152 <USB_SetTurnaroundTime+0xae>
 8009144:	68bb      	ldr	r3, [r7, #8]
 8009146:	4a25      	ldr	r2, [pc, #148]	@ (80091dc <USB_SetTurnaroundTime+0x138>)
 8009148:	4293      	cmp	r3, r2
 800914a:	d202      	bcs.n	8009152 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800914c:	2309      	movs	r3, #9
 800914e:	617b      	str	r3, [r7, #20]
 8009150:	e020      	b.n	8009194 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009152:	68bb      	ldr	r3, [r7, #8]
 8009154:	4a21      	ldr	r2, [pc, #132]	@ (80091dc <USB_SetTurnaroundTime+0x138>)
 8009156:	4293      	cmp	r3, r2
 8009158:	d306      	bcc.n	8009168 <USB_SetTurnaroundTime+0xc4>
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	4a20      	ldr	r2, [pc, #128]	@ (80091e0 <USB_SetTurnaroundTime+0x13c>)
 800915e:	4293      	cmp	r3, r2
 8009160:	d802      	bhi.n	8009168 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009162:	2308      	movs	r3, #8
 8009164:	617b      	str	r3, [r7, #20]
 8009166:	e015      	b.n	8009194 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	4a1d      	ldr	r2, [pc, #116]	@ (80091e0 <USB_SetTurnaroundTime+0x13c>)
 800916c:	4293      	cmp	r3, r2
 800916e:	d906      	bls.n	800917e <USB_SetTurnaroundTime+0xda>
 8009170:	68bb      	ldr	r3, [r7, #8]
 8009172:	4a1c      	ldr	r2, [pc, #112]	@ (80091e4 <USB_SetTurnaroundTime+0x140>)
 8009174:	4293      	cmp	r3, r2
 8009176:	d202      	bcs.n	800917e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009178:	2307      	movs	r3, #7
 800917a:	617b      	str	r3, [r7, #20]
 800917c:	e00a      	b.n	8009194 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800917e:	2306      	movs	r3, #6
 8009180:	617b      	str	r3, [r7, #20]
 8009182:	e007      	b.n	8009194 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009184:	79fb      	ldrb	r3, [r7, #7]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d102      	bne.n	8009190 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800918a:	2309      	movs	r3, #9
 800918c:	617b      	str	r3, [r7, #20]
 800918e:	e001      	b.n	8009194 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009190:	2309      	movs	r3, #9
 8009192:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	68db      	ldr	r3, [r3, #12]
 8009198:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	68da      	ldr	r2, [r3, #12]
 80091a4:	697b      	ldr	r3, [r7, #20]
 80091a6:	029b      	lsls	r3, r3, #10
 80091a8:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80091ac:	431a      	orrs	r2, r3
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80091b2:	2300      	movs	r3, #0
}
 80091b4:	4618      	mov	r0, r3
 80091b6:	371c      	adds	r7, #28
 80091b8:	46bd      	mov	sp, r7
 80091ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091be:	4770      	bx	lr
 80091c0:	00d8acbf 	.word	0x00d8acbf
 80091c4:	00e4e1c0 	.word	0x00e4e1c0
 80091c8:	00f42400 	.word	0x00f42400
 80091cc:	01067380 	.word	0x01067380
 80091d0:	011a499f 	.word	0x011a499f
 80091d4:	01312cff 	.word	0x01312cff
 80091d8:	014ca43f 	.word	0x014ca43f
 80091dc:	016e3600 	.word	0x016e3600
 80091e0:	01a6ab1f 	.word	0x01a6ab1f
 80091e4:	01e84800 	.word	0x01e84800

080091e8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80091e8:	b480      	push	{r7}
 80091ea:	b083      	sub	sp, #12
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	689b      	ldr	r3, [r3, #8]
 80091f4:	f043 0201 	orr.w	r2, r3, #1
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80091fc:	2300      	movs	r3, #0
}
 80091fe:	4618      	mov	r0, r3
 8009200:	370c      	adds	r7, #12
 8009202:	46bd      	mov	sp, r7
 8009204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009208:	4770      	bx	lr

0800920a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800920a:	b480      	push	{r7}
 800920c:	b083      	sub	sp, #12
 800920e:	af00      	add	r7, sp, #0
 8009210:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	689b      	ldr	r3, [r3, #8]
 8009216:	f023 0201 	bic.w	r2, r3, #1
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800921e:	2300      	movs	r3, #0
}
 8009220:	4618      	mov	r0, r3
 8009222:	370c      	adds	r7, #12
 8009224:	46bd      	mov	sp, r7
 8009226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922a:	4770      	bx	lr

0800922c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b084      	sub	sp, #16
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
 8009234:	460b      	mov	r3, r1
 8009236:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009238:	2300      	movs	r3, #0
 800923a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	68db      	ldr	r3, [r3, #12]
 8009240:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009248:	78fb      	ldrb	r3, [r7, #3]
 800924a:	2b01      	cmp	r3, #1
 800924c:	d115      	bne.n	800927a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	68db      	ldr	r3, [r3, #12]
 8009252:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800925a:	200a      	movs	r0, #10
 800925c:	f7f9 fc1c 	bl	8002a98 <HAL_Delay>
      ms += 10U;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	330a      	adds	r3, #10
 8009264:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	f001 f93f 	bl	800a4ea <USB_GetMode>
 800926c:	4603      	mov	r3, r0
 800926e:	2b01      	cmp	r3, #1
 8009270:	d01e      	beq.n	80092b0 <USB_SetCurrentMode+0x84>
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	2bc7      	cmp	r3, #199	@ 0xc7
 8009276:	d9f0      	bls.n	800925a <USB_SetCurrentMode+0x2e>
 8009278:	e01a      	b.n	80092b0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800927a:	78fb      	ldrb	r3, [r7, #3]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d115      	bne.n	80092ac <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	68db      	ldr	r3, [r3, #12]
 8009284:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800928c:	200a      	movs	r0, #10
 800928e:	f7f9 fc03 	bl	8002a98 <HAL_Delay>
      ms += 10U;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	330a      	adds	r3, #10
 8009296:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009298:	6878      	ldr	r0, [r7, #4]
 800929a:	f001 f926 	bl	800a4ea <USB_GetMode>
 800929e:	4603      	mov	r3, r0
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d005      	beq.n	80092b0 <USB_SetCurrentMode+0x84>
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	2bc7      	cmp	r3, #199	@ 0xc7
 80092a8:	d9f0      	bls.n	800928c <USB_SetCurrentMode+0x60>
 80092aa:	e001      	b.n	80092b0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80092ac:	2301      	movs	r3, #1
 80092ae:	e005      	b.n	80092bc <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	2bc8      	cmp	r3, #200	@ 0xc8
 80092b4:	d101      	bne.n	80092ba <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80092b6:	2301      	movs	r3, #1
 80092b8:	e000      	b.n	80092bc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80092ba:	2300      	movs	r3, #0
}
 80092bc:	4618      	mov	r0, r3
 80092be:	3710      	adds	r7, #16
 80092c0:	46bd      	mov	sp, r7
 80092c2:	bd80      	pop	{r7, pc}

080092c4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80092c4:	b084      	sub	sp, #16
 80092c6:	b580      	push	{r7, lr}
 80092c8:	b086      	sub	sp, #24
 80092ca:	af00      	add	r7, sp, #0
 80092cc:	6078      	str	r0, [r7, #4]
 80092ce:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80092d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80092d6:	2300      	movs	r3, #0
 80092d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80092de:	2300      	movs	r3, #0
 80092e0:	613b      	str	r3, [r7, #16]
 80092e2:	e009      	b.n	80092f8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80092e4:	687a      	ldr	r2, [r7, #4]
 80092e6:	693b      	ldr	r3, [r7, #16]
 80092e8:	3340      	adds	r3, #64	@ 0x40
 80092ea:	009b      	lsls	r3, r3, #2
 80092ec:	4413      	add	r3, r2
 80092ee:	2200      	movs	r2, #0
 80092f0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80092f2:	693b      	ldr	r3, [r7, #16]
 80092f4:	3301      	adds	r3, #1
 80092f6:	613b      	str	r3, [r7, #16]
 80092f8:	693b      	ldr	r3, [r7, #16]
 80092fa:	2b0e      	cmp	r3, #14
 80092fc:	d9f2      	bls.n	80092e4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80092fe:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009302:	2b00      	cmp	r3, #0
 8009304:	d11c      	bne.n	8009340 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800930c:	685b      	ldr	r3, [r3, #4]
 800930e:	68fa      	ldr	r2, [r7, #12]
 8009310:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009314:	f043 0302 	orr.w	r3, r3, #2
 8009318:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800931e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800932a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009336:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	639a      	str	r2, [r3, #56]	@ 0x38
 800933e:	e00b      	b.n	8009358 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009344:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009350:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800935e:	461a      	mov	r2, r3
 8009360:	2300      	movs	r3, #0
 8009362:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009364:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8009368:	2b01      	cmp	r3, #1
 800936a:	d10d      	bne.n	8009388 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800936c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009370:	2b00      	cmp	r3, #0
 8009372:	d104      	bne.n	800937e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009374:	2100      	movs	r1, #0
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f000 f968 	bl	800964c <USB_SetDevSpeed>
 800937c:	e008      	b.n	8009390 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800937e:	2101      	movs	r1, #1
 8009380:	6878      	ldr	r0, [r7, #4]
 8009382:	f000 f963 	bl	800964c <USB_SetDevSpeed>
 8009386:	e003      	b.n	8009390 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009388:	2103      	movs	r1, #3
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	f000 f95e 	bl	800964c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009390:	2110      	movs	r1, #16
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f000 f8fa 	bl	800958c <USB_FlushTxFifo>
 8009398:	4603      	mov	r3, r0
 800939a:	2b00      	cmp	r3, #0
 800939c:	d001      	beq.n	80093a2 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800939e:	2301      	movs	r3, #1
 80093a0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f000 f924 	bl	80095f0 <USB_FlushRxFifo>
 80093a8:	4603      	mov	r3, r0
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d001      	beq.n	80093b2 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80093ae:	2301      	movs	r3, #1
 80093b0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80093b8:	461a      	mov	r2, r3
 80093ba:	2300      	movs	r3, #0
 80093bc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80093c4:	461a      	mov	r2, r3
 80093c6:	2300      	movs	r3, #0
 80093c8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80093d0:	461a      	mov	r2, r3
 80093d2:	2300      	movs	r3, #0
 80093d4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80093d6:	2300      	movs	r3, #0
 80093d8:	613b      	str	r3, [r7, #16]
 80093da:	e043      	b.n	8009464 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80093dc:	693b      	ldr	r3, [r7, #16]
 80093de:	015a      	lsls	r2, r3, #5
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	4413      	add	r3, r2
 80093e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80093ee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80093f2:	d118      	bne.n	8009426 <USB_DevInit+0x162>
    {
      if (i == 0U)
 80093f4:	693b      	ldr	r3, [r7, #16]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d10a      	bne.n	8009410 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80093fa:	693b      	ldr	r3, [r7, #16]
 80093fc:	015a      	lsls	r2, r3, #5
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	4413      	add	r3, r2
 8009402:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009406:	461a      	mov	r2, r3
 8009408:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800940c:	6013      	str	r3, [r2, #0]
 800940e:	e013      	b.n	8009438 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009410:	693b      	ldr	r3, [r7, #16]
 8009412:	015a      	lsls	r2, r3, #5
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	4413      	add	r3, r2
 8009418:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800941c:	461a      	mov	r2, r3
 800941e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009422:	6013      	str	r3, [r2, #0]
 8009424:	e008      	b.n	8009438 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009426:	693b      	ldr	r3, [r7, #16]
 8009428:	015a      	lsls	r2, r3, #5
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	4413      	add	r3, r2
 800942e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009432:	461a      	mov	r2, r3
 8009434:	2300      	movs	r3, #0
 8009436:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009438:	693b      	ldr	r3, [r7, #16]
 800943a:	015a      	lsls	r2, r3, #5
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	4413      	add	r3, r2
 8009440:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009444:	461a      	mov	r2, r3
 8009446:	2300      	movs	r3, #0
 8009448:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800944a:	693b      	ldr	r3, [r7, #16]
 800944c:	015a      	lsls	r2, r3, #5
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	4413      	add	r3, r2
 8009452:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009456:	461a      	mov	r2, r3
 8009458:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800945c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800945e:	693b      	ldr	r3, [r7, #16]
 8009460:	3301      	adds	r3, #1
 8009462:	613b      	str	r3, [r7, #16]
 8009464:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009468:	461a      	mov	r2, r3
 800946a:	693b      	ldr	r3, [r7, #16]
 800946c:	4293      	cmp	r3, r2
 800946e:	d3b5      	bcc.n	80093dc <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009470:	2300      	movs	r3, #0
 8009472:	613b      	str	r3, [r7, #16]
 8009474:	e043      	b.n	80094fe <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009476:	693b      	ldr	r3, [r7, #16]
 8009478:	015a      	lsls	r2, r3, #5
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	4413      	add	r3, r2
 800947e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009488:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800948c:	d118      	bne.n	80094c0 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800948e:	693b      	ldr	r3, [r7, #16]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d10a      	bne.n	80094aa <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009494:	693b      	ldr	r3, [r7, #16]
 8009496:	015a      	lsls	r2, r3, #5
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	4413      	add	r3, r2
 800949c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80094a0:	461a      	mov	r2, r3
 80094a2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80094a6:	6013      	str	r3, [r2, #0]
 80094a8:	e013      	b.n	80094d2 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80094aa:	693b      	ldr	r3, [r7, #16]
 80094ac:	015a      	lsls	r2, r3, #5
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	4413      	add	r3, r2
 80094b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80094b6:	461a      	mov	r2, r3
 80094b8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80094bc:	6013      	str	r3, [r2, #0]
 80094be:	e008      	b.n	80094d2 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80094c0:	693b      	ldr	r3, [r7, #16]
 80094c2:	015a      	lsls	r2, r3, #5
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	4413      	add	r3, r2
 80094c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80094cc:	461a      	mov	r2, r3
 80094ce:	2300      	movs	r3, #0
 80094d0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80094d2:	693b      	ldr	r3, [r7, #16]
 80094d4:	015a      	lsls	r2, r3, #5
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	4413      	add	r3, r2
 80094da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80094de:	461a      	mov	r2, r3
 80094e0:	2300      	movs	r3, #0
 80094e2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80094e4:	693b      	ldr	r3, [r7, #16]
 80094e6:	015a      	lsls	r2, r3, #5
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	4413      	add	r3, r2
 80094ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80094f0:	461a      	mov	r2, r3
 80094f2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80094f6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80094f8:	693b      	ldr	r3, [r7, #16]
 80094fa:	3301      	adds	r3, #1
 80094fc:	613b      	str	r3, [r7, #16]
 80094fe:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009502:	461a      	mov	r2, r3
 8009504:	693b      	ldr	r3, [r7, #16]
 8009506:	4293      	cmp	r3, r2
 8009508:	d3b5      	bcc.n	8009476 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009510:	691b      	ldr	r3, [r3, #16]
 8009512:	68fa      	ldr	r2, [r7, #12]
 8009514:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009518:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800951c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2200      	movs	r2, #0
 8009522:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800952a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800952c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009530:	2b00      	cmp	r3, #0
 8009532:	d105      	bne.n	8009540 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	699b      	ldr	r3, [r3, #24]
 8009538:	f043 0210 	orr.w	r2, r3, #16
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	699a      	ldr	r2, [r3, #24]
 8009544:	4b10      	ldr	r3, [pc, #64]	@ (8009588 <USB_DevInit+0x2c4>)
 8009546:	4313      	orrs	r3, r2
 8009548:	687a      	ldr	r2, [r7, #4]
 800954a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800954c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8009550:	2b00      	cmp	r3, #0
 8009552:	d005      	beq.n	8009560 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	699b      	ldr	r3, [r3, #24]
 8009558:	f043 0208 	orr.w	r2, r3, #8
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009560:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009564:	2b01      	cmp	r3, #1
 8009566:	d107      	bne.n	8009578 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	699b      	ldr	r3, [r3, #24]
 800956c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009570:	f043 0304 	orr.w	r3, r3, #4
 8009574:	687a      	ldr	r2, [r7, #4]
 8009576:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009578:	7dfb      	ldrb	r3, [r7, #23]
}
 800957a:	4618      	mov	r0, r3
 800957c:	3718      	adds	r7, #24
 800957e:	46bd      	mov	sp, r7
 8009580:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009584:	b004      	add	sp, #16
 8009586:	4770      	bx	lr
 8009588:	803c3800 	.word	0x803c3800

0800958c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800958c:	b480      	push	{r7}
 800958e:	b085      	sub	sp, #20
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
 8009594:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009596:	2300      	movs	r3, #0
 8009598:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	3301      	adds	r3, #1
 800959e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80095a6:	d901      	bls.n	80095ac <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80095a8:	2303      	movs	r3, #3
 80095aa:	e01b      	b.n	80095e4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	691b      	ldr	r3, [r3, #16]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	daf2      	bge.n	800959a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80095b4:	2300      	movs	r3, #0
 80095b6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	019b      	lsls	r3, r3, #6
 80095bc:	f043 0220 	orr.w	r2, r3, #32
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	3301      	adds	r3, #1
 80095c8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80095d0:	d901      	bls.n	80095d6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80095d2:	2303      	movs	r3, #3
 80095d4:	e006      	b.n	80095e4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	691b      	ldr	r3, [r3, #16]
 80095da:	f003 0320 	and.w	r3, r3, #32
 80095de:	2b20      	cmp	r3, #32
 80095e0:	d0f0      	beq.n	80095c4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80095e2:	2300      	movs	r3, #0
}
 80095e4:	4618      	mov	r0, r3
 80095e6:	3714      	adds	r7, #20
 80095e8:	46bd      	mov	sp, r7
 80095ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ee:	4770      	bx	lr

080095f0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80095f0:	b480      	push	{r7}
 80095f2:	b085      	sub	sp, #20
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80095f8:	2300      	movs	r3, #0
 80095fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	3301      	adds	r3, #1
 8009600:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009608:	d901      	bls.n	800960e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800960a:	2303      	movs	r3, #3
 800960c:	e018      	b.n	8009640 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	691b      	ldr	r3, [r3, #16]
 8009612:	2b00      	cmp	r3, #0
 8009614:	daf2      	bge.n	80095fc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009616:	2300      	movs	r3, #0
 8009618:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	2210      	movs	r2, #16
 800961e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	3301      	adds	r3, #1
 8009624:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800962c:	d901      	bls.n	8009632 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800962e:	2303      	movs	r3, #3
 8009630:	e006      	b.n	8009640 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	691b      	ldr	r3, [r3, #16]
 8009636:	f003 0310 	and.w	r3, r3, #16
 800963a:	2b10      	cmp	r3, #16
 800963c:	d0f0      	beq.n	8009620 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800963e:	2300      	movs	r3, #0
}
 8009640:	4618      	mov	r0, r3
 8009642:	3714      	adds	r7, #20
 8009644:	46bd      	mov	sp, r7
 8009646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964a:	4770      	bx	lr

0800964c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800964c:	b480      	push	{r7}
 800964e:	b085      	sub	sp, #20
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
 8009654:	460b      	mov	r3, r1
 8009656:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009662:	681a      	ldr	r2, [r3, #0]
 8009664:	78fb      	ldrb	r3, [r7, #3]
 8009666:	68f9      	ldr	r1, [r7, #12]
 8009668:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800966c:	4313      	orrs	r3, r2
 800966e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009670:	2300      	movs	r3, #0
}
 8009672:	4618      	mov	r0, r3
 8009674:	3714      	adds	r7, #20
 8009676:	46bd      	mov	sp, r7
 8009678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967c:	4770      	bx	lr

0800967e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800967e:	b480      	push	{r7}
 8009680:	b087      	sub	sp, #28
 8009682:	af00      	add	r7, sp, #0
 8009684:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800968a:	693b      	ldr	r3, [r7, #16]
 800968c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009690:	689b      	ldr	r3, [r3, #8]
 8009692:	f003 0306 	and.w	r3, r3, #6
 8009696:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d102      	bne.n	80096a4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800969e:	2300      	movs	r3, #0
 80096a0:	75fb      	strb	r3, [r7, #23]
 80096a2:	e00a      	b.n	80096ba <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	2b02      	cmp	r3, #2
 80096a8:	d002      	beq.n	80096b0 <USB_GetDevSpeed+0x32>
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	2b06      	cmp	r3, #6
 80096ae:	d102      	bne.n	80096b6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80096b0:	2302      	movs	r3, #2
 80096b2:	75fb      	strb	r3, [r7, #23]
 80096b4:	e001      	b.n	80096ba <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80096b6:	230f      	movs	r3, #15
 80096b8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80096ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80096bc:	4618      	mov	r0, r3
 80096be:	371c      	adds	r7, #28
 80096c0:	46bd      	mov	sp, r7
 80096c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c6:	4770      	bx	lr

080096c8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80096c8:	b480      	push	{r7}
 80096ca:	b085      	sub	sp, #20
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
 80096d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	781b      	ldrb	r3, [r3, #0]
 80096da:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	785b      	ldrb	r3, [r3, #1]
 80096e0:	2b01      	cmp	r3, #1
 80096e2:	d13a      	bne.n	800975a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80096ea:	69da      	ldr	r2, [r3, #28]
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	781b      	ldrb	r3, [r3, #0]
 80096f0:	f003 030f 	and.w	r3, r3, #15
 80096f4:	2101      	movs	r1, #1
 80096f6:	fa01 f303 	lsl.w	r3, r1, r3
 80096fa:	b29b      	uxth	r3, r3
 80096fc:	68f9      	ldr	r1, [r7, #12]
 80096fe:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009702:	4313      	orrs	r3, r2
 8009704:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009706:	68bb      	ldr	r3, [r7, #8]
 8009708:	015a      	lsls	r2, r3, #5
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	4413      	add	r3, r2
 800970e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009718:	2b00      	cmp	r3, #0
 800971a:	d155      	bne.n	80097c8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800971c:	68bb      	ldr	r3, [r7, #8]
 800971e:	015a      	lsls	r2, r3, #5
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	4413      	add	r3, r2
 8009724:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009728:	681a      	ldr	r2, [r3, #0]
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	689b      	ldr	r3, [r3, #8]
 800972e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	791b      	ldrb	r3, [r3, #4]
 8009736:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009738:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800973a:	68bb      	ldr	r3, [r7, #8]
 800973c:	059b      	lsls	r3, r3, #22
 800973e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009740:	4313      	orrs	r3, r2
 8009742:	68ba      	ldr	r2, [r7, #8]
 8009744:	0151      	lsls	r1, r2, #5
 8009746:	68fa      	ldr	r2, [r7, #12]
 8009748:	440a      	add	r2, r1
 800974a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800974e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009752:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009756:	6013      	str	r3, [r2, #0]
 8009758:	e036      	b.n	80097c8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009760:	69da      	ldr	r2, [r3, #28]
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	781b      	ldrb	r3, [r3, #0]
 8009766:	f003 030f 	and.w	r3, r3, #15
 800976a:	2101      	movs	r1, #1
 800976c:	fa01 f303 	lsl.w	r3, r1, r3
 8009770:	041b      	lsls	r3, r3, #16
 8009772:	68f9      	ldr	r1, [r7, #12]
 8009774:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009778:	4313      	orrs	r3, r2
 800977a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	015a      	lsls	r2, r3, #5
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	4413      	add	r3, r2
 8009784:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800978e:	2b00      	cmp	r3, #0
 8009790:	d11a      	bne.n	80097c8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009792:	68bb      	ldr	r3, [r7, #8]
 8009794:	015a      	lsls	r2, r3, #5
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	4413      	add	r3, r2
 800979a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800979e:	681a      	ldr	r2, [r3, #0]
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	689b      	ldr	r3, [r3, #8]
 80097a4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	791b      	ldrb	r3, [r3, #4]
 80097ac:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80097ae:	430b      	orrs	r3, r1
 80097b0:	4313      	orrs	r3, r2
 80097b2:	68ba      	ldr	r2, [r7, #8]
 80097b4:	0151      	lsls	r1, r2, #5
 80097b6:	68fa      	ldr	r2, [r7, #12]
 80097b8:	440a      	add	r2, r1
 80097ba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80097be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80097c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80097c6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80097c8:	2300      	movs	r3, #0
}
 80097ca:	4618      	mov	r0, r3
 80097cc:	3714      	adds	r7, #20
 80097ce:	46bd      	mov	sp, r7
 80097d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d4:	4770      	bx	lr
	...

080097d8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80097d8:	b480      	push	{r7}
 80097da:	b085      	sub	sp, #20
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
 80097e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	781b      	ldrb	r3, [r3, #0]
 80097ea:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	785b      	ldrb	r3, [r3, #1]
 80097f0:	2b01      	cmp	r3, #1
 80097f2:	d161      	bne.n	80098b8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80097f4:	68bb      	ldr	r3, [r7, #8]
 80097f6:	015a      	lsls	r2, r3, #5
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	4413      	add	r3, r2
 80097fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009806:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800980a:	d11f      	bne.n	800984c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800980c:	68bb      	ldr	r3, [r7, #8]
 800980e:	015a      	lsls	r2, r3, #5
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	4413      	add	r3, r2
 8009814:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	68ba      	ldr	r2, [r7, #8]
 800981c:	0151      	lsls	r1, r2, #5
 800981e:	68fa      	ldr	r2, [r7, #12]
 8009820:	440a      	add	r2, r1
 8009822:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009826:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800982a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800982c:	68bb      	ldr	r3, [r7, #8]
 800982e:	015a      	lsls	r2, r3, #5
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	4413      	add	r3, r2
 8009834:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	68ba      	ldr	r2, [r7, #8]
 800983c:	0151      	lsls	r1, r2, #5
 800983e:	68fa      	ldr	r2, [r7, #12]
 8009840:	440a      	add	r2, r1
 8009842:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009846:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800984a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009852:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009854:	683b      	ldr	r3, [r7, #0]
 8009856:	781b      	ldrb	r3, [r3, #0]
 8009858:	f003 030f 	and.w	r3, r3, #15
 800985c:	2101      	movs	r1, #1
 800985e:	fa01 f303 	lsl.w	r3, r1, r3
 8009862:	b29b      	uxth	r3, r3
 8009864:	43db      	mvns	r3, r3
 8009866:	68f9      	ldr	r1, [r7, #12]
 8009868:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800986c:	4013      	ands	r3, r2
 800986e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009876:	69da      	ldr	r2, [r3, #28]
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	781b      	ldrb	r3, [r3, #0]
 800987c:	f003 030f 	and.w	r3, r3, #15
 8009880:	2101      	movs	r1, #1
 8009882:	fa01 f303 	lsl.w	r3, r1, r3
 8009886:	b29b      	uxth	r3, r3
 8009888:	43db      	mvns	r3, r3
 800988a:	68f9      	ldr	r1, [r7, #12]
 800988c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009890:	4013      	ands	r3, r2
 8009892:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009894:	68bb      	ldr	r3, [r7, #8]
 8009896:	015a      	lsls	r2, r3, #5
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	4413      	add	r3, r2
 800989c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80098a0:	681a      	ldr	r2, [r3, #0]
 80098a2:	68bb      	ldr	r3, [r7, #8]
 80098a4:	0159      	lsls	r1, r3, #5
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	440b      	add	r3, r1
 80098aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80098ae:	4619      	mov	r1, r3
 80098b0:	4b35      	ldr	r3, [pc, #212]	@ (8009988 <USB_DeactivateEndpoint+0x1b0>)
 80098b2:	4013      	ands	r3, r2
 80098b4:	600b      	str	r3, [r1, #0]
 80098b6:	e060      	b.n	800997a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80098b8:	68bb      	ldr	r3, [r7, #8]
 80098ba:	015a      	lsls	r2, r3, #5
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	4413      	add	r3, r2
 80098c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80098ca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80098ce:	d11f      	bne.n	8009910 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80098d0:	68bb      	ldr	r3, [r7, #8]
 80098d2:	015a      	lsls	r2, r3, #5
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	4413      	add	r3, r2
 80098d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	68ba      	ldr	r2, [r7, #8]
 80098e0:	0151      	lsls	r1, r2, #5
 80098e2:	68fa      	ldr	r2, [r7, #12]
 80098e4:	440a      	add	r2, r1
 80098e6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80098ea:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80098ee:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80098f0:	68bb      	ldr	r3, [r7, #8]
 80098f2:	015a      	lsls	r2, r3, #5
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	4413      	add	r3, r2
 80098f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	68ba      	ldr	r2, [r7, #8]
 8009900:	0151      	lsls	r1, r2, #5
 8009902:	68fa      	ldr	r2, [r7, #12]
 8009904:	440a      	add	r2, r1
 8009906:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800990a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800990e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009916:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	781b      	ldrb	r3, [r3, #0]
 800991c:	f003 030f 	and.w	r3, r3, #15
 8009920:	2101      	movs	r1, #1
 8009922:	fa01 f303 	lsl.w	r3, r1, r3
 8009926:	041b      	lsls	r3, r3, #16
 8009928:	43db      	mvns	r3, r3
 800992a:	68f9      	ldr	r1, [r7, #12]
 800992c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009930:	4013      	ands	r3, r2
 8009932:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800993a:	69da      	ldr	r2, [r3, #28]
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	781b      	ldrb	r3, [r3, #0]
 8009940:	f003 030f 	and.w	r3, r3, #15
 8009944:	2101      	movs	r1, #1
 8009946:	fa01 f303 	lsl.w	r3, r1, r3
 800994a:	041b      	lsls	r3, r3, #16
 800994c:	43db      	mvns	r3, r3
 800994e:	68f9      	ldr	r1, [r7, #12]
 8009950:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009954:	4013      	ands	r3, r2
 8009956:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009958:	68bb      	ldr	r3, [r7, #8]
 800995a:	015a      	lsls	r2, r3, #5
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	4413      	add	r3, r2
 8009960:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009964:	681a      	ldr	r2, [r3, #0]
 8009966:	68bb      	ldr	r3, [r7, #8]
 8009968:	0159      	lsls	r1, r3, #5
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	440b      	add	r3, r1
 800996e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009972:	4619      	mov	r1, r3
 8009974:	4b05      	ldr	r3, [pc, #20]	@ (800998c <USB_DeactivateEndpoint+0x1b4>)
 8009976:	4013      	ands	r3, r2
 8009978:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800997a:	2300      	movs	r3, #0
}
 800997c:	4618      	mov	r0, r3
 800997e:	3714      	adds	r7, #20
 8009980:	46bd      	mov	sp, r7
 8009982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009986:	4770      	bx	lr
 8009988:	ec337800 	.word	0xec337800
 800998c:	eff37800 	.word	0xeff37800

08009990 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b08a      	sub	sp, #40	@ 0x28
 8009994:	af02      	add	r7, sp, #8
 8009996:	60f8      	str	r0, [r7, #12]
 8009998:	60b9      	str	r1, [r7, #8]
 800999a:	4613      	mov	r3, r2
 800999c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80099a2:	68bb      	ldr	r3, [r7, #8]
 80099a4:	781b      	ldrb	r3, [r3, #0]
 80099a6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80099a8:	68bb      	ldr	r3, [r7, #8]
 80099aa:	785b      	ldrb	r3, [r3, #1]
 80099ac:	2b01      	cmp	r3, #1
 80099ae:	f040 817f 	bne.w	8009cb0 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80099b2:	68bb      	ldr	r3, [r7, #8]
 80099b4:	691b      	ldr	r3, [r3, #16]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d132      	bne.n	8009a20 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80099ba:	69bb      	ldr	r3, [r7, #24]
 80099bc:	015a      	lsls	r2, r3, #5
 80099be:	69fb      	ldr	r3, [r7, #28]
 80099c0:	4413      	add	r3, r2
 80099c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099c6:	691b      	ldr	r3, [r3, #16]
 80099c8:	69ba      	ldr	r2, [r7, #24]
 80099ca:	0151      	lsls	r1, r2, #5
 80099cc:	69fa      	ldr	r2, [r7, #28]
 80099ce:	440a      	add	r2, r1
 80099d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80099d4:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80099d8:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80099dc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80099de:	69bb      	ldr	r3, [r7, #24]
 80099e0:	015a      	lsls	r2, r3, #5
 80099e2:	69fb      	ldr	r3, [r7, #28]
 80099e4:	4413      	add	r3, r2
 80099e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099ea:	691b      	ldr	r3, [r3, #16]
 80099ec:	69ba      	ldr	r2, [r7, #24]
 80099ee:	0151      	lsls	r1, r2, #5
 80099f0:	69fa      	ldr	r2, [r7, #28]
 80099f2:	440a      	add	r2, r1
 80099f4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80099f8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80099fc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80099fe:	69bb      	ldr	r3, [r7, #24]
 8009a00:	015a      	lsls	r2, r3, #5
 8009a02:	69fb      	ldr	r3, [r7, #28]
 8009a04:	4413      	add	r3, r2
 8009a06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a0a:	691b      	ldr	r3, [r3, #16]
 8009a0c:	69ba      	ldr	r2, [r7, #24]
 8009a0e:	0151      	lsls	r1, r2, #5
 8009a10:	69fa      	ldr	r2, [r7, #28]
 8009a12:	440a      	add	r2, r1
 8009a14:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009a18:	0cdb      	lsrs	r3, r3, #19
 8009a1a:	04db      	lsls	r3, r3, #19
 8009a1c:	6113      	str	r3, [r2, #16]
 8009a1e:	e097      	b.n	8009b50 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009a20:	69bb      	ldr	r3, [r7, #24]
 8009a22:	015a      	lsls	r2, r3, #5
 8009a24:	69fb      	ldr	r3, [r7, #28]
 8009a26:	4413      	add	r3, r2
 8009a28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a2c:	691b      	ldr	r3, [r3, #16]
 8009a2e:	69ba      	ldr	r2, [r7, #24]
 8009a30:	0151      	lsls	r1, r2, #5
 8009a32:	69fa      	ldr	r2, [r7, #28]
 8009a34:	440a      	add	r2, r1
 8009a36:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009a3a:	0cdb      	lsrs	r3, r3, #19
 8009a3c:	04db      	lsls	r3, r3, #19
 8009a3e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009a40:	69bb      	ldr	r3, [r7, #24]
 8009a42:	015a      	lsls	r2, r3, #5
 8009a44:	69fb      	ldr	r3, [r7, #28]
 8009a46:	4413      	add	r3, r2
 8009a48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a4c:	691b      	ldr	r3, [r3, #16]
 8009a4e:	69ba      	ldr	r2, [r7, #24]
 8009a50:	0151      	lsls	r1, r2, #5
 8009a52:	69fa      	ldr	r2, [r7, #28]
 8009a54:	440a      	add	r2, r1
 8009a56:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009a5a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009a5e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009a62:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8009a64:	69bb      	ldr	r3, [r7, #24]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d11a      	bne.n	8009aa0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8009a6a:	68bb      	ldr	r3, [r7, #8]
 8009a6c:	691a      	ldr	r2, [r3, #16]
 8009a6e:	68bb      	ldr	r3, [r7, #8]
 8009a70:	689b      	ldr	r3, [r3, #8]
 8009a72:	429a      	cmp	r2, r3
 8009a74:	d903      	bls.n	8009a7e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8009a76:	68bb      	ldr	r3, [r7, #8]
 8009a78:	689a      	ldr	r2, [r3, #8]
 8009a7a:	68bb      	ldr	r3, [r7, #8]
 8009a7c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009a7e:	69bb      	ldr	r3, [r7, #24]
 8009a80:	015a      	lsls	r2, r3, #5
 8009a82:	69fb      	ldr	r3, [r7, #28]
 8009a84:	4413      	add	r3, r2
 8009a86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a8a:	691b      	ldr	r3, [r3, #16]
 8009a8c:	69ba      	ldr	r2, [r7, #24]
 8009a8e:	0151      	lsls	r1, r2, #5
 8009a90:	69fa      	ldr	r2, [r7, #28]
 8009a92:	440a      	add	r2, r1
 8009a94:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009a98:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009a9c:	6113      	str	r3, [r2, #16]
 8009a9e:	e044      	b.n	8009b2a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009aa0:	68bb      	ldr	r3, [r7, #8]
 8009aa2:	691a      	ldr	r2, [r3, #16]
 8009aa4:	68bb      	ldr	r3, [r7, #8]
 8009aa6:	689b      	ldr	r3, [r3, #8]
 8009aa8:	4413      	add	r3, r2
 8009aaa:	1e5a      	subs	r2, r3, #1
 8009aac:	68bb      	ldr	r3, [r7, #8]
 8009aae:	689b      	ldr	r3, [r3, #8]
 8009ab0:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ab4:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8009ab6:	69bb      	ldr	r3, [r7, #24]
 8009ab8:	015a      	lsls	r2, r3, #5
 8009aba:	69fb      	ldr	r3, [r7, #28]
 8009abc:	4413      	add	r3, r2
 8009abe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ac2:	691a      	ldr	r2, [r3, #16]
 8009ac4:	8afb      	ldrh	r3, [r7, #22]
 8009ac6:	04d9      	lsls	r1, r3, #19
 8009ac8:	4ba4      	ldr	r3, [pc, #656]	@ (8009d5c <USB_EPStartXfer+0x3cc>)
 8009aca:	400b      	ands	r3, r1
 8009acc:	69b9      	ldr	r1, [r7, #24]
 8009ace:	0148      	lsls	r0, r1, #5
 8009ad0:	69f9      	ldr	r1, [r7, #28]
 8009ad2:	4401      	add	r1, r0
 8009ad4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009ad8:	4313      	orrs	r3, r2
 8009ada:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8009adc:	68bb      	ldr	r3, [r7, #8]
 8009ade:	791b      	ldrb	r3, [r3, #4]
 8009ae0:	2b01      	cmp	r3, #1
 8009ae2:	d122      	bne.n	8009b2a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009ae4:	69bb      	ldr	r3, [r7, #24]
 8009ae6:	015a      	lsls	r2, r3, #5
 8009ae8:	69fb      	ldr	r3, [r7, #28]
 8009aea:	4413      	add	r3, r2
 8009aec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009af0:	691b      	ldr	r3, [r3, #16]
 8009af2:	69ba      	ldr	r2, [r7, #24]
 8009af4:	0151      	lsls	r1, r2, #5
 8009af6:	69fa      	ldr	r2, [r7, #28]
 8009af8:	440a      	add	r2, r1
 8009afa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009afe:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8009b02:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8009b04:	69bb      	ldr	r3, [r7, #24]
 8009b06:	015a      	lsls	r2, r3, #5
 8009b08:	69fb      	ldr	r3, [r7, #28]
 8009b0a:	4413      	add	r3, r2
 8009b0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b10:	691a      	ldr	r2, [r3, #16]
 8009b12:	8afb      	ldrh	r3, [r7, #22]
 8009b14:	075b      	lsls	r3, r3, #29
 8009b16:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8009b1a:	69b9      	ldr	r1, [r7, #24]
 8009b1c:	0148      	lsls	r0, r1, #5
 8009b1e:	69f9      	ldr	r1, [r7, #28]
 8009b20:	4401      	add	r1, r0
 8009b22:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009b26:	4313      	orrs	r3, r2
 8009b28:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009b2a:	69bb      	ldr	r3, [r7, #24]
 8009b2c:	015a      	lsls	r2, r3, #5
 8009b2e:	69fb      	ldr	r3, [r7, #28]
 8009b30:	4413      	add	r3, r2
 8009b32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b36:	691a      	ldr	r2, [r3, #16]
 8009b38:	68bb      	ldr	r3, [r7, #8]
 8009b3a:	691b      	ldr	r3, [r3, #16]
 8009b3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009b40:	69b9      	ldr	r1, [r7, #24]
 8009b42:	0148      	lsls	r0, r1, #5
 8009b44:	69f9      	ldr	r1, [r7, #28]
 8009b46:	4401      	add	r1, r0
 8009b48:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009b4c:	4313      	orrs	r3, r2
 8009b4e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009b50:	79fb      	ldrb	r3, [r7, #7]
 8009b52:	2b01      	cmp	r3, #1
 8009b54:	d14b      	bne.n	8009bee <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009b56:	68bb      	ldr	r3, [r7, #8]
 8009b58:	69db      	ldr	r3, [r3, #28]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d009      	beq.n	8009b72 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009b5e:	69bb      	ldr	r3, [r7, #24]
 8009b60:	015a      	lsls	r2, r3, #5
 8009b62:	69fb      	ldr	r3, [r7, #28]
 8009b64:	4413      	add	r3, r2
 8009b66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b6a:	461a      	mov	r2, r3
 8009b6c:	68bb      	ldr	r3, [r7, #8]
 8009b6e:	69db      	ldr	r3, [r3, #28]
 8009b70:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009b72:	68bb      	ldr	r3, [r7, #8]
 8009b74:	791b      	ldrb	r3, [r3, #4]
 8009b76:	2b01      	cmp	r3, #1
 8009b78:	d128      	bne.n	8009bcc <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009b7a:	69fb      	ldr	r3, [r7, #28]
 8009b7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b80:	689b      	ldr	r3, [r3, #8]
 8009b82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d110      	bne.n	8009bac <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009b8a:	69bb      	ldr	r3, [r7, #24]
 8009b8c:	015a      	lsls	r2, r3, #5
 8009b8e:	69fb      	ldr	r3, [r7, #28]
 8009b90:	4413      	add	r3, r2
 8009b92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	69ba      	ldr	r2, [r7, #24]
 8009b9a:	0151      	lsls	r1, r2, #5
 8009b9c:	69fa      	ldr	r2, [r7, #28]
 8009b9e:	440a      	add	r2, r1
 8009ba0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009ba4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009ba8:	6013      	str	r3, [r2, #0]
 8009baa:	e00f      	b.n	8009bcc <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009bac:	69bb      	ldr	r3, [r7, #24]
 8009bae:	015a      	lsls	r2, r3, #5
 8009bb0:	69fb      	ldr	r3, [r7, #28]
 8009bb2:	4413      	add	r3, r2
 8009bb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	69ba      	ldr	r2, [r7, #24]
 8009bbc:	0151      	lsls	r1, r2, #5
 8009bbe:	69fa      	ldr	r2, [r7, #28]
 8009bc0:	440a      	add	r2, r1
 8009bc2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009bc6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009bca:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009bcc:	69bb      	ldr	r3, [r7, #24]
 8009bce:	015a      	lsls	r2, r3, #5
 8009bd0:	69fb      	ldr	r3, [r7, #28]
 8009bd2:	4413      	add	r3, r2
 8009bd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	69ba      	ldr	r2, [r7, #24]
 8009bdc:	0151      	lsls	r1, r2, #5
 8009bde:	69fa      	ldr	r2, [r7, #28]
 8009be0:	440a      	add	r2, r1
 8009be2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009be6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009bea:	6013      	str	r3, [r2, #0]
 8009bec:	e166      	b.n	8009ebc <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009bee:	69bb      	ldr	r3, [r7, #24]
 8009bf0:	015a      	lsls	r2, r3, #5
 8009bf2:	69fb      	ldr	r3, [r7, #28]
 8009bf4:	4413      	add	r3, r2
 8009bf6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	69ba      	ldr	r2, [r7, #24]
 8009bfe:	0151      	lsls	r1, r2, #5
 8009c00:	69fa      	ldr	r2, [r7, #28]
 8009c02:	440a      	add	r2, r1
 8009c04:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009c08:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009c0c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009c0e:	68bb      	ldr	r3, [r7, #8]
 8009c10:	791b      	ldrb	r3, [r3, #4]
 8009c12:	2b01      	cmp	r3, #1
 8009c14:	d015      	beq.n	8009c42 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009c16:	68bb      	ldr	r3, [r7, #8]
 8009c18:	691b      	ldr	r3, [r3, #16]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	f000 814e 	beq.w	8009ebc <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009c20:	69fb      	ldr	r3, [r7, #28]
 8009c22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c26:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009c28:	68bb      	ldr	r3, [r7, #8]
 8009c2a:	781b      	ldrb	r3, [r3, #0]
 8009c2c:	f003 030f 	and.w	r3, r3, #15
 8009c30:	2101      	movs	r1, #1
 8009c32:	fa01 f303 	lsl.w	r3, r1, r3
 8009c36:	69f9      	ldr	r1, [r7, #28]
 8009c38:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009c3c:	4313      	orrs	r3, r2
 8009c3e:	634b      	str	r3, [r1, #52]	@ 0x34
 8009c40:	e13c      	b.n	8009ebc <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009c42:	69fb      	ldr	r3, [r7, #28]
 8009c44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c48:	689b      	ldr	r3, [r3, #8]
 8009c4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d110      	bne.n	8009c74 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009c52:	69bb      	ldr	r3, [r7, #24]
 8009c54:	015a      	lsls	r2, r3, #5
 8009c56:	69fb      	ldr	r3, [r7, #28]
 8009c58:	4413      	add	r3, r2
 8009c5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	69ba      	ldr	r2, [r7, #24]
 8009c62:	0151      	lsls	r1, r2, #5
 8009c64:	69fa      	ldr	r2, [r7, #28]
 8009c66:	440a      	add	r2, r1
 8009c68:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009c6c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009c70:	6013      	str	r3, [r2, #0]
 8009c72:	e00f      	b.n	8009c94 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009c74:	69bb      	ldr	r3, [r7, #24]
 8009c76:	015a      	lsls	r2, r3, #5
 8009c78:	69fb      	ldr	r3, [r7, #28]
 8009c7a:	4413      	add	r3, r2
 8009c7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	69ba      	ldr	r2, [r7, #24]
 8009c84:	0151      	lsls	r1, r2, #5
 8009c86:	69fa      	ldr	r2, [r7, #28]
 8009c88:	440a      	add	r2, r1
 8009c8a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009c8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009c92:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	68d9      	ldr	r1, [r3, #12]
 8009c98:	68bb      	ldr	r3, [r7, #8]
 8009c9a:	781a      	ldrb	r2, [r3, #0]
 8009c9c:	68bb      	ldr	r3, [r7, #8]
 8009c9e:	691b      	ldr	r3, [r3, #16]
 8009ca0:	b298      	uxth	r0, r3
 8009ca2:	79fb      	ldrb	r3, [r7, #7]
 8009ca4:	9300      	str	r3, [sp, #0]
 8009ca6:	4603      	mov	r3, r0
 8009ca8:	68f8      	ldr	r0, [r7, #12]
 8009caa:	f000 f9b9 	bl	800a020 <USB_WritePacket>
 8009cae:	e105      	b.n	8009ebc <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009cb0:	69bb      	ldr	r3, [r7, #24]
 8009cb2:	015a      	lsls	r2, r3, #5
 8009cb4:	69fb      	ldr	r3, [r7, #28]
 8009cb6:	4413      	add	r3, r2
 8009cb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009cbc:	691b      	ldr	r3, [r3, #16]
 8009cbe:	69ba      	ldr	r2, [r7, #24]
 8009cc0:	0151      	lsls	r1, r2, #5
 8009cc2:	69fa      	ldr	r2, [r7, #28]
 8009cc4:	440a      	add	r2, r1
 8009cc6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009cca:	0cdb      	lsrs	r3, r3, #19
 8009ccc:	04db      	lsls	r3, r3, #19
 8009cce:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009cd0:	69bb      	ldr	r3, [r7, #24]
 8009cd2:	015a      	lsls	r2, r3, #5
 8009cd4:	69fb      	ldr	r3, [r7, #28]
 8009cd6:	4413      	add	r3, r2
 8009cd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009cdc:	691b      	ldr	r3, [r3, #16]
 8009cde:	69ba      	ldr	r2, [r7, #24]
 8009ce0:	0151      	lsls	r1, r2, #5
 8009ce2:	69fa      	ldr	r2, [r7, #28]
 8009ce4:	440a      	add	r2, r1
 8009ce6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009cea:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009cee:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009cf2:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8009cf4:	69bb      	ldr	r3, [r7, #24]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d132      	bne.n	8009d60 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8009cfa:	68bb      	ldr	r3, [r7, #8]
 8009cfc:	691b      	ldr	r3, [r3, #16]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d003      	beq.n	8009d0a <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8009d02:	68bb      	ldr	r3, [r7, #8]
 8009d04:	689a      	ldr	r2, [r3, #8]
 8009d06:	68bb      	ldr	r3, [r7, #8]
 8009d08:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8009d0a:	68bb      	ldr	r3, [r7, #8]
 8009d0c:	689a      	ldr	r2, [r3, #8]
 8009d0e:	68bb      	ldr	r3, [r7, #8]
 8009d10:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009d12:	69bb      	ldr	r3, [r7, #24]
 8009d14:	015a      	lsls	r2, r3, #5
 8009d16:	69fb      	ldr	r3, [r7, #28]
 8009d18:	4413      	add	r3, r2
 8009d1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d1e:	691a      	ldr	r2, [r3, #16]
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	6a1b      	ldr	r3, [r3, #32]
 8009d24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009d28:	69b9      	ldr	r1, [r7, #24]
 8009d2a:	0148      	lsls	r0, r1, #5
 8009d2c:	69f9      	ldr	r1, [r7, #28]
 8009d2e:	4401      	add	r1, r0
 8009d30:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009d34:	4313      	orrs	r3, r2
 8009d36:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009d38:	69bb      	ldr	r3, [r7, #24]
 8009d3a:	015a      	lsls	r2, r3, #5
 8009d3c:	69fb      	ldr	r3, [r7, #28]
 8009d3e:	4413      	add	r3, r2
 8009d40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d44:	691b      	ldr	r3, [r3, #16]
 8009d46:	69ba      	ldr	r2, [r7, #24]
 8009d48:	0151      	lsls	r1, r2, #5
 8009d4a:	69fa      	ldr	r2, [r7, #28]
 8009d4c:	440a      	add	r2, r1
 8009d4e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009d52:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009d56:	6113      	str	r3, [r2, #16]
 8009d58:	e062      	b.n	8009e20 <USB_EPStartXfer+0x490>
 8009d5a:	bf00      	nop
 8009d5c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8009d60:	68bb      	ldr	r3, [r7, #8]
 8009d62:	691b      	ldr	r3, [r3, #16]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d123      	bne.n	8009db0 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009d68:	69bb      	ldr	r3, [r7, #24]
 8009d6a:	015a      	lsls	r2, r3, #5
 8009d6c:	69fb      	ldr	r3, [r7, #28]
 8009d6e:	4413      	add	r3, r2
 8009d70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d74:	691a      	ldr	r2, [r3, #16]
 8009d76:	68bb      	ldr	r3, [r7, #8]
 8009d78:	689b      	ldr	r3, [r3, #8]
 8009d7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009d7e:	69b9      	ldr	r1, [r7, #24]
 8009d80:	0148      	lsls	r0, r1, #5
 8009d82:	69f9      	ldr	r1, [r7, #28]
 8009d84:	4401      	add	r1, r0
 8009d86:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009d8a:	4313      	orrs	r3, r2
 8009d8c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009d8e:	69bb      	ldr	r3, [r7, #24]
 8009d90:	015a      	lsls	r2, r3, #5
 8009d92:	69fb      	ldr	r3, [r7, #28]
 8009d94:	4413      	add	r3, r2
 8009d96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d9a:	691b      	ldr	r3, [r3, #16]
 8009d9c:	69ba      	ldr	r2, [r7, #24]
 8009d9e:	0151      	lsls	r1, r2, #5
 8009da0:	69fa      	ldr	r2, [r7, #28]
 8009da2:	440a      	add	r2, r1
 8009da4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009da8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009dac:	6113      	str	r3, [r2, #16]
 8009dae:	e037      	b.n	8009e20 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009db0:	68bb      	ldr	r3, [r7, #8]
 8009db2:	691a      	ldr	r2, [r3, #16]
 8009db4:	68bb      	ldr	r3, [r7, #8]
 8009db6:	689b      	ldr	r3, [r3, #8]
 8009db8:	4413      	add	r3, r2
 8009dba:	1e5a      	subs	r2, r3, #1
 8009dbc:	68bb      	ldr	r3, [r7, #8]
 8009dbe:	689b      	ldr	r3, [r3, #8]
 8009dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8009dc4:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8009dc6:	68bb      	ldr	r3, [r7, #8]
 8009dc8:	689b      	ldr	r3, [r3, #8]
 8009dca:	8afa      	ldrh	r2, [r7, #22]
 8009dcc:	fb03 f202 	mul.w	r2, r3, r2
 8009dd0:	68bb      	ldr	r3, [r7, #8]
 8009dd2:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009dd4:	69bb      	ldr	r3, [r7, #24]
 8009dd6:	015a      	lsls	r2, r3, #5
 8009dd8:	69fb      	ldr	r3, [r7, #28]
 8009dda:	4413      	add	r3, r2
 8009ddc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009de0:	691a      	ldr	r2, [r3, #16]
 8009de2:	8afb      	ldrh	r3, [r7, #22]
 8009de4:	04d9      	lsls	r1, r3, #19
 8009de6:	4b38      	ldr	r3, [pc, #224]	@ (8009ec8 <USB_EPStartXfer+0x538>)
 8009de8:	400b      	ands	r3, r1
 8009dea:	69b9      	ldr	r1, [r7, #24]
 8009dec:	0148      	lsls	r0, r1, #5
 8009dee:	69f9      	ldr	r1, [r7, #28]
 8009df0:	4401      	add	r1, r0
 8009df2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009df6:	4313      	orrs	r3, r2
 8009df8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009dfa:	69bb      	ldr	r3, [r7, #24]
 8009dfc:	015a      	lsls	r2, r3, #5
 8009dfe:	69fb      	ldr	r3, [r7, #28]
 8009e00:	4413      	add	r3, r2
 8009e02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e06:	691a      	ldr	r2, [r3, #16]
 8009e08:	68bb      	ldr	r3, [r7, #8]
 8009e0a:	6a1b      	ldr	r3, [r3, #32]
 8009e0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009e10:	69b9      	ldr	r1, [r7, #24]
 8009e12:	0148      	lsls	r0, r1, #5
 8009e14:	69f9      	ldr	r1, [r7, #28]
 8009e16:	4401      	add	r1, r0
 8009e18:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009e1c:	4313      	orrs	r3, r2
 8009e1e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8009e20:	79fb      	ldrb	r3, [r7, #7]
 8009e22:	2b01      	cmp	r3, #1
 8009e24:	d10d      	bne.n	8009e42 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009e26:	68bb      	ldr	r3, [r7, #8]
 8009e28:	68db      	ldr	r3, [r3, #12]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d009      	beq.n	8009e42 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009e2e:	68bb      	ldr	r3, [r7, #8]
 8009e30:	68d9      	ldr	r1, [r3, #12]
 8009e32:	69bb      	ldr	r3, [r7, #24]
 8009e34:	015a      	lsls	r2, r3, #5
 8009e36:	69fb      	ldr	r3, [r7, #28]
 8009e38:	4413      	add	r3, r2
 8009e3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e3e:	460a      	mov	r2, r1
 8009e40:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009e42:	68bb      	ldr	r3, [r7, #8]
 8009e44:	791b      	ldrb	r3, [r3, #4]
 8009e46:	2b01      	cmp	r3, #1
 8009e48:	d128      	bne.n	8009e9c <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009e4a:	69fb      	ldr	r3, [r7, #28]
 8009e4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e50:	689b      	ldr	r3, [r3, #8]
 8009e52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d110      	bne.n	8009e7c <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009e5a:	69bb      	ldr	r3, [r7, #24]
 8009e5c:	015a      	lsls	r2, r3, #5
 8009e5e:	69fb      	ldr	r3, [r7, #28]
 8009e60:	4413      	add	r3, r2
 8009e62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	69ba      	ldr	r2, [r7, #24]
 8009e6a:	0151      	lsls	r1, r2, #5
 8009e6c:	69fa      	ldr	r2, [r7, #28]
 8009e6e:	440a      	add	r2, r1
 8009e70:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009e74:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009e78:	6013      	str	r3, [r2, #0]
 8009e7a:	e00f      	b.n	8009e9c <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009e7c:	69bb      	ldr	r3, [r7, #24]
 8009e7e:	015a      	lsls	r2, r3, #5
 8009e80:	69fb      	ldr	r3, [r7, #28]
 8009e82:	4413      	add	r3, r2
 8009e84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	69ba      	ldr	r2, [r7, #24]
 8009e8c:	0151      	lsls	r1, r2, #5
 8009e8e:	69fa      	ldr	r2, [r7, #28]
 8009e90:	440a      	add	r2, r1
 8009e92:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009e96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009e9a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009e9c:	69bb      	ldr	r3, [r7, #24]
 8009e9e:	015a      	lsls	r2, r3, #5
 8009ea0:	69fb      	ldr	r3, [r7, #28]
 8009ea2:	4413      	add	r3, r2
 8009ea4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	69ba      	ldr	r2, [r7, #24]
 8009eac:	0151      	lsls	r1, r2, #5
 8009eae:	69fa      	ldr	r2, [r7, #28]
 8009eb0:	440a      	add	r2, r1
 8009eb2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009eb6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009eba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009ebc:	2300      	movs	r3, #0
}
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	3720      	adds	r7, #32
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	bd80      	pop	{r7, pc}
 8009ec6:	bf00      	nop
 8009ec8:	1ff80000 	.word	0x1ff80000

08009ecc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009ecc:	b480      	push	{r7}
 8009ece:	b087      	sub	sp, #28
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
 8009ed4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009eda:	2300      	movs	r3, #0
 8009edc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009ee2:	683b      	ldr	r3, [r7, #0]
 8009ee4:	785b      	ldrb	r3, [r3, #1]
 8009ee6:	2b01      	cmp	r3, #1
 8009ee8:	d14a      	bne.n	8009f80 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009eea:	683b      	ldr	r3, [r7, #0]
 8009eec:	781b      	ldrb	r3, [r3, #0]
 8009eee:	015a      	lsls	r2, r3, #5
 8009ef0:	693b      	ldr	r3, [r7, #16]
 8009ef2:	4413      	add	r3, r2
 8009ef4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009efe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009f02:	f040 8086 	bne.w	800a012 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009f06:	683b      	ldr	r3, [r7, #0]
 8009f08:	781b      	ldrb	r3, [r3, #0]
 8009f0a:	015a      	lsls	r2, r3, #5
 8009f0c:	693b      	ldr	r3, [r7, #16]
 8009f0e:	4413      	add	r3, r2
 8009f10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	683a      	ldr	r2, [r7, #0]
 8009f18:	7812      	ldrb	r2, [r2, #0]
 8009f1a:	0151      	lsls	r1, r2, #5
 8009f1c:	693a      	ldr	r2, [r7, #16]
 8009f1e:	440a      	add	r2, r1
 8009f20:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009f24:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009f28:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009f2a:	683b      	ldr	r3, [r7, #0]
 8009f2c:	781b      	ldrb	r3, [r3, #0]
 8009f2e:	015a      	lsls	r2, r3, #5
 8009f30:	693b      	ldr	r3, [r7, #16]
 8009f32:	4413      	add	r3, r2
 8009f34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	683a      	ldr	r2, [r7, #0]
 8009f3c:	7812      	ldrb	r2, [r2, #0]
 8009f3e:	0151      	lsls	r1, r2, #5
 8009f40:	693a      	ldr	r2, [r7, #16]
 8009f42:	440a      	add	r2, r1
 8009f44:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009f48:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009f4c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	3301      	adds	r3, #1
 8009f52:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009f5a:	4293      	cmp	r3, r2
 8009f5c:	d902      	bls.n	8009f64 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009f5e:	2301      	movs	r3, #1
 8009f60:	75fb      	strb	r3, [r7, #23]
          break;
 8009f62:	e056      	b.n	800a012 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009f64:	683b      	ldr	r3, [r7, #0]
 8009f66:	781b      	ldrb	r3, [r3, #0]
 8009f68:	015a      	lsls	r2, r3, #5
 8009f6a:	693b      	ldr	r3, [r7, #16]
 8009f6c:	4413      	add	r3, r2
 8009f6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009f78:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009f7c:	d0e7      	beq.n	8009f4e <USB_EPStopXfer+0x82>
 8009f7e:	e048      	b.n	800a012 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	781b      	ldrb	r3, [r3, #0]
 8009f84:	015a      	lsls	r2, r3, #5
 8009f86:	693b      	ldr	r3, [r7, #16]
 8009f88:	4413      	add	r3, r2
 8009f8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009f94:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009f98:	d13b      	bne.n	800a012 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	781b      	ldrb	r3, [r3, #0]
 8009f9e:	015a      	lsls	r2, r3, #5
 8009fa0:	693b      	ldr	r3, [r7, #16]
 8009fa2:	4413      	add	r3, r2
 8009fa4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	683a      	ldr	r2, [r7, #0]
 8009fac:	7812      	ldrb	r2, [r2, #0]
 8009fae:	0151      	lsls	r1, r2, #5
 8009fb0:	693a      	ldr	r2, [r7, #16]
 8009fb2:	440a      	add	r2, r1
 8009fb4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009fb8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009fbc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009fbe:	683b      	ldr	r3, [r7, #0]
 8009fc0:	781b      	ldrb	r3, [r3, #0]
 8009fc2:	015a      	lsls	r2, r3, #5
 8009fc4:	693b      	ldr	r3, [r7, #16]
 8009fc6:	4413      	add	r3, r2
 8009fc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	683a      	ldr	r2, [r7, #0]
 8009fd0:	7812      	ldrb	r2, [r2, #0]
 8009fd2:	0151      	lsls	r1, r2, #5
 8009fd4:	693a      	ldr	r2, [r7, #16]
 8009fd6:	440a      	add	r2, r1
 8009fd8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009fdc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009fe0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	3301      	adds	r3, #1
 8009fe6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009fee:	4293      	cmp	r3, r2
 8009ff0:	d902      	bls.n	8009ff8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009ff2:	2301      	movs	r3, #1
 8009ff4:	75fb      	strb	r3, [r7, #23]
          break;
 8009ff6:	e00c      	b.n	800a012 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	781b      	ldrb	r3, [r3, #0]
 8009ffc:	015a      	lsls	r2, r3, #5
 8009ffe:	693b      	ldr	r3, [r7, #16]
 800a000:	4413      	add	r3, r2
 800a002:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a00c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a010:	d0e7      	beq.n	8009fe2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a012:	7dfb      	ldrb	r3, [r7, #23]
}
 800a014:	4618      	mov	r0, r3
 800a016:	371c      	adds	r7, #28
 800a018:	46bd      	mov	sp, r7
 800a01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01e:	4770      	bx	lr

0800a020 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a020:	b480      	push	{r7}
 800a022:	b089      	sub	sp, #36	@ 0x24
 800a024:	af00      	add	r7, sp, #0
 800a026:	60f8      	str	r0, [r7, #12]
 800a028:	60b9      	str	r1, [r7, #8]
 800a02a:	4611      	mov	r1, r2
 800a02c:	461a      	mov	r2, r3
 800a02e:	460b      	mov	r3, r1
 800a030:	71fb      	strb	r3, [r7, #7]
 800a032:	4613      	mov	r3, r2
 800a034:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a03a:	68bb      	ldr	r3, [r7, #8]
 800a03c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a03e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a042:	2b00      	cmp	r3, #0
 800a044:	d123      	bne.n	800a08e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a046:	88bb      	ldrh	r3, [r7, #4]
 800a048:	3303      	adds	r3, #3
 800a04a:	089b      	lsrs	r3, r3, #2
 800a04c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a04e:	2300      	movs	r3, #0
 800a050:	61bb      	str	r3, [r7, #24]
 800a052:	e018      	b.n	800a086 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a054:	79fb      	ldrb	r3, [r7, #7]
 800a056:	031a      	lsls	r2, r3, #12
 800a058:	697b      	ldr	r3, [r7, #20]
 800a05a:	4413      	add	r3, r2
 800a05c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a060:	461a      	mov	r2, r3
 800a062:	69fb      	ldr	r3, [r7, #28]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a068:	69fb      	ldr	r3, [r7, #28]
 800a06a:	3301      	adds	r3, #1
 800a06c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a06e:	69fb      	ldr	r3, [r7, #28]
 800a070:	3301      	adds	r3, #1
 800a072:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a074:	69fb      	ldr	r3, [r7, #28]
 800a076:	3301      	adds	r3, #1
 800a078:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a07a:	69fb      	ldr	r3, [r7, #28]
 800a07c:	3301      	adds	r3, #1
 800a07e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a080:	69bb      	ldr	r3, [r7, #24]
 800a082:	3301      	adds	r3, #1
 800a084:	61bb      	str	r3, [r7, #24]
 800a086:	69ba      	ldr	r2, [r7, #24]
 800a088:	693b      	ldr	r3, [r7, #16]
 800a08a:	429a      	cmp	r2, r3
 800a08c:	d3e2      	bcc.n	800a054 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a08e:	2300      	movs	r3, #0
}
 800a090:	4618      	mov	r0, r3
 800a092:	3724      	adds	r7, #36	@ 0x24
 800a094:	46bd      	mov	sp, r7
 800a096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09a:	4770      	bx	lr

0800a09c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a09c:	b480      	push	{r7}
 800a09e:	b08b      	sub	sp, #44	@ 0x2c
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	60f8      	str	r0, [r7, #12]
 800a0a4:	60b9      	str	r1, [r7, #8]
 800a0a6:	4613      	mov	r3, r2
 800a0a8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a0ae:	68bb      	ldr	r3, [r7, #8]
 800a0b0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a0b2:	88fb      	ldrh	r3, [r7, #6]
 800a0b4:	089b      	lsrs	r3, r3, #2
 800a0b6:	b29b      	uxth	r3, r3
 800a0b8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a0ba:	88fb      	ldrh	r3, [r7, #6]
 800a0bc:	f003 0303 	and.w	r3, r3, #3
 800a0c0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	623b      	str	r3, [r7, #32]
 800a0c6:	e014      	b.n	800a0f2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a0c8:	69bb      	ldr	r3, [r7, #24]
 800a0ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a0ce:	681a      	ldr	r2, [r3, #0]
 800a0d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0d2:	601a      	str	r2, [r3, #0]
    pDest++;
 800a0d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0d6:	3301      	adds	r3, #1
 800a0d8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a0da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0dc:	3301      	adds	r3, #1
 800a0de:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a0e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0e2:	3301      	adds	r3, #1
 800a0e4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a0e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0e8:	3301      	adds	r3, #1
 800a0ea:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800a0ec:	6a3b      	ldr	r3, [r7, #32]
 800a0ee:	3301      	adds	r3, #1
 800a0f0:	623b      	str	r3, [r7, #32]
 800a0f2:	6a3a      	ldr	r2, [r7, #32]
 800a0f4:	697b      	ldr	r3, [r7, #20]
 800a0f6:	429a      	cmp	r2, r3
 800a0f8:	d3e6      	bcc.n	800a0c8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a0fa:	8bfb      	ldrh	r3, [r7, #30]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d01e      	beq.n	800a13e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a100:	2300      	movs	r3, #0
 800a102:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a104:	69bb      	ldr	r3, [r7, #24]
 800a106:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a10a:	461a      	mov	r2, r3
 800a10c:	f107 0310 	add.w	r3, r7, #16
 800a110:	6812      	ldr	r2, [r2, #0]
 800a112:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a114:	693a      	ldr	r2, [r7, #16]
 800a116:	6a3b      	ldr	r3, [r7, #32]
 800a118:	b2db      	uxtb	r3, r3
 800a11a:	00db      	lsls	r3, r3, #3
 800a11c:	fa22 f303 	lsr.w	r3, r2, r3
 800a120:	b2da      	uxtb	r2, r3
 800a122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a124:	701a      	strb	r2, [r3, #0]
      i++;
 800a126:	6a3b      	ldr	r3, [r7, #32]
 800a128:	3301      	adds	r3, #1
 800a12a:	623b      	str	r3, [r7, #32]
      pDest++;
 800a12c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a12e:	3301      	adds	r3, #1
 800a130:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800a132:	8bfb      	ldrh	r3, [r7, #30]
 800a134:	3b01      	subs	r3, #1
 800a136:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a138:	8bfb      	ldrh	r3, [r7, #30]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d1ea      	bne.n	800a114 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a13e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a140:	4618      	mov	r0, r3
 800a142:	372c      	adds	r7, #44	@ 0x2c
 800a144:	46bd      	mov	sp, r7
 800a146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14a:	4770      	bx	lr

0800a14c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a14c:	b480      	push	{r7}
 800a14e:	b085      	sub	sp, #20
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
 800a154:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a15a:	683b      	ldr	r3, [r7, #0]
 800a15c:	781b      	ldrb	r3, [r3, #0]
 800a15e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	785b      	ldrb	r3, [r3, #1]
 800a164:	2b01      	cmp	r3, #1
 800a166:	d12c      	bne.n	800a1c2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a168:	68bb      	ldr	r3, [r7, #8]
 800a16a:	015a      	lsls	r2, r3, #5
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	4413      	add	r3, r2
 800a170:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	2b00      	cmp	r3, #0
 800a178:	db12      	blt.n	800a1a0 <USB_EPSetStall+0x54>
 800a17a:	68bb      	ldr	r3, [r7, #8]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d00f      	beq.n	800a1a0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a180:	68bb      	ldr	r3, [r7, #8]
 800a182:	015a      	lsls	r2, r3, #5
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	4413      	add	r3, r2
 800a188:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	68ba      	ldr	r2, [r7, #8]
 800a190:	0151      	lsls	r1, r2, #5
 800a192:	68fa      	ldr	r2, [r7, #12]
 800a194:	440a      	add	r2, r1
 800a196:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a19a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a19e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a1a0:	68bb      	ldr	r3, [r7, #8]
 800a1a2:	015a      	lsls	r2, r3, #5
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	4413      	add	r3, r2
 800a1a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	68ba      	ldr	r2, [r7, #8]
 800a1b0:	0151      	lsls	r1, r2, #5
 800a1b2:	68fa      	ldr	r2, [r7, #12]
 800a1b4:	440a      	add	r2, r1
 800a1b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a1ba:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a1be:	6013      	str	r3, [r2, #0]
 800a1c0:	e02b      	b.n	800a21a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a1c2:	68bb      	ldr	r3, [r7, #8]
 800a1c4:	015a      	lsls	r2, r3, #5
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	4413      	add	r3, r2
 800a1ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	db12      	blt.n	800a1fa <USB_EPSetStall+0xae>
 800a1d4:	68bb      	ldr	r3, [r7, #8]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d00f      	beq.n	800a1fa <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a1da:	68bb      	ldr	r3, [r7, #8]
 800a1dc:	015a      	lsls	r2, r3, #5
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	4413      	add	r3, r2
 800a1e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	68ba      	ldr	r2, [r7, #8]
 800a1ea:	0151      	lsls	r1, r2, #5
 800a1ec:	68fa      	ldr	r2, [r7, #12]
 800a1ee:	440a      	add	r2, r1
 800a1f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a1f4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a1f8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a1fa:	68bb      	ldr	r3, [r7, #8]
 800a1fc:	015a      	lsls	r2, r3, #5
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	4413      	add	r3, r2
 800a202:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	68ba      	ldr	r2, [r7, #8]
 800a20a:	0151      	lsls	r1, r2, #5
 800a20c:	68fa      	ldr	r2, [r7, #12]
 800a20e:	440a      	add	r2, r1
 800a210:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a214:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a218:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a21a:	2300      	movs	r3, #0
}
 800a21c:	4618      	mov	r0, r3
 800a21e:	3714      	adds	r7, #20
 800a220:	46bd      	mov	sp, r7
 800a222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a226:	4770      	bx	lr

0800a228 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a228:	b480      	push	{r7}
 800a22a:	b085      	sub	sp, #20
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
 800a230:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	781b      	ldrb	r3, [r3, #0]
 800a23a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	785b      	ldrb	r3, [r3, #1]
 800a240:	2b01      	cmp	r3, #1
 800a242:	d128      	bne.n	800a296 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a244:	68bb      	ldr	r3, [r7, #8]
 800a246:	015a      	lsls	r2, r3, #5
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	4413      	add	r3, r2
 800a24c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	68ba      	ldr	r2, [r7, #8]
 800a254:	0151      	lsls	r1, r2, #5
 800a256:	68fa      	ldr	r2, [r7, #12]
 800a258:	440a      	add	r2, r1
 800a25a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a25e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a262:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	791b      	ldrb	r3, [r3, #4]
 800a268:	2b03      	cmp	r3, #3
 800a26a:	d003      	beq.n	800a274 <USB_EPClearStall+0x4c>
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	791b      	ldrb	r3, [r3, #4]
 800a270:	2b02      	cmp	r3, #2
 800a272:	d138      	bne.n	800a2e6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a274:	68bb      	ldr	r3, [r7, #8]
 800a276:	015a      	lsls	r2, r3, #5
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	4413      	add	r3, r2
 800a27c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	68ba      	ldr	r2, [r7, #8]
 800a284:	0151      	lsls	r1, r2, #5
 800a286:	68fa      	ldr	r2, [r7, #12]
 800a288:	440a      	add	r2, r1
 800a28a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a28e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a292:	6013      	str	r3, [r2, #0]
 800a294:	e027      	b.n	800a2e6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a296:	68bb      	ldr	r3, [r7, #8]
 800a298:	015a      	lsls	r2, r3, #5
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	4413      	add	r3, r2
 800a29e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	68ba      	ldr	r2, [r7, #8]
 800a2a6:	0151      	lsls	r1, r2, #5
 800a2a8:	68fa      	ldr	r2, [r7, #12]
 800a2aa:	440a      	add	r2, r1
 800a2ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a2b0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a2b4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a2b6:	683b      	ldr	r3, [r7, #0]
 800a2b8:	791b      	ldrb	r3, [r3, #4]
 800a2ba:	2b03      	cmp	r3, #3
 800a2bc:	d003      	beq.n	800a2c6 <USB_EPClearStall+0x9e>
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	791b      	ldrb	r3, [r3, #4]
 800a2c2:	2b02      	cmp	r3, #2
 800a2c4:	d10f      	bne.n	800a2e6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a2c6:	68bb      	ldr	r3, [r7, #8]
 800a2c8:	015a      	lsls	r2, r3, #5
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	4413      	add	r3, r2
 800a2ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	68ba      	ldr	r2, [r7, #8]
 800a2d6:	0151      	lsls	r1, r2, #5
 800a2d8:	68fa      	ldr	r2, [r7, #12]
 800a2da:	440a      	add	r2, r1
 800a2dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a2e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a2e4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a2e6:	2300      	movs	r3, #0
}
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	3714      	adds	r7, #20
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f2:	4770      	bx	lr

0800a2f4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a2f4:	b480      	push	{r7}
 800a2f6:	b085      	sub	sp, #20
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
 800a2fc:	460b      	mov	r3, r1
 800a2fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	68fa      	ldr	r2, [r7, #12]
 800a30e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a312:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800a316:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a31e:	681a      	ldr	r2, [r3, #0]
 800a320:	78fb      	ldrb	r3, [r7, #3]
 800a322:	011b      	lsls	r3, r3, #4
 800a324:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800a328:	68f9      	ldr	r1, [r7, #12]
 800a32a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a32e:	4313      	orrs	r3, r2
 800a330:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a332:	2300      	movs	r3, #0
}
 800a334:	4618      	mov	r0, r3
 800a336:	3714      	adds	r7, #20
 800a338:	46bd      	mov	sp, r7
 800a33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33e:	4770      	bx	lr

0800a340 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a340:	b480      	push	{r7}
 800a342:	b085      	sub	sp, #20
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	68fa      	ldr	r2, [r7, #12]
 800a356:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a35a:	f023 0303 	bic.w	r3, r3, #3
 800a35e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a366:	685b      	ldr	r3, [r3, #4]
 800a368:	68fa      	ldr	r2, [r7, #12]
 800a36a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a36e:	f023 0302 	bic.w	r3, r3, #2
 800a372:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a374:	2300      	movs	r3, #0
}
 800a376:	4618      	mov	r0, r3
 800a378:	3714      	adds	r7, #20
 800a37a:	46bd      	mov	sp, r7
 800a37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a380:	4770      	bx	lr

0800a382 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a382:	b480      	push	{r7}
 800a384:	b085      	sub	sp, #20
 800a386:	af00      	add	r7, sp, #0
 800a388:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	68fa      	ldr	r2, [r7, #12]
 800a398:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a39c:	f023 0303 	bic.w	r3, r3, #3
 800a3a0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a3a8:	685b      	ldr	r3, [r3, #4]
 800a3aa:	68fa      	ldr	r2, [r7, #12]
 800a3ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a3b0:	f043 0302 	orr.w	r3, r3, #2
 800a3b4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a3b6:	2300      	movs	r3, #0
}
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	3714      	adds	r7, #20
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c2:	4770      	bx	lr

0800a3c4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800a3c4:	b480      	push	{r7}
 800a3c6:	b085      	sub	sp, #20
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	695b      	ldr	r3, [r3, #20]
 800a3d0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	699b      	ldr	r3, [r3, #24]
 800a3d6:	68fa      	ldr	r2, [r7, #12]
 800a3d8:	4013      	ands	r3, r2
 800a3da:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a3dc:	68fb      	ldr	r3, [r7, #12]
}
 800a3de:	4618      	mov	r0, r3
 800a3e0:	3714      	adds	r7, #20
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e8:	4770      	bx	lr

0800a3ea <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a3ea:	b480      	push	{r7}
 800a3ec:	b085      	sub	sp, #20
 800a3ee:	af00      	add	r7, sp, #0
 800a3f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a3fc:	699b      	ldr	r3, [r3, #24]
 800a3fe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a406:	69db      	ldr	r3, [r3, #28]
 800a408:	68ba      	ldr	r2, [r7, #8]
 800a40a:	4013      	ands	r3, r2
 800a40c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a40e:	68bb      	ldr	r3, [r7, #8]
 800a410:	0c1b      	lsrs	r3, r3, #16
}
 800a412:	4618      	mov	r0, r3
 800a414:	3714      	adds	r7, #20
 800a416:	46bd      	mov	sp, r7
 800a418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41c:	4770      	bx	lr

0800a41e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a41e:	b480      	push	{r7}
 800a420:	b085      	sub	sp, #20
 800a422:	af00      	add	r7, sp, #0
 800a424:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a430:	699b      	ldr	r3, [r3, #24]
 800a432:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a43a:	69db      	ldr	r3, [r3, #28]
 800a43c:	68ba      	ldr	r2, [r7, #8]
 800a43e:	4013      	ands	r3, r2
 800a440:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a442:	68bb      	ldr	r3, [r7, #8]
 800a444:	b29b      	uxth	r3, r3
}
 800a446:	4618      	mov	r0, r3
 800a448:	3714      	adds	r7, #20
 800a44a:	46bd      	mov	sp, r7
 800a44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a450:	4770      	bx	lr

0800a452 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a452:	b480      	push	{r7}
 800a454:	b085      	sub	sp, #20
 800a456:	af00      	add	r7, sp, #0
 800a458:	6078      	str	r0, [r7, #4]
 800a45a:	460b      	mov	r3, r1
 800a45c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a462:	78fb      	ldrb	r3, [r7, #3]
 800a464:	015a      	lsls	r2, r3, #5
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	4413      	add	r3, r2
 800a46a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a46e:	689b      	ldr	r3, [r3, #8]
 800a470:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a478:	695b      	ldr	r3, [r3, #20]
 800a47a:	68ba      	ldr	r2, [r7, #8]
 800a47c:	4013      	ands	r3, r2
 800a47e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a480:	68bb      	ldr	r3, [r7, #8]
}
 800a482:	4618      	mov	r0, r3
 800a484:	3714      	adds	r7, #20
 800a486:	46bd      	mov	sp, r7
 800a488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48c:	4770      	bx	lr

0800a48e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a48e:	b480      	push	{r7}
 800a490:	b087      	sub	sp, #28
 800a492:	af00      	add	r7, sp, #0
 800a494:	6078      	str	r0, [r7, #4]
 800a496:	460b      	mov	r3, r1
 800a498:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a49e:	697b      	ldr	r3, [r7, #20]
 800a4a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a4a4:	691b      	ldr	r3, [r3, #16]
 800a4a6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a4a8:	697b      	ldr	r3, [r7, #20]
 800a4aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a4ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a4b0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a4b2:	78fb      	ldrb	r3, [r7, #3]
 800a4b4:	f003 030f 	and.w	r3, r3, #15
 800a4b8:	68fa      	ldr	r2, [r7, #12]
 800a4ba:	fa22 f303 	lsr.w	r3, r2, r3
 800a4be:	01db      	lsls	r3, r3, #7
 800a4c0:	b2db      	uxtb	r3, r3
 800a4c2:	693a      	ldr	r2, [r7, #16]
 800a4c4:	4313      	orrs	r3, r2
 800a4c6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a4c8:	78fb      	ldrb	r3, [r7, #3]
 800a4ca:	015a      	lsls	r2, r3, #5
 800a4cc:	697b      	ldr	r3, [r7, #20]
 800a4ce:	4413      	add	r3, r2
 800a4d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4d4:	689b      	ldr	r3, [r3, #8]
 800a4d6:	693a      	ldr	r2, [r7, #16]
 800a4d8:	4013      	ands	r3, r2
 800a4da:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a4dc:	68bb      	ldr	r3, [r7, #8]
}
 800a4de:	4618      	mov	r0, r3
 800a4e0:	371c      	adds	r7, #28
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e8:	4770      	bx	lr

0800a4ea <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800a4ea:	b480      	push	{r7}
 800a4ec:	b083      	sub	sp, #12
 800a4ee:	af00      	add	r7, sp, #0
 800a4f0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	695b      	ldr	r3, [r3, #20]
 800a4f6:	f003 0301 	and.w	r3, r3, #1
}
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	370c      	adds	r7, #12
 800a4fe:	46bd      	mov	sp, r7
 800a500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a504:	4770      	bx	lr

0800a506 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800a506:	b480      	push	{r7}
 800a508:	b085      	sub	sp, #20
 800a50a:	af00      	add	r7, sp, #0
 800a50c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	68fa      	ldr	r2, [r7, #12]
 800a51c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a520:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800a524:	f023 0307 	bic.w	r3, r3, #7
 800a528:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a530:	685b      	ldr	r3, [r3, #4]
 800a532:	68fa      	ldr	r2, [r7, #12]
 800a534:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a538:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a53c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a53e:	2300      	movs	r3, #0
}
 800a540:	4618      	mov	r0, r3
 800a542:	3714      	adds	r7, #20
 800a544:	46bd      	mov	sp, r7
 800a546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54a:	4770      	bx	lr

0800a54c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800a54c:	b480      	push	{r7}
 800a54e:	b087      	sub	sp, #28
 800a550:	af00      	add	r7, sp, #0
 800a552:	60f8      	str	r0, [r7, #12]
 800a554:	460b      	mov	r3, r1
 800a556:	607a      	str	r2, [r7, #4]
 800a558:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	333c      	adds	r3, #60	@ 0x3c
 800a562:	3304      	adds	r3, #4
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a568:	693b      	ldr	r3, [r7, #16]
 800a56a:	4a26      	ldr	r2, [pc, #152]	@ (800a604 <USB_EP0_OutStart+0xb8>)
 800a56c:	4293      	cmp	r3, r2
 800a56e:	d90a      	bls.n	800a586 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a570:	697b      	ldr	r3, [r7, #20]
 800a572:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a57c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a580:	d101      	bne.n	800a586 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a582:	2300      	movs	r3, #0
 800a584:	e037      	b.n	800a5f6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a586:	697b      	ldr	r3, [r7, #20]
 800a588:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a58c:	461a      	mov	r2, r3
 800a58e:	2300      	movs	r3, #0
 800a590:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a592:	697b      	ldr	r3, [r7, #20]
 800a594:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a598:	691b      	ldr	r3, [r3, #16]
 800a59a:	697a      	ldr	r2, [r7, #20]
 800a59c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a5a0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a5a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a5a6:	697b      	ldr	r3, [r7, #20]
 800a5a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a5ac:	691b      	ldr	r3, [r3, #16]
 800a5ae:	697a      	ldr	r2, [r7, #20]
 800a5b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a5b4:	f043 0318 	orr.w	r3, r3, #24
 800a5b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a5ba:	697b      	ldr	r3, [r7, #20]
 800a5bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a5c0:	691b      	ldr	r3, [r3, #16]
 800a5c2:	697a      	ldr	r2, [r7, #20]
 800a5c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a5c8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800a5cc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a5ce:	7afb      	ldrb	r3, [r7, #11]
 800a5d0:	2b01      	cmp	r3, #1
 800a5d2:	d10f      	bne.n	800a5f4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a5d4:	697b      	ldr	r3, [r7, #20]
 800a5d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a5da:	461a      	mov	r2, r3
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a5e0:	697b      	ldr	r3, [r7, #20]
 800a5e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	697a      	ldr	r2, [r7, #20]
 800a5ea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a5ee:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800a5f2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a5f4:	2300      	movs	r3, #0
}
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	371c      	adds	r7, #28
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a600:	4770      	bx	lr
 800a602:	bf00      	nop
 800a604:	4f54300a 	.word	0x4f54300a

0800a608 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a608:	b480      	push	{r7}
 800a60a:	b085      	sub	sp, #20
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a610:	2300      	movs	r3, #0
 800a612:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	3301      	adds	r3, #1
 800a618:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a620:	d901      	bls.n	800a626 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a622:	2303      	movs	r3, #3
 800a624:	e01b      	b.n	800a65e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	691b      	ldr	r3, [r3, #16]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	daf2      	bge.n	800a614 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a62e:	2300      	movs	r3, #0
 800a630:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	691b      	ldr	r3, [r3, #16]
 800a636:	f043 0201 	orr.w	r2, r3, #1
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	3301      	adds	r3, #1
 800a642:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a64a:	d901      	bls.n	800a650 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a64c:	2303      	movs	r3, #3
 800a64e:	e006      	b.n	800a65e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	691b      	ldr	r3, [r3, #16]
 800a654:	f003 0301 	and.w	r3, r3, #1
 800a658:	2b01      	cmp	r3, #1
 800a65a:	d0f0      	beq.n	800a63e <USB_CoreReset+0x36>

  return HAL_OK;
 800a65c:	2300      	movs	r3, #0
}
 800a65e:	4618      	mov	r0, r3
 800a660:	3714      	adds	r7, #20
 800a662:	46bd      	mov	sp, r7
 800a664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a668:	4770      	bx	lr
	...

0800a66c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b084      	sub	sp, #16
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
 800a674:	460b      	mov	r3, r1
 800a676:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a678:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800a67c:	f002 fc46 	bl	800cf0c <USBD_static_malloc>
 800a680:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d109      	bne.n	800a69c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	32b0      	adds	r2, #176	@ 0xb0
 800a692:	2100      	movs	r1, #0
 800a694:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a698:	2302      	movs	r3, #2
 800a69a:	e0d4      	b.n	800a846 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800a69c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800a6a0:	2100      	movs	r1, #0
 800a6a2:	68f8      	ldr	r0, [r7, #12]
 800a6a4:	f003 fb53 	bl	800dd4e <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	32b0      	adds	r2, #176	@ 0xb0
 800a6b2:	68f9      	ldr	r1, [r7, #12]
 800a6b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	32b0      	adds	r2, #176	@ 0xb0
 800a6c2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	7c1b      	ldrb	r3, [r3, #16]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d138      	bne.n	800a746 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a6d4:	4b5e      	ldr	r3, [pc, #376]	@ (800a850 <USBD_CDC_Init+0x1e4>)
 800a6d6:	7819      	ldrb	r1, [r3, #0]
 800a6d8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a6dc:	2202      	movs	r2, #2
 800a6de:	6878      	ldr	r0, [r7, #4]
 800a6e0:	f002 faf1 	bl	800ccc6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a6e4:	4b5a      	ldr	r3, [pc, #360]	@ (800a850 <USBD_CDC_Init+0x1e4>)
 800a6e6:	781b      	ldrb	r3, [r3, #0]
 800a6e8:	f003 020f 	and.w	r2, r3, #15
 800a6ec:	6879      	ldr	r1, [r7, #4]
 800a6ee:	4613      	mov	r3, r2
 800a6f0:	009b      	lsls	r3, r3, #2
 800a6f2:	4413      	add	r3, r2
 800a6f4:	009b      	lsls	r3, r3, #2
 800a6f6:	440b      	add	r3, r1
 800a6f8:	3324      	adds	r3, #36	@ 0x24
 800a6fa:	2201      	movs	r2, #1
 800a6fc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a6fe:	4b55      	ldr	r3, [pc, #340]	@ (800a854 <USBD_CDC_Init+0x1e8>)
 800a700:	7819      	ldrb	r1, [r3, #0]
 800a702:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a706:	2202      	movs	r2, #2
 800a708:	6878      	ldr	r0, [r7, #4]
 800a70a:	f002 fadc 	bl	800ccc6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a70e:	4b51      	ldr	r3, [pc, #324]	@ (800a854 <USBD_CDC_Init+0x1e8>)
 800a710:	781b      	ldrb	r3, [r3, #0]
 800a712:	f003 020f 	and.w	r2, r3, #15
 800a716:	6879      	ldr	r1, [r7, #4]
 800a718:	4613      	mov	r3, r2
 800a71a:	009b      	lsls	r3, r3, #2
 800a71c:	4413      	add	r3, r2
 800a71e:	009b      	lsls	r3, r3, #2
 800a720:	440b      	add	r3, r1
 800a722:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a726:	2201      	movs	r2, #1
 800a728:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a72a:	4b4b      	ldr	r3, [pc, #300]	@ (800a858 <USBD_CDC_Init+0x1ec>)
 800a72c:	781b      	ldrb	r3, [r3, #0]
 800a72e:	f003 020f 	and.w	r2, r3, #15
 800a732:	6879      	ldr	r1, [r7, #4]
 800a734:	4613      	mov	r3, r2
 800a736:	009b      	lsls	r3, r3, #2
 800a738:	4413      	add	r3, r2
 800a73a:	009b      	lsls	r3, r3, #2
 800a73c:	440b      	add	r3, r1
 800a73e:	3326      	adds	r3, #38	@ 0x26
 800a740:	2210      	movs	r2, #16
 800a742:	801a      	strh	r2, [r3, #0]
 800a744:	e035      	b.n	800a7b2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a746:	4b42      	ldr	r3, [pc, #264]	@ (800a850 <USBD_CDC_Init+0x1e4>)
 800a748:	7819      	ldrb	r1, [r3, #0]
 800a74a:	2340      	movs	r3, #64	@ 0x40
 800a74c:	2202      	movs	r2, #2
 800a74e:	6878      	ldr	r0, [r7, #4]
 800a750:	f002 fab9 	bl	800ccc6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a754:	4b3e      	ldr	r3, [pc, #248]	@ (800a850 <USBD_CDC_Init+0x1e4>)
 800a756:	781b      	ldrb	r3, [r3, #0]
 800a758:	f003 020f 	and.w	r2, r3, #15
 800a75c:	6879      	ldr	r1, [r7, #4]
 800a75e:	4613      	mov	r3, r2
 800a760:	009b      	lsls	r3, r3, #2
 800a762:	4413      	add	r3, r2
 800a764:	009b      	lsls	r3, r3, #2
 800a766:	440b      	add	r3, r1
 800a768:	3324      	adds	r3, #36	@ 0x24
 800a76a:	2201      	movs	r2, #1
 800a76c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a76e:	4b39      	ldr	r3, [pc, #228]	@ (800a854 <USBD_CDC_Init+0x1e8>)
 800a770:	7819      	ldrb	r1, [r3, #0]
 800a772:	2340      	movs	r3, #64	@ 0x40
 800a774:	2202      	movs	r2, #2
 800a776:	6878      	ldr	r0, [r7, #4]
 800a778:	f002 faa5 	bl	800ccc6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a77c:	4b35      	ldr	r3, [pc, #212]	@ (800a854 <USBD_CDC_Init+0x1e8>)
 800a77e:	781b      	ldrb	r3, [r3, #0]
 800a780:	f003 020f 	and.w	r2, r3, #15
 800a784:	6879      	ldr	r1, [r7, #4]
 800a786:	4613      	mov	r3, r2
 800a788:	009b      	lsls	r3, r3, #2
 800a78a:	4413      	add	r3, r2
 800a78c:	009b      	lsls	r3, r3, #2
 800a78e:	440b      	add	r3, r1
 800a790:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a794:	2201      	movs	r2, #1
 800a796:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a798:	4b2f      	ldr	r3, [pc, #188]	@ (800a858 <USBD_CDC_Init+0x1ec>)
 800a79a:	781b      	ldrb	r3, [r3, #0]
 800a79c:	f003 020f 	and.w	r2, r3, #15
 800a7a0:	6879      	ldr	r1, [r7, #4]
 800a7a2:	4613      	mov	r3, r2
 800a7a4:	009b      	lsls	r3, r3, #2
 800a7a6:	4413      	add	r3, r2
 800a7a8:	009b      	lsls	r3, r3, #2
 800a7aa:	440b      	add	r3, r1
 800a7ac:	3326      	adds	r3, #38	@ 0x26
 800a7ae:	2210      	movs	r2, #16
 800a7b0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a7b2:	4b29      	ldr	r3, [pc, #164]	@ (800a858 <USBD_CDC_Init+0x1ec>)
 800a7b4:	7819      	ldrb	r1, [r3, #0]
 800a7b6:	2308      	movs	r3, #8
 800a7b8:	2203      	movs	r2, #3
 800a7ba:	6878      	ldr	r0, [r7, #4]
 800a7bc:	f002 fa83 	bl	800ccc6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800a7c0:	4b25      	ldr	r3, [pc, #148]	@ (800a858 <USBD_CDC_Init+0x1ec>)
 800a7c2:	781b      	ldrb	r3, [r3, #0]
 800a7c4:	f003 020f 	and.w	r2, r3, #15
 800a7c8:	6879      	ldr	r1, [r7, #4]
 800a7ca:	4613      	mov	r3, r2
 800a7cc:	009b      	lsls	r3, r3, #2
 800a7ce:	4413      	add	r3, r2
 800a7d0:	009b      	lsls	r3, r3, #2
 800a7d2:	440b      	add	r3, r1
 800a7d4:	3324      	adds	r3, #36	@ 0x24
 800a7d6:	2201      	movs	r2, #1
 800a7d8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	2200      	movs	r2, #0
 800a7de:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a7e8:	687a      	ldr	r2, [r7, #4]
 800a7ea:	33b0      	adds	r3, #176	@ 0xb0
 800a7ec:	009b      	lsls	r3, r3, #2
 800a7ee:	4413      	add	r3, r2
 800a7f0:	685b      	ldr	r3, [r3, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	2200      	movs	r2, #0
 800a802:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d101      	bne.n	800a814 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800a810:	2302      	movs	r3, #2
 800a812:	e018      	b.n	800a846 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	7c1b      	ldrb	r3, [r3, #16]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d10a      	bne.n	800a832 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a81c:	4b0d      	ldr	r3, [pc, #52]	@ (800a854 <USBD_CDC_Init+0x1e8>)
 800a81e:	7819      	ldrb	r1, [r3, #0]
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a826:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a82a:	6878      	ldr	r0, [r7, #4]
 800a82c:	f002 fb3a 	bl	800cea4 <USBD_LL_PrepareReceive>
 800a830:	e008      	b.n	800a844 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a832:	4b08      	ldr	r3, [pc, #32]	@ (800a854 <USBD_CDC_Init+0x1e8>)
 800a834:	7819      	ldrb	r1, [r3, #0]
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a83c:	2340      	movs	r3, #64	@ 0x40
 800a83e:	6878      	ldr	r0, [r7, #4]
 800a840:	f002 fb30 	bl	800cea4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a844:	2300      	movs	r3, #0
}
 800a846:	4618      	mov	r0, r3
 800a848:	3710      	adds	r7, #16
 800a84a:	46bd      	mov	sp, r7
 800a84c:	bd80      	pop	{r7, pc}
 800a84e:	bf00      	nop
 800a850:	20000097 	.word	0x20000097
 800a854:	20000098 	.word	0x20000098
 800a858:	20000099 	.word	0x20000099

0800a85c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b082      	sub	sp, #8
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
 800a864:	460b      	mov	r3, r1
 800a866:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800a868:	4b3a      	ldr	r3, [pc, #232]	@ (800a954 <USBD_CDC_DeInit+0xf8>)
 800a86a:	781b      	ldrb	r3, [r3, #0]
 800a86c:	4619      	mov	r1, r3
 800a86e:	6878      	ldr	r0, [r7, #4]
 800a870:	f002 fa4f 	bl	800cd12 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800a874:	4b37      	ldr	r3, [pc, #220]	@ (800a954 <USBD_CDC_DeInit+0xf8>)
 800a876:	781b      	ldrb	r3, [r3, #0]
 800a878:	f003 020f 	and.w	r2, r3, #15
 800a87c:	6879      	ldr	r1, [r7, #4]
 800a87e:	4613      	mov	r3, r2
 800a880:	009b      	lsls	r3, r3, #2
 800a882:	4413      	add	r3, r2
 800a884:	009b      	lsls	r3, r3, #2
 800a886:	440b      	add	r3, r1
 800a888:	3324      	adds	r3, #36	@ 0x24
 800a88a:	2200      	movs	r2, #0
 800a88c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800a88e:	4b32      	ldr	r3, [pc, #200]	@ (800a958 <USBD_CDC_DeInit+0xfc>)
 800a890:	781b      	ldrb	r3, [r3, #0]
 800a892:	4619      	mov	r1, r3
 800a894:	6878      	ldr	r0, [r7, #4]
 800a896:	f002 fa3c 	bl	800cd12 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800a89a:	4b2f      	ldr	r3, [pc, #188]	@ (800a958 <USBD_CDC_DeInit+0xfc>)
 800a89c:	781b      	ldrb	r3, [r3, #0]
 800a89e:	f003 020f 	and.w	r2, r3, #15
 800a8a2:	6879      	ldr	r1, [r7, #4]
 800a8a4:	4613      	mov	r3, r2
 800a8a6:	009b      	lsls	r3, r3, #2
 800a8a8:	4413      	add	r3, r2
 800a8aa:	009b      	lsls	r3, r3, #2
 800a8ac:	440b      	add	r3, r1
 800a8ae:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800a8b6:	4b29      	ldr	r3, [pc, #164]	@ (800a95c <USBD_CDC_DeInit+0x100>)
 800a8b8:	781b      	ldrb	r3, [r3, #0]
 800a8ba:	4619      	mov	r1, r3
 800a8bc:	6878      	ldr	r0, [r7, #4]
 800a8be:	f002 fa28 	bl	800cd12 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800a8c2:	4b26      	ldr	r3, [pc, #152]	@ (800a95c <USBD_CDC_DeInit+0x100>)
 800a8c4:	781b      	ldrb	r3, [r3, #0]
 800a8c6:	f003 020f 	and.w	r2, r3, #15
 800a8ca:	6879      	ldr	r1, [r7, #4]
 800a8cc:	4613      	mov	r3, r2
 800a8ce:	009b      	lsls	r3, r3, #2
 800a8d0:	4413      	add	r3, r2
 800a8d2:	009b      	lsls	r3, r3, #2
 800a8d4:	440b      	add	r3, r1
 800a8d6:	3324      	adds	r3, #36	@ 0x24
 800a8d8:	2200      	movs	r2, #0
 800a8da:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800a8dc:	4b1f      	ldr	r3, [pc, #124]	@ (800a95c <USBD_CDC_DeInit+0x100>)
 800a8de:	781b      	ldrb	r3, [r3, #0]
 800a8e0:	f003 020f 	and.w	r2, r3, #15
 800a8e4:	6879      	ldr	r1, [r7, #4]
 800a8e6:	4613      	mov	r3, r2
 800a8e8:	009b      	lsls	r3, r3, #2
 800a8ea:	4413      	add	r3, r2
 800a8ec:	009b      	lsls	r3, r3, #2
 800a8ee:	440b      	add	r3, r1
 800a8f0:	3326      	adds	r3, #38	@ 0x26
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	32b0      	adds	r2, #176	@ 0xb0
 800a900:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d01f      	beq.n	800a948 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a90e:	687a      	ldr	r2, [r7, #4]
 800a910:	33b0      	adds	r3, #176	@ 0xb0
 800a912:	009b      	lsls	r3, r3, #2
 800a914:	4413      	add	r3, r2
 800a916:	685b      	ldr	r3, [r3, #4]
 800a918:	685b      	ldr	r3, [r3, #4]
 800a91a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	32b0      	adds	r2, #176	@ 0xb0
 800a926:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a92a:	4618      	mov	r0, r3
 800a92c:	f002 fafc 	bl	800cf28 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	32b0      	adds	r2, #176	@ 0xb0
 800a93a:	2100      	movs	r1, #0
 800a93c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	2200      	movs	r2, #0
 800a944:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a948:	2300      	movs	r3, #0
}
 800a94a:	4618      	mov	r0, r3
 800a94c:	3708      	adds	r7, #8
 800a94e:	46bd      	mov	sp, r7
 800a950:	bd80      	pop	{r7, pc}
 800a952:	bf00      	nop
 800a954:	20000097 	.word	0x20000097
 800a958:	20000098 	.word	0x20000098
 800a95c:	20000099 	.word	0x20000099

0800a960 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a960:	b580      	push	{r7, lr}
 800a962:	b086      	sub	sp, #24
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
 800a968:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	32b0      	adds	r2, #176	@ 0xb0
 800a974:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a978:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a97a:	2300      	movs	r3, #0
 800a97c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a97e:	2300      	movs	r3, #0
 800a980:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a982:	2300      	movs	r3, #0
 800a984:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a986:	693b      	ldr	r3, [r7, #16]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d101      	bne.n	800a990 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800a98c:	2303      	movs	r3, #3
 800a98e:	e0bf      	b.n	800ab10 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a990:	683b      	ldr	r3, [r7, #0]
 800a992:	781b      	ldrb	r3, [r3, #0]
 800a994:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d050      	beq.n	800aa3e <USBD_CDC_Setup+0xde>
 800a99c:	2b20      	cmp	r3, #32
 800a99e:	f040 80af 	bne.w	800ab00 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	88db      	ldrh	r3, [r3, #6]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d03a      	beq.n	800aa20 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a9aa:	683b      	ldr	r3, [r7, #0]
 800a9ac:	781b      	ldrb	r3, [r3, #0]
 800a9ae:	b25b      	sxtb	r3, r3
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	da1b      	bge.n	800a9ec <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a9ba:	687a      	ldr	r2, [r7, #4]
 800a9bc:	33b0      	adds	r3, #176	@ 0xb0
 800a9be:	009b      	lsls	r3, r3, #2
 800a9c0:	4413      	add	r3, r2
 800a9c2:	685b      	ldr	r3, [r3, #4]
 800a9c4:	689b      	ldr	r3, [r3, #8]
 800a9c6:	683a      	ldr	r2, [r7, #0]
 800a9c8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800a9ca:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a9cc:	683a      	ldr	r2, [r7, #0]
 800a9ce:	88d2      	ldrh	r2, [r2, #6]
 800a9d0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a9d2:	683b      	ldr	r3, [r7, #0]
 800a9d4:	88db      	ldrh	r3, [r3, #6]
 800a9d6:	2b07      	cmp	r3, #7
 800a9d8:	bf28      	it	cs
 800a9da:	2307      	movcs	r3, #7
 800a9dc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a9de:	693b      	ldr	r3, [r7, #16]
 800a9e0:	89fa      	ldrh	r2, [r7, #14]
 800a9e2:	4619      	mov	r1, r3
 800a9e4:	6878      	ldr	r0, [r7, #4]
 800a9e6:	f001 fd53 	bl	800c490 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800a9ea:	e090      	b.n	800ab0e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800a9ec:	683b      	ldr	r3, [r7, #0]
 800a9ee:	785a      	ldrb	r2, [r3, #1]
 800a9f0:	693b      	ldr	r3, [r7, #16]
 800a9f2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800a9f6:	683b      	ldr	r3, [r7, #0]
 800a9f8:	88db      	ldrh	r3, [r3, #6]
 800a9fa:	2b3f      	cmp	r3, #63	@ 0x3f
 800a9fc:	d803      	bhi.n	800aa06 <USBD_CDC_Setup+0xa6>
 800a9fe:	683b      	ldr	r3, [r7, #0]
 800aa00:	88db      	ldrh	r3, [r3, #6]
 800aa02:	b2da      	uxtb	r2, r3
 800aa04:	e000      	b.n	800aa08 <USBD_CDC_Setup+0xa8>
 800aa06:	2240      	movs	r2, #64	@ 0x40
 800aa08:	693b      	ldr	r3, [r7, #16]
 800aa0a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800aa0e:	6939      	ldr	r1, [r7, #16]
 800aa10:	693b      	ldr	r3, [r7, #16]
 800aa12:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800aa16:	461a      	mov	r2, r3
 800aa18:	6878      	ldr	r0, [r7, #4]
 800aa1a:	f001 fd65 	bl	800c4e8 <USBD_CtlPrepareRx>
      break;
 800aa1e:	e076      	b.n	800ab0e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800aa26:	687a      	ldr	r2, [r7, #4]
 800aa28:	33b0      	adds	r3, #176	@ 0xb0
 800aa2a:	009b      	lsls	r3, r3, #2
 800aa2c:	4413      	add	r3, r2
 800aa2e:	685b      	ldr	r3, [r3, #4]
 800aa30:	689b      	ldr	r3, [r3, #8]
 800aa32:	683a      	ldr	r2, [r7, #0]
 800aa34:	7850      	ldrb	r0, [r2, #1]
 800aa36:	2200      	movs	r2, #0
 800aa38:	6839      	ldr	r1, [r7, #0]
 800aa3a:	4798      	blx	r3
      break;
 800aa3c:	e067      	b.n	800ab0e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	785b      	ldrb	r3, [r3, #1]
 800aa42:	2b0b      	cmp	r3, #11
 800aa44:	d851      	bhi.n	800aaea <USBD_CDC_Setup+0x18a>
 800aa46:	a201      	add	r2, pc, #4	@ (adr r2, 800aa4c <USBD_CDC_Setup+0xec>)
 800aa48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa4c:	0800aa7d 	.word	0x0800aa7d
 800aa50:	0800aaf9 	.word	0x0800aaf9
 800aa54:	0800aaeb 	.word	0x0800aaeb
 800aa58:	0800aaeb 	.word	0x0800aaeb
 800aa5c:	0800aaeb 	.word	0x0800aaeb
 800aa60:	0800aaeb 	.word	0x0800aaeb
 800aa64:	0800aaeb 	.word	0x0800aaeb
 800aa68:	0800aaeb 	.word	0x0800aaeb
 800aa6c:	0800aaeb 	.word	0x0800aaeb
 800aa70:	0800aaeb 	.word	0x0800aaeb
 800aa74:	0800aaa7 	.word	0x0800aaa7
 800aa78:	0800aad1 	.word	0x0800aad1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa82:	b2db      	uxtb	r3, r3
 800aa84:	2b03      	cmp	r3, #3
 800aa86:	d107      	bne.n	800aa98 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800aa88:	f107 030a 	add.w	r3, r7, #10
 800aa8c:	2202      	movs	r2, #2
 800aa8e:	4619      	mov	r1, r3
 800aa90:	6878      	ldr	r0, [r7, #4]
 800aa92:	f001 fcfd 	bl	800c490 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800aa96:	e032      	b.n	800aafe <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800aa98:	6839      	ldr	r1, [r7, #0]
 800aa9a:	6878      	ldr	r0, [r7, #4]
 800aa9c:	f001 fc7b 	bl	800c396 <USBD_CtlError>
            ret = USBD_FAIL;
 800aaa0:	2303      	movs	r3, #3
 800aaa2:	75fb      	strb	r3, [r7, #23]
          break;
 800aaa4:	e02b      	b.n	800aafe <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aaac:	b2db      	uxtb	r3, r3
 800aaae:	2b03      	cmp	r3, #3
 800aab0:	d107      	bne.n	800aac2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800aab2:	f107 030d 	add.w	r3, r7, #13
 800aab6:	2201      	movs	r2, #1
 800aab8:	4619      	mov	r1, r3
 800aaba:	6878      	ldr	r0, [r7, #4]
 800aabc:	f001 fce8 	bl	800c490 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800aac0:	e01d      	b.n	800aafe <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800aac2:	6839      	ldr	r1, [r7, #0]
 800aac4:	6878      	ldr	r0, [r7, #4]
 800aac6:	f001 fc66 	bl	800c396 <USBD_CtlError>
            ret = USBD_FAIL;
 800aaca:	2303      	movs	r3, #3
 800aacc:	75fb      	strb	r3, [r7, #23]
          break;
 800aace:	e016      	b.n	800aafe <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aad6:	b2db      	uxtb	r3, r3
 800aad8:	2b03      	cmp	r3, #3
 800aada:	d00f      	beq.n	800aafc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800aadc:	6839      	ldr	r1, [r7, #0]
 800aade:	6878      	ldr	r0, [r7, #4]
 800aae0:	f001 fc59 	bl	800c396 <USBD_CtlError>
            ret = USBD_FAIL;
 800aae4:	2303      	movs	r3, #3
 800aae6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800aae8:	e008      	b.n	800aafc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800aaea:	6839      	ldr	r1, [r7, #0]
 800aaec:	6878      	ldr	r0, [r7, #4]
 800aaee:	f001 fc52 	bl	800c396 <USBD_CtlError>
          ret = USBD_FAIL;
 800aaf2:	2303      	movs	r3, #3
 800aaf4:	75fb      	strb	r3, [r7, #23]
          break;
 800aaf6:	e002      	b.n	800aafe <USBD_CDC_Setup+0x19e>
          break;
 800aaf8:	bf00      	nop
 800aafa:	e008      	b.n	800ab0e <USBD_CDC_Setup+0x1ae>
          break;
 800aafc:	bf00      	nop
      }
      break;
 800aafe:	e006      	b.n	800ab0e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800ab00:	6839      	ldr	r1, [r7, #0]
 800ab02:	6878      	ldr	r0, [r7, #4]
 800ab04:	f001 fc47 	bl	800c396 <USBD_CtlError>
      ret = USBD_FAIL;
 800ab08:	2303      	movs	r3, #3
 800ab0a:	75fb      	strb	r3, [r7, #23]
      break;
 800ab0c:	bf00      	nop
  }

  return (uint8_t)ret;
 800ab0e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab10:	4618      	mov	r0, r3
 800ab12:	3718      	adds	r7, #24
 800ab14:	46bd      	mov	sp, r7
 800ab16:	bd80      	pop	{r7, pc}

0800ab18 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b084      	sub	sp, #16
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
 800ab20:	460b      	mov	r3, r1
 800ab22:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ab2a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	32b0      	adds	r2, #176	@ 0xb0
 800ab36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d101      	bne.n	800ab42 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800ab3e:	2303      	movs	r3, #3
 800ab40:	e065      	b.n	800ac0e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	32b0      	adds	r2, #176	@ 0xb0
 800ab4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab50:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ab52:	78fb      	ldrb	r3, [r7, #3]
 800ab54:	f003 020f 	and.w	r2, r3, #15
 800ab58:	6879      	ldr	r1, [r7, #4]
 800ab5a:	4613      	mov	r3, r2
 800ab5c:	009b      	lsls	r3, r3, #2
 800ab5e:	4413      	add	r3, r2
 800ab60:	009b      	lsls	r3, r3, #2
 800ab62:	440b      	add	r3, r1
 800ab64:	3318      	adds	r3, #24
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d02f      	beq.n	800abcc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800ab6c:	78fb      	ldrb	r3, [r7, #3]
 800ab6e:	f003 020f 	and.w	r2, r3, #15
 800ab72:	6879      	ldr	r1, [r7, #4]
 800ab74:	4613      	mov	r3, r2
 800ab76:	009b      	lsls	r3, r3, #2
 800ab78:	4413      	add	r3, r2
 800ab7a:	009b      	lsls	r3, r3, #2
 800ab7c:	440b      	add	r3, r1
 800ab7e:	3318      	adds	r3, #24
 800ab80:	681a      	ldr	r2, [r3, #0]
 800ab82:	78fb      	ldrb	r3, [r7, #3]
 800ab84:	f003 010f 	and.w	r1, r3, #15
 800ab88:	68f8      	ldr	r0, [r7, #12]
 800ab8a:	460b      	mov	r3, r1
 800ab8c:	00db      	lsls	r3, r3, #3
 800ab8e:	440b      	add	r3, r1
 800ab90:	009b      	lsls	r3, r3, #2
 800ab92:	4403      	add	r3, r0
 800ab94:	331c      	adds	r3, #28
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	fbb2 f1f3 	udiv	r1, r2, r3
 800ab9c:	fb01 f303 	mul.w	r3, r1, r3
 800aba0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d112      	bne.n	800abcc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800aba6:	78fb      	ldrb	r3, [r7, #3]
 800aba8:	f003 020f 	and.w	r2, r3, #15
 800abac:	6879      	ldr	r1, [r7, #4]
 800abae:	4613      	mov	r3, r2
 800abb0:	009b      	lsls	r3, r3, #2
 800abb2:	4413      	add	r3, r2
 800abb4:	009b      	lsls	r3, r3, #2
 800abb6:	440b      	add	r3, r1
 800abb8:	3318      	adds	r3, #24
 800abba:	2200      	movs	r2, #0
 800abbc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800abbe:	78f9      	ldrb	r1, [r7, #3]
 800abc0:	2300      	movs	r3, #0
 800abc2:	2200      	movs	r2, #0
 800abc4:	6878      	ldr	r0, [r7, #4]
 800abc6:	f002 f94c 	bl	800ce62 <USBD_LL_Transmit>
 800abca:	e01f      	b.n	800ac0c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800abcc:	68bb      	ldr	r3, [r7, #8]
 800abce:	2200      	movs	r2, #0
 800abd0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800abda:	687a      	ldr	r2, [r7, #4]
 800abdc:	33b0      	adds	r3, #176	@ 0xb0
 800abde:	009b      	lsls	r3, r3, #2
 800abe0:	4413      	add	r3, r2
 800abe2:	685b      	ldr	r3, [r3, #4]
 800abe4:	691b      	ldr	r3, [r3, #16]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d010      	beq.n	800ac0c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800abf0:	687a      	ldr	r2, [r7, #4]
 800abf2:	33b0      	adds	r3, #176	@ 0xb0
 800abf4:	009b      	lsls	r3, r3, #2
 800abf6:	4413      	add	r3, r2
 800abf8:	685b      	ldr	r3, [r3, #4]
 800abfa:	691b      	ldr	r3, [r3, #16]
 800abfc:	68ba      	ldr	r2, [r7, #8]
 800abfe:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800ac02:	68ba      	ldr	r2, [r7, #8]
 800ac04:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800ac08:	78fa      	ldrb	r2, [r7, #3]
 800ac0a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800ac0c:	2300      	movs	r3, #0
}
 800ac0e:	4618      	mov	r0, r3
 800ac10:	3710      	adds	r7, #16
 800ac12:	46bd      	mov	sp, r7
 800ac14:	bd80      	pop	{r7, pc}

0800ac16 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ac16:	b580      	push	{r7, lr}
 800ac18:	b084      	sub	sp, #16
 800ac1a:	af00      	add	r7, sp, #0
 800ac1c:	6078      	str	r0, [r7, #4]
 800ac1e:	460b      	mov	r3, r1
 800ac20:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	32b0      	adds	r2, #176	@ 0xb0
 800ac2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac30:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	32b0      	adds	r2, #176	@ 0xb0
 800ac3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d101      	bne.n	800ac48 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800ac44:	2303      	movs	r3, #3
 800ac46:	e01a      	b.n	800ac7e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ac48:	78fb      	ldrb	r3, [r7, #3]
 800ac4a:	4619      	mov	r1, r3
 800ac4c:	6878      	ldr	r0, [r7, #4]
 800ac4e:	f002 f94a 	bl	800cee6 <USBD_LL_GetRxDataSize>
 800ac52:	4602      	mov	r2, r0
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ac60:	687a      	ldr	r2, [r7, #4]
 800ac62:	33b0      	adds	r3, #176	@ 0xb0
 800ac64:	009b      	lsls	r3, r3, #2
 800ac66:	4413      	add	r3, r2
 800ac68:	685b      	ldr	r3, [r3, #4]
 800ac6a:	68db      	ldr	r3, [r3, #12]
 800ac6c:	68fa      	ldr	r2, [r7, #12]
 800ac6e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800ac72:	68fa      	ldr	r2, [r7, #12]
 800ac74:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800ac78:	4611      	mov	r1, r2
 800ac7a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800ac7c:	2300      	movs	r3, #0
}
 800ac7e:	4618      	mov	r0, r3
 800ac80:	3710      	adds	r7, #16
 800ac82:	46bd      	mov	sp, r7
 800ac84:	bd80      	pop	{r7, pc}

0800ac86 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ac86:	b580      	push	{r7, lr}
 800ac88:	b084      	sub	sp, #16
 800ac8a:	af00      	add	r7, sp, #0
 800ac8c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	32b0      	adds	r2, #176	@ 0xb0
 800ac98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac9c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d101      	bne.n	800aca8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800aca4:	2303      	movs	r3, #3
 800aca6:	e024      	b.n	800acf2 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800acae:	687a      	ldr	r2, [r7, #4]
 800acb0:	33b0      	adds	r3, #176	@ 0xb0
 800acb2:	009b      	lsls	r3, r3, #2
 800acb4:	4413      	add	r3, r2
 800acb6:	685b      	ldr	r3, [r3, #4]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d019      	beq.n	800acf0 <USBD_CDC_EP0_RxReady+0x6a>
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800acc2:	2bff      	cmp	r3, #255	@ 0xff
 800acc4:	d014      	beq.n	800acf0 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800accc:	687a      	ldr	r2, [r7, #4]
 800acce:	33b0      	adds	r3, #176	@ 0xb0
 800acd0:	009b      	lsls	r3, r3, #2
 800acd2:	4413      	add	r3, r2
 800acd4:	685b      	ldr	r3, [r3, #4]
 800acd6:	689b      	ldr	r3, [r3, #8]
 800acd8:	68fa      	ldr	r2, [r7, #12]
 800acda:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800acde:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800ace0:	68fa      	ldr	r2, [r7, #12]
 800ace2:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ace6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	22ff      	movs	r2, #255	@ 0xff
 800acec:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800acf0:	2300      	movs	r3, #0
}
 800acf2:	4618      	mov	r0, r3
 800acf4:	3710      	adds	r7, #16
 800acf6:	46bd      	mov	sp, r7
 800acf8:	bd80      	pop	{r7, pc}
	...

0800acfc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b086      	sub	sp, #24
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ad04:	2182      	movs	r1, #130	@ 0x82
 800ad06:	4818      	ldr	r0, [pc, #96]	@ (800ad68 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ad08:	f000 fd0f 	bl	800b72a <USBD_GetEpDesc>
 800ad0c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ad0e:	2101      	movs	r1, #1
 800ad10:	4815      	ldr	r0, [pc, #84]	@ (800ad68 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ad12:	f000 fd0a 	bl	800b72a <USBD_GetEpDesc>
 800ad16:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ad18:	2181      	movs	r1, #129	@ 0x81
 800ad1a:	4813      	ldr	r0, [pc, #76]	@ (800ad68 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ad1c:	f000 fd05 	bl	800b72a <USBD_GetEpDesc>
 800ad20:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ad22:	697b      	ldr	r3, [r7, #20]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d002      	beq.n	800ad2e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ad28:	697b      	ldr	r3, [r7, #20]
 800ad2a:	2210      	movs	r2, #16
 800ad2c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ad2e:	693b      	ldr	r3, [r7, #16]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d006      	beq.n	800ad42 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ad34:	693b      	ldr	r3, [r7, #16]
 800ad36:	2200      	movs	r2, #0
 800ad38:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ad3c:	711a      	strb	r2, [r3, #4]
 800ad3e:	2200      	movs	r2, #0
 800ad40:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d006      	beq.n	800ad56 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ad50:	711a      	strb	r2, [r3, #4]
 800ad52:	2200      	movs	r2, #0
 800ad54:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	2243      	movs	r2, #67	@ 0x43
 800ad5a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ad5c:	4b02      	ldr	r3, [pc, #8]	@ (800ad68 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800ad5e:	4618      	mov	r0, r3
 800ad60:	3718      	adds	r7, #24
 800ad62:	46bd      	mov	sp, r7
 800ad64:	bd80      	pop	{r7, pc}
 800ad66:	bf00      	nop
 800ad68:	20000054 	.word	0x20000054

0800ad6c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b086      	sub	sp, #24
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ad74:	2182      	movs	r1, #130	@ 0x82
 800ad76:	4818      	ldr	r0, [pc, #96]	@ (800add8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ad78:	f000 fcd7 	bl	800b72a <USBD_GetEpDesc>
 800ad7c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ad7e:	2101      	movs	r1, #1
 800ad80:	4815      	ldr	r0, [pc, #84]	@ (800add8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ad82:	f000 fcd2 	bl	800b72a <USBD_GetEpDesc>
 800ad86:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ad88:	2181      	movs	r1, #129	@ 0x81
 800ad8a:	4813      	ldr	r0, [pc, #76]	@ (800add8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ad8c:	f000 fccd 	bl	800b72a <USBD_GetEpDesc>
 800ad90:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ad92:	697b      	ldr	r3, [r7, #20]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d002      	beq.n	800ad9e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800ad98:	697b      	ldr	r3, [r7, #20]
 800ad9a:	2210      	movs	r2, #16
 800ad9c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ad9e:	693b      	ldr	r3, [r7, #16]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d006      	beq.n	800adb2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ada4:	693b      	ldr	r3, [r7, #16]
 800ada6:	2200      	movs	r2, #0
 800ada8:	711a      	strb	r2, [r3, #4]
 800adaa:	2200      	movs	r2, #0
 800adac:	f042 0202 	orr.w	r2, r2, #2
 800adb0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d006      	beq.n	800adc6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	2200      	movs	r2, #0
 800adbc:	711a      	strb	r2, [r3, #4]
 800adbe:	2200      	movs	r2, #0
 800adc0:	f042 0202 	orr.w	r2, r2, #2
 800adc4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	2243      	movs	r2, #67	@ 0x43
 800adca:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800adcc:	4b02      	ldr	r3, [pc, #8]	@ (800add8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800adce:	4618      	mov	r0, r3
 800add0:	3718      	adds	r7, #24
 800add2:	46bd      	mov	sp, r7
 800add4:	bd80      	pop	{r7, pc}
 800add6:	bf00      	nop
 800add8:	20000054 	.word	0x20000054

0800addc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800addc:	b580      	push	{r7, lr}
 800adde:	b086      	sub	sp, #24
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ade4:	2182      	movs	r1, #130	@ 0x82
 800ade6:	4818      	ldr	r0, [pc, #96]	@ (800ae48 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ade8:	f000 fc9f 	bl	800b72a <USBD_GetEpDesc>
 800adec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800adee:	2101      	movs	r1, #1
 800adf0:	4815      	ldr	r0, [pc, #84]	@ (800ae48 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800adf2:	f000 fc9a 	bl	800b72a <USBD_GetEpDesc>
 800adf6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800adf8:	2181      	movs	r1, #129	@ 0x81
 800adfa:	4813      	ldr	r0, [pc, #76]	@ (800ae48 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800adfc:	f000 fc95 	bl	800b72a <USBD_GetEpDesc>
 800ae00:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ae02:	697b      	ldr	r3, [r7, #20]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d002      	beq.n	800ae0e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ae08:	697b      	ldr	r3, [r7, #20]
 800ae0a:	2210      	movs	r2, #16
 800ae0c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ae0e:	693b      	ldr	r3, [r7, #16]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d006      	beq.n	800ae22 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ae14:	693b      	ldr	r3, [r7, #16]
 800ae16:	2200      	movs	r2, #0
 800ae18:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ae1c:	711a      	strb	r2, [r3, #4]
 800ae1e:	2200      	movs	r2, #0
 800ae20:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d006      	beq.n	800ae36 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ae30:	711a      	strb	r2, [r3, #4]
 800ae32:	2200      	movs	r2, #0
 800ae34:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	2243      	movs	r2, #67	@ 0x43
 800ae3a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ae3c:	4b02      	ldr	r3, [pc, #8]	@ (800ae48 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800ae3e:	4618      	mov	r0, r3
 800ae40:	3718      	adds	r7, #24
 800ae42:	46bd      	mov	sp, r7
 800ae44:	bd80      	pop	{r7, pc}
 800ae46:	bf00      	nop
 800ae48:	20000054 	.word	0x20000054

0800ae4c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ae4c:	b480      	push	{r7}
 800ae4e:	b083      	sub	sp, #12
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	220a      	movs	r2, #10
 800ae58:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800ae5a:	4b03      	ldr	r3, [pc, #12]	@ (800ae68 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	370c      	adds	r7, #12
 800ae60:	46bd      	mov	sp, r7
 800ae62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae66:	4770      	bx	lr
 800ae68:	20000010 	.word	0x20000010

0800ae6c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800ae6c:	b480      	push	{r7}
 800ae6e:	b083      	sub	sp, #12
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
 800ae74:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800ae76:	683b      	ldr	r3, [r7, #0]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d101      	bne.n	800ae80 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800ae7c:	2303      	movs	r3, #3
 800ae7e:	e009      	b.n	800ae94 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ae86:	687a      	ldr	r2, [r7, #4]
 800ae88:	33b0      	adds	r3, #176	@ 0xb0
 800ae8a:	009b      	lsls	r3, r3, #2
 800ae8c:	4413      	add	r3, r2
 800ae8e:	683a      	ldr	r2, [r7, #0]
 800ae90:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800ae92:	2300      	movs	r3, #0
}
 800ae94:	4618      	mov	r0, r3
 800ae96:	370c      	adds	r7, #12
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9e:	4770      	bx	lr

0800aea0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800aea0:	b480      	push	{r7}
 800aea2:	b087      	sub	sp, #28
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	60f8      	str	r0, [r7, #12]
 800aea8:	60b9      	str	r1, [r7, #8]
 800aeaa:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	32b0      	adds	r2, #176	@ 0xb0
 800aeb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aeba:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800aebc:	697b      	ldr	r3, [r7, #20]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d101      	bne.n	800aec6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800aec2:	2303      	movs	r3, #3
 800aec4:	e008      	b.n	800aed8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800aec6:	697b      	ldr	r3, [r7, #20]
 800aec8:	68ba      	ldr	r2, [r7, #8]
 800aeca:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800aece:	697b      	ldr	r3, [r7, #20]
 800aed0:	687a      	ldr	r2, [r7, #4]
 800aed2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800aed6:	2300      	movs	r3, #0
}
 800aed8:	4618      	mov	r0, r3
 800aeda:	371c      	adds	r7, #28
 800aedc:	46bd      	mov	sp, r7
 800aede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee2:	4770      	bx	lr

0800aee4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800aee4:	b480      	push	{r7}
 800aee6:	b085      	sub	sp, #20
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
 800aeec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	32b0      	adds	r2, #176	@ 0xb0
 800aef8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aefc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d101      	bne.n	800af08 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800af04:	2303      	movs	r3, #3
 800af06:	e004      	b.n	800af12 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	683a      	ldr	r2, [r7, #0]
 800af0c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800af10:	2300      	movs	r3, #0
}
 800af12:	4618      	mov	r0, r3
 800af14:	3714      	adds	r7, #20
 800af16:	46bd      	mov	sp, r7
 800af18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af1c:	4770      	bx	lr
	...

0800af20 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800af20:	b580      	push	{r7, lr}
 800af22:	b084      	sub	sp, #16
 800af24:	af00      	add	r7, sp, #0
 800af26:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	32b0      	adds	r2, #176	@ 0xb0
 800af32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af36:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	32b0      	adds	r2, #176	@ 0xb0
 800af42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d101      	bne.n	800af4e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800af4a:	2303      	movs	r3, #3
 800af4c:	e018      	b.n	800af80 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	7c1b      	ldrb	r3, [r3, #16]
 800af52:	2b00      	cmp	r3, #0
 800af54:	d10a      	bne.n	800af6c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800af56:	4b0c      	ldr	r3, [pc, #48]	@ (800af88 <USBD_CDC_ReceivePacket+0x68>)
 800af58:	7819      	ldrb	r1, [r3, #0]
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800af60:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800af64:	6878      	ldr	r0, [r7, #4]
 800af66:	f001 ff9d 	bl	800cea4 <USBD_LL_PrepareReceive>
 800af6a:	e008      	b.n	800af7e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800af6c:	4b06      	ldr	r3, [pc, #24]	@ (800af88 <USBD_CDC_ReceivePacket+0x68>)
 800af6e:	7819      	ldrb	r1, [r3, #0]
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800af76:	2340      	movs	r3, #64	@ 0x40
 800af78:	6878      	ldr	r0, [r7, #4]
 800af7a:	f001 ff93 	bl	800cea4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800af7e:	2300      	movs	r3, #0
}
 800af80:	4618      	mov	r0, r3
 800af82:	3710      	adds	r7, #16
 800af84:	46bd      	mov	sp, r7
 800af86:	bd80      	pop	{r7, pc}
 800af88:	20000098 	.word	0x20000098

0800af8c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b086      	sub	sp, #24
 800af90:	af00      	add	r7, sp, #0
 800af92:	60f8      	str	r0, [r7, #12]
 800af94:	60b9      	str	r1, [r7, #8]
 800af96:	4613      	mov	r3, r2
 800af98:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d101      	bne.n	800afa4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800afa0:	2303      	movs	r3, #3
 800afa2:	e01f      	b.n	800afe4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	2200      	movs	r2, #0
 800afa8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	2200      	movs	r2, #0
 800afb0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	2200      	movs	r2, #0
 800afb8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800afbc:	68bb      	ldr	r3, [r7, #8]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d003      	beq.n	800afca <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	68ba      	ldr	r2, [r7, #8]
 800afc6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	2201      	movs	r2, #1
 800afce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	79fa      	ldrb	r2, [r7, #7]
 800afd6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800afd8:	68f8      	ldr	r0, [r7, #12]
 800afda:	f001 fe0d 	bl	800cbf8 <USBD_LL_Init>
 800afde:	4603      	mov	r3, r0
 800afe0:	75fb      	strb	r3, [r7, #23]

  return ret;
 800afe2:	7dfb      	ldrb	r3, [r7, #23]
}
 800afe4:	4618      	mov	r0, r3
 800afe6:	3718      	adds	r7, #24
 800afe8:	46bd      	mov	sp, r7
 800afea:	bd80      	pop	{r7, pc}

0800afec <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800afec:	b580      	push	{r7, lr}
 800afee:	b084      	sub	sp, #16
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
 800aff4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800aff6:	2300      	movs	r3, #0
 800aff8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800affa:	683b      	ldr	r3, [r7, #0]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d101      	bne.n	800b004 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b000:	2303      	movs	r3, #3
 800b002:	e025      	b.n	800b050 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	683a      	ldr	r2, [r7, #0]
 800b008:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	32ae      	adds	r2, #174	@ 0xae
 800b016:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b01a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d00f      	beq.n	800b040 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	32ae      	adds	r2, #174	@ 0xae
 800b02a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b02e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b030:	f107 020e 	add.w	r2, r7, #14
 800b034:	4610      	mov	r0, r2
 800b036:	4798      	blx	r3
 800b038:	4602      	mov	r2, r0
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b046:	1c5a      	adds	r2, r3, #1
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800b04e:	2300      	movs	r3, #0
}
 800b050:	4618      	mov	r0, r3
 800b052:	3710      	adds	r7, #16
 800b054:	46bd      	mov	sp, r7
 800b056:	bd80      	pop	{r7, pc}

0800b058 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b058:	b580      	push	{r7, lr}
 800b05a:	b082      	sub	sp, #8
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b060:	6878      	ldr	r0, [r7, #4]
 800b062:	f001 fe15 	bl	800cc90 <USBD_LL_Start>
 800b066:	4603      	mov	r3, r0
}
 800b068:	4618      	mov	r0, r3
 800b06a:	3708      	adds	r7, #8
 800b06c:	46bd      	mov	sp, r7
 800b06e:	bd80      	pop	{r7, pc}

0800b070 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b070:	b480      	push	{r7}
 800b072:	b083      	sub	sp, #12
 800b074:	af00      	add	r7, sp, #0
 800b076:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b078:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b07a:	4618      	mov	r0, r3
 800b07c:	370c      	adds	r7, #12
 800b07e:	46bd      	mov	sp, r7
 800b080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b084:	4770      	bx	lr

0800b086 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b086:	b580      	push	{r7, lr}
 800b088:	b084      	sub	sp, #16
 800b08a:	af00      	add	r7, sp, #0
 800b08c:	6078      	str	r0, [r7, #4]
 800b08e:	460b      	mov	r3, r1
 800b090:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b092:	2300      	movs	r3, #0
 800b094:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d009      	beq.n	800b0b4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	78fa      	ldrb	r2, [r7, #3]
 800b0aa:	4611      	mov	r1, r2
 800b0ac:	6878      	ldr	r0, [r7, #4]
 800b0ae:	4798      	blx	r3
 800b0b0:	4603      	mov	r3, r0
 800b0b2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b0b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	3710      	adds	r7, #16
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	bd80      	pop	{r7, pc}

0800b0be <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b0be:	b580      	push	{r7, lr}
 800b0c0:	b084      	sub	sp, #16
 800b0c2:	af00      	add	r7, sp, #0
 800b0c4:	6078      	str	r0, [r7, #4]
 800b0c6:	460b      	mov	r3, r1
 800b0c8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b0d4:	685b      	ldr	r3, [r3, #4]
 800b0d6:	78fa      	ldrb	r2, [r7, #3]
 800b0d8:	4611      	mov	r1, r2
 800b0da:	6878      	ldr	r0, [r7, #4]
 800b0dc:	4798      	blx	r3
 800b0de:	4603      	mov	r3, r0
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d001      	beq.n	800b0e8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b0e4:	2303      	movs	r3, #3
 800b0e6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b0e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	3710      	adds	r7, #16
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	bd80      	pop	{r7, pc}

0800b0f2 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b0f2:	b580      	push	{r7, lr}
 800b0f4:	b084      	sub	sp, #16
 800b0f6:	af00      	add	r7, sp, #0
 800b0f8:	6078      	str	r0, [r7, #4]
 800b0fa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b102:	6839      	ldr	r1, [r7, #0]
 800b104:	4618      	mov	r0, r3
 800b106:	f001 f90c 	bl	800c322 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	2201      	movs	r2, #1
 800b10e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800b118:	461a      	mov	r2, r3
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b126:	f003 031f 	and.w	r3, r3, #31
 800b12a:	2b02      	cmp	r3, #2
 800b12c:	d01a      	beq.n	800b164 <USBD_LL_SetupStage+0x72>
 800b12e:	2b02      	cmp	r3, #2
 800b130:	d822      	bhi.n	800b178 <USBD_LL_SetupStage+0x86>
 800b132:	2b00      	cmp	r3, #0
 800b134:	d002      	beq.n	800b13c <USBD_LL_SetupStage+0x4a>
 800b136:	2b01      	cmp	r3, #1
 800b138:	d00a      	beq.n	800b150 <USBD_LL_SetupStage+0x5e>
 800b13a:	e01d      	b.n	800b178 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b142:	4619      	mov	r1, r3
 800b144:	6878      	ldr	r0, [r7, #4]
 800b146:	f000 fb63 	bl	800b810 <USBD_StdDevReq>
 800b14a:	4603      	mov	r3, r0
 800b14c:	73fb      	strb	r3, [r7, #15]
      break;
 800b14e:	e020      	b.n	800b192 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b156:	4619      	mov	r1, r3
 800b158:	6878      	ldr	r0, [r7, #4]
 800b15a:	f000 fbcb 	bl	800b8f4 <USBD_StdItfReq>
 800b15e:	4603      	mov	r3, r0
 800b160:	73fb      	strb	r3, [r7, #15]
      break;
 800b162:	e016      	b.n	800b192 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b16a:	4619      	mov	r1, r3
 800b16c:	6878      	ldr	r0, [r7, #4]
 800b16e:	f000 fc2d 	bl	800b9cc <USBD_StdEPReq>
 800b172:	4603      	mov	r3, r0
 800b174:	73fb      	strb	r3, [r7, #15]
      break;
 800b176:	e00c      	b.n	800b192 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b17e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b182:	b2db      	uxtb	r3, r3
 800b184:	4619      	mov	r1, r3
 800b186:	6878      	ldr	r0, [r7, #4]
 800b188:	f001 fde2 	bl	800cd50 <USBD_LL_StallEP>
 800b18c:	4603      	mov	r3, r0
 800b18e:	73fb      	strb	r3, [r7, #15]
      break;
 800b190:	bf00      	nop
  }

  return ret;
 800b192:	7bfb      	ldrb	r3, [r7, #15]
}
 800b194:	4618      	mov	r0, r3
 800b196:	3710      	adds	r7, #16
 800b198:	46bd      	mov	sp, r7
 800b19a:	bd80      	pop	{r7, pc}

0800b19c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b19c:	b580      	push	{r7, lr}
 800b19e:	b086      	sub	sp, #24
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	60f8      	str	r0, [r7, #12]
 800b1a4:	460b      	mov	r3, r1
 800b1a6:	607a      	str	r2, [r7, #4]
 800b1a8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b1ae:	7afb      	ldrb	r3, [r7, #11]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d16e      	bne.n	800b292 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800b1ba:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b1c2:	2b03      	cmp	r3, #3
 800b1c4:	f040 8098 	bne.w	800b2f8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b1c8:	693b      	ldr	r3, [r7, #16]
 800b1ca:	689a      	ldr	r2, [r3, #8]
 800b1cc:	693b      	ldr	r3, [r7, #16]
 800b1ce:	68db      	ldr	r3, [r3, #12]
 800b1d0:	429a      	cmp	r2, r3
 800b1d2:	d913      	bls.n	800b1fc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b1d4:	693b      	ldr	r3, [r7, #16]
 800b1d6:	689a      	ldr	r2, [r3, #8]
 800b1d8:	693b      	ldr	r3, [r7, #16]
 800b1da:	68db      	ldr	r3, [r3, #12]
 800b1dc:	1ad2      	subs	r2, r2, r3
 800b1de:	693b      	ldr	r3, [r7, #16]
 800b1e0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b1e2:	693b      	ldr	r3, [r7, #16]
 800b1e4:	68da      	ldr	r2, [r3, #12]
 800b1e6:	693b      	ldr	r3, [r7, #16]
 800b1e8:	689b      	ldr	r3, [r3, #8]
 800b1ea:	4293      	cmp	r3, r2
 800b1ec:	bf28      	it	cs
 800b1ee:	4613      	movcs	r3, r2
 800b1f0:	461a      	mov	r2, r3
 800b1f2:	6879      	ldr	r1, [r7, #4]
 800b1f4:	68f8      	ldr	r0, [r7, #12]
 800b1f6:	f001 f994 	bl	800c522 <USBD_CtlContinueRx>
 800b1fa:	e07d      	b.n	800b2f8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b202:	f003 031f 	and.w	r3, r3, #31
 800b206:	2b02      	cmp	r3, #2
 800b208:	d014      	beq.n	800b234 <USBD_LL_DataOutStage+0x98>
 800b20a:	2b02      	cmp	r3, #2
 800b20c:	d81d      	bhi.n	800b24a <USBD_LL_DataOutStage+0xae>
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d002      	beq.n	800b218 <USBD_LL_DataOutStage+0x7c>
 800b212:	2b01      	cmp	r3, #1
 800b214:	d003      	beq.n	800b21e <USBD_LL_DataOutStage+0x82>
 800b216:	e018      	b.n	800b24a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b218:	2300      	movs	r3, #0
 800b21a:	75bb      	strb	r3, [r7, #22]
            break;
 800b21c:	e018      	b.n	800b250 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b224:	b2db      	uxtb	r3, r3
 800b226:	4619      	mov	r1, r3
 800b228:	68f8      	ldr	r0, [r7, #12]
 800b22a:	f000 fa64 	bl	800b6f6 <USBD_CoreFindIF>
 800b22e:	4603      	mov	r3, r0
 800b230:	75bb      	strb	r3, [r7, #22]
            break;
 800b232:	e00d      	b.n	800b250 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b23a:	b2db      	uxtb	r3, r3
 800b23c:	4619      	mov	r1, r3
 800b23e:	68f8      	ldr	r0, [r7, #12]
 800b240:	f000 fa66 	bl	800b710 <USBD_CoreFindEP>
 800b244:	4603      	mov	r3, r0
 800b246:	75bb      	strb	r3, [r7, #22]
            break;
 800b248:	e002      	b.n	800b250 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b24a:	2300      	movs	r3, #0
 800b24c:	75bb      	strb	r3, [r7, #22]
            break;
 800b24e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b250:	7dbb      	ldrb	r3, [r7, #22]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d119      	bne.n	800b28a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b25c:	b2db      	uxtb	r3, r3
 800b25e:	2b03      	cmp	r3, #3
 800b260:	d113      	bne.n	800b28a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b262:	7dba      	ldrb	r2, [r7, #22]
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	32ae      	adds	r2, #174	@ 0xae
 800b268:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b26c:	691b      	ldr	r3, [r3, #16]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d00b      	beq.n	800b28a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b272:	7dba      	ldrb	r2, [r7, #22]
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b27a:	7dba      	ldrb	r2, [r7, #22]
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	32ae      	adds	r2, #174	@ 0xae
 800b280:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b284:	691b      	ldr	r3, [r3, #16]
 800b286:	68f8      	ldr	r0, [r7, #12]
 800b288:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b28a:	68f8      	ldr	r0, [r7, #12]
 800b28c:	f001 f95a 	bl	800c544 <USBD_CtlSendStatus>
 800b290:	e032      	b.n	800b2f8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b292:	7afb      	ldrb	r3, [r7, #11]
 800b294:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b298:	b2db      	uxtb	r3, r3
 800b29a:	4619      	mov	r1, r3
 800b29c:	68f8      	ldr	r0, [r7, #12]
 800b29e:	f000 fa37 	bl	800b710 <USBD_CoreFindEP>
 800b2a2:	4603      	mov	r3, r0
 800b2a4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b2a6:	7dbb      	ldrb	r3, [r7, #22]
 800b2a8:	2bff      	cmp	r3, #255	@ 0xff
 800b2aa:	d025      	beq.n	800b2f8 <USBD_LL_DataOutStage+0x15c>
 800b2ac:	7dbb      	ldrb	r3, [r7, #22]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d122      	bne.n	800b2f8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b2b8:	b2db      	uxtb	r3, r3
 800b2ba:	2b03      	cmp	r3, #3
 800b2bc:	d117      	bne.n	800b2ee <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b2be:	7dba      	ldrb	r2, [r7, #22]
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	32ae      	adds	r2, #174	@ 0xae
 800b2c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2c8:	699b      	ldr	r3, [r3, #24]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d00f      	beq.n	800b2ee <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b2ce:	7dba      	ldrb	r2, [r7, #22]
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b2d6:	7dba      	ldrb	r2, [r7, #22]
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	32ae      	adds	r2, #174	@ 0xae
 800b2dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2e0:	699b      	ldr	r3, [r3, #24]
 800b2e2:	7afa      	ldrb	r2, [r7, #11]
 800b2e4:	4611      	mov	r1, r2
 800b2e6:	68f8      	ldr	r0, [r7, #12]
 800b2e8:	4798      	blx	r3
 800b2ea:	4603      	mov	r3, r0
 800b2ec:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b2ee:	7dfb      	ldrb	r3, [r7, #23]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d001      	beq.n	800b2f8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b2f4:	7dfb      	ldrb	r3, [r7, #23]
 800b2f6:	e000      	b.n	800b2fa <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b2f8:	2300      	movs	r3, #0
}
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	3718      	adds	r7, #24
 800b2fe:	46bd      	mov	sp, r7
 800b300:	bd80      	pop	{r7, pc}

0800b302 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b302:	b580      	push	{r7, lr}
 800b304:	b086      	sub	sp, #24
 800b306:	af00      	add	r7, sp, #0
 800b308:	60f8      	str	r0, [r7, #12]
 800b30a:	460b      	mov	r3, r1
 800b30c:	607a      	str	r2, [r7, #4]
 800b30e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b310:	7afb      	ldrb	r3, [r7, #11]
 800b312:	2b00      	cmp	r3, #0
 800b314:	d16f      	bne.n	800b3f6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	3314      	adds	r3, #20
 800b31a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b322:	2b02      	cmp	r3, #2
 800b324:	d15a      	bne.n	800b3dc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b326:	693b      	ldr	r3, [r7, #16]
 800b328:	689a      	ldr	r2, [r3, #8]
 800b32a:	693b      	ldr	r3, [r7, #16]
 800b32c:	68db      	ldr	r3, [r3, #12]
 800b32e:	429a      	cmp	r2, r3
 800b330:	d914      	bls.n	800b35c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b332:	693b      	ldr	r3, [r7, #16]
 800b334:	689a      	ldr	r2, [r3, #8]
 800b336:	693b      	ldr	r3, [r7, #16]
 800b338:	68db      	ldr	r3, [r3, #12]
 800b33a:	1ad2      	subs	r2, r2, r3
 800b33c:	693b      	ldr	r3, [r7, #16]
 800b33e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b340:	693b      	ldr	r3, [r7, #16]
 800b342:	689b      	ldr	r3, [r3, #8]
 800b344:	461a      	mov	r2, r3
 800b346:	6879      	ldr	r1, [r7, #4]
 800b348:	68f8      	ldr	r0, [r7, #12]
 800b34a:	f001 f8bc 	bl	800c4c6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b34e:	2300      	movs	r3, #0
 800b350:	2200      	movs	r2, #0
 800b352:	2100      	movs	r1, #0
 800b354:	68f8      	ldr	r0, [r7, #12]
 800b356:	f001 fda5 	bl	800cea4 <USBD_LL_PrepareReceive>
 800b35a:	e03f      	b.n	800b3dc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b35c:	693b      	ldr	r3, [r7, #16]
 800b35e:	68da      	ldr	r2, [r3, #12]
 800b360:	693b      	ldr	r3, [r7, #16]
 800b362:	689b      	ldr	r3, [r3, #8]
 800b364:	429a      	cmp	r2, r3
 800b366:	d11c      	bne.n	800b3a2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b368:	693b      	ldr	r3, [r7, #16]
 800b36a:	685a      	ldr	r2, [r3, #4]
 800b36c:	693b      	ldr	r3, [r7, #16]
 800b36e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b370:	429a      	cmp	r2, r3
 800b372:	d316      	bcc.n	800b3a2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b374:	693b      	ldr	r3, [r7, #16]
 800b376:	685a      	ldr	r2, [r3, #4]
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b37e:	429a      	cmp	r2, r3
 800b380:	d20f      	bcs.n	800b3a2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b382:	2200      	movs	r2, #0
 800b384:	2100      	movs	r1, #0
 800b386:	68f8      	ldr	r0, [r7, #12]
 800b388:	f001 f89d 	bl	800c4c6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	2200      	movs	r2, #0
 800b390:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b394:	2300      	movs	r3, #0
 800b396:	2200      	movs	r2, #0
 800b398:	2100      	movs	r1, #0
 800b39a:	68f8      	ldr	r0, [r7, #12]
 800b39c:	f001 fd82 	bl	800cea4 <USBD_LL_PrepareReceive>
 800b3a0:	e01c      	b.n	800b3dc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b3a8:	b2db      	uxtb	r3, r3
 800b3aa:	2b03      	cmp	r3, #3
 800b3ac:	d10f      	bne.n	800b3ce <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b3b4:	68db      	ldr	r3, [r3, #12]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d009      	beq.n	800b3ce <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	2200      	movs	r2, #0
 800b3be:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b3c8:	68db      	ldr	r3, [r3, #12]
 800b3ca:	68f8      	ldr	r0, [r7, #12]
 800b3cc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b3ce:	2180      	movs	r1, #128	@ 0x80
 800b3d0:	68f8      	ldr	r0, [r7, #12]
 800b3d2:	f001 fcbd 	bl	800cd50 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b3d6:	68f8      	ldr	r0, [r7, #12]
 800b3d8:	f001 f8c7 	bl	800c56a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d03a      	beq.n	800b45c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b3e6:	68f8      	ldr	r0, [r7, #12]
 800b3e8:	f7ff fe42 	bl	800b070 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	2200      	movs	r2, #0
 800b3f0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800b3f4:	e032      	b.n	800b45c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b3f6:	7afb      	ldrb	r3, [r7, #11]
 800b3f8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b3fc:	b2db      	uxtb	r3, r3
 800b3fe:	4619      	mov	r1, r3
 800b400:	68f8      	ldr	r0, [r7, #12]
 800b402:	f000 f985 	bl	800b710 <USBD_CoreFindEP>
 800b406:	4603      	mov	r3, r0
 800b408:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b40a:	7dfb      	ldrb	r3, [r7, #23]
 800b40c:	2bff      	cmp	r3, #255	@ 0xff
 800b40e:	d025      	beq.n	800b45c <USBD_LL_DataInStage+0x15a>
 800b410:	7dfb      	ldrb	r3, [r7, #23]
 800b412:	2b00      	cmp	r3, #0
 800b414:	d122      	bne.n	800b45c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b41c:	b2db      	uxtb	r3, r3
 800b41e:	2b03      	cmp	r3, #3
 800b420:	d11c      	bne.n	800b45c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b422:	7dfa      	ldrb	r2, [r7, #23]
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	32ae      	adds	r2, #174	@ 0xae
 800b428:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b42c:	695b      	ldr	r3, [r3, #20]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d014      	beq.n	800b45c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b432:	7dfa      	ldrb	r2, [r7, #23]
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b43a:	7dfa      	ldrb	r2, [r7, #23]
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	32ae      	adds	r2, #174	@ 0xae
 800b440:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b444:	695b      	ldr	r3, [r3, #20]
 800b446:	7afa      	ldrb	r2, [r7, #11]
 800b448:	4611      	mov	r1, r2
 800b44a:	68f8      	ldr	r0, [r7, #12]
 800b44c:	4798      	blx	r3
 800b44e:	4603      	mov	r3, r0
 800b450:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b452:	7dbb      	ldrb	r3, [r7, #22]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d001      	beq.n	800b45c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b458:	7dbb      	ldrb	r3, [r7, #22]
 800b45a:	e000      	b.n	800b45e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b45c:	2300      	movs	r3, #0
}
 800b45e:	4618      	mov	r0, r3
 800b460:	3718      	adds	r7, #24
 800b462:	46bd      	mov	sp, r7
 800b464:	bd80      	pop	{r7, pc}

0800b466 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b466:	b580      	push	{r7, lr}
 800b468:	b084      	sub	sp, #16
 800b46a:	af00      	add	r7, sp, #0
 800b46c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b46e:	2300      	movs	r3, #0
 800b470:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	2201      	movs	r2, #1
 800b476:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	2200      	movs	r2, #0
 800b47e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	2200      	movs	r2, #0
 800b486:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	2200      	movs	r2, #0
 800b48c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	2200      	movs	r2, #0
 800b494:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d014      	beq.n	800b4cc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b4a8:	685b      	ldr	r3, [r3, #4]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d00e      	beq.n	800b4cc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b4b4:	685b      	ldr	r3, [r3, #4]
 800b4b6:	687a      	ldr	r2, [r7, #4]
 800b4b8:	6852      	ldr	r2, [r2, #4]
 800b4ba:	b2d2      	uxtb	r2, r2
 800b4bc:	4611      	mov	r1, r2
 800b4be:	6878      	ldr	r0, [r7, #4]
 800b4c0:	4798      	blx	r3
 800b4c2:	4603      	mov	r3, r0
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d001      	beq.n	800b4cc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b4c8:	2303      	movs	r3, #3
 800b4ca:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b4cc:	2340      	movs	r3, #64	@ 0x40
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	2100      	movs	r1, #0
 800b4d2:	6878      	ldr	r0, [r7, #4]
 800b4d4:	f001 fbf7 	bl	800ccc6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	2201      	movs	r2, #1
 800b4dc:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	2240      	movs	r2, #64	@ 0x40
 800b4e4:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b4e8:	2340      	movs	r3, #64	@ 0x40
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	2180      	movs	r1, #128	@ 0x80
 800b4ee:	6878      	ldr	r0, [r7, #4]
 800b4f0:	f001 fbe9 	bl	800ccc6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	2201      	movs	r2, #1
 800b4f8:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	2240      	movs	r2, #64	@ 0x40
 800b4fe:	621a      	str	r2, [r3, #32]

  return ret;
 800b500:	7bfb      	ldrb	r3, [r7, #15]
}
 800b502:	4618      	mov	r0, r3
 800b504:	3710      	adds	r7, #16
 800b506:	46bd      	mov	sp, r7
 800b508:	bd80      	pop	{r7, pc}

0800b50a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b50a:	b480      	push	{r7}
 800b50c:	b083      	sub	sp, #12
 800b50e:	af00      	add	r7, sp, #0
 800b510:	6078      	str	r0, [r7, #4]
 800b512:	460b      	mov	r3, r1
 800b514:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	78fa      	ldrb	r2, [r7, #3]
 800b51a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b51c:	2300      	movs	r3, #0
}
 800b51e:	4618      	mov	r0, r3
 800b520:	370c      	adds	r7, #12
 800b522:	46bd      	mov	sp, r7
 800b524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b528:	4770      	bx	lr

0800b52a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b52a:	b480      	push	{r7}
 800b52c:	b083      	sub	sp, #12
 800b52e:	af00      	add	r7, sp, #0
 800b530:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b538:	b2db      	uxtb	r3, r3
 800b53a:	2b04      	cmp	r3, #4
 800b53c:	d006      	beq.n	800b54c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b544:	b2da      	uxtb	r2, r3
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	2204      	movs	r2, #4
 800b550:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800b554:	2300      	movs	r3, #0
}
 800b556:	4618      	mov	r0, r3
 800b558:	370c      	adds	r7, #12
 800b55a:	46bd      	mov	sp, r7
 800b55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b560:	4770      	bx	lr

0800b562 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b562:	b480      	push	{r7}
 800b564:	b083      	sub	sp, #12
 800b566:	af00      	add	r7, sp, #0
 800b568:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b570:	b2db      	uxtb	r3, r3
 800b572:	2b04      	cmp	r3, #4
 800b574:	d106      	bne.n	800b584 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800b57c:	b2da      	uxtb	r2, r3
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800b584:	2300      	movs	r3, #0
}
 800b586:	4618      	mov	r0, r3
 800b588:	370c      	adds	r7, #12
 800b58a:	46bd      	mov	sp, r7
 800b58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b590:	4770      	bx	lr

0800b592 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b592:	b580      	push	{r7, lr}
 800b594:	b082      	sub	sp, #8
 800b596:	af00      	add	r7, sp, #0
 800b598:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b5a0:	b2db      	uxtb	r3, r3
 800b5a2:	2b03      	cmp	r3, #3
 800b5a4:	d110      	bne.n	800b5c8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d00b      	beq.n	800b5c8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b5b6:	69db      	ldr	r3, [r3, #28]
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d005      	beq.n	800b5c8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b5c2:	69db      	ldr	r3, [r3, #28]
 800b5c4:	6878      	ldr	r0, [r7, #4]
 800b5c6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b5c8:	2300      	movs	r3, #0
}
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	3708      	adds	r7, #8
 800b5ce:	46bd      	mov	sp, r7
 800b5d0:	bd80      	pop	{r7, pc}

0800b5d2 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b5d2:	b580      	push	{r7, lr}
 800b5d4:	b082      	sub	sp, #8
 800b5d6:	af00      	add	r7, sp, #0
 800b5d8:	6078      	str	r0, [r7, #4]
 800b5da:	460b      	mov	r3, r1
 800b5dc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	32ae      	adds	r2, #174	@ 0xae
 800b5e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d101      	bne.n	800b5f4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800b5f0:	2303      	movs	r3, #3
 800b5f2:	e01c      	b.n	800b62e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b5fa:	b2db      	uxtb	r3, r3
 800b5fc:	2b03      	cmp	r3, #3
 800b5fe:	d115      	bne.n	800b62c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	32ae      	adds	r2, #174	@ 0xae
 800b60a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b60e:	6a1b      	ldr	r3, [r3, #32]
 800b610:	2b00      	cmp	r3, #0
 800b612:	d00b      	beq.n	800b62c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	32ae      	adds	r2, #174	@ 0xae
 800b61e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b622:	6a1b      	ldr	r3, [r3, #32]
 800b624:	78fa      	ldrb	r2, [r7, #3]
 800b626:	4611      	mov	r1, r2
 800b628:	6878      	ldr	r0, [r7, #4]
 800b62a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b62c:	2300      	movs	r3, #0
}
 800b62e:	4618      	mov	r0, r3
 800b630:	3708      	adds	r7, #8
 800b632:	46bd      	mov	sp, r7
 800b634:	bd80      	pop	{r7, pc}

0800b636 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b636:	b580      	push	{r7, lr}
 800b638:	b082      	sub	sp, #8
 800b63a:	af00      	add	r7, sp, #0
 800b63c:	6078      	str	r0, [r7, #4]
 800b63e:	460b      	mov	r3, r1
 800b640:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	32ae      	adds	r2, #174	@ 0xae
 800b64c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b650:	2b00      	cmp	r3, #0
 800b652:	d101      	bne.n	800b658 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800b654:	2303      	movs	r3, #3
 800b656:	e01c      	b.n	800b692 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b65e:	b2db      	uxtb	r3, r3
 800b660:	2b03      	cmp	r3, #3
 800b662:	d115      	bne.n	800b690 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	32ae      	adds	r2, #174	@ 0xae
 800b66e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b674:	2b00      	cmp	r3, #0
 800b676:	d00b      	beq.n	800b690 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	32ae      	adds	r2, #174	@ 0xae
 800b682:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b688:	78fa      	ldrb	r2, [r7, #3]
 800b68a:	4611      	mov	r1, r2
 800b68c:	6878      	ldr	r0, [r7, #4]
 800b68e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b690:	2300      	movs	r3, #0
}
 800b692:	4618      	mov	r0, r3
 800b694:	3708      	adds	r7, #8
 800b696:	46bd      	mov	sp, r7
 800b698:	bd80      	pop	{r7, pc}

0800b69a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b69a:	b480      	push	{r7}
 800b69c:	b083      	sub	sp, #12
 800b69e:	af00      	add	r7, sp, #0
 800b6a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b6a2:	2300      	movs	r3, #0
}
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	370c      	adds	r7, #12
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ae:	4770      	bx	lr

0800b6b0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b084      	sub	sp, #16
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	2201      	movs	r2, #1
 800b6c0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d00e      	beq.n	800b6ec <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b6d4:	685b      	ldr	r3, [r3, #4]
 800b6d6:	687a      	ldr	r2, [r7, #4]
 800b6d8:	6852      	ldr	r2, [r2, #4]
 800b6da:	b2d2      	uxtb	r2, r2
 800b6dc:	4611      	mov	r1, r2
 800b6de:	6878      	ldr	r0, [r7, #4]
 800b6e0:	4798      	blx	r3
 800b6e2:	4603      	mov	r3, r0
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d001      	beq.n	800b6ec <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800b6e8:	2303      	movs	r3, #3
 800b6ea:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b6ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	3710      	adds	r7, #16
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	bd80      	pop	{r7, pc}

0800b6f6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b6f6:	b480      	push	{r7}
 800b6f8:	b083      	sub	sp, #12
 800b6fa:	af00      	add	r7, sp, #0
 800b6fc:	6078      	str	r0, [r7, #4]
 800b6fe:	460b      	mov	r3, r1
 800b700:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b702:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b704:	4618      	mov	r0, r3
 800b706:	370c      	adds	r7, #12
 800b708:	46bd      	mov	sp, r7
 800b70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70e:	4770      	bx	lr

0800b710 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b710:	b480      	push	{r7}
 800b712:	b083      	sub	sp, #12
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
 800b718:	460b      	mov	r3, r1
 800b71a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b71c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b71e:	4618      	mov	r0, r3
 800b720:	370c      	adds	r7, #12
 800b722:	46bd      	mov	sp, r7
 800b724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b728:	4770      	bx	lr

0800b72a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b72a:	b580      	push	{r7, lr}
 800b72c:	b086      	sub	sp, #24
 800b72e:	af00      	add	r7, sp, #0
 800b730:	6078      	str	r0, [r7, #4]
 800b732:	460b      	mov	r3, r1
 800b734:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b73e:	2300      	movs	r3, #0
 800b740:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	885b      	ldrh	r3, [r3, #2]
 800b746:	b29b      	uxth	r3, r3
 800b748:	68fa      	ldr	r2, [r7, #12]
 800b74a:	7812      	ldrb	r2, [r2, #0]
 800b74c:	4293      	cmp	r3, r2
 800b74e:	d91f      	bls.n	800b790 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	781b      	ldrb	r3, [r3, #0]
 800b754:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b756:	e013      	b.n	800b780 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b758:	f107 030a 	add.w	r3, r7, #10
 800b75c:	4619      	mov	r1, r3
 800b75e:	6978      	ldr	r0, [r7, #20]
 800b760:	f000 f81b 	bl	800b79a <USBD_GetNextDesc>
 800b764:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b766:	697b      	ldr	r3, [r7, #20]
 800b768:	785b      	ldrb	r3, [r3, #1]
 800b76a:	2b05      	cmp	r3, #5
 800b76c:	d108      	bne.n	800b780 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b76e:	697b      	ldr	r3, [r7, #20]
 800b770:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b772:	693b      	ldr	r3, [r7, #16]
 800b774:	789b      	ldrb	r3, [r3, #2]
 800b776:	78fa      	ldrb	r2, [r7, #3]
 800b778:	429a      	cmp	r2, r3
 800b77a:	d008      	beq.n	800b78e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b77c:	2300      	movs	r3, #0
 800b77e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	885b      	ldrh	r3, [r3, #2]
 800b784:	b29a      	uxth	r2, r3
 800b786:	897b      	ldrh	r3, [r7, #10]
 800b788:	429a      	cmp	r2, r3
 800b78a:	d8e5      	bhi.n	800b758 <USBD_GetEpDesc+0x2e>
 800b78c:	e000      	b.n	800b790 <USBD_GetEpDesc+0x66>
          break;
 800b78e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b790:	693b      	ldr	r3, [r7, #16]
}
 800b792:	4618      	mov	r0, r3
 800b794:	3718      	adds	r7, #24
 800b796:	46bd      	mov	sp, r7
 800b798:	bd80      	pop	{r7, pc}

0800b79a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b79a:	b480      	push	{r7}
 800b79c:	b085      	sub	sp, #20
 800b79e:	af00      	add	r7, sp, #0
 800b7a0:	6078      	str	r0, [r7, #4]
 800b7a2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b7a8:	683b      	ldr	r3, [r7, #0]
 800b7aa:	881b      	ldrh	r3, [r3, #0]
 800b7ac:	68fa      	ldr	r2, [r7, #12]
 800b7ae:	7812      	ldrb	r2, [r2, #0]
 800b7b0:	4413      	add	r3, r2
 800b7b2:	b29a      	uxth	r2, r3
 800b7b4:	683b      	ldr	r3, [r7, #0]
 800b7b6:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	781b      	ldrb	r3, [r3, #0]
 800b7bc:	461a      	mov	r2, r3
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	4413      	add	r3, r2
 800b7c2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b7c4:	68fb      	ldr	r3, [r7, #12]
}
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	3714      	adds	r7, #20
 800b7ca:	46bd      	mov	sp, r7
 800b7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d0:	4770      	bx	lr

0800b7d2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b7d2:	b480      	push	{r7}
 800b7d4:	b087      	sub	sp, #28
 800b7d6:	af00      	add	r7, sp, #0
 800b7d8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b7de:	697b      	ldr	r3, [r7, #20]
 800b7e0:	781b      	ldrb	r3, [r3, #0]
 800b7e2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b7e4:	697b      	ldr	r3, [r7, #20]
 800b7e6:	3301      	adds	r3, #1
 800b7e8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b7ea:	697b      	ldr	r3, [r7, #20]
 800b7ec:	781b      	ldrb	r3, [r3, #0]
 800b7ee:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b7f0:	8a3b      	ldrh	r3, [r7, #16]
 800b7f2:	021b      	lsls	r3, r3, #8
 800b7f4:	b21a      	sxth	r2, r3
 800b7f6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b7fa:	4313      	orrs	r3, r2
 800b7fc:	b21b      	sxth	r3, r3
 800b7fe:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b800:	89fb      	ldrh	r3, [r7, #14]
}
 800b802:	4618      	mov	r0, r3
 800b804:	371c      	adds	r7, #28
 800b806:	46bd      	mov	sp, r7
 800b808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80c:	4770      	bx	lr
	...

0800b810 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b810:	b580      	push	{r7, lr}
 800b812:	b084      	sub	sp, #16
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
 800b818:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b81a:	2300      	movs	r3, #0
 800b81c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b81e:	683b      	ldr	r3, [r7, #0]
 800b820:	781b      	ldrb	r3, [r3, #0]
 800b822:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b826:	2b40      	cmp	r3, #64	@ 0x40
 800b828:	d005      	beq.n	800b836 <USBD_StdDevReq+0x26>
 800b82a:	2b40      	cmp	r3, #64	@ 0x40
 800b82c:	d857      	bhi.n	800b8de <USBD_StdDevReq+0xce>
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d00f      	beq.n	800b852 <USBD_StdDevReq+0x42>
 800b832:	2b20      	cmp	r3, #32
 800b834:	d153      	bne.n	800b8de <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	32ae      	adds	r2, #174	@ 0xae
 800b840:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b844:	689b      	ldr	r3, [r3, #8]
 800b846:	6839      	ldr	r1, [r7, #0]
 800b848:	6878      	ldr	r0, [r7, #4]
 800b84a:	4798      	blx	r3
 800b84c:	4603      	mov	r3, r0
 800b84e:	73fb      	strb	r3, [r7, #15]
      break;
 800b850:	e04a      	b.n	800b8e8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b852:	683b      	ldr	r3, [r7, #0]
 800b854:	785b      	ldrb	r3, [r3, #1]
 800b856:	2b09      	cmp	r3, #9
 800b858:	d83b      	bhi.n	800b8d2 <USBD_StdDevReq+0xc2>
 800b85a:	a201      	add	r2, pc, #4	@ (adr r2, 800b860 <USBD_StdDevReq+0x50>)
 800b85c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b860:	0800b8b5 	.word	0x0800b8b5
 800b864:	0800b8c9 	.word	0x0800b8c9
 800b868:	0800b8d3 	.word	0x0800b8d3
 800b86c:	0800b8bf 	.word	0x0800b8bf
 800b870:	0800b8d3 	.word	0x0800b8d3
 800b874:	0800b893 	.word	0x0800b893
 800b878:	0800b889 	.word	0x0800b889
 800b87c:	0800b8d3 	.word	0x0800b8d3
 800b880:	0800b8ab 	.word	0x0800b8ab
 800b884:	0800b89d 	.word	0x0800b89d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b888:	6839      	ldr	r1, [r7, #0]
 800b88a:	6878      	ldr	r0, [r7, #4]
 800b88c:	f000 fa3c 	bl	800bd08 <USBD_GetDescriptor>
          break;
 800b890:	e024      	b.n	800b8dc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b892:	6839      	ldr	r1, [r7, #0]
 800b894:	6878      	ldr	r0, [r7, #4]
 800b896:	f000 fba1 	bl	800bfdc <USBD_SetAddress>
          break;
 800b89a:	e01f      	b.n	800b8dc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b89c:	6839      	ldr	r1, [r7, #0]
 800b89e:	6878      	ldr	r0, [r7, #4]
 800b8a0:	f000 fbe0 	bl	800c064 <USBD_SetConfig>
 800b8a4:	4603      	mov	r3, r0
 800b8a6:	73fb      	strb	r3, [r7, #15]
          break;
 800b8a8:	e018      	b.n	800b8dc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b8aa:	6839      	ldr	r1, [r7, #0]
 800b8ac:	6878      	ldr	r0, [r7, #4]
 800b8ae:	f000 fc83 	bl	800c1b8 <USBD_GetConfig>
          break;
 800b8b2:	e013      	b.n	800b8dc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b8b4:	6839      	ldr	r1, [r7, #0]
 800b8b6:	6878      	ldr	r0, [r7, #4]
 800b8b8:	f000 fcb4 	bl	800c224 <USBD_GetStatus>
          break;
 800b8bc:	e00e      	b.n	800b8dc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b8be:	6839      	ldr	r1, [r7, #0]
 800b8c0:	6878      	ldr	r0, [r7, #4]
 800b8c2:	f000 fce3 	bl	800c28c <USBD_SetFeature>
          break;
 800b8c6:	e009      	b.n	800b8dc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b8c8:	6839      	ldr	r1, [r7, #0]
 800b8ca:	6878      	ldr	r0, [r7, #4]
 800b8cc:	f000 fd07 	bl	800c2de <USBD_ClrFeature>
          break;
 800b8d0:	e004      	b.n	800b8dc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b8d2:	6839      	ldr	r1, [r7, #0]
 800b8d4:	6878      	ldr	r0, [r7, #4]
 800b8d6:	f000 fd5e 	bl	800c396 <USBD_CtlError>
          break;
 800b8da:	bf00      	nop
      }
      break;
 800b8dc:	e004      	b.n	800b8e8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b8de:	6839      	ldr	r1, [r7, #0]
 800b8e0:	6878      	ldr	r0, [r7, #4]
 800b8e2:	f000 fd58 	bl	800c396 <USBD_CtlError>
      break;
 800b8e6:	bf00      	nop
  }

  return ret;
 800b8e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	3710      	adds	r7, #16
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	bd80      	pop	{r7, pc}
 800b8f2:	bf00      	nop

0800b8f4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	b084      	sub	sp, #16
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	6078      	str	r0, [r7, #4]
 800b8fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b8fe:	2300      	movs	r3, #0
 800b900:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b902:	683b      	ldr	r3, [r7, #0]
 800b904:	781b      	ldrb	r3, [r3, #0]
 800b906:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b90a:	2b40      	cmp	r3, #64	@ 0x40
 800b90c:	d005      	beq.n	800b91a <USBD_StdItfReq+0x26>
 800b90e:	2b40      	cmp	r3, #64	@ 0x40
 800b910:	d852      	bhi.n	800b9b8 <USBD_StdItfReq+0xc4>
 800b912:	2b00      	cmp	r3, #0
 800b914:	d001      	beq.n	800b91a <USBD_StdItfReq+0x26>
 800b916:	2b20      	cmp	r3, #32
 800b918:	d14e      	bne.n	800b9b8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b920:	b2db      	uxtb	r3, r3
 800b922:	3b01      	subs	r3, #1
 800b924:	2b02      	cmp	r3, #2
 800b926:	d840      	bhi.n	800b9aa <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b928:	683b      	ldr	r3, [r7, #0]
 800b92a:	889b      	ldrh	r3, [r3, #4]
 800b92c:	b2db      	uxtb	r3, r3
 800b92e:	2b01      	cmp	r3, #1
 800b930:	d836      	bhi.n	800b9a0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b932:	683b      	ldr	r3, [r7, #0]
 800b934:	889b      	ldrh	r3, [r3, #4]
 800b936:	b2db      	uxtb	r3, r3
 800b938:	4619      	mov	r1, r3
 800b93a:	6878      	ldr	r0, [r7, #4]
 800b93c:	f7ff fedb 	bl	800b6f6 <USBD_CoreFindIF>
 800b940:	4603      	mov	r3, r0
 800b942:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b944:	7bbb      	ldrb	r3, [r7, #14]
 800b946:	2bff      	cmp	r3, #255	@ 0xff
 800b948:	d01d      	beq.n	800b986 <USBD_StdItfReq+0x92>
 800b94a:	7bbb      	ldrb	r3, [r7, #14]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d11a      	bne.n	800b986 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b950:	7bba      	ldrb	r2, [r7, #14]
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	32ae      	adds	r2, #174	@ 0xae
 800b956:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b95a:	689b      	ldr	r3, [r3, #8]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d00f      	beq.n	800b980 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b960:	7bba      	ldrb	r2, [r7, #14]
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b968:	7bba      	ldrb	r2, [r7, #14]
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	32ae      	adds	r2, #174	@ 0xae
 800b96e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b972:	689b      	ldr	r3, [r3, #8]
 800b974:	6839      	ldr	r1, [r7, #0]
 800b976:	6878      	ldr	r0, [r7, #4]
 800b978:	4798      	blx	r3
 800b97a:	4603      	mov	r3, r0
 800b97c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b97e:	e004      	b.n	800b98a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b980:	2303      	movs	r3, #3
 800b982:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b984:	e001      	b.n	800b98a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b986:	2303      	movs	r3, #3
 800b988:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b98a:	683b      	ldr	r3, [r7, #0]
 800b98c:	88db      	ldrh	r3, [r3, #6]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d110      	bne.n	800b9b4 <USBD_StdItfReq+0xc0>
 800b992:	7bfb      	ldrb	r3, [r7, #15]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d10d      	bne.n	800b9b4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b998:	6878      	ldr	r0, [r7, #4]
 800b99a:	f000 fdd3 	bl	800c544 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b99e:	e009      	b.n	800b9b4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b9a0:	6839      	ldr	r1, [r7, #0]
 800b9a2:	6878      	ldr	r0, [r7, #4]
 800b9a4:	f000 fcf7 	bl	800c396 <USBD_CtlError>
          break;
 800b9a8:	e004      	b.n	800b9b4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b9aa:	6839      	ldr	r1, [r7, #0]
 800b9ac:	6878      	ldr	r0, [r7, #4]
 800b9ae:	f000 fcf2 	bl	800c396 <USBD_CtlError>
          break;
 800b9b2:	e000      	b.n	800b9b6 <USBD_StdItfReq+0xc2>
          break;
 800b9b4:	bf00      	nop
      }
      break;
 800b9b6:	e004      	b.n	800b9c2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b9b8:	6839      	ldr	r1, [r7, #0]
 800b9ba:	6878      	ldr	r0, [r7, #4]
 800b9bc:	f000 fceb 	bl	800c396 <USBD_CtlError>
      break;
 800b9c0:	bf00      	nop
  }

  return ret;
 800b9c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	3710      	adds	r7, #16
 800b9c8:	46bd      	mov	sp, r7
 800b9ca:	bd80      	pop	{r7, pc}

0800b9cc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b9cc:	b580      	push	{r7, lr}
 800b9ce:	b084      	sub	sp, #16
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	6078      	str	r0, [r7, #4]
 800b9d4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b9da:	683b      	ldr	r3, [r7, #0]
 800b9dc:	889b      	ldrh	r3, [r3, #4]
 800b9de:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b9e0:	683b      	ldr	r3, [r7, #0]
 800b9e2:	781b      	ldrb	r3, [r3, #0]
 800b9e4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b9e8:	2b40      	cmp	r3, #64	@ 0x40
 800b9ea:	d007      	beq.n	800b9fc <USBD_StdEPReq+0x30>
 800b9ec:	2b40      	cmp	r3, #64	@ 0x40
 800b9ee:	f200 817f 	bhi.w	800bcf0 <USBD_StdEPReq+0x324>
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d02a      	beq.n	800ba4c <USBD_StdEPReq+0x80>
 800b9f6:	2b20      	cmp	r3, #32
 800b9f8:	f040 817a 	bne.w	800bcf0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b9fc:	7bbb      	ldrb	r3, [r7, #14]
 800b9fe:	4619      	mov	r1, r3
 800ba00:	6878      	ldr	r0, [r7, #4]
 800ba02:	f7ff fe85 	bl	800b710 <USBD_CoreFindEP>
 800ba06:	4603      	mov	r3, r0
 800ba08:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ba0a:	7b7b      	ldrb	r3, [r7, #13]
 800ba0c:	2bff      	cmp	r3, #255	@ 0xff
 800ba0e:	f000 8174 	beq.w	800bcfa <USBD_StdEPReq+0x32e>
 800ba12:	7b7b      	ldrb	r3, [r7, #13]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	f040 8170 	bne.w	800bcfa <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800ba1a:	7b7a      	ldrb	r2, [r7, #13]
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800ba22:	7b7a      	ldrb	r2, [r7, #13]
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	32ae      	adds	r2, #174	@ 0xae
 800ba28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba2c:	689b      	ldr	r3, [r3, #8]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	f000 8163 	beq.w	800bcfa <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800ba34:	7b7a      	ldrb	r2, [r7, #13]
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	32ae      	adds	r2, #174	@ 0xae
 800ba3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba3e:	689b      	ldr	r3, [r3, #8]
 800ba40:	6839      	ldr	r1, [r7, #0]
 800ba42:	6878      	ldr	r0, [r7, #4]
 800ba44:	4798      	blx	r3
 800ba46:	4603      	mov	r3, r0
 800ba48:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800ba4a:	e156      	b.n	800bcfa <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ba4c:	683b      	ldr	r3, [r7, #0]
 800ba4e:	785b      	ldrb	r3, [r3, #1]
 800ba50:	2b03      	cmp	r3, #3
 800ba52:	d008      	beq.n	800ba66 <USBD_StdEPReq+0x9a>
 800ba54:	2b03      	cmp	r3, #3
 800ba56:	f300 8145 	bgt.w	800bce4 <USBD_StdEPReq+0x318>
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	f000 809b 	beq.w	800bb96 <USBD_StdEPReq+0x1ca>
 800ba60:	2b01      	cmp	r3, #1
 800ba62:	d03c      	beq.n	800bade <USBD_StdEPReq+0x112>
 800ba64:	e13e      	b.n	800bce4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba6c:	b2db      	uxtb	r3, r3
 800ba6e:	2b02      	cmp	r3, #2
 800ba70:	d002      	beq.n	800ba78 <USBD_StdEPReq+0xac>
 800ba72:	2b03      	cmp	r3, #3
 800ba74:	d016      	beq.n	800baa4 <USBD_StdEPReq+0xd8>
 800ba76:	e02c      	b.n	800bad2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ba78:	7bbb      	ldrb	r3, [r7, #14]
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d00d      	beq.n	800ba9a <USBD_StdEPReq+0xce>
 800ba7e:	7bbb      	ldrb	r3, [r7, #14]
 800ba80:	2b80      	cmp	r3, #128	@ 0x80
 800ba82:	d00a      	beq.n	800ba9a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ba84:	7bbb      	ldrb	r3, [r7, #14]
 800ba86:	4619      	mov	r1, r3
 800ba88:	6878      	ldr	r0, [r7, #4]
 800ba8a:	f001 f961 	bl	800cd50 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ba8e:	2180      	movs	r1, #128	@ 0x80
 800ba90:	6878      	ldr	r0, [r7, #4]
 800ba92:	f001 f95d 	bl	800cd50 <USBD_LL_StallEP>
 800ba96:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ba98:	e020      	b.n	800badc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800ba9a:	6839      	ldr	r1, [r7, #0]
 800ba9c:	6878      	ldr	r0, [r7, #4]
 800ba9e:	f000 fc7a 	bl	800c396 <USBD_CtlError>
              break;
 800baa2:	e01b      	b.n	800badc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800baa4:	683b      	ldr	r3, [r7, #0]
 800baa6:	885b      	ldrh	r3, [r3, #2]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d10e      	bne.n	800baca <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800baac:	7bbb      	ldrb	r3, [r7, #14]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d00b      	beq.n	800baca <USBD_StdEPReq+0xfe>
 800bab2:	7bbb      	ldrb	r3, [r7, #14]
 800bab4:	2b80      	cmp	r3, #128	@ 0x80
 800bab6:	d008      	beq.n	800baca <USBD_StdEPReq+0xfe>
 800bab8:	683b      	ldr	r3, [r7, #0]
 800baba:	88db      	ldrh	r3, [r3, #6]
 800babc:	2b00      	cmp	r3, #0
 800babe:	d104      	bne.n	800baca <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800bac0:	7bbb      	ldrb	r3, [r7, #14]
 800bac2:	4619      	mov	r1, r3
 800bac4:	6878      	ldr	r0, [r7, #4]
 800bac6:	f001 f943 	bl	800cd50 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800baca:	6878      	ldr	r0, [r7, #4]
 800bacc:	f000 fd3a 	bl	800c544 <USBD_CtlSendStatus>

              break;
 800bad0:	e004      	b.n	800badc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800bad2:	6839      	ldr	r1, [r7, #0]
 800bad4:	6878      	ldr	r0, [r7, #4]
 800bad6:	f000 fc5e 	bl	800c396 <USBD_CtlError>
              break;
 800bada:	bf00      	nop
          }
          break;
 800badc:	e107      	b.n	800bcee <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bae4:	b2db      	uxtb	r3, r3
 800bae6:	2b02      	cmp	r3, #2
 800bae8:	d002      	beq.n	800baf0 <USBD_StdEPReq+0x124>
 800baea:	2b03      	cmp	r3, #3
 800baec:	d016      	beq.n	800bb1c <USBD_StdEPReq+0x150>
 800baee:	e04b      	b.n	800bb88 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800baf0:	7bbb      	ldrb	r3, [r7, #14]
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d00d      	beq.n	800bb12 <USBD_StdEPReq+0x146>
 800baf6:	7bbb      	ldrb	r3, [r7, #14]
 800baf8:	2b80      	cmp	r3, #128	@ 0x80
 800bafa:	d00a      	beq.n	800bb12 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bafc:	7bbb      	ldrb	r3, [r7, #14]
 800bafe:	4619      	mov	r1, r3
 800bb00:	6878      	ldr	r0, [r7, #4]
 800bb02:	f001 f925 	bl	800cd50 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bb06:	2180      	movs	r1, #128	@ 0x80
 800bb08:	6878      	ldr	r0, [r7, #4]
 800bb0a:	f001 f921 	bl	800cd50 <USBD_LL_StallEP>
 800bb0e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bb10:	e040      	b.n	800bb94 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800bb12:	6839      	ldr	r1, [r7, #0]
 800bb14:	6878      	ldr	r0, [r7, #4]
 800bb16:	f000 fc3e 	bl	800c396 <USBD_CtlError>
              break;
 800bb1a:	e03b      	b.n	800bb94 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bb1c:	683b      	ldr	r3, [r7, #0]
 800bb1e:	885b      	ldrh	r3, [r3, #2]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d136      	bne.n	800bb92 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800bb24:	7bbb      	ldrb	r3, [r7, #14]
 800bb26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d004      	beq.n	800bb38 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800bb2e:	7bbb      	ldrb	r3, [r7, #14]
 800bb30:	4619      	mov	r1, r3
 800bb32:	6878      	ldr	r0, [r7, #4]
 800bb34:	f001 f92b 	bl	800cd8e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800bb38:	6878      	ldr	r0, [r7, #4]
 800bb3a:	f000 fd03 	bl	800c544 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800bb3e:	7bbb      	ldrb	r3, [r7, #14]
 800bb40:	4619      	mov	r1, r3
 800bb42:	6878      	ldr	r0, [r7, #4]
 800bb44:	f7ff fde4 	bl	800b710 <USBD_CoreFindEP>
 800bb48:	4603      	mov	r3, r0
 800bb4a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bb4c:	7b7b      	ldrb	r3, [r7, #13]
 800bb4e:	2bff      	cmp	r3, #255	@ 0xff
 800bb50:	d01f      	beq.n	800bb92 <USBD_StdEPReq+0x1c6>
 800bb52:	7b7b      	ldrb	r3, [r7, #13]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d11c      	bne.n	800bb92 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800bb58:	7b7a      	ldrb	r2, [r7, #13]
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800bb60:	7b7a      	ldrb	r2, [r7, #13]
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	32ae      	adds	r2, #174	@ 0xae
 800bb66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb6a:	689b      	ldr	r3, [r3, #8]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d010      	beq.n	800bb92 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bb70:	7b7a      	ldrb	r2, [r7, #13]
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	32ae      	adds	r2, #174	@ 0xae
 800bb76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb7a:	689b      	ldr	r3, [r3, #8]
 800bb7c:	6839      	ldr	r1, [r7, #0]
 800bb7e:	6878      	ldr	r0, [r7, #4]
 800bb80:	4798      	blx	r3
 800bb82:	4603      	mov	r3, r0
 800bb84:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800bb86:	e004      	b.n	800bb92 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800bb88:	6839      	ldr	r1, [r7, #0]
 800bb8a:	6878      	ldr	r0, [r7, #4]
 800bb8c:	f000 fc03 	bl	800c396 <USBD_CtlError>
              break;
 800bb90:	e000      	b.n	800bb94 <USBD_StdEPReq+0x1c8>
              break;
 800bb92:	bf00      	nop
          }
          break;
 800bb94:	e0ab      	b.n	800bcee <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb9c:	b2db      	uxtb	r3, r3
 800bb9e:	2b02      	cmp	r3, #2
 800bba0:	d002      	beq.n	800bba8 <USBD_StdEPReq+0x1dc>
 800bba2:	2b03      	cmp	r3, #3
 800bba4:	d032      	beq.n	800bc0c <USBD_StdEPReq+0x240>
 800bba6:	e097      	b.n	800bcd8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bba8:	7bbb      	ldrb	r3, [r7, #14]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d007      	beq.n	800bbbe <USBD_StdEPReq+0x1f2>
 800bbae:	7bbb      	ldrb	r3, [r7, #14]
 800bbb0:	2b80      	cmp	r3, #128	@ 0x80
 800bbb2:	d004      	beq.n	800bbbe <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800bbb4:	6839      	ldr	r1, [r7, #0]
 800bbb6:	6878      	ldr	r0, [r7, #4]
 800bbb8:	f000 fbed 	bl	800c396 <USBD_CtlError>
                break;
 800bbbc:	e091      	b.n	800bce2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bbbe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	da0b      	bge.n	800bbde <USBD_StdEPReq+0x212>
 800bbc6:	7bbb      	ldrb	r3, [r7, #14]
 800bbc8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bbcc:	4613      	mov	r3, r2
 800bbce:	009b      	lsls	r3, r3, #2
 800bbd0:	4413      	add	r3, r2
 800bbd2:	009b      	lsls	r3, r3, #2
 800bbd4:	3310      	adds	r3, #16
 800bbd6:	687a      	ldr	r2, [r7, #4]
 800bbd8:	4413      	add	r3, r2
 800bbda:	3304      	adds	r3, #4
 800bbdc:	e00b      	b.n	800bbf6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bbde:	7bbb      	ldrb	r3, [r7, #14]
 800bbe0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bbe4:	4613      	mov	r3, r2
 800bbe6:	009b      	lsls	r3, r3, #2
 800bbe8:	4413      	add	r3, r2
 800bbea:	009b      	lsls	r3, r3, #2
 800bbec:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bbf0:	687a      	ldr	r2, [r7, #4]
 800bbf2:	4413      	add	r3, r2
 800bbf4:	3304      	adds	r3, #4
 800bbf6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800bbf8:	68bb      	ldr	r3, [r7, #8]
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bbfe:	68bb      	ldr	r3, [r7, #8]
 800bc00:	2202      	movs	r2, #2
 800bc02:	4619      	mov	r1, r3
 800bc04:	6878      	ldr	r0, [r7, #4]
 800bc06:	f000 fc43 	bl	800c490 <USBD_CtlSendData>
              break;
 800bc0a:	e06a      	b.n	800bce2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800bc0c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	da11      	bge.n	800bc38 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bc14:	7bbb      	ldrb	r3, [r7, #14]
 800bc16:	f003 020f 	and.w	r2, r3, #15
 800bc1a:	6879      	ldr	r1, [r7, #4]
 800bc1c:	4613      	mov	r3, r2
 800bc1e:	009b      	lsls	r3, r3, #2
 800bc20:	4413      	add	r3, r2
 800bc22:	009b      	lsls	r3, r3, #2
 800bc24:	440b      	add	r3, r1
 800bc26:	3324      	adds	r3, #36	@ 0x24
 800bc28:	881b      	ldrh	r3, [r3, #0]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d117      	bne.n	800bc5e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bc2e:	6839      	ldr	r1, [r7, #0]
 800bc30:	6878      	ldr	r0, [r7, #4]
 800bc32:	f000 fbb0 	bl	800c396 <USBD_CtlError>
                  break;
 800bc36:	e054      	b.n	800bce2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bc38:	7bbb      	ldrb	r3, [r7, #14]
 800bc3a:	f003 020f 	and.w	r2, r3, #15
 800bc3e:	6879      	ldr	r1, [r7, #4]
 800bc40:	4613      	mov	r3, r2
 800bc42:	009b      	lsls	r3, r3, #2
 800bc44:	4413      	add	r3, r2
 800bc46:	009b      	lsls	r3, r3, #2
 800bc48:	440b      	add	r3, r1
 800bc4a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800bc4e:	881b      	ldrh	r3, [r3, #0]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d104      	bne.n	800bc5e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bc54:	6839      	ldr	r1, [r7, #0]
 800bc56:	6878      	ldr	r0, [r7, #4]
 800bc58:	f000 fb9d 	bl	800c396 <USBD_CtlError>
                  break;
 800bc5c:	e041      	b.n	800bce2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bc5e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	da0b      	bge.n	800bc7e <USBD_StdEPReq+0x2b2>
 800bc66:	7bbb      	ldrb	r3, [r7, #14]
 800bc68:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bc6c:	4613      	mov	r3, r2
 800bc6e:	009b      	lsls	r3, r3, #2
 800bc70:	4413      	add	r3, r2
 800bc72:	009b      	lsls	r3, r3, #2
 800bc74:	3310      	adds	r3, #16
 800bc76:	687a      	ldr	r2, [r7, #4]
 800bc78:	4413      	add	r3, r2
 800bc7a:	3304      	adds	r3, #4
 800bc7c:	e00b      	b.n	800bc96 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bc7e:	7bbb      	ldrb	r3, [r7, #14]
 800bc80:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bc84:	4613      	mov	r3, r2
 800bc86:	009b      	lsls	r3, r3, #2
 800bc88:	4413      	add	r3, r2
 800bc8a:	009b      	lsls	r3, r3, #2
 800bc8c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bc90:	687a      	ldr	r2, [r7, #4]
 800bc92:	4413      	add	r3, r2
 800bc94:	3304      	adds	r3, #4
 800bc96:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bc98:	7bbb      	ldrb	r3, [r7, #14]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d002      	beq.n	800bca4 <USBD_StdEPReq+0x2d8>
 800bc9e:	7bbb      	ldrb	r3, [r7, #14]
 800bca0:	2b80      	cmp	r3, #128	@ 0x80
 800bca2:	d103      	bne.n	800bcac <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800bca4:	68bb      	ldr	r3, [r7, #8]
 800bca6:	2200      	movs	r2, #0
 800bca8:	601a      	str	r2, [r3, #0]
 800bcaa:	e00e      	b.n	800bcca <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800bcac:	7bbb      	ldrb	r3, [r7, #14]
 800bcae:	4619      	mov	r1, r3
 800bcb0:	6878      	ldr	r0, [r7, #4]
 800bcb2:	f001 f88b 	bl	800cdcc <USBD_LL_IsStallEP>
 800bcb6:	4603      	mov	r3, r0
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d003      	beq.n	800bcc4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800bcbc:	68bb      	ldr	r3, [r7, #8]
 800bcbe:	2201      	movs	r2, #1
 800bcc0:	601a      	str	r2, [r3, #0]
 800bcc2:	e002      	b.n	800bcca <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800bcc4:	68bb      	ldr	r3, [r7, #8]
 800bcc6:	2200      	movs	r2, #0
 800bcc8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bcca:	68bb      	ldr	r3, [r7, #8]
 800bccc:	2202      	movs	r2, #2
 800bcce:	4619      	mov	r1, r3
 800bcd0:	6878      	ldr	r0, [r7, #4]
 800bcd2:	f000 fbdd 	bl	800c490 <USBD_CtlSendData>
              break;
 800bcd6:	e004      	b.n	800bce2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800bcd8:	6839      	ldr	r1, [r7, #0]
 800bcda:	6878      	ldr	r0, [r7, #4]
 800bcdc:	f000 fb5b 	bl	800c396 <USBD_CtlError>
              break;
 800bce0:	bf00      	nop
          }
          break;
 800bce2:	e004      	b.n	800bcee <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800bce4:	6839      	ldr	r1, [r7, #0]
 800bce6:	6878      	ldr	r0, [r7, #4]
 800bce8:	f000 fb55 	bl	800c396 <USBD_CtlError>
          break;
 800bcec:	bf00      	nop
      }
      break;
 800bcee:	e005      	b.n	800bcfc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800bcf0:	6839      	ldr	r1, [r7, #0]
 800bcf2:	6878      	ldr	r0, [r7, #4]
 800bcf4:	f000 fb4f 	bl	800c396 <USBD_CtlError>
      break;
 800bcf8:	e000      	b.n	800bcfc <USBD_StdEPReq+0x330>
      break;
 800bcfa:	bf00      	nop
  }

  return ret;
 800bcfc:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcfe:	4618      	mov	r0, r3
 800bd00:	3710      	adds	r7, #16
 800bd02:	46bd      	mov	sp, r7
 800bd04:	bd80      	pop	{r7, pc}
	...

0800bd08 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b084      	sub	sp, #16
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
 800bd10:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bd12:	2300      	movs	r3, #0
 800bd14:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bd16:	2300      	movs	r3, #0
 800bd18:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bd1e:	683b      	ldr	r3, [r7, #0]
 800bd20:	885b      	ldrh	r3, [r3, #2]
 800bd22:	0a1b      	lsrs	r3, r3, #8
 800bd24:	b29b      	uxth	r3, r3
 800bd26:	3b01      	subs	r3, #1
 800bd28:	2b06      	cmp	r3, #6
 800bd2a:	f200 8128 	bhi.w	800bf7e <USBD_GetDescriptor+0x276>
 800bd2e:	a201      	add	r2, pc, #4	@ (adr r2, 800bd34 <USBD_GetDescriptor+0x2c>)
 800bd30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd34:	0800bd51 	.word	0x0800bd51
 800bd38:	0800bd69 	.word	0x0800bd69
 800bd3c:	0800bda9 	.word	0x0800bda9
 800bd40:	0800bf7f 	.word	0x0800bf7f
 800bd44:	0800bf7f 	.word	0x0800bf7f
 800bd48:	0800bf1f 	.word	0x0800bf1f
 800bd4c:	0800bf4b 	.word	0x0800bf4b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	687a      	ldr	r2, [r7, #4]
 800bd5a:	7c12      	ldrb	r2, [r2, #16]
 800bd5c:	f107 0108 	add.w	r1, r7, #8
 800bd60:	4610      	mov	r0, r2
 800bd62:	4798      	blx	r3
 800bd64:	60f8      	str	r0, [r7, #12]
      break;
 800bd66:	e112      	b.n	800bf8e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	7c1b      	ldrb	r3, [r3, #16]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d10d      	bne.n	800bd8c <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd78:	f107 0208 	add.w	r2, r7, #8
 800bd7c:	4610      	mov	r0, r2
 800bd7e:	4798      	blx	r3
 800bd80:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	3301      	adds	r3, #1
 800bd86:	2202      	movs	r2, #2
 800bd88:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800bd8a:	e100      	b.n	800bf8e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd94:	f107 0208 	add.w	r2, r7, #8
 800bd98:	4610      	mov	r0, r2
 800bd9a:	4798      	blx	r3
 800bd9c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	3301      	adds	r3, #1
 800bda2:	2202      	movs	r2, #2
 800bda4:	701a      	strb	r2, [r3, #0]
      break;
 800bda6:	e0f2      	b.n	800bf8e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bda8:	683b      	ldr	r3, [r7, #0]
 800bdaa:	885b      	ldrh	r3, [r3, #2]
 800bdac:	b2db      	uxtb	r3, r3
 800bdae:	2b05      	cmp	r3, #5
 800bdb0:	f200 80ac 	bhi.w	800bf0c <USBD_GetDescriptor+0x204>
 800bdb4:	a201      	add	r2, pc, #4	@ (adr r2, 800bdbc <USBD_GetDescriptor+0xb4>)
 800bdb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdba:	bf00      	nop
 800bdbc:	0800bdd5 	.word	0x0800bdd5
 800bdc0:	0800be09 	.word	0x0800be09
 800bdc4:	0800be3d 	.word	0x0800be3d
 800bdc8:	0800be71 	.word	0x0800be71
 800bdcc:	0800bea5 	.word	0x0800bea5
 800bdd0:	0800bed9 	.word	0x0800bed9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bdda:	685b      	ldr	r3, [r3, #4]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d00b      	beq.n	800bdf8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bde6:	685b      	ldr	r3, [r3, #4]
 800bde8:	687a      	ldr	r2, [r7, #4]
 800bdea:	7c12      	ldrb	r2, [r2, #16]
 800bdec:	f107 0108 	add.w	r1, r7, #8
 800bdf0:	4610      	mov	r0, r2
 800bdf2:	4798      	blx	r3
 800bdf4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bdf6:	e091      	b.n	800bf1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bdf8:	6839      	ldr	r1, [r7, #0]
 800bdfa:	6878      	ldr	r0, [r7, #4]
 800bdfc:	f000 facb 	bl	800c396 <USBD_CtlError>
            err++;
 800be00:	7afb      	ldrb	r3, [r7, #11]
 800be02:	3301      	adds	r3, #1
 800be04:	72fb      	strb	r3, [r7, #11]
          break;
 800be06:	e089      	b.n	800bf1c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be0e:	689b      	ldr	r3, [r3, #8]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d00b      	beq.n	800be2c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be1a:	689b      	ldr	r3, [r3, #8]
 800be1c:	687a      	ldr	r2, [r7, #4]
 800be1e:	7c12      	ldrb	r2, [r2, #16]
 800be20:	f107 0108 	add.w	r1, r7, #8
 800be24:	4610      	mov	r0, r2
 800be26:	4798      	blx	r3
 800be28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800be2a:	e077      	b.n	800bf1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800be2c:	6839      	ldr	r1, [r7, #0]
 800be2e:	6878      	ldr	r0, [r7, #4]
 800be30:	f000 fab1 	bl	800c396 <USBD_CtlError>
            err++;
 800be34:	7afb      	ldrb	r3, [r7, #11]
 800be36:	3301      	adds	r3, #1
 800be38:	72fb      	strb	r3, [r7, #11]
          break;
 800be3a:	e06f      	b.n	800bf1c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be42:	68db      	ldr	r3, [r3, #12]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d00b      	beq.n	800be60 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be4e:	68db      	ldr	r3, [r3, #12]
 800be50:	687a      	ldr	r2, [r7, #4]
 800be52:	7c12      	ldrb	r2, [r2, #16]
 800be54:	f107 0108 	add.w	r1, r7, #8
 800be58:	4610      	mov	r0, r2
 800be5a:	4798      	blx	r3
 800be5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800be5e:	e05d      	b.n	800bf1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800be60:	6839      	ldr	r1, [r7, #0]
 800be62:	6878      	ldr	r0, [r7, #4]
 800be64:	f000 fa97 	bl	800c396 <USBD_CtlError>
            err++;
 800be68:	7afb      	ldrb	r3, [r7, #11]
 800be6a:	3301      	adds	r3, #1
 800be6c:	72fb      	strb	r3, [r7, #11]
          break;
 800be6e:	e055      	b.n	800bf1c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be76:	691b      	ldr	r3, [r3, #16]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d00b      	beq.n	800be94 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be82:	691b      	ldr	r3, [r3, #16]
 800be84:	687a      	ldr	r2, [r7, #4]
 800be86:	7c12      	ldrb	r2, [r2, #16]
 800be88:	f107 0108 	add.w	r1, r7, #8
 800be8c:	4610      	mov	r0, r2
 800be8e:	4798      	blx	r3
 800be90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800be92:	e043      	b.n	800bf1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800be94:	6839      	ldr	r1, [r7, #0]
 800be96:	6878      	ldr	r0, [r7, #4]
 800be98:	f000 fa7d 	bl	800c396 <USBD_CtlError>
            err++;
 800be9c:	7afb      	ldrb	r3, [r7, #11]
 800be9e:	3301      	adds	r3, #1
 800bea0:	72fb      	strb	r3, [r7, #11]
          break;
 800bea2:	e03b      	b.n	800bf1c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800beaa:	695b      	ldr	r3, [r3, #20]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d00b      	beq.n	800bec8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800beb6:	695b      	ldr	r3, [r3, #20]
 800beb8:	687a      	ldr	r2, [r7, #4]
 800beba:	7c12      	ldrb	r2, [r2, #16]
 800bebc:	f107 0108 	add.w	r1, r7, #8
 800bec0:	4610      	mov	r0, r2
 800bec2:	4798      	blx	r3
 800bec4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bec6:	e029      	b.n	800bf1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bec8:	6839      	ldr	r1, [r7, #0]
 800beca:	6878      	ldr	r0, [r7, #4]
 800becc:	f000 fa63 	bl	800c396 <USBD_CtlError>
            err++;
 800bed0:	7afb      	ldrb	r3, [r7, #11]
 800bed2:	3301      	adds	r3, #1
 800bed4:	72fb      	strb	r3, [r7, #11]
          break;
 800bed6:	e021      	b.n	800bf1c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bede:	699b      	ldr	r3, [r3, #24]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d00b      	beq.n	800befc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800beea:	699b      	ldr	r3, [r3, #24]
 800beec:	687a      	ldr	r2, [r7, #4]
 800beee:	7c12      	ldrb	r2, [r2, #16]
 800bef0:	f107 0108 	add.w	r1, r7, #8
 800bef4:	4610      	mov	r0, r2
 800bef6:	4798      	blx	r3
 800bef8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800befa:	e00f      	b.n	800bf1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800befc:	6839      	ldr	r1, [r7, #0]
 800befe:	6878      	ldr	r0, [r7, #4]
 800bf00:	f000 fa49 	bl	800c396 <USBD_CtlError>
            err++;
 800bf04:	7afb      	ldrb	r3, [r7, #11]
 800bf06:	3301      	adds	r3, #1
 800bf08:	72fb      	strb	r3, [r7, #11]
          break;
 800bf0a:	e007      	b.n	800bf1c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800bf0c:	6839      	ldr	r1, [r7, #0]
 800bf0e:	6878      	ldr	r0, [r7, #4]
 800bf10:	f000 fa41 	bl	800c396 <USBD_CtlError>
          err++;
 800bf14:	7afb      	ldrb	r3, [r7, #11]
 800bf16:	3301      	adds	r3, #1
 800bf18:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800bf1a:	bf00      	nop
      }
      break;
 800bf1c:	e037      	b.n	800bf8e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	7c1b      	ldrb	r3, [r3, #16]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d109      	bne.n	800bf3a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bf2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bf2e:	f107 0208 	add.w	r2, r7, #8
 800bf32:	4610      	mov	r0, r2
 800bf34:	4798      	blx	r3
 800bf36:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bf38:	e029      	b.n	800bf8e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800bf3a:	6839      	ldr	r1, [r7, #0]
 800bf3c:	6878      	ldr	r0, [r7, #4]
 800bf3e:	f000 fa2a 	bl	800c396 <USBD_CtlError>
        err++;
 800bf42:	7afb      	ldrb	r3, [r7, #11]
 800bf44:	3301      	adds	r3, #1
 800bf46:	72fb      	strb	r3, [r7, #11]
      break;
 800bf48:	e021      	b.n	800bf8e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	7c1b      	ldrb	r3, [r3, #16]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d10d      	bne.n	800bf6e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bf58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf5a:	f107 0208 	add.w	r2, r7, #8
 800bf5e:	4610      	mov	r0, r2
 800bf60:	4798      	blx	r3
 800bf62:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	3301      	adds	r3, #1
 800bf68:	2207      	movs	r2, #7
 800bf6a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bf6c:	e00f      	b.n	800bf8e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800bf6e:	6839      	ldr	r1, [r7, #0]
 800bf70:	6878      	ldr	r0, [r7, #4]
 800bf72:	f000 fa10 	bl	800c396 <USBD_CtlError>
        err++;
 800bf76:	7afb      	ldrb	r3, [r7, #11]
 800bf78:	3301      	adds	r3, #1
 800bf7a:	72fb      	strb	r3, [r7, #11]
      break;
 800bf7c:	e007      	b.n	800bf8e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800bf7e:	6839      	ldr	r1, [r7, #0]
 800bf80:	6878      	ldr	r0, [r7, #4]
 800bf82:	f000 fa08 	bl	800c396 <USBD_CtlError>
      err++;
 800bf86:	7afb      	ldrb	r3, [r7, #11]
 800bf88:	3301      	adds	r3, #1
 800bf8a:	72fb      	strb	r3, [r7, #11]
      break;
 800bf8c:	bf00      	nop
  }

  if (err != 0U)
 800bf8e:	7afb      	ldrb	r3, [r7, #11]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d11e      	bne.n	800bfd2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800bf94:	683b      	ldr	r3, [r7, #0]
 800bf96:	88db      	ldrh	r3, [r3, #6]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d016      	beq.n	800bfca <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800bf9c:	893b      	ldrh	r3, [r7, #8]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d00e      	beq.n	800bfc0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800bfa2:	683b      	ldr	r3, [r7, #0]
 800bfa4:	88da      	ldrh	r2, [r3, #6]
 800bfa6:	893b      	ldrh	r3, [r7, #8]
 800bfa8:	4293      	cmp	r3, r2
 800bfaa:	bf28      	it	cs
 800bfac:	4613      	movcs	r3, r2
 800bfae:	b29b      	uxth	r3, r3
 800bfb0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800bfb2:	893b      	ldrh	r3, [r7, #8]
 800bfb4:	461a      	mov	r2, r3
 800bfb6:	68f9      	ldr	r1, [r7, #12]
 800bfb8:	6878      	ldr	r0, [r7, #4]
 800bfba:	f000 fa69 	bl	800c490 <USBD_CtlSendData>
 800bfbe:	e009      	b.n	800bfd4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800bfc0:	6839      	ldr	r1, [r7, #0]
 800bfc2:	6878      	ldr	r0, [r7, #4]
 800bfc4:	f000 f9e7 	bl	800c396 <USBD_CtlError>
 800bfc8:	e004      	b.n	800bfd4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800bfca:	6878      	ldr	r0, [r7, #4]
 800bfcc:	f000 faba 	bl	800c544 <USBD_CtlSendStatus>
 800bfd0:	e000      	b.n	800bfd4 <USBD_GetDescriptor+0x2cc>
    return;
 800bfd2:	bf00      	nop
  }
}
 800bfd4:	3710      	adds	r7, #16
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	bd80      	pop	{r7, pc}
 800bfda:	bf00      	nop

0800bfdc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bfdc:	b580      	push	{r7, lr}
 800bfde:	b084      	sub	sp, #16
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	6078      	str	r0, [r7, #4]
 800bfe4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800bfe6:	683b      	ldr	r3, [r7, #0]
 800bfe8:	889b      	ldrh	r3, [r3, #4]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d131      	bne.n	800c052 <USBD_SetAddress+0x76>
 800bfee:	683b      	ldr	r3, [r7, #0]
 800bff0:	88db      	ldrh	r3, [r3, #6]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d12d      	bne.n	800c052 <USBD_SetAddress+0x76>
 800bff6:	683b      	ldr	r3, [r7, #0]
 800bff8:	885b      	ldrh	r3, [r3, #2]
 800bffa:	2b7f      	cmp	r3, #127	@ 0x7f
 800bffc:	d829      	bhi.n	800c052 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800bffe:	683b      	ldr	r3, [r7, #0]
 800c000:	885b      	ldrh	r3, [r3, #2]
 800c002:	b2db      	uxtb	r3, r3
 800c004:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c008:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c010:	b2db      	uxtb	r3, r3
 800c012:	2b03      	cmp	r3, #3
 800c014:	d104      	bne.n	800c020 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c016:	6839      	ldr	r1, [r7, #0]
 800c018:	6878      	ldr	r0, [r7, #4]
 800c01a:	f000 f9bc 	bl	800c396 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c01e:	e01d      	b.n	800c05c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	7bfa      	ldrb	r2, [r7, #15]
 800c024:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c028:	7bfb      	ldrb	r3, [r7, #15]
 800c02a:	4619      	mov	r1, r3
 800c02c:	6878      	ldr	r0, [r7, #4]
 800c02e:	f000 fef9 	bl	800ce24 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c032:	6878      	ldr	r0, [r7, #4]
 800c034:	f000 fa86 	bl	800c544 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c038:	7bfb      	ldrb	r3, [r7, #15]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d004      	beq.n	800c048 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	2202      	movs	r2, #2
 800c042:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c046:	e009      	b.n	800c05c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	2201      	movs	r2, #1
 800c04c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c050:	e004      	b.n	800c05c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c052:	6839      	ldr	r1, [r7, #0]
 800c054:	6878      	ldr	r0, [r7, #4]
 800c056:	f000 f99e 	bl	800c396 <USBD_CtlError>
  }
}
 800c05a:	bf00      	nop
 800c05c:	bf00      	nop
 800c05e:	3710      	adds	r7, #16
 800c060:	46bd      	mov	sp, r7
 800c062:	bd80      	pop	{r7, pc}

0800c064 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c064:	b580      	push	{r7, lr}
 800c066:	b084      	sub	sp, #16
 800c068:	af00      	add	r7, sp, #0
 800c06a:	6078      	str	r0, [r7, #4]
 800c06c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c06e:	2300      	movs	r3, #0
 800c070:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c072:	683b      	ldr	r3, [r7, #0]
 800c074:	885b      	ldrh	r3, [r3, #2]
 800c076:	b2da      	uxtb	r2, r3
 800c078:	4b4e      	ldr	r3, [pc, #312]	@ (800c1b4 <USBD_SetConfig+0x150>)
 800c07a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c07c:	4b4d      	ldr	r3, [pc, #308]	@ (800c1b4 <USBD_SetConfig+0x150>)
 800c07e:	781b      	ldrb	r3, [r3, #0]
 800c080:	2b01      	cmp	r3, #1
 800c082:	d905      	bls.n	800c090 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c084:	6839      	ldr	r1, [r7, #0]
 800c086:	6878      	ldr	r0, [r7, #4]
 800c088:	f000 f985 	bl	800c396 <USBD_CtlError>
    return USBD_FAIL;
 800c08c:	2303      	movs	r3, #3
 800c08e:	e08c      	b.n	800c1aa <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c096:	b2db      	uxtb	r3, r3
 800c098:	2b02      	cmp	r3, #2
 800c09a:	d002      	beq.n	800c0a2 <USBD_SetConfig+0x3e>
 800c09c:	2b03      	cmp	r3, #3
 800c09e:	d029      	beq.n	800c0f4 <USBD_SetConfig+0x90>
 800c0a0:	e075      	b.n	800c18e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c0a2:	4b44      	ldr	r3, [pc, #272]	@ (800c1b4 <USBD_SetConfig+0x150>)
 800c0a4:	781b      	ldrb	r3, [r3, #0]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d020      	beq.n	800c0ec <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c0aa:	4b42      	ldr	r3, [pc, #264]	@ (800c1b4 <USBD_SetConfig+0x150>)
 800c0ac:	781b      	ldrb	r3, [r3, #0]
 800c0ae:	461a      	mov	r2, r3
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c0b4:	4b3f      	ldr	r3, [pc, #252]	@ (800c1b4 <USBD_SetConfig+0x150>)
 800c0b6:	781b      	ldrb	r3, [r3, #0]
 800c0b8:	4619      	mov	r1, r3
 800c0ba:	6878      	ldr	r0, [r7, #4]
 800c0bc:	f7fe ffe3 	bl	800b086 <USBD_SetClassConfig>
 800c0c0:	4603      	mov	r3, r0
 800c0c2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c0c4:	7bfb      	ldrb	r3, [r7, #15]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d008      	beq.n	800c0dc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c0ca:	6839      	ldr	r1, [r7, #0]
 800c0cc:	6878      	ldr	r0, [r7, #4]
 800c0ce:	f000 f962 	bl	800c396 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	2202      	movs	r2, #2
 800c0d6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c0da:	e065      	b.n	800c1a8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c0dc:	6878      	ldr	r0, [r7, #4]
 800c0de:	f000 fa31 	bl	800c544 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	2203      	movs	r2, #3
 800c0e6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c0ea:	e05d      	b.n	800c1a8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c0ec:	6878      	ldr	r0, [r7, #4]
 800c0ee:	f000 fa29 	bl	800c544 <USBD_CtlSendStatus>
      break;
 800c0f2:	e059      	b.n	800c1a8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c0f4:	4b2f      	ldr	r3, [pc, #188]	@ (800c1b4 <USBD_SetConfig+0x150>)
 800c0f6:	781b      	ldrb	r3, [r3, #0]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d112      	bne.n	800c122 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	2202      	movs	r2, #2
 800c100:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800c104:	4b2b      	ldr	r3, [pc, #172]	@ (800c1b4 <USBD_SetConfig+0x150>)
 800c106:	781b      	ldrb	r3, [r3, #0]
 800c108:	461a      	mov	r2, r3
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c10e:	4b29      	ldr	r3, [pc, #164]	@ (800c1b4 <USBD_SetConfig+0x150>)
 800c110:	781b      	ldrb	r3, [r3, #0]
 800c112:	4619      	mov	r1, r3
 800c114:	6878      	ldr	r0, [r7, #4]
 800c116:	f7fe ffd2 	bl	800b0be <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c11a:	6878      	ldr	r0, [r7, #4]
 800c11c:	f000 fa12 	bl	800c544 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c120:	e042      	b.n	800c1a8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c122:	4b24      	ldr	r3, [pc, #144]	@ (800c1b4 <USBD_SetConfig+0x150>)
 800c124:	781b      	ldrb	r3, [r3, #0]
 800c126:	461a      	mov	r2, r3
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	685b      	ldr	r3, [r3, #4]
 800c12c:	429a      	cmp	r2, r3
 800c12e:	d02a      	beq.n	800c186 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	685b      	ldr	r3, [r3, #4]
 800c134:	b2db      	uxtb	r3, r3
 800c136:	4619      	mov	r1, r3
 800c138:	6878      	ldr	r0, [r7, #4]
 800c13a:	f7fe ffc0 	bl	800b0be <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c13e:	4b1d      	ldr	r3, [pc, #116]	@ (800c1b4 <USBD_SetConfig+0x150>)
 800c140:	781b      	ldrb	r3, [r3, #0]
 800c142:	461a      	mov	r2, r3
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c148:	4b1a      	ldr	r3, [pc, #104]	@ (800c1b4 <USBD_SetConfig+0x150>)
 800c14a:	781b      	ldrb	r3, [r3, #0]
 800c14c:	4619      	mov	r1, r3
 800c14e:	6878      	ldr	r0, [r7, #4]
 800c150:	f7fe ff99 	bl	800b086 <USBD_SetClassConfig>
 800c154:	4603      	mov	r3, r0
 800c156:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c158:	7bfb      	ldrb	r3, [r7, #15]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d00f      	beq.n	800c17e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c15e:	6839      	ldr	r1, [r7, #0]
 800c160:	6878      	ldr	r0, [r7, #4]
 800c162:	f000 f918 	bl	800c396 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	685b      	ldr	r3, [r3, #4]
 800c16a:	b2db      	uxtb	r3, r3
 800c16c:	4619      	mov	r1, r3
 800c16e:	6878      	ldr	r0, [r7, #4]
 800c170:	f7fe ffa5 	bl	800b0be <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	2202      	movs	r2, #2
 800c178:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c17c:	e014      	b.n	800c1a8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c17e:	6878      	ldr	r0, [r7, #4]
 800c180:	f000 f9e0 	bl	800c544 <USBD_CtlSendStatus>
      break;
 800c184:	e010      	b.n	800c1a8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c186:	6878      	ldr	r0, [r7, #4]
 800c188:	f000 f9dc 	bl	800c544 <USBD_CtlSendStatus>
      break;
 800c18c:	e00c      	b.n	800c1a8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c18e:	6839      	ldr	r1, [r7, #0]
 800c190:	6878      	ldr	r0, [r7, #4]
 800c192:	f000 f900 	bl	800c396 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c196:	4b07      	ldr	r3, [pc, #28]	@ (800c1b4 <USBD_SetConfig+0x150>)
 800c198:	781b      	ldrb	r3, [r3, #0]
 800c19a:	4619      	mov	r1, r3
 800c19c:	6878      	ldr	r0, [r7, #4]
 800c19e:	f7fe ff8e 	bl	800b0be <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c1a2:	2303      	movs	r3, #3
 800c1a4:	73fb      	strb	r3, [r7, #15]
      break;
 800c1a6:	bf00      	nop
  }

  return ret;
 800c1a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	3710      	adds	r7, #16
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	bd80      	pop	{r7, pc}
 800c1b2:	bf00      	nop
 800c1b4:	20000700 	.word	0x20000700

0800c1b8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	b082      	sub	sp, #8
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	6078      	str	r0, [r7, #4]
 800c1c0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c1c2:	683b      	ldr	r3, [r7, #0]
 800c1c4:	88db      	ldrh	r3, [r3, #6]
 800c1c6:	2b01      	cmp	r3, #1
 800c1c8:	d004      	beq.n	800c1d4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c1ca:	6839      	ldr	r1, [r7, #0]
 800c1cc:	6878      	ldr	r0, [r7, #4]
 800c1ce:	f000 f8e2 	bl	800c396 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c1d2:	e023      	b.n	800c21c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c1da:	b2db      	uxtb	r3, r3
 800c1dc:	2b02      	cmp	r3, #2
 800c1de:	dc02      	bgt.n	800c1e6 <USBD_GetConfig+0x2e>
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	dc03      	bgt.n	800c1ec <USBD_GetConfig+0x34>
 800c1e4:	e015      	b.n	800c212 <USBD_GetConfig+0x5a>
 800c1e6:	2b03      	cmp	r3, #3
 800c1e8:	d00b      	beq.n	800c202 <USBD_GetConfig+0x4a>
 800c1ea:	e012      	b.n	800c212 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	3308      	adds	r3, #8
 800c1f6:	2201      	movs	r2, #1
 800c1f8:	4619      	mov	r1, r3
 800c1fa:	6878      	ldr	r0, [r7, #4]
 800c1fc:	f000 f948 	bl	800c490 <USBD_CtlSendData>
        break;
 800c200:	e00c      	b.n	800c21c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	3304      	adds	r3, #4
 800c206:	2201      	movs	r2, #1
 800c208:	4619      	mov	r1, r3
 800c20a:	6878      	ldr	r0, [r7, #4]
 800c20c:	f000 f940 	bl	800c490 <USBD_CtlSendData>
        break;
 800c210:	e004      	b.n	800c21c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c212:	6839      	ldr	r1, [r7, #0]
 800c214:	6878      	ldr	r0, [r7, #4]
 800c216:	f000 f8be 	bl	800c396 <USBD_CtlError>
        break;
 800c21a:	bf00      	nop
}
 800c21c:	bf00      	nop
 800c21e:	3708      	adds	r7, #8
 800c220:	46bd      	mov	sp, r7
 800c222:	bd80      	pop	{r7, pc}

0800c224 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c224:	b580      	push	{r7, lr}
 800c226:	b082      	sub	sp, #8
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
 800c22c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c234:	b2db      	uxtb	r3, r3
 800c236:	3b01      	subs	r3, #1
 800c238:	2b02      	cmp	r3, #2
 800c23a:	d81e      	bhi.n	800c27a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c23c:	683b      	ldr	r3, [r7, #0]
 800c23e:	88db      	ldrh	r3, [r3, #6]
 800c240:	2b02      	cmp	r3, #2
 800c242:	d004      	beq.n	800c24e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c244:	6839      	ldr	r1, [r7, #0]
 800c246:	6878      	ldr	r0, [r7, #4]
 800c248:	f000 f8a5 	bl	800c396 <USBD_CtlError>
        break;
 800c24c:	e01a      	b.n	800c284 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	2201      	movs	r2, #1
 800c252:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d005      	beq.n	800c26a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	68db      	ldr	r3, [r3, #12]
 800c262:	f043 0202 	orr.w	r2, r3, #2
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	330c      	adds	r3, #12
 800c26e:	2202      	movs	r2, #2
 800c270:	4619      	mov	r1, r3
 800c272:	6878      	ldr	r0, [r7, #4]
 800c274:	f000 f90c 	bl	800c490 <USBD_CtlSendData>
      break;
 800c278:	e004      	b.n	800c284 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c27a:	6839      	ldr	r1, [r7, #0]
 800c27c:	6878      	ldr	r0, [r7, #4]
 800c27e:	f000 f88a 	bl	800c396 <USBD_CtlError>
      break;
 800c282:	bf00      	nop
  }
}
 800c284:	bf00      	nop
 800c286:	3708      	adds	r7, #8
 800c288:	46bd      	mov	sp, r7
 800c28a:	bd80      	pop	{r7, pc}

0800c28c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c28c:	b580      	push	{r7, lr}
 800c28e:	b082      	sub	sp, #8
 800c290:	af00      	add	r7, sp, #0
 800c292:	6078      	str	r0, [r7, #4]
 800c294:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c296:	683b      	ldr	r3, [r7, #0]
 800c298:	885b      	ldrh	r3, [r3, #2]
 800c29a:	2b01      	cmp	r3, #1
 800c29c:	d107      	bne.n	800c2ae <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	2201      	movs	r2, #1
 800c2a2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c2a6:	6878      	ldr	r0, [r7, #4]
 800c2a8:	f000 f94c 	bl	800c544 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c2ac:	e013      	b.n	800c2d6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c2ae:	683b      	ldr	r3, [r7, #0]
 800c2b0:	885b      	ldrh	r3, [r3, #2]
 800c2b2:	2b02      	cmp	r3, #2
 800c2b4:	d10b      	bne.n	800c2ce <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800c2b6:	683b      	ldr	r3, [r7, #0]
 800c2b8:	889b      	ldrh	r3, [r3, #4]
 800c2ba:	0a1b      	lsrs	r3, r3, #8
 800c2bc:	b29b      	uxth	r3, r3
 800c2be:	b2da      	uxtb	r2, r3
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c2c6:	6878      	ldr	r0, [r7, #4]
 800c2c8:	f000 f93c 	bl	800c544 <USBD_CtlSendStatus>
}
 800c2cc:	e003      	b.n	800c2d6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c2ce:	6839      	ldr	r1, [r7, #0]
 800c2d0:	6878      	ldr	r0, [r7, #4]
 800c2d2:	f000 f860 	bl	800c396 <USBD_CtlError>
}
 800c2d6:	bf00      	nop
 800c2d8:	3708      	adds	r7, #8
 800c2da:	46bd      	mov	sp, r7
 800c2dc:	bd80      	pop	{r7, pc}

0800c2de <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c2de:	b580      	push	{r7, lr}
 800c2e0:	b082      	sub	sp, #8
 800c2e2:	af00      	add	r7, sp, #0
 800c2e4:	6078      	str	r0, [r7, #4]
 800c2e6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c2ee:	b2db      	uxtb	r3, r3
 800c2f0:	3b01      	subs	r3, #1
 800c2f2:	2b02      	cmp	r3, #2
 800c2f4:	d80b      	bhi.n	800c30e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c2f6:	683b      	ldr	r3, [r7, #0]
 800c2f8:	885b      	ldrh	r3, [r3, #2]
 800c2fa:	2b01      	cmp	r3, #1
 800c2fc:	d10c      	bne.n	800c318 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	2200      	movs	r2, #0
 800c302:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c306:	6878      	ldr	r0, [r7, #4]
 800c308:	f000 f91c 	bl	800c544 <USBD_CtlSendStatus>
      }
      break;
 800c30c:	e004      	b.n	800c318 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c30e:	6839      	ldr	r1, [r7, #0]
 800c310:	6878      	ldr	r0, [r7, #4]
 800c312:	f000 f840 	bl	800c396 <USBD_CtlError>
      break;
 800c316:	e000      	b.n	800c31a <USBD_ClrFeature+0x3c>
      break;
 800c318:	bf00      	nop
  }
}
 800c31a:	bf00      	nop
 800c31c:	3708      	adds	r7, #8
 800c31e:	46bd      	mov	sp, r7
 800c320:	bd80      	pop	{r7, pc}

0800c322 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c322:	b580      	push	{r7, lr}
 800c324:	b084      	sub	sp, #16
 800c326:	af00      	add	r7, sp, #0
 800c328:	6078      	str	r0, [r7, #4]
 800c32a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c32c:	683b      	ldr	r3, [r7, #0]
 800c32e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	781a      	ldrb	r2, [r3, #0]
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	3301      	adds	r3, #1
 800c33c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	781a      	ldrb	r2, [r3, #0]
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	3301      	adds	r3, #1
 800c34a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c34c:	68f8      	ldr	r0, [r7, #12]
 800c34e:	f7ff fa40 	bl	800b7d2 <SWAPBYTE>
 800c352:	4603      	mov	r3, r0
 800c354:	461a      	mov	r2, r3
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	3301      	adds	r3, #1
 800c35e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	3301      	adds	r3, #1
 800c364:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c366:	68f8      	ldr	r0, [r7, #12]
 800c368:	f7ff fa33 	bl	800b7d2 <SWAPBYTE>
 800c36c:	4603      	mov	r3, r0
 800c36e:	461a      	mov	r2, r3
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	3301      	adds	r3, #1
 800c378:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	3301      	adds	r3, #1
 800c37e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c380:	68f8      	ldr	r0, [r7, #12]
 800c382:	f7ff fa26 	bl	800b7d2 <SWAPBYTE>
 800c386:	4603      	mov	r3, r0
 800c388:	461a      	mov	r2, r3
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	80da      	strh	r2, [r3, #6]
}
 800c38e:	bf00      	nop
 800c390:	3710      	adds	r7, #16
 800c392:	46bd      	mov	sp, r7
 800c394:	bd80      	pop	{r7, pc}

0800c396 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c396:	b580      	push	{r7, lr}
 800c398:	b082      	sub	sp, #8
 800c39a:	af00      	add	r7, sp, #0
 800c39c:	6078      	str	r0, [r7, #4]
 800c39e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c3a0:	2180      	movs	r1, #128	@ 0x80
 800c3a2:	6878      	ldr	r0, [r7, #4]
 800c3a4:	f000 fcd4 	bl	800cd50 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c3a8:	2100      	movs	r1, #0
 800c3aa:	6878      	ldr	r0, [r7, #4]
 800c3ac:	f000 fcd0 	bl	800cd50 <USBD_LL_StallEP>
}
 800c3b0:	bf00      	nop
 800c3b2:	3708      	adds	r7, #8
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	bd80      	pop	{r7, pc}

0800c3b8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b086      	sub	sp, #24
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	60f8      	str	r0, [r7, #12]
 800c3c0:	60b9      	str	r1, [r7, #8]
 800c3c2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c3c4:	2300      	movs	r3, #0
 800c3c6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d042      	beq.n	800c454 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800c3d2:	6938      	ldr	r0, [r7, #16]
 800c3d4:	f000 f842 	bl	800c45c <USBD_GetLen>
 800c3d8:	4603      	mov	r3, r0
 800c3da:	3301      	adds	r3, #1
 800c3dc:	005b      	lsls	r3, r3, #1
 800c3de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c3e2:	d808      	bhi.n	800c3f6 <USBD_GetString+0x3e>
 800c3e4:	6938      	ldr	r0, [r7, #16]
 800c3e6:	f000 f839 	bl	800c45c <USBD_GetLen>
 800c3ea:	4603      	mov	r3, r0
 800c3ec:	3301      	adds	r3, #1
 800c3ee:	b29b      	uxth	r3, r3
 800c3f0:	005b      	lsls	r3, r3, #1
 800c3f2:	b29a      	uxth	r2, r3
 800c3f4:	e001      	b.n	800c3fa <USBD_GetString+0x42>
 800c3f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c3fe:	7dfb      	ldrb	r3, [r7, #23]
 800c400:	68ba      	ldr	r2, [r7, #8]
 800c402:	4413      	add	r3, r2
 800c404:	687a      	ldr	r2, [r7, #4]
 800c406:	7812      	ldrb	r2, [r2, #0]
 800c408:	701a      	strb	r2, [r3, #0]
  idx++;
 800c40a:	7dfb      	ldrb	r3, [r7, #23]
 800c40c:	3301      	adds	r3, #1
 800c40e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c410:	7dfb      	ldrb	r3, [r7, #23]
 800c412:	68ba      	ldr	r2, [r7, #8]
 800c414:	4413      	add	r3, r2
 800c416:	2203      	movs	r2, #3
 800c418:	701a      	strb	r2, [r3, #0]
  idx++;
 800c41a:	7dfb      	ldrb	r3, [r7, #23]
 800c41c:	3301      	adds	r3, #1
 800c41e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c420:	e013      	b.n	800c44a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800c422:	7dfb      	ldrb	r3, [r7, #23]
 800c424:	68ba      	ldr	r2, [r7, #8]
 800c426:	4413      	add	r3, r2
 800c428:	693a      	ldr	r2, [r7, #16]
 800c42a:	7812      	ldrb	r2, [r2, #0]
 800c42c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c42e:	693b      	ldr	r3, [r7, #16]
 800c430:	3301      	adds	r3, #1
 800c432:	613b      	str	r3, [r7, #16]
    idx++;
 800c434:	7dfb      	ldrb	r3, [r7, #23]
 800c436:	3301      	adds	r3, #1
 800c438:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c43a:	7dfb      	ldrb	r3, [r7, #23]
 800c43c:	68ba      	ldr	r2, [r7, #8]
 800c43e:	4413      	add	r3, r2
 800c440:	2200      	movs	r2, #0
 800c442:	701a      	strb	r2, [r3, #0]
    idx++;
 800c444:	7dfb      	ldrb	r3, [r7, #23]
 800c446:	3301      	adds	r3, #1
 800c448:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c44a:	693b      	ldr	r3, [r7, #16]
 800c44c:	781b      	ldrb	r3, [r3, #0]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d1e7      	bne.n	800c422 <USBD_GetString+0x6a>
 800c452:	e000      	b.n	800c456 <USBD_GetString+0x9e>
    return;
 800c454:	bf00      	nop
  }
}
 800c456:	3718      	adds	r7, #24
 800c458:	46bd      	mov	sp, r7
 800c45a:	bd80      	pop	{r7, pc}

0800c45c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c45c:	b480      	push	{r7}
 800c45e:	b085      	sub	sp, #20
 800c460:	af00      	add	r7, sp, #0
 800c462:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c464:	2300      	movs	r3, #0
 800c466:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c46c:	e005      	b.n	800c47a <USBD_GetLen+0x1e>
  {
    len++;
 800c46e:	7bfb      	ldrb	r3, [r7, #15]
 800c470:	3301      	adds	r3, #1
 800c472:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c474:	68bb      	ldr	r3, [r7, #8]
 800c476:	3301      	adds	r3, #1
 800c478:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c47a:	68bb      	ldr	r3, [r7, #8]
 800c47c:	781b      	ldrb	r3, [r3, #0]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d1f5      	bne.n	800c46e <USBD_GetLen+0x12>
  }

  return len;
 800c482:	7bfb      	ldrb	r3, [r7, #15]
}
 800c484:	4618      	mov	r0, r3
 800c486:	3714      	adds	r7, #20
 800c488:	46bd      	mov	sp, r7
 800c48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48e:	4770      	bx	lr

0800c490 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c490:	b580      	push	{r7, lr}
 800c492:	b084      	sub	sp, #16
 800c494:	af00      	add	r7, sp, #0
 800c496:	60f8      	str	r0, [r7, #12]
 800c498:	60b9      	str	r1, [r7, #8]
 800c49a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	2202      	movs	r2, #2
 800c4a0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	687a      	ldr	r2, [r7, #4]
 800c4a8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	687a      	ldr	r2, [r7, #4]
 800c4ae:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	68ba      	ldr	r2, [r7, #8]
 800c4b4:	2100      	movs	r1, #0
 800c4b6:	68f8      	ldr	r0, [r7, #12]
 800c4b8:	f000 fcd3 	bl	800ce62 <USBD_LL_Transmit>

  return USBD_OK;
 800c4bc:	2300      	movs	r3, #0
}
 800c4be:	4618      	mov	r0, r3
 800c4c0:	3710      	adds	r7, #16
 800c4c2:	46bd      	mov	sp, r7
 800c4c4:	bd80      	pop	{r7, pc}

0800c4c6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c4c6:	b580      	push	{r7, lr}
 800c4c8:	b084      	sub	sp, #16
 800c4ca:	af00      	add	r7, sp, #0
 800c4cc:	60f8      	str	r0, [r7, #12]
 800c4ce:	60b9      	str	r1, [r7, #8]
 800c4d0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	68ba      	ldr	r2, [r7, #8]
 800c4d6:	2100      	movs	r1, #0
 800c4d8:	68f8      	ldr	r0, [r7, #12]
 800c4da:	f000 fcc2 	bl	800ce62 <USBD_LL_Transmit>

  return USBD_OK;
 800c4de:	2300      	movs	r3, #0
}
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	3710      	adds	r7, #16
 800c4e4:	46bd      	mov	sp, r7
 800c4e6:	bd80      	pop	{r7, pc}

0800c4e8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c4e8:	b580      	push	{r7, lr}
 800c4ea:	b084      	sub	sp, #16
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	60f8      	str	r0, [r7, #12]
 800c4f0:	60b9      	str	r1, [r7, #8]
 800c4f2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	2203      	movs	r2, #3
 800c4f8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	687a      	ldr	r2, [r7, #4]
 800c500:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	687a      	ldr	r2, [r7, #4]
 800c508:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	68ba      	ldr	r2, [r7, #8]
 800c510:	2100      	movs	r1, #0
 800c512:	68f8      	ldr	r0, [r7, #12]
 800c514:	f000 fcc6 	bl	800cea4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c518:	2300      	movs	r3, #0
}
 800c51a:	4618      	mov	r0, r3
 800c51c:	3710      	adds	r7, #16
 800c51e:	46bd      	mov	sp, r7
 800c520:	bd80      	pop	{r7, pc}

0800c522 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c522:	b580      	push	{r7, lr}
 800c524:	b084      	sub	sp, #16
 800c526:	af00      	add	r7, sp, #0
 800c528:	60f8      	str	r0, [r7, #12]
 800c52a:	60b9      	str	r1, [r7, #8]
 800c52c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	68ba      	ldr	r2, [r7, #8]
 800c532:	2100      	movs	r1, #0
 800c534:	68f8      	ldr	r0, [r7, #12]
 800c536:	f000 fcb5 	bl	800cea4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c53a:	2300      	movs	r3, #0
}
 800c53c:	4618      	mov	r0, r3
 800c53e:	3710      	adds	r7, #16
 800c540:	46bd      	mov	sp, r7
 800c542:	bd80      	pop	{r7, pc}

0800c544 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c544:	b580      	push	{r7, lr}
 800c546:	b082      	sub	sp, #8
 800c548:	af00      	add	r7, sp, #0
 800c54a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	2204      	movs	r2, #4
 800c550:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c554:	2300      	movs	r3, #0
 800c556:	2200      	movs	r2, #0
 800c558:	2100      	movs	r1, #0
 800c55a:	6878      	ldr	r0, [r7, #4]
 800c55c:	f000 fc81 	bl	800ce62 <USBD_LL_Transmit>

  return USBD_OK;
 800c560:	2300      	movs	r3, #0
}
 800c562:	4618      	mov	r0, r3
 800c564:	3708      	adds	r7, #8
 800c566:	46bd      	mov	sp, r7
 800c568:	bd80      	pop	{r7, pc}

0800c56a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c56a:	b580      	push	{r7, lr}
 800c56c:	b082      	sub	sp, #8
 800c56e:	af00      	add	r7, sp, #0
 800c570:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	2205      	movs	r2, #5
 800c576:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c57a:	2300      	movs	r3, #0
 800c57c:	2200      	movs	r2, #0
 800c57e:	2100      	movs	r1, #0
 800c580:	6878      	ldr	r0, [r7, #4]
 800c582:	f000 fc8f 	bl	800cea4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c586:	2300      	movs	r3, #0
}
 800c588:	4618      	mov	r0, r3
 800c58a:	3708      	adds	r7, #8
 800c58c:	46bd      	mov	sp, r7
 800c58e:	bd80      	pop	{r7, pc}

0800c590 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c590:	b580      	push	{r7, lr}
 800c592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c594:	2200      	movs	r2, #0
 800c596:	4912      	ldr	r1, [pc, #72]	@ (800c5e0 <MX_USB_DEVICE_Init+0x50>)
 800c598:	4812      	ldr	r0, [pc, #72]	@ (800c5e4 <MX_USB_DEVICE_Init+0x54>)
 800c59a:	f7fe fcf7 	bl	800af8c <USBD_Init>
 800c59e:	4603      	mov	r3, r0
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d001      	beq.n	800c5a8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c5a4:	f7f5 fa90 	bl	8001ac8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c5a8:	490f      	ldr	r1, [pc, #60]	@ (800c5e8 <MX_USB_DEVICE_Init+0x58>)
 800c5aa:	480e      	ldr	r0, [pc, #56]	@ (800c5e4 <MX_USB_DEVICE_Init+0x54>)
 800c5ac:	f7fe fd1e 	bl	800afec <USBD_RegisterClass>
 800c5b0:	4603      	mov	r3, r0
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d001      	beq.n	800c5ba <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c5b6:	f7f5 fa87 	bl	8001ac8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c5ba:	490c      	ldr	r1, [pc, #48]	@ (800c5ec <MX_USB_DEVICE_Init+0x5c>)
 800c5bc:	4809      	ldr	r0, [pc, #36]	@ (800c5e4 <MX_USB_DEVICE_Init+0x54>)
 800c5be:	f7fe fc55 	bl	800ae6c <USBD_CDC_RegisterInterface>
 800c5c2:	4603      	mov	r3, r0
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d001      	beq.n	800c5cc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c5c8:	f7f5 fa7e 	bl	8001ac8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c5cc:	4805      	ldr	r0, [pc, #20]	@ (800c5e4 <MX_USB_DEVICE_Init+0x54>)
 800c5ce:	f7fe fd43 	bl	800b058 <USBD_Start>
 800c5d2:	4603      	mov	r3, r0
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d001      	beq.n	800c5dc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c5d8:	f7f5 fa76 	bl	8001ac8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c5dc:	bf00      	nop
 800c5de:	bd80      	pop	{r7, pc}
 800c5e0:	200000b0 	.word	0x200000b0
 800c5e4:	20000704 	.word	0x20000704
 800c5e8:	2000001c 	.word	0x2000001c
 800c5ec:	2000009c 	.word	0x2000009c

0800c5f0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c5f0:	b580      	push	{r7, lr}
 800c5f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c5f4:	2200      	movs	r2, #0
 800c5f6:	4905      	ldr	r1, [pc, #20]	@ (800c60c <CDC_Init_FS+0x1c>)
 800c5f8:	4805      	ldr	r0, [pc, #20]	@ (800c610 <CDC_Init_FS+0x20>)
 800c5fa:	f7fe fc51 	bl	800aea0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c5fe:	4905      	ldr	r1, [pc, #20]	@ (800c614 <CDC_Init_FS+0x24>)
 800c600:	4803      	ldr	r0, [pc, #12]	@ (800c610 <CDC_Init_FS+0x20>)
 800c602:	f7fe fc6f 	bl	800aee4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c606:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c608:	4618      	mov	r0, r3
 800c60a:	bd80      	pop	{r7, pc}
 800c60c:	200011e0 	.word	0x200011e0
 800c610:	20000704 	.word	0x20000704
 800c614:	200009e0 	.word	0x200009e0

0800c618 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c618:	b480      	push	{r7}
 800c61a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c61c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c61e:	4618      	mov	r0, r3
 800c620:	46bd      	mov	sp, r7
 800c622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c626:	4770      	bx	lr

0800c628 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c628:	b480      	push	{r7}
 800c62a:	b083      	sub	sp, #12
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	4603      	mov	r3, r0
 800c630:	6039      	str	r1, [r7, #0]
 800c632:	71fb      	strb	r3, [r7, #7]
 800c634:	4613      	mov	r3, r2
 800c636:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c638:	79fb      	ldrb	r3, [r7, #7]
 800c63a:	2b23      	cmp	r3, #35	@ 0x23
 800c63c:	d84a      	bhi.n	800c6d4 <CDC_Control_FS+0xac>
 800c63e:	a201      	add	r2, pc, #4	@ (adr r2, 800c644 <CDC_Control_FS+0x1c>)
 800c640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c644:	0800c6d5 	.word	0x0800c6d5
 800c648:	0800c6d5 	.word	0x0800c6d5
 800c64c:	0800c6d5 	.word	0x0800c6d5
 800c650:	0800c6d5 	.word	0x0800c6d5
 800c654:	0800c6d5 	.word	0x0800c6d5
 800c658:	0800c6d5 	.word	0x0800c6d5
 800c65c:	0800c6d5 	.word	0x0800c6d5
 800c660:	0800c6d5 	.word	0x0800c6d5
 800c664:	0800c6d5 	.word	0x0800c6d5
 800c668:	0800c6d5 	.word	0x0800c6d5
 800c66c:	0800c6d5 	.word	0x0800c6d5
 800c670:	0800c6d5 	.word	0x0800c6d5
 800c674:	0800c6d5 	.word	0x0800c6d5
 800c678:	0800c6d5 	.word	0x0800c6d5
 800c67c:	0800c6d5 	.word	0x0800c6d5
 800c680:	0800c6d5 	.word	0x0800c6d5
 800c684:	0800c6d5 	.word	0x0800c6d5
 800c688:	0800c6d5 	.word	0x0800c6d5
 800c68c:	0800c6d5 	.word	0x0800c6d5
 800c690:	0800c6d5 	.word	0x0800c6d5
 800c694:	0800c6d5 	.word	0x0800c6d5
 800c698:	0800c6d5 	.word	0x0800c6d5
 800c69c:	0800c6d5 	.word	0x0800c6d5
 800c6a0:	0800c6d5 	.word	0x0800c6d5
 800c6a4:	0800c6d5 	.word	0x0800c6d5
 800c6a8:	0800c6d5 	.word	0x0800c6d5
 800c6ac:	0800c6d5 	.word	0x0800c6d5
 800c6b0:	0800c6d5 	.word	0x0800c6d5
 800c6b4:	0800c6d5 	.word	0x0800c6d5
 800c6b8:	0800c6d5 	.word	0x0800c6d5
 800c6bc:	0800c6d5 	.word	0x0800c6d5
 800c6c0:	0800c6d5 	.word	0x0800c6d5
 800c6c4:	0800c6d5 	.word	0x0800c6d5
 800c6c8:	0800c6d5 	.word	0x0800c6d5
 800c6cc:	0800c6d5 	.word	0x0800c6d5
 800c6d0:	0800c6d5 	.word	0x0800c6d5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c6d4:	bf00      	nop
  }

  return (USBD_OK);
 800c6d6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c6d8:	4618      	mov	r0, r3
 800c6da:	370c      	adds	r7, #12
 800c6dc:	46bd      	mov	sp, r7
 800c6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e2:	4770      	bx	lr

0800c6e4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c6e4:	b580      	push	{r7, lr}
 800c6e6:	b082      	sub	sp, #8
 800c6e8:	af00      	add	r7, sp, #0
 800c6ea:	6078      	str	r0, [r7, #4]
 800c6ec:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c6ee:	6879      	ldr	r1, [r7, #4]
 800c6f0:	4805      	ldr	r0, [pc, #20]	@ (800c708 <CDC_Receive_FS+0x24>)
 800c6f2:	f7fe fbf7 	bl	800aee4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c6f6:	4804      	ldr	r0, [pc, #16]	@ (800c708 <CDC_Receive_FS+0x24>)
 800c6f8:	f7fe fc12 	bl	800af20 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c6fc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c6fe:	4618      	mov	r0, r3
 800c700:	3708      	adds	r7, #8
 800c702:	46bd      	mov	sp, r7
 800c704:	bd80      	pop	{r7, pc}
 800c706:	bf00      	nop
 800c708:	20000704 	.word	0x20000704

0800c70c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800c70c:	b480      	push	{r7}
 800c70e:	b087      	sub	sp, #28
 800c710:	af00      	add	r7, sp, #0
 800c712:	60f8      	str	r0, [r7, #12]
 800c714:	60b9      	str	r1, [r7, #8]
 800c716:	4613      	mov	r3, r2
 800c718:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800c71a:	2300      	movs	r3, #0
 800c71c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800c71e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c722:	4618      	mov	r0, r3
 800c724:	371c      	adds	r7, #28
 800c726:	46bd      	mov	sp, r7
 800c728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c72c:	4770      	bx	lr
	...

0800c730 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c730:	b480      	push	{r7}
 800c732:	b083      	sub	sp, #12
 800c734:	af00      	add	r7, sp, #0
 800c736:	4603      	mov	r3, r0
 800c738:	6039      	str	r1, [r7, #0]
 800c73a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c73c:	683b      	ldr	r3, [r7, #0]
 800c73e:	2212      	movs	r2, #18
 800c740:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c742:	4b03      	ldr	r3, [pc, #12]	@ (800c750 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c744:	4618      	mov	r0, r3
 800c746:	370c      	adds	r7, #12
 800c748:	46bd      	mov	sp, r7
 800c74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c74e:	4770      	bx	lr
 800c750:	200000cc 	.word	0x200000cc

0800c754 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c754:	b480      	push	{r7}
 800c756:	b083      	sub	sp, #12
 800c758:	af00      	add	r7, sp, #0
 800c75a:	4603      	mov	r3, r0
 800c75c:	6039      	str	r1, [r7, #0]
 800c75e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c760:	683b      	ldr	r3, [r7, #0]
 800c762:	2204      	movs	r2, #4
 800c764:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c766:	4b03      	ldr	r3, [pc, #12]	@ (800c774 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c768:	4618      	mov	r0, r3
 800c76a:	370c      	adds	r7, #12
 800c76c:	46bd      	mov	sp, r7
 800c76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c772:	4770      	bx	lr
 800c774:	200000e0 	.word	0x200000e0

0800c778 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c778:	b580      	push	{r7, lr}
 800c77a:	b082      	sub	sp, #8
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	4603      	mov	r3, r0
 800c780:	6039      	str	r1, [r7, #0]
 800c782:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c784:	79fb      	ldrb	r3, [r7, #7]
 800c786:	2b00      	cmp	r3, #0
 800c788:	d105      	bne.n	800c796 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c78a:	683a      	ldr	r2, [r7, #0]
 800c78c:	4907      	ldr	r1, [pc, #28]	@ (800c7ac <USBD_FS_ProductStrDescriptor+0x34>)
 800c78e:	4808      	ldr	r0, [pc, #32]	@ (800c7b0 <USBD_FS_ProductStrDescriptor+0x38>)
 800c790:	f7ff fe12 	bl	800c3b8 <USBD_GetString>
 800c794:	e004      	b.n	800c7a0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c796:	683a      	ldr	r2, [r7, #0]
 800c798:	4904      	ldr	r1, [pc, #16]	@ (800c7ac <USBD_FS_ProductStrDescriptor+0x34>)
 800c79a:	4805      	ldr	r0, [pc, #20]	@ (800c7b0 <USBD_FS_ProductStrDescriptor+0x38>)
 800c79c:	f7ff fe0c 	bl	800c3b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c7a0:	4b02      	ldr	r3, [pc, #8]	@ (800c7ac <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	3708      	adds	r7, #8
 800c7a6:	46bd      	mov	sp, r7
 800c7a8:	bd80      	pop	{r7, pc}
 800c7aa:	bf00      	nop
 800c7ac:	200019e0 	.word	0x200019e0
 800c7b0:	080101b8 	.word	0x080101b8

0800c7b4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c7b4:	b580      	push	{r7, lr}
 800c7b6:	b082      	sub	sp, #8
 800c7b8:	af00      	add	r7, sp, #0
 800c7ba:	4603      	mov	r3, r0
 800c7bc:	6039      	str	r1, [r7, #0]
 800c7be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c7c0:	683a      	ldr	r2, [r7, #0]
 800c7c2:	4904      	ldr	r1, [pc, #16]	@ (800c7d4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c7c4:	4804      	ldr	r0, [pc, #16]	@ (800c7d8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c7c6:	f7ff fdf7 	bl	800c3b8 <USBD_GetString>
  return USBD_StrDesc;
 800c7ca:	4b02      	ldr	r3, [pc, #8]	@ (800c7d4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c7cc:	4618      	mov	r0, r3
 800c7ce:	3708      	adds	r7, #8
 800c7d0:	46bd      	mov	sp, r7
 800c7d2:	bd80      	pop	{r7, pc}
 800c7d4:	200019e0 	.word	0x200019e0
 800c7d8:	080101d0 	.word	0x080101d0

0800c7dc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c7dc:	b580      	push	{r7, lr}
 800c7de:	b082      	sub	sp, #8
 800c7e0:	af00      	add	r7, sp, #0
 800c7e2:	4603      	mov	r3, r0
 800c7e4:	6039      	str	r1, [r7, #0]
 800c7e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c7e8:	683b      	ldr	r3, [r7, #0]
 800c7ea:	221a      	movs	r2, #26
 800c7ec:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c7ee:	f000 f843 	bl	800c878 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c7f2:	4b02      	ldr	r3, [pc, #8]	@ (800c7fc <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c7f4:	4618      	mov	r0, r3
 800c7f6:	3708      	adds	r7, #8
 800c7f8:	46bd      	mov	sp, r7
 800c7fa:	bd80      	pop	{r7, pc}
 800c7fc:	200000e4 	.word	0x200000e4

0800c800 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c800:	b580      	push	{r7, lr}
 800c802:	b082      	sub	sp, #8
 800c804:	af00      	add	r7, sp, #0
 800c806:	4603      	mov	r3, r0
 800c808:	6039      	str	r1, [r7, #0]
 800c80a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c80c:	79fb      	ldrb	r3, [r7, #7]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d105      	bne.n	800c81e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c812:	683a      	ldr	r2, [r7, #0]
 800c814:	4907      	ldr	r1, [pc, #28]	@ (800c834 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c816:	4808      	ldr	r0, [pc, #32]	@ (800c838 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c818:	f7ff fdce 	bl	800c3b8 <USBD_GetString>
 800c81c:	e004      	b.n	800c828 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c81e:	683a      	ldr	r2, [r7, #0]
 800c820:	4904      	ldr	r1, [pc, #16]	@ (800c834 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c822:	4805      	ldr	r0, [pc, #20]	@ (800c838 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c824:	f7ff fdc8 	bl	800c3b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c828:	4b02      	ldr	r3, [pc, #8]	@ (800c834 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c82a:	4618      	mov	r0, r3
 800c82c:	3708      	adds	r7, #8
 800c82e:	46bd      	mov	sp, r7
 800c830:	bd80      	pop	{r7, pc}
 800c832:	bf00      	nop
 800c834:	200019e0 	.word	0x200019e0
 800c838:	080101e4 	.word	0x080101e4

0800c83c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c83c:	b580      	push	{r7, lr}
 800c83e:	b082      	sub	sp, #8
 800c840:	af00      	add	r7, sp, #0
 800c842:	4603      	mov	r3, r0
 800c844:	6039      	str	r1, [r7, #0]
 800c846:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c848:	79fb      	ldrb	r3, [r7, #7]
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d105      	bne.n	800c85a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c84e:	683a      	ldr	r2, [r7, #0]
 800c850:	4907      	ldr	r1, [pc, #28]	@ (800c870 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c852:	4808      	ldr	r0, [pc, #32]	@ (800c874 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c854:	f7ff fdb0 	bl	800c3b8 <USBD_GetString>
 800c858:	e004      	b.n	800c864 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c85a:	683a      	ldr	r2, [r7, #0]
 800c85c:	4904      	ldr	r1, [pc, #16]	@ (800c870 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c85e:	4805      	ldr	r0, [pc, #20]	@ (800c874 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c860:	f7ff fdaa 	bl	800c3b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c864:	4b02      	ldr	r3, [pc, #8]	@ (800c870 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c866:	4618      	mov	r0, r3
 800c868:	3708      	adds	r7, #8
 800c86a:	46bd      	mov	sp, r7
 800c86c:	bd80      	pop	{r7, pc}
 800c86e:	bf00      	nop
 800c870:	200019e0 	.word	0x200019e0
 800c874:	080101f0 	.word	0x080101f0

0800c878 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c878:	b580      	push	{r7, lr}
 800c87a:	b084      	sub	sp, #16
 800c87c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c87e:	4b0f      	ldr	r3, [pc, #60]	@ (800c8bc <Get_SerialNum+0x44>)
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c884:	4b0e      	ldr	r3, [pc, #56]	@ (800c8c0 <Get_SerialNum+0x48>)
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c88a:	4b0e      	ldr	r3, [pc, #56]	@ (800c8c4 <Get_SerialNum+0x4c>)
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c890:	68fa      	ldr	r2, [r7, #12]
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	4413      	add	r3, r2
 800c896:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d009      	beq.n	800c8b2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c89e:	2208      	movs	r2, #8
 800c8a0:	4909      	ldr	r1, [pc, #36]	@ (800c8c8 <Get_SerialNum+0x50>)
 800c8a2:	68f8      	ldr	r0, [r7, #12]
 800c8a4:	f000 f814 	bl	800c8d0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c8a8:	2204      	movs	r2, #4
 800c8aa:	4908      	ldr	r1, [pc, #32]	@ (800c8cc <Get_SerialNum+0x54>)
 800c8ac:	68b8      	ldr	r0, [r7, #8]
 800c8ae:	f000 f80f 	bl	800c8d0 <IntToUnicode>
  }
}
 800c8b2:	bf00      	nop
 800c8b4:	3710      	adds	r7, #16
 800c8b6:	46bd      	mov	sp, r7
 800c8b8:	bd80      	pop	{r7, pc}
 800c8ba:	bf00      	nop
 800c8bc:	1fff7a10 	.word	0x1fff7a10
 800c8c0:	1fff7a14 	.word	0x1fff7a14
 800c8c4:	1fff7a18 	.word	0x1fff7a18
 800c8c8:	200000e6 	.word	0x200000e6
 800c8cc:	200000f6 	.word	0x200000f6

0800c8d0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c8d0:	b480      	push	{r7}
 800c8d2:	b087      	sub	sp, #28
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	60f8      	str	r0, [r7, #12]
 800c8d8:	60b9      	str	r1, [r7, #8]
 800c8da:	4613      	mov	r3, r2
 800c8dc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c8de:	2300      	movs	r3, #0
 800c8e0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c8e2:	2300      	movs	r3, #0
 800c8e4:	75fb      	strb	r3, [r7, #23]
 800c8e6:	e027      	b.n	800c938 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	0f1b      	lsrs	r3, r3, #28
 800c8ec:	2b09      	cmp	r3, #9
 800c8ee:	d80b      	bhi.n	800c908 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	0f1b      	lsrs	r3, r3, #28
 800c8f4:	b2da      	uxtb	r2, r3
 800c8f6:	7dfb      	ldrb	r3, [r7, #23]
 800c8f8:	005b      	lsls	r3, r3, #1
 800c8fa:	4619      	mov	r1, r3
 800c8fc:	68bb      	ldr	r3, [r7, #8]
 800c8fe:	440b      	add	r3, r1
 800c900:	3230      	adds	r2, #48	@ 0x30
 800c902:	b2d2      	uxtb	r2, r2
 800c904:	701a      	strb	r2, [r3, #0]
 800c906:	e00a      	b.n	800c91e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	0f1b      	lsrs	r3, r3, #28
 800c90c:	b2da      	uxtb	r2, r3
 800c90e:	7dfb      	ldrb	r3, [r7, #23]
 800c910:	005b      	lsls	r3, r3, #1
 800c912:	4619      	mov	r1, r3
 800c914:	68bb      	ldr	r3, [r7, #8]
 800c916:	440b      	add	r3, r1
 800c918:	3237      	adds	r2, #55	@ 0x37
 800c91a:	b2d2      	uxtb	r2, r2
 800c91c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	011b      	lsls	r3, r3, #4
 800c922:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c924:	7dfb      	ldrb	r3, [r7, #23]
 800c926:	005b      	lsls	r3, r3, #1
 800c928:	3301      	adds	r3, #1
 800c92a:	68ba      	ldr	r2, [r7, #8]
 800c92c:	4413      	add	r3, r2
 800c92e:	2200      	movs	r2, #0
 800c930:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c932:	7dfb      	ldrb	r3, [r7, #23]
 800c934:	3301      	adds	r3, #1
 800c936:	75fb      	strb	r3, [r7, #23]
 800c938:	7dfa      	ldrb	r2, [r7, #23]
 800c93a:	79fb      	ldrb	r3, [r7, #7]
 800c93c:	429a      	cmp	r2, r3
 800c93e:	d3d3      	bcc.n	800c8e8 <IntToUnicode+0x18>
  }
}
 800c940:	bf00      	nop
 800c942:	bf00      	nop
 800c944:	371c      	adds	r7, #28
 800c946:	46bd      	mov	sp, r7
 800c948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c94c:	4770      	bx	lr
	...

0800c950 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c950:	b580      	push	{r7, lr}
 800c952:	b08a      	sub	sp, #40	@ 0x28
 800c954:	af00      	add	r7, sp, #0
 800c956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c958:	f107 0314 	add.w	r3, r7, #20
 800c95c:	2200      	movs	r2, #0
 800c95e:	601a      	str	r2, [r3, #0]
 800c960:	605a      	str	r2, [r3, #4]
 800c962:	609a      	str	r2, [r3, #8]
 800c964:	60da      	str	r2, [r3, #12]
 800c966:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c970:	d147      	bne.n	800ca02 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c972:	2300      	movs	r3, #0
 800c974:	613b      	str	r3, [r7, #16]
 800c976:	4b25      	ldr	r3, [pc, #148]	@ (800ca0c <HAL_PCD_MspInit+0xbc>)
 800c978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c97a:	4a24      	ldr	r2, [pc, #144]	@ (800ca0c <HAL_PCD_MspInit+0xbc>)
 800c97c:	f043 0301 	orr.w	r3, r3, #1
 800c980:	6313      	str	r3, [r2, #48]	@ 0x30
 800c982:	4b22      	ldr	r3, [pc, #136]	@ (800ca0c <HAL_PCD_MspInit+0xbc>)
 800c984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c986:	f003 0301 	and.w	r3, r3, #1
 800c98a:	613b      	str	r3, [r7, #16]
 800c98c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800c98e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c992:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c994:	2300      	movs	r3, #0
 800c996:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c998:	2300      	movs	r3, #0
 800c99a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800c99c:	f107 0314 	add.w	r3, r7, #20
 800c9a0:	4619      	mov	r1, r3
 800c9a2:	481b      	ldr	r0, [pc, #108]	@ (800ca10 <HAL_PCD_MspInit+0xc0>)
 800c9a4:	f7f7 f926 	bl	8003bf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800c9a8:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800c9ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c9ae:	2302      	movs	r3, #2
 800c9b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c9b6:	2300      	movs	r3, #0
 800c9b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c9ba:	230a      	movs	r3, #10
 800c9bc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c9be:	f107 0314 	add.w	r3, r7, #20
 800c9c2:	4619      	mov	r1, r3
 800c9c4:	4812      	ldr	r0, [pc, #72]	@ (800ca10 <HAL_PCD_MspInit+0xc0>)
 800c9c6:	f7f7 f915 	bl	8003bf4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c9ca:	4b10      	ldr	r3, [pc, #64]	@ (800ca0c <HAL_PCD_MspInit+0xbc>)
 800c9cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c9ce:	4a0f      	ldr	r2, [pc, #60]	@ (800ca0c <HAL_PCD_MspInit+0xbc>)
 800c9d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c9d4:	6353      	str	r3, [r2, #52]	@ 0x34
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	60fb      	str	r3, [r7, #12]
 800c9da:	4b0c      	ldr	r3, [pc, #48]	@ (800ca0c <HAL_PCD_MspInit+0xbc>)
 800c9dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c9de:	4a0b      	ldr	r2, [pc, #44]	@ (800ca0c <HAL_PCD_MspInit+0xbc>)
 800c9e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800c9e4:	6453      	str	r3, [r2, #68]	@ 0x44
 800c9e6:	4b09      	ldr	r3, [pc, #36]	@ (800ca0c <HAL_PCD_MspInit+0xbc>)
 800c9e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c9ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c9ee:	60fb      	str	r3, [r7, #12]
 800c9f0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c9f2:	2200      	movs	r2, #0
 800c9f4:	2100      	movs	r1, #0
 800c9f6:	2043      	movs	r0, #67	@ 0x43
 800c9f8:	f7f6 fd55 	bl	80034a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c9fc:	2043      	movs	r0, #67	@ 0x43
 800c9fe:	f7f6 fd6e 	bl	80034de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ca02:	bf00      	nop
 800ca04:	3728      	adds	r7, #40	@ 0x28
 800ca06:	46bd      	mov	sp, r7
 800ca08:	bd80      	pop	{r7, pc}
 800ca0a:	bf00      	nop
 800ca0c:	40023800 	.word	0x40023800
 800ca10:	40020000 	.word	0x40020000

0800ca14 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca14:	b580      	push	{r7, lr}
 800ca16:	b082      	sub	sp, #8
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800ca28:	4619      	mov	r1, r3
 800ca2a:	4610      	mov	r0, r2
 800ca2c:	f7fe fb61 	bl	800b0f2 <USBD_LL_SetupStage>
}
 800ca30:	bf00      	nop
 800ca32:	3708      	adds	r7, #8
 800ca34:	46bd      	mov	sp, r7
 800ca36:	bd80      	pop	{r7, pc}

0800ca38 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca38:	b580      	push	{r7, lr}
 800ca3a:	b082      	sub	sp, #8
 800ca3c:	af00      	add	r7, sp, #0
 800ca3e:	6078      	str	r0, [r7, #4]
 800ca40:	460b      	mov	r3, r1
 800ca42:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800ca4a:	78fa      	ldrb	r2, [r7, #3]
 800ca4c:	6879      	ldr	r1, [r7, #4]
 800ca4e:	4613      	mov	r3, r2
 800ca50:	00db      	lsls	r3, r3, #3
 800ca52:	4413      	add	r3, r2
 800ca54:	009b      	lsls	r3, r3, #2
 800ca56:	440b      	add	r3, r1
 800ca58:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800ca5c:	681a      	ldr	r2, [r3, #0]
 800ca5e:	78fb      	ldrb	r3, [r7, #3]
 800ca60:	4619      	mov	r1, r3
 800ca62:	f7fe fb9b 	bl	800b19c <USBD_LL_DataOutStage>
}
 800ca66:	bf00      	nop
 800ca68:	3708      	adds	r7, #8
 800ca6a:	46bd      	mov	sp, r7
 800ca6c:	bd80      	pop	{r7, pc}

0800ca6e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca6e:	b580      	push	{r7, lr}
 800ca70:	b082      	sub	sp, #8
 800ca72:	af00      	add	r7, sp, #0
 800ca74:	6078      	str	r0, [r7, #4]
 800ca76:	460b      	mov	r3, r1
 800ca78:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800ca80:	78fa      	ldrb	r2, [r7, #3]
 800ca82:	6879      	ldr	r1, [r7, #4]
 800ca84:	4613      	mov	r3, r2
 800ca86:	00db      	lsls	r3, r3, #3
 800ca88:	4413      	add	r3, r2
 800ca8a:	009b      	lsls	r3, r3, #2
 800ca8c:	440b      	add	r3, r1
 800ca8e:	3320      	adds	r3, #32
 800ca90:	681a      	ldr	r2, [r3, #0]
 800ca92:	78fb      	ldrb	r3, [r7, #3]
 800ca94:	4619      	mov	r1, r3
 800ca96:	f7fe fc34 	bl	800b302 <USBD_LL_DataInStage>
}
 800ca9a:	bf00      	nop
 800ca9c:	3708      	adds	r7, #8
 800ca9e:	46bd      	mov	sp, r7
 800caa0:	bd80      	pop	{r7, pc}

0800caa2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800caa2:	b580      	push	{r7, lr}
 800caa4:	b082      	sub	sp, #8
 800caa6:	af00      	add	r7, sp, #0
 800caa8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cab0:	4618      	mov	r0, r3
 800cab2:	f7fe fd6e 	bl	800b592 <USBD_LL_SOF>
}
 800cab6:	bf00      	nop
 800cab8:	3708      	adds	r7, #8
 800caba:	46bd      	mov	sp, r7
 800cabc:	bd80      	pop	{r7, pc}

0800cabe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cabe:	b580      	push	{r7, lr}
 800cac0:	b084      	sub	sp, #16
 800cac2:	af00      	add	r7, sp, #0
 800cac4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800cac6:	2301      	movs	r3, #1
 800cac8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	79db      	ldrb	r3, [r3, #7]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d102      	bne.n	800cad8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800cad2:	2300      	movs	r3, #0
 800cad4:	73fb      	strb	r3, [r7, #15]
 800cad6:	e008      	b.n	800caea <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	79db      	ldrb	r3, [r3, #7]
 800cadc:	2b02      	cmp	r3, #2
 800cade:	d102      	bne.n	800cae6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800cae0:	2301      	movs	r3, #1
 800cae2:	73fb      	strb	r3, [r7, #15]
 800cae4:	e001      	b.n	800caea <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800cae6:	f7f4 ffef 	bl	8001ac8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800caf0:	7bfa      	ldrb	r2, [r7, #15]
 800caf2:	4611      	mov	r1, r2
 800caf4:	4618      	mov	r0, r3
 800caf6:	f7fe fd08 	bl	800b50a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cb00:	4618      	mov	r0, r3
 800cb02:	f7fe fcb0 	bl	800b466 <USBD_LL_Reset>
}
 800cb06:	bf00      	nop
 800cb08:	3710      	adds	r7, #16
 800cb0a:	46bd      	mov	sp, r7
 800cb0c:	bd80      	pop	{r7, pc}
	...

0800cb10 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb10:	b580      	push	{r7, lr}
 800cb12:	b082      	sub	sp, #8
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cb1e:	4618      	mov	r0, r3
 800cb20:	f7fe fd03 	bl	800b52a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	687a      	ldr	r2, [r7, #4]
 800cb30:	6812      	ldr	r2, [r2, #0]
 800cb32:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800cb36:	f043 0301 	orr.w	r3, r3, #1
 800cb3a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	7adb      	ldrb	r3, [r3, #11]
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d005      	beq.n	800cb50 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cb44:	4b04      	ldr	r3, [pc, #16]	@ (800cb58 <HAL_PCD_SuspendCallback+0x48>)
 800cb46:	691b      	ldr	r3, [r3, #16]
 800cb48:	4a03      	ldr	r2, [pc, #12]	@ (800cb58 <HAL_PCD_SuspendCallback+0x48>)
 800cb4a:	f043 0306 	orr.w	r3, r3, #6
 800cb4e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800cb50:	bf00      	nop
 800cb52:	3708      	adds	r7, #8
 800cb54:	46bd      	mov	sp, r7
 800cb56:	bd80      	pop	{r7, pc}
 800cb58:	e000ed00 	.word	0xe000ed00

0800cb5c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb5c:	b580      	push	{r7, lr}
 800cb5e:	b082      	sub	sp, #8
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	f7fe fcf9 	bl	800b562 <USBD_LL_Resume>
}
 800cb70:	bf00      	nop
 800cb72:	3708      	adds	r7, #8
 800cb74:	46bd      	mov	sp, r7
 800cb76:	bd80      	pop	{r7, pc}

0800cb78 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb78:	b580      	push	{r7, lr}
 800cb7a:	b082      	sub	sp, #8
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	6078      	str	r0, [r7, #4]
 800cb80:	460b      	mov	r3, r1
 800cb82:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cb8a:	78fa      	ldrb	r2, [r7, #3]
 800cb8c:	4611      	mov	r1, r2
 800cb8e:	4618      	mov	r0, r3
 800cb90:	f7fe fd51 	bl	800b636 <USBD_LL_IsoOUTIncomplete>
}
 800cb94:	bf00      	nop
 800cb96:	3708      	adds	r7, #8
 800cb98:	46bd      	mov	sp, r7
 800cb9a:	bd80      	pop	{r7, pc}

0800cb9c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb9c:	b580      	push	{r7, lr}
 800cb9e:	b082      	sub	sp, #8
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	6078      	str	r0, [r7, #4]
 800cba4:	460b      	mov	r3, r1
 800cba6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cbae:	78fa      	ldrb	r2, [r7, #3]
 800cbb0:	4611      	mov	r1, r2
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	f7fe fd0d 	bl	800b5d2 <USBD_LL_IsoINIncomplete>
}
 800cbb8:	bf00      	nop
 800cbba:	3708      	adds	r7, #8
 800cbbc:	46bd      	mov	sp, r7
 800cbbe:	bd80      	pop	{r7, pc}

0800cbc0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cbc0:	b580      	push	{r7, lr}
 800cbc2:	b082      	sub	sp, #8
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cbce:	4618      	mov	r0, r3
 800cbd0:	f7fe fd63 	bl	800b69a <USBD_LL_DevConnected>
}
 800cbd4:	bf00      	nop
 800cbd6:	3708      	adds	r7, #8
 800cbd8:	46bd      	mov	sp, r7
 800cbda:	bd80      	pop	{r7, pc}

0800cbdc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cbdc:	b580      	push	{r7, lr}
 800cbde:	b082      	sub	sp, #8
 800cbe0:	af00      	add	r7, sp, #0
 800cbe2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cbea:	4618      	mov	r0, r3
 800cbec:	f7fe fd60 	bl	800b6b0 <USBD_LL_DevDisconnected>
}
 800cbf0:	bf00      	nop
 800cbf2:	3708      	adds	r7, #8
 800cbf4:	46bd      	mov	sp, r7
 800cbf6:	bd80      	pop	{r7, pc}

0800cbf8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800cbf8:	b580      	push	{r7, lr}
 800cbfa:	b082      	sub	sp, #8
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	781b      	ldrb	r3, [r3, #0]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d13c      	bne.n	800cc82 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800cc08:	4a20      	ldr	r2, [pc, #128]	@ (800cc8c <USBD_LL_Init+0x94>)
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	4a1e      	ldr	r2, [pc, #120]	@ (800cc8c <USBD_LL_Init+0x94>)
 800cc14:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800cc18:	4b1c      	ldr	r3, [pc, #112]	@ (800cc8c <USBD_LL_Init+0x94>)
 800cc1a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800cc1e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800cc20:	4b1a      	ldr	r3, [pc, #104]	@ (800cc8c <USBD_LL_Init+0x94>)
 800cc22:	2204      	movs	r2, #4
 800cc24:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800cc26:	4b19      	ldr	r3, [pc, #100]	@ (800cc8c <USBD_LL_Init+0x94>)
 800cc28:	2202      	movs	r2, #2
 800cc2a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800cc2c:	4b17      	ldr	r3, [pc, #92]	@ (800cc8c <USBD_LL_Init+0x94>)
 800cc2e:	2200      	movs	r2, #0
 800cc30:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800cc32:	4b16      	ldr	r3, [pc, #88]	@ (800cc8c <USBD_LL_Init+0x94>)
 800cc34:	2202      	movs	r2, #2
 800cc36:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800cc38:	4b14      	ldr	r3, [pc, #80]	@ (800cc8c <USBD_LL_Init+0x94>)
 800cc3a:	2200      	movs	r2, #0
 800cc3c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800cc3e:	4b13      	ldr	r3, [pc, #76]	@ (800cc8c <USBD_LL_Init+0x94>)
 800cc40:	2200      	movs	r2, #0
 800cc42:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800cc44:	4b11      	ldr	r3, [pc, #68]	@ (800cc8c <USBD_LL_Init+0x94>)
 800cc46:	2200      	movs	r2, #0
 800cc48:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800cc4a:	4b10      	ldr	r3, [pc, #64]	@ (800cc8c <USBD_LL_Init+0x94>)
 800cc4c:	2201      	movs	r2, #1
 800cc4e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800cc50:	4b0e      	ldr	r3, [pc, #56]	@ (800cc8c <USBD_LL_Init+0x94>)
 800cc52:	2200      	movs	r2, #0
 800cc54:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800cc56:	480d      	ldr	r0, [pc, #52]	@ (800cc8c <USBD_LL_Init+0x94>)
 800cc58:	f7f8 ff7a 	bl	8005b50 <HAL_PCD_Init>
 800cc5c:	4603      	mov	r3, r0
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d001      	beq.n	800cc66 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800cc62:	f7f4 ff31 	bl	8001ac8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800cc66:	2180      	movs	r1, #128	@ 0x80
 800cc68:	4808      	ldr	r0, [pc, #32]	@ (800cc8c <USBD_LL_Init+0x94>)
 800cc6a:	f7fa f9a6 	bl	8006fba <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800cc6e:	2240      	movs	r2, #64	@ 0x40
 800cc70:	2100      	movs	r1, #0
 800cc72:	4806      	ldr	r0, [pc, #24]	@ (800cc8c <USBD_LL_Init+0x94>)
 800cc74:	f7fa f95a 	bl	8006f2c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800cc78:	2280      	movs	r2, #128	@ 0x80
 800cc7a:	2101      	movs	r1, #1
 800cc7c:	4803      	ldr	r0, [pc, #12]	@ (800cc8c <USBD_LL_Init+0x94>)
 800cc7e:	f7fa f955 	bl	8006f2c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800cc82:	2300      	movs	r3, #0
}
 800cc84:	4618      	mov	r0, r3
 800cc86:	3708      	adds	r7, #8
 800cc88:	46bd      	mov	sp, r7
 800cc8a:	bd80      	pop	{r7, pc}
 800cc8c:	20001be0 	.word	0x20001be0

0800cc90 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800cc90:	b580      	push	{r7, lr}
 800cc92:	b084      	sub	sp, #16
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc98:	2300      	movs	r3, #0
 800cc9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc9c:	2300      	movs	r3, #0
 800cc9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cca6:	4618      	mov	r0, r3
 800cca8:	f7f9 f861 	bl	8005d6e <HAL_PCD_Start>
 800ccac:	4603      	mov	r3, r0
 800ccae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ccb0:	7bfb      	ldrb	r3, [r7, #15]
 800ccb2:	4618      	mov	r0, r3
 800ccb4:	f000 f942 	bl	800cf3c <USBD_Get_USB_Status>
 800ccb8:	4603      	mov	r3, r0
 800ccba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ccbc:	7bbb      	ldrb	r3, [r7, #14]
}
 800ccbe:	4618      	mov	r0, r3
 800ccc0:	3710      	adds	r7, #16
 800ccc2:	46bd      	mov	sp, r7
 800ccc4:	bd80      	pop	{r7, pc}

0800ccc6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ccc6:	b580      	push	{r7, lr}
 800ccc8:	b084      	sub	sp, #16
 800ccca:	af00      	add	r7, sp, #0
 800cccc:	6078      	str	r0, [r7, #4]
 800ccce:	4608      	mov	r0, r1
 800ccd0:	4611      	mov	r1, r2
 800ccd2:	461a      	mov	r2, r3
 800ccd4:	4603      	mov	r3, r0
 800ccd6:	70fb      	strb	r3, [r7, #3]
 800ccd8:	460b      	mov	r3, r1
 800ccda:	70bb      	strb	r3, [r7, #2]
 800ccdc:	4613      	mov	r3, r2
 800ccde:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cce0:	2300      	movs	r3, #0
 800cce2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cce4:	2300      	movs	r3, #0
 800cce6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ccee:	78bb      	ldrb	r3, [r7, #2]
 800ccf0:	883a      	ldrh	r2, [r7, #0]
 800ccf2:	78f9      	ldrb	r1, [r7, #3]
 800ccf4:	f7f9 fd35 	bl	8006762 <HAL_PCD_EP_Open>
 800ccf8:	4603      	mov	r3, r0
 800ccfa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ccfc:	7bfb      	ldrb	r3, [r7, #15]
 800ccfe:	4618      	mov	r0, r3
 800cd00:	f000 f91c 	bl	800cf3c <USBD_Get_USB_Status>
 800cd04:	4603      	mov	r3, r0
 800cd06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cd08:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	3710      	adds	r7, #16
 800cd0e:	46bd      	mov	sp, r7
 800cd10:	bd80      	pop	{r7, pc}

0800cd12 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cd12:	b580      	push	{r7, lr}
 800cd14:	b084      	sub	sp, #16
 800cd16:	af00      	add	r7, sp, #0
 800cd18:	6078      	str	r0, [r7, #4]
 800cd1a:	460b      	mov	r3, r1
 800cd1c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd1e:	2300      	movs	r3, #0
 800cd20:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd22:	2300      	movs	r3, #0
 800cd24:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cd2c:	78fa      	ldrb	r2, [r7, #3]
 800cd2e:	4611      	mov	r1, r2
 800cd30:	4618      	mov	r0, r3
 800cd32:	f7f9 fd80 	bl	8006836 <HAL_PCD_EP_Close>
 800cd36:	4603      	mov	r3, r0
 800cd38:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd3a:	7bfb      	ldrb	r3, [r7, #15]
 800cd3c:	4618      	mov	r0, r3
 800cd3e:	f000 f8fd 	bl	800cf3c <USBD_Get_USB_Status>
 800cd42:	4603      	mov	r3, r0
 800cd44:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cd46:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd48:	4618      	mov	r0, r3
 800cd4a:	3710      	adds	r7, #16
 800cd4c:	46bd      	mov	sp, r7
 800cd4e:	bd80      	pop	{r7, pc}

0800cd50 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cd50:	b580      	push	{r7, lr}
 800cd52:	b084      	sub	sp, #16
 800cd54:	af00      	add	r7, sp, #0
 800cd56:	6078      	str	r0, [r7, #4]
 800cd58:	460b      	mov	r3, r1
 800cd5a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd5c:	2300      	movs	r3, #0
 800cd5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd60:	2300      	movs	r3, #0
 800cd62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cd6a:	78fa      	ldrb	r2, [r7, #3]
 800cd6c:	4611      	mov	r1, r2
 800cd6e:	4618      	mov	r0, r3
 800cd70:	f7f9 fe38 	bl	80069e4 <HAL_PCD_EP_SetStall>
 800cd74:	4603      	mov	r3, r0
 800cd76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd78:	7bfb      	ldrb	r3, [r7, #15]
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	f000 f8de 	bl	800cf3c <USBD_Get_USB_Status>
 800cd80:	4603      	mov	r3, r0
 800cd82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cd84:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd86:	4618      	mov	r0, r3
 800cd88:	3710      	adds	r7, #16
 800cd8a:	46bd      	mov	sp, r7
 800cd8c:	bd80      	pop	{r7, pc}

0800cd8e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cd8e:	b580      	push	{r7, lr}
 800cd90:	b084      	sub	sp, #16
 800cd92:	af00      	add	r7, sp, #0
 800cd94:	6078      	str	r0, [r7, #4]
 800cd96:	460b      	mov	r3, r1
 800cd98:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd9a:	2300      	movs	r3, #0
 800cd9c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd9e:	2300      	movs	r3, #0
 800cda0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cda8:	78fa      	ldrb	r2, [r7, #3]
 800cdaa:	4611      	mov	r1, r2
 800cdac:	4618      	mov	r0, r3
 800cdae:	f7f9 fe7c 	bl	8006aaa <HAL_PCD_EP_ClrStall>
 800cdb2:	4603      	mov	r3, r0
 800cdb4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cdb6:	7bfb      	ldrb	r3, [r7, #15]
 800cdb8:	4618      	mov	r0, r3
 800cdba:	f000 f8bf 	bl	800cf3c <USBD_Get_USB_Status>
 800cdbe:	4603      	mov	r3, r0
 800cdc0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cdc2:	7bbb      	ldrb	r3, [r7, #14]
}
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	3710      	adds	r7, #16
 800cdc8:	46bd      	mov	sp, r7
 800cdca:	bd80      	pop	{r7, pc}

0800cdcc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cdcc:	b480      	push	{r7}
 800cdce:	b085      	sub	sp, #20
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	6078      	str	r0, [r7, #4]
 800cdd4:	460b      	mov	r3, r1
 800cdd6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cdde:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800cde0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	da0b      	bge.n	800ce00 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800cde8:	78fb      	ldrb	r3, [r7, #3]
 800cdea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cdee:	68f9      	ldr	r1, [r7, #12]
 800cdf0:	4613      	mov	r3, r2
 800cdf2:	00db      	lsls	r3, r3, #3
 800cdf4:	4413      	add	r3, r2
 800cdf6:	009b      	lsls	r3, r3, #2
 800cdf8:	440b      	add	r3, r1
 800cdfa:	3316      	adds	r3, #22
 800cdfc:	781b      	ldrb	r3, [r3, #0]
 800cdfe:	e00b      	b.n	800ce18 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ce00:	78fb      	ldrb	r3, [r7, #3]
 800ce02:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ce06:	68f9      	ldr	r1, [r7, #12]
 800ce08:	4613      	mov	r3, r2
 800ce0a:	00db      	lsls	r3, r3, #3
 800ce0c:	4413      	add	r3, r2
 800ce0e:	009b      	lsls	r3, r3, #2
 800ce10:	440b      	add	r3, r1
 800ce12:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800ce16:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ce18:	4618      	mov	r0, r3
 800ce1a:	3714      	adds	r7, #20
 800ce1c:	46bd      	mov	sp, r7
 800ce1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce22:	4770      	bx	lr

0800ce24 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ce24:	b580      	push	{r7, lr}
 800ce26:	b084      	sub	sp, #16
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	6078      	str	r0, [r7, #4]
 800ce2c:	460b      	mov	r3, r1
 800ce2e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce30:	2300      	movs	r3, #0
 800ce32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce34:	2300      	movs	r3, #0
 800ce36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ce3e:	78fa      	ldrb	r2, [r7, #3]
 800ce40:	4611      	mov	r1, r2
 800ce42:	4618      	mov	r0, r3
 800ce44:	f7f9 fc69 	bl	800671a <HAL_PCD_SetAddress>
 800ce48:	4603      	mov	r3, r0
 800ce4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ce4c:	7bfb      	ldrb	r3, [r7, #15]
 800ce4e:	4618      	mov	r0, r3
 800ce50:	f000 f874 	bl	800cf3c <USBD_Get_USB_Status>
 800ce54:	4603      	mov	r3, r0
 800ce56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ce58:	7bbb      	ldrb	r3, [r7, #14]
}
 800ce5a:	4618      	mov	r0, r3
 800ce5c:	3710      	adds	r7, #16
 800ce5e:	46bd      	mov	sp, r7
 800ce60:	bd80      	pop	{r7, pc}

0800ce62 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ce62:	b580      	push	{r7, lr}
 800ce64:	b086      	sub	sp, #24
 800ce66:	af00      	add	r7, sp, #0
 800ce68:	60f8      	str	r0, [r7, #12]
 800ce6a:	607a      	str	r2, [r7, #4]
 800ce6c:	603b      	str	r3, [r7, #0]
 800ce6e:	460b      	mov	r3, r1
 800ce70:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce72:	2300      	movs	r3, #0
 800ce74:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce76:	2300      	movs	r3, #0
 800ce78:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ce80:	7af9      	ldrb	r1, [r7, #11]
 800ce82:	683b      	ldr	r3, [r7, #0]
 800ce84:	687a      	ldr	r2, [r7, #4]
 800ce86:	f7f9 fd73 	bl	8006970 <HAL_PCD_EP_Transmit>
 800ce8a:	4603      	mov	r3, r0
 800ce8c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ce8e:	7dfb      	ldrb	r3, [r7, #23]
 800ce90:	4618      	mov	r0, r3
 800ce92:	f000 f853 	bl	800cf3c <USBD_Get_USB_Status>
 800ce96:	4603      	mov	r3, r0
 800ce98:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ce9a:	7dbb      	ldrb	r3, [r7, #22]
}
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	3718      	adds	r7, #24
 800cea0:	46bd      	mov	sp, r7
 800cea2:	bd80      	pop	{r7, pc}

0800cea4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cea4:	b580      	push	{r7, lr}
 800cea6:	b086      	sub	sp, #24
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	60f8      	str	r0, [r7, #12]
 800ceac:	607a      	str	r2, [r7, #4]
 800ceae:	603b      	str	r3, [r7, #0]
 800ceb0:	460b      	mov	r3, r1
 800ceb2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ceb8:	2300      	movs	r3, #0
 800ceba:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800cec2:	7af9      	ldrb	r1, [r7, #11]
 800cec4:	683b      	ldr	r3, [r7, #0]
 800cec6:	687a      	ldr	r2, [r7, #4]
 800cec8:	f7f9 fcff 	bl	80068ca <HAL_PCD_EP_Receive>
 800cecc:	4603      	mov	r3, r0
 800cece:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ced0:	7dfb      	ldrb	r3, [r7, #23]
 800ced2:	4618      	mov	r0, r3
 800ced4:	f000 f832 	bl	800cf3c <USBD_Get_USB_Status>
 800ced8:	4603      	mov	r3, r0
 800ceda:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cedc:	7dbb      	ldrb	r3, [r7, #22]
}
 800cede:	4618      	mov	r0, r3
 800cee0:	3718      	adds	r7, #24
 800cee2:	46bd      	mov	sp, r7
 800cee4:	bd80      	pop	{r7, pc}

0800cee6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cee6:	b580      	push	{r7, lr}
 800cee8:	b082      	sub	sp, #8
 800ceea:	af00      	add	r7, sp, #0
 800ceec:	6078      	str	r0, [r7, #4]
 800ceee:	460b      	mov	r3, r1
 800cef0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cef8:	78fa      	ldrb	r2, [r7, #3]
 800cefa:	4611      	mov	r1, r2
 800cefc:	4618      	mov	r0, r3
 800cefe:	f7f9 fd1f 	bl	8006940 <HAL_PCD_EP_GetRxCount>
 800cf02:	4603      	mov	r3, r0
}
 800cf04:	4618      	mov	r0, r3
 800cf06:	3708      	adds	r7, #8
 800cf08:	46bd      	mov	sp, r7
 800cf0a:	bd80      	pop	{r7, pc}

0800cf0c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800cf0c:	b480      	push	{r7}
 800cf0e:	b083      	sub	sp, #12
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800cf14:	4b03      	ldr	r3, [pc, #12]	@ (800cf24 <USBD_static_malloc+0x18>)
}
 800cf16:	4618      	mov	r0, r3
 800cf18:	370c      	adds	r7, #12
 800cf1a:	46bd      	mov	sp, r7
 800cf1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf20:	4770      	bx	lr
 800cf22:	bf00      	nop
 800cf24:	200020c4 	.word	0x200020c4

0800cf28 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800cf28:	b480      	push	{r7}
 800cf2a:	b083      	sub	sp, #12
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	6078      	str	r0, [r7, #4]

}
 800cf30:	bf00      	nop
 800cf32:	370c      	adds	r7, #12
 800cf34:	46bd      	mov	sp, r7
 800cf36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf3a:	4770      	bx	lr

0800cf3c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cf3c:	b480      	push	{r7}
 800cf3e:	b085      	sub	sp, #20
 800cf40:	af00      	add	r7, sp, #0
 800cf42:	4603      	mov	r3, r0
 800cf44:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf46:	2300      	movs	r3, #0
 800cf48:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800cf4a:	79fb      	ldrb	r3, [r7, #7]
 800cf4c:	2b03      	cmp	r3, #3
 800cf4e:	d817      	bhi.n	800cf80 <USBD_Get_USB_Status+0x44>
 800cf50:	a201      	add	r2, pc, #4	@ (adr r2, 800cf58 <USBD_Get_USB_Status+0x1c>)
 800cf52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf56:	bf00      	nop
 800cf58:	0800cf69 	.word	0x0800cf69
 800cf5c:	0800cf6f 	.word	0x0800cf6f
 800cf60:	0800cf75 	.word	0x0800cf75
 800cf64:	0800cf7b 	.word	0x0800cf7b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800cf68:	2300      	movs	r3, #0
 800cf6a:	73fb      	strb	r3, [r7, #15]
    break;
 800cf6c:	e00b      	b.n	800cf86 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cf6e:	2303      	movs	r3, #3
 800cf70:	73fb      	strb	r3, [r7, #15]
    break;
 800cf72:	e008      	b.n	800cf86 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cf74:	2301      	movs	r3, #1
 800cf76:	73fb      	strb	r3, [r7, #15]
    break;
 800cf78:	e005      	b.n	800cf86 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cf7a:	2303      	movs	r3, #3
 800cf7c:	73fb      	strb	r3, [r7, #15]
    break;
 800cf7e:	e002      	b.n	800cf86 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800cf80:	2303      	movs	r3, #3
 800cf82:	73fb      	strb	r3, [r7, #15]
    break;
 800cf84:	bf00      	nop
  }
  return usb_status;
 800cf86:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf88:	4618      	mov	r0, r3
 800cf8a:	3714      	adds	r7, #20
 800cf8c:	46bd      	mov	sp, r7
 800cf8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf92:	4770      	bx	lr

0800cf94 <swapfunc>:
 800cf94:	2b02      	cmp	r3, #2
 800cf96:	b510      	push	{r4, lr}
 800cf98:	d00a      	beq.n	800cfb0 <swapfunc+0x1c>
 800cf9a:	0892      	lsrs	r2, r2, #2
 800cf9c:	3a01      	subs	r2, #1
 800cf9e:	6803      	ldr	r3, [r0, #0]
 800cfa0:	680c      	ldr	r4, [r1, #0]
 800cfa2:	f840 4b04 	str.w	r4, [r0], #4
 800cfa6:	2a00      	cmp	r2, #0
 800cfa8:	f841 3b04 	str.w	r3, [r1], #4
 800cfac:	dcf6      	bgt.n	800cf9c <swapfunc+0x8>
 800cfae:	bd10      	pop	{r4, pc}
 800cfb0:	4402      	add	r2, r0
 800cfb2:	780c      	ldrb	r4, [r1, #0]
 800cfb4:	7803      	ldrb	r3, [r0, #0]
 800cfb6:	f800 4b01 	strb.w	r4, [r0], #1
 800cfba:	f801 3b01 	strb.w	r3, [r1], #1
 800cfbe:	1a13      	subs	r3, r2, r0
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	dcf6      	bgt.n	800cfb2 <swapfunc+0x1e>
 800cfc4:	e7f3      	b.n	800cfae <swapfunc+0x1a>

0800cfc6 <med3.constprop.0>:
 800cfc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfc8:	460f      	mov	r7, r1
 800cfca:	4616      	mov	r6, r2
 800cfcc:	4604      	mov	r4, r0
 800cfce:	461d      	mov	r5, r3
 800cfd0:	4798      	blx	r3
 800cfd2:	2800      	cmp	r0, #0
 800cfd4:	4631      	mov	r1, r6
 800cfd6:	4638      	mov	r0, r7
 800cfd8:	da0c      	bge.n	800cff4 <med3.constprop.0+0x2e>
 800cfda:	47a8      	blx	r5
 800cfdc:	2800      	cmp	r0, #0
 800cfde:	da02      	bge.n	800cfe6 <med3.constprop.0+0x20>
 800cfe0:	463c      	mov	r4, r7
 800cfe2:	4620      	mov	r0, r4
 800cfe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cfe6:	4631      	mov	r1, r6
 800cfe8:	4620      	mov	r0, r4
 800cfea:	47a8      	blx	r5
 800cfec:	2800      	cmp	r0, #0
 800cfee:	daf8      	bge.n	800cfe2 <med3.constprop.0+0x1c>
 800cff0:	4634      	mov	r4, r6
 800cff2:	e7f6      	b.n	800cfe2 <med3.constprop.0+0x1c>
 800cff4:	47a8      	blx	r5
 800cff6:	2800      	cmp	r0, #0
 800cff8:	dcf2      	bgt.n	800cfe0 <med3.constprop.0+0x1a>
 800cffa:	4631      	mov	r1, r6
 800cffc:	4620      	mov	r0, r4
 800cffe:	47a8      	blx	r5
 800d000:	2800      	cmp	r0, #0
 800d002:	daf5      	bge.n	800cff0 <med3.constprop.0+0x2a>
 800d004:	e7ed      	b.n	800cfe2 <med3.constprop.0+0x1c>

0800d006 <qsort>:
 800d006:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d00a:	b095      	sub	sp, #84	@ 0x54
 800d00c:	4606      	mov	r6, r0
 800d00e:	9300      	str	r3, [sp, #0]
 800d010:	ea40 0302 	orr.w	r3, r0, r2
 800d014:	079b      	lsls	r3, r3, #30
 800d016:	4614      	mov	r4, r2
 800d018:	d118      	bne.n	800d04c <qsort+0x46>
 800d01a:	f1b2 0804 	subs.w	r8, r2, #4
 800d01e:	bf18      	it	ne
 800d020:	f04f 0801 	movne.w	r8, #1
 800d024:	2300      	movs	r3, #0
 800d026:	9301      	str	r3, [sp, #4]
 800d028:	fb04 f701 	mul.w	r7, r4, r1
 800d02c:	19f3      	adds	r3, r6, r7
 800d02e:	2906      	cmp	r1, #6
 800d030:	eb06 0b04 	add.w	fp, r6, r4
 800d034:	9302      	str	r3, [sp, #8]
 800d036:	d828      	bhi.n	800d08a <qsort+0x84>
 800d038:	9b02      	ldr	r3, [sp, #8]
 800d03a:	459b      	cmp	fp, r3
 800d03c:	d310      	bcc.n	800d060 <qsort+0x5a>
 800d03e:	9b01      	ldr	r3, [sp, #4]
 800d040:	2b00      	cmp	r3, #0
 800d042:	f040 8117 	bne.w	800d274 <qsort+0x26e>
 800d046:	b015      	add	sp, #84	@ 0x54
 800d048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d04c:	f04f 0802 	mov.w	r8, #2
 800d050:	e7e8      	b.n	800d024 <qsort+0x1e>
 800d052:	4643      	mov	r3, r8
 800d054:	4622      	mov	r2, r4
 800d056:	4639      	mov	r1, r7
 800d058:	4628      	mov	r0, r5
 800d05a:	f7ff ff9b 	bl	800cf94 <swapfunc>
 800d05e:	e00f      	b.n	800d080 <qsort+0x7a>
 800d060:	465d      	mov	r5, fp
 800d062:	e00e      	b.n	800d082 <qsort+0x7c>
 800d064:	1b2f      	subs	r7, r5, r4
 800d066:	9b00      	ldr	r3, [sp, #0]
 800d068:	4629      	mov	r1, r5
 800d06a:	4638      	mov	r0, r7
 800d06c:	4798      	blx	r3
 800d06e:	2800      	cmp	r0, #0
 800d070:	dd09      	ble.n	800d086 <qsort+0x80>
 800d072:	f1b8 0f00 	cmp.w	r8, #0
 800d076:	d1ec      	bne.n	800d052 <qsort+0x4c>
 800d078:	682b      	ldr	r3, [r5, #0]
 800d07a:	683a      	ldr	r2, [r7, #0]
 800d07c:	602a      	str	r2, [r5, #0]
 800d07e:	603b      	str	r3, [r7, #0]
 800d080:	463d      	mov	r5, r7
 800d082:	42ae      	cmp	r6, r5
 800d084:	d3ee      	bcc.n	800d064 <qsort+0x5e>
 800d086:	44a3      	add	fp, r4
 800d088:	e7d6      	b.n	800d038 <qsort+0x32>
 800d08a:	ea4f 0951 	mov.w	r9, r1, lsr #1
 800d08e:	1b3f      	subs	r7, r7, r4
 800d090:	2907      	cmp	r1, #7
 800d092:	fb04 6909 	mla	r9, r4, r9, r6
 800d096:	4437      	add	r7, r6
 800d098:	d021      	beq.n	800d0de <qsort+0xd8>
 800d09a:	2928      	cmp	r1, #40	@ 0x28
 800d09c:	d944      	bls.n	800d128 <qsort+0x122>
 800d09e:	08cd      	lsrs	r5, r1, #3
 800d0a0:	4365      	muls	r5, r4
 800d0a2:	9b00      	ldr	r3, [sp, #0]
 800d0a4:	eb06 0245 	add.w	r2, r6, r5, lsl #1
 800d0a8:	1971      	adds	r1, r6, r5
 800d0aa:	4630      	mov	r0, r6
 800d0ac:	f7ff ff8b 	bl	800cfc6 <med3.constprop.0>
 800d0b0:	4649      	mov	r1, r9
 800d0b2:	eb09 0205 	add.w	r2, r9, r5
 800d0b6:	9b00      	ldr	r3, [sp, #0]
 800d0b8:	4682      	mov	sl, r0
 800d0ba:	1b48      	subs	r0, r1, r5
 800d0bc:	f7ff ff83 	bl	800cfc6 <med3.constprop.0>
 800d0c0:	463a      	mov	r2, r7
 800d0c2:	9b00      	ldr	r3, [sp, #0]
 800d0c4:	4681      	mov	r9, r0
 800d0c6:	1b79      	subs	r1, r7, r5
 800d0c8:	eba7 0045 	sub.w	r0, r7, r5, lsl #1
 800d0cc:	f7ff ff7b 	bl	800cfc6 <med3.constprop.0>
 800d0d0:	4602      	mov	r2, r0
 800d0d2:	4649      	mov	r1, r9
 800d0d4:	9b00      	ldr	r3, [sp, #0]
 800d0d6:	4650      	mov	r0, sl
 800d0d8:	f7ff ff75 	bl	800cfc6 <med3.constprop.0>
 800d0dc:	4681      	mov	r9, r0
 800d0de:	f1b8 0f00 	cmp.w	r8, #0
 800d0e2:	d124      	bne.n	800d12e <qsort+0x128>
 800d0e4:	6833      	ldr	r3, [r6, #0]
 800d0e6:	f8d9 2000 	ldr.w	r2, [r9]
 800d0ea:	6032      	str	r2, [r6, #0]
 800d0ec:	f8c9 3000 	str.w	r3, [r9]
 800d0f0:	46d9      	mov	r9, fp
 800d0f2:	46ba      	mov	sl, r7
 800d0f4:	465d      	mov	r5, fp
 800d0f6:	2300      	movs	r3, #0
 800d0f8:	45b9      	cmp	r9, r7
 800d0fa:	d857      	bhi.n	800d1ac <qsort+0x1a6>
 800d0fc:	9303      	str	r3, [sp, #12]
 800d0fe:	4631      	mov	r1, r6
 800d100:	9b00      	ldr	r3, [sp, #0]
 800d102:	4648      	mov	r0, r9
 800d104:	4798      	blx	r3
 800d106:	2800      	cmp	r0, #0
 800d108:	9b03      	ldr	r3, [sp, #12]
 800d10a:	dc2c      	bgt.n	800d166 <qsort+0x160>
 800d10c:	d10a      	bne.n	800d124 <qsort+0x11e>
 800d10e:	f1b8 0f00 	cmp.w	r8, #0
 800d112:	d113      	bne.n	800d13c <qsort+0x136>
 800d114:	682b      	ldr	r3, [r5, #0]
 800d116:	f8d9 2000 	ldr.w	r2, [r9]
 800d11a:	602a      	str	r2, [r5, #0]
 800d11c:	f8c9 3000 	str.w	r3, [r9]
 800d120:	4425      	add	r5, r4
 800d122:	2301      	movs	r3, #1
 800d124:	44a1      	add	r9, r4
 800d126:	e7e7      	b.n	800d0f8 <qsort+0xf2>
 800d128:	463a      	mov	r2, r7
 800d12a:	46b2      	mov	sl, r6
 800d12c:	e7d1      	b.n	800d0d2 <qsort+0xcc>
 800d12e:	4643      	mov	r3, r8
 800d130:	4622      	mov	r2, r4
 800d132:	4649      	mov	r1, r9
 800d134:	4630      	mov	r0, r6
 800d136:	f7ff ff2d 	bl	800cf94 <swapfunc>
 800d13a:	e7d9      	b.n	800d0f0 <qsort+0xea>
 800d13c:	4643      	mov	r3, r8
 800d13e:	4622      	mov	r2, r4
 800d140:	4649      	mov	r1, r9
 800d142:	4628      	mov	r0, r5
 800d144:	f7ff ff26 	bl	800cf94 <swapfunc>
 800d148:	e7ea      	b.n	800d120 <qsort+0x11a>
 800d14a:	d10b      	bne.n	800d164 <qsort+0x15e>
 800d14c:	f1b8 0f00 	cmp.w	r8, #0
 800d150:	d11e      	bne.n	800d190 <qsort+0x18a>
 800d152:	683b      	ldr	r3, [r7, #0]
 800d154:	f8da 2000 	ldr.w	r2, [sl]
 800d158:	603a      	str	r2, [r7, #0]
 800d15a:	f8ca 3000 	str.w	r3, [sl]
 800d15e:	ebaa 0a04 	sub.w	sl, sl, r4
 800d162:	2301      	movs	r3, #1
 800d164:	1b3f      	subs	r7, r7, r4
 800d166:	45b9      	cmp	r9, r7
 800d168:	d820      	bhi.n	800d1ac <qsort+0x1a6>
 800d16a:	9303      	str	r3, [sp, #12]
 800d16c:	4631      	mov	r1, r6
 800d16e:	9b00      	ldr	r3, [sp, #0]
 800d170:	4638      	mov	r0, r7
 800d172:	4798      	blx	r3
 800d174:	2800      	cmp	r0, #0
 800d176:	9b03      	ldr	r3, [sp, #12]
 800d178:	dae7      	bge.n	800d14a <qsort+0x144>
 800d17a:	f1b8 0f00 	cmp.w	r8, #0
 800d17e:	d10e      	bne.n	800d19e <qsort+0x198>
 800d180:	f8d9 3000 	ldr.w	r3, [r9]
 800d184:	683a      	ldr	r2, [r7, #0]
 800d186:	f8c9 2000 	str.w	r2, [r9]
 800d18a:	603b      	str	r3, [r7, #0]
 800d18c:	1b3f      	subs	r7, r7, r4
 800d18e:	e7c8      	b.n	800d122 <qsort+0x11c>
 800d190:	4643      	mov	r3, r8
 800d192:	4622      	mov	r2, r4
 800d194:	4651      	mov	r1, sl
 800d196:	4638      	mov	r0, r7
 800d198:	f7ff fefc 	bl	800cf94 <swapfunc>
 800d19c:	e7df      	b.n	800d15e <qsort+0x158>
 800d19e:	4643      	mov	r3, r8
 800d1a0:	4622      	mov	r2, r4
 800d1a2:	4639      	mov	r1, r7
 800d1a4:	4648      	mov	r0, r9
 800d1a6:	f7ff fef5 	bl	800cf94 <swapfunc>
 800d1aa:	e7ef      	b.n	800d18c <qsort+0x186>
 800d1ac:	b9fb      	cbnz	r3, 800d1ee <qsort+0x1e8>
 800d1ae:	9b02      	ldr	r3, [sp, #8]
 800d1b0:	459b      	cmp	fp, r3
 800d1b2:	f4bf af44 	bcs.w	800d03e <qsort+0x38>
 800d1b6:	465d      	mov	r5, fp
 800d1b8:	e015      	b.n	800d1e6 <qsort+0x1e0>
 800d1ba:	4643      	mov	r3, r8
 800d1bc:	4622      	mov	r2, r4
 800d1be:	4639      	mov	r1, r7
 800d1c0:	4628      	mov	r0, r5
 800d1c2:	f7ff fee7 	bl	800cf94 <swapfunc>
 800d1c6:	e00d      	b.n	800d1e4 <qsort+0x1de>
 800d1c8:	1b2f      	subs	r7, r5, r4
 800d1ca:	9b00      	ldr	r3, [sp, #0]
 800d1cc:	4629      	mov	r1, r5
 800d1ce:	4638      	mov	r0, r7
 800d1d0:	4798      	blx	r3
 800d1d2:	2800      	cmp	r0, #0
 800d1d4:	dd09      	ble.n	800d1ea <qsort+0x1e4>
 800d1d6:	f1b8 0f00 	cmp.w	r8, #0
 800d1da:	d1ee      	bne.n	800d1ba <qsort+0x1b4>
 800d1dc:	682b      	ldr	r3, [r5, #0]
 800d1de:	683a      	ldr	r2, [r7, #0]
 800d1e0:	602a      	str	r2, [r5, #0]
 800d1e2:	603b      	str	r3, [r7, #0]
 800d1e4:	463d      	mov	r5, r7
 800d1e6:	42ae      	cmp	r6, r5
 800d1e8:	d3ee      	bcc.n	800d1c8 <qsort+0x1c2>
 800d1ea:	44a3      	add	fp, r4
 800d1ec:	e7df      	b.n	800d1ae <qsort+0x1a8>
 800d1ee:	eba9 0b05 	sub.w	fp, r9, r5
 800d1f2:	1baa      	subs	r2, r5, r6
 800d1f4:	455a      	cmp	r2, fp
 800d1f6:	bfa8      	it	ge
 800d1f8:	465a      	movge	r2, fp
 800d1fa:	b12a      	cbz	r2, 800d208 <qsort+0x202>
 800d1fc:	4643      	mov	r3, r8
 800d1fe:	eba9 0102 	sub.w	r1, r9, r2
 800d202:	4630      	mov	r0, r6
 800d204:	f7ff fec6 	bl	800cf94 <swapfunc>
 800d208:	9b02      	ldr	r3, [sp, #8]
 800d20a:	eba3 020a 	sub.w	r2, r3, sl
 800d20e:	ebaa 0507 	sub.w	r5, sl, r7
 800d212:	1b12      	subs	r2, r2, r4
 800d214:	42aa      	cmp	r2, r5
 800d216:	bf28      	it	cs
 800d218:	462a      	movcs	r2, r5
 800d21a:	b12a      	cbz	r2, 800d228 <qsort+0x222>
 800d21c:	9902      	ldr	r1, [sp, #8]
 800d21e:	4643      	mov	r3, r8
 800d220:	1a89      	subs	r1, r1, r2
 800d222:	4648      	mov	r0, r9
 800d224:	f7ff feb6 	bl	800cf94 <swapfunc>
 800d228:	9b02      	ldr	r3, [sp, #8]
 800d22a:	455d      	cmp	r5, fp
 800d22c:	465f      	mov	r7, fp
 800d22e:	eba3 0005 	sub.w	r0, r3, r5
 800d232:	d904      	bls.n	800d23e <qsort+0x238>
 800d234:	4633      	mov	r3, r6
 800d236:	462f      	mov	r7, r5
 800d238:	4606      	mov	r6, r0
 800d23a:	465d      	mov	r5, fp
 800d23c:	4618      	mov	r0, r3
 800d23e:	42a5      	cmp	r5, r4
 800d240:	d921      	bls.n	800d286 <qsort+0x280>
 800d242:	fbb5 f1f4 	udiv	r1, r5, r4
 800d246:	9b01      	ldr	r3, [sp, #4]
 800d248:	2b07      	cmp	r3, #7
 800d24a:	d80d      	bhi.n	800d268 <qsort+0x262>
 800d24c:	fbb7 f7f4 	udiv	r7, r7, r4
 800d250:	aa14      	add	r2, sp, #80	@ 0x50
 800d252:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d256:	f843 6c40 	str.w	r6, [r3, #-64]
 800d25a:	f843 7c3c 	str.w	r7, [r3, #-60]
 800d25e:	9b01      	ldr	r3, [sp, #4]
 800d260:	3301      	adds	r3, #1
 800d262:	9301      	str	r3, [sp, #4]
 800d264:	4606      	mov	r6, r0
 800d266:	e6df      	b.n	800d028 <qsort+0x22>
 800d268:	9b00      	ldr	r3, [sp, #0]
 800d26a:	4622      	mov	r2, r4
 800d26c:	f7ff fecb 	bl	800d006 <qsort>
 800d270:	42a7      	cmp	r7, r4
 800d272:	d80b      	bhi.n	800d28c <qsort+0x286>
 800d274:	9b01      	ldr	r3, [sp, #4]
 800d276:	aa14      	add	r2, sp, #80	@ 0x50
 800d278:	3b01      	subs	r3, #1
 800d27a:	9301      	str	r3, [sp, #4]
 800d27c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d280:	e953 0110 	ldrd	r0, r1, [r3, #-64]	@ 0x40
 800d284:	e7ee      	b.n	800d264 <qsort+0x25e>
 800d286:	42a7      	cmp	r7, r4
 800d288:	f67f aed9 	bls.w	800d03e <qsort+0x38>
 800d28c:	fbb7 f1f4 	udiv	r1, r7, r4
 800d290:	4630      	mov	r0, r6
 800d292:	e7e7      	b.n	800d264 <qsort+0x25e>

0800d294 <__cvt>:
 800d294:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d298:	ec57 6b10 	vmov	r6, r7, d0
 800d29c:	2f00      	cmp	r7, #0
 800d29e:	460c      	mov	r4, r1
 800d2a0:	4619      	mov	r1, r3
 800d2a2:	463b      	mov	r3, r7
 800d2a4:	bfbb      	ittet	lt
 800d2a6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800d2aa:	461f      	movlt	r7, r3
 800d2ac:	2300      	movge	r3, #0
 800d2ae:	232d      	movlt	r3, #45	@ 0x2d
 800d2b0:	700b      	strb	r3, [r1, #0]
 800d2b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d2b4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800d2b8:	4691      	mov	r9, r2
 800d2ba:	f023 0820 	bic.w	r8, r3, #32
 800d2be:	bfbc      	itt	lt
 800d2c0:	4632      	movlt	r2, r6
 800d2c2:	4616      	movlt	r6, r2
 800d2c4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d2c8:	d005      	beq.n	800d2d6 <__cvt+0x42>
 800d2ca:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800d2ce:	d100      	bne.n	800d2d2 <__cvt+0x3e>
 800d2d0:	3401      	adds	r4, #1
 800d2d2:	2102      	movs	r1, #2
 800d2d4:	e000      	b.n	800d2d8 <__cvt+0x44>
 800d2d6:	2103      	movs	r1, #3
 800d2d8:	ab03      	add	r3, sp, #12
 800d2da:	9301      	str	r3, [sp, #4]
 800d2dc:	ab02      	add	r3, sp, #8
 800d2de:	9300      	str	r3, [sp, #0]
 800d2e0:	ec47 6b10 	vmov	d0, r6, r7
 800d2e4:	4653      	mov	r3, sl
 800d2e6:	4622      	mov	r2, r4
 800d2e8:	f000 fe3a 	bl	800df60 <_dtoa_r>
 800d2ec:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800d2f0:	4605      	mov	r5, r0
 800d2f2:	d119      	bne.n	800d328 <__cvt+0x94>
 800d2f4:	f019 0f01 	tst.w	r9, #1
 800d2f8:	d00e      	beq.n	800d318 <__cvt+0x84>
 800d2fa:	eb00 0904 	add.w	r9, r0, r4
 800d2fe:	2200      	movs	r2, #0
 800d300:	2300      	movs	r3, #0
 800d302:	4630      	mov	r0, r6
 800d304:	4639      	mov	r1, r7
 800d306:	f7f3 fbdf 	bl	8000ac8 <__aeabi_dcmpeq>
 800d30a:	b108      	cbz	r0, 800d310 <__cvt+0x7c>
 800d30c:	f8cd 900c 	str.w	r9, [sp, #12]
 800d310:	2230      	movs	r2, #48	@ 0x30
 800d312:	9b03      	ldr	r3, [sp, #12]
 800d314:	454b      	cmp	r3, r9
 800d316:	d31e      	bcc.n	800d356 <__cvt+0xc2>
 800d318:	9b03      	ldr	r3, [sp, #12]
 800d31a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d31c:	1b5b      	subs	r3, r3, r5
 800d31e:	4628      	mov	r0, r5
 800d320:	6013      	str	r3, [r2, #0]
 800d322:	b004      	add	sp, #16
 800d324:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d328:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d32c:	eb00 0904 	add.w	r9, r0, r4
 800d330:	d1e5      	bne.n	800d2fe <__cvt+0x6a>
 800d332:	7803      	ldrb	r3, [r0, #0]
 800d334:	2b30      	cmp	r3, #48	@ 0x30
 800d336:	d10a      	bne.n	800d34e <__cvt+0xba>
 800d338:	2200      	movs	r2, #0
 800d33a:	2300      	movs	r3, #0
 800d33c:	4630      	mov	r0, r6
 800d33e:	4639      	mov	r1, r7
 800d340:	f7f3 fbc2 	bl	8000ac8 <__aeabi_dcmpeq>
 800d344:	b918      	cbnz	r0, 800d34e <__cvt+0xba>
 800d346:	f1c4 0401 	rsb	r4, r4, #1
 800d34a:	f8ca 4000 	str.w	r4, [sl]
 800d34e:	f8da 3000 	ldr.w	r3, [sl]
 800d352:	4499      	add	r9, r3
 800d354:	e7d3      	b.n	800d2fe <__cvt+0x6a>
 800d356:	1c59      	adds	r1, r3, #1
 800d358:	9103      	str	r1, [sp, #12]
 800d35a:	701a      	strb	r2, [r3, #0]
 800d35c:	e7d9      	b.n	800d312 <__cvt+0x7e>

0800d35e <__exponent>:
 800d35e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d360:	2900      	cmp	r1, #0
 800d362:	bfba      	itte	lt
 800d364:	4249      	neglt	r1, r1
 800d366:	232d      	movlt	r3, #45	@ 0x2d
 800d368:	232b      	movge	r3, #43	@ 0x2b
 800d36a:	2909      	cmp	r1, #9
 800d36c:	7002      	strb	r2, [r0, #0]
 800d36e:	7043      	strb	r3, [r0, #1]
 800d370:	dd29      	ble.n	800d3c6 <__exponent+0x68>
 800d372:	f10d 0307 	add.w	r3, sp, #7
 800d376:	461d      	mov	r5, r3
 800d378:	270a      	movs	r7, #10
 800d37a:	461a      	mov	r2, r3
 800d37c:	fbb1 f6f7 	udiv	r6, r1, r7
 800d380:	fb07 1416 	mls	r4, r7, r6, r1
 800d384:	3430      	adds	r4, #48	@ 0x30
 800d386:	f802 4c01 	strb.w	r4, [r2, #-1]
 800d38a:	460c      	mov	r4, r1
 800d38c:	2c63      	cmp	r4, #99	@ 0x63
 800d38e:	f103 33ff 	add.w	r3, r3, #4294967295
 800d392:	4631      	mov	r1, r6
 800d394:	dcf1      	bgt.n	800d37a <__exponent+0x1c>
 800d396:	3130      	adds	r1, #48	@ 0x30
 800d398:	1e94      	subs	r4, r2, #2
 800d39a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d39e:	1c41      	adds	r1, r0, #1
 800d3a0:	4623      	mov	r3, r4
 800d3a2:	42ab      	cmp	r3, r5
 800d3a4:	d30a      	bcc.n	800d3bc <__exponent+0x5e>
 800d3a6:	f10d 0309 	add.w	r3, sp, #9
 800d3aa:	1a9b      	subs	r3, r3, r2
 800d3ac:	42ac      	cmp	r4, r5
 800d3ae:	bf88      	it	hi
 800d3b0:	2300      	movhi	r3, #0
 800d3b2:	3302      	adds	r3, #2
 800d3b4:	4403      	add	r3, r0
 800d3b6:	1a18      	subs	r0, r3, r0
 800d3b8:	b003      	add	sp, #12
 800d3ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d3bc:	f813 6b01 	ldrb.w	r6, [r3], #1
 800d3c0:	f801 6f01 	strb.w	r6, [r1, #1]!
 800d3c4:	e7ed      	b.n	800d3a2 <__exponent+0x44>
 800d3c6:	2330      	movs	r3, #48	@ 0x30
 800d3c8:	3130      	adds	r1, #48	@ 0x30
 800d3ca:	7083      	strb	r3, [r0, #2]
 800d3cc:	70c1      	strb	r1, [r0, #3]
 800d3ce:	1d03      	adds	r3, r0, #4
 800d3d0:	e7f1      	b.n	800d3b6 <__exponent+0x58>
	...

0800d3d4 <_printf_float>:
 800d3d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3d8:	b08d      	sub	sp, #52	@ 0x34
 800d3da:	460c      	mov	r4, r1
 800d3dc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800d3e0:	4616      	mov	r6, r2
 800d3e2:	461f      	mov	r7, r3
 800d3e4:	4605      	mov	r5, r0
 800d3e6:	f000 fcbb 	bl	800dd60 <_localeconv_r>
 800d3ea:	6803      	ldr	r3, [r0, #0]
 800d3ec:	9304      	str	r3, [sp, #16]
 800d3ee:	4618      	mov	r0, r3
 800d3f0:	f7f2 ff3e 	bl	8000270 <strlen>
 800d3f4:	2300      	movs	r3, #0
 800d3f6:	930a      	str	r3, [sp, #40]	@ 0x28
 800d3f8:	f8d8 3000 	ldr.w	r3, [r8]
 800d3fc:	9005      	str	r0, [sp, #20]
 800d3fe:	3307      	adds	r3, #7
 800d400:	f023 0307 	bic.w	r3, r3, #7
 800d404:	f103 0208 	add.w	r2, r3, #8
 800d408:	f894 a018 	ldrb.w	sl, [r4, #24]
 800d40c:	f8d4 b000 	ldr.w	fp, [r4]
 800d410:	f8c8 2000 	str.w	r2, [r8]
 800d414:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d418:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800d41c:	9307      	str	r3, [sp, #28]
 800d41e:	f8cd 8018 	str.w	r8, [sp, #24]
 800d422:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800d426:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d42a:	4b9c      	ldr	r3, [pc, #624]	@ (800d69c <_printf_float+0x2c8>)
 800d42c:	f04f 32ff 	mov.w	r2, #4294967295
 800d430:	f7f3 fb7c 	bl	8000b2c <__aeabi_dcmpun>
 800d434:	bb70      	cbnz	r0, 800d494 <_printf_float+0xc0>
 800d436:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d43a:	4b98      	ldr	r3, [pc, #608]	@ (800d69c <_printf_float+0x2c8>)
 800d43c:	f04f 32ff 	mov.w	r2, #4294967295
 800d440:	f7f3 fb56 	bl	8000af0 <__aeabi_dcmple>
 800d444:	bb30      	cbnz	r0, 800d494 <_printf_float+0xc0>
 800d446:	2200      	movs	r2, #0
 800d448:	2300      	movs	r3, #0
 800d44a:	4640      	mov	r0, r8
 800d44c:	4649      	mov	r1, r9
 800d44e:	f7f3 fb45 	bl	8000adc <__aeabi_dcmplt>
 800d452:	b110      	cbz	r0, 800d45a <_printf_float+0x86>
 800d454:	232d      	movs	r3, #45	@ 0x2d
 800d456:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d45a:	4a91      	ldr	r2, [pc, #580]	@ (800d6a0 <_printf_float+0x2cc>)
 800d45c:	4b91      	ldr	r3, [pc, #580]	@ (800d6a4 <_printf_float+0x2d0>)
 800d45e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800d462:	bf94      	ite	ls
 800d464:	4690      	movls	r8, r2
 800d466:	4698      	movhi	r8, r3
 800d468:	2303      	movs	r3, #3
 800d46a:	6123      	str	r3, [r4, #16]
 800d46c:	f02b 0304 	bic.w	r3, fp, #4
 800d470:	6023      	str	r3, [r4, #0]
 800d472:	f04f 0900 	mov.w	r9, #0
 800d476:	9700      	str	r7, [sp, #0]
 800d478:	4633      	mov	r3, r6
 800d47a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800d47c:	4621      	mov	r1, r4
 800d47e:	4628      	mov	r0, r5
 800d480:	f000 f9d2 	bl	800d828 <_printf_common>
 800d484:	3001      	adds	r0, #1
 800d486:	f040 808d 	bne.w	800d5a4 <_printf_float+0x1d0>
 800d48a:	f04f 30ff 	mov.w	r0, #4294967295
 800d48e:	b00d      	add	sp, #52	@ 0x34
 800d490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d494:	4642      	mov	r2, r8
 800d496:	464b      	mov	r3, r9
 800d498:	4640      	mov	r0, r8
 800d49a:	4649      	mov	r1, r9
 800d49c:	f7f3 fb46 	bl	8000b2c <__aeabi_dcmpun>
 800d4a0:	b140      	cbz	r0, 800d4b4 <_printf_float+0xe0>
 800d4a2:	464b      	mov	r3, r9
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	bfbc      	itt	lt
 800d4a8:	232d      	movlt	r3, #45	@ 0x2d
 800d4aa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800d4ae:	4a7e      	ldr	r2, [pc, #504]	@ (800d6a8 <_printf_float+0x2d4>)
 800d4b0:	4b7e      	ldr	r3, [pc, #504]	@ (800d6ac <_printf_float+0x2d8>)
 800d4b2:	e7d4      	b.n	800d45e <_printf_float+0x8a>
 800d4b4:	6863      	ldr	r3, [r4, #4]
 800d4b6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800d4ba:	9206      	str	r2, [sp, #24]
 800d4bc:	1c5a      	adds	r2, r3, #1
 800d4be:	d13b      	bne.n	800d538 <_printf_float+0x164>
 800d4c0:	2306      	movs	r3, #6
 800d4c2:	6063      	str	r3, [r4, #4]
 800d4c4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800d4c8:	2300      	movs	r3, #0
 800d4ca:	6022      	str	r2, [r4, #0]
 800d4cc:	9303      	str	r3, [sp, #12]
 800d4ce:	ab0a      	add	r3, sp, #40	@ 0x28
 800d4d0:	e9cd a301 	strd	sl, r3, [sp, #4]
 800d4d4:	ab09      	add	r3, sp, #36	@ 0x24
 800d4d6:	9300      	str	r3, [sp, #0]
 800d4d8:	6861      	ldr	r1, [r4, #4]
 800d4da:	ec49 8b10 	vmov	d0, r8, r9
 800d4de:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800d4e2:	4628      	mov	r0, r5
 800d4e4:	f7ff fed6 	bl	800d294 <__cvt>
 800d4e8:	9b06      	ldr	r3, [sp, #24]
 800d4ea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d4ec:	2b47      	cmp	r3, #71	@ 0x47
 800d4ee:	4680      	mov	r8, r0
 800d4f0:	d129      	bne.n	800d546 <_printf_float+0x172>
 800d4f2:	1cc8      	adds	r0, r1, #3
 800d4f4:	db02      	blt.n	800d4fc <_printf_float+0x128>
 800d4f6:	6863      	ldr	r3, [r4, #4]
 800d4f8:	4299      	cmp	r1, r3
 800d4fa:	dd41      	ble.n	800d580 <_printf_float+0x1ac>
 800d4fc:	f1aa 0a02 	sub.w	sl, sl, #2
 800d500:	fa5f fa8a 	uxtb.w	sl, sl
 800d504:	3901      	subs	r1, #1
 800d506:	4652      	mov	r2, sl
 800d508:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800d50c:	9109      	str	r1, [sp, #36]	@ 0x24
 800d50e:	f7ff ff26 	bl	800d35e <__exponent>
 800d512:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d514:	1813      	adds	r3, r2, r0
 800d516:	2a01      	cmp	r2, #1
 800d518:	4681      	mov	r9, r0
 800d51a:	6123      	str	r3, [r4, #16]
 800d51c:	dc02      	bgt.n	800d524 <_printf_float+0x150>
 800d51e:	6822      	ldr	r2, [r4, #0]
 800d520:	07d2      	lsls	r2, r2, #31
 800d522:	d501      	bpl.n	800d528 <_printf_float+0x154>
 800d524:	3301      	adds	r3, #1
 800d526:	6123      	str	r3, [r4, #16]
 800d528:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d0a2      	beq.n	800d476 <_printf_float+0xa2>
 800d530:	232d      	movs	r3, #45	@ 0x2d
 800d532:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d536:	e79e      	b.n	800d476 <_printf_float+0xa2>
 800d538:	9a06      	ldr	r2, [sp, #24]
 800d53a:	2a47      	cmp	r2, #71	@ 0x47
 800d53c:	d1c2      	bne.n	800d4c4 <_printf_float+0xf0>
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d1c0      	bne.n	800d4c4 <_printf_float+0xf0>
 800d542:	2301      	movs	r3, #1
 800d544:	e7bd      	b.n	800d4c2 <_printf_float+0xee>
 800d546:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d54a:	d9db      	bls.n	800d504 <_printf_float+0x130>
 800d54c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800d550:	d118      	bne.n	800d584 <_printf_float+0x1b0>
 800d552:	2900      	cmp	r1, #0
 800d554:	6863      	ldr	r3, [r4, #4]
 800d556:	dd0b      	ble.n	800d570 <_printf_float+0x19c>
 800d558:	6121      	str	r1, [r4, #16]
 800d55a:	b913      	cbnz	r3, 800d562 <_printf_float+0x18e>
 800d55c:	6822      	ldr	r2, [r4, #0]
 800d55e:	07d0      	lsls	r0, r2, #31
 800d560:	d502      	bpl.n	800d568 <_printf_float+0x194>
 800d562:	3301      	adds	r3, #1
 800d564:	440b      	add	r3, r1
 800d566:	6123      	str	r3, [r4, #16]
 800d568:	65a1      	str	r1, [r4, #88]	@ 0x58
 800d56a:	f04f 0900 	mov.w	r9, #0
 800d56e:	e7db      	b.n	800d528 <_printf_float+0x154>
 800d570:	b913      	cbnz	r3, 800d578 <_printf_float+0x1a4>
 800d572:	6822      	ldr	r2, [r4, #0]
 800d574:	07d2      	lsls	r2, r2, #31
 800d576:	d501      	bpl.n	800d57c <_printf_float+0x1a8>
 800d578:	3302      	adds	r3, #2
 800d57a:	e7f4      	b.n	800d566 <_printf_float+0x192>
 800d57c:	2301      	movs	r3, #1
 800d57e:	e7f2      	b.n	800d566 <_printf_float+0x192>
 800d580:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800d584:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d586:	4299      	cmp	r1, r3
 800d588:	db05      	blt.n	800d596 <_printf_float+0x1c2>
 800d58a:	6823      	ldr	r3, [r4, #0]
 800d58c:	6121      	str	r1, [r4, #16]
 800d58e:	07d8      	lsls	r0, r3, #31
 800d590:	d5ea      	bpl.n	800d568 <_printf_float+0x194>
 800d592:	1c4b      	adds	r3, r1, #1
 800d594:	e7e7      	b.n	800d566 <_printf_float+0x192>
 800d596:	2900      	cmp	r1, #0
 800d598:	bfd4      	ite	le
 800d59a:	f1c1 0202 	rsble	r2, r1, #2
 800d59e:	2201      	movgt	r2, #1
 800d5a0:	4413      	add	r3, r2
 800d5a2:	e7e0      	b.n	800d566 <_printf_float+0x192>
 800d5a4:	6823      	ldr	r3, [r4, #0]
 800d5a6:	055a      	lsls	r2, r3, #21
 800d5a8:	d407      	bmi.n	800d5ba <_printf_float+0x1e6>
 800d5aa:	6923      	ldr	r3, [r4, #16]
 800d5ac:	4642      	mov	r2, r8
 800d5ae:	4631      	mov	r1, r6
 800d5b0:	4628      	mov	r0, r5
 800d5b2:	47b8      	blx	r7
 800d5b4:	3001      	adds	r0, #1
 800d5b6:	d12b      	bne.n	800d610 <_printf_float+0x23c>
 800d5b8:	e767      	b.n	800d48a <_printf_float+0xb6>
 800d5ba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d5be:	f240 80dd 	bls.w	800d77c <_printf_float+0x3a8>
 800d5c2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d5c6:	2200      	movs	r2, #0
 800d5c8:	2300      	movs	r3, #0
 800d5ca:	f7f3 fa7d 	bl	8000ac8 <__aeabi_dcmpeq>
 800d5ce:	2800      	cmp	r0, #0
 800d5d0:	d033      	beq.n	800d63a <_printf_float+0x266>
 800d5d2:	4a37      	ldr	r2, [pc, #220]	@ (800d6b0 <_printf_float+0x2dc>)
 800d5d4:	2301      	movs	r3, #1
 800d5d6:	4631      	mov	r1, r6
 800d5d8:	4628      	mov	r0, r5
 800d5da:	47b8      	blx	r7
 800d5dc:	3001      	adds	r0, #1
 800d5de:	f43f af54 	beq.w	800d48a <_printf_float+0xb6>
 800d5e2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800d5e6:	4543      	cmp	r3, r8
 800d5e8:	db02      	blt.n	800d5f0 <_printf_float+0x21c>
 800d5ea:	6823      	ldr	r3, [r4, #0]
 800d5ec:	07d8      	lsls	r0, r3, #31
 800d5ee:	d50f      	bpl.n	800d610 <_printf_float+0x23c>
 800d5f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d5f4:	4631      	mov	r1, r6
 800d5f6:	4628      	mov	r0, r5
 800d5f8:	47b8      	blx	r7
 800d5fa:	3001      	adds	r0, #1
 800d5fc:	f43f af45 	beq.w	800d48a <_printf_float+0xb6>
 800d600:	f04f 0900 	mov.w	r9, #0
 800d604:	f108 38ff 	add.w	r8, r8, #4294967295
 800d608:	f104 0a1a 	add.w	sl, r4, #26
 800d60c:	45c8      	cmp	r8, r9
 800d60e:	dc09      	bgt.n	800d624 <_printf_float+0x250>
 800d610:	6823      	ldr	r3, [r4, #0]
 800d612:	079b      	lsls	r3, r3, #30
 800d614:	f100 8103 	bmi.w	800d81e <_printf_float+0x44a>
 800d618:	68e0      	ldr	r0, [r4, #12]
 800d61a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d61c:	4298      	cmp	r0, r3
 800d61e:	bfb8      	it	lt
 800d620:	4618      	movlt	r0, r3
 800d622:	e734      	b.n	800d48e <_printf_float+0xba>
 800d624:	2301      	movs	r3, #1
 800d626:	4652      	mov	r2, sl
 800d628:	4631      	mov	r1, r6
 800d62a:	4628      	mov	r0, r5
 800d62c:	47b8      	blx	r7
 800d62e:	3001      	adds	r0, #1
 800d630:	f43f af2b 	beq.w	800d48a <_printf_float+0xb6>
 800d634:	f109 0901 	add.w	r9, r9, #1
 800d638:	e7e8      	b.n	800d60c <_printf_float+0x238>
 800d63a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	dc39      	bgt.n	800d6b4 <_printf_float+0x2e0>
 800d640:	4a1b      	ldr	r2, [pc, #108]	@ (800d6b0 <_printf_float+0x2dc>)
 800d642:	2301      	movs	r3, #1
 800d644:	4631      	mov	r1, r6
 800d646:	4628      	mov	r0, r5
 800d648:	47b8      	blx	r7
 800d64a:	3001      	adds	r0, #1
 800d64c:	f43f af1d 	beq.w	800d48a <_printf_float+0xb6>
 800d650:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800d654:	ea59 0303 	orrs.w	r3, r9, r3
 800d658:	d102      	bne.n	800d660 <_printf_float+0x28c>
 800d65a:	6823      	ldr	r3, [r4, #0]
 800d65c:	07d9      	lsls	r1, r3, #31
 800d65e:	d5d7      	bpl.n	800d610 <_printf_float+0x23c>
 800d660:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d664:	4631      	mov	r1, r6
 800d666:	4628      	mov	r0, r5
 800d668:	47b8      	blx	r7
 800d66a:	3001      	adds	r0, #1
 800d66c:	f43f af0d 	beq.w	800d48a <_printf_float+0xb6>
 800d670:	f04f 0a00 	mov.w	sl, #0
 800d674:	f104 0b1a 	add.w	fp, r4, #26
 800d678:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d67a:	425b      	negs	r3, r3
 800d67c:	4553      	cmp	r3, sl
 800d67e:	dc01      	bgt.n	800d684 <_printf_float+0x2b0>
 800d680:	464b      	mov	r3, r9
 800d682:	e793      	b.n	800d5ac <_printf_float+0x1d8>
 800d684:	2301      	movs	r3, #1
 800d686:	465a      	mov	r2, fp
 800d688:	4631      	mov	r1, r6
 800d68a:	4628      	mov	r0, r5
 800d68c:	47b8      	blx	r7
 800d68e:	3001      	adds	r0, #1
 800d690:	f43f aefb 	beq.w	800d48a <_printf_float+0xb6>
 800d694:	f10a 0a01 	add.w	sl, sl, #1
 800d698:	e7ee      	b.n	800d678 <_printf_float+0x2a4>
 800d69a:	bf00      	nop
 800d69c:	7fefffff 	.word	0x7fefffff
 800d6a0:	08010220 	.word	0x08010220
 800d6a4:	08010224 	.word	0x08010224
 800d6a8:	08010228 	.word	0x08010228
 800d6ac:	0801022c 	.word	0x0801022c
 800d6b0:	08010230 	.word	0x08010230
 800d6b4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d6b6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d6ba:	4553      	cmp	r3, sl
 800d6bc:	bfa8      	it	ge
 800d6be:	4653      	movge	r3, sl
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	4699      	mov	r9, r3
 800d6c4:	dc36      	bgt.n	800d734 <_printf_float+0x360>
 800d6c6:	f04f 0b00 	mov.w	fp, #0
 800d6ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d6ce:	f104 021a 	add.w	r2, r4, #26
 800d6d2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d6d4:	9306      	str	r3, [sp, #24]
 800d6d6:	eba3 0309 	sub.w	r3, r3, r9
 800d6da:	455b      	cmp	r3, fp
 800d6dc:	dc31      	bgt.n	800d742 <_printf_float+0x36e>
 800d6de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d6e0:	459a      	cmp	sl, r3
 800d6e2:	dc3a      	bgt.n	800d75a <_printf_float+0x386>
 800d6e4:	6823      	ldr	r3, [r4, #0]
 800d6e6:	07da      	lsls	r2, r3, #31
 800d6e8:	d437      	bmi.n	800d75a <_printf_float+0x386>
 800d6ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d6ec:	ebaa 0903 	sub.w	r9, sl, r3
 800d6f0:	9b06      	ldr	r3, [sp, #24]
 800d6f2:	ebaa 0303 	sub.w	r3, sl, r3
 800d6f6:	4599      	cmp	r9, r3
 800d6f8:	bfa8      	it	ge
 800d6fa:	4699      	movge	r9, r3
 800d6fc:	f1b9 0f00 	cmp.w	r9, #0
 800d700:	dc33      	bgt.n	800d76a <_printf_float+0x396>
 800d702:	f04f 0800 	mov.w	r8, #0
 800d706:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d70a:	f104 0b1a 	add.w	fp, r4, #26
 800d70e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d710:	ebaa 0303 	sub.w	r3, sl, r3
 800d714:	eba3 0309 	sub.w	r3, r3, r9
 800d718:	4543      	cmp	r3, r8
 800d71a:	f77f af79 	ble.w	800d610 <_printf_float+0x23c>
 800d71e:	2301      	movs	r3, #1
 800d720:	465a      	mov	r2, fp
 800d722:	4631      	mov	r1, r6
 800d724:	4628      	mov	r0, r5
 800d726:	47b8      	blx	r7
 800d728:	3001      	adds	r0, #1
 800d72a:	f43f aeae 	beq.w	800d48a <_printf_float+0xb6>
 800d72e:	f108 0801 	add.w	r8, r8, #1
 800d732:	e7ec      	b.n	800d70e <_printf_float+0x33a>
 800d734:	4642      	mov	r2, r8
 800d736:	4631      	mov	r1, r6
 800d738:	4628      	mov	r0, r5
 800d73a:	47b8      	blx	r7
 800d73c:	3001      	adds	r0, #1
 800d73e:	d1c2      	bne.n	800d6c6 <_printf_float+0x2f2>
 800d740:	e6a3      	b.n	800d48a <_printf_float+0xb6>
 800d742:	2301      	movs	r3, #1
 800d744:	4631      	mov	r1, r6
 800d746:	4628      	mov	r0, r5
 800d748:	9206      	str	r2, [sp, #24]
 800d74a:	47b8      	blx	r7
 800d74c:	3001      	adds	r0, #1
 800d74e:	f43f ae9c 	beq.w	800d48a <_printf_float+0xb6>
 800d752:	9a06      	ldr	r2, [sp, #24]
 800d754:	f10b 0b01 	add.w	fp, fp, #1
 800d758:	e7bb      	b.n	800d6d2 <_printf_float+0x2fe>
 800d75a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d75e:	4631      	mov	r1, r6
 800d760:	4628      	mov	r0, r5
 800d762:	47b8      	blx	r7
 800d764:	3001      	adds	r0, #1
 800d766:	d1c0      	bne.n	800d6ea <_printf_float+0x316>
 800d768:	e68f      	b.n	800d48a <_printf_float+0xb6>
 800d76a:	9a06      	ldr	r2, [sp, #24]
 800d76c:	464b      	mov	r3, r9
 800d76e:	4442      	add	r2, r8
 800d770:	4631      	mov	r1, r6
 800d772:	4628      	mov	r0, r5
 800d774:	47b8      	blx	r7
 800d776:	3001      	adds	r0, #1
 800d778:	d1c3      	bne.n	800d702 <_printf_float+0x32e>
 800d77a:	e686      	b.n	800d48a <_printf_float+0xb6>
 800d77c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d780:	f1ba 0f01 	cmp.w	sl, #1
 800d784:	dc01      	bgt.n	800d78a <_printf_float+0x3b6>
 800d786:	07db      	lsls	r3, r3, #31
 800d788:	d536      	bpl.n	800d7f8 <_printf_float+0x424>
 800d78a:	2301      	movs	r3, #1
 800d78c:	4642      	mov	r2, r8
 800d78e:	4631      	mov	r1, r6
 800d790:	4628      	mov	r0, r5
 800d792:	47b8      	blx	r7
 800d794:	3001      	adds	r0, #1
 800d796:	f43f ae78 	beq.w	800d48a <_printf_float+0xb6>
 800d79a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d79e:	4631      	mov	r1, r6
 800d7a0:	4628      	mov	r0, r5
 800d7a2:	47b8      	blx	r7
 800d7a4:	3001      	adds	r0, #1
 800d7a6:	f43f ae70 	beq.w	800d48a <_printf_float+0xb6>
 800d7aa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d7ae:	2200      	movs	r2, #0
 800d7b0:	2300      	movs	r3, #0
 800d7b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d7b6:	f7f3 f987 	bl	8000ac8 <__aeabi_dcmpeq>
 800d7ba:	b9c0      	cbnz	r0, 800d7ee <_printf_float+0x41a>
 800d7bc:	4653      	mov	r3, sl
 800d7be:	f108 0201 	add.w	r2, r8, #1
 800d7c2:	4631      	mov	r1, r6
 800d7c4:	4628      	mov	r0, r5
 800d7c6:	47b8      	blx	r7
 800d7c8:	3001      	adds	r0, #1
 800d7ca:	d10c      	bne.n	800d7e6 <_printf_float+0x412>
 800d7cc:	e65d      	b.n	800d48a <_printf_float+0xb6>
 800d7ce:	2301      	movs	r3, #1
 800d7d0:	465a      	mov	r2, fp
 800d7d2:	4631      	mov	r1, r6
 800d7d4:	4628      	mov	r0, r5
 800d7d6:	47b8      	blx	r7
 800d7d8:	3001      	adds	r0, #1
 800d7da:	f43f ae56 	beq.w	800d48a <_printf_float+0xb6>
 800d7de:	f108 0801 	add.w	r8, r8, #1
 800d7e2:	45d0      	cmp	r8, sl
 800d7e4:	dbf3      	blt.n	800d7ce <_printf_float+0x3fa>
 800d7e6:	464b      	mov	r3, r9
 800d7e8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800d7ec:	e6df      	b.n	800d5ae <_printf_float+0x1da>
 800d7ee:	f04f 0800 	mov.w	r8, #0
 800d7f2:	f104 0b1a 	add.w	fp, r4, #26
 800d7f6:	e7f4      	b.n	800d7e2 <_printf_float+0x40e>
 800d7f8:	2301      	movs	r3, #1
 800d7fa:	4642      	mov	r2, r8
 800d7fc:	e7e1      	b.n	800d7c2 <_printf_float+0x3ee>
 800d7fe:	2301      	movs	r3, #1
 800d800:	464a      	mov	r2, r9
 800d802:	4631      	mov	r1, r6
 800d804:	4628      	mov	r0, r5
 800d806:	47b8      	blx	r7
 800d808:	3001      	adds	r0, #1
 800d80a:	f43f ae3e 	beq.w	800d48a <_printf_float+0xb6>
 800d80e:	f108 0801 	add.w	r8, r8, #1
 800d812:	68e3      	ldr	r3, [r4, #12]
 800d814:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d816:	1a5b      	subs	r3, r3, r1
 800d818:	4543      	cmp	r3, r8
 800d81a:	dcf0      	bgt.n	800d7fe <_printf_float+0x42a>
 800d81c:	e6fc      	b.n	800d618 <_printf_float+0x244>
 800d81e:	f04f 0800 	mov.w	r8, #0
 800d822:	f104 0919 	add.w	r9, r4, #25
 800d826:	e7f4      	b.n	800d812 <_printf_float+0x43e>

0800d828 <_printf_common>:
 800d828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d82c:	4616      	mov	r6, r2
 800d82e:	4698      	mov	r8, r3
 800d830:	688a      	ldr	r2, [r1, #8]
 800d832:	690b      	ldr	r3, [r1, #16]
 800d834:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d838:	4293      	cmp	r3, r2
 800d83a:	bfb8      	it	lt
 800d83c:	4613      	movlt	r3, r2
 800d83e:	6033      	str	r3, [r6, #0]
 800d840:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d844:	4607      	mov	r7, r0
 800d846:	460c      	mov	r4, r1
 800d848:	b10a      	cbz	r2, 800d84e <_printf_common+0x26>
 800d84a:	3301      	adds	r3, #1
 800d84c:	6033      	str	r3, [r6, #0]
 800d84e:	6823      	ldr	r3, [r4, #0]
 800d850:	0699      	lsls	r1, r3, #26
 800d852:	bf42      	ittt	mi
 800d854:	6833      	ldrmi	r3, [r6, #0]
 800d856:	3302      	addmi	r3, #2
 800d858:	6033      	strmi	r3, [r6, #0]
 800d85a:	6825      	ldr	r5, [r4, #0]
 800d85c:	f015 0506 	ands.w	r5, r5, #6
 800d860:	d106      	bne.n	800d870 <_printf_common+0x48>
 800d862:	f104 0a19 	add.w	sl, r4, #25
 800d866:	68e3      	ldr	r3, [r4, #12]
 800d868:	6832      	ldr	r2, [r6, #0]
 800d86a:	1a9b      	subs	r3, r3, r2
 800d86c:	42ab      	cmp	r3, r5
 800d86e:	dc26      	bgt.n	800d8be <_printf_common+0x96>
 800d870:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d874:	6822      	ldr	r2, [r4, #0]
 800d876:	3b00      	subs	r3, #0
 800d878:	bf18      	it	ne
 800d87a:	2301      	movne	r3, #1
 800d87c:	0692      	lsls	r2, r2, #26
 800d87e:	d42b      	bmi.n	800d8d8 <_printf_common+0xb0>
 800d880:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d884:	4641      	mov	r1, r8
 800d886:	4638      	mov	r0, r7
 800d888:	47c8      	blx	r9
 800d88a:	3001      	adds	r0, #1
 800d88c:	d01e      	beq.n	800d8cc <_printf_common+0xa4>
 800d88e:	6823      	ldr	r3, [r4, #0]
 800d890:	6922      	ldr	r2, [r4, #16]
 800d892:	f003 0306 	and.w	r3, r3, #6
 800d896:	2b04      	cmp	r3, #4
 800d898:	bf02      	ittt	eq
 800d89a:	68e5      	ldreq	r5, [r4, #12]
 800d89c:	6833      	ldreq	r3, [r6, #0]
 800d89e:	1aed      	subeq	r5, r5, r3
 800d8a0:	68a3      	ldr	r3, [r4, #8]
 800d8a2:	bf0c      	ite	eq
 800d8a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d8a8:	2500      	movne	r5, #0
 800d8aa:	4293      	cmp	r3, r2
 800d8ac:	bfc4      	itt	gt
 800d8ae:	1a9b      	subgt	r3, r3, r2
 800d8b0:	18ed      	addgt	r5, r5, r3
 800d8b2:	2600      	movs	r6, #0
 800d8b4:	341a      	adds	r4, #26
 800d8b6:	42b5      	cmp	r5, r6
 800d8b8:	d11a      	bne.n	800d8f0 <_printf_common+0xc8>
 800d8ba:	2000      	movs	r0, #0
 800d8bc:	e008      	b.n	800d8d0 <_printf_common+0xa8>
 800d8be:	2301      	movs	r3, #1
 800d8c0:	4652      	mov	r2, sl
 800d8c2:	4641      	mov	r1, r8
 800d8c4:	4638      	mov	r0, r7
 800d8c6:	47c8      	blx	r9
 800d8c8:	3001      	adds	r0, #1
 800d8ca:	d103      	bne.n	800d8d4 <_printf_common+0xac>
 800d8cc:	f04f 30ff 	mov.w	r0, #4294967295
 800d8d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8d4:	3501      	adds	r5, #1
 800d8d6:	e7c6      	b.n	800d866 <_printf_common+0x3e>
 800d8d8:	18e1      	adds	r1, r4, r3
 800d8da:	1c5a      	adds	r2, r3, #1
 800d8dc:	2030      	movs	r0, #48	@ 0x30
 800d8de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d8e2:	4422      	add	r2, r4
 800d8e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d8e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d8ec:	3302      	adds	r3, #2
 800d8ee:	e7c7      	b.n	800d880 <_printf_common+0x58>
 800d8f0:	2301      	movs	r3, #1
 800d8f2:	4622      	mov	r2, r4
 800d8f4:	4641      	mov	r1, r8
 800d8f6:	4638      	mov	r0, r7
 800d8f8:	47c8      	blx	r9
 800d8fa:	3001      	adds	r0, #1
 800d8fc:	d0e6      	beq.n	800d8cc <_printf_common+0xa4>
 800d8fe:	3601      	adds	r6, #1
 800d900:	e7d9      	b.n	800d8b6 <_printf_common+0x8e>
	...

0800d904 <_printf_i>:
 800d904:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d908:	7e0f      	ldrb	r7, [r1, #24]
 800d90a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d90c:	2f78      	cmp	r7, #120	@ 0x78
 800d90e:	4691      	mov	r9, r2
 800d910:	4680      	mov	r8, r0
 800d912:	460c      	mov	r4, r1
 800d914:	469a      	mov	sl, r3
 800d916:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d91a:	d807      	bhi.n	800d92c <_printf_i+0x28>
 800d91c:	2f62      	cmp	r7, #98	@ 0x62
 800d91e:	d80a      	bhi.n	800d936 <_printf_i+0x32>
 800d920:	2f00      	cmp	r7, #0
 800d922:	f000 80d2 	beq.w	800daca <_printf_i+0x1c6>
 800d926:	2f58      	cmp	r7, #88	@ 0x58
 800d928:	f000 80b9 	beq.w	800da9e <_printf_i+0x19a>
 800d92c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d930:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d934:	e03a      	b.n	800d9ac <_printf_i+0xa8>
 800d936:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d93a:	2b15      	cmp	r3, #21
 800d93c:	d8f6      	bhi.n	800d92c <_printf_i+0x28>
 800d93e:	a101      	add	r1, pc, #4	@ (adr r1, 800d944 <_printf_i+0x40>)
 800d940:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d944:	0800d99d 	.word	0x0800d99d
 800d948:	0800d9b1 	.word	0x0800d9b1
 800d94c:	0800d92d 	.word	0x0800d92d
 800d950:	0800d92d 	.word	0x0800d92d
 800d954:	0800d92d 	.word	0x0800d92d
 800d958:	0800d92d 	.word	0x0800d92d
 800d95c:	0800d9b1 	.word	0x0800d9b1
 800d960:	0800d92d 	.word	0x0800d92d
 800d964:	0800d92d 	.word	0x0800d92d
 800d968:	0800d92d 	.word	0x0800d92d
 800d96c:	0800d92d 	.word	0x0800d92d
 800d970:	0800dab1 	.word	0x0800dab1
 800d974:	0800d9db 	.word	0x0800d9db
 800d978:	0800da6b 	.word	0x0800da6b
 800d97c:	0800d92d 	.word	0x0800d92d
 800d980:	0800d92d 	.word	0x0800d92d
 800d984:	0800dad3 	.word	0x0800dad3
 800d988:	0800d92d 	.word	0x0800d92d
 800d98c:	0800d9db 	.word	0x0800d9db
 800d990:	0800d92d 	.word	0x0800d92d
 800d994:	0800d92d 	.word	0x0800d92d
 800d998:	0800da73 	.word	0x0800da73
 800d99c:	6833      	ldr	r3, [r6, #0]
 800d99e:	1d1a      	adds	r2, r3, #4
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	6032      	str	r2, [r6, #0]
 800d9a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d9a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d9ac:	2301      	movs	r3, #1
 800d9ae:	e09d      	b.n	800daec <_printf_i+0x1e8>
 800d9b0:	6833      	ldr	r3, [r6, #0]
 800d9b2:	6820      	ldr	r0, [r4, #0]
 800d9b4:	1d19      	adds	r1, r3, #4
 800d9b6:	6031      	str	r1, [r6, #0]
 800d9b8:	0606      	lsls	r6, r0, #24
 800d9ba:	d501      	bpl.n	800d9c0 <_printf_i+0xbc>
 800d9bc:	681d      	ldr	r5, [r3, #0]
 800d9be:	e003      	b.n	800d9c8 <_printf_i+0xc4>
 800d9c0:	0645      	lsls	r5, r0, #25
 800d9c2:	d5fb      	bpl.n	800d9bc <_printf_i+0xb8>
 800d9c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d9c8:	2d00      	cmp	r5, #0
 800d9ca:	da03      	bge.n	800d9d4 <_printf_i+0xd0>
 800d9cc:	232d      	movs	r3, #45	@ 0x2d
 800d9ce:	426d      	negs	r5, r5
 800d9d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d9d4:	4859      	ldr	r0, [pc, #356]	@ (800db3c <_printf_i+0x238>)
 800d9d6:	230a      	movs	r3, #10
 800d9d8:	e011      	b.n	800d9fe <_printf_i+0xfa>
 800d9da:	6821      	ldr	r1, [r4, #0]
 800d9dc:	6833      	ldr	r3, [r6, #0]
 800d9de:	0608      	lsls	r0, r1, #24
 800d9e0:	f853 5b04 	ldr.w	r5, [r3], #4
 800d9e4:	d402      	bmi.n	800d9ec <_printf_i+0xe8>
 800d9e6:	0649      	lsls	r1, r1, #25
 800d9e8:	bf48      	it	mi
 800d9ea:	b2ad      	uxthmi	r5, r5
 800d9ec:	2f6f      	cmp	r7, #111	@ 0x6f
 800d9ee:	4853      	ldr	r0, [pc, #332]	@ (800db3c <_printf_i+0x238>)
 800d9f0:	6033      	str	r3, [r6, #0]
 800d9f2:	bf14      	ite	ne
 800d9f4:	230a      	movne	r3, #10
 800d9f6:	2308      	moveq	r3, #8
 800d9f8:	2100      	movs	r1, #0
 800d9fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d9fe:	6866      	ldr	r6, [r4, #4]
 800da00:	60a6      	str	r6, [r4, #8]
 800da02:	2e00      	cmp	r6, #0
 800da04:	bfa2      	ittt	ge
 800da06:	6821      	ldrge	r1, [r4, #0]
 800da08:	f021 0104 	bicge.w	r1, r1, #4
 800da0c:	6021      	strge	r1, [r4, #0]
 800da0e:	b90d      	cbnz	r5, 800da14 <_printf_i+0x110>
 800da10:	2e00      	cmp	r6, #0
 800da12:	d04b      	beq.n	800daac <_printf_i+0x1a8>
 800da14:	4616      	mov	r6, r2
 800da16:	fbb5 f1f3 	udiv	r1, r5, r3
 800da1a:	fb03 5711 	mls	r7, r3, r1, r5
 800da1e:	5dc7      	ldrb	r7, [r0, r7]
 800da20:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800da24:	462f      	mov	r7, r5
 800da26:	42bb      	cmp	r3, r7
 800da28:	460d      	mov	r5, r1
 800da2a:	d9f4      	bls.n	800da16 <_printf_i+0x112>
 800da2c:	2b08      	cmp	r3, #8
 800da2e:	d10b      	bne.n	800da48 <_printf_i+0x144>
 800da30:	6823      	ldr	r3, [r4, #0]
 800da32:	07df      	lsls	r7, r3, #31
 800da34:	d508      	bpl.n	800da48 <_printf_i+0x144>
 800da36:	6923      	ldr	r3, [r4, #16]
 800da38:	6861      	ldr	r1, [r4, #4]
 800da3a:	4299      	cmp	r1, r3
 800da3c:	bfde      	ittt	le
 800da3e:	2330      	movle	r3, #48	@ 0x30
 800da40:	f806 3c01 	strble.w	r3, [r6, #-1]
 800da44:	f106 36ff 	addle.w	r6, r6, #4294967295
 800da48:	1b92      	subs	r2, r2, r6
 800da4a:	6122      	str	r2, [r4, #16]
 800da4c:	f8cd a000 	str.w	sl, [sp]
 800da50:	464b      	mov	r3, r9
 800da52:	aa03      	add	r2, sp, #12
 800da54:	4621      	mov	r1, r4
 800da56:	4640      	mov	r0, r8
 800da58:	f7ff fee6 	bl	800d828 <_printf_common>
 800da5c:	3001      	adds	r0, #1
 800da5e:	d14a      	bne.n	800daf6 <_printf_i+0x1f2>
 800da60:	f04f 30ff 	mov.w	r0, #4294967295
 800da64:	b004      	add	sp, #16
 800da66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da6a:	6823      	ldr	r3, [r4, #0]
 800da6c:	f043 0320 	orr.w	r3, r3, #32
 800da70:	6023      	str	r3, [r4, #0]
 800da72:	4833      	ldr	r0, [pc, #204]	@ (800db40 <_printf_i+0x23c>)
 800da74:	2778      	movs	r7, #120	@ 0x78
 800da76:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800da7a:	6823      	ldr	r3, [r4, #0]
 800da7c:	6831      	ldr	r1, [r6, #0]
 800da7e:	061f      	lsls	r7, r3, #24
 800da80:	f851 5b04 	ldr.w	r5, [r1], #4
 800da84:	d402      	bmi.n	800da8c <_printf_i+0x188>
 800da86:	065f      	lsls	r7, r3, #25
 800da88:	bf48      	it	mi
 800da8a:	b2ad      	uxthmi	r5, r5
 800da8c:	6031      	str	r1, [r6, #0]
 800da8e:	07d9      	lsls	r1, r3, #31
 800da90:	bf44      	itt	mi
 800da92:	f043 0320 	orrmi.w	r3, r3, #32
 800da96:	6023      	strmi	r3, [r4, #0]
 800da98:	b11d      	cbz	r5, 800daa2 <_printf_i+0x19e>
 800da9a:	2310      	movs	r3, #16
 800da9c:	e7ac      	b.n	800d9f8 <_printf_i+0xf4>
 800da9e:	4827      	ldr	r0, [pc, #156]	@ (800db3c <_printf_i+0x238>)
 800daa0:	e7e9      	b.n	800da76 <_printf_i+0x172>
 800daa2:	6823      	ldr	r3, [r4, #0]
 800daa4:	f023 0320 	bic.w	r3, r3, #32
 800daa8:	6023      	str	r3, [r4, #0]
 800daaa:	e7f6      	b.n	800da9a <_printf_i+0x196>
 800daac:	4616      	mov	r6, r2
 800daae:	e7bd      	b.n	800da2c <_printf_i+0x128>
 800dab0:	6833      	ldr	r3, [r6, #0]
 800dab2:	6825      	ldr	r5, [r4, #0]
 800dab4:	6961      	ldr	r1, [r4, #20]
 800dab6:	1d18      	adds	r0, r3, #4
 800dab8:	6030      	str	r0, [r6, #0]
 800daba:	062e      	lsls	r6, r5, #24
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	d501      	bpl.n	800dac4 <_printf_i+0x1c0>
 800dac0:	6019      	str	r1, [r3, #0]
 800dac2:	e002      	b.n	800daca <_printf_i+0x1c6>
 800dac4:	0668      	lsls	r0, r5, #25
 800dac6:	d5fb      	bpl.n	800dac0 <_printf_i+0x1bc>
 800dac8:	8019      	strh	r1, [r3, #0]
 800daca:	2300      	movs	r3, #0
 800dacc:	6123      	str	r3, [r4, #16]
 800dace:	4616      	mov	r6, r2
 800dad0:	e7bc      	b.n	800da4c <_printf_i+0x148>
 800dad2:	6833      	ldr	r3, [r6, #0]
 800dad4:	1d1a      	adds	r2, r3, #4
 800dad6:	6032      	str	r2, [r6, #0]
 800dad8:	681e      	ldr	r6, [r3, #0]
 800dada:	6862      	ldr	r2, [r4, #4]
 800dadc:	2100      	movs	r1, #0
 800dade:	4630      	mov	r0, r6
 800dae0:	f7f2 fb76 	bl	80001d0 <memchr>
 800dae4:	b108      	cbz	r0, 800daea <_printf_i+0x1e6>
 800dae6:	1b80      	subs	r0, r0, r6
 800dae8:	6060      	str	r0, [r4, #4]
 800daea:	6863      	ldr	r3, [r4, #4]
 800daec:	6123      	str	r3, [r4, #16]
 800daee:	2300      	movs	r3, #0
 800daf0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800daf4:	e7aa      	b.n	800da4c <_printf_i+0x148>
 800daf6:	6923      	ldr	r3, [r4, #16]
 800daf8:	4632      	mov	r2, r6
 800dafa:	4649      	mov	r1, r9
 800dafc:	4640      	mov	r0, r8
 800dafe:	47d0      	blx	sl
 800db00:	3001      	adds	r0, #1
 800db02:	d0ad      	beq.n	800da60 <_printf_i+0x15c>
 800db04:	6823      	ldr	r3, [r4, #0]
 800db06:	079b      	lsls	r3, r3, #30
 800db08:	d413      	bmi.n	800db32 <_printf_i+0x22e>
 800db0a:	68e0      	ldr	r0, [r4, #12]
 800db0c:	9b03      	ldr	r3, [sp, #12]
 800db0e:	4298      	cmp	r0, r3
 800db10:	bfb8      	it	lt
 800db12:	4618      	movlt	r0, r3
 800db14:	e7a6      	b.n	800da64 <_printf_i+0x160>
 800db16:	2301      	movs	r3, #1
 800db18:	4632      	mov	r2, r6
 800db1a:	4649      	mov	r1, r9
 800db1c:	4640      	mov	r0, r8
 800db1e:	47d0      	blx	sl
 800db20:	3001      	adds	r0, #1
 800db22:	d09d      	beq.n	800da60 <_printf_i+0x15c>
 800db24:	3501      	adds	r5, #1
 800db26:	68e3      	ldr	r3, [r4, #12]
 800db28:	9903      	ldr	r1, [sp, #12]
 800db2a:	1a5b      	subs	r3, r3, r1
 800db2c:	42ab      	cmp	r3, r5
 800db2e:	dcf2      	bgt.n	800db16 <_printf_i+0x212>
 800db30:	e7eb      	b.n	800db0a <_printf_i+0x206>
 800db32:	2500      	movs	r5, #0
 800db34:	f104 0619 	add.w	r6, r4, #25
 800db38:	e7f5      	b.n	800db26 <_printf_i+0x222>
 800db3a:	bf00      	nop
 800db3c:	08010232 	.word	0x08010232
 800db40:	08010243 	.word	0x08010243

0800db44 <std>:
 800db44:	2300      	movs	r3, #0
 800db46:	b510      	push	{r4, lr}
 800db48:	4604      	mov	r4, r0
 800db4a:	e9c0 3300 	strd	r3, r3, [r0]
 800db4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800db52:	6083      	str	r3, [r0, #8]
 800db54:	8181      	strh	r1, [r0, #12]
 800db56:	6643      	str	r3, [r0, #100]	@ 0x64
 800db58:	81c2      	strh	r2, [r0, #14]
 800db5a:	6183      	str	r3, [r0, #24]
 800db5c:	4619      	mov	r1, r3
 800db5e:	2208      	movs	r2, #8
 800db60:	305c      	adds	r0, #92	@ 0x5c
 800db62:	f000 f8f4 	bl	800dd4e <memset>
 800db66:	4b0d      	ldr	r3, [pc, #52]	@ (800db9c <std+0x58>)
 800db68:	6263      	str	r3, [r4, #36]	@ 0x24
 800db6a:	4b0d      	ldr	r3, [pc, #52]	@ (800dba0 <std+0x5c>)
 800db6c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800db6e:	4b0d      	ldr	r3, [pc, #52]	@ (800dba4 <std+0x60>)
 800db70:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800db72:	4b0d      	ldr	r3, [pc, #52]	@ (800dba8 <std+0x64>)
 800db74:	6323      	str	r3, [r4, #48]	@ 0x30
 800db76:	4b0d      	ldr	r3, [pc, #52]	@ (800dbac <std+0x68>)
 800db78:	6224      	str	r4, [r4, #32]
 800db7a:	429c      	cmp	r4, r3
 800db7c:	d006      	beq.n	800db8c <std+0x48>
 800db7e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800db82:	4294      	cmp	r4, r2
 800db84:	d002      	beq.n	800db8c <std+0x48>
 800db86:	33d0      	adds	r3, #208	@ 0xd0
 800db88:	429c      	cmp	r4, r3
 800db8a:	d105      	bne.n	800db98 <std+0x54>
 800db8c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800db90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800db94:	f000 b958 	b.w	800de48 <__retarget_lock_init_recursive>
 800db98:	bd10      	pop	{r4, pc}
 800db9a:	bf00      	nop
 800db9c:	0800dcc9 	.word	0x0800dcc9
 800dba0:	0800dceb 	.word	0x0800dceb
 800dba4:	0800dd23 	.word	0x0800dd23
 800dba8:	0800dd47 	.word	0x0800dd47
 800dbac:	200022e4 	.word	0x200022e4

0800dbb0 <stdio_exit_handler>:
 800dbb0:	4a02      	ldr	r2, [pc, #8]	@ (800dbbc <stdio_exit_handler+0xc>)
 800dbb2:	4903      	ldr	r1, [pc, #12]	@ (800dbc0 <stdio_exit_handler+0x10>)
 800dbb4:	4803      	ldr	r0, [pc, #12]	@ (800dbc4 <stdio_exit_handler+0x14>)
 800dbb6:	f000 b869 	b.w	800dc8c <_fwalk_sglue>
 800dbba:	bf00      	nop
 800dbbc:	20000100 	.word	0x20000100
 800dbc0:	0800f4f5 	.word	0x0800f4f5
 800dbc4:	20000110 	.word	0x20000110

0800dbc8 <cleanup_stdio>:
 800dbc8:	6841      	ldr	r1, [r0, #4]
 800dbca:	4b0c      	ldr	r3, [pc, #48]	@ (800dbfc <cleanup_stdio+0x34>)
 800dbcc:	4299      	cmp	r1, r3
 800dbce:	b510      	push	{r4, lr}
 800dbd0:	4604      	mov	r4, r0
 800dbd2:	d001      	beq.n	800dbd8 <cleanup_stdio+0x10>
 800dbd4:	f001 fc8e 	bl	800f4f4 <_fflush_r>
 800dbd8:	68a1      	ldr	r1, [r4, #8]
 800dbda:	4b09      	ldr	r3, [pc, #36]	@ (800dc00 <cleanup_stdio+0x38>)
 800dbdc:	4299      	cmp	r1, r3
 800dbde:	d002      	beq.n	800dbe6 <cleanup_stdio+0x1e>
 800dbe0:	4620      	mov	r0, r4
 800dbe2:	f001 fc87 	bl	800f4f4 <_fflush_r>
 800dbe6:	68e1      	ldr	r1, [r4, #12]
 800dbe8:	4b06      	ldr	r3, [pc, #24]	@ (800dc04 <cleanup_stdio+0x3c>)
 800dbea:	4299      	cmp	r1, r3
 800dbec:	d004      	beq.n	800dbf8 <cleanup_stdio+0x30>
 800dbee:	4620      	mov	r0, r4
 800dbf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dbf4:	f001 bc7e 	b.w	800f4f4 <_fflush_r>
 800dbf8:	bd10      	pop	{r4, pc}
 800dbfa:	bf00      	nop
 800dbfc:	200022e4 	.word	0x200022e4
 800dc00:	2000234c 	.word	0x2000234c
 800dc04:	200023b4 	.word	0x200023b4

0800dc08 <global_stdio_init.part.0>:
 800dc08:	b510      	push	{r4, lr}
 800dc0a:	4b0b      	ldr	r3, [pc, #44]	@ (800dc38 <global_stdio_init.part.0+0x30>)
 800dc0c:	4c0b      	ldr	r4, [pc, #44]	@ (800dc3c <global_stdio_init.part.0+0x34>)
 800dc0e:	4a0c      	ldr	r2, [pc, #48]	@ (800dc40 <global_stdio_init.part.0+0x38>)
 800dc10:	601a      	str	r2, [r3, #0]
 800dc12:	4620      	mov	r0, r4
 800dc14:	2200      	movs	r2, #0
 800dc16:	2104      	movs	r1, #4
 800dc18:	f7ff ff94 	bl	800db44 <std>
 800dc1c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800dc20:	2201      	movs	r2, #1
 800dc22:	2109      	movs	r1, #9
 800dc24:	f7ff ff8e 	bl	800db44 <std>
 800dc28:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800dc2c:	2202      	movs	r2, #2
 800dc2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dc32:	2112      	movs	r1, #18
 800dc34:	f7ff bf86 	b.w	800db44 <std>
 800dc38:	2000241c 	.word	0x2000241c
 800dc3c:	200022e4 	.word	0x200022e4
 800dc40:	0800dbb1 	.word	0x0800dbb1

0800dc44 <__sfp_lock_acquire>:
 800dc44:	4801      	ldr	r0, [pc, #4]	@ (800dc4c <__sfp_lock_acquire+0x8>)
 800dc46:	f000 b900 	b.w	800de4a <__retarget_lock_acquire_recursive>
 800dc4a:	bf00      	nop
 800dc4c:	20002425 	.word	0x20002425

0800dc50 <__sfp_lock_release>:
 800dc50:	4801      	ldr	r0, [pc, #4]	@ (800dc58 <__sfp_lock_release+0x8>)
 800dc52:	f000 b8fb 	b.w	800de4c <__retarget_lock_release_recursive>
 800dc56:	bf00      	nop
 800dc58:	20002425 	.word	0x20002425

0800dc5c <__sinit>:
 800dc5c:	b510      	push	{r4, lr}
 800dc5e:	4604      	mov	r4, r0
 800dc60:	f7ff fff0 	bl	800dc44 <__sfp_lock_acquire>
 800dc64:	6a23      	ldr	r3, [r4, #32]
 800dc66:	b11b      	cbz	r3, 800dc70 <__sinit+0x14>
 800dc68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dc6c:	f7ff bff0 	b.w	800dc50 <__sfp_lock_release>
 800dc70:	4b04      	ldr	r3, [pc, #16]	@ (800dc84 <__sinit+0x28>)
 800dc72:	6223      	str	r3, [r4, #32]
 800dc74:	4b04      	ldr	r3, [pc, #16]	@ (800dc88 <__sinit+0x2c>)
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d1f5      	bne.n	800dc68 <__sinit+0xc>
 800dc7c:	f7ff ffc4 	bl	800dc08 <global_stdio_init.part.0>
 800dc80:	e7f2      	b.n	800dc68 <__sinit+0xc>
 800dc82:	bf00      	nop
 800dc84:	0800dbc9 	.word	0x0800dbc9
 800dc88:	2000241c 	.word	0x2000241c

0800dc8c <_fwalk_sglue>:
 800dc8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dc90:	4607      	mov	r7, r0
 800dc92:	4688      	mov	r8, r1
 800dc94:	4614      	mov	r4, r2
 800dc96:	2600      	movs	r6, #0
 800dc98:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800dc9c:	f1b9 0901 	subs.w	r9, r9, #1
 800dca0:	d505      	bpl.n	800dcae <_fwalk_sglue+0x22>
 800dca2:	6824      	ldr	r4, [r4, #0]
 800dca4:	2c00      	cmp	r4, #0
 800dca6:	d1f7      	bne.n	800dc98 <_fwalk_sglue+0xc>
 800dca8:	4630      	mov	r0, r6
 800dcaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dcae:	89ab      	ldrh	r3, [r5, #12]
 800dcb0:	2b01      	cmp	r3, #1
 800dcb2:	d907      	bls.n	800dcc4 <_fwalk_sglue+0x38>
 800dcb4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dcb8:	3301      	adds	r3, #1
 800dcba:	d003      	beq.n	800dcc4 <_fwalk_sglue+0x38>
 800dcbc:	4629      	mov	r1, r5
 800dcbe:	4638      	mov	r0, r7
 800dcc0:	47c0      	blx	r8
 800dcc2:	4306      	orrs	r6, r0
 800dcc4:	3568      	adds	r5, #104	@ 0x68
 800dcc6:	e7e9      	b.n	800dc9c <_fwalk_sglue+0x10>

0800dcc8 <__sread>:
 800dcc8:	b510      	push	{r4, lr}
 800dcca:	460c      	mov	r4, r1
 800dccc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dcd0:	f000 f86c 	bl	800ddac <_read_r>
 800dcd4:	2800      	cmp	r0, #0
 800dcd6:	bfab      	itete	ge
 800dcd8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800dcda:	89a3      	ldrhlt	r3, [r4, #12]
 800dcdc:	181b      	addge	r3, r3, r0
 800dcde:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800dce2:	bfac      	ite	ge
 800dce4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800dce6:	81a3      	strhlt	r3, [r4, #12]
 800dce8:	bd10      	pop	{r4, pc}

0800dcea <__swrite>:
 800dcea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dcee:	461f      	mov	r7, r3
 800dcf0:	898b      	ldrh	r3, [r1, #12]
 800dcf2:	05db      	lsls	r3, r3, #23
 800dcf4:	4605      	mov	r5, r0
 800dcf6:	460c      	mov	r4, r1
 800dcf8:	4616      	mov	r6, r2
 800dcfa:	d505      	bpl.n	800dd08 <__swrite+0x1e>
 800dcfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd00:	2302      	movs	r3, #2
 800dd02:	2200      	movs	r2, #0
 800dd04:	f000 f840 	bl	800dd88 <_lseek_r>
 800dd08:	89a3      	ldrh	r3, [r4, #12]
 800dd0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dd0e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800dd12:	81a3      	strh	r3, [r4, #12]
 800dd14:	4632      	mov	r2, r6
 800dd16:	463b      	mov	r3, r7
 800dd18:	4628      	mov	r0, r5
 800dd1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dd1e:	f000 b857 	b.w	800ddd0 <_write_r>

0800dd22 <__sseek>:
 800dd22:	b510      	push	{r4, lr}
 800dd24:	460c      	mov	r4, r1
 800dd26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd2a:	f000 f82d 	bl	800dd88 <_lseek_r>
 800dd2e:	1c43      	adds	r3, r0, #1
 800dd30:	89a3      	ldrh	r3, [r4, #12]
 800dd32:	bf15      	itete	ne
 800dd34:	6560      	strne	r0, [r4, #84]	@ 0x54
 800dd36:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800dd3a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800dd3e:	81a3      	strheq	r3, [r4, #12]
 800dd40:	bf18      	it	ne
 800dd42:	81a3      	strhne	r3, [r4, #12]
 800dd44:	bd10      	pop	{r4, pc}

0800dd46 <__sclose>:
 800dd46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd4a:	f000 b80d 	b.w	800dd68 <_close_r>

0800dd4e <memset>:
 800dd4e:	4402      	add	r2, r0
 800dd50:	4603      	mov	r3, r0
 800dd52:	4293      	cmp	r3, r2
 800dd54:	d100      	bne.n	800dd58 <memset+0xa>
 800dd56:	4770      	bx	lr
 800dd58:	f803 1b01 	strb.w	r1, [r3], #1
 800dd5c:	e7f9      	b.n	800dd52 <memset+0x4>
	...

0800dd60 <_localeconv_r>:
 800dd60:	4800      	ldr	r0, [pc, #0]	@ (800dd64 <_localeconv_r+0x4>)
 800dd62:	4770      	bx	lr
 800dd64:	2000024c 	.word	0x2000024c

0800dd68 <_close_r>:
 800dd68:	b538      	push	{r3, r4, r5, lr}
 800dd6a:	4d06      	ldr	r5, [pc, #24]	@ (800dd84 <_close_r+0x1c>)
 800dd6c:	2300      	movs	r3, #0
 800dd6e:	4604      	mov	r4, r0
 800dd70:	4608      	mov	r0, r1
 800dd72:	602b      	str	r3, [r5, #0]
 800dd74:	f7f4 fd70 	bl	8002858 <_close>
 800dd78:	1c43      	adds	r3, r0, #1
 800dd7a:	d102      	bne.n	800dd82 <_close_r+0x1a>
 800dd7c:	682b      	ldr	r3, [r5, #0]
 800dd7e:	b103      	cbz	r3, 800dd82 <_close_r+0x1a>
 800dd80:	6023      	str	r3, [r4, #0]
 800dd82:	bd38      	pop	{r3, r4, r5, pc}
 800dd84:	20002420 	.word	0x20002420

0800dd88 <_lseek_r>:
 800dd88:	b538      	push	{r3, r4, r5, lr}
 800dd8a:	4d07      	ldr	r5, [pc, #28]	@ (800dda8 <_lseek_r+0x20>)
 800dd8c:	4604      	mov	r4, r0
 800dd8e:	4608      	mov	r0, r1
 800dd90:	4611      	mov	r1, r2
 800dd92:	2200      	movs	r2, #0
 800dd94:	602a      	str	r2, [r5, #0]
 800dd96:	461a      	mov	r2, r3
 800dd98:	f7f4 fd85 	bl	80028a6 <_lseek>
 800dd9c:	1c43      	adds	r3, r0, #1
 800dd9e:	d102      	bne.n	800dda6 <_lseek_r+0x1e>
 800dda0:	682b      	ldr	r3, [r5, #0]
 800dda2:	b103      	cbz	r3, 800dda6 <_lseek_r+0x1e>
 800dda4:	6023      	str	r3, [r4, #0]
 800dda6:	bd38      	pop	{r3, r4, r5, pc}
 800dda8:	20002420 	.word	0x20002420

0800ddac <_read_r>:
 800ddac:	b538      	push	{r3, r4, r5, lr}
 800ddae:	4d07      	ldr	r5, [pc, #28]	@ (800ddcc <_read_r+0x20>)
 800ddb0:	4604      	mov	r4, r0
 800ddb2:	4608      	mov	r0, r1
 800ddb4:	4611      	mov	r1, r2
 800ddb6:	2200      	movs	r2, #0
 800ddb8:	602a      	str	r2, [r5, #0]
 800ddba:	461a      	mov	r2, r3
 800ddbc:	f7f4 fd13 	bl	80027e6 <_read>
 800ddc0:	1c43      	adds	r3, r0, #1
 800ddc2:	d102      	bne.n	800ddca <_read_r+0x1e>
 800ddc4:	682b      	ldr	r3, [r5, #0]
 800ddc6:	b103      	cbz	r3, 800ddca <_read_r+0x1e>
 800ddc8:	6023      	str	r3, [r4, #0]
 800ddca:	bd38      	pop	{r3, r4, r5, pc}
 800ddcc:	20002420 	.word	0x20002420

0800ddd0 <_write_r>:
 800ddd0:	b538      	push	{r3, r4, r5, lr}
 800ddd2:	4d07      	ldr	r5, [pc, #28]	@ (800ddf0 <_write_r+0x20>)
 800ddd4:	4604      	mov	r4, r0
 800ddd6:	4608      	mov	r0, r1
 800ddd8:	4611      	mov	r1, r2
 800ddda:	2200      	movs	r2, #0
 800dddc:	602a      	str	r2, [r5, #0]
 800ddde:	461a      	mov	r2, r3
 800dde0:	f7f4 fd1e 	bl	8002820 <_write>
 800dde4:	1c43      	adds	r3, r0, #1
 800dde6:	d102      	bne.n	800ddee <_write_r+0x1e>
 800dde8:	682b      	ldr	r3, [r5, #0]
 800ddea:	b103      	cbz	r3, 800ddee <_write_r+0x1e>
 800ddec:	6023      	str	r3, [r4, #0]
 800ddee:	bd38      	pop	{r3, r4, r5, pc}
 800ddf0:	20002420 	.word	0x20002420

0800ddf4 <__errno>:
 800ddf4:	4b01      	ldr	r3, [pc, #4]	@ (800ddfc <__errno+0x8>)
 800ddf6:	6818      	ldr	r0, [r3, #0]
 800ddf8:	4770      	bx	lr
 800ddfa:	bf00      	nop
 800ddfc:	2000010c 	.word	0x2000010c

0800de00 <__libc_init_array>:
 800de00:	b570      	push	{r4, r5, r6, lr}
 800de02:	4d0d      	ldr	r5, [pc, #52]	@ (800de38 <__libc_init_array+0x38>)
 800de04:	4c0d      	ldr	r4, [pc, #52]	@ (800de3c <__libc_init_array+0x3c>)
 800de06:	1b64      	subs	r4, r4, r5
 800de08:	10a4      	asrs	r4, r4, #2
 800de0a:	2600      	movs	r6, #0
 800de0c:	42a6      	cmp	r6, r4
 800de0e:	d109      	bne.n	800de24 <__libc_init_array+0x24>
 800de10:	4d0b      	ldr	r5, [pc, #44]	@ (800de40 <__libc_init_array+0x40>)
 800de12:	4c0c      	ldr	r4, [pc, #48]	@ (800de44 <__libc_init_array+0x44>)
 800de14:	f002 f9c2 	bl	801019c <_init>
 800de18:	1b64      	subs	r4, r4, r5
 800de1a:	10a4      	asrs	r4, r4, #2
 800de1c:	2600      	movs	r6, #0
 800de1e:	42a6      	cmp	r6, r4
 800de20:	d105      	bne.n	800de2e <__libc_init_array+0x2e>
 800de22:	bd70      	pop	{r4, r5, r6, pc}
 800de24:	f855 3b04 	ldr.w	r3, [r5], #4
 800de28:	4798      	blx	r3
 800de2a:	3601      	adds	r6, #1
 800de2c:	e7ee      	b.n	800de0c <__libc_init_array+0xc>
 800de2e:	f855 3b04 	ldr.w	r3, [r5], #4
 800de32:	4798      	blx	r3
 800de34:	3601      	adds	r6, #1
 800de36:	e7f2      	b.n	800de1e <__libc_init_array+0x1e>
 800de38:	08010598 	.word	0x08010598
 800de3c:	08010598 	.word	0x08010598
 800de40:	08010598 	.word	0x08010598
 800de44:	0801059c 	.word	0x0801059c

0800de48 <__retarget_lock_init_recursive>:
 800de48:	4770      	bx	lr

0800de4a <__retarget_lock_acquire_recursive>:
 800de4a:	4770      	bx	lr

0800de4c <__retarget_lock_release_recursive>:
 800de4c:	4770      	bx	lr

0800de4e <quorem>:
 800de4e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de52:	6903      	ldr	r3, [r0, #16]
 800de54:	690c      	ldr	r4, [r1, #16]
 800de56:	42a3      	cmp	r3, r4
 800de58:	4607      	mov	r7, r0
 800de5a:	db7e      	blt.n	800df5a <quorem+0x10c>
 800de5c:	3c01      	subs	r4, #1
 800de5e:	f101 0814 	add.w	r8, r1, #20
 800de62:	00a3      	lsls	r3, r4, #2
 800de64:	f100 0514 	add.w	r5, r0, #20
 800de68:	9300      	str	r3, [sp, #0]
 800de6a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800de6e:	9301      	str	r3, [sp, #4]
 800de70:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800de74:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800de78:	3301      	adds	r3, #1
 800de7a:	429a      	cmp	r2, r3
 800de7c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800de80:	fbb2 f6f3 	udiv	r6, r2, r3
 800de84:	d32e      	bcc.n	800dee4 <quorem+0x96>
 800de86:	f04f 0a00 	mov.w	sl, #0
 800de8a:	46c4      	mov	ip, r8
 800de8c:	46ae      	mov	lr, r5
 800de8e:	46d3      	mov	fp, sl
 800de90:	f85c 3b04 	ldr.w	r3, [ip], #4
 800de94:	b298      	uxth	r0, r3
 800de96:	fb06 a000 	mla	r0, r6, r0, sl
 800de9a:	0c02      	lsrs	r2, r0, #16
 800de9c:	0c1b      	lsrs	r3, r3, #16
 800de9e:	fb06 2303 	mla	r3, r6, r3, r2
 800dea2:	f8de 2000 	ldr.w	r2, [lr]
 800dea6:	b280      	uxth	r0, r0
 800dea8:	b292      	uxth	r2, r2
 800deaa:	1a12      	subs	r2, r2, r0
 800deac:	445a      	add	r2, fp
 800deae:	f8de 0000 	ldr.w	r0, [lr]
 800deb2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800deb6:	b29b      	uxth	r3, r3
 800deb8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800debc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800dec0:	b292      	uxth	r2, r2
 800dec2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800dec6:	45e1      	cmp	r9, ip
 800dec8:	f84e 2b04 	str.w	r2, [lr], #4
 800decc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ded0:	d2de      	bcs.n	800de90 <quorem+0x42>
 800ded2:	9b00      	ldr	r3, [sp, #0]
 800ded4:	58eb      	ldr	r3, [r5, r3]
 800ded6:	b92b      	cbnz	r3, 800dee4 <quorem+0x96>
 800ded8:	9b01      	ldr	r3, [sp, #4]
 800deda:	3b04      	subs	r3, #4
 800dedc:	429d      	cmp	r5, r3
 800dede:	461a      	mov	r2, r3
 800dee0:	d32f      	bcc.n	800df42 <quorem+0xf4>
 800dee2:	613c      	str	r4, [r7, #16]
 800dee4:	4638      	mov	r0, r7
 800dee6:	f001 f979 	bl	800f1dc <__mcmp>
 800deea:	2800      	cmp	r0, #0
 800deec:	db25      	blt.n	800df3a <quorem+0xec>
 800deee:	4629      	mov	r1, r5
 800def0:	2000      	movs	r0, #0
 800def2:	f858 2b04 	ldr.w	r2, [r8], #4
 800def6:	f8d1 c000 	ldr.w	ip, [r1]
 800defa:	fa1f fe82 	uxth.w	lr, r2
 800defe:	fa1f f38c 	uxth.w	r3, ip
 800df02:	eba3 030e 	sub.w	r3, r3, lr
 800df06:	4403      	add	r3, r0
 800df08:	0c12      	lsrs	r2, r2, #16
 800df0a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800df0e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800df12:	b29b      	uxth	r3, r3
 800df14:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800df18:	45c1      	cmp	r9, r8
 800df1a:	f841 3b04 	str.w	r3, [r1], #4
 800df1e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800df22:	d2e6      	bcs.n	800def2 <quorem+0xa4>
 800df24:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800df28:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800df2c:	b922      	cbnz	r2, 800df38 <quorem+0xea>
 800df2e:	3b04      	subs	r3, #4
 800df30:	429d      	cmp	r5, r3
 800df32:	461a      	mov	r2, r3
 800df34:	d30b      	bcc.n	800df4e <quorem+0x100>
 800df36:	613c      	str	r4, [r7, #16]
 800df38:	3601      	adds	r6, #1
 800df3a:	4630      	mov	r0, r6
 800df3c:	b003      	add	sp, #12
 800df3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df42:	6812      	ldr	r2, [r2, #0]
 800df44:	3b04      	subs	r3, #4
 800df46:	2a00      	cmp	r2, #0
 800df48:	d1cb      	bne.n	800dee2 <quorem+0x94>
 800df4a:	3c01      	subs	r4, #1
 800df4c:	e7c6      	b.n	800dedc <quorem+0x8e>
 800df4e:	6812      	ldr	r2, [r2, #0]
 800df50:	3b04      	subs	r3, #4
 800df52:	2a00      	cmp	r2, #0
 800df54:	d1ef      	bne.n	800df36 <quorem+0xe8>
 800df56:	3c01      	subs	r4, #1
 800df58:	e7ea      	b.n	800df30 <quorem+0xe2>
 800df5a:	2000      	movs	r0, #0
 800df5c:	e7ee      	b.n	800df3c <quorem+0xee>
	...

0800df60 <_dtoa_r>:
 800df60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df64:	69c7      	ldr	r7, [r0, #28]
 800df66:	b099      	sub	sp, #100	@ 0x64
 800df68:	ed8d 0b02 	vstr	d0, [sp, #8]
 800df6c:	ec55 4b10 	vmov	r4, r5, d0
 800df70:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800df72:	9109      	str	r1, [sp, #36]	@ 0x24
 800df74:	4683      	mov	fp, r0
 800df76:	920e      	str	r2, [sp, #56]	@ 0x38
 800df78:	9313      	str	r3, [sp, #76]	@ 0x4c
 800df7a:	b97f      	cbnz	r7, 800df9c <_dtoa_r+0x3c>
 800df7c:	2010      	movs	r0, #16
 800df7e:	f000 fdfd 	bl	800eb7c <malloc>
 800df82:	4602      	mov	r2, r0
 800df84:	f8cb 001c 	str.w	r0, [fp, #28]
 800df88:	b920      	cbnz	r0, 800df94 <_dtoa_r+0x34>
 800df8a:	4ba7      	ldr	r3, [pc, #668]	@ (800e228 <_dtoa_r+0x2c8>)
 800df8c:	21ef      	movs	r1, #239	@ 0xef
 800df8e:	48a7      	ldr	r0, [pc, #668]	@ (800e22c <_dtoa_r+0x2cc>)
 800df90:	f001 faf6 	bl	800f580 <__assert_func>
 800df94:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800df98:	6007      	str	r7, [r0, #0]
 800df9a:	60c7      	str	r7, [r0, #12]
 800df9c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800dfa0:	6819      	ldr	r1, [r3, #0]
 800dfa2:	b159      	cbz	r1, 800dfbc <_dtoa_r+0x5c>
 800dfa4:	685a      	ldr	r2, [r3, #4]
 800dfa6:	604a      	str	r2, [r1, #4]
 800dfa8:	2301      	movs	r3, #1
 800dfaa:	4093      	lsls	r3, r2
 800dfac:	608b      	str	r3, [r1, #8]
 800dfae:	4658      	mov	r0, fp
 800dfb0:	f000 feda 	bl	800ed68 <_Bfree>
 800dfb4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800dfb8:	2200      	movs	r2, #0
 800dfba:	601a      	str	r2, [r3, #0]
 800dfbc:	1e2b      	subs	r3, r5, #0
 800dfbe:	bfb9      	ittee	lt
 800dfc0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800dfc4:	9303      	strlt	r3, [sp, #12]
 800dfc6:	2300      	movge	r3, #0
 800dfc8:	6033      	strge	r3, [r6, #0]
 800dfca:	9f03      	ldr	r7, [sp, #12]
 800dfcc:	4b98      	ldr	r3, [pc, #608]	@ (800e230 <_dtoa_r+0x2d0>)
 800dfce:	bfbc      	itt	lt
 800dfd0:	2201      	movlt	r2, #1
 800dfd2:	6032      	strlt	r2, [r6, #0]
 800dfd4:	43bb      	bics	r3, r7
 800dfd6:	d112      	bne.n	800dffe <_dtoa_r+0x9e>
 800dfd8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800dfda:	f242 730f 	movw	r3, #9999	@ 0x270f
 800dfde:	6013      	str	r3, [r2, #0]
 800dfe0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800dfe4:	4323      	orrs	r3, r4
 800dfe6:	f000 854d 	beq.w	800ea84 <_dtoa_r+0xb24>
 800dfea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800dfec:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800e244 <_dtoa_r+0x2e4>
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	f000 854f 	beq.w	800ea94 <_dtoa_r+0xb34>
 800dff6:	f10a 0303 	add.w	r3, sl, #3
 800dffa:	f000 bd49 	b.w	800ea90 <_dtoa_r+0xb30>
 800dffe:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e002:	2200      	movs	r2, #0
 800e004:	ec51 0b17 	vmov	r0, r1, d7
 800e008:	2300      	movs	r3, #0
 800e00a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800e00e:	f7f2 fd5b 	bl	8000ac8 <__aeabi_dcmpeq>
 800e012:	4680      	mov	r8, r0
 800e014:	b158      	cbz	r0, 800e02e <_dtoa_r+0xce>
 800e016:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e018:	2301      	movs	r3, #1
 800e01a:	6013      	str	r3, [r2, #0]
 800e01c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e01e:	b113      	cbz	r3, 800e026 <_dtoa_r+0xc6>
 800e020:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800e022:	4b84      	ldr	r3, [pc, #528]	@ (800e234 <_dtoa_r+0x2d4>)
 800e024:	6013      	str	r3, [r2, #0]
 800e026:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800e248 <_dtoa_r+0x2e8>
 800e02a:	f000 bd33 	b.w	800ea94 <_dtoa_r+0xb34>
 800e02e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800e032:	aa16      	add	r2, sp, #88	@ 0x58
 800e034:	a917      	add	r1, sp, #92	@ 0x5c
 800e036:	4658      	mov	r0, fp
 800e038:	f001 f980 	bl	800f33c <__d2b>
 800e03c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800e040:	4681      	mov	r9, r0
 800e042:	2e00      	cmp	r6, #0
 800e044:	d077      	beq.n	800e136 <_dtoa_r+0x1d6>
 800e046:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e048:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800e04c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e050:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e054:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800e058:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800e05c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800e060:	4619      	mov	r1, r3
 800e062:	2200      	movs	r2, #0
 800e064:	4b74      	ldr	r3, [pc, #464]	@ (800e238 <_dtoa_r+0x2d8>)
 800e066:	f7f2 f90f 	bl	8000288 <__aeabi_dsub>
 800e06a:	a369      	add	r3, pc, #420	@ (adr r3, 800e210 <_dtoa_r+0x2b0>)
 800e06c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e070:	f7f2 fac2 	bl	80005f8 <__aeabi_dmul>
 800e074:	a368      	add	r3, pc, #416	@ (adr r3, 800e218 <_dtoa_r+0x2b8>)
 800e076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e07a:	f7f2 f907 	bl	800028c <__adddf3>
 800e07e:	4604      	mov	r4, r0
 800e080:	4630      	mov	r0, r6
 800e082:	460d      	mov	r5, r1
 800e084:	f7f2 fa4e 	bl	8000524 <__aeabi_i2d>
 800e088:	a365      	add	r3, pc, #404	@ (adr r3, 800e220 <_dtoa_r+0x2c0>)
 800e08a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e08e:	f7f2 fab3 	bl	80005f8 <__aeabi_dmul>
 800e092:	4602      	mov	r2, r0
 800e094:	460b      	mov	r3, r1
 800e096:	4620      	mov	r0, r4
 800e098:	4629      	mov	r1, r5
 800e09a:	f7f2 f8f7 	bl	800028c <__adddf3>
 800e09e:	4604      	mov	r4, r0
 800e0a0:	460d      	mov	r5, r1
 800e0a2:	f7f2 fd59 	bl	8000b58 <__aeabi_d2iz>
 800e0a6:	2200      	movs	r2, #0
 800e0a8:	4607      	mov	r7, r0
 800e0aa:	2300      	movs	r3, #0
 800e0ac:	4620      	mov	r0, r4
 800e0ae:	4629      	mov	r1, r5
 800e0b0:	f7f2 fd14 	bl	8000adc <__aeabi_dcmplt>
 800e0b4:	b140      	cbz	r0, 800e0c8 <_dtoa_r+0x168>
 800e0b6:	4638      	mov	r0, r7
 800e0b8:	f7f2 fa34 	bl	8000524 <__aeabi_i2d>
 800e0bc:	4622      	mov	r2, r4
 800e0be:	462b      	mov	r3, r5
 800e0c0:	f7f2 fd02 	bl	8000ac8 <__aeabi_dcmpeq>
 800e0c4:	b900      	cbnz	r0, 800e0c8 <_dtoa_r+0x168>
 800e0c6:	3f01      	subs	r7, #1
 800e0c8:	2f16      	cmp	r7, #22
 800e0ca:	d851      	bhi.n	800e170 <_dtoa_r+0x210>
 800e0cc:	4b5b      	ldr	r3, [pc, #364]	@ (800e23c <_dtoa_r+0x2dc>)
 800e0ce:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e0d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e0da:	f7f2 fcff 	bl	8000adc <__aeabi_dcmplt>
 800e0de:	2800      	cmp	r0, #0
 800e0e0:	d048      	beq.n	800e174 <_dtoa_r+0x214>
 800e0e2:	3f01      	subs	r7, #1
 800e0e4:	2300      	movs	r3, #0
 800e0e6:	9312      	str	r3, [sp, #72]	@ 0x48
 800e0e8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e0ea:	1b9b      	subs	r3, r3, r6
 800e0ec:	1e5a      	subs	r2, r3, #1
 800e0ee:	bf44      	itt	mi
 800e0f0:	f1c3 0801 	rsbmi	r8, r3, #1
 800e0f4:	2300      	movmi	r3, #0
 800e0f6:	9208      	str	r2, [sp, #32]
 800e0f8:	bf54      	ite	pl
 800e0fa:	f04f 0800 	movpl.w	r8, #0
 800e0fe:	9308      	strmi	r3, [sp, #32]
 800e100:	2f00      	cmp	r7, #0
 800e102:	db39      	blt.n	800e178 <_dtoa_r+0x218>
 800e104:	9b08      	ldr	r3, [sp, #32]
 800e106:	970f      	str	r7, [sp, #60]	@ 0x3c
 800e108:	443b      	add	r3, r7
 800e10a:	9308      	str	r3, [sp, #32]
 800e10c:	2300      	movs	r3, #0
 800e10e:	930a      	str	r3, [sp, #40]	@ 0x28
 800e110:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e112:	2b09      	cmp	r3, #9
 800e114:	d864      	bhi.n	800e1e0 <_dtoa_r+0x280>
 800e116:	2b05      	cmp	r3, #5
 800e118:	bfc4      	itt	gt
 800e11a:	3b04      	subgt	r3, #4
 800e11c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800e11e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e120:	f1a3 0302 	sub.w	r3, r3, #2
 800e124:	bfcc      	ite	gt
 800e126:	2400      	movgt	r4, #0
 800e128:	2401      	movle	r4, #1
 800e12a:	2b03      	cmp	r3, #3
 800e12c:	d863      	bhi.n	800e1f6 <_dtoa_r+0x296>
 800e12e:	e8df f003 	tbb	[pc, r3]
 800e132:	372a      	.short	0x372a
 800e134:	5535      	.short	0x5535
 800e136:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800e13a:	441e      	add	r6, r3
 800e13c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800e140:	2b20      	cmp	r3, #32
 800e142:	bfc1      	itttt	gt
 800e144:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800e148:	409f      	lslgt	r7, r3
 800e14a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800e14e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800e152:	bfd6      	itet	le
 800e154:	f1c3 0320 	rsble	r3, r3, #32
 800e158:	ea47 0003 	orrgt.w	r0, r7, r3
 800e15c:	fa04 f003 	lslle.w	r0, r4, r3
 800e160:	f7f2 f9d0 	bl	8000504 <__aeabi_ui2d>
 800e164:	2201      	movs	r2, #1
 800e166:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800e16a:	3e01      	subs	r6, #1
 800e16c:	9214      	str	r2, [sp, #80]	@ 0x50
 800e16e:	e777      	b.n	800e060 <_dtoa_r+0x100>
 800e170:	2301      	movs	r3, #1
 800e172:	e7b8      	b.n	800e0e6 <_dtoa_r+0x186>
 800e174:	9012      	str	r0, [sp, #72]	@ 0x48
 800e176:	e7b7      	b.n	800e0e8 <_dtoa_r+0x188>
 800e178:	427b      	negs	r3, r7
 800e17a:	930a      	str	r3, [sp, #40]	@ 0x28
 800e17c:	2300      	movs	r3, #0
 800e17e:	eba8 0807 	sub.w	r8, r8, r7
 800e182:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e184:	e7c4      	b.n	800e110 <_dtoa_r+0x1b0>
 800e186:	2300      	movs	r3, #0
 800e188:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e18a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	dc35      	bgt.n	800e1fc <_dtoa_r+0x29c>
 800e190:	2301      	movs	r3, #1
 800e192:	9300      	str	r3, [sp, #0]
 800e194:	9307      	str	r3, [sp, #28]
 800e196:	461a      	mov	r2, r3
 800e198:	920e      	str	r2, [sp, #56]	@ 0x38
 800e19a:	e00b      	b.n	800e1b4 <_dtoa_r+0x254>
 800e19c:	2301      	movs	r3, #1
 800e19e:	e7f3      	b.n	800e188 <_dtoa_r+0x228>
 800e1a0:	2300      	movs	r3, #0
 800e1a2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e1a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e1a6:	18fb      	adds	r3, r7, r3
 800e1a8:	9300      	str	r3, [sp, #0]
 800e1aa:	3301      	adds	r3, #1
 800e1ac:	2b01      	cmp	r3, #1
 800e1ae:	9307      	str	r3, [sp, #28]
 800e1b0:	bfb8      	it	lt
 800e1b2:	2301      	movlt	r3, #1
 800e1b4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800e1b8:	2100      	movs	r1, #0
 800e1ba:	2204      	movs	r2, #4
 800e1bc:	f102 0514 	add.w	r5, r2, #20
 800e1c0:	429d      	cmp	r5, r3
 800e1c2:	d91f      	bls.n	800e204 <_dtoa_r+0x2a4>
 800e1c4:	6041      	str	r1, [r0, #4]
 800e1c6:	4658      	mov	r0, fp
 800e1c8:	f000 fd8e 	bl	800ece8 <_Balloc>
 800e1cc:	4682      	mov	sl, r0
 800e1ce:	2800      	cmp	r0, #0
 800e1d0:	d13c      	bne.n	800e24c <_dtoa_r+0x2ec>
 800e1d2:	4b1b      	ldr	r3, [pc, #108]	@ (800e240 <_dtoa_r+0x2e0>)
 800e1d4:	4602      	mov	r2, r0
 800e1d6:	f240 11af 	movw	r1, #431	@ 0x1af
 800e1da:	e6d8      	b.n	800df8e <_dtoa_r+0x2e>
 800e1dc:	2301      	movs	r3, #1
 800e1de:	e7e0      	b.n	800e1a2 <_dtoa_r+0x242>
 800e1e0:	2401      	movs	r4, #1
 800e1e2:	2300      	movs	r3, #0
 800e1e4:	9309      	str	r3, [sp, #36]	@ 0x24
 800e1e6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e1e8:	f04f 33ff 	mov.w	r3, #4294967295
 800e1ec:	9300      	str	r3, [sp, #0]
 800e1ee:	9307      	str	r3, [sp, #28]
 800e1f0:	2200      	movs	r2, #0
 800e1f2:	2312      	movs	r3, #18
 800e1f4:	e7d0      	b.n	800e198 <_dtoa_r+0x238>
 800e1f6:	2301      	movs	r3, #1
 800e1f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e1fa:	e7f5      	b.n	800e1e8 <_dtoa_r+0x288>
 800e1fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e1fe:	9300      	str	r3, [sp, #0]
 800e200:	9307      	str	r3, [sp, #28]
 800e202:	e7d7      	b.n	800e1b4 <_dtoa_r+0x254>
 800e204:	3101      	adds	r1, #1
 800e206:	0052      	lsls	r2, r2, #1
 800e208:	e7d8      	b.n	800e1bc <_dtoa_r+0x25c>
 800e20a:	bf00      	nop
 800e20c:	f3af 8000 	nop.w
 800e210:	636f4361 	.word	0x636f4361
 800e214:	3fd287a7 	.word	0x3fd287a7
 800e218:	8b60c8b3 	.word	0x8b60c8b3
 800e21c:	3fc68a28 	.word	0x3fc68a28
 800e220:	509f79fb 	.word	0x509f79fb
 800e224:	3fd34413 	.word	0x3fd34413
 800e228:	08010261 	.word	0x08010261
 800e22c:	08010278 	.word	0x08010278
 800e230:	7ff00000 	.word	0x7ff00000
 800e234:	08010231 	.word	0x08010231
 800e238:	3ff80000 	.word	0x3ff80000
 800e23c:	08010370 	.word	0x08010370
 800e240:	080102d0 	.word	0x080102d0
 800e244:	0801025d 	.word	0x0801025d
 800e248:	08010230 	.word	0x08010230
 800e24c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e250:	6018      	str	r0, [r3, #0]
 800e252:	9b07      	ldr	r3, [sp, #28]
 800e254:	2b0e      	cmp	r3, #14
 800e256:	f200 80a4 	bhi.w	800e3a2 <_dtoa_r+0x442>
 800e25a:	2c00      	cmp	r4, #0
 800e25c:	f000 80a1 	beq.w	800e3a2 <_dtoa_r+0x442>
 800e260:	2f00      	cmp	r7, #0
 800e262:	dd33      	ble.n	800e2cc <_dtoa_r+0x36c>
 800e264:	4bad      	ldr	r3, [pc, #692]	@ (800e51c <_dtoa_r+0x5bc>)
 800e266:	f007 020f 	and.w	r2, r7, #15
 800e26a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e26e:	ed93 7b00 	vldr	d7, [r3]
 800e272:	05f8      	lsls	r0, r7, #23
 800e274:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e278:	ea4f 1427 	mov.w	r4, r7, asr #4
 800e27c:	d516      	bpl.n	800e2ac <_dtoa_r+0x34c>
 800e27e:	4ba8      	ldr	r3, [pc, #672]	@ (800e520 <_dtoa_r+0x5c0>)
 800e280:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e284:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e288:	f7f2 fae0 	bl	800084c <__aeabi_ddiv>
 800e28c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e290:	f004 040f 	and.w	r4, r4, #15
 800e294:	2603      	movs	r6, #3
 800e296:	4da2      	ldr	r5, [pc, #648]	@ (800e520 <_dtoa_r+0x5c0>)
 800e298:	b954      	cbnz	r4, 800e2b0 <_dtoa_r+0x350>
 800e29a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e29e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e2a2:	f7f2 fad3 	bl	800084c <__aeabi_ddiv>
 800e2a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e2aa:	e028      	b.n	800e2fe <_dtoa_r+0x39e>
 800e2ac:	2602      	movs	r6, #2
 800e2ae:	e7f2      	b.n	800e296 <_dtoa_r+0x336>
 800e2b0:	07e1      	lsls	r1, r4, #31
 800e2b2:	d508      	bpl.n	800e2c6 <_dtoa_r+0x366>
 800e2b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e2b8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e2bc:	f7f2 f99c 	bl	80005f8 <__aeabi_dmul>
 800e2c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e2c4:	3601      	adds	r6, #1
 800e2c6:	1064      	asrs	r4, r4, #1
 800e2c8:	3508      	adds	r5, #8
 800e2ca:	e7e5      	b.n	800e298 <_dtoa_r+0x338>
 800e2cc:	f000 80d2 	beq.w	800e474 <_dtoa_r+0x514>
 800e2d0:	427c      	negs	r4, r7
 800e2d2:	4b92      	ldr	r3, [pc, #584]	@ (800e51c <_dtoa_r+0x5bc>)
 800e2d4:	4d92      	ldr	r5, [pc, #584]	@ (800e520 <_dtoa_r+0x5c0>)
 800e2d6:	f004 020f 	and.w	r2, r4, #15
 800e2da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e2de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2e2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e2e6:	f7f2 f987 	bl	80005f8 <__aeabi_dmul>
 800e2ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e2ee:	1124      	asrs	r4, r4, #4
 800e2f0:	2300      	movs	r3, #0
 800e2f2:	2602      	movs	r6, #2
 800e2f4:	2c00      	cmp	r4, #0
 800e2f6:	f040 80b2 	bne.w	800e45e <_dtoa_r+0x4fe>
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d1d3      	bne.n	800e2a6 <_dtoa_r+0x346>
 800e2fe:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e300:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e304:	2b00      	cmp	r3, #0
 800e306:	f000 80b7 	beq.w	800e478 <_dtoa_r+0x518>
 800e30a:	4b86      	ldr	r3, [pc, #536]	@ (800e524 <_dtoa_r+0x5c4>)
 800e30c:	2200      	movs	r2, #0
 800e30e:	4620      	mov	r0, r4
 800e310:	4629      	mov	r1, r5
 800e312:	f7f2 fbe3 	bl	8000adc <__aeabi_dcmplt>
 800e316:	2800      	cmp	r0, #0
 800e318:	f000 80ae 	beq.w	800e478 <_dtoa_r+0x518>
 800e31c:	9b07      	ldr	r3, [sp, #28]
 800e31e:	2b00      	cmp	r3, #0
 800e320:	f000 80aa 	beq.w	800e478 <_dtoa_r+0x518>
 800e324:	9b00      	ldr	r3, [sp, #0]
 800e326:	2b00      	cmp	r3, #0
 800e328:	dd37      	ble.n	800e39a <_dtoa_r+0x43a>
 800e32a:	1e7b      	subs	r3, r7, #1
 800e32c:	9304      	str	r3, [sp, #16]
 800e32e:	4620      	mov	r0, r4
 800e330:	4b7d      	ldr	r3, [pc, #500]	@ (800e528 <_dtoa_r+0x5c8>)
 800e332:	2200      	movs	r2, #0
 800e334:	4629      	mov	r1, r5
 800e336:	f7f2 f95f 	bl	80005f8 <__aeabi_dmul>
 800e33a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e33e:	9c00      	ldr	r4, [sp, #0]
 800e340:	3601      	adds	r6, #1
 800e342:	4630      	mov	r0, r6
 800e344:	f7f2 f8ee 	bl	8000524 <__aeabi_i2d>
 800e348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e34c:	f7f2 f954 	bl	80005f8 <__aeabi_dmul>
 800e350:	4b76      	ldr	r3, [pc, #472]	@ (800e52c <_dtoa_r+0x5cc>)
 800e352:	2200      	movs	r2, #0
 800e354:	f7f1 ff9a 	bl	800028c <__adddf3>
 800e358:	4605      	mov	r5, r0
 800e35a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e35e:	2c00      	cmp	r4, #0
 800e360:	f040 808d 	bne.w	800e47e <_dtoa_r+0x51e>
 800e364:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e368:	4b71      	ldr	r3, [pc, #452]	@ (800e530 <_dtoa_r+0x5d0>)
 800e36a:	2200      	movs	r2, #0
 800e36c:	f7f1 ff8c 	bl	8000288 <__aeabi_dsub>
 800e370:	4602      	mov	r2, r0
 800e372:	460b      	mov	r3, r1
 800e374:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e378:	462a      	mov	r2, r5
 800e37a:	4633      	mov	r3, r6
 800e37c:	f7f2 fbcc 	bl	8000b18 <__aeabi_dcmpgt>
 800e380:	2800      	cmp	r0, #0
 800e382:	f040 828b 	bne.w	800e89c <_dtoa_r+0x93c>
 800e386:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e38a:	462a      	mov	r2, r5
 800e38c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e390:	f7f2 fba4 	bl	8000adc <__aeabi_dcmplt>
 800e394:	2800      	cmp	r0, #0
 800e396:	f040 8128 	bne.w	800e5ea <_dtoa_r+0x68a>
 800e39a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800e39e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800e3a2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	f2c0 815a 	blt.w	800e65e <_dtoa_r+0x6fe>
 800e3aa:	2f0e      	cmp	r7, #14
 800e3ac:	f300 8157 	bgt.w	800e65e <_dtoa_r+0x6fe>
 800e3b0:	4b5a      	ldr	r3, [pc, #360]	@ (800e51c <_dtoa_r+0x5bc>)
 800e3b2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e3b6:	ed93 7b00 	vldr	d7, [r3]
 800e3ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	ed8d 7b00 	vstr	d7, [sp]
 800e3c2:	da03      	bge.n	800e3cc <_dtoa_r+0x46c>
 800e3c4:	9b07      	ldr	r3, [sp, #28]
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	f340 8101 	ble.w	800e5ce <_dtoa_r+0x66e>
 800e3cc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e3d0:	4656      	mov	r6, sl
 800e3d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e3d6:	4620      	mov	r0, r4
 800e3d8:	4629      	mov	r1, r5
 800e3da:	f7f2 fa37 	bl	800084c <__aeabi_ddiv>
 800e3de:	f7f2 fbbb 	bl	8000b58 <__aeabi_d2iz>
 800e3e2:	4680      	mov	r8, r0
 800e3e4:	f7f2 f89e 	bl	8000524 <__aeabi_i2d>
 800e3e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e3ec:	f7f2 f904 	bl	80005f8 <__aeabi_dmul>
 800e3f0:	4602      	mov	r2, r0
 800e3f2:	460b      	mov	r3, r1
 800e3f4:	4620      	mov	r0, r4
 800e3f6:	4629      	mov	r1, r5
 800e3f8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800e3fc:	f7f1 ff44 	bl	8000288 <__aeabi_dsub>
 800e400:	f806 4b01 	strb.w	r4, [r6], #1
 800e404:	9d07      	ldr	r5, [sp, #28]
 800e406:	eba6 040a 	sub.w	r4, r6, sl
 800e40a:	42a5      	cmp	r5, r4
 800e40c:	4602      	mov	r2, r0
 800e40e:	460b      	mov	r3, r1
 800e410:	f040 8117 	bne.w	800e642 <_dtoa_r+0x6e2>
 800e414:	f7f1 ff3a 	bl	800028c <__adddf3>
 800e418:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e41c:	4604      	mov	r4, r0
 800e41e:	460d      	mov	r5, r1
 800e420:	f7f2 fb7a 	bl	8000b18 <__aeabi_dcmpgt>
 800e424:	2800      	cmp	r0, #0
 800e426:	f040 80f9 	bne.w	800e61c <_dtoa_r+0x6bc>
 800e42a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e42e:	4620      	mov	r0, r4
 800e430:	4629      	mov	r1, r5
 800e432:	f7f2 fb49 	bl	8000ac8 <__aeabi_dcmpeq>
 800e436:	b118      	cbz	r0, 800e440 <_dtoa_r+0x4e0>
 800e438:	f018 0f01 	tst.w	r8, #1
 800e43c:	f040 80ee 	bne.w	800e61c <_dtoa_r+0x6bc>
 800e440:	4649      	mov	r1, r9
 800e442:	4658      	mov	r0, fp
 800e444:	f000 fc90 	bl	800ed68 <_Bfree>
 800e448:	2300      	movs	r3, #0
 800e44a:	7033      	strb	r3, [r6, #0]
 800e44c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e44e:	3701      	adds	r7, #1
 800e450:	601f      	str	r7, [r3, #0]
 800e452:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e454:	2b00      	cmp	r3, #0
 800e456:	f000 831d 	beq.w	800ea94 <_dtoa_r+0xb34>
 800e45a:	601e      	str	r6, [r3, #0]
 800e45c:	e31a      	b.n	800ea94 <_dtoa_r+0xb34>
 800e45e:	07e2      	lsls	r2, r4, #31
 800e460:	d505      	bpl.n	800e46e <_dtoa_r+0x50e>
 800e462:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e466:	f7f2 f8c7 	bl	80005f8 <__aeabi_dmul>
 800e46a:	3601      	adds	r6, #1
 800e46c:	2301      	movs	r3, #1
 800e46e:	1064      	asrs	r4, r4, #1
 800e470:	3508      	adds	r5, #8
 800e472:	e73f      	b.n	800e2f4 <_dtoa_r+0x394>
 800e474:	2602      	movs	r6, #2
 800e476:	e742      	b.n	800e2fe <_dtoa_r+0x39e>
 800e478:	9c07      	ldr	r4, [sp, #28]
 800e47a:	9704      	str	r7, [sp, #16]
 800e47c:	e761      	b.n	800e342 <_dtoa_r+0x3e2>
 800e47e:	4b27      	ldr	r3, [pc, #156]	@ (800e51c <_dtoa_r+0x5bc>)
 800e480:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e482:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e486:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e48a:	4454      	add	r4, sl
 800e48c:	2900      	cmp	r1, #0
 800e48e:	d053      	beq.n	800e538 <_dtoa_r+0x5d8>
 800e490:	4928      	ldr	r1, [pc, #160]	@ (800e534 <_dtoa_r+0x5d4>)
 800e492:	2000      	movs	r0, #0
 800e494:	f7f2 f9da 	bl	800084c <__aeabi_ddiv>
 800e498:	4633      	mov	r3, r6
 800e49a:	462a      	mov	r2, r5
 800e49c:	f7f1 fef4 	bl	8000288 <__aeabi_dsub>
 800e4a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e4a4:	4656      	mov	r6, sl
 800e4a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e4aa:	f7f2 fb55 	bl	8000b58 <__aeabi_d2iz>
 800e4ae:	4605      	mov	r5, r0
 800e4b0:	f7f2 f838 	bl	8000524 <__aeabi_i2d>
 800e4b4:	4602      	mov	r2, r0
 800e4b6:	460b      	mov	r3, r1
 800e4b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e4bc:	f7f1 fee4 	bl	8000288 <__aeabi_dsub>
 800e4c0:	3530      	adds	r5, #48	@ 0x30
 800e4c2:	4602      	mov	r2, r0
 800e4c4:	460b      	mov	r3, r1
 800e4c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e4ca:	f806 5b01 	strb.w	r5, [r6], #1
 800e4ce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e4d2:	f7f2 fb03 	bl	8000adc <__aeabi_dcmplt>
 800e4d6:	2800      	cmp	r0, #0
 800e4d8:	d171      	bne.n	800e5be <_dtoa_r+0x65e>
 800e4da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e4de:	4911      	ldr	r1, [pc, #68]	@ (800e524 <_dtoa_r+0x5c4>)
 800e4e0:	2000      	movs	r0, #0
 800e4e2:	f7f1 fed1 	bl	8000288 <__aeabi_dsub>
 800e4e6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e4ea:	f7f2 faf7 	bl	8000adc <__aeabi_dcmplt>
 800e4ee:	2800      	cmp	r0, #0
 800e4f0:	f040 8095 	bne.w	800e61e <_dtoa_r+0x6be>
 800e4f4:	42a6      	cmp	r6, r4
 800e4f6:	f43f af50 	beq.w	800e39a <_dtoa_r+0x43a>
 800e4fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e4fe:	4b0a      	ldr	r3, [pc, #40]	@ (800e528 <_dtoa_r+0x5c8>)
 800e500:	2200      	movs	r2, #0
 800e502:	f7f2 f879 	bl	80005f8 <__aeabi_dmul>
 800e506:	4b08      	ldr	r3, [pc, #32]	@ (800e528 <_dtoa_r+0x5c8>)
 800e508:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e50c:	2200      	movs	r2, #0
 800e50e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e512:	f7f2 f871 	bl	80005f8 <__aeabi_dmul>
 800e516:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e51a:	e7c4      	b.n	800e4a6 <_dtoa_r+0x546>
 800e51c:	08010370 	.word	0x08010370
 800e520:	08010348 	.word	0x08010348
 800e524:	3ff00000 	.word	0x3ff00000
 800e528:	40240000 	.word	0x40240000
 800e52c:	401c0000 	.word	0x401c0000
 800e530:	40140000 	.word	0x40140000
 800e534:	3fe00000 	.word	0x3fe00000
 800e538:	4631      	mov	r1, r6
 800e53a:	4628      	mov	r0, r5
 800e53c:	f7f2 f85c 	bl	80005f8 <__aeabi_dmul>
 800e540:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e544:	9415      	str	r4, [sp, #84]	@ 0x54
 800e546:	4656      	mov	r6, sl
 800e548:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e54c:	f7f2 fb04 	bl	8000b58 <__aeabi_d2iz>
 800e550:	4605      	mov	r5, r0
 800e552:	f7f1 ffe7 	bl	8000524 <__aeabi_i2d>
 800e556:	4602      	mov	r2, r0
 800e558:	460b      	mov	r3, r1
 800e55a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e55e:	f7f1 fe93 	bl	8000288 <__aeabi_dsub>
 800e562:	3530      	adds	r5, #48	@ 0x30
 800e564:	f806 5b01 	strb.w	r5, [r6], #1
 800e568:	4602      	mov	r2, r0
 800e56a:	460b      	mov	r3, r1
 800e56c:	42a6      	cmp	r6, r4
 800e56e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e572:	f04f 0200 	mov.w	r2, #0
 800e576:	d124      	bne.n	800e5c2 <_dtoa_r+0x662>
 800e578:	4bac      	ldr	r3, [pc, #688]	@ (800e82c <_dtoa_r+0x8cc>)
 800e57a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e57e:	f7f1 fe85 	bl	800028c <__adddf3>
 800e582:	4602      	mov	r2, r0
 800e584:	460b      	mov	r3, r1
 800e586:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e58a:	f7f2 fac5 	bl	8000b18 <__aeabi_dcmpgt>
 800e58e:	2800      	cmp	r0, #0
 800e590:	d145      	bne.n	800e61e <_dtoa_r+0x6be>
 800e592:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e596:	49a5      	ldr	r1, [pc, #660]	@ (800e82c <_dtoa_r+0x8cc>)
 800e598:	2000      	movs	r0, #0
 800e59a:	f7f1 fe75 	bl	8000288 <__aeabi_dsub>
 800e59e:	4602      	mov	r2, r0
 800e5a0:	460b      	mov	r3, r1
 800e5a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e5a6:	f7f2 fa99 	bl	8000adc <__aeabi_dcmplt>
 800e5aa:	2800      	cmp	r0, #0
 800e5ac:	f43f aef5 	beq.w	800e39a <_dtoa_r+0x43a>
 800e5b0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800e5b2:	1e73      	subs	r3, r6, #1
 800e5b4:	9315      	str	r3, [sp, #84]	@ 0x54
 800e5b6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e5ba:	2b30      	cmp	r3, #48	@ 0x30
 800e5bc:	d0f8      	beq.n	800e5b0 <_dtoa_r+0x650>
 800e5be:	9f04      	ldr	r7, [sp, #16]
 800e5c0:	e73e      	b.n	800e440 <_dtoa_r+0x4e0>
 800e5c2:	4b9b      	ldr	r3, [pc, #620]	@ (800e830 <_dtoa_r+0x8d0>)
 800e5c4:	f7f2 f818 	bl	80005f8 <__aeabi_dmul>
 800e5c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e5cc:	e7bc      	b.n	800e548 <_dtoa_r+0x5e8>
 800e5ce:	d10c      	bne.n	800e5ea <_dtoa_r+0x68a>
 800e5d0:	4b98      	ldr	r3, [pc, #608]	@ (800e834 <_dtoa_r+0x8d4>)
 800e5d2:	2200      	movs	r2, #0
 800e5d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e5d8:	f7f2 f80e 	bl	80005f8 <__aeabi_dmul>
 800e5dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e5e0:	f7f2 fa90 	bl	8000b04 <__aeabi_dcmpge>
 800e5e4:	2800      	cmp	r0, #0
 800e5e6:	f000 8157 	beq.w	800e898 <_dtoa_r+0x938>
 800e5ea:	2400      	movs	r4, #0
 800e5ec:	4625      	mov	r5, r4
 800e5ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e5f0:	43db      	mvns	r3, r3
 800e5f2:	9304      	str	r3, [sp, #16]
 800e5f4:	4656      	mov	r6, sl
 800e5f6:	2700      	movs	r7, #0
 800e5f8:	4621      	mov	r1, r4
 800e5fa:	4658      	mov	r0, fp
 800e5fc:	f000 fbb4 	bl	800ed68 <_Bfree>
 800e600:	2d00      	cmp	r5, #0
 800e602:	d0dc      	beq.n	800e5be <_dtoa_r+0x65e>
 800e604:	b12f      	cbz	r7, 800e612 <_dtoa_r+0x6b2>
 800e606:	42af      	cmp	r7, r5
 800e608:	d003      	beq.n	800e612 <_dtoa_r+0x6b2>
 800e60a:	4639      	mov	r1, r7
 800e60c:	4658      	mov	r0, fp
 800e60e:	f000 fbab 	bl	800ed68 <_Bfree>
 800e612:	4629      	mov	r1, r5
 800e614:	4658      	mov	r0, fp
 800e616:	f000 fba7 	bl	800ed68 <_Bfree>
 800e61a:	e7d0      	b.n	800e5be <_dtoa_r+0x65e>
 800e61c:	9704      	str	r7, [sp, #16]
 800e61e:	4633      	mov	r3, r6
 800e620:	461e      	mov	r6, r3
 800e622:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e626:	2a39      	cmp	r2, #57	@ 0x39
 800e628:	d107      	bne.n	800e63a <_dtoa_r+0x6da>
 800e62a:	459a      	cmp	sl, r3
 800e62c:	d1f8      	bne.n	800e620 <_dtoa_r+0x6c0>
 800e62e:	9a04      	ldr	r2, [sp, #16]
 800e630:	3201      	adds	r2, #1
 800e632:	9204      	str	r2, [sp, #16]
 800e634:	2230      	movs	r2, #48	@ 0x30
 800e636:	f88a 2000 	strb.w	r2, [sl]
 800e63a:	781a      	ldrb	r2, [r3, #0]
 800e63c:	3201      	adds	r2, #1
 800e63e:	701a      	strb	r2, [r3, #0]
 800e640:	e7bd      	b.n	800e5be <_dtoa_r+0x65e>
 800e642:	4b7b      	ldr	r3, [pc, #492]	@ (800e830 <_dtoa_r+0x8d0>)
 800e644:	2200      	movs	r2, #0
 800e646:	f7f1 ffd7 	bl	80005f8 <__aeabi_dmul>
 800e64a:	2200      	movs	r2, #0
 800e64c:	2300      	movs	r3, #0
 800e64e:	4604      	mov	r4, r0
 800e650:	460d      	mov	r5, r1
 800e652:	f7f2 fa39 	bl	8000ac8 <__aeabi_dcmpeq>
 800e656:	2800      	cmp	r0, #0
 800e658:	f43f aebb 	beq.w	800e3d2 <_dtoa_r+0x472>
 800e65c:	e6f0      	b.n	800e440 <_dtoa_r+0x4e0>
 800e65e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e660:	2a00      	cmp	r2, #0
 800e662:	f000 80db 	beq.w	800e81c <_dtoa_r+0x8bc>
 800e666:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e668:	2a01      	cmp	r2, #1
 800e66a:	f300 80bf 	bgt.w	800e7ec <_dtoa_r+0x88c>
 800e66e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800e670:	2a00      	cmp	r2, #0
 800e672:	f000 80b7 	beq.w	800e7e4 <_dtoa_r+0x884>
 800e676:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800e67a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e67c:	4646      	mov	r6, r8
 800e67e:	9a08      	ldr	r2, [sp, #32]
 800e680:	2101      	movs	r1, #1
 800e682:	441a      	add	r2, r3
 800e684:	4658      	mov	r0, fp
 800e686:	4498      	add	r8, r3
 800e688:	9208      	str	r2, [sp, #32]
 800e68a:	f000 fc21 	bl	800eed0 <__i2b>
 800e68e:	4605      	mov	r5, r0
 800e690:	b15e      	cbz	r6, 800e6aa <_dtoa_r+0x74a>
 800e692:	9b08      	ldr	r3, [sp, #32]
 800e694:	2b00      	cmp	r3, #0
 800e696:	dd08      	ble.n	800e6aa <_dtoa_r+0x74a>
 800e698:	42b3      	cmp	r3, r6
 800e69a:	9a08      	ldr	r2, [sp, #32]
 800e69c:	bfa8      	it	ge
 800e69e:	4633      	movge	r3, r6
 800e6a0:	eba8 0803 	sub.w	r8, r8, r3
 800e6a4:	1af6      	subs	r6, r6, r3
 800e6a6:	1ad3      	subs	r3, r2, r3
 800e6a8:	9308      	str	r3, [sp, #32]
 800e6aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e6ac:	b1f3      	cbz	r3, 800e6ec <_dtoa_r+0x78c>
 800e6ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	f000 80b7 	beq.w	800e824 <_dtoa_r+0x8c4>
 800e6b6:	b18c      	cbz	r4, 800e6dc <_dtoa_r+0x77c>
 800e6b8:	4629      	mov	r1, r5
 800e6ba:	4622      	mov	r2, r4
 800e6bc:	4658      	mov	r0, fp
 800e6be:	f000 fcc7 	bl	800f050 <__pow5mult>
 800e6c2:	464a      	mov	r2, r9
 800e6c4:	4601      	mov	r1, r0
 800e6c6:	4605      	mov	r5, r0
 800e6c8:	4658      	mov	r0, fp
 800e6ca:	f000 fc17 	bl	800eefc <__multiply>
 800e6ce:	4649      	mov	r1, r9
 800e6d0:	9004      	str	r0, [sp, #16]
 800e6d2:	4658      	mov	r0, fp
 800e6d4:	f000 fb48 	bl	800ed68 <_Bfree>
 800e6d8:	9b04      	ldr	r3, [sp, #16]
 800e6da:	4699      	mov	r9, r3
 800e6dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e6de:	1b1a      	subs	r2, r3, r4
 800e6e0:	d004      	beq.n	800e6ec <_dtoa_r+0x78c>
 800e6e2:	4649      	mov	r1, r9
 800e6e4:	4658      	mov	r0, fp
 800e6e6:	f000 fcb3 	bl	800f050 <__pow5mult>
 800e6ea:	4681      	mov	r9, r0
 800e6ec:	2101      	movs	r1, #1
 800e6ee:	4658      	mov	r0, fp
 800e6f0:	f000 fbee 	bl	800eed0 <__i2b>
 800e6f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e6f6:	4604      	mov	r4, r0
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	f000 81cf 	beq.w	800ea9c <_dtoa_r+0xb3c>
 800e6fe:	461a      	mov	r2, r3
 800e700:	4601      	mov	r1, r0
 800e702:	4658      	mov	r0, fp
 800e704:	f000 fca4 	bl	800f050 <__pow5mult>
 800e708:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e70a:	2b01      	cmp	r3, #1
 800e70c:	4604      	mov	r4, r0
 800e70e:	f300 8095 	bgt.w	800e83c <_dtoa_r+0x8dc>
 800e712:	9b02      	ldr	r3, [sp, #8]
 800e714:	2b00      	cmp	r3, #0
 800e716:	f040 8087 	bne.w	800e828 <_dtoa_r+0x8c8>
 800e71a:	9b03      	ldr	r3, [sp, #12]
 800e71c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e720:	2b00      	cmp	r3, #0
 800e722:	f040 8089 	bne.w	800e838 <_dtoa_r+0x8d8>
 800e726:	9b03      	ldr	r3, [sp, #12]
 800e728:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e72c:	0d1b      	lsrs	r3, r3, #20
 800e72e:	051b      	lsls	r3, r3, #20
 800e730:	b12b      	cbz	r3, 800e73e <_dtoa_r+0x7de>
 800e732:	9b08      	ldr	r3, [sp, #32]
 800e734:	3301      	adds	r3, #1
 800e736:	9308      	str	r3, [sp, #32]
 800e738:	f108 0801 	add.w	r8, r8, #1
 800e73c:	2301      	movs	r3, #1
 800e73e:	930a      	str	r3, [sp, #40]	@ 0x28
 800e740:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e742:	2b00      	cmp	r3, #0
 800e744:	f000 81b0 	beq.w	800eaa8 <_dtoa_r+0xb48>
 800e748:	6923      	ldr	r3, [r4, #16]
 800e74a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e74e:	6918      	ldr	r0, [r3, #16]
 800e750:	f000 fb72 	bl	800ee38 <__hi0bits>
 800e754:	f1c0 0020 	rsb	r0, r0, #32
 800e758:	9b08      	ldr	r3, [sp, #32]
 800e75a:	4418      	add	r0, r3
 800e75c:	f010 001f 	ands.w	r0, r0, #31
 800e760:	d077      	beq.n	800e852 <_dtoa_r+0x8f2>
 800e762:	f1c0 0320 	rsb	r3, r0, #32
 800e766:	2b04      	cmp	r3, #4
 800e768:	dd6b      	ble.n	800e842 <_dtoa_r+0x8e2>
 800e76a:	9b08      	ldr	r3, [sp, #32]
 800e76c:	f1c0 001c 	rsb	r0, r0, #28
 800e770:	4403      	add	r3, r0
 800e772:	4480      	add	r8, r0
 800e774:	4406      	add	r6, r0
 800e776:	9308      	str	r3, [sp, #32]
 800e778:	f1b8 0f00 	cmp.w	r8, #0
 800e77c:	dd05      	ble.n	800e78a <_dtoa_r+0x82a>
 800e77e:	4649      	mov	r1, r9
 800e780:	4642      	mov	r2, r8
 800e782:	4658      	mov	r0, fp
 800e784:	f000 fcbe 	bl	800f104 <__lshift>
 800e788:	4681      	mov	r9, r0
 800e78a:	9b08      	ldr	r3, [sp, #32]
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	dd05      	ble.n	800e79c <_dtoa_r+0x83c>
 800e790:	4621      	mov	r1, r4
 800e792:	461a      	mov	r2, r3
 800e794:	4658      	mov	r0, fp
 800e796:	f000 fcb5 	bl	800f104 <__lshift>
 800e79a:	4604      	mov	r4, r0
 800e79c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d059      	beq.n	800e856 <_dtoa_r+0x8f6>
 800e7a2:	4621      	mov	r1, r4
 800e7a4:	4648      	mov	r0, r9
 800e7a6:	f000 fd19 	bl	800f1dc <__mcmp>
 800e7aa:	2800      	cmp	r0, #0
 800e7ac:	da53      	bge.n	800e856 <_dtoa_r+0x8f6>
 800e7ae:	1e7b      	subs	r3, r7, #1
 800e7b0:	9304      	str	r3, [sp, #16]
 800e7b2:	4649      	mov	r1, r9
 800e7b4:	2300      	movs	r3, #0
 800e7b6:	220a      	movs	r2, #10
 800e7b8:	4658      	mov	r0, fp
 800e7ba:	f000 faf7 	bl	800edac <__multadd>
 800e7be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e7c0:	4681      	mov	r9, r0
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	f000 8172 	beq.w	800eaac <_dtoa_r+0xb4c>
 800e7c8:	2300      	movs	r3, #0
 800e7ca:	4629      	mov	r1, r5
 800e7cc:	220a      	movs	r2, #10
 800e7ce:	4658      	mov	r0, fp
 800e7d0:	f000 faec 	bl	800edac <__multadd>
 800e7d4:	9b00      	ldr	r3, [sp, #0]
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	4605      	mov	r5, r0
 800e7da:	dc67      	bgt.n	800e8ac <_dtoa_r+0x94c>
 800e7dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e7de:	2b02      	cmp	r3, #2
 800e7e0:	dc41      	bgt.n	800e866 <_dtoa_r+0x906>
 800e7e2:	e063      	b.n	800e8ac <_dtoa_r+0x94c>
 800e7e4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e7e6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800e7ea:	e746      	b.n	800e67a <_dtoa_r+0x71a>
 800e7ec:	9b07      	ldr	r3, [sp, #28]
 800e7ee:	1e5c      	subs	r4, r3, #1
 800e7f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e7f2:	42a3      	cmp	r3, r4
 800e7f4:	bfbf      	itttt	lt
 800e7f6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800e7f8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800e7fa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800e7fc:	1ae3      	sublt	r3, r4, r3
 800e7fe:	bfb4      	ite	lt
 800e800:	18d2      	addlt	r2, r2, r3
 800e802:	1b1c      	subge	r4, r3, r4
 800e804:	9b07      	ldr	r3, [sp, #28]
 800e806:	bfbc      	itt	lt
 800e808:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800e80a:	2400      	movlt	r4, #0
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	bfb5      	itete	lt
 800e810:	eba8 0603 	sublt.w	r6, r8, r3
 800e814:	9b07      	ldrge	r3, [sp, #28]
 800e816:	2300      	movlt	r3, #0
 800e818:	4646      	movge	r6, r8
 800e81a:	e730      	b.n	800e67e <_dtoa_r+0x71e>
 800e81c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e81e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800e820:	4646      	mov	r6, r8
 800e822:	e735      	b.n	800e690 <_dtoa_r+0x730>
 800e824:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e826:	e75c      	b.n	800e6e2 <_dtoa_r+0x782>
 800e828:	2300      	movs	r3, #0
 800e82a:	e788      	b.n	800e73e <_dtoa_r+0x7de>
 800e82c:	3fe00000 	.word	0x3fe00000
 800e830:	40240000 	.word	0x40240000
 800e834:	40140000 	.word	0x40140000
 800e838:	9b02      	ldr	r3, [sp, #8]
 800e83a:	e780      	b.n	800e73e <_dtoa_r+0x7de>
 800e83c:	2300      	movs	r3, #0
 800e83e:	930a      	str	r3, [sp, #40]	@ 0x28
 800e840:	e782      	b.n	800e748 <_dtoa_r+0x7e8>
 800e842:	d099      	beq.n	800e778 <_dtoa_r+0x818>
 800e844:	9a08      	ldr	r2, [sp, #32]
 800e846:	331c      	adds	r3, #28
 800e848:	441a      	add	r2, r3
 800e84a:	4498      	add	r8, r3
 800e84c:	441e      	add	r6, r3
 800e84e:	9208      	str	r2, [sp, #32]
 800e850:	e792      	b.n	800e778 <_dtoa_r+0x818>
 800e852:	4603      	mov	r3, r0
 800e854:	e7f6      	b.n	800e844 <_dtoa_r+0x8e4>
 800e856:	9b07      	ldr	r3, [sp, #28]
 800e858:	9704      	str	r7, [sp, #16]
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	dc20      	bgt.n	800e8a0 <_dtoa_r+0x940>
 800e85e:	9300      	str	r3, [sp, #0]
 800e860:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e862:	2b02      	cmp	r3, #2
 800e864:	dd1e      	ble.n	800e8a4 <_dtoa_r+0x944>
 800e866:	9b00      	ldr	r3, [sp, #0]
 800e868:	2b00      	cmp	r3, #0
 800e86a:	f47f aec0 	bne.w	800e5ee <_dtoa_r+0x68e>
 800e86e:	4621      	mov	r1, r4
 800e870:	2205      	movs	r2, #5
 800e872:	4658      	mov	r0, fp
 800e874:	f000 fa9a 	bl	800edac <__multadd>
 800e878:	4601      	mov	r1, r0
 800e87a:	4604      	mov	r4, r0
 800e87c:	4648      	mov	r0, r9
 800e87e:	f000 fcad 	bl	800f1dc <__mcmp>
 800e882:	2800      	cmp	r0, #0
 800e884:	f77f aeb3 	ble.w	800e5ee <_dtoa_r+0x68e>
 800e888:	4656      	mov	r6, sl
 800e88a:	2331      	movs	r3, #49	@ 0x31
 800e88c:	f806 3b01 	strb.w	r3, [r6], #1
 800e890:	9b04      	ldr	r3, [sp, #16]
 800e892:	3301      	adds	r3, #1
 800e894:	9304      	str	r3, [sp, #16]
 800e896:	e6ae      	b.n	800e5f6 <_dtoa_r+0x696>
 800e898:	9c07      	ldr	r4, [sp, #28]
 800e89a:	9704      	str	r7, [sp, #16]
 800e89c:	4625      	mov	r5, r4
 800e89e:	e7f3      	b.n	800e888 <_dtoa_r+0x928>
 800e8a0:	9b07      	ldr	r3, [sp, #28]
 800e8a2:	9300      	str	r3, [sp, #0]
 800e8a4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	f000 8104 	beq.w	800eab4 <_dtoa_r+0xb54>
 800e8ac:	2e00      	cmp	r6, #0
 800e8ae:	dd05      	ble.n	800e8bc <_dtoa_r+0x95c>
 800e8b0:	4629      	mov	r1, r5
 800e8b2:	4632      	mov	r2, r6
 800e8b4:	4658      	mov	r0, fp
 800e8b6:	f000 fc25 	bl	800f104 <__lshift>
 800e8ba:	4605      	mov	r5, r0
 800e8bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d05a      	beq.n	800e978 <_dtoa_r+0xa18>
 800e8c2:	6869      	ldr	r1, [r5, #4]
 800e8c4:	4658      	mov	r0, fp
 800e8c6:	f000 fa0f 	bl	800ece8 <_Balloc>
 800e8ca:	4606      	mov	r6, r0
 800e8cc:	b928      	cbnz	r0, 800e8da <_dtoa_r+0x97a>
 800e8ce:	4b84      	ldr	r3, [pc, #528]	@ (800eae0 <_dtoa_r+0xb80>)
 800e8d0:	4602      	mov	r2, r0
 800e8d2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800e8d6:	f7ff bb5a 	b.w	800df8e <_dtoa_r+0x2e>
 800e8da:	692a      	ldr	r2, [r5, #16]
 800e8dc:	3202      	adds	r2, #2
 800e8de:	0092      	lsls	r2, r2, #2
 800e8e0:	f105 010c 	add.w	r1, r5, #12
 800e8e4:	300c      	adds	r0, #12
 800e8e6:	f000 fe3d 	bl	800f564 <memcpy>
 800e8ea:	2201      	movs	r2, #1
 800e8ec:	4631      	mov	r1, r6
 800e8ee:	4658      	mov	r0, fp
 800e8f0:	f000 fc08 	bl	800f104 <__lshift>
 800e8f4:	f10a 0301 	add.w	r3, sl, #1
 800e8f8:	9307      	str	r3, [sp, #28]
 800e8fa:	9b00      	ldr	r3, [sp, #0]
 800e8fc:	4453      	add	r3, sl
 800e8fe:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e900:	9b02      	ldr	r3, [sp, #8]
 800e902:	f003 0301 	and.w	r3, r3, #1
 800e906:	462f      	mov	r7, r5
 800e908:	930a      	str	r3, [sp, #40]	@ 0x28
 800e90a:	4605      	mov	r5, r0
 800e90c:	9b07      	ldr	r3, [sp, #28]
 800e90e:	4621      	mov	r1, r4
 800e910:	3b01      	subs	r3, #1
 800e912:	4648      	mov	r0, r9
 800e914:	9300      	str	r3, [sp, #0]
 800e916:	f7ff fa9a 	bl	800de4e <quorem>
 800e91a:	4639      	mov	r1, r7
 800e91c:	9002      	str	r0, [sp, #8]
 800e91e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800e922:	4648      	mov	r0, r9
 800e924:	f000 fc5a 	bl	800f1dc <__mcmp>
 800e928:	462a      	mov	r2, r5
 800e92a:	9008      	str	r0, [sp, #32]
 800e92c:	4621      	mov	r1, r4
 800e92e:	4658      	mov	r0, fp
 800e930:	f000 fc70 	bl	800f214 <__mdiff>
 800e934:	68c2      	ldr	r2, [r0, #12]
 800e936:	4606      	mov	r6, r0
 800e938:	bb02      	cbnz	r2, 800e97c <_dtoa_r+0xa1c>
 800e93a:	4601      	mov	r1, r0
 800e93c:	4648      	mov	r0, r9
 800e93e:	f000 fc4d 	bl	800f1dc <__mcmp>
 800e942:	4602      	mov	r2, r0
 800e944:	4631      	mov	r1, r6
 800e946:	4658      	mov	r0, fp
 800e948:	920e      	str	r2, [sp, #56]	@ 0x38
 800e94a:	f000 fa0d 	bl	800ed68 <_Bfree>
 800e94e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e950:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e952:	9e07      	ldr	r6, [sp, #28]
 800e954:	ea43 0102 	orr.w	r1, r3, r2
 800e958:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e95a:	4319      	orrs	r1, r3
 800e95c:	d110      	bne.n	800e980 <_dtoa_r+0xa20>
 800e95e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e962:	d029      	beq.n	800e9b8 <_dtoa_r+0xa58>
 800e964:	9b08      	ldr	r3, [sp, #32]
 800e966:	2b00      	cmp	r3, #0
 800e968:	dd02      	ble.n	800e970 <_dtoa_r+0xa10>
 800e96a:	9b02      	ldr	r3, [sp, #8]
 800e96c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800e970:	9b00      	ldr	r3, [sp, #0]
 800e972:	f883 8000 	strb.w	r8, [r3]
 800e976:	e63f      	b.n	800e5f8 <_dtoa_r+0x698>
 800e978:	4628      	mov	r0, r5
 800e97a:	e7bb      	b.n	800e8f4 <_dtoa_r+0x994>
 800e97c:	2201      	movs	r2, #1
 800e97e:	e7e1      	b.n	800e944 <_dtoa_r+0x9e4>
 800e980:	9b08      	ldr	r3, [sp, #32]
 800e982:	2b00      	cmp	r3, #0
 800e984:	db04      	blt.n	800e990 <_dtoa_r+0xa30>
 800e986:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e988:	430b      	orrs	r3, r1
 800e98a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e98c:	430b      	orrs	r3, r1
 800e98e:	d120      	bne.n	800e9d2 <_dtoa_r+0xa72>
 800e990:	2a00      	cmp	r2, #0
 800e992:	dded      	ble.n	800e970 <_dtoa_r+0xa10>
 800e994:	4649      	mov	r1, r9
 800e996:	2201      	movs	r2, #1
 800e998:	4658      	mov	r0, fp
 800e99a:	f000 fbb3 	bl	800f104 <__lshift>
 800e99e:	4621      	mov	r1, r4
 800e9a0:	4681      	mov	r9, r0
 800e9a2:	f000 fc1b 	bl	800f1dc <__mcmp>
 800e9a6:	2800      	cmp	r0, #0
 800e9a8:	dc03      	bgt.n	800e9b2 <_dtoa_r+0xa52>
 800e9aa:	d1e1      	bne.n	800e970 <_dtoa_r+0xa10>
 800e9ac:	f018 0f01 	tst.w	r8, #1
 800e9b0:	d0de      	beq.n	800e970 <_dtoa_r+0xa10>
 800e9b2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e9b6:	d1d8      	bne.n	800e96a <_dtoa_r+0xa0a>
 800e9b8:	9a00      	ldr	r2, [sp, #0]
 800e9ba:	2339      	movs	r3, #57	@ 0x39
 800e9bc:	7013      	strb	r3, [r2, #0]
 800e9be:	4633      	mov	r3, r6
 800e9c0:	461e      	mov	r6, r3
 800e9c2:	3b01      	subs	r3, #1
 800e9c4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800e9c8:	2a39      	cmp	r2, #57	@ 0x39
 800e9ca:	d052      	beq.n	800ea72 <_dtoa_r+0xb12>
 800e9cc:	3201      	adds	r2, #1
 800e9ce:	701a      	strb	r2, [r3, #0]
 800e9d0:	e612      	b.n	800e5f8 <_dtoa_r+0x698>
 800e9d2:	2a00      	cmp	r2, #0
 800e9d4:	dd07      	ble.n	800e9e6 <_dtoa_r+0xa86>
 800e9d6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e9da:	d0ed      	beq.n	800e9b8 <_dtoa_r+0xa58>
 800e9dc:	9a00      	ldr	r2, [sp, #0]
 800e9de:	f108 0301 	add.w	r3, r8, #1
 800e9e2:	7013      	strb	r3, [r2, #0]
 800e9e4:	e608      	b.n	800e5f8 <_dtoa_r+0x698>
 800e9e6:	9b07      	ldr	r3, [sp, #28]
 800e9e8:	9a07      	ldr	r2, [sp, #28]
 800e9ea:	f803 8c01 	strb.w	r8, [r3, #-1]
 800e9ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e9f0:	4293      	cmp	r3, r2
 800e9f2:	d028      	beq.n	800ea46 <_dtoa_r+0xae6>
 800e9f4:	4649      	mov	r1, r9
 800e9f6:	2300      	movs	r3, #0
 800e9f8:	220a      	movs	r2, #10
 800e9fa:	4658      	mov	r0, fp
 800e9fc:	f000 f9d6 	bl	800edac <__multadd>
 800ea00:	42af      	cmp	r7, r5
 800ea02:	4681      	mov	r9, r0
 800ea04:	f04f 0300 	mov.w	r3, #0
 800ea08:	f04f 020a 	mov.w	r2, #10
 800ea0c:	4639      	mov	r1, r7
 800ea0e:	4658      	mov	r0, fp
 800ea10:	d107      	bne.n	800ea22 <_dtoa_r+0xac2>
 800ea12:	f000 f9cb 	bl	800edac <__multadd>
 800ea16:	4607      	mov	r7, r0
 800ea18:	4605      	mov	r5, r0
 800ea1a:	9b07      	ldr	r3, [sp, #28]
 800ea1c:	3301      	adds	r3, #1
 800ea1e:	9307      	str	r3, [sp, #28]
 800ea20:	e774      	b.n	800e90c <_dtoa_r+0x9ac>
 800ea22:	f000 f9c3 	bl	800edac <__multadd>
 800ea26:	4629      	mov	r1, r5
 800ea28:	4607      	mov	r7, r0
 800ea2a:	2300      	movs	r3, #0
 800ea2c:	220a      	movs	r2, #10
 800ea2e:	4658      	mov	r0, fp
 800ea30:	f000 f9bc 	bl	800edac <__multadd>
 800ea34:	4605      	mov	r5, r0
 800ea36:	e7f0      	b.n	800ea1a <_dtoa_r+0xaba>
 800ea38:	9b00      	ldr	r3, [sp, #0]
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	bfcc      	ite	gt
 800ea3e:	461e      	movgt	r6, r3
 800ea40:	2601      	movle	r6, #1
 800ea42:	4456      	add	r6, sl
 800ea44:	2700      	movs	r7, #0
 800ea46:	4649      	mov	r1, r9
 800ea48:	2201      	movs	r2, #1
 800ea4a:	4658      	mov	r0, fp
 800ea4c:	f000 fb5a 	bl	800f104 <__lshift>
 800ea50:	4621      	mov	r1, r4
 800ea52:	4681      	mov	r9, r0
 800ea54:	f000 fbc2 	bl	800f1dc <__mcmp>
 800ea58:	2800      	cmp	r0, #0
 800ea5a:	dcb0      	bgt.n	800e9be <_dtoa_r+0xa5e>
 800ea5c:	d102      	bne.n	800ea64 <_dtoa_r+0xb04>
 800ea5e:	f018 0f01 	tst.w	r8, #1
 800ea62:	d1ac      	bne.n	800e9be <_dtoa_r+0xa5e>
 800ea64:	4633      	mov	r3, r6
 800ea66:	461e      	mov	r6, r3
 800ea68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ea6c:	2a30      	cmp	r2, #48	@ 0x30
 800ea6e:	d0fa      	beq.n	800ea66 <_dtoa_r+0xb06>
 800ea70:	e5c2      	b.n	800e5f8 <_dtoa_r+0x698>
 800ea72:	459a      	cmp	sl, r3
 800ea74:	d1a4      	bne.n	800e9c0 <_dtoa_r+0xa60>
 800ea76:	9b04      	ldr	r3, [sp, #16]
 800ea78:	3301      	adds	r3, #1
 800ea7a:	9304      	str	r3, [sp, #16]
 800ea7c:	2331      	movs	r3, #49	@ 0x31
 800ea7e:	f88a 3000 	strb.w	r3, [sl]
 800ea82:	e5b9      	b.n	800e5f8 <_dtoa_r+0x698>
 800ea84:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ea86:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800eae4 <_dtoa_r+0xb84>
 800ea8a:	b11b      	cbz	r3, 800ea94 <_dtoa_r+0xb34>
 800ea8c:	f10a 0308 	add.w	r3, sl, #8
 800ea90:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ea92:	6013      	str	r3, [r2, #0]
 800ea94:	4650      	mov	r0, sl
 800ea96:	b019      	add	sp, #100	@ 0x64
 800ea98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea9e:	2b01      	cmp	r3, #1
 800eaa0:	f77f ae37 	ble.w	800e712 <_dtoa_r+0x7b2>
 800eaa4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eaa6:	930a      	str	r3, [sp, #40]	@ 0x28
 800eaa8:	2001      	movs	r0, #1
 800eaaa:	e655      	b.n	800e758 <_dtoa_r+0x7f8>
 800eaac:	9b00      	ldr	r3, [sp, #0]
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	f77f aed6 	ble.w	800e860 <_dtoa_r+0x900>
 800eab4:	4656      	mov	r6, sl
 800eab6:	4621      	mov	r1, r4
 800eab8:	4648      	mov	r0, r9
 800eaba:	f7ff f9c8 	bl	800de4e <quorem>
 800eabe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800eac2:	f806 8b01 	strb.w	r8, [r6], #1
 800eac6:	9b00      	ldr	r3, [sp, #0]
 800eac8:	eba6 020a 	sub.w	r2, r6, sl
 800eacc:	4293      	cmp	r3, r2
 800eace:	ddb3      	ble.n	800ea38 <_dtoa_r+0xad8>
 800ead0:	4649      	mov	r1, r9
 800ead2:	2300      	movs	r3, #0
 800ead4:	220a      	movs	r2, #10
 800ead6:	4658      	mov	r0, fp
 800ead8:	f000 f968 	bl	800edac <__multadd>
 800eadc:	4681      	mov	r9, r0
 800eade:	e7ea      	b.n	800eab6 <_dtoa_r+0xb56>
 800eae0:	080102d0 	.word	0x080102d0
 800eae4:	08010254 	.word	0x08010254

0800eae8 <_free_r>:
 800eae8:	b538      	push	{r3, r4, r5, lr}
 800eaea:	4605      	mov	r5, r0
 800eaec:	2900      	cmp	r1, #0
 800eaee:	d041      	beq.n	800eb74 <_free_r+0x8c>
 800eaf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eaf4:	1f0c      	subs	r4, r1, #4
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	bfb8      	it	lt
 800eafa:	18e4      	addlt	r4, r4, r3
 800eafc:	f000 f8e8 	bl	800ecd0 <__malloc_lock>
 800eb00:	4a1d      	ldr	r2, [pc, #116]	@ (800eb78 <_free_r+0x90>)
 800eb02:	6813      	ldr	r3, [r2, #0]
 800eb04:	b933      	cbnz	r3, 800eb14 <_free_r+0x2c>
 800eb06:	6063      	str	r3, [r4, #4]
 800eb08:	6014      	str	r4, [r2, #0]
 800eb0a:	4628      	mov	r0, r5
 800eb0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eb10:	f000 b8e4 	b.w	800ecdc <__malloc_unlock>
 800eb14:	42a3      	cmp	r3, r4
 800eb16:	d908      	bls.n	800eb2a <_free_r+0x42>
 800eb18:	6820      	ldr	r0, [r4, #0]
 800eb1a:	1821      	adds	r1, r4, r0
 800eb1c:	428b      	cmp	r3, r1
 800eb1e:	bf01      	itttt	eq
 800eb20:	6819      	ldreq	r1, [r3, #0]
 800eb22:	685b      	ldreq	r3, [r3, #4]
 800eb24:	1809      	addeq	r1, r1, r0
 800eb26:	6021      	streq	r1, [r4, #0]
 800eb28:	e7ed      	b.n	800eb06 <_free_r+0x1e>
 800eb2a:	461a      	mov	r2, r3
 800eb2c:	685b      	ldr	r3, [r3, #4]
 800eb2e:	b10b      	cbz	r3, 800eb34 <_free_r+0x4c>
 800eb30:	42a3      	cmp	r3, r4
 800eb32:	d9fa      	bls.n	800eb2a <_free_r+0x42>
 800eb34:	6811      	ldr	r1, [r2, #0]
 800eb36:	1850      	adds	r0, r2, r1
 800eb38:	42a0      	cmp	r0, r4
 800eb3a:	d10b      	bne.n	800eb54 <_free_r+0x6c>
 800eb3c:	6820      	ldr	r0, [r4, #0]
 800eb3e:	4401      	add	r1, r0
 800eb40:	1850      	adds	r0, r2, r1
 800eb42:	4283      	cmp	r3, r0
 800eb44:	6011      	str	r1, [r2, #0]
 800eb46:	d1e0      	bne.n	800eb0a <_free_r+0x22>
 800eb48:	6818      	ldr	r0, [r3, #0]
 800eb4a:	685b      	ldr	r3, [r3, #4]
 800eb4c:	6053      	str	r3, [r2, #4]
 800eb4e:	4408      	add	r0, r1
 800eb50:	6010      	str	r0, [r2, #0]
 800eb52:	e7da      	b.n	800eb0a <_free_r+0x22>
 800eb54:	d902      	bls.n	800eb5c <_free_r+0x74>
 800eb56:	230c      	movs	r3, #12
 800eb58:	602b      	str	r3, [r5, #0]
 800eb5a:	e7d6      	b.n	800eb0a <_free_r+0x22>
 800eb5c:	6820      	ldr	r0, [r4, #0]
 800eb5e:	1821      	adds	r1, r4, r0
 800eb60:	428b      	cmp	r3, r1
 800eb62:	bf04      	itt	eq
 800eb64:	6819      	ldreq	r1, [r3, #0]
 800eb66:	685b      	ldreq	r3, [r3, #4]
 800eb68:	6063      	str	r3, [r4, #4]
 800eb6a:	bf04      	itt	eq
 800eb6c:	1809      	addeq	r1, r1, r0
 800eb6e:	6021      	streq	r1, [r4, #0]
 800eb70:	6054      	str	r4, [r2, #4]
 800eb72:	e7ca      	b.n	800eb0a <_free_r+0x22>
 800eb74:	bd38      	pop	{r3, r4, r5, pc}
 800eb76:	bf00      	nop
 800eb78:	2000242c 	.word	0x2000242c

0800eb7c <malloc>:
 800eb7c:	4b02      	ldr	r3, [pc, #8]	@ (800eb88 <malloc+0xc>)
 800eb7e:	4601      	mov	r1, r0
 800eb80:	6818      	ldr	r0, [r3, #0]
 800eb82:	f000 b825 	b.w	800ebd0 <_malloc_r>
 800eb86:	bf00      	nop
 800eb88:	2000010c 	.word	0x2000010c

0800eb8c <sbrk_aligned>:
 800eb8c:	b570      	push	{r4, r5, r6, lr}
 800eb8e:	4e0f      	ldr	r6, [pc, #60]	@ (800ebcc <sbrk_aligned+0x40>)
 800eb90:	460c      	mov	r4, r1
 800eb92:	6831      	ldr	r1, [r6, #0]
 800eb94:	4605      	mov	r5, r0
 800eb96:	b911      	cbnz	r1, 800eb9e <sbrk_aligned+0x12>
 800eb98:	f000 fcd4 	bl	800f544 <_sbrk_r>
 800eb9c:	6030      	str	r0, [r6, #0]
 800eb9e:	4621      	mov	r1, r4
 800eba0:	4628      	mov	r0, r5
 800eba2:	f000 fccf 	bl	800f544 <_sbrk_r>
 800eba6:	1c43      	adds	r3, r0, #1
 800eba8:	d103      	bne.n	800ebb2 <sbrk_aligned+0x26>
 800ebaa:	f04f 34ff 	mov.w	r4, #4294967295
 800ebae:	4620      	mov	r0, r4
 800ebb0:	bd70      	pop	{r4, r5, r6, pc}
 800ebb2:	1cc4      	adds	r4, r0, #3
 800ebb4:	f024 0403 	bic.w	r4, r4, #3
 800ebb8:	42a0      	cmp	r0, r4
 800ebba:	d0f8      	beq.n	800ebae <sbrk_aligned+0x22>
 800ebbc:	1a21      	subs	r1, r4, r0
 800ebbe:	4628      	mov	r0, r5
 800ebc0:	f000 fcc0 	bl	800f544 <_sbrk_r>
 800ebc4:	3001      	adds	r0, #1
 800ebc6:	d1f2      	bne.n	800ebae <sbrk_aligned+0x22>
 800ebc8:	e7ef      	b.n	800ebaa <sbrk_aligned+0x1e>
 800ebca:	bf00      	nop
 800ebcc:	20002428 	.word	0x20002428

0800ebd0 <_malloc_r>:
 800ebd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ebd4:	1ccd      	adds	r5, r1, #3
 800ebd6:	f025 0503 	bic.w	r5, r5, #3
 800ebda:	3508      	adds	r5, #8
 800ebdc:	2d0c      	cmp	r5, #12
 800ebde:	bf38      	it	cc
 800ebe0:	250c      	movcc	r5, #12
 800ebe2:	2d00      	cmp	r5, #0
 800ebe4:	4606      	mov	r6, r0
 800ebe6:	db01      	blt.n	800ebec <_malloc_r+0x1c>
 800ebe8:	42a9      	cmp	r1, r5
 800ebea:	d904      	bls.n	800ebf6 <_malloc_r+0x26>
 800ebec:	230c      	movs	r3, #12
 800ebee:	6033      	str	r3, [r6, #0]
 800ebf0:	2000      	movs	r0, #0
 800ebf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ebf6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800eccc <_malloc_r+0xfc>
 800ebfa:	f000 f869 	bl	800ecd0 <__malloc_lock>
 800ebfe:	f8d8 3000 	ldr.w	r3, [r8]
 800ec02:	461c      	mov	r4, r3
 800ec04:	bb44      	cbnz	r4, 800ec58 <_malloc_r+0x88>
 800ec06:	4629      	mov	r1, r5
 800ec08:	4630      	mov	r0, r6
 800ec0a:	f7ff ffbf 	bl	800eb8c <sbrk_aligned>
 800ec0e:	1c43      	adds	r3, r0, #1
 800ec10:	4604      	mov	r4, r0
 800ec12:	d158      	bne.n	800ecc6 <_malloc_r+0xf6>
 800ec14:	f8d8 4000 	ldr.w	r4, [r8]
 800ec18:	4627      	mov	r7, r4
 800ec1a:	2f00      	cmp	r7, #0
 800ec1c:	d143      	bne.n	800eca6 <_malloc_r+0xd6>
 800ec1e:	2c00      	cmp	r4, #0
 800ec20:	d04b      	beq.n	800ecba <_malloc_r+0xea>
 800ec22:	6823      	ldr	r3, [r4, #0]
 800ec24:	4639      	mov	r1, r7
 800ec26:	4630      	mov	r0, r6
 800ec28:	eb04 0903 	add.w	r9, r4, r3
 800ec2c:	f000 fc8a 	bl	800f544 <_sbrk_r>
 800ec30:	4581      	cmp	r9, r0
 800ec32:	d142      	bne.n	800ecba <_malloc_r+0xea>
 800ec34:	6821      	ldr	r1, [r4, #0]
 800ec36:	1a6d      	subs	r5, r5, r1
 800ec38:	4629      	mov	r1, r5
 800ec3a:	4630      	mov	r0, r6
 800ec3c:	f7ff ffa6 	bl	800eb8c <sbrk_aligned>
 800ec40:	3001      	adds	r0, #1
 800ec42:	d03a      	beq.n	800ecba <_malloc_r+0xea>
 800ec44:	6823      	ldr	r3, [r4, #0]
 800ec46:	442b      	add	r3, r5
 800ec48:	6023      	str	r3, [r4, #0]
 800ec4a:	f8d8 3000 	ldr.w	r3, [r8]
 800ec4e:	685a      	ldr	r2, [r3, #4]
 800ec50:	bb62      	cbnz	r2, 800ecac <_malloc_r+0xdc>
 800ec52:	f8c8 7000 	str.w	r7, [r8]
 800ec56:	e00f      	b.n	800ec78 <_malloc_r+0xa8>
 800ec58:	6822      	ldr	r2, [r4, #0]
 800ec5a:	1b52      	subs	r2, r2, r5
 800ec5c:	d420      	bmi.n	800eca0 <_malloc_r+0xd0>
 800ec5e:	2a0b      	cmp	r2, #11
 800ec60:	d917      	bls.n	800ec92 <_malloc_r+0xc2>
 800ec62:	1961      	adds	r1, r4, r5
 800ec64:	42a3      	cmp	r3, r4
 800ec66:	6025      	str	r5, [r4, #0]
 800ec68:	bf18      	it	ne
 800ec6a:	6059      	strne	r1, [r3, #4]
 800ec6c:	6863      	ldr	r3, [r4, #4]
 800ec6e:	bf08      	it	eq
 800ec70:	f8c8 1000 	streq.w	r1, [r8]
 800ec74:	5162      	str	r2, [r4, r5]
 800ec76:	604b      	str	r3, [r1, #4]
 800ec78:	4630      	mov	r0, r6
 800ec7a:	f000 f82f 	bl	800ecdc <__malloc_unlock>
 800ec7e:	f104 000b 	add.w	r0, r4, #11
 800ec82:	1d23      	adds	r3, r4, #4
 800ec84:	f020 0007 	bic.w	r0, r0, #7
 800ec88:	1ac2      	subs	r2, r0, r3
 800ec8a:	bf1c      	itt	ne
 800ec8c:	1a1b      	subne	r3, r3, r0
 800ec8e:	50a3      	strne	r3, [r4, r2]
 800ec90:	e7af      	b.n	800ebf2 <_malloc_r+0x22>
 800ec92:	6862      	ldr	r2, [r4, #4]
 800ec94:	42a3      	cmp	r3, r4
 800ec96:	bf0c      	ite	eq
 800ec98:	f8c8 2000 	streq.w	r2, [r8]
 800ec9c:	605a      	strne	r2, [r3, #4]
 800ec9e:	e7eb      	b.n	800ec78 <_malloc_r+0xa8>
 800eca0:	4623      	mov	r3, r4
 800eca2:	6864      	ldr	r4, [r4, #4]
 800eca4:	e7ae      	b.n	800ec04 <_malloc_r+0x34>
 800eca6:	463c      	mov	r4, r7
 800eca8:	687f      	ldr	r7, [r7, #4]
 800ecaa:	e7b6      	b.n	800ec1a <_malloc_r+0x4a>
 800ecac:	461a      	mov	r2, r3
 800ecae:	685b      	ldr	r3, [r3, #4]
 800ecb0:	42a3      	cmp	r3, r4
 800ecb2:	d1fb      	bne.n	800ecac <_malloc_r+0xdc>
 800ecb4:	2300      	movs	r3, #0
 800ecb6:	6053      	str	r3, [r2, #4]
 800ecb8:	e7de      	b.n	800ec78 <_malloc_r+0xa8>
 800ecba:	230c      	movs	r3, #12
 800ecbc:	6033      	str	r3, [r6, #0]
 800ecbe:	4630      	mov	r0, r6
 800ecc0:	f000 f80c 	bl	800ecdc <__malloc_unlock>
 800ecc4:	e794      	b.n	800ebf0 <_malloc_r+0x20>
 800ecc6:	6005      	str	r5, [r0, #0]
 800ecc8:	e7d6      	b.n	800ec78 <_malloc_r+0xa8>
 800ecca:	bf00      	nop
 800eccc:	2000242c 	.word	0x2000242c

0800ecd0 <__malloc_lock>:
 800ecd0:	4801      	ldr	r0, [pc, #4]	@ (800ecd8 <__malloc_lock+0x8>)
 800ecd2:	f7ff b8ba 	b.w	800de4a <__retarget_lock_acquire_recursive>
 800ecd6:	bf00      	nop
 800ecd8:	20002424 	.word	0x20002424

0800ecdc <__malloc_unlock>:
 800ecdc:	4801      	ldr	r0, [pc, #4]	@ (800ece4 <__malloc_unlock+0x8>)
 800ecde:	f7ff b8b5 	b.w	800de4c <__retarget_lock_release_recursive>
 800ece2:	bf00      	nop
 800ece4:	20002424 	.word	0x20002424

0800ece8 <_Balloc>:
 800ece8:	b570      	push	{r4, r5, r6, lr}
 800ecea:	69c6      	ldr	r6, [r0, #28]
 800ecec:	4604      	mov	r4, r0
 800ecee:	460d      	mov	r5, r1
 800ecf0:	b976      	cbnz	r6, 800ed10 <_Balloc+0x28>
 800ecf2:	2010      	movs	r0, #16
 800ecf4:	f7ff ff42 	bl	800eb7c <malloc>
 800ecf8:	4602      	mov	r2, r0
 800ecfa:	61e0      	str	r0, [r4, #28]
 800ecfc:	b920      	cbnz	r0, 800ed08 <_Balloc+0x20>
 800ecfe:	4b18      	ldr	r3, [pc, #96]	@ (800ed60 <_Balloc+0x78>)
 800ed00:	4818      	ldr	r0, [pc, #96]	@ (800ed64 <_Balloc+0x7c>)
 800ed02:	216b      	movs	r1, #107	@ 0x6b
 800ed04:	f000 fc3c 	bl	800f580 <__assert_func>
 800ed08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ed0c:	6006      	str	r6, [r0, #0]
 800ed0e:	60c6      	str	r6, [r0, #12]
 800ed10:	69e6      	ldr	r6, [r4, #28]
 800ed12:	68f3      	ldr	r3, [r6, #12]
 800ed14:	b183      	cbz	r3, 800ed38 <_Balloc+0x50>
 800ed16:	69e3      	ldr	r3, [r4, #28]
 800ed18:	68db      	ldr	r3, [r3, #12]
 800ed1a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ed1e:	b9b8      	cbnz	r0, 800ed50 <_Balloc+0x68>
 800ed20:	2101      	movs	r1, #1
 800ed22:	fa01 f605 	lsl.w	r6, r1, r5
 800ed26:	1d72      	adds	r2, r6, #5
 800ed28:	0092      	lsls	r2, r2, #2
 800ed2a:	4620      	mov	r0, r4
 800ed2c:	f000 fc46 	bl	800f5bc <_calloc_r>
 800ed30:	b160      	cbz	r0, 800ed4c <_Balloc+0x64>
 800ed32:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ed36:	e00e      	b.n	800ed56 <_Balloc+0x6e>
 800ed38:	2221      	movs	r2, #33	@ 0x21
 800ed3a:	2104      	movs	r1, #4
 800ed3c:	4620      	mov	r0, r4
 800ed3e:	f000 fc3d 	bl	800f5bc <_calloc_r>
 800ed42:	69e3      	ldr	r3, [r4, #28]
 800ed44:	60f0      	str	r0, [r6, #12]
 800ed46:	68db      	ldr	r3, [r3, #12]
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d1e4      	bne.n	800ed16 <_Balloc+0x2e>
 800ed4c:	2000      	movs	r0, #0
 800ed4e:	bd70      	pop	{r4, r5, r6, pc}
 800ed50:	6802      	ldr	r2, [r0, #0]
 800ed52:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ed56:	2300      	movs	r3, #0
 800ed58:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ed5c:	e7f7      	b.n	800ed4e <_Balloc+0x66>
 800ed5e:	bf00      	nop
 800ed60:	08010261 	.word	0x08010261
 800ed64:	080102e1 	.word	0x080102e1

0800ed68 <_Bfree>:
 800ed68:	b570      	push	{r4, r5, r6, lr}
 800ed6a:	69c6      	ldr	r6, [r0, #28]
 800ed6c:	4605      	mov	r5, r0
 800ed6e:	460c      	mov	r4, r1
 800ed70:	b976      	cbnz	r6, 800ed90 <_Bfree+0x28>
 800ed72:	2010      	movs	r0, #16
 800ed74:	f7ff ff02 	bl	800eb7c <malloc>
 800ed78:	4602      	mov	r2, r0
 800ed7a:	61e8      	str	r0, [r5, #28]
 800ed7c:	b920      	cbnz	r0, 800ed88 <_Bfree+0x20>
 800ed7e:	4b09      	ldr	r3, [pc, #36]	@ (800eda4 <_Bfree+0x3c>)
 800ed80:	4809      	ldr	r0, [pc, #36]	@ (800eda8 <_Bfree+0x40>)
 800ed82:	218f      	movs	r1, #143	@ 0x8f
 800ed84:	f000 fbfc 	bl	800f580 <__assert_func>
 800ed88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ed8c:	6006      	str	r6, [r0, #0]
 800ed8e:	60c6      	str	r6, [r0, #12]
 800ed90:	b13c      	cbz	r4, 800eda2 <_Bfree+0x3a>
 800ed92:	69eb      	ldr	r3, [r5, #28]
 800ed94:	6862      	ldr	r2, [r4, #4]
 800ed96:	68db      	ldr	r3, [r3, #12]
 800ed98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ed9c:	6021      	str	r1, [r4, #0]
 800ed9e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800eda2:	bd70      	pop	{r4, r5, r6, pc}
 800eda4:	08010261 	.word	0x08010261
 800eda8:	080102e1 	.word	0x080102e1

0800edac <__multadd>:
 800edac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800edb0:	690d      	ldr	r5, [r1, #16]
 800edb2:	4607      	mov	r7, r0
 800edb4:	460c      	mov	r4, r1
 800edb6:	461e      	mov	r6, r3
 800edb8:	f101 0c14 	add.w	ip, r1, #20
 800edbc:	2000      	movs	r0, #0
 800edbe:	f8dc 3000 	ldr.w	r3, [ip]
 800edc2:	b299      	uxth	r1, r3
 800edc4:	fb02 6101 	mla	r1, r2, r1, r6
 800edc8:	0c1e      	lsrs	r6, r3, #16
 800edca:	0c0b      	lsrs	r3, r1, #16
 800edcc:	fb02 3306 	mla	r3, r2, r6, r3
 800edd0:	b289      	uxth	r1, r1
 800edd2:	3001      	adds	r0, #1
 800edd4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800edd8:	4285      	cmp	r5, r0
 800edda:	f84c 1b04 	str.w	r1, [ip], #4
 800edde:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ede2:	dcec      	bgt.n	800edbe <__multadd+0x12>
 800ede4:	b30e      	cbz	r6, 800ee2a <__multadd+0x7e>
 800ede6:	68a3      	ldr	r3, [r4, #8]
 800ede8:	42ab      	cmp	r3, r5
 800edea:	dc19      	bgt.n	800ee20 <__multadd+0x74>
 800edec:	6861      	ldr	r1, [r4, #4]
 800edee:	4638      	mov	r0, r7
 800edf0:	3101      	adds	r1, #1
 800edf2:	f7ff ff79 	bl	800ece8 <_Balloc>
 800edf6:	4680      	mov	r8, r0
 800edf8:	b928      	cbnz	r0, 800ee06 <__multadd+0x5a>
 800edfa:	4602      	mov	r2, r0
 800edfc:	4b0c      	ldr	r3, [pc, #48]	@ (800ee30 <__multadd+0x84>)
 800edfe:	480d      	ldr	r0, [pc, #52]	@ (800ee34 <__multadd+0x88>)
 800ee00:	21ba      	movs	r1, #186	@ 0xba
 800ee02:	f000 fbbd 	bl	800f580 <__assert_func>
 800ee06:	6922      	ldr	r2, [r4, #16]
 800ee08:	3202      	adds	r2, #2
 800ee0a:	f104 010c 	add.w	r1, r4, #12
 800ee0e:	0092      	lsls	r2, r2, #2
 800ee10:	300c      	adds	r0, #12
 800ee12:	f000 fba7 	bl	800f564 <memcpy>
 800ee16:	4621      	mov	r1, r4
 800ee18:	4638      	mov	r0, r7
 800ee1a:	f7ff ffa5 	bl	800ed68 <_Bfree>
 800ee1e:	4644      	mov	r4, r8
 800ee20:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ee24:	3501      	adds	r5, #1
 800ee26:	615e      	str	r6, [r3, #20]
 800ee28:	6125      	str	r5, [r4, #16]
 800ee2a:	4620      	mov	r0, r4
 800ee2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee30:	080102d0 	.word	0x080102d0
 800ee34:	080102e1 	.word	0x080102e1

0800ee38 <__hi0bits>:
 800ee38:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ee3c:	4603      	mov	r3, r0
 800ee3e:	bf36      	itet	cc
 800ee40:	0403      	lslcc	r3, r0, #16
 800ee42:	2000      	movcs	r0, #0
 800ee44:	2010      	movcc	r0, #16
 800ee46:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ee4a:	bf3c      	itt	cc
 800ee4c:	021b      	lslcc	r3, r3, #8
 800ee4e:	3008      	addcc	r0, #8
 800ee50:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ee54:	bf3c      	itt	cc
 800ee56:	011b      	lslcc	r3, r3, #4
 800ee58:	3004      	addcc	r0, #4
 800ee5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ee5e:	bf3c      	itt	cc
 800ee60:	009b      	lslcc	r3, r3, #2
 800ee62:	3002      	addcc	r0, #2
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	db05      	blt.n	800ee74 <__hi0bits+0x3c>
 800ee68:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ee6c:	f100 0001 	add.w	r0, r0, #1
 800ee70:	bf08      	it	eq
 800ee72:	2020      	moveq	r0, #32
 800ee74:	4770      	bx	lr

0800ee76 <__lo0bits>:
 800ee76:	6803      	ldr	r3, [r0, #0]
 800ee78:	4602      	mov	r2, r0
 800ee7a:	f013 0007 	ands.w	r0, r3, #7
 800ee7e:	d00b      	beq.n	800ee98 <__lo0bits+0x22>
 800ee80:	07d9      	lsls	r1, r3, #31
 800ee82:	d421      	bmi.n	800eec8 <__lo0bits+0x52>
 800ee84:	0798      	lsls	r0, r3, #30
 800ee86:	bf49      	itett	mi
 800ee88:	085b      	lsrmi	r3, r3, #1
 800ee8a:	089b      	lsrpl	r3, r3, #2
 800ee8c:	2001      	movmi	r0, #1
 800ee8e:	6013      	strmi	r3, [r2, #0]
 800ee90:	bf5c      	itt	pl
 800ee92:	6013      	strpl	r3, [r2, #0]
 800ee94:	2002      	movpl	r0, #2
 800ee96:	4770      	bx	lr
 800ee98:	b299      	uxth	r1, r3
 800ee9a:	b909      	cbnz	r1, 800eea0 <__lo0bits+0x2a>
 800ee9c:	0c1b      	lsrs	r3, r3, #16
 800ee9e:	2010      	movs	r0, #16
 800eea0:	b2d9      	uxtb	r1, r3
 800eea2:	b909      	cbnz	r1, 800eea8 <__lo0bits+0x32>
 800eea4:	3008      	adds	r0, #8
 800eea6:	0a1b      	lsrs	r3, r3, #8
 800eea8:	0719      	lsls	r1, r3, #28
 800eeaa:	bf04      	itt	eq
 800eeac:	091b      	lsreq	r3, r3, #4
 800eeae:	3004      	addeq	r0, #4
 800eeb0:	0799      	lsls	r1, r3, #30
 800eeb2:	bf04      	itt	eq
 800eeb4:	089b      	lsreq	r3, r3, #2
 800eeb6:	3002      	addeq	r0, #2
 800eeb8:	07d9      	lsls	r1, r3, #31
 800eeba:	d403      	bmi.n	800eec4 <__lo0bits+0x4e>
 800eebc:	085b      	lsrs	r3, r3, #1
 800eebe:	f100 0001 	add.w	r0, r0, #1
 800eec2:	d003      	beq.n	800eecc <__lo0bits+0x56>
 800eec4:	6013      	str	r3, [r2, #0]
 800eec6:	4770      	bx	lr
 800eec8:	2000      	movs	r0, #0
 800eeca:	4770      	bx	lr
 800eecc:	2020      	movs	r0, #32
 800eece:	4770      	bx	lr

0800eed0 <__i2b>:
 800eed0:	b510      	push	{r4, lr}
 800eed2:	460c      	mov	r4, r1
 800eed4:	2101      	movs	r1, #1
 800eed6:	f7ff ff07 	bl	800ece8 <_Balloc>
 800eeda:	4602      	mov	r2, r0
 800eedc:	b928      	cbnz	r0, 800eeea <__i2b+0x1a>
 800eede:	4b05      	ldr	r3, [pc, #20]	@ (800eef4 <__i2b+0x24>)
 800eee0:	4805      	ldr	r0, [pc, #20]	@ (800eef8 <__i2b+0x28>)
 800eee2:	f240 1145 	movw	r1, #325	@ 0x145
 800eee6:	f000 fb4b 	bl	800f580 <__assert_func>
 800eeea:	2301      	movs	r3, #1
 800eeec:	6144      	str	r4, [r0, #20]
 800eeee:	6103      	str	r3, [r0, #16]
 800eef0:	bd10      	pop	{r4, pc}
 800eef2:	bf00      	nop
 800eef4:	080102d0 	.word	0x080102d0
 800eef8:	080102e1 	.word	0x080102e1

0800eefc <__multiply>:
 800eefc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef00:	4614      	mov	r4, r2
 800ef02:	690a      	ldr	r2, [r1, #16]
 800ef04:	6923      	ldr	r3, [r4, #16]
 800ef06:	429a      	cmp	r2, r3
 800ef08:	bfa8      	it	ge
 800ef0a:	4623      	movge	r3, r4
 800ef0c:	460f      	mov	r7, r1
 800ef0e:	bfa4      	itt	ge
 800ef10:	460c      	movge	r4, r1
 800ef12:	461f      	movge	r7, r3
 800ef14:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ef18:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ef1c:	68a3      	ldr	r3, [r4, #8]
 800ef1e:	6861      	ldr	r1, [r4, #4]
 800ef20:	eb0a 0609 	add.w	r6, sl, r9
 800ef24:	42b3      	cmp	r3, r6
 800ef26:	b085      	sub	sp, #20
 800ef28:	bfb8      	it	lt
 800ef2a:	3101      	addlt	r1, #1
 800ef2c:	f7ff fedc 	bl	800ece8 <_Balloc>
 800ef30:	b930      	cbnz	r0, 800ef40 <__multiply+0x44>
 800ef32:	4602      	mov	r2, r0
 800ef34:	4b44      	ldr	r3, [pc, #272]	@ (800f048 <__multiply+0x14c>)
 800ef36:	4845      	ldr	r0, [pc, #276]	@ (800f04c <__multiply+0x150>)
 800ef38:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ef3c:	f000 fb20 	bl	800f580 <__assert_func>
 800ef40:	f100 0514 	add.w	r5, r0, #20
 800ef44:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ef48:	462b      	mov	r3, r5
 800ef4a:	2200      	movs	r2, #0
 800ef4c:	4543      	cmp	r3, r8
 800ef4e:	d321      	bcc.n	800ef94 <__multiply+0x98>
 800ef50:	f107 0114 	add.w	r1, r7, #20
 800ef54:	f104 0214 	add.w	r2, r4, #20
 800ef58:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ef5c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ef60:	9302      	str	r3, [sp, #8]
 800ef62:	1b13      	subs	r3, r2, r4
 800ef64:	3b15      	subs	r3, #21
 800ef66:	f023 0303 	bic.w	r3, r3, #3
 800ef6a:	3304      	adds	r3, #4
 800ef6c:	f104 0715 	add.w	r7, r4, #21
 800ef70:	42ba      	cmp	r2, r7
 800ef72:	bf38      	it	cc
 800ef74:	2304      	movcc	r3, #4
 800ef76:	9301      	str	r3, [sp, #4]
 800ef78:	9b02      	ldr	r3, [sp, #8]
 800ef7a:	9103      	str	r1, [sp, #12]
 800ef7c:	428b      	cmp	r3, r1
 800ef7e:	d80c      	bhi.n	800ef9a <__multiply+0x9e>
 800ef80:	2e00      	cmp	r6, #0
 800ef82:	dd03      	ble.n	800ef8c <__multiply+0x90>
 800ef84:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d05b      	beq.n	800f044 <__multiply+0x148>
 800ef8c:	6106      	str	r6, [r0, #16]
 800ef8e:	b005      	add	sp, #20
 800ef90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef94:	f843 2b04 	str.w	r2, [r3], #4
 800ef98:	e7d8      	b.n	800ef4c <__multiply+0x50>
 800ef9a:	f8b1 a000 	ldrh.w	sl, [r1]
 800ef9e:	f1ba 0f00 	cmp.w	sl, #0
 800efa2:	d024      	beq.n	800efee <__multiply+0xf2>
 800efa4:	f104 0e14 	add.w	lr, r4, #20
 800efa8:	46a9      	mov	r9, r5
 800efaa:	f04f 0c00 	mov.w	ip, #0
 800efae:	f85e 7b04 	ldr.w	r7, [lr], #4
 800efb2:	f8d9 3000 	ldr.w	r3, [r9]
 800efb6:	fa1f fb87 	uxth.w	fp, r7
 800efba:	b29b      	uxth	r3, r3
 800efbc:	fb0a 330b 	mla	r3, sl, fp, r3
 800efc0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800efc4:	f8d9 7000 	ldr.w	r7, [r9]
 800efc8:	4463      	add	r3, ip
 800efca:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800efce:	fb0a c70b 	mla	r7, sl, fp, ip
 800efd2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800efd6:	b29b      	uxth	r3, r3
 800efd8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800efdc:	4572      	cmp	r2, lr
 800efde:	f849 3b04 	str.w	r3, [r9], #4
 800efe2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800efe6:	d8e2      	bhi.n	800efae <__multiply+0xb2>
 800efe8:	9b01      	ldr	r3, [sp, #4]
 800efea:	f845 c003 	str.w	ip, [r5, r3]
 800efee:	9b03      	ldr	r3, [sp, #12]
 800eff0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800eff4:	3104      	adds	r1, #4
 800eff6:	f1b9 0f00 	cmp.w	r9, #0
 800effa:	d021      	beq.n	800f040 <__multiply+0x144>
 800effc:	682b      	ldr	r3, [r5, #0]
 800effe:	f104 0c14 	add.w	ip, r4, #20
 800f002:	46ae      	mov	lr, r5
 800f004:	f04f 0a00 	mov.w	sl, #0
 800f008:	f8bc b000 	ldrh.w	fp, [ip]
 800f00c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800f010:	fb09 770b 	mla	r7, r9, fp, r7
 800f014:	4457      	add	r7, sl
 800f016:	b29b      	uxth	r3, r3
 800f018:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800f01c:	f84e 3b04 	str.w	r3, [lr], #4
 800f020:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f024:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f028:	f8be 3000 	ldrh.w	r3, [lr]
 800f02c:	fb09 330a 	mla	r3, r9, sl, r3
 800f030:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800f034:	4562      	cmp	r2, ip
 800f036:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f03a:	d8e5      	bhi.n	800f008 <__multiply+0x10c>
 800f03c:	9f01      	ldr	r7, [sp, #4]
 800f03e:	51eb      	str	r3, [r5, r7]
 800f040:	3504      	adds	r5, #4
 800f042:	e799      	b.n	800ef78 <__multiply+0x7c>
 800f044:	3e01      	subs	r6, #1
 800f046:	e79b      	b.n	800ef80 <__multiply+0x84>
 800f048:	080102d0 	.word	0x080102d0
 800f04c:	080102e1 	.word	0x080102e1

0800f050 <__pow5mult>:
 800f050:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f054:	4615      	mov	r5, r2
 800f056:	f012 0203 	ands.w	r2, r2, #3
 800f05a:	4607      	mov	r7, r0
 800f05c:	460e      	mov	r6, r1
 800f05e:	d007      	beq.n	800f070 <__pow5mult+0x20>
 800f060:	4c25      	ldr	r4, [pc, #148]	@ (800f0f8 <__pow5mult+0xa8>)
 800f062:	3a01      	subs	r2, #1
 800f064:	2300      	movs	r3, #0
 800f066:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f06a:	f7ff fe9f 	bl	800edac <__multadd>
 800f06e:	4606      	mov	r6, r0
 800f070:	10ad      	asrs	r5, r5, #2
 800f072:	d03d      	beq.n	800f0f0 <__pow5mult+0xa0>
 800f074:	69fc      	ldr	r4, [r7, #28]
 800f076:	b97c      	cbnz	r4, 800f098 <__pow5mult+0x48>
 800f078:	2010      	movs	r0, #16
 800f07a:	f7ff fd7f 	bl	800eb7c <malloc>
 800f07e:	4602      	mov	r2, r0
 800f080:	61f8      	str	r0, [r7, #28]
 800f082:	b928      	cbnz	r0, 800f090 <__pow5mult+0x40>
 800f084:	4b1d      	ldr	r3, [pc, #116]	@ (800f0fc <__pow5mult+0xac>)
 800f086:	481e      	ldr	r0, [pc, #120]	@ (800f100 <__pow5mult+0xb0>)
 800f088:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800f08c:	f000 fa78 	bl	800f580 <__assert_func>
 800f090:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f094:	6004      	str	r4, [r0, #0]
 800f096:	60c4      	str	r4, [r0, #12]
 800f098:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800f09c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f0a0:	b94c      	cbnz	r4, 800f0b6 <__pow5mult+0x66>
 800f0a2:	f240 2171 	movw	r1, #625	@ 0x271
 800f0a6:	4638      	mov	r0, r7
 800f0a8:	f7ff ff12 	bl	800eed0 <__i2b>
 800f0ac:	2300      	movs	r3, #0
 800f0ae:	f8c8 0008 	str.w	r0, [r8, #8]
 800f0b2:	4604      	mov	r4, r0
 800f0b4:	6003      	str	r3, [r0, #0]
 800f0b6:	f04f 0900 	mov.w	r9, #0
 800f0ba:	07eb      	lsls	r3, r5, #31
 800f0bc:	d50a      	bpl.n	800f0d4 <__pow5mult+0x84>
 800f0be:	4631      	mov	r1, r6
 800f0c0:	4622      	mov	r2, r4
 800f0c2:	4638      	mov	r0, r7
 800f0c4:	f7ff ff1a 	bl	800eefc <__multiply>
 800f0c8:	4631      	mov	r1, r6
 800f0ca:	4680      	mov	r8, r0
 800f0cc:	4638      	mov	r0, r7
 800f0ce:	f7ff fe4b 	bl	800ed68 <_Bfree>
 800f0d2:	4646      	mov	r6, r8
 800f0d4:	106d      	asrs	r5, r5, #1
 800f0d6:	d00b      	beq.n	800f0f0 <__pow5mult+0xa0>
 800f0d8:	6820      	ldr	r0, [r4, #0]
 800f0da:	b938      	cbnz	r0, 800f0ec <__pow5mult+0x9c>
 800f0dc:	4622      	mov	r2, r4
 800f0de:	4621      	mov	r1, r4
 800f0e0:	4638      	mov	r0, r7
 800f0e2:	f7ff ff0b 	bl	800eefc <__multiply>
 800f0e6:	6020      	str	r0, [r4, #0]
 800f0e8:	f8c0 9000 	str.w	r9, [r0]
 800f0ec:	4604      	mov	r4, r0
 800f0ee:	e7e4      	b.n	800f0ba <__pow5mult+0x6a>
 800f0f0:	4630      	mov	r0, r6
 800f0f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f0f6:	bf00      	nop
 800f0f8:	0801033c 	.word	0x0801033c
 800f0fc:	08010261 	.word	0x08010261
 800f100:	080102e1 	.word	0x080102e1

0800f104 <__lshift>:
 800f104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f108:	460c      	mov	r4, r1
 800f10a:	6849      	ldr	r1, [r1, #4]
 800f10c:	6923      	ldr	r3, [r4, #16]
 800f10e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f112:	68a3      	ldr	r3, [r4, #8]
 800f114:	4607      	mov	r7, r0
 800f116:	4691      	mov	r9, r2
 800f118:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f11c:	f108 0601 	add.w	r6, r8, #1
 800f120:	42b3      	cmp	r3, r6
 800f122:	db0b      	blt.n	800f13c <__lshift+0x38>
 800f124:	4638      	mov	r0, r7
 800f126:	f7ff fddf 	bl	800ece8 <_Balloc>
 800f12a:	4605      	mov	r5, r0
 800f12c:	b948      	cbnz	r0, 800f142 <__lshift+0x3e>
 800f12e:	4602      	mov	r2, r0
 800f130:	4b28      	ldr	r3, [pc, #160]	@ (800f1d4 <__lshift+0xd0>)
 800f132:	4829      	ldr	r0, [pc, #164]	@ (800f1d8 <__lshift+0xd4>)
 800f134:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800f138:	f000 fa22 	bl	800f580 <__assert_func>
 800f13c:	3101      	adds	r1, #1
 800f13e:	005b      	lsls	r3, r3, #1
 800f140:	e7ee      	b.n	800f120 <__lshift+0x1c>
 800f142:	2300      	movs	r3, #0
 800f144:	f100 0114 	add.w	r1, r0, #20
 800f148:	f100 0210 	add.w	r2, r0, #16
 800f14c:	4618      	mov	r0, r3
 800f14e:	4553      	cmp	r3, sl
 800f150:	db33      	blt.n	800f1ba <__lshift+0xb6>
 800f152:	6920      	ldr	r0, [r4, #16]
 800f154:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f158:	f104 0314 	add.w	r3, r4, #20
 800f15c:	f019 091f 	ands.w	r9, r9, #31
 800f160:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f164:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f168:	d02b      	beq.n	800f1c2 <__lshift+0xbe>
 800f16a:	f1c9 0e20 	rsb	lr, r9, #32
 800f16e:	468a      	mov	sl, r1
 800f170:	2200      	movs	r2, #0
 800f172:	6818      	ldr	r0, [r3, #0]
 800f174:	fa00 f009 	lsl.w	r0, r0, r9
 800f178:	4310      	orrs	r0, r2
 800f17a:	f84a 0b04 	str.w	r0, [sl], #4
 800f17e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f182:	459c      	cmp	ip, r3
 800f184:	fa22 f20e 	lsr.w	r2, r2, lr
 800f188:	d8f3      	bhi.n	800f172 <__lshift+0x6e>
 800f18a:	ebac 0304 	sub.w	r3, ip, r4
 800f18e:	3b15      	subs	r3, #21
 800f190:	f023 0303 	bic.w	r3, r3, #3
 800f194:	3304      	adds	r3, #4
 800f196:	f104 0015 	add.w	r0, r4, #21
 800f19a:	4584      	cmp	ip, r0
 800f19c:	bf38      	it	cc
 800f19e:	2304      	movcc	r3, #4
 800f1a0:	50ca      	str	r2, [r1, r3]
 800f1a2:	b10a      	cbz	r2, 800f1a8 <__lshift+0xa4>
 800f1a4:	f108 0602 	add.w	r6, r8, #2
 800f1a8:	3e01      	subs	r6, #1
 800f1aa:	4638      	mov	r0, r7
 800f1ac:	612e      	str	r6, [r5, #16]
 800f1ae:	4621      	mov	r1, r4
 800f1b0:	f7ff fdda 	bl	800ed68 <_Bfree>
 800f1b4:	4628      	mov	r0, r5
 800f1b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f1ba:	f842 0f04 	str.w	r0, [r2, #4]!
 800f1be:	3301      	adds	r3, #1
 800f1c0:	e7c5      	b.n	800f14e <__lshift+0x4a>
 800f1c2:	3904      	subs	r1, #4
 800f1c4:	f853 2b04 	ldr.w	r2, [r3], #4
 800f1c8:	f841 2f04 	str.w	r2, [r1, #4]!
 800f1cc:	459c      	cmp	ip, r3
 800f1ce:	d8f9      	bhi.n	800f1c4 <__lshift+0xc0>
 800f1d0:	e7ea      	b.n	800f1a8 <__lshift+0xa4>
 800f1d2:	bf00      	nop
 800f1d4:	080102d0 	.word	0x080102d0
 800f1d8:	080102e1 	.word	0x080102e1

0800f1dc <__mcmp>:
 800f1dc:	690a      	ldr	r2, [r1, #16]
 800f1de:	4603      	mov	r3, r0
 800f1e0:	6900      	ldr	r0, [r0, #16]
 800f1e2:	1a80      	subs	r0, r0, r2
 800f1e4:	b530      	push	{r4, r5, lr}
 800f1e6:	d10e      	bne.n	800f206 <__mcmp+0x2a>
 800f1e8:	3314      	adds	r3, #20
 800f1ea:	3114      	adds	r1, #20
 800f1ec:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800f1f0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f1f4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f1f8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f1fc:	4295      	cmp	r5, r2
 800f1fe:	d003      	beq.n	800f208 <__mcmp+0x2c>
 800f200:	d205      	bcs.n	800f20e <__mcmp+0x32>
 800f202:	f04f 30ff 	mov.w	r0, #4294967295
 800f206:	bd30      	pop	{r4, r5, pc}
 800f208:	42a3      	cmp	r3, r4
 800f20a:	d3f3      	bcc.n	800f1f4 <__mcmp+0x18>
 800f20c:	e7fb      	b.n	800f206 <__mcmp+0x2a>
 800f20e:	2001      	movs	r0, #1
 800f210:	e7f9      	b.n	800f206 <__mcmp+0x2a>
	...

0800f214 <__mdiff>:
 800f214:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f218:	4689      	mov	r9, r1
 800f21a:	4606      	mov	r6, r0
 800f21c:	4611      	mov	r1, r2
 800f21e:	4648      	mov	r0, r9
 800f220:	4614      	mov	r4, r2
 800f222:	f7ff ffdb 	bl	800f1dc <__mcmp>
 800f226:	1e05      	subs	r5, r0, #0
 800f228:	d112      	bne.n	800f250 <__mdiff+0x3c>
 800f22a:	4629      	mov	r1, r5
 800f22c:	4630      	mov	r0, r6
 800f22e:	f7ff fd5b 	bl	800ece8 <_Balloc>
 800f232:	4602      	mov	r2, r0
 800f234:	b928      	cbnz	r0, 800f242 <__mdiff+0x2e>
 800f236:	4b3f      	ldr	r3, [pc, #252]	@ (800f334 <__mdiff+0x120>)
 800f238:	f240 2137 	movw	r1, #567	@ 0x237
 800f23c:	483e      	ldr	r0, [pc, #248]	@ (800f338 <__mdiff+0x124>)
 800f23e:	f000 f99f 	bl	800f580 <__assert_func>
 800f242:	2301      	movs	r3, #1
 800f244:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f248:	4610      	mov	r0, r2
 800f24a:	b003      	add	sp, #12
 800f24c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f250:	bfbc      	itt	lt
 800f252:	464b      	movlt	r3, r9
 800f254:	46a1      	movlt	r9, r4
 800f256:	4630      	mov	r0, r6
 800f258:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800f25c:	bfba      	itte	lt
 800f25e:	461c      	movlt	r4, r3
 800f260:	2501      	movlt	r5, #1
 800f262:	2500      	movge	r5, #0
 800f264:	f7ff fd40 	bl	800ece8 <_Balloc>
 800f268:	4602      	mov	r2, r0
 800f26a:	b918      	cbnz	r0, 800f274 <__mdiff+0x60>
 800f26c:	4b31      	ldr	r3, [pc, #196]	@ (800f334 <__mdiff+0x120>)
 800f26e:	f240 2145 	movw	r1, #581	@ 0x245
 800f272:	e7e3      	b.n	800f23c <__mdiff+0x28>
 800f274:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800f278:	6926      	ldr	r6, [r4, #16]
 800f27a:	60c5      	str	r5, [r0, #12]
 800f27c:	f109 0310 	add.w	r3, r9, #16
 800f280:	f109 0514 	add.w	r5, r9, #20
 800f284:	f104 0e14 	add.w	lr, r4, #20
 800f288:	f100 0b14 	add.w	fp, r0, #20
 800f28c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800f290:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800f294:	9301      	str	r3, [sp, #4]
 800f296:	46d9      	mov	r9, fp
 800f298:	f04f 0c00 	mov.w	ip, #0
 800f29c:	9b01      	ldr	r3, [sp, #4]
 800f29e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800f2a2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800f2a6:	9301      	str	r3, [sp, #4]
 800f2a8:	fa1f f38a 	uxth.w	r3, sl
 800f2ac:	4619      	mov	r1, r3
 800f2ae:	b283      	uxth	r3, r0
 800f2b0:	1acb      	subs	r3, r1, r3
 800f2b2:	0c00      	lsrs	r0, r0, #16
 800f2b4:	4463      	add	r3, ip
 800f2b6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800f2ba:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800f2be:	b29b      	uxth	r3, r3
 800f2c0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800f2c4:	4576      	cmp	r6, lr
 800f2c6:	f849 3b04 	str.w	r3, [r9], #4
 800f2ca:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f2ce:	d8e5      	bhi.n	800f29c <__mdiff+0x88>
 800f2d0:	1b33      	subs	r3, r6, r4
 800f2d2:	3b15      	subs	r3, #21
 800f2d4:	f023 0303 	bic.w	r3, r3, #3
 800f2d8:	3415      	adds	r4, #21
 800f2da:	3304      	adds	r3, #4
 800f2dc:	42a6      	cmp	r6, r4
 800f2de:	bf38      	it	cc
 800f2e0:	2304      	movcc	r3, #4
 800f2e2:	441d      	add	r5, r3
 800f2e4:	445b      	add	r3, fp
 800f2e6:	461e      	mov	r6, r3
 800f2e8:	462c      	mov	r4, r5
 800f2ea:	4544      	cmp	r4, r8
 800f2ec:	d30e      	bcc.n	800f30c <__mdiff+0xf8>
 800f2ee:	f108 0103 	add.w	r1, r8, #3
 800f2f2:	1b49      	subs	r1, r1, r5
 800f2f4:	f021 0103 	bic.w	r1, r1, #3
 800f2f8:	3d03      	subs	r5, #3
 800f2fa:	45a8      	cmp	r8, r5
 800f2fc:	bf38      	it	cc
 800f2fe:	2100      	movcc	r1, #0
 800f300:	440b      	add	r3, r1
 800f302:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f306:	b191      	cbz	r1, 800f32e <__mdiff+0x11a>
 800f308:	6117      	str	r7, [r2, #16]
 800f30a:	e79d      	b.n	800f248 <__mdiff+0x34>
 800f30c:	f854 1b04 	ldr.w	r1, [r4], #4
 800f310:	46e6      	mov	lr, ip
 800f312:	0c08      	lsrs	r0, r1, #16
 800f314:	fa1c fc81 	uxtah	ip, ip, r1
 800f318:	4471      	add	r1, lr
 800f31a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800f31e:	b289      	uxth	r1, r1
 800f320:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800f324:	f846 1b04 	str.w	r1, [r6], #4
 800f328:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f32c:	e7dd      	b.n	800f2ea <__mdiff+0xd6>
 800f32e:	3f01      	subs	r7, #1
 800f330:	e7e7      	b.n	800f302 <__mdiff+0xee>
 800f332:	bf00      	nop
 800f334:	080102d0 	.word	0x080102d0
 800f338:	080102e1 	.word	0x080102e1

0800f33c <__d2b>:
 800f33c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f340:	460f      	mov	r7, r1
 800f342:	2101      	movs	r1, #1
 800f344:	ec59 8b10 	vmov	r8, r9, d0
 800f348:	4616      	mov	r6, r2
 800f34a:	f7ff fccd 	bl	800ece8 <_Balloc>
 800f34e:	4604      	mov	r4, r0
 800f350:	b930      	cbnz	r0, 800f360 <__d2b+0x24>
 800f352:	4602      	mov	r2, r0
 800f354:	4b23      	ldr	r3, [pc, #140]	@ (800f3e4 <__d2b+0xa8>)
 800f356:	4824      	ldr	r0, [pc, #144]	@ (800f3e8 <__d2b+0xac>)
 800f358:	f240 310f 	movw	r1, #783	@ 0x30f
 800f35c:	f000 f910 	bl	800f580 <__assert_func>
 800f360:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f364:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f368:	b10d      	cbz	r5, 800f36e <__d2b+0x32>
 800f36a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f36e:	9301      	str	r3, [sp, #4]
 800f370:	f1b8 0300 	subs.w	r3, r8, #0
 800f374:	d023      	beq.n	800f3be <__d2b+0x82>
 800f376:	4668      	mov	r0, sp
 800f378:	9300      	str	r3, [sp, #0]
 800f37a:	f7ff fd7c 	bl	800ee76 <__lo0bits>
 800f37e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f382:	b1d0      	cbz	r0, 800f3ba <__d2b+0x7e>
 800f384:	f1c0 0320 	rsb	r3, r0, #32
 800f388:	fa02 f303 	lsl.w	r3, r2, r3
 800f38c:	430b      	orrs	r3, r1
 800f38e:	40c2      	lsrs	r2, r0
 800f390:	6163      	str	r3, [r4, #20]
 800f392:	9201      	str	r2, [sp, #4]
 800f394:	9b01      	ldr	r3, [sp, #4]
 800f396:	61a3      	str	r3, [r4, #24]
 800f398:	2b00      	cmp	r3, #0
 800f39a:	bf0c      	ite	eq
 800f39c:	2201      	moveq	r2, #1
 800f39e:	2202      	movne	r2, #2
 800f3a0:	6122      	str	r2, [r4, #16]
 800f3a2:	b1a5      	cbz	r5, 800f3ce <__d2b+0x92>
 800f3a4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800f3a8:	4405      	add	r5, r0
 800f3aa:	603d      	str	r5, [r7, #0]
 800f3ac:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800f3b0:	6030      	str	r0, [r6, #0]
 800f3b2:	4620      	mov	r0, r4
 800f3b4:	b003      	add	sp, #12
 800f3b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f3ba:	6161      	str	r1, [r4, #20]
 800f3bc:	e7ea      	b.n	800f394 <__d2b+0x58>
 800f3be:	a801      	add	r0, sp, #4
 800f3c0:	f7ff fd59 	bl	800ee76 <__lo0bits>
 800f3c4:	9b01      	ldr	r3, [sp, #4]
 800f3c6:	6163      	str	r3, [r4, #20]
 800f3c8:	3020      	adds	r0, #32
 800f3ca:	2201      	movs	r2, #1
 800f3cc:	e7e8      	b.n	800f3a0 <__d2b+0x64>
 800f3ce:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f3d2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800f3d6:	6038      	str	r0, [r7, #0]
 800f3d8:	6918      	ldr	r0, [r3, #16]
 800f3da:	f7ff fd2d 	bl	800ee38 <__hi0bits>
 800f3de:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f3e2:	e7e5      	b.n	800f3b0 <__d2b+0x74>
 800f3e4:	080102d0 	.word	0x080102d0
 800f3e8:	080102e1 	.word	0x080102e1

0800f3ec <__sflush_r>:
 800f3ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f3f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3f4:	0716      	lsls	r6, r2, #28
 800f3f6:	4605      	mov	r5, r0
 800f3f8:	460c      	mov	r4, r1
 800f3fa:	d454      	bmi.n	800f4a6 <__sflush_r+0xba>
 800f3fc:	684b      	ldr	r3, [r1, #4]
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	dc02      	bgt.n	800f408 <__sflush_r+0x1c>
 800f402:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f404:	2b00      	cmp	r3, #0
 800f406:	dd48      	ble.n	800f49a <__sflush_r+0xae>
 800f408:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f40a:	2e00      	cmp	r6, #0
 800f40c:	d045      	beq.n	800f49a <__sflush_r+0xae>
 800f40e:	2300      	movs	r3, #0
 800f410:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f414:	682f      	ldr	r7, [r5, #0]
 800f416:	6a21      	ldr	r1, [r4, #32]
 800f418:	602b      	str	r3, [r5, #0]
 800f41a:	d030      	beq.n	800f47e <__sflush_r+0x92>
 800f41c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f41e:	89a3      	ldrh	r3, [r4, #12]
 800f420:	0759      	lsls	r1, r3, #29
 800f422:	d505      	bpl.n	800f430 <__sflush_r+0x44>
 800f424:	6863      	ldr	r3, [r4, #4]
 800f426:	1ad2      	subs	r2, r2, r3
 800f428:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f42a:	b10b      	cbz	r3, 800f430 <__sflush_r+0x44>
 800f42c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f42e:	1ad2      	subs	r2, r2, r3
 800f430:	2300      	movs	r3, #0
 800f432:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f434:	6a21      	ldr	r1, [r4, #32]
 800f436:	4628      	mov	r0, r5
 800f438:	47b0      	blx	r6
 800f43a:	1c43      	adds	r3, r0, #1
 800f43c:	89a3      	ldrh	r3, [r4, #12]
 800f43e:	d106      	bne.n	800f44e <__sflush_r+0x62>
 800f440:	6829      	ldr	r1, [r5, #0]
 800f442:	291d      	cmp	r1, #29
 800f444:	d82b      	bhi.n	800f49e <__sflush_r+0xb2>
 800f446:	4a2a      	ldr	r2, [pc, #168]	@ (800f4f0 <__sflush_r+0x104>)
 800f448:	410a      	asrs	r2, r1
 800f44a:	07d6      	lsls	r6, r2, #31
 800f44c:	d427      	bmi.n	800f49e <__sflush_r+0xb2>
 800f44e:	2200      	movs	r2, #0
 800f450:	6062      	str	r2, [r4, #4]
 800f452:	04d9      	lsls	r1, r3, #19
 800f454:	6922      	ldr	r2, [r4, #16]
 800f456:	6022      	str	r2, [r4, #0]
 800f458:	d504      	bpl.n	800f464 <__sflush_r+0x78>
 800f45a:	1c42      	adds	r2, r0, #1
 800f45c:	d101      	bne.n	800f462 <__sflush_r+0x76>
 800f45e:	682b      	ldr	r3, [r5, #0]
 800f460:	b903      	cbnz	r3, 800f464 <__sflush_r+0x78>
 800f462:	6560      	str	r0, [r4, #84]	@ 0x54
 800f464:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f466:	602f      	str	r7, [r5, #0]
 800f468:	b1b9      	cbz	r1, 800f49a <__sflush_r+0xae>
 800f46a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f46e:	4299      	cmp	r1, r3
 800f470:	d002      	beq.n	800f478 <__sflush_r+0x8c>
 800f472:	4628      	mov	r0, r5
 800f474:	f7ff fb38 	bl	800eae8 <_free_r>
 800f478:	2300      	movs	r3, #0
 800f47a:	6363      	str	r3, [r4, #52]	@ 0x34
 800f47c:	e00d      	b.n	800f49a <__sflush_r+0xae>
 800f47e:	2301      	movs	r3, #1
 800f480:	4628      	mov	r0, r5
 800f482:	47b0      	blx	r6
 800f484:	4602      	mov	r2, r0
 800f486:	1c50      	adds	r0, r2, #1
 800f488:	d1c9      	bne.n	800f41e <__sflush_r+0x32>
 800f48a:	682b      	ldr	r3, [r5, #0]
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d0c6      	beq.n	800f41e <__sflush_r+0x32>
 800f490:	2b1d      	cmp	r3, #29
 800f492:	d001      	beq.n	800f498 <__sflush_r+0xac>
 800f494:	2b16      	cmp	r3, #22
 800f496:	d11e      	bne.n	800f4d6 <__sflush_r+0xea>
 800f498:	602f      	str	r7, [r5, #0]
 800f49a:	2000      	movs	r0, #0
 800f49c:	e022      	b.n	800f4e4 <__sflush_r+0xf8>
 800f49e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f4a2:	b21b      	sxth	r3, r3
 800f4a4:	e01b      	b.n	800f4de <__sflush_r+0xf2>
 800f4a6:	690f      	ldr	r7, [r1, #16]
 800f4a8:	2f00      	cmp	r7, #0
 800f4aa:	d0f6      	beq.n	800f49a <__sflush_r+0xae>
 800f4ac:	0793      	lsls	r3, r2, #30
 800f4ae:	680e      	ldr	r6, [r1, #0]
 800f4b0:	bf08      	it	eq
 800f4b2:	694b      	ldreq	r3, [r1, #20]
 800f4b4:	600f      	str	r7, [r1, #0]
 800f4b6:	bf18      	it	ne
 800f4b8:	2300      	movne	r3, #0
 800f4ba:	eba6 0807 	sub.w	r8, r6, r7
 800f4be:	608b      	str	r3, [r1, #8]
 800f4c0:	f1b8 0f00 	cmp.w	r8, #0
 800f4c4:	dde9      	ble.n	800f49a <__sflush_r+0xae>
 800f4c6:	6a21      	ldr	r1, [r4, #32]
 800f4c8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f4ca:	4643      	mov	r3, r8
 800f4cc:	463a      	mov	r2, r7
 800f4ce:	4628      	mov	r0, r5
 800f4d0:	47b0      	blx	r6
 800f4d2:	2800      	cmp	r0, #0
 800f4d4:	dc08      	bgt.n	800f4e8 <__sflush_r+0xfc>
 800f4d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f4da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f4de:	81a3      	strh	r3, [r4, #12]
 800f4e0:	f04f 30ff 	mov.w	r0, #4294967295
 800f4e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4e8:	4407      	add	r7, r0
 800f4ea:	eba8 0800 	sub.w	r8, r8, r0
 800f4ee:	e7e7      	b.n	800f4c0 <__sflush_r+0xd4>
 800f4f0:	dfbffffe 	.word	0xdfbffffe

0800f4f4 <_fflush_r>:
 800f4f4:	b538      	push	{r3, r4, r5, lr}
 800f4f6:	690b      	ldr	r3, [r1, #16]
 800f4f8:	4605      	mov	r5, r0
 800f4fa:	460c      	mov	r4, r1
 800f4fc:	b913      	cbnz	r3, 800f504 <_fflush_r+0x10>
 800f4fe:	2500      	movs	r5, #0
 800f500:	4628      	mov	r0, r5
 800f502:	bd38      	pop	{r3, r4, r5, pc}
 800f504:	b118      	cbz	r0, 800f50e <_fflush_r+0x1a>
 800f506:	6a03      	ldr	r3, [r0, #32]
 800f508:	b90b      	cbnz	r3, 800f50e <_fflush_r+0x1a>
 800f50a:	f7fe fba7 	bl	800dc5c <__sinit>
 800f50e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f512:	2b00      	cmp	r3, #0
 800f514:	d0f3      	beq.n	800f4fe <_fflush_r+0xa>
 800f516:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f518:	07d0      	lsls	r0, r2, #31
 800f51a:	d404      	bmi.n	800f526 <_fflush_r+0x32>
 800f51c:	0599      	lsls	r1, r3, #22
 800f51e:	d402      	bmi.n	800f526 <_fflush_r+0x32>
 800f520:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f522:	f7fe fc92 	bl	800de4a <__retarget_lock_acquire_recursive>
 800f526:	4628      	mov	r0, r5
 800f528:	4621      	mov	r1, r4
 800f52a:	f7ff ff5f 	bl	800f3ec <__sflush_r>
 800f52e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f530:	07da      	lsls	r2, r3, #31
 800f532:	4605      	mov	r5, r0
 800f534:	d4e4      	bmi.n	800f500 <_fflush_r+0xc>
 800f536:	89a3      	ldrh	r3, [r4, #12]
 800f538:	059b      	lsls	r3, r3, #22
 800f53a:	d4e1      	bmi.n	800f500 <_fflush_r+0xc>
 800f53c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f53e:	f7fe fc85 	bl	800de4c <__retarget_lock_release_recursive>
 800f542:	e7dd      	b.n	800f500 <_fflush_r+0xc>

0800f544 <_sbrk_r>:
 800f544:	b538      	push	{r3, r4, r5, lr}
 800f546:	4d06      	ldr	r5, [pc, #24]	@ (800f560 <_sbrk_r+0x1c>)
 800f548:	2300      	movs	r3, #0
 800f54a:	4604      	mov	r4, r0
 800f54c:	4608      	mov	r0, r1
 800f54e:	602b      	str	r3, [r5, #0]
 800f550:	f7f3 f9b6 	bl	80028c0 <_sbrk>
 800f554:	1c43      	adds	r3, r0, #1
 800f556:	d102      	bne.n	800f55e <_sbrk_r+0x1a>
 800f558:	682b      	ldr	r3, [r5, #0]
 800f55a:	b103      	cbz	r3, 800f55e <_sbrk_r+0x1a>
 800f55c:	6023      	str	r3, [r4, #0]
 800f55e:	bd38      	pop	{r3, r4, r5, pc}
 800f560:	20002420 	.word	0x20002420

0800f564 <memcpy>:
 800f564:	440a      	add	r2, r1
 800f566:	4291      	cmp	r1, r2
 800f568:	f100 33ff 	add.w	r3, r0, #4294967295
 800f56c:	d100      	bne.n	800f570 <memcpy+0xc>
 800f56e:	4770      	bx	lr
 800f570:	b510      	push	{r4, lr}
 800f572:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f576:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f57a:	4291      	cmp	r1, r2
 800f57c:	d1f9      	bne.n	800f572 <memcpy+0xe>
 800f57e:	bd10      	pop	{r4, pc}

0800f580 <__assert_func>:
 800f580:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f582:	4614      	mov	r4, r2
 800f584:	461a      	mov	r2, r3
 800f586:	4b09      	ldr	r3, [pc, #36]	@ (800f5ac <__assert_func+0x2c>)
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	4605      	mov	r5, r0
 800f58c:	68d8      	ldr	r0, [r3, #12]
 800f58e:	b954      	cbnz	r4, 800f5a6 <__assert_func+0x26>
 800f590:	4b07      	ldr	r3, [pc, #28]	@ (800f5b0 <__assert_func+0x30>)
 800f592:	461c      	mov	r4, r3
 800f594:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f598:	9100      	str	r1, [sp, #0]
 800f59a:	462b      	mov	r3, r5
 800f59c:	4905      	ldr	r1, [pc, #20]	@ (800f5b4 <__assert_func+0x34>)
 800f59e:	f000 f841 	bl	800f624 <fiprintf>
 800f5a2:	f000 f851 	bl	800f648 <abort>
 800f5a6:	4b04      	ldr	r3, [pc, #16]	@ (800f5b8 <__assert_func+0x38>)
 800f5a8:	e7f4      	b.n	800f594 <__assert_func+0x14>
 800f5aa:	bf00      	nop
 800f5ac:	2000010c 	.word	0x2000010c
 800f5b0:	0801047d 	.word	0x0801047d
 800f5b4:	0801044f 	.word	0x0801044f
 800f5b8:	08010442 	.word	0x08010442

0800f5bc <_calloc_r>:
 800f5bc:	b570      	push	{r4, r5, r6, lr}
 800f5be:	fba1 5402 	umull	r5, r4, r1, r2
 800f5c2:	b93c      	cbnz	r4, 800f5d4 <_calloc_r+0x18>
 800f5c4:	4629      	mov	r1, r5
 800f5c6:	f7ff fb03 	bl	800ebd0 <_malloc_r>
 800f5ca:	4606      	mov	r6, r0
 800f5cc:	b928      	cbnz	r0, 800f5da <_calloc_r+0x1e>
 800f5ce:	2600      	movs	r6, #0
 800f5d0:	4630      	mov	r0, r6
 800f5d2:	bd70      	pop	{r4, r5, r6, pc}
 800f5d4:	220c      	movs	r2, #12
 800f5d6:	6002      	str	r2, [r0, #0]
 800f5d8:	e7f9      	b.n	800f5ce <_calloc_r+0x12>
 800f5da:	462a      	mov	r2, r5
 800f5dc:	4621      	mov	r1, r4
 800f5de:	f7fe fbb6 	bl	800dd4e <memset>
 800f5e2:	e7f5      	b.n	800f5d0 <_calloc_r+0x14>

0800f5e4 <__ascii_mbtowc>:
 800f5e4:	b082      	sub	sp, #8
 800f5e6:	b901      	cbnz	r1, 800f5ea <__ascii_mbtowc+0x6>
 800f5e8:	a901      	add	r1, sp, #4
 800f5ea:	b142      	cbz	r2, 800f5fe <__ascii_mbtowc+0x1a>
 800f5ec:	b14b      	cbz	r3, 800f602 <__ascii_mbtowc+0x1e>
 800f5ee:	7813      	ldrb	r3, [r2, #0]
 800f5f0:	600b      	str	r3, [r1, #0]
 800f5f2:	7812      	ldrb	r2, [r2, #0]
 800f5f4:	1e10      	subs	r0, r2, #0
 800f5f6:	bf18      	it	ne
 800f5f8:	2001      	movne	r0, #1
 800f5fa:	b002      	add	sp, #8
 800f5fc:	4770      	bx	lr
 800f5fe:	4610      	mov	r0, r2
 800f600:	e7fb      	b.n	800f5fa <__ascii_mbtowc+0x16>
 800f602:	f06f 0001 	mvn.w	r0, #1
 800f606:	e7f8      	b.n	800f5fa <__ascii_mbtowc+0x16>

0800f608 <__ascii_wctomb>:
 800f608:	4603      	mov	r3, r0
 800f60a:	4608      	mov	r0, r1
 800f60c:	b141      	cbz	r1, 800f620 <__ascii_wctomb+0x18>
 800f60e:	2aff      	cmp	r2, #255	@ 0xff
 800f610:	d904      	bls.n	800f61c <__ascii_wctomb+0x14>
 800f612:	228a      	movs	r2, #138	@ 0x8a
 800f614:	601a      	str	r2, [r3, #0]
 800f616:	f04f 30ff 	mov.w	r0, #4294967295
 800f61a:	4770      	bx	lr
 800f61c:	700a      	strb	r2, [r1, #0]
 800f61e:	2001      	movs	r0, #1
 800f620:	4770      	bx	lr
	...

0800f624 <fiprintf>:
 800f624:	b40e      	push	{r1, r2, r3}
 800f626:	b503      	push	{r0, r1, lr}
 800f628:	4601      	mov	r1, r0
 800f62a:	ab03      	add	r3, sp, #12
 800f62c:	4805      	ldr	r0, [pc, #20]	@ (800f644 <fiprintf+0x20>)
 800f62e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f632:	6800      	ldr	r0, [r0, #0]
 800f634:	9301      	str	r3, [sp, #4]
 800f636:	f000 f837 	bl	800f6a8 <_vfiprintf_r>
 800f63a:	b002      	add	sp, #8
 800f63c:	f85d eb04 	ldr.w	lr, [sp], #4
 800f640:	b003      	add	sp, #12
 800f642:	4770      	bx	lr
 800f644:	2000010c 	.word	0x2000010c

0800f648 <abort>:
 800f648:	b508      	push	{r3, lr}
 800f64a:	2006      	movs	r0, #6
 800f64c:	f000 fa00 	bl	800fa50 <raise>
 800f650:	2001      	movs	r0, #1
 800f652:	f7f3 f8bd 	bl	80027d0 <_exit>

0800f656 <__sfputc_r>:
 800f656:	6893      	ldr	r3, [r2, #8]
 800f658:	3b01      	subs	r3, #1
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	b410      	push	{r4}
 800f65e:	6093      	str	r3, [r2, #8]
 800f660:	da08      	bge.n	800f674 <__sfputc_r+0x1e>
 800f662:	6994      	ldr	r4, [r2, #24]
 800f664:	42a3      	cmp	r3, r4
 800f666:	db01      	blt.n	800f66c <__sfputc_r+0x16>
 800f668:	290a      	cmp	r1, #10
 800f66a:	d103      	bne.n	800f674 <__sfputc_r+0x1e>
 800f66c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f670:	f000 b932 	b.w	800f8d8 <__swbuf_r>
 800f674:	6813      	ldr	r3, [r2, #0]
 800f676:	1c58      	adds	r0, r3, #1
 800f678:	6010      	str	r0, [r2, #0]
 800f67a:	7019      	strb	r1, [r3, #0]
 800f67c:	4608      	mov	r0, r1
 800f67e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f682:	4770      	bx	lr

0800f684 <__sfputs_r>:
 800f684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f686:	4606      	mov	r6, r0
 800f688:	460f      	mov	r7, r1
 800f68a:	4614      	mov	r4, r2
 800f68c:	18d5      	adds	r5, r2, r3
 800f68e:	42ac      	cmp	r4, r5
 800f690:	d101      	bne.n	800f696 <__sfputs_r+0x12>
 800f692:	2000      	movs	r0, #0
 800f694:	e007      	b.n	800f6a6 <__sfputs_r+0x22>
 800f696:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f69a:	463a      	mov	r2, r7
 800f69c:	4630      	mov	r0, r6
 800f69e:	f7ff ffda 	bl	800f656 <__sfputc_r>
 800f6a2:	1c43      	adds	r3, r0, #1
 800f6a4:	d1f3      	bne.n	800f68e <__sfputs_r+0xa>
 800f6a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f6a8 <_vfiprintf_r>:
 800f6a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6ac:	460d      	mov	r5, r1
 800f6ae:	b09d      	sub	sp, #116	@ 0x74
 800f6b0:	4614      	mov	r4, r2
 800f6b2:	4698      	mov	r8, r3
 800f6b4:	4606      	mov	r6, r0
 800f6b6:	b118      	cbz	r0, 800f6c0 <_vfiprintf_r+0x18>
 800f6b8:	6a03      	ldr	r3, [r0, #32]
 800f6ba:	b90b      	cbnz	r3, 800f6c0 <_vfiprintf_r+0x18>
 800f6bc:	f7fe face 	bl	800dc5c <__sinit>
 800f6c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f6c2:	07d9      	lsls	r1, r3, #31
 800f6c4:	d405      	bmi.n	800f6d2 <_vfiprintf_r+0x2a>
 800f6c6:	89ab      	ldrh	r3, [r5, #12]
 800f6c8:	059a      	lsls	r2, r3, #22
 800f6ca:	d402      	bmi.n	800f6d2 <_vfiprintf_r+0x2a>
 800f6cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f6ce:	f7fe fbbc 	bl	800de4a <__retarget_lock_acquire_recursive>
 800f6d2:	89ab      	ldrh	r3, [r5, #12]
 800f6d4:	071b      	lsls	r3, r3, #28
 800f6d6:	d501      	bpl.n	800f6dc <_vfiprintf_r+0x34>
 800f6d8:	692b      	ldr	r3, [r5, #16]
 800f6da:	b99b      	cbnz	r3, 800f704 <_vfiprintf_r+0x5c>
 800f6dc:	4629      	mov	r1, r5
 800f6de:	4630      	mov	r0, r6
 800f6e0:	f000 f938 	bl	800f954 <__swsetup_r>
 800f6e4:	b170      	cbz	r0, 800f704 <_vfiprintf_r+0x5c>
 800f6e6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f6e8:	07dc      	lsls	r4, r3, #31
 800f6ea:	d504      	bpl.n	800f6f6 <_vfiprintf_r+0x4e>
 800f6ec:	f04f 30ff 	mov.w	r0, #4294967295
 800f6f0:	b01d      	add	sp, #116	@ 0x74
 800f6f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6f6:	89ab      	ldrh	r3, [r5, #12]
 800f6f8:	0598      	lsls	r0, r3, #22
 800f6fa:	d4f7      	bmi.n	800f6ec <_vfiprintf_r+0x44>
 800f6fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f6fe:	f7fe fba5 	bl	800de4c <__retarget_lock_release_recursive>
 800f702:	e7f3      	b.n	800f6ec <_vfiprintf_r+0x44>
 800f704:	2300      	movs	r3, #0
 800f706:	9309      	str	r3, [sp, #36]	@ 0x24
 800f708:	2320      	movs	r3, #32
 800f70a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f70e:	f8cd 800c 	str.w	r8, [sp, #12]
 800f712:	2330      	movs	r3, #48	@ 0x30
 800f714:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f8c4 <_vfiprintf_r+0x21c>
 800f718:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f71c:	f04f 0901 	mov.w	r9, #1
 800f720:	4623      	mov	r3, r4
 800f722:	469a      	mov	sl, r3
 800f724:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f728:	b10a      	cbz	r2, 800f72e <_vfiprintf_r+0x86>
 800f72a:	2a25      	cmp	r2, #37	@ 0x25
 800f72c:	d1f9      	bne.n	800f722 <_vfiprintf_r+0x7a>
 800f72e:	ebba 0b04 	subs.w	fp, sl, r4
 800f732:	d00b      	beq.n	800f74c <_vfiprintf_r+0xa4>
 800f734:	465b      	mov	r3, fp
 800f736:	4622      	mov	r2, r4
 800f738:	4629      	mov	r1, r5
 800f73a:	4630      	mov	r0, r6
 800f73c:	f7ff ffa2 	bl	800f684 <__sfputs_r>
 800f740:	3001      	adds	r0, #1
 800f742:	f000 80a7 	beq.w	800f894 <_vfiprintf_r+0x1ec>
 800f746:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f748:	445a      	add	r2, fp
 800f74a:	9209      	str	r2, [sp, #36]	@ 0x24
 800f74c:	f89a 3000 	ldrb.w	r3, [sl]
 800f750:	2b00      	cmp	r3, #0
 800f752:	f000 809f 	beq.w	800f894 <_vfiprintf_r+0x1ec>
 800f756:	2300      	movs	r3, #0
 800f758:	f04f 32ff 	mov.w	r2, #4294967295
 800f75c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f760:	f10a 0a01 	add.w	sl, sl, #1
 800f764:	9304      	str	r3, [sp, #16]
 800f766:	9307      	str	r3, [sp, #28]
 800f768:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f76c:	931a      	str	r3, [sp, #104]	@ 0x68
 800f76e:	4654      	mov	r4, sl
 800f770:	2205      	movs	r2, #5
 800f772:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f776:	4853      	ldr	r0, [pc, #332]	@ (800f8c4 <_vfiprintf_r+0x21c>)
 800f778:	f7f0 fd2a 	bl	80001d0 <memchr>
 800f77c:	9a04      	ldr	r2, [sp, #16]
 800f77e:	b9d8      	cbnz	r0, 800f7b8 <_vfiprintf_r+0x110>
 800f780:	06d1      	lsls	r1, r2, #27
 800f782:	bf44      	itt	mi
 800f784:	2320      	movmi	r3, #32
 800f786:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f78a:	0713      	lsls	r3, r2, #28
 800f78c:	bf44      	itt	mi
 800f78e:	232b      	movmi	r3, #43	@ 0x2b
 800f790:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f794:	f89a 3000 	ldrb.w	r3, [sl]
 800f798:	2b2a      	cmp	r3, #42	@ 0x2a
 800f79a:	d015      	beq.n	800f7c8 <_vfiprintf_r+0x120>
 800f79c:	9a07      	ldr	r2, [sp, #28]
 800f79e:	4654      	mov	r4, sl
 800f7a0:	2000      	movs	r0, #0
 800f7a2:	f04f 0c0a 	mov.w	ip, #10
 800f7a6:	4621      	mov	r1, r4
 800f7a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f7ac:	3b30      	subs	r3, #48	@ 0x30
 800f7ae:	2b09      	cmp	r3, #9
 800f7b0:	d94b      	bls.n	800f84a <_vfiprintf_r+0x1a2>
 800f7b2:	b1b0      	cbz	r0, 800f7e2 <_vfiprintf_r+0x13a>
 800f7b4:	9207      	str	r2, [sp, #28]
 800f7b6:	e014      	b.n	800f7e2 <_vfiprintf_r+0x13a>
 800f7b8:	eba0 0308 	sub.w	r3, r0, r8
 800f7bc:	fa09 f303 	lsl.w	r3, r9, r3
 800f7c0:	4313      	orrs	r3, r2
 800f7c2:	9304      	str	r3, [sp, #16]
 800f7c4:	46a2      	mov	sl, r4
 800f7c6:	e7d2      	b.n	800f76e <_vfiprintf_r+0xc6>
 800f7c8:	9b03      	ldr	r3, [sp, #12]
 800f7ca:	1d19      	adds	r1, r3, #4
 800f7cc:	681b      	ldr	r3, [r3, #0]
 800f7ce:	9103      	str	r1, [sp, #12]
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	bfbb      	ittet	lt
 800f7d4:	425b      	neglt	r3, r3
 800f7d6:	f042 0202 	orrlt.w	r2, r2, #2
 800f7da:	9307      	strge	r3, [sp, #28]
 800f7dc:	9307      	strlt	r3, [sp, #28]
 800f7de:	bfb8      	it	lt
 800f7e0:	9204      	strlt	r2, [sp, #16]
 800f7e2:	7823      	ldrb	r3, [r4, #0]
 800f7e4:	2b2e      	cmp	r3, #46	@ 0x2e
 800f7e6:	d10a      	bne.n	800f7fe <_vfiprintf_r+0x156>
 800f7e8:	7863      	ldrb	r3, [r4, #1]
 800f7ea:	2b2a      	cmp	r3, #42	@ 0x2a
 800f7ec:	d132      	bne.n	800f854 <_vfiprintf_r+0x1ac>
 800f7ee:	9b03      	ldr	r3, [sp, #12]
 800f7f0:	1d1a      	adds	r2, r3, #4
 800f7f2:	681b      	ldr	r3, [r3, #0]
 800f7f4:	9203      	str	r2, [sp, #12]
 800f7f6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f7fa:	3402      	adds	r4, #2
 800f7fc:	9305      	str	r3, [sp, #20]
 800f7fe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f8d4 <_vfiprintf_r+0x22c>
 800f802:	7821      	ldrb	r1, [r4, #0]
 800f804:	2203      	movs	r2, #3
 800f806:	4650      	mov	r0, sl
 800f808:	f7f0 fce2 	bl	80001d0 <memchr>
 800f80c:	b138      	cbz	r0, 800f81e <_vfiprintf_r+0x176>
 800f80e:	9b04      	ldr	r3, [sp, #16]
 800f810:	eba0 000a 	sub.w	r0, r0, sl
 800f814:	2240      	movs	r2, #64	@ 0x40
 800f816:	4082      	lsls	r2, r0
 800f818:	4313      	orrs	r3, r2
 800f81a:	3401      	adds	r4, #1
 800f81c:	9304      	str	r3, [sp, #16]
 800f81e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f822:	4829      	ldr	r0, [pc, #164]	@ (800f8c8 <_vfiprintf_r+0x220>)
 800f824:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f828:	2206      	movs	r2, #6
 800f82a:	f7f0 fcd1 	bl	80001d0 <memchr>
 800f82e:	2800      	cmp	r0, #0
 800f830:	d03f      	beq.n	800f8b2 <_vfiprintf_r+0x20a>
 800f832:	4b26      	ldr	r3, [pc, #152]	@ (800f8cc <_vfiprintf_r+0x224>)
 800f834:	bb1b      	cbnz	r3, 800f87e <_vfiprintf_r+0x1d6>
 800f836:	9b03      	ldr	r3, [sp, #12]
 800f838:	3307      	adds	r3, #7
 800f83a:	f023 0307 	bic.w	r3, r3, #7
 800f83e:	3308      	adds	r3, #8
 800f840:	9303      	str	r3, [sp, #12]
 800f842:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f844:	443b      	add	r3, r7
 800f846:	9309      	str	r3, [sp, #36]	@ 0x24
 800f848:	e76a      	b.n	800f720 <_vfiprintf_r+0x78>
 800f84a:	fb0c 3202 	mla	r2, ip, r2, r3
 800f84e:	460c      	mov	r4, r1
 800f850:	2001      	movs	r0, #1
 800f852:	e7a8      	b.n	800f7a6 <_vfiprintf_r+0xfe>
 800f854:	2300      	movs	r3, #0
 800f856:	3401      	adds	r4, #1
 800f858:	9305      	str	r3, [sp, #20]
 800f85a:	4619      	mov	r1, r3
 800f85c:	f04f 0c0a 	mov.w	ip, #10
 800f860:	4620      	mov	r0, r4
 800f862:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f866:	3a30      	subs	r2, #48	@ 0x30
 800f868:	2a09      	cmp	r2, #9
 800f86a:	d903      	bls.n	800f874 <_vfiprintf_r+0x1cc>
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d0c6      	beq.n	800f7fe <_vfiprintf_r+0x156>
 800f870:	9105      	str	r1, [sp, #20]
 800f872:	e7c4      	b.n	800f7fe <_vfiprintf_r+0x156>
 800f874:	fb0c 2101 	mla	r1, ip, r1, r2
 800f878:	4604      	mov	r4, r0
 800f87a:	2301      	movs	r3, #1
 800f87c:	e7f0      	b.n	800f860 <_vfiprintf_r+0x1b8>
 800f87e:	ab03      	add	r3, sp, #12
 800f880:	9300      	str	r3, [sp, #0]
 800f882:	462a      	mov	r2, r5
 800f884:	4b12      	ldr	r3, [pc, #72]	@ (800f8d0 <_vfiprintf_r+0x228>)
 800f886:	a904      	add	r1, sp, #16
 800f888:	4630      	mov	r0, r6
 800f88a:	f7fd fda3 	bl	800d3d4 <_printf_float>
 800f88e:	4607      	mov	r7, r0
 800f890:	1c78      	adds	r0, r7, #1
 800f892:	d1d6      	bne.n	800f842 <_vfiprintf_r+0x19a>
 800f894:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f896:	07d9      	lsls	r1, r3, #31
 800f898:	d405      	bmi.n	800f8a6 <_vfiprintf_r+0x1fe>
 800f89a:	89ab      	ldrh	r3, [r5, #12]
 800f89c:	059a      	lsls	r2, r3, #22
 800f89e:	d402      	bmi.n	800f8a6 <_vfiprintf_r+0x1fe>
 800f8a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f8a2:	f7fe fad3 	bl	800de4c <__retarget_lock_release_recursive>
 800f8a6:	89ab      	ldrh	r3, [r5, #12]
 800f8a8:	065b      	lsls	r3, r3, #25
 800f8aa:	f53f af1f 	bmi.w	800f6ec <_vfiprintf_r+0x44>
 800f8ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f8b0:	e71e      	b.n	800f6f0 <_vfiprintf_r+0x48>
 800f8b2:	ab03      	add	r3, sp, #12
 800f8b4:	9300      	str	r3, [sp, #0]
 800f8b6:	462a      	mov	r2, r5
 800f8b8:	4b05      	ldr	r3, [pc, #20]	@ (800f8d0 <_vfiprintf_r+0x228>)
 800f8ba:	a904      	add	r1, sp, #16
 800f8bc:	4630      	mov	r0, r6
 800f8be:	f7fe f821 	bl	800d904 <_printf_i>
 800f8c2:	e7e4      	b.n	800f88e <_vfiprintf_r+0x1e6>
 800f8c4:	0801057f 	.word	0x0801057f
 800f8c8:	08010589 	.word	0x08010589
 800f8cc:	0800d3d5 	.word	0x0800d3d5
 800f8d0:	0800f685 	.word	0x0800f685
 800f8d4:	08010585 	.word	0x08010585

0800f8d8 <__swbuf_r>:
 800f8d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8da:	460e      	mov	r6, r1
 800f8dc:	4614      	mov	r4, r2
 800f8de:	4605      	mov	r5, r0
 800f8e0:	b118      	cbz	r0, 800f8ea <__swbuf_r+0x12>
 800f8e2:	6a03      	ldr	r3, [r0, #32]
 800f8e4:	b90b      	cbnz	r3, 800f8ea <__swbuf_r+0x12>
 800f8e6:	f7fe f9b9 	bl	800dc5c <__sinit>
 800f8ea:	69a3      	ldr	r3, [r4, #24]
 800f8ec:	60a3      	str	r3, [r4, #8]
 800f8ee:	89a3      	ldrh	r3, [r4, #12]
 800f8f0:	071a      	lsls	r2, r3, #28
 800f8f2:	d501      	bpl.n	800f8f8 <__swbuf_r+0x20>
 800f8f4:	6923      	ldr	r3, [r4, #16]
 800f8f6:	b943      	cbnz	r3, 800f90a <__swbuf_r+0x32>
 800f8f8:	4621      	mov	r1, r4
 800f8fa:	4628      	mov	r0, r5
 800f8fc:	f000 f82a 	bl	800f954 <__swsetup_r>
 800f900:	b118      	cbz	r0, 800f90a <__swbuf_r+0x32>
 800f902:	f04f 37ff 	mov.w	r7, #4294967295
 800f906:	4638      	mov	r0, r7
 800f908:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f90a:	6823      	ldr	r3, [r4, #0]
 800f90c:	6922      	ldr	r2, [r4, #16]
 800f90e:	1a98      	subs	r0, r3, r2
 800f910:	6963      	ldr	r3, [r4, #20]
 800f912:	b2f6      	uxtb	r6, r6
 800f914:	4283      	cmp	r3, r0
 800f916:	4637      	mov	r7, r6
 800f918:	dc05      	bgt.n	800f926 <__swbuf_r+0x4e>
 800f91a:	4621      	mov	r1, r4
 800f91c:	4628      	mov	r0, r5
 800f91e:	f7ff fde9 	bl	800f4f4 <_fflush_r>
 800f922:	2800      	cmp	r0, #0
 800f924:	d1ed      	bne.n	800f902 <__swbuf_r+0x2a>
 800f926:	68a3      	ldr	r3, [r4, #8]
 800f928:	3b01      	subs	r3, #1
 800f92a:	60a3      	str	r3, [r4, #8]
 800f92c:	6823      	ldr	r3, [r4, #0]
 800f92e:	1c5a      	adds	r2, r3, #1
 800f930:	6022      	str	r2, [r4, #0]
 800f932:	701e      	strb	r6, [r3, #0]
 800f934:	6962      	ldr	r2, [r4, #20]
 800f936:	1c43      	adds	r3, r0, #1
 800f938:	429a      	cmp	r2, r3
 800f93a:	d004      	beq.n	800f946 <__swbuf_r+0x6e>
 800f93c:	89a3      	ldrh	r3, [r4, #12]
 800f93e:	07db      	lsls	r3, r3, #31
 800f940:	d5e1      	bpl.n	800f906 <__swbuf_r+0x2e>
 800f942:	2e0a      	cmp	r6, #10
 800f944:	d1df      	bne.n	800f906 <__swbuf_r+0x2e>
 800f946:	4621      	mov	r1, r4
 800f948:	4628      	mov	r0, r5
 800f94a:	f7ff fdd3 	bl	800f4f4 <_fflush_r>
 800f94e:	2800      	cmp	r0, #0
 800f950:	d0d9      	beq.n	800f906 <__swbuf_r+0x2e>
 800f952:	e7d6      	b.n	800f902 <__swbuf_r+0x2a>

0800f954 <__swsetup_r>:
 800f954:	b538      	push	{r3, r4, r5, lr}
 800f956:	4b29      	ldr	r3, [pc, #164]	@ (800f9fc <__swsetup_r+0xa8>)
 800f958:	4605      	mov	r5, r0
 800f95a:	6818      	ldr	r0, [r3, #0]
 800f95c:	460c      	mov	r4, r1
 800f95e:	b118      	cbz	r0, 800f968 <__swsetup_r+0x14>
 800f960:	6a03      	ldr	r3, [r0, #32]
 800f962:	b90b      	cbnz	r3, 800f968 <__swsetup_r+0x14>
 800f964:	f7fe f97a 	bl	800dc5c <__sinit>
 800f968:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f96c:	0719      	lsls	r1, r3, #28
 800f96e:	d422      	bmi.n	800f9b6 <__swsetup_r+0x62>
 800f970:	06da      	lsls	r2, r3, #27
 800f972:	d407      	bmi.n	800f984 <__swsetup_r+0x30>
 800f974:	2209      	movs	r2, #9
 800f976:	602a      	str	r2, [r5, #0]
 800f978:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f97c:	81a3      	strh	r3, [r4, #12]
 800f97e:	f04f 30ff 	mov.w	r0, #4294967295
 800f982:	e033      	b.n	800f9ec <__swsetup_r+0x98>
 800f984:	0758      	lsls	r0, r3, #29
 800f986:	d512      	bpl.n	800f9ae <__swsetup_r+0x5a>
 800f988:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f98a:	b141      	cbz	r1, 800f99e <__swsetup_r+0x4a>
 800f98c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f990:	4299      	cmp	r1, r3
 800f992:	d002      	beq.n	800f99a <__swsetup_r+0x46>
 800f994:	4628      	mov	r0, r5
 800f996:	f7ff f8a7 	bl	800eae8 <_free_r>
 800f99a:	2300      	movs	r3, #0
 800f99c:	6363      	str	r3, [r4, #52]	@ 0x34
 800f99e:	89a3      	ldrh	r3, [r4, #12]
 800f9a0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f9a4:	81a3      	strh	r3, [r4, #12]
 800f9a6:	2300      	movs	r3, #0
 800f9a8:	6063      	str	r3, [r4, #4]
 800f9aa:	6923      	ldr	r3, [r4, #16]
 800f9ac:	6023      	str	r3, [r4, #0]
 800f9ae:	89a3      	ldrh	r3, [r4, #12]
 800f9b0:	f043 0308 	orr.w	r3, r3, #8
 800f9b4:	81a3      	strh	r3, [r4, #12]
 800f9b6:	6923      	ldr	r3, [r4, #16]
 800f9b8:	b94b      	cbnz	r3, 800f9ce <__swsetup_r+0x7a>
 800f9ba:	89a3      	ldrh	r3, [r4, #12]
 800f9bc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f9c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f9c4:	d003      	beq.n	800f9ce <__swsetup_r+0x7a>
 800f9c6:	4621      	mov	r1, r4
 800f9c8:	4628      	mov	r0, r5
 800f9ca:	f000 f883 	bl	800fad4 <__smakebuf_r>
 800f9ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f9d2:	f013 0201 	ands.w	r2, r3, #1
 800f9d6:	d00a      	beq.n	800f9ee <__swsetup_r+0x9a>
 800f9d8:	2200      	movs	r2, #0
 800f9da:	60a2      	str	r2, [r4, #8]
 800f9dc:	6962      	ldr	r2, [r4, #20]
 800f9de:	4252      	negs	r2, r2
 800f9e0:	61a2      	str	r2, [r4, #24]
 800f9e2:	6922      	ldr	r2, [r4, #16]
 800f9e4:	b942      	cbnz	r2, 800f9f8 <__swsetup_r+0xa4>
 800f9e6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f9ea:	d1c5      	bne.n	800f978 <__swsetup_r+0x24>
 800f9ec:	bd38      	pop	{r3, r4, r5, pc}
 800f9ee:	0799      	lsls	r1, r3, #30
 800f9f0:	bf58      	it	pl
 800f9f2:	6962      	ldrpl	r2, [r4, #20]
 800f9f4:	60a2      	str	r2, [r4, #8]
 800f9f6:	e7f4      	b.n	800f9e2 <__swsetup_r+0x8e>
 800f9f8:	2000      	movs	r0, #0
 800f9fa:	e7f7      	b.n	800f9ec <__swsetup_r+0x98>
 800f9fc:	2000010c 	.word	0x2000010c

0800fa00 <_raise_r>:
 800fa00:	291f      	cmp	r1, #31
 800fa02:	b538      	push	{r3, r4, r5, lr}
 800fa04:	4605      	mov	r5, r0
 800fa06:	460c      	mov	r4, r1
 800fa08:	d904      	bls.n	800fa14 <_raise_r+0x14>
 800fa0a:	2316      	movs	r3, #22
 800fa0c:	6003      	str	r3, [r0, #0]
 800fa0e:	f04f 30ff 	mov.w	r0, #4294967295
 800fa12:	bd38      	pop	{r3, r4, r5, pc}
 800fa14:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800fa16:	b112      	cbz	r2, 800fa1e <_raise_r+0x1e>
 800fa18:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fa1c:	b94b      	cbnz	r3, 800fa32 <_raise_r+0x32>
 800fa1e:	4628      	mov	r0, r5
 800fa20:	f000 f830 	bl	800fa84 <_getpid_r>
 800fa24:	4622      	mov	r2, r4
 800fa26:	4601      	mov	r1, r0
 800fa28:	4628      	mov	r0, r5
 800fa2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fa2e:	f000 b817 	b.w	800fa60 <_kill_r>
 800fa32:	2b01      	cmp	r3, #1
 800fa34:	d00a      	beq.n	800fa4c <_raise_r+0x4c>
 800fa36:	1c59      	adds	r1, r3, #1
 800fa38:	d103      	bne.n	800fa42 <_raise_r+0x42>
 800fa3a:	2316      	movs	r3, #22
 800fa3c:	6003      	str	r3, [r0, #0]
 800fa3e:	2001      	movs	r0, #1
 800fa40:	e7e7      	b.n	800fa12 <_raise_r+0x12>
 800fa42:	2100      	movs	r1, #0
 800fa44:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800fa48:	4620      	mov	r0, r4
 800fa4a:	4798      	blx	r3
 800fa4c:	2000      	movs	r0, #0
 800fa4e:	e7e0      	b.n	800fa12 <_raise_r+0x12>

0800fa50 <raise>:
 800fa50:	4b02      	ldr	r3, [pc, #8]	@ (800fa5c <raise+0xc>)
 800fa52:	4601      	mov	r1, r0
 800fa54:	6818      	ldr	r0, [r3, #0]
 800fa56:	f7ff bfd3 	b.w	800fa00 <_raise_r>
 800fa5a:	bf00      	nop
 800fa5c:	2000010c 	.word	0x2000010c

0800fa60 <_kill_r>:
 800fa60:	b538      	push	{r3, r4, r5, lr}
 800fa62:	4d07      	ldr	r5, [pc, #28]	@ (800fa80 <_kill_r+0x20>)
 800fa64:	2300      	movs	r3, #0
 800fa66:	4604      	mov	r4, r0
 800fa68:	4608      	mov	r0, r1
 800fa6a:	4611      	mov	r1, r2
 800fa6c:	602b      	str	r3, [r5, #0]
 800fa6e:	f7f2 fe9f 	bl	80027b0 <_kill>
 800fa72:	1c43      	adds	r3, r0, #1
 800fa74:	d102      	bne.n	800fa7c <_kill_r+0x1c>
 800fa76:	682b      	ldr	r3, [r5, #0]
 800fa78:	b103      	cbz	r3, 800fa7c <_kill_r+0x1c>
 800fa7a:	6023      	str	r3, [r4, #0]
 800fa7c:	bd38      	pop	{r3, r4, r5, pc}
 800fa7e:	bf00      	nop
 800fa80:	20002420 	.word	0x20002420

0800fa84 <_getpid_r>:
 800fa84:	f7f2 be8c 	b.w	80027a0 <_getpid>

0800fa88 <__swhatbuf_r>:
 800fa88:	b570      	push	{r4, r5, r6, lr}
 800fa8a:	460c      	mov	r4, r1
 800fa8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa90:	2900      	cmp	r1, #0
 800fa92:	b096      	sub	sp, #88	@ 0x58
 800fa94:	4615      	mov	r5, r2
 800fa96:	461e      	mov	r6, r3
 800fa98:	da0d      	bge.n	800fab6 <__swhatbuf_r+0x2e>
 800fa9a:	89a3      	ldrh	r3, [r4, #12]
 800fa9c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800faa0:	f04f 0100 	mov.w	r1, #0
 800faa4:	bf14      	ite	ne
 800faa6:	2340      	movne	r3, #64	@ 0x40
 800faa8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800faac:	2000      	movs	r0, #0
 800faae:	6031      	str	r1, [r6, #0]
 800fab0:	602b      	str	r3, [r5, #0]
 800fab2:	b016      	add	sp, #88	@ 0x58
 800fab4:	bd70      	pop	{r4, r5, r6, pc}
 800fab6:	466a      	mov	r2, sp
 800fab8:	f000 f848 	bl	800fb4c <_fstat_r>
 800fabc:	2800      	cmp	r0, #0
 800fabe:	dbec      	blt.n	800fa9a <__swhatbuf_r+0x12>
 800fac0:	9901      	ldr	r1, [sp, #4]
 800fac2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800fac6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800faca:	4259      	negs	r1, r3
 800facc:	4159      	adcs	r1, r3
 800face:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fad2:	e7eb      	b.n	800faac <__swhatbuf_r+0x24>

0800fad4 <__smakebuf_r>:
 800fad4:	898b      	ldrh	r3, [r1, #12]
 800fad6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fad8:	079d      	lsls	r5, r3, #30
 800fada:	4606      	mov	r6, r0
 800fadc:	460c      	mov	r4, r1
 800fade:	d507      	bpl.n	800faf0 <__smakebuf_r+0x1c>
 800fae0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800fae4:	6023      	str	r3, [r4, #0]
 800fae6:	6123      	str	r3, [r4, #16]
 800fae8:	2301      	movs	r3, #1
 800faea:	6163      	str	r3, [r4, #20]
 800faec:	b003      	add	sp, #12
 800faee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800faf0:	ab01      	add	r3, sp, #4
 800faf2:	466a      	mov	r2, sp
 800faf4:	f7ff ffc8 	bl	800fa88 <__swhatbuf_r>
 800faf8:	9f00      	ldr	r7, [sp, #0]
 800fafa:	4605      	mov	r5, r0
 800fafc:	4639      	mov	r1, r7
 800fafe:	4630      	mov	r0, r6
 800fb00:	f7ff f866 	bl	800ebd0 <_malloc_r>
 800fb04:	b948      	cbnz	r0, 800fb1a <__smakebuf_r+0x46>
 800fb06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fb0a:	059a      	lsls	r2, r3, #22
 800fb0c:	d4ee      	bmi.n	800faec <__smakebuf_r+0x18>
 800fb0e:	f023 0303 	bic.w	r3, r3, #3
 800fb12:	f043 0302 	orr.w	r3, r3, #2
 800fb16:	81a3      	strh	r3, [r4, #12]
 800fb18:	e7e2      	b.n	800fae0 <__smakebuf_r+0xc>
 800fb1a:	89a3      	ldrh	r3, [r4, #12]
 800fb1c:	6020      	str	r0, [r4, #0]
 800fb1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fb22:	81a3      	strh	r3, [r4, #12]
 800fb24:	9b01      	ldr	r3, [sp, #4]
 800fb26:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800fb2a:	b15b      	cbz	r3, 800fb44 <__smakebuf_r+0x70>
 800fb2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fb30:	4630      	mov	r0, r6
 800fb32:	f000 f81d 	bl	800fb70 <_isatty_r>
 800fb36:	b128      	cbz	r0, 800fb44 <__smakebuf_r+0x70>
 800fb38:	89a3      	ldrh	r3, [r4, #12]
 800fb3a:	f023 0303 	bic.w	r3, r3, #3
 800fb3e:	f043 0301 	orr.w	r3, r3, #1
 800fb42:	81a3      	strh	r3, [r4, #12]
 800fb44:	89a3      	ldrh	r3, [r4, #12]
 800fb46:	431d      	orrs	r5, r3
 800fb48:	81a5      	strh	r5, [r4, #12]
 800fb4a:	e7cf      	b.n	800faec <__smakebuf_r+0x18>

0800fb4c <_fstat_r>:
 800fb4c:	b538      	push	{r3, r4, r5, lr}
 800fb4e:	4d07      	ldr	r5, [pc, #28]	@ (800fb6c <_fstat_r+0x20>)
 800fb50:	2300      	movs	r3, #0
 800fb52:	4604      	mov	r4, r0
 800fb54:	4608      	mov	r0, r1
 800fb56:	4611      	mov	r1, r2
 800fb58:	602b      	str	r3, [r5, #0]
 800fb5a:	f7f2 fe89 	bl	8002870 <_fstat>
 800fb5e:	1c43      	adds	r3, r0, #1
 800fb60:	d102      	bne.n	800fb68 <_fstat_r+0x1c>
 800fb62:	682b      	ldr	r3, [r5, #0]
 800fb64:	b103      	cbz	r3, 800fb68 <_fstat_r+0x1c>
 800fb66:	6023      	str	r3, [r4, #0]
 800fb68:	bd38      	pop	{r3, r4, r5, pc}
 800fb6a:	bf00      	nop
 800fb6c:	20002420 	.word	0x20002420

0800fb70 <_isatty_r>:
 800fb70:	b538      	push	{r3, r4, r5, lr}
 800fb72:	4d06      	ldr	r5, [pc, #24]	@ (800fb8c <_isatty_r+0x1c>)
 800fb74:	2300      	movs	r3, #0
 800fb76:	4604      	mov	r4, r0
 800fb78:	4608      	mov	r0, r1
 800fb7a:	602b      	str	r3, [r5, #0]
 800fb7c:	f7f2 fe88 	bl	8002890 <_isatty>
 800fb80:	1c43      	adds	r3, r0, #1
 800fb82:	d102      	bne.n	800fb8a <_isatty_r+0x1a>
 800fb84:	682b      	ldr	r3, [r5, #0]
 800fb86:	b103      	cbz	r3, 800fb8a <_isatty_r+0x1a>
 800fb88:	6023      	str	r3, [r4, #0]
 800fb8a:	bd38      	pop	{r3, r4, r5, pc}
 800fb8c:	20002420 	.word	0x20002420

0800fb90 <log>:
 800fb90:	b538      	push	{r3, r4, r5, lr}
 800fb92:	ed2d 8b02 	vpush	{d8}
 800fb96:	ec55 4b10 	vmov	r4, r5, d0
 800fb9a:	f000 f949 	bl	800fe30 <__ieee754_log>
 800fb9e:	4622      	mov	r2, r4
 800fba0:	462b      	mov	r3, r5
 800fba2:	4620      	mov	r0, r4
 800fba4:	4629      	mov	r1, r5
 800fba6:	eeb0 8a40 	vmov.f32	s16, s0
 800fbaa:	eef0 8a60 	vmov.f32	s17, s1
 800fbae:	f7f0 ffbd 	bl	8000b2c <__aeabi_dcmpun>
 800fbb2:	b998      	cbnz	r0, 800fbdc <log+0x4c>
 800fbb4:	2200      	movs	r2, #0
 800fbb6:	2300      	movs	r3, #0
 800fbb8:	4620      	mov	r0, r4
 800fbba:	4629      	mov	r1, r5
 800fbbc:	f7f0 ffac 	bl	8000b18 <__aeabi_dcmpgt>
 800fbc0:	b960      	cbnz	r0, 800fbdc <log+0x4c>
 800fbc2:	2200      	movs	r2, #0
 800fbc4:	2300      	movs	r3, #0
 800fbc6:	4620      	mov	r0, r4
 800fbc8:	4629      	mov	r1, r5
 800fbca:	f7f0 ff7d 	bl	8000ac8 <__aeabi_dcmpeq>
 800fbce:	b160      	cbz	r0, 800fbea <log+0x5a>
 800fbd0:	f7fe f910 	bl	800ddf4 <__errno>
 800fbd4:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 800fc00 <log+0x70>
 800fbd8:	2322      	movs	r3, #34	@ 0x22
 800fbda:	6003      	str	r3, [r0, #0]
 800fbdc:	eeb0 0a48 	vmov.f32	s0, s16
 800fbe0:	eef0 0a68 	vmov.f32	s1, s17
 800fbe4:	ecbd 8b02 	vpop	{d8}
 800fbe8:	bd38      	pop	{r3, r4, r5, pc}
 800fbea:	f7fe f903 	bl	800ddf4 <__errno>
 800fbee:	ecbd 8b02 	vpop	{d8}
 800fbf2:	2321      	movs	r3, #33	@ 0x21
 800fbf4:	6003      	str	r3, [r0, #0]
 800fbf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fbfa:	4803      	ldr	r0, [pc, #12]	@ (800fc08 <log+0x78>)
 800fbfc:	f000 b834 	b.w	800fc68 <nan>
 800fc00:	00000000 	.word	0x00000000
 800fc04:	fff00000 	.word	0xfff00000
 800fc08:	0801047d 	.word	0x0801047d

0800fc0c <sqrt>:
 800fc0c:	b538      	push	{r3, r4, r5, lr}
 800fc0e:	ed2d 8b02 	vpush	{d8}
 800fc12:	ec55 4b10 	vmov	r4, r5, d0
 800fc16:	f000 f82f 	bl	800fc78 <__ieee754_sqrt>
 800fc1a:	4622      	mov	r2, r4
 800fc1c:	462b      	mov	r3, r5
 800fc1e:	4620      	mov	r0, r4
 800fc20:	4629      	mov	r1, r5
 800fc22:	eeb0 8a40 	vmov.f32	s16, s0
 800fc26:	eef0 8a60 	vmov.f32	s17, s1
 800fc2a:	f7f0 ff7f 	bl	8000b2c <__aeabi_dcmpun>
 800fc2e:	b990      	cbnz	r0, 800fc56 <sqrt+0x4a>
 800fc30:	2200      	movs	r2, #0
 800fc32:	2300      	movs	r3, #0
 800fc34:	4620      	mov	r0, r4
 800fc36:	4629      	mov	r1, r5
 800fc38:	f7f0 ff50 	bl	8000adc <__aeabi_dcmplt>
 800fc3c:	b158      	cbz	r0, 800fc56 <sqrt+0x4a>
 800fc3e:	f7fe f8d9 	bl	800ddf4 <__errno>
 800fc42:	2321      	movs	r3, #33	@ 0x21
 800fc44:	6003      	str	r3, [r0, #0]
 800fc46:	2200      	movs	r2, #0
 800fc48:	2300      	movs	r3, #0
 800fc4a:	4610      	mov	r0, r2
 800fc4c:	4619      	mov	r1, r3
 800fc4e:	f7f0 fdfd 	bl	800084c <__aeabi_ddiv>
 800fc52:	ec41 0b18 	vmov	d8, r0, r1
 800fc56:	eeb0 0a48 	vmov.f32	s0, s16
 800fc5a:	eef0 0a68 	vmov.f32	s1, s17
 800fc5e:	ecbd 8b02 	vpop	{d8}
 800fc62:	bd38      	pop	{r3, r4, r5, pc}
 800fc64:	0000      	movs	r0, r0
	...

0800fc68 <nan>:
 800fc68:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800fc70 <nan+0x8>
 800fc6c:	4770      	bx	lr
 800fc6e:	bf00      	nop
 800fc70:	00000000 	.word	0x00000000
 800fc74:	7ff80000 	.word	0x7ff80000

0800fc78 <__ieee754_sqrt>:
 800fc78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc7c:	4a68      	ldr	r2, [pc, #416]	@ (800fe20 <__ieee754_sqrt+0x1a8>)
 800fc7e:	ec55 4b10 	vmov	r4, r5, d0
 800fc82:	43aa      	bics	r2, r5
 800fc84:	462b      	mov	r3, r5
 800fc86:	4621      	mov	r1, r4
 800fc88:	d110      	bne.n	800fcac <__ieee754_sqrt+0x34>
 800fc8a:	4622      	mov	r2, r4
 800fc8c:	4620      	mov	r0, r4
 800fc8e:	4629      	mov	r1, r5
 800fc90:	f7f0 fcb2 	bl	80005f8 <__aeabi_dmul>
 800fc94:	4602      	mov	r2, r0
 800fc96:	460b      	mov	r3, r1
 800fc98:	4620      	mov	r0, r4
 800fc9a:	4629      	mov	r1, r5
 800fc9c:	f7f0 faf6 	bl	800028c <__adddf3>
 800fca0:	4604      	mov	r4, r0
 800fca2:	460d      	mov	r5, r1
 800fca4:	ec45 4b10 	vmov	d0, r4, r5
 800fca8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fcac:	2d00      	cmp	r5, #0
 800fcae:	dc0e      	bgt.n	800fcce <__ieee754_sqrt+0x56>
 800fcb0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800fcb4:	4322      	orrs	r2, r4
 800fcb6:	d0f5      	beq.n	800fca4 <__ieee754_sqrt+0x2c>
 800fcb8:	b19d      	cbz	r5, 800fce2 <__ieee754_sqrt+0x6a>
 800fcba:	4622      	mov	r2, r4
 800fcbc:	4620      	mov	r0, r4
 800fcbe:	4629      	mov	r1, r5
 800fcc0:	f7f0 fae2 	bl	8000288 <__aeabi_dsub>
 800fcc4:	4602      	mov	r2, r0
 800fcc6:	460b      	mov	r3, r1
 800fcc8:	f7f0 fdc0 	bl	800084c <__aeabi_ddiv>
 800fccc:	e7e8      	b.n	800fca0 <__ieee754_sqrt+0x28>
 800fcce:	152a      	asrs	r2, r5, #20
 800fcd0:	d115      	bne.n	800fcfe <__ieee754_sqrt+0x86>
 800fcd2:	2000      	movs	r0, #0
 800fcd4:	e009      	b.n	800fcea <__ieee754_sqrt+0x72>
 800fcd6:	0acb      	lsrs	r3, r1, #11
 800fcd8:	3a15      	subs	r2, #21
 800fcda:	0549      	lsls	r1, r1, #21
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d0fa      	beq.n	800fcd6 <__ieee754_sqrt+0x5e>
 800fce0:	e7f7      	b.n	800fcd2 <__ieee754_sqrt+0x5a>
 800fce2:	462a      	mov	r2, r5
 800fce4:	e7fa      	b.n	800fcdc <__ieee754_sqrt+0x64>
 800fce6:	005b      	lsls	r3, r3, #1
 800fce8:	3001      	adds	r0, #1
 800fcea:	02dc      	lsls	r4, r3, #11
 800fcec:	d5fb      	bpl.n	800fce6 <__ieee754_sqrt+0x6e>
 800fcee:	1e44      	subs	r4, r0, #1
 800fcf0:	1b12      	subs	r2, r2, r4
 800fcf2:	f1c0 0420 	rsb	r4, r0, #32
 800fcf6:	fa21 f404 	lsr.w	r4, r1, r4
 800fcfa:	4323      	orrs	r3, r4
 800fcfc:	4081      	lsls	r1, r0
 800fcfe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fd02:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800fd06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800fd0a:	07d2      	lsls	r2, r2, #31
 800fd0c:	bf5c      	itt	pl
 800fd0e:	005b      	lslpl	r3, r3, #1
 800fd10:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800fd14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800fd18:	bf58      	it	pl
 800fd1a:	0049      	lslpl	r1, r1, #1
 800fd1c:	2600      	movs	r6, #0
 800fd1e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800fd22:	106d      	asrs	r5, r5, #1
 800fd24:	0049      	lsls	r1, r1, #1
 800fd26:	2016      	movs	r0, #22
 800fd28:	4632      	mov	r2, r6
 800fd2a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800fd2e:	1917      	adds	r7, r2, r4
 800fd30:	429f      	cmp	r7, r3
 800fd32:	bfde      	ittt	le
 800fd34:	193a      	addle	r2, r7, r4
 800fd36:	1bdb      	suble	r3, r3, r7
 800fd38:	1936      	addle	r6, r6, r4
 800fd3a:	0fcf      	lsrs	r7, r1, #31
 800fd3c:	3801      	subs	r0, #1
 800fd3e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800fd42:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800fd46:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800fd4a:	d1f0      	bne.n	800fd2e <__ieee754_sqrt+0xb6>
 800fd4c:	4604      	mov	r4, r0
 800fd4e:	2720      	movs	r7, #32
 800fd50:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800fd54:	429a      	cmp	r2, r3
 800fd56:	eb00 0e0c 	add.w	lr, r0, ip
 800fd5a:	db02      	blt.n	800fd62 <__ieee754_sqrt+0xea>
 800fd5c:	d113      	bne.n	800fd86 <__ieee754_sqrt+0x10e>
 800fd5e:	458e      	cmp	lr, r1
 800fd60:	d811      	bhi.n	800fd86 <__ieee754_sqrt+0x10e>
 800fd62:	f1be 0f00 	cmp.w	lr, #0
 800fd66:	eb0e 000c 	add.w	r0, lr, ip
 800fd6a:	da42      	bge.n	800fdf2 <__ieee754_sqrt+0x17a>
 800fd6c:	2800      	cmp	r0, #0
 800fd6e:	db40      	blt.n	800fdf2 <__ieee754_sqrt+0x17a>
 800fd70:	f102 0801 	add.w	r8, r2, #1
 800fd74:	1a9b      	subs	r3, r3, r2
 800fd76:	458e      	cmp	lr, r1
 800fd78:	bf88      	it	hi
 800fd7a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800fd7e:	eba1 010e 	sub.w	r1, r1, lr
 800fd82:	4464      	add	r4, ip
 800fd84:	4642      	mov	r2, r8
 800fd86:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800fd8a:	3f01      	subs	r7, #1
 800fd8c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800fd90:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800fd94:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800fd98:	d1dc      	bne.n	800fd54 <__ieee754_sqrt+0xdc>
 800fd9a:	4319      	orrs	r1, r3
 800fd9c:	d01b      	beq.n	800fdd6 <__ieee754_sqrt+0x15e>
 800fd9e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800fe24 <__ieee754_sqrt+0x1ac>
 800fda2:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800fe28 <__ieee754_sqrt+0x1b0>
 800fda6:	e9da 0100 	ldrd	r0, r1, [sl]
 800fdaa:	e9db 2300 	ldrd	r2, r3, [fp]
 800fdae:	f7f0 fa6b 	bl	8000288 <__aeabi_dsub>
 800fdb2:	e9da 8900 	ldrd	r8, r9, [sl]
 800fdb6:	4602      	mov	r2, r0
 800fdb8:	460b      	mov	r3, r1
 800fdba:	4640      	mov	r0, r8
 800fdbc:	4649      	mov	r1, r9
 800fdbe:	f7f0 fe97 	bl	8000af0 <__aeabi_dcmple>
 800fdc2:	b140      	cbz	r0, 800fdd6 <__ieee754_sqrt+0x15e>
 800fdc4:	f1b4 3fff 	cmp.w	r4, #4294967295
 800fdc8:	e9da 0100 	ldrd	r0, r1, [sl]
 800fdcc:	e9db 2300 	ldrd	r2, r3, [fp]
 800fdd0:	d111      	bne.n	800fdf6 <__ieee754_sqrt+0x17e>
 800fdd2:	3601      	adds	r6, #1
 800fdd4:	463c      	mov	r4, r7
 800fdd6:	1072      	asrs	r2, r6, #1
 800fdd8:	0863      	lsrs	r3, r4, #1
 800fdda:	07f1      	lsls	r1, r6, #31
 800fddc:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800fde0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800fde4:	bf48      	it	mi
 800fde6:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800fdea:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800fdee:	4618      	mov	r0, r3
 800fdf0:	e756      	b.n	800fca0 <__ieee754_sqrt+0x28>
 800fdf2:	4690      	mov	r8, r2
 800fdf4:	e7be      	b.n	800fd74 <__ieee754_sqrt+0xfc>
 800fdf6:	f7f0 fa49 	bl	800028c <__adddf3>
 800fdfa:	e9da 8900 	ldrd	r8, r9, [sl]
 800fdfe:	4602      	mov	r2, r0
 800fe00:	460b      	mov	r3, r1
 800fe02:	4640      	mov	r0, r8
 800fe04:	4649      	mov	r1, r9
 800fe06:	f7f0 fe69 	bl	8000adc <__aeabi_dcmplt>
 800fe0a:	b120      	cbz	r0, 800fe16 <__ieee754_sqrt+0x19e>
 800fe0c:	1ca0      	adds	r0, r4, #2
 800fe0e:	bf08      	it	eq
 800fe10:	3601      	addeq	r6, #1
 800fe12:	3402      	adds	r4, #2
 800fe14:	e7df      	b.n	800fdd6 <__ieee754_sqrt+0x15e>
 800fe16:	1c63      	adds	r3, r4, #1
 800fe18:	f023 0401 	bic.w	r4, r3, #1
 800fe1c:	e7db      	b.n	800fdd6 <__ieee754_sqrt+0x15e>
 800fe1e:	bf00      	nop
 800fe20:	7ff00000 	.word	0x7ff00000
 800fe24:	200002d0 	.word	0x200002d0
 800fe28:	200002c8 	.word	0x200002c8
 800fe2c:	00000000 	.word	0x00000000

0800fe30 <__ieee754_log>:
 800fe30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe34:	ec51 0b10 	vmov	r0, r1, d0
 800fe38:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800fe3c:	b087      	sub	sp, #28
 800fe3e:	460d      	mov	r5, r1
 800fe40:	da26      	bge.n	800fe90 <__ieee754_log+0x60>
 800fe42:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800fe46:	4303      	orrs	r3, r0
 800fe48:	4602      	mov	r2, r0
 800fe4a:	d10a      	bne.n	800fe62 <__ieee754_log+0x32>
 800fe4c:	49ce      	ldr	r1, [pc, #824]	@ (8010188 <__ieee754_log+0x358>)
 800fe4e:	2200      	movs	r2, #0
 800fe50:	2300      	movs	r3, #0
 800fe52:	2000      	movs	r0, #0
 800fe54:	f7f0 fcfa 	bl	800084c <__aeabi_ddiv>
 800fe58:	ec41 0b10 	vmov	d0, r0, r1
 800fe5c:	b007      	add	sp, #28
 800fe5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe62:	2900      	cmp	r1, #0
 800fe64:	da05      	bge.n	800fe72 <__ieee754_log+0x42>
 800fe66:	460b      	mov	r3, r1
 800fe68:	f7f0 fa0e 	bl	8000288 <__aeabi_dsub>
 800fe6c:	2200      	movs	r2, #0
 800fe6e:	2300      	movs	r3, #0
 800fe70:	e7f0      	b.n	800fe54 <__ieee754_log+0x24>
 800fe72:	4bc6      	ldr	r3, [pc, #792]	@ (801018c <__ieee754_log+0x35c>)
 800fe74:	2200      	movs	r2, #0
 800fe76:	f7f0 fbbf 	bl	80005f8 <__aeabi_dmul>
 800fe7a:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 800fe7e:	460d      	mov	r5, r1
 800fe80:	4ac3      	ldr	r2, [pc, #780]	@ (8010190 <__ieee754_log+0x360>)
 800fe82:	4295      	cmp	r5, r2
 800fe84:	dd06      	ble.n	800fe94 <__ieee754_log+0x64>
 800fe86:	4602      	mov	r2, r0
 800fe88:	460b      	mov	r3, r1
 800fe8a:	f7f0 f9ff 	bl	800028c <__adddf3>
 800fe8e:	e7e3      	b.n	800fe58 <__ieee754_log+0x28>
 800fe90:	2300      	movs	r3, #0
 800fe92:	e7f5      	b.n	800fe80 <__ieee754_log+0x50>
 800fe94:	152c      	asrs	r4, r5, #20
 800fe96:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 800fe9a:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800fe9e:	441c      	add	r4, r3
 800fea0:	f505 2315 	add.w	r3, r5, #610304	@ 0x95000
 800fea4:	f603 7364 	addw	r3, r3, #3940	@ 0xf64
 800fea8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800feac:	f083 527f 	eor.w	r2, r3, #1069547520	@ 0x3fc00000
 800feb0:	f482 1240 	eor.w	r2, r2, #3145728	@ 0x300000
 800feb4:	ea42 0105 	orr.w	r1, r2, r5
 800feb8:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800febc:	2200      	movs	r2, #0
 800febe:	4bb5      	ldr	r3, [pc, #724]	@ (8010194 <__ieee754_log+0x364>)
 800fec0:	f7f0 f9e2 	bl	8000288 <__aeabi_dsub>
 800fec4:	1cab      	adds	r3, r5, #2
 800fec6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800feca:	2b02      	cmp	r3, #2
 800fecc:	4682      	mov	sl, r0
 800fece:	468b      	mov	fp, r1
 800fed0:	f04f 0200 	mov.w	r2, #0
 800fed4:	dc53      	bgt.n	800ff7e <__ieee754_log+0x14e>
 800fed6:	2300      	movs	r3, #0
 800fed8:	f7f0 fdf6 	bl	8000ac8 <__aeabi_dcmpeq>
 800fedc:	b1d0      	cbz	r0, 800ff14 <__ieee754_log+0xe4>
 800fede:	2c00      	cmp	r4, #0
 800fee0:	f000 8120 	beq.w	8010124 <__ieee754_log+0x2f4>
 800fee4:	4620      	mov	r0, r4
 800fee6:	f7f0 fb1d 	bl	8000524 <__aeabi_i2d>
 800feea:	a391      	add	r3, pc, #580	@ (adr r3, 8010130 <__ieee754_log+0x300>)
 800feec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fef0:	4606      	mov	r6, r0
 800fef2:	460f      	mov	r7, r1
 800fef4:	f7f0 fb80 	bl	80005f8 <__aeabi_dmul>
 800fef8:	a38f      	add	r3, pc, #572	@ (adr r3, 8010138 <__ieee754_log+0x308>)
 800fefa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fefe:	4604      	mov	r4, r0
 800ff00:	460d      	mov	r5, r1
 800ff02:	4630      	mov	r0, r6
 800ff04:	4639      	mov	r1, r7
 800ff06:	f7f0 fb77 	bl	80005f8 <__aeabi_dmul>
 800ff0a:	4602      	mov	r2, r0
 800ff0c:	460b      	mov	r3, r1
 800ff0e:	4620      	mov	r0, r4
 800ff10:	4629      	mov	r1, r5
 800ff12:	e7ba      	b.n	800fe8a <__ieee754_log+0x5a>
 800ff14:	a38a      	add	r3, pc, #552	@ (adr r3, 8010140 <__ieee754_log+0x310>)
 800ff16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff1a:	4650      	mov	r0, sl
 800ff1c:	4659      	mov	r1, fp
 800ff1e:	f7f0 fb6b 	bl	80005f8 <__aeabi_dmul>
 800ff22:	4602      	mov	r2, r0
 800ff24:	460b      	mov	r3, r1
 800ff26:	2000      	movs	r0, #0
 800ff28:	499b      	ldr	r1, [pc, #620]	@ (8010198 <__ieee754_log+0x368>)
 800ff2a:	f7f0 f9ad 	bl	8000288 <__aeabi_dsub>
 800ff2e:	4652      	mov	r2, sl
 800ff30:	4606      	mov	r6, r0
 800ff32:	460f      	mov	r7, r1
 800ff34:	465b      	mov	r3, fp
 800ff36:	4650      	mov	r0, sl
 800ff38:	4659      	mov	r1, fp
 800ff3a:	f7f0 fb5d 	bl	80005f8 <__aeabi_dmul>
 800ff3e:	4602      	mov	r2, r0
 800ff40:	460b      	mov	r3, r1
 800ff42:	4630      	mov	r0, r6
 800ff44:	4639      	mov	r1, r7
 800ff46:	f7f0 fb57 	bl	80005f8 <__aeabi_dmul>
 800ff4a:	4606      	mov	r6, r0
 800ff4c:	460f      	mov	r7, r1
 800ff4e:	b914      	cbnz	r4, 800ff56 <__ieee754_log+0x126>
 800ff50:	4632      	mov	r2, r6
 800ff52:	463b      	mov	r3, r7
 800ff54:	e0a0      	b.n	8010098 <__ieee754_log+0x268>
 800ff56:	4620      	mov	r0, r4
 800ff58:	f7f0 fae4 	bl	8000524 <__aeabi_i2d>
 800ff5c:	a374      	add	r3, pc, #464	@ (adr r3, 8010130 <__ieee754_log+0x300>)
 800ff5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff62:	4680      	mov	r8, r0
 800ff64:	4689      	mov	r9, r1
 800ff66:	f7f0 fb47 	bl	80005f8 <__aeabi_dmul>
 800ff6a:	a373      	add	r3, pc, #460	@ (adr r3, 8010138 <__ieee754_log+0x308>)
 800ff6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff70:	4604      	mov	r4, r0
 800ff72:	460d      	mov	r5, r1
 800ff74:	4640      	mov	r0, r8
 800ff76:	4649      	mov	r1, r9
 800ff78:	f7f0 fb3e 	bl	80005f8 <__aeabi_dmul>
 800ff7c:	e0a5      	b.n	80100ca <__ieee754_log+0x29a>
 800ff7e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ff82:	f7f0 f983 	bl	800028c <__adddf3>
 800ff86:	4602      	mov	r2, r0
 800ff88:	460b      	mov	r3, r1
 800ff8a:	4650      	mov	r0, sl
 800ff8c:	4659      	mov	r1, fp
 800ff8e:	f7f0 fc5d 	bl	800084c <__aeabi_ddiv>
 800ff92:	e9cd 0100 	strd	r0, r1, [sp]
 800ff96:	4620      	mov	r0, r4
 800ff98:	f7f0 fac4 	bl	8000524 <__aeabi_i2d>
 800ff9c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ffa0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ffa4:	4610      	mov	r0, r2
 800ffa6:	4619      	mov	r1, r3
 800ffa8:	f7f0 fb26 	bl	80005f8 <__aeabi_dmul>
 800ffac:	4602      	mov	r2, r0
 800ffae:	460b      	mov	r3, r1
 800ffb0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ffb4:	f7f0 fb20 	bl	80005f8 <__aeabi_dmul>
 800ffb8:	a363      	add	r3, pc, #396	@ (adr r3, 8010148 <__ieee754_log+0x318>)
 800ffba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffbe:	4680      	mov	r8, r0
 800ffc0:	4689      	mov	r9, r1
 800ffc2:	f7f0 fb19 	bl	80005f8 <__aeabi_dmul>
 800ffc6:	a362      	add	r3, pc, #392	@ (adr r3, 8010150 <__ieee754_log+0x320>)
 800ffc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffcc:	f7f0 f95e 	bl	800028c <__adddf3>
 800ffd0:	4642      	mov	r2, r8
 800ffd2:	464b      	mov	r3, r9
 800ffd4:	f7f0 fb10 	bl	80005f8 <__aeabi_dmul>
 800ffd8:	a35f      	add	r3, pc, #380	@ (adr r3, 8010158 <__ieee754_log+0x328>)
 800ffda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffde:	f7f0 f955 	bl	800028c <__adddf3>
 800ffe2:	4642      	mov	r2, r8
 800ffe4:	464b      	mov	r3, r9
 800ffe6:	f7f0 fb07 	bl	80005f8 <__aeabi_dmul>
 800ffea:	a35d      	add	r3, pc, #372	@ (adr r3, 8010160 <__ieee754_log+0x330>)
 800ffec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fff0:	f7f0 f94c 	bl	800028c <__adddf3>
 800fff4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fff8:	f7f0 fafe 	bl	80005f8 <__aeabi_dmul>
 800fffc:	a35a      	add	r3, pc, #360	@ (adr r3, 8010168 <__ieee754_log+0x338>)
 800fffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010002:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010006:	4640      	mov	r0, r8
 8010008:	4649      	mov	r1, r9
 801000a:	f7f0 faf5 	bl	80005f8 <__aeabi_dmul>
 801000e:	a358      	add	r3, pc, #352	@ (adr r3, 8010170 <__ieee754_log+0x340>)
 8010010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010014:	f7f0 f93a 	bl	800028c <__adddf3>
 8010018:	4642      	mov	r2, r8
 801001a:	464b      	mov	r3, r9
 801001c:	f7f0 faec 	bl	80005f8 <__aeabi_dmul>
 8010020:	a355      	add	r3, pc, #340	@ (adr r3, 8010178 <__ieee754_log+0x348>)
 8010022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010026:	f7f0 f931 	bl	800028c <__adddf3>
 801002a:	4642      	mov	r2, r8
 801002c:	464b      	mov	r3, r9
 801002e:	f7f0 fae3 	bl	80005f8 <__aeabi_dmul>
 8010032:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 8010036:	4602      	mov	r2, r0
 8010038:	460b      	mov	r3, r1
 801003a:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 801003e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010042:	f7f0 f923 	bl	800028c <__adddf3>
 8010046:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 801004a:	3551      	adds	r5, #81	@ 0x51
 801004c:	4335      	orrs	r5, r6
 801004e:	2d00      	cmp	r5, #0
 8010050:	4680      	mov	r8, r0
 8010052:	4689      	mov	r9, r1
 8010054:	dd48      	ble.n	80100e8 <__ieee754_log+0x2b8>
 8010056:	4b50      	ldr	r3, [pc, #320]	@ (8010198 <__ieee754_log+0x368>)
 8010058:	2200      	movs	r2, #0
 801005a:	4650      	mov	r0, sl
 801005c:	4659      	mov	r1, fp
 801005e:	f7f0 facb 	bl	80005f8 <__aeabi_dmul>
 8010062:	4652      	mov	r2, sl
 8010064:	465b      	mov	r3, fp
 8010066:	f7f0 fac7 	bl	80005f8 <__aeabi_dmul>
 801006a:	4602      	mov	r2, r0
 801006c:	460b      	mov	r3, r1
 801006e:	4606      	mov	r6, r0
 8010070:	460f      	mov	r7, r1
 8010072:	4640      	mov	r0, r8
 8010074:	4649      	mov	r1, r9
 8010076:	f7f0 f909 	bl	800028c <__adddf3>
 801007a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801007e:	f7f0 fabb 	bl	80005f8 <__aeabi_dmul>
 8010082:	4680      	mov	r8, r0
 8010084:	4689      	mov	r9, r1
 8010086:	b964      	cbnz	r4, 80100a2 <__ieee754_log+0x272>
 8010088:	4602      	mov	r2, r0
 801008a:	460b      	mov	r3, r1
 801008c:	4630      	mov	r0, r6
 801008e:	4639      	mov	r1, r7
 8010090:	f7f0 f8fa 	bl	8000288 <__aeabi_dsub>
 8010094:	4602      	mov	r2, r0
 8010096:	460b      	mov	r3, r1
 8010098:	4650      	mov	r0, sl
 801009a:	4659      	mov	r1, fp
 801009c:	f7f0 f8f4 	bl	8000288 <__aeabi_dsub>
 80100a0:	e6da      	b.n	800fe58 <__ieee754_log+0x28>
 80100a2:	a323      	add	r3, pc, #140	@ (adr r3, 8010130 <__ieee754_log+0x300>)
 80100a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80100ac:	f7f0 faa4 	bl	80005f8 <__aeabi_dmul>
 80100b0:	a321      	add	r3, pc, #132	@ (adr r3, 8010138 <__ieee754_log+0x308>)
 80100b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100b6:	4604      	mov	r4, r0
 80100b8:	460d      	mov	r5, r1
 80100ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80100be:	f7f0 fa9b 	bl	80005f8 <__aeabi_dmul>
 80100c2:	4642      	mov	r2, r8
 80100c4:	464b      	mov	r3, r9
 80100c6:	f7f0 f8e1 	bl	800028c <__adddf3>
 80100ca:	4602      	mov	r2, r0
 80100cc:	460b      	mov	r3, r1
 80100ce:	4630      	mov	r0, r6
 80100d0:	4639      	mov	r1, r7
 80100d2:	f7f0 f8d9 	bl	8000288 <__aeabi_dsub>
 80100d6:	4652      	mov	r2, sl
 80100d8:	465b      	mov	r3, fp
 80100da:	f7f0 f8d5 	bl	8000288 <__aeabi_dsub>
 80100de:	4602      	mov	r2, r0
 80100e0:	460b      	mov	r3, r1
 80100e2:	4620      	mov	r0, r4
 80100e4:	4629      	mov	r1, r5
 80100e6:	e7d9      	b.n	801009c <__ieee754_log+0x26c>
 80100e8:	4602      	mov	r2, r0
 80100ea:	460b      	mov	r3, r1
 80100ec:	4650      	mov	r0, sl
 80100ee:	4659      	mov	r1, fp
 80100f0:	f7f0 f8ca 	bl	8000288 <__aeabi_dsub>
 80100f4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80100f8:	f7f0 fa7e 	bl	80005f8 <__aeabi_dmul>
 80100fc:	4606      	mov	r6, r0
 80100fe:	460f      	mov	r7, r1
 8010100:	2c00      	cmp	r4, #0
 8010102:	f43f af25 	beq.w	800ff50 <__ieee754_log+0x120>
 8010106:	a30a      	add	r3, pc, #40	@ (adr r3, 8010130 <__ieee754_log+0x300>)
 8010108:	e9d3 2300 	ldrd	r2, r3, [r3]
 801010c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010110:	f7f0 fa72 	bl	80005f8 <__aeabi_dmul>
 8010114:	a308      	add	r3, pc, #32	@ (adr r3, 8010138 <__ieee754_log+0x308>)
 8010116:	e9d3 2300 	ldrd	r2, r3, [r3]
 801011a:	4604      	mov	r4, r0
 801011c:	460d      	mov	r5, r1
 801011e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010122:	e729      	b.n	800ff78 <__ieee754_log+0x148>
 8010124:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 8010180 <__ieee754_log+0x350>
 8010128:	e698      	b.n	800fe5c <__ieee754_log+0x2c>
 801012a:	bf00      	nop
 801012c:	f3af 8000 	nop.w
 8010130:	fee00000 	.word	0xfee00000
 8010134:	3fe62e42 	.word	0x3fe62e42
 8010138:	35793c76 	.word	0x35793c76
 801013c:	3dea39ef 	.word	0x3dea39ef
 8010140:	55555555 	.word	0x55555555
 8010144:	3fd55555 	.word	0x3fd55555
 8010148:	df3e5244 	.word	0xdf3e5244
 801014c:	3fc2f112 	.word	0x3fc2f112
 8010150:	96cb03de 	.word	0x96cb03de
 8010154:	3fc74664 	.word	0x3fc74664
 8010158:	94229359 	.word	0x94229359
 801015c:	3fd24924 	.word	0x3fd24924
 8010160:	55555593 	.word	0x55555593
 8010164:	3fe55555 	.word	0x3fe55555
 8010168:	d078c69f 	.word	0xd078c69f
 801016c:	3fc39a09 	.word	0x3fc39a09
 8010170:	1d8e78af 	.word	0x1d8e78af
 8010174:	3fcc71c5 	.word	0x3fcc71c5
 8010178:	9997fa04 	.word	0x9997fa04
 801017c:	3fd99999 	.word	0x3fd99999
	...
 8010188:	c3500000 	.word	0xc3500000
 801018c:	43500000 	.word	0x43500000
 8010190:	7fefffff 	.word	0x7fefffff
 8010194:	3ff00000 	.word	0x3ff00000
 8010198:	3fe00000 	.word	0x3fe00000

0801019c <_init>:
 801019c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801019e:	bf00      	nop
 80101a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80101a2:	bc08      	pop	{r3}
 80101a4:	469e      	mov	lr, r3
 80101a6:	4770      	bx	lr

080101a8 <_fini>:
 80101a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101aa:	bf00      	nop
 80101ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80101ae:	bc08      	pop	{r3}
 80101b0:	469e      	mov	lr, r3
 80101b2:	4770      	bx	lr
