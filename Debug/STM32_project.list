
STM32_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010274  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d8  08010408  08010408  00011408  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080107e0  080107e0  000122d8  2**0
                  CONTENTS
  4 .ARM          00000008  080107e0  080107e0  000117e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080107e8  080107e8  000122d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080107e8  080107e8  000117e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080107ec  080107ec  000117ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002d8  20000000  080107f0  00012000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000122d8  2**0
                  CONTENTS
 10 .bss          00002210  200002d8  200002d8  000122d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200024e8  200024e8  000122d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000122d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ef98  00000000  00000000  00012308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004c19  00000000  00000000  000312a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b90  00000000  00000000  00035ec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000155e  00000000  00000000  00037a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028628  00000000  00000000  00038fae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025f53  00000000  00000000  000615d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e3905  00000000  00000000  00087529  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0016ae2e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000085d0  00000000  00000000  0016ae74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004d  00000000  00000000  00173444  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002d8 	.word	0x200002d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080103ec 	.word	0x080103ec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002dc 	.word	0x200002dc
 80001cc:	080103ec 	.word	0x080103ec

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96a 	b.w	8000f74 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d14e      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	458c      	cmp	ip, r1
 8000cc8:	4686      	mov	lr, r0
 8000cca:	fab2 f282 	clz	r2, r2
 8000cce:	d962      	bls.n	8000d96 <__udivmoddi4+0xde>
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0320 	rsb	r3, r2, #32
 8000cd6:	4091      	lsls	r1, r2
 8000cd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	4319      	orrs	r1, r3
 8000ce2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f f68c 	uxth.w	r6, ip
 8000cee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb04 f106 	mul.w	r1, r4, r6
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d0e:	f080 8112 	bcs.w	8000f36 <__udivmoddi4+0x27e>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 810f 	bls.w	8000f36 <__udivmoddi4+0x27e>
 8000d18:	3c02      	subs	r4, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d26:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f606 	mul.w	r6, r0, r6
 8000d32:	429e      	cmp	r6, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x94>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d3e:	f080 80fc 	bcs.w	8000f3a <__udivmoddi4+0x282>
 8000d42:	429e      	cmp	r6, r3
 8000d44:	f240 80f9 	bls.w	8000f3a <__udivmoddi4+0x282>
 8000d48:	4463      	add	r3, ip
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d52:	2100      	movs	r1, #0
 8000d54:	b11d      	cbz	r5, 8000d5e <__udivmoddi4+0xa6>
 8000d56:	40d3      	lsrs	r3, r2
 8000d58:	2200      	movs	r2, #0
 8000d5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d905      	bls.n	8000d72 <__udivmoddi4+0xba>
 8000d66:	b10d      	cbz	r5, 8000d6c <__udivmoddi4+0xb4>
 8000d68:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e7f5      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d72:	fab3 f183 	clz	r1, r3
 8000d76:	2900      	cmp	r1, #0
 8000d78:	d146      	bne.n	8000e08 <__udivmoddi4+0x150>
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	d302      	bcc.n	8000d84 <__udivmoddi4+0xcc>
 8000d7e:	4290      	cmp	r0, r2
 8000d80:	f0c0 80f0 	bcc.w	8000f64 <__udivmoddi4+0x2ac>
 8000d84:	1a86      	subs	r6, r0, r2
 8000d86:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	d0e6      	beq.n	8000d5e <__udivmoddi4+0xa6>
 8000d90:	e9c5 6300 	strd	r6, r3, [r5]
 8000d94:	e7e3      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	f040 8090 	bne.w	8000ebc <__udivmoddi4+0x204>
 8000d9c:	eba1 040c 	sub.w	r4, r1, ip
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	2101      	movs	r1, #1
 8000daa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb08 4416 	mls	r4, r8, r6, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb07 f006 	mul.w	r0, r7, r6
 8000dbe:	4298      	cmp	r0, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x11c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x11a>
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	f200 80cd 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000dd2:	4626      	mov	r6, r4
 8000dd4:	1a1c      	subs	r4, r3, r0
 8000dd6:	fa1f f38e 	uxth.w	r3, lr
 8000dda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dde:	fb08 4410 	mls	r4, r8, r0, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb00 f707 	mul.w	r7, r0, r7
 8000dea:	429f      	cmp	r7, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x148>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x146>
 8000df8:	429f      	cmp	r7, r3
 8000dfa:	f200 80b0 	bhi.w	8000f5e <__udivmoddi4+0x2a6>
 8000dfe:	4620      	mov	r0, r4
 8000e00:	1bdb      	subs	r3, r3, r7
 8000e02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e06:	e7a5      	b.n	8000d54 <__udivmoddi4+0x9c>
 8000e08:	f1c1 0620 	rsb	r6, r1, #32
 8000e0c:	408b      	lsls	r3, r1
 8000e0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e12:	431f      	orrs	r7, r3
 8000e14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e18:	fa04 f301 	lsl.w	r3, r4, r1
 8000e1c:	ea43 030c 	orr.w	r3, r3, ip
 8000e20:	40f4      	lsrs	r4, r6
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	0c38      	lsrs	r0, r7, #16
 8000e28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e30:	fa1f fc87 	uxth.w	ip, r7
 8000e34:	fb00 441e 	mls	r4, r0, lr, r4
 8000e38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e40:	45a1      	cmp	r9, r4
 8000e42:	fa02 f201 	lsl.w	r2, r2, r1
 8000e46:	d90a      	bls.n	8000e5e <__udivmoddi4+0x1a6>
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e4e:	f080 8084 	bcs.w	8000f5a <__udivmoddi4+0x2a2>
 8000e52:	45a1      	cmp	r9, r4
 8000e54:	f240 8081 	bls.w	8000f5a <__udivmoddi4+0x2a2>
 8000e58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	eba4 0409 	sub.w	r4, r4, r9
 8000e62:	fa1f f983 	uxth.w	r9, r3
 8000e66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x1d2>
 8000e7a:	193c      	adds	r4, r7, r4
 8000e7c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e80:	d267      	bcs.n	8000f52 <__udivmoddi4+0x29a>
 8000e82:	45a4      	cmp	ip, r4
 8000e84:	d965      	bls.n	8000f52 <__udivmoddi4+0x29a>
 8000e86:	3b02      	subs	r3, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e92:	eba4 040c 	sub.w	r4, r4, ip
 8000e96:	429c      	cmp	r4, r3
 8000e98:	46ce      	mov	lr, r9
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	d351      	bcc.n	8000f42 <__udivmoddi4+0x28a>
 8000e9e:	d04e      	beq.n	8000f3e <__udivmoddi4+0x286>
 8000ea0:	b155      	cbz	r5, 8000eb8 <__udivmoddi4+0x200>
 8000ea2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ea6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	40cb      	lsrs	r3, r1
 8000eb0:	431e      	orrs	r6, r3
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	e750      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000ebc:	f1c2 0320 	rsb	r3, r2, #32
 8000ec0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ecc:	4094      	lsls	r4, r2
 8000ece:	430c      	orrs	r4, r1
 8000ed0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ed8:	fa1f f78c 	uxth.w	r7, ip
 8000edc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee4:	0c23      	lsrs	r3, r4, #16
 8000ee6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eea:	fb00 f107 	mul.w	r1, r0, r7
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x24c>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000efa:	d22c      	bcs.n	8000f56 <__udivmoddi4+0x29e>
 8000efc:	4299      	cmp	r1, r3
 8000efe:	d92a      	bls.n	8000f56 <__udivmoddi4+0x29e>
 8000f00:	3802      	subs	r0, #2
 8000f02:	4463      	add	r3, ip
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f14:	fb01 f307 	mul.w	r3, r1, r7
 8000f18:	42a3      	cmp	r3, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x276>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f24:	d213      	bcs.n	8000f4e <__udivmoddi4+0x296>
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	d911      	bls.n	8000f4e <__udivmoddi4+0x296>
 8000f2a:	3902      	subs	r1, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	1ae4      	subs	r4, r4, r3
 8000f30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f34:	e739      	b.n	8000daa <__udivmoddi4+0xf2>
 8000f36:	4604      	mov	r4, r0
 8000f38:	e6f0      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e706      	b.n	8000d4c <__udivmoddi4+0x94>
 8000f3e:	45c8      	cmp	r8, r9
 8000f40:	d2ae      	bcs.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	e7a8      	b.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f4e:	4631      	mov	r1, r6
 8000f50:	e7ed      	b.n	8000f2e <__udivmoddi4+0x276>
 8000f52:	4603      	mov	r3, r0
 8000f54:	e799      	b.n	8000e8a <__udivmoddi4+0x1d2>
 8000f56:	4630      	mov	r0, r6
 8000f58:	e7d4      	b.n	8000f04 <__udivmoddi4+0x24c>
 8000f5a:	46d6      	mov	lr, sl
 8000f5c:	e77f      	b.n	8000e5e <__udivmoddi4+0x1a6>
 8000f5e:	4463      	add	r3, ip
 8000f60:	3802      	subs	r0, #2
 8000f62:	e74d      	b.n	8000e00 <__udivmoddi4+0x148>
 8000f64:	4606      	mov	r6, r0
 8000f66:	4623      	mov	r3, r4
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e70f      	b.n	8000d8c <__udivmoddi4+0xd4>
 8000f6c:	3e02      	subs	r6, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	e730      	b.n	8000dd4 <__udivmoddi4+0x11c>
 8000f72:	bf00      	nop

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <dcRemoval>:

#include "filter.h"


DC_FILTER_T dcRemoval(float x, float prev_w, float alpha)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b08b      	sub	sp, #44	@ 0x2c
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	ed87 0a05 	vstr	s0, [r7, #20]
 8000f82:	edc7 0a04 	vstr	s1, [r7, #16]
 8000f86:	ed87 1a03 	vstr	s2, [r7, #12]
  DC_FILTER_T filtered;
  filtered.w = x + alpha * prev_w;
 8000f8a:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f8e:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f96:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f9e:	edc7 7a06 	vstr	s15, [r7, #24]
  filtered.result = filtered.w - prev_w;
 8000fa2:	ed97 7a06 	vldr	s14, [r7, #24]
 8000fa6:	edd7 7a04 	vldr	s15, [r7, #16]
 8000faa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fae:	edc7 7a07 	vstr	s15, [r7, #28]

  return filtered;
 8000fb2:	f107 0320 	add.w	r3, r7, #32
 8000fb6:	f107 0218 	add.w	r2, r7, #24
 8000fba:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fbe:	e883 0003 	stmia.w	r3, {r0, r1}
 8000fc2:	6a3a      	ldr	r2, [r7, #32]
 8000fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fc6:	ee07 2a10 	vmov	s14, r2
 8000fca:	ee07 3a90 	vmov	s15, r3
}
 8000fce:	eeb0 0a47 	vmov.f32	s0, s14
 8000fd2:	eef0 0a67 	vmov.f32	s1, s15
 8000fd6:	372c      	adds	r7, #44	@ 0x2c
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr

08000fe0 <lowPassButterworthFilter>:

//Low pass butterworth filter order=1 alpha1=0.1
void lowPassButterworthFilter(float x, BUTTERWORTH_FILTER_T * filterResult)
{
 8000fe0:	b5b0      	push	{r4, r5, r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	ed87 0a01 	vstr	s0, [r7, #4]
 8000fea:	6038      	str	r0, [r7, #0]
	filterResult->v[0] = filterResult->v[1];
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685a      	ldr	r2, [r3, #4]
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	601a      	str	r2, [r3, #0]

    //Fs = 100Hz and Fc = 10Hz
    //filterResult->v[1] = (2.452372752527856026e-1 * x) + (0.50952544949442879485 * filterResult->v[0]);

    //Fs = 100Hz and Fc = 4Hz
    filterResult->v[1] = (1.367287359973195227e-1 * x) + (0.72654252800536101020 * filterResult->v[0]); //Very precise butterworth filter
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	f7ff faa7 	bl	8000548 <__aeabi_f2d>
 8000ffa:	a319      	add	r3, pc, #100	@ (adr r3, 8001060 <lowPassButterworthFilter+0x80>)
 8000ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001000:	f7ff fafa 	bl	80005f8 <__aeabi_dmul>
 8001004:	4602      	mov	r2, r0
 8001006:	460b      	mov	r3, r1
 8001008:	4614      	mov	r4, r2
 800100a:	461d      	mov	r5, r3
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff fa99 	bl	8000548 <__aeabi_f2d>
 8001016:	a314      	add	r3, pc, #80	@ (adr r3, 8001068 <lowPassButterworthFilter+0x88>)
 8001018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800101c:	f7ff faec 	bl	80005f8 <__aeabi_dmul>
 8001020:	4602      	mov	r2, r0
 8001022:	460b      	mov	r3, r1
 8001024:	4620      	mov	r0, r4
 8001026:	4629      	mov	r1, r5
 8001028:	f7ff f930 	bl	800028c <__adddf3>
 800102c:	4602      	mov	r2, r0
 800102e:	460b      	mov	r3, r1
 8001030:	4610      	mov	r0, r2
 8001032:	4619      	mov	r1, r3
 8001034:	f7ff fdd8 	bl	8000be8 <__aeabi_d2f>
 8001038:	4602      	mov	r2, r0
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	605a      	str	r2, [r3, #4]

    filterResult->result = filterResult->v[0] + filterResult->v[1];
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	ed93 7a00 	vldr	s14, [r3]
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	edd3 7a01 	vldr	s15, [r3, #4]
 800104a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8001054:	bf00      	nop
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bdb0      	pop	{r4, r5, r7, pc}
 800105c:	f3af 8000 	nop.w
 8001060:	c4c41579 	.word	0xc4c41579
 8001064:	3fc18053 	.word	0x3fc18053
 8001068:	1d9df544 	.word	0x1d9df544
 800106c:	3fe73fd6 	.word	0x3fe73fd6

08001070 <meanDiff>:

float meanDiff(float M, MEAN_DIFF_FILTER_T* filterValues)
{
 8001070:	b480      	push	{r7}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
 8001076:	ed87 0a01 	vstr	s0, [r7, #4]
 800107a:	6038      	str	r0, [r7, #0]
  float avg = 0;
 800107c:	f04f 0300 	mov.w	r3, #0
 8001080:	60fb      	str	r3, [r7, #12]

  filterValues->sum -= filterValues->values[filterValues->index];
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800108e:	683a      	ldr	r2, [r7, #0]
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	4413      	add	r3, r2
 8001094:	edd3 7a00 	vldr	s15, [r3]
 8001098:	ee77 7a67 	vsub.f32	s15, s14, s15
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
  filterValues->values[filterValues->index] = M;
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80010a8:	683a      	ldr	r2, [r7, #0]
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	4413      	add	r3, r2
 80010ae:	687a      	ldr	r2, [r7, #4]
 80010b0:	601a      	str	r2, [r3, #0]
  filterValues->sum += filterValues->values[filterValues->index];
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80010be:	683a      	ldr	r2, [r7, #0]
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	4413      	add	r3, r2
 80010c4:	edd3 7a00 	vldr	s15, [r3]
 80010c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40

  filterValues->index++;
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80010d8:	3301      	adds	r3, #1
 80010da:	b2da      	uxtb	r2, r3
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  filterValues->index = filterValues->index % MEAN_FILTER_SIZE;
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	f893 203c 	ldrb.w	r2, [r3, #60]	@ 0x3c
 80010e8:	4b19      	ldr	r3, [pc, #100]	@ (8001150 <meanDiff+0xe0>)
 80010ea:	fba3 1302 	umull	r1, r3, r3, r2
 80010ee:	08d9      	lsrs	r1, r3, #3
 80010f0:	460b      	mov	r3, r1
 80010f2:	011b      	lsls	r3, r3, #4
 80010f4:	1a5b      	subs	r3, r3, r1
 80010f6:	1ad3      	subs	r3, r2, r3
 80010f8:	b2da      	uxtb	r2, r3
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(filterValues->count < MEAN_FILTER_SIZE)
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001106:	2b0e      	cmp	r3, #14
 8001108:	d807      	bhi.n	800111a <meanDiff+0xaa>
    filterValues->count++;
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001110:	3301      	adds	r3, #1
 8001112:	b2da      	uxtb	r2, r3
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  avg = filterValues->sum / filterValues->count;
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	edd3 6a10 	vldr	s13, [r3, #64]	@ 0x40
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001126:	ee07 3a90 	vmov	s15, r3
 800112a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800112e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001132:	edc7 7a03 	vstr	s15, [r7, #12]
  return avg - M;
 8001136:	ed97 7a03 	vldr	s14, [r7, #12]
 800113a:	edd7 7a01 	vldr	s15, [r7, #4]
 800113e:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8001142:	eeb0 0a67 	vmov.f32	s0, s15
 8001146:	3714      	adds	r7, #20
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr
 8001150:	88888889 	.word	0x88888889

08001154 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800115a:	f001 fd0b 	bl	8002b74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800115e:	f000 f8c9 	bl	80012f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001162:	f000 fb1b 	bl	800179c <MX_GPIO_Init>
  MX_DMA_Init();
 8001166:	f000 fadb 	bl	8001720 <MX_DMA_Init>
  MX_I2C1_Init();
 800116a:	f000 f9e1 	bl	8001530 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 800116e:	f00b fb35 	bl	800c7dc <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8001172:	f000 f929 	bl	80013c8 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001176:	f000 fa37 	bl	80015e8 <MX_TIM2_Init>
  MX_ADC2_Init();
 800117a:	f000 f98f 	bl	800149c <MX_ADC2_Init>
  MX_UART5_Init();
 800117e:	f000 faa5 	bl	80016cc <MX_UART5_Init>
  MX_I2S2_Init();
 8001182:	f000 fa03 	bl	800158c <MX_I2S2_Init>
  /* USER CODE BEGIN 2 */

    MAX30102_Init(); // configure the heart rate sensor
 8001186:	f000 fd45 	bl	8001c14 <MAX30102_Init>
    // enable DMA for microphone to record data
	//HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, 2 * MIC_OVERSAMPLING); // cast to 32 because STM moment
	//HAL_I2S_Transmit_DMA(&hi2s2, (uint16_t*)audio_tx_buffer, 2);
    // Ensure an integer number of periods fits into the buffer

    HAL_TIM_Base_Start(&htim2); // enable microphone sample timer
 800118a:	4847      	ldr	r0, [pc, #284]	@ (80012a8 <main+0x154>)
 800118c:	f006 fe82 	bl	8007e94 <HAL_TIM_Base_Start>

    HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc2_buffer, MIC_OVERSAMPLING); // cast to 32 because STM moment
 8001190:	2208      	movs	r2, #8
 8001192:	4946      	ldr	r1, [pc, #280]	@ (80012ac <main+0x158>)
 8001194:	4846      	ldr	r0, [pc, #280]	@ (80012b0 <main+0x15c>)
 8001196:	f001 fdc7 	bl	8002d28 <HAL_ADC_Start_DMA>
    HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc1_buffer, MIC_OVERSAMPLING); // cast to 32 because STM moment
 800119a:	2208      	movs	r2, #8
 800119c:	4945      	ldr	r1, [pc, #276]	@ (80012b4 <main+0x160>)
 800119e:	4846      	ldr	r0, [pc, #280]	@ (80012b8 <main+0x164>)
 80011a0:	f001 fdc2 	bl	8002d28 <HAL_ADC_Start_DMA>

	HAL_I2S_Transmit_DMA(&hi2s2, (uint16_t*)audio_tx_buffer, 2);
 80011a4:	2202      	movs	r2, #2
 80011a6:	4945      	ldr	r1, [pc, #276]	@ (80012bc <main+0x168>)
 80011a8:	4845      	ldr	r0, [pc, #276]	@ (80012c0 <main+0x16c>)
 80011aa:	f004 f995 	bl	80054d8 <HAL_I2S_Transmit_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	currentMillis = millis();
 80011ae:	f001 fc9d 	bl	8002aec <millis>
 80011b2:	4603      	mov	r3, r0
 80011b4:	461a      	mov	r2, r3
 80011b6:	4b43      	ldr	r3, [pc, #268]	@ (80012c4 <main+0x170>)
 80011b8:	601a      	str	r2, [r3, #0]

	while (1)
	{
		if( pulseOximiterIntFlag )
 80011ba:	4b43      	ldr	r3, [pc, #268]	@ (80012c8 <main+0x174>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d009      	beq.n	80011d8 <main+0x84>
		{
			if (MAX30102_DumpFifo() == HAL_OK) {
 80011c4:	f000 fd9e 	bl	8001d04 <MAX30102_DumpFifo>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d104      	bne.n	80011d8 <main+0x84>

				pulseOximiterIntFlag = 0;
 80011ce:	4b3e      	ldr	r3, [pc, #248]	@ (80012c8 <main+0x174>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	701a      	strb	r2, [r3, #0]

				MAX30102_ProcessData();
 80011d4:	f000 fda8 	bl	8001d28 <MAX30102_ProcessData>
			}
		}

		// Display the data over the built in USB every 5 seconds
		currentMillis = millis();
 80011d8:	f001 fc88 	bl	8002aec <millis>
 80011dc:	4603      	mov	r3, r0
 80011de:	461a      	mov	r2, r3
 80011e0:	4b38      	ldr	r3, [pc, #224]	@ (80012c4 <main+0x170>)
 80011e2:	601a      	str	r2, [r3, #0]
		if( currentMillis - lastMillis > SEND_PULSEOX_PERIOD_MS )
 80011e4:	4b37      	ldr	r3, [pc, #220]	@ (80012c4 <main+0x170>)
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	4b38      	ldr	r3, [pc, #224]	@ (80012cc <main+0x178>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80011f2:	dde2      	ble.n	80011ba <main+0x66>
		{
			float bpm = MAX30102_getBPM();
 80011f4:	f001 f8ae 	bl	8002354 <MAX30102_getBPM>
 80011f8:	ed87 0a03 	vstr	s0, [r7, #12]
			float spo2 = MAX30102_getSPO2();
 80011fc:	f001 f8b8 	bl	8002370 <MAX30102_getSPO2>
 8001200:	ed87 0a02 	vstr	s0, [r7, #8]

			// Convert BPM to 8-bit integer
			if (bpm > 255.0f) bpm = 255.0f;
 8001204:	edd7 7a03 	vldr	s15, [r7, #12]
 8001208:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80012d0 <main+0x17c>
 800120c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001214:	dd01      	ble.n	800121a <main+0xc6>
 8001216:	4b2f      	ldr	r3, [pc, #188]	@ (80012d4 <main+0x180>)
 8001218:	60fb      	str	r3, [r7, #12]
			txBuffer[0] = (uint8_t)bpm;
 800121a:	edd7 7a03 	vldr	s15, [r7, #12]
 800121e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001222:	edc7 7a01 	vstr	s15, [r7, #4]
 8001226:	793b      	ldrb	r3, [r7, #4]
 8001228:	b2da      	uxtb	r2, r3
 800122a:	4b2b      	ldr	r3, [pc, #172]	@ (80012d8 <main+0x184>)
 800122c:	701a      	strb	r2, [r3, #0]

			// Convert SpO2 to 8-bit integer with range mapping (90%-100%)
			if (spo2 < 90.0f) spo2 = 90.0f;
 800122e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001232:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 80012dc <main+0x188>
 8001236:	eef4 7ac7 	vcmpe.f32	s15, s14
 800123a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800123e:	d501      	bpl.n	8001244 <main+0xf0>
 8001240:	4b27      	ldr	r3, [pc, #156]	@ (80012e0 <main+0x18c>)
 8001242:	60bb      	str	r3, [r7, #8]
			if (spo2 > 100.0f) spo2 = 100.0f;
 8001244:	edd7 7a02 	vldr	s15, [r7, #8]
 8001248:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80012e4 <main+0x190>
 800124c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001254:	dd01      	ble.n	800125a <main+0x106>
 8001256:	4b24      	ldr	r3, [pc, #144]	@ (80012e8 <main+0x194>)
 8001258:	60bb      	str	r3, [r7, #8]
			txBuffer[1] = (uint8_t)((spo2 - 90.0f) * 255.0f / 10.0f);
 800125a:	edd7 7a02 	vldr	s15, [r7, #8]
 800125e:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 80012dc <main+0x188>
 8001262:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001266:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 80012d0 <main+0x17c>
 800126a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800126e:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8001272:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001276:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800127a:	edc7 7a01 	vstr	s15, [r7, #4]
 800127e:	793b      	ldrb	r3, [r7, #4]
 8001280:	b2da      	uxtb	r2, r3
 8001282:	4b15      	ldr	r3, [pc, #84]	@ (80012d8 <main+0x184>)
 8001284:	705a      	strb	r2, [r3, #1]

			// Transmit the data over UART
			HAL_UART_Transmit(&huart5, txBuffer, 2, HAL_MAX_DELAY);
 8001286:	f04f 33ff 	mov.w	r3, #4294967295
 800128a:	2202      	movs	r2, #2
 800128c:	4912      	ldr	r1, [pc, #72]	@ (80012d8 <main+0x184>)
 800128e:	4817      	ldr	r0, [pc, #92]	@ (80012ec <main+0x198>)
 8001290:	f007 fc0e 	bl	8008ab0 <HAL_UART_Transmit>

			HAL_GPIO_TogglePin(GPIOD, LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin);
 8001294:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8001298:	4815      	ldr	r0, [pc, #84]	@ (80012f0 <main+0x19c>)
 800129a:	f002 ff86 	bl	80041aa <HAL_GPIO_TogglePin>
			lastMillis = currentMillis;
 800129e:	4b09      	ldr	r3, [pc, #36]	@ (80012c4 <main+0x170>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a0a      	ldr	r2, [pc, #40]	@ (80012cc <main+0x178>)
 80012a4:	6013      	str	r3, [r2, #0]
		if( pulseOximiterIntFlag )
 80012a6:	e788      	b.n	80011ba <main+0x66>
 80012a8:	20000540 	.word	0x20000540
 80012ac:	200005ec 	.word	0x200005ec
 80012b0:	2000033c 	.word	0x2000033c
 80012b4:	200005dc 	.word	0x200005dc
 80012b8:	200002f4 	.word	0x200002f4
 80012bc:	200005fc 	.word	0x200005fc
 80012c0:	20000498 	.word	0x20000498
 80012c4:	200005d0 	.word	0x200005d0
 80012c8:	200005d8 	.word	0x200005d8
 80012cc:	200005d4 	.word	0x200005d4
 80012d0:	437f0000 	.word	0x437f0000
 80012d4:	437f0000 	.word	0x437f0000
 80012d8:	20000600 	.word	0x20000600
 80012dc:	42b40000 	.word	0x42b40000
 80012e0:	42b40000 	.word	0x42b40000
 80012e4:	42c80000 	.word	0x42c80000
 80012e8:	42c80000 	.word	0x42c80000
 80012ec:	20000588 	.word	0x20000588
 80012f0:	40020c00 	.word	0x40020c00

080012f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b094      	sub	sp, #80	@ 0x50
 80012f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012fa:	f107 0320 	add.w	r3, r7, #32
 80012fe:	2230      	movs	r2, #48	@ 0x30
 8001300:	2100      	movs	r1, #0
 8001302:	4618      	mov	r0, r3
 8001304:	f00c fe49 	bl	800df9a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001308:	f107 030c 	add.w	r3, r7, #12
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	605a      	str	r2, [r3, #4]
 8001312:	609a      	str	r2, [r3, #8]
 8001314:	60da      	str	r2, [r3, #12]
 8001316:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001318:	2300      	movs	r3, #0
 800131a:	60bb      	str	r3, [r7, #8]
 800131c:	4b28      	ldr	r3, [pc, #160]	@ (80013c0 <SystemClock_Config+0xcc>)
 800131e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001320:	4a27      	ldr	r2, [pc, #156]	@ (80013c0 <SystemClock_Config+0xcc>)
 8001322:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001326:	6413      	str	r3, [r2, #64]	@ 0x40
 8001328:	4b25      	ldr	r3, [pc, #148]	@ (80013c0 <SystemClock_Config+0xcc>)
 800132a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800132c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001330:	60bb      	str	r3, [r7, #8]
 8001332:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001334:	2300      	movs	r3, #0
 8001336:	607b      	str	r3, [r7, #4]
 8001338:	4b22      	ldr	r3, [pc, #136]	@ (80013c4 <SystemClock_Config+0xd0>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a21      	ldr	r2, [pc, #132]	@ (80013c4 <SystemClock_Config+0xd0>)
 800133e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001342:	6013      	str	r3, [r2, #0]
 8001344:	4b1f      	ldr	r3, [pc, #124]	@ (80013c4 <SystemClock_Config+0xd0>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800134c:	607b      	str	r3, [r7, #4]
 800134e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001350:	2301      	movs	r3, #1
 8001352:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001354:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001358:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800135a:	2302      	movs	r3, #2
 800135c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800135e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001362:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001364:	2308      	movs	r3, #8
 8001366:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001368:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800136c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800136e:	2302      	movs	r3, #2
 8001370:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001372:	2307      	movs	r3, #7
 8001374:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001376:	f107 0320 	add.w	r3, r7, #32
 800137a:	4618      	mov	r0, r3
 800137c:	f005 ff60 	bl	8007240 <HAL_RCC_OscConfig>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001386:	f000 fbef 	bl	8001b68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800138a:	230f      	movs	r3, #15
 800138c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800138e:	2302      	movs	r3, #2
 8001390:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001392:	2300      	movs	r3, #0
 8001394:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001396:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800139a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800139c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013a0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80013a2:	f107 030c 	add.w	r3, r7, #12
 80013a6:	2105      	movs	r1, #5
 80013a8:	4618      	mov	r0, r3
 80013aa:	f006 f9c1 	bl	8007730 <HAL_RCC_ClockConfig>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80013b4:	f000 fbd8 	bl	8001b68 <Error_Handler>
  }
}
 80013b8:	bf00      	nop
 80013ba:	3750      	adds	r7, #80	@ 0x50
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	40023800 	.word	0x40023800
 80013c4:	40007000 	.word	0x40007000

080013c8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b088      	sub	sp, #32
 80013cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80013ce:	f107 0314 	add.w	r3, r7, #20
 80013d2:	2200      	movs	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]
 80013d6:	605a      	str	r2, [r3, #4]
 80013d8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80013da:	1d3b      	adds	r3, r7, #4
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80013e6:	4b2b      	ldr	r3, [pc, #172]	@ (8001494 <MX_ADC1_Init+0xcc>)
 80013e8:	4a2b      	ldr	r2, [pc, #172]	@ (8001498 <MX_ADC1_Init+0xd0>)
 80013ea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80013ec:	4b29      	ldr	r3, [pc, #164]	@ (8001494 <MX_ADC1_Init+0xcc>)
 80013ee:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80013f2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80013f4:	4b27      	ldr	r3, [pc, #156]	@ (8001494 <MX_ADC1_Init+0xcc>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80013fa:	4b26      	ldr	r3, [pc, #152]	@ (8001494 <MX_ADC1_Init+0xcc>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001400:	4b24      	ldr	r3, [pc, #144]	@ (8001494 <MX_ADC1_Init+0xcc>)
 8001402:	2200      	movs	r2, #0
 8001404:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001406:	4b23      	ldr	r3, [pc, #140]	@ (8001494 <MX_ADC1_Init+0xcc>)
 8001408:	2200      	movs	r2, #0
 800140a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800140e:	4b21      	ldr	r3, [pc, #132]	@ (8001494 <MX_ADC1_Init+0xcc>)
 8001410:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001414:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8001416:	4b1f      	ldr	r3, [pc, #124]	@ (8001494 <MX_ADC1_Init+0xcc>)
 8001418:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 800141c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800141e:	4b1d      	ldr	r3, [pc, #116]	@ (8001494 <MX_ADC1_Init+0xcc>)
 8001420:	2200      	movs	r2, #0
 8001422:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001424:	4b1b      	ldr	r3, [pc, #108]	@ (8001494 <MX_ADC1_Init+0xcc>)
 8001426:	2201      	movs	r2, #1
 8001428:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800142a:	4b1a      	ldr	r3, [pc, #104]	@ (8001494 <MX_ADC1_Init+0xcc>)
 800142c:	2201      	movs	r2, #1
 800142e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001432:	4b18      	ldr	r3, [pc, #96]	@ (8001494 <MX_ADC1_Init+0xcc>)
 8001434:	2201      	movs	r2, #1
 8001436:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001438:	4816      	ldr	r0, [pc, #88]	@ (8001494 <MX_ADC1_Init+0xcc>)
 800143a:	f001 fc31 	bl	8002ca0 <HAL_ADC_Init>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 8001444:	f000 fb90 	bl	8001b68 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_REGSIMULT;
 8001448:	2306      	movs	r3, #6
 800144a:	617b      	str	r3, [r7, #20]
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_2;
 800144c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001450:	61bb      	str	r3, [r7, #24]
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_5CYCLES;
 8001452:	2300      	movs	r3, #0
 8001454:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001456:	f107 0314 	add.w	r3, r7, #20
 800145a:	4619      	mov	r1, r3
 800145c:	480d      	ldr	r0, [pc, #52]	@ (8001494 <MX_ADC1_Init+0xcc>)
 800145e:	f002 f827 	bl	80034b0 <HAL_ADCEx_MultiModeConfigChannel>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <MX_ADC1_Init+0xa4>
  {
    Error_Handler();
 8001468:	f000 fb7e 	bl	8001b68 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800146c:	2300      	movs	r3, #0
 800146e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = 1;
 8001470:	2301      	movs	r3, #1
 8001472:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8001474:	2302      	movs	r3, #2
 8001476:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001478:	1d3b      	adds	r3, r7, #4
 800147a:	4619      	mov	r1, r3
 800147c:	4805      	ldr	r0, [pc, #20]	@ (8001494 <MX_ADC1_Init+0xcc>)
 800147e:	f001 fd77 	bl	8002f70 <HAL_ADC_ConfigChannel>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8001488:	f000 fb6e 	bl	8001b68 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800148c:	bf00      	nop
 800148e:	3720      	adds	r7, #32
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	200002f4 	.word	0x200002f4
 8001498:	40012000 	.word	0x40012000

0800149c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014a2:	463b      	mov	r3, r7
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	605a      	str	r2, [r3, #4]
 80014aa:	609a      	str	r2, [r3, #8]
 80014ac:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80014ae:	4b1e      	ldr	r3, [pc, #120]	@ (8001528 <MX_ADC2_Init+0x8c>)
 80014b0:	4a1e      	ldr	r2, [pc, #120]	@ (800152c <MX_ADC2_Init+0x90>)
 80014b2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80014b4:	4b1c      	ldr	r3, [pc, #112]	@ (8001528 <MX_ADC2_Init+0x8c>)
 80014b6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80014ba:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80014bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001528 <MX_ADC2_Init+0x8c>)
 80014be:	2200      	movs	r2, #0
 80014c0:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80014c2:	4b19      	ldr	r3, [pc, #100]	@ (8001528 <MX_ADC2_Init+0x8c>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80014c8:	4b17      	ldr	r3, [pc, #92]	@ (8001528 <MX_ADC2_Init+0x8c>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80014ce:	4b16      	ldr	r3, [pc, #88]	@ (8001528 <MX_ADC2_Init+0x8c>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014d6:	4b14      	ldr	r3, [pc, #80]	@ (8001528 <MX_ADC2_Init+0x8c>)
 80014d8:	2200      	movs	r2, #0
 80014da:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80014dc:	4b12      	ldr	r3, [pc, #72]	@ (8001528 <MX_ADC2_Init+0x8c>)
 80014de:	2201      	movs	r2, #1
 80014e0:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80014e2:	4b11      	ldr	r3, [pc, #68]	@ (8001528 <MX_ADC2_Init+0x8c>)
 80014e4:	2201      	movs	r2, #1
 80014e6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001528 <MX_ADC2_Init+0x8c>)
 80014ec:	2201      	movs	r2, #1
 80014ee:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80014f0:	480d      	ldr	r0, [pc, #52]	@ (8001528 <MX_ADC2_Init+0x8c>)
 80014f2:	f001 fbd5 	bl	8002ca0 <HAL_ADC_Init>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_ADC2_Init+0x64>
  {
    Error_Handler();
 80014fc:	f000 fb34 	bl	8001b68 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001500:	2301      	movs	r3, #1
 8001502:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001504:	2301      	movs	r3, #1
 8001506:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8001508:	2302      	movs	r3, #2
 800150a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800150c:	463b      	mov	r3, r7
 800150e:	4619      	mov	r1, r3
 8001510:	4805      	ldr	r0, [pc, #20]	@ (8001528 <MX_ADC2_Init+0x8c>)
 8001512:	f001 fd2d 	bl	8002f70 <HAL_ADC_ConfigChannel>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 800151c:	f000 fb24 	bl	8001b68 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001520:	bf00      	nop
 8001522:	3710      	adds	r7, #16
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	2000033c 	.word	0x2000033c
 800152c:	40012100 	.word	0x40012100

08001530 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001534:	4b12      	ldr	r3, [pc, #72]	@ (8001580 <MX_I2C1_Init+0x50>)
 8001536:	4a13      	ldr	r2, [pc, #76]	@ (8001584 <MX_I2C1_Init+0x54>)
 8001538:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800153a:	4b11      	ldr	r3, [pc, #68]	@ (8001580 <MX_I2C1_Init+0x50>)
 800153c:	4a12      	ldr	r2, [pc, #72]	@ (8001588 <MX_I2C1_Init+0x58>)
 800153e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001540:	4b0f      	ldr	r3, [pc, #60]	@ (8001580 <MX_I2C1_Init+0x50>)
 8001542:	2200      	movs	r2, #0
 8001544:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001546:	4b0e      	ldr	r3, [pc, #56]	@ (8001580 <MX_I2C1_Init+0x50>)
 8001548:	2200      	movs	r2, #0
 800154a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800154c:	4b0c      	ldr	r3, [pc, #48]	@ (8001580 <MX_I2C1_Init+0x50>)
 800154e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001552:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001554:	4b0a      	ldr	r3, [pc, #40]	@ (8001580 <MX_I2C1_Init+0x50>)
 8001556:	2200      	movs	r2, #0
 8001558:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800155a:	4b09      	ldr	r3, [pc, #36]	@ (8001580 <MX_I2C1_Init+0x50>)
 800155c:	2200      	movs	r2, #0
 800155e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001560:	4b07      	ldr	r3, [pc, #28]	@ (8001580 <MX_I2C1_Init+0x50>)
 8001562:	2200      	movs	r2, #0
 8001564:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001566:	4b06      	ldr	r3, [pc, #24]	@ (8001580 <MX_I2C1_Init+0x50>)
 8001568:	2200      	movs	r2, #0
 800156a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800156c:	4804      	ldr	r0, [pc, #16]	@ (8001580 <MX_I2C1_Init+0x50>)
 800156e:	f002 fe4f 	bl	8004210 <HAL_I2C_Init>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001578:	f000 faf6 	bl	8001b68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800157c:	bf00      	nop
 800157e:	bd80      	pop	{r7, pc}
 8001580:	20000444 	.word	0x20000444
 8001584:	40005400 	.word	0x40005400
 8001588:	00061a80 	.word	0x00061a80

0800158c <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8001590:	4b13      	ldr	r3, [pc, #76]	@ (80015e0 <MX_I2S2_Init+0x54>)
 8001592:	4a14      	ldr	r2, [pc, #80]	@ (80015e4 <MX_I2S2_Init+0x58>)
 8001594:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8001596:	4b12      	ldr	r3, [pc, #72]	@ (80015e0 <MX_I2S2_Init+0x54>)
 8001598:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800159c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800159e:	4b10      	ldr	r3, [pc, #64]	@ (80015e0 <MX_I2S2_Init+0x54>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 80015a4:	4b0e      	ldr	r3, [pc, #56]	@ (80015e0 <MX_I2S2_Init+0x54>)
 80015a6:	2201      	movs	r2, #1
 80015a8:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80015aa:	4b0d      	ldr	r3, [pc, #52]	@ (80015e0 <MX_I2S2_Init+0x54>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 80015b0:	4b0b      	ldr	r3, [pc, #44]	@ (80015e0 <MX_I2S2_Init+0x54>)
 80015b2:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 80015b6:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80015b8:	4b09      	ldr	r3, [pc, #36]	@ (80015e0 <MX_I2S2_Init+0x54>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80015be:	4b08      	ldr	r3, [pc, #32]	@ (80015e0 <MX_I2S2_Init+0x54>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80015c4:	4b06      	ldr	r3, [pc, #24]	@ (80015e0 <MX_I2S2_Init+0x54>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80015ca:	4805      	ldr	r0, [pc, #20]	@ (80015e0 <MX_I2S2_Init+0x54>)
 80015cc:	f003 fe44 	bl	8005258 <HAL_I2S_Init>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 80015d6:	f000 fac7 	bl	8001b68 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80015da:	bf00      	nop
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	20000498 	.word	0x20000498
 80015e4:	40003800 	.word	0x40003800

080015e8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b08e      	sub	sp, #56	@ 0x38
 80015ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015ee:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	605a      	str	r2, [r3, #4]
 80015f8:	609a      	str	r2, [r3, #8]
 80015fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015fc:	f107 0320 	add.w	r3, r7, #32
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001606:	1d3b      	adds	r3, r7, #4
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	605a      	str	r2, [r3, #4]
 800160e:	609a      	str	r2, [r3, #8]
 8001610:	60da      	str	r2, [r3, #12]
 8001612:	611a      	str	r2, [r3, #16]
 8001614:	615a      	str	r2, [r3, #20]
 8001616:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001618:	4b2b      	ldr	r3, [pc, #172]	@ (80016c8 <MX_TIM2_Init+0xe0>)
 800161a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800161e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001620:	4b29      	ldr	r3, [pc, #164]	@ (80016c8 <MX_TIM2_Init+0xe0>)
 8001622:	2200      	movs	r2, #0
 8001624:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001626:	4b28      	ldr	r3, [pc, #160]	@ (80016c8 <MX_TIM2_Init+0xe0>)
 8001628:	2200      	movs	r2, #0
 800162a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 439;
 800162c:	4b26      	ldr	r3, [pc, #152]	@ (80016c8 <MX_TIM2_Init+0xe0>)
 800162e:	f240 12b7 	movw	r2, #439	@ 0x1b7
 8001632:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001634:	4b24      	ldr	r3, [pc, #144]	@ (80016c8 <MX_TIM2_Init+0xe0>)
 8001636:	2200      	movs	r2, #0
 8001638:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800163a:	4b23      	ldr	r3, [pc, #140]	@ (80016c8 <MX_TIM2_Init+0xe0>)
 800163c:	2200      	movs	r2, #0
 800163e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001640:	4821      	ldr	r0, [pc, #132]	@ (80016c8 <MX_TIM2_Init+0xe0>)
 8001642:	f006 fbd7 	bl	8007df4 <HAL_TIM_Base_Init>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800164c:	f000 fa8c 	bl	8001b68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001650:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001654:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001656:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800165a:	4619      	mov	r1, r3
 800165c:	481a      	ldr	r0, [pc, #104]	@ (80016c8 <MX_TIM2_Init+0xe0>)
 800165e:	f006 fd9d 	bl	800819c <HAL_TIM_ConfigClockSource>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001668:	f000 fa7e 	bl	8001b68 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800166c:	4816      	ldr	r0, [pc, #88]	@ (80016c8 <MX_TIM2_Init+0xe0>)
 800166e:	f006 fc79 	bl	8007f64 <HAL_TIM_PWM_Init>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001678:	f000 fa76 	bl	8001b68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800167c:	2320      	movs	r3, #32
 800167e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001680:	2300      	movs	r3, #0
 8001682:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001684:	f107 0320 	add.w	r3, r7, #32
 8001688:	4619      	mov	r1, r3
 800168a:	480f      	ldr	r0, [pc, #60]	@ (80016c8 <MX_TIM2_Init+0xe0>)
 800168c:	f007 f944 	bl	8008918 <HAL_TIMEx_MasterConfigSynchronization>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001696:	f000 fa67 	bl	8001b68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800169a:	2360      	movs	r3, #96	@ 0x60
 800169c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800169e:	2300      	movs	r3, #0
 80016a0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016a2:	2300      	movs	r3, #0
 80016a4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016a6:	2300      	movs	r3, #0
 80016a8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016aa:	1d3b      	adds	r3, r7, #4
 80016ac:	2200      	movs	r2, #0
 80016ae:	4619      	mov	r1, r3
 80016b0:	4805      	ldr	r0, [pc, #20]	@ (80016c8 <MX_TIM2_Init+0xe0>)
 80016b2:	f006 fcb1 	bl	8008018 <HAL_TIM_PWM_ConfigChannel>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80016bc:	f000 fa54 	bl	8001b68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80016c0:	bf00      	nop
 80016c2:	3738      	adds	r7, #56	@ 0x38
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	20000540 	.word	0x20000540

080016cc <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80016d0:	4b11      	ldr	r3, [pc, #68]	@ (8001718 <MX_UART5_Init+0x4c>)
 80016d2:	4a12      	ldr	r2, [pc, #72]	@ (800171c <MX_UART5_Init+0x50>)
 80016d4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80016d6:	4b10      	ldr	r3, [pc, #64]	@ (8001718 <MX_UART5_Init+0x4c>)
 80016d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016dc:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80016de:	4b0e      	ldr	r3, [pc, #56]	@ (8001718 <MX_UART5_Init+0x4c>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80016e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001718 <MX_UART5_Init+0x4c>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80016ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001718 <MX_UART5_Init+0x4c>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80016f0:	4b09      	ldr	r3, [pc, #36]	@ (8001718 <MX_UART5_Init+0x4c>)
 80016f2:	220c      	movs	r2, #12
 80016f4:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016f6:	4b08      	ldr	r3, [pc, #32]	@ (8001718 <MX_UART5_Init+0x4c>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80016fc:	4b06      	ldr	r3, [pc, #24]	@ (8001718 <MX_UART5_Init+0x4c>)
 80016fe:	2200      	movs	r2, #0
 8001700:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001702:	4805      	ldr	r0, [pc, #20]	@ (8001718 <MX_UART5_Init+0x4c>)
 8001704:	f007 f984 	bl	8008a10 <HAL_UART_Init>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800170e:	f000 fa2b 	bl	8001b68 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001712:	bf00      	nop
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	20000588 	.word	0x20000588
 800171c:	40005000 	.word	0x40005000

08001720 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001726:	2300      	movs	r3, #0
 8001728:	607b      	str	r3, [r7, #4]
 800172a:	4b1b      	ldr	r3, [pc, #108]	@ (8001798 <MX_DMA_Init+0x78>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800172e:	4a1a      	ldr	r2, [pc, #104]	@ (8001798 <MX_DMA_Init+0x78>)
 8001730:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001734:	6313      	str	r3, [r2, #48]	@ 0x30
 8001736:	4b18      	ldr	r3, [pc, #96]	@ (8001798 <MX_DMA_Init+0x78>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800173e:	607b      	str	r3, [r7, #4]
 8001740:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001742:	2300      	movs	r3, #0
 8001744:	603b      	str	r3, [r7, #0]
 8001746:	4b14      	ldr	r3, [pc, #80]	@ (8001798 <MX_DMA_Init+0x78>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800174a:	4a13      	ldr	r2, [pc, #76]	@ (8001798 <MX_DMA_Init+0x78>)
 800174c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001750:	6313      	str	r3, [r2, #48]	@ 0x30
 8001752:	4b11      	ldr	r3, [pc, #68]	@ (8001798 <MX_DMA_Init+0x78>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001756:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800175a:	603b      	str	r3, [r7, #0]
 800175c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800175e:	2200      	movs	r2, #0
 8001760:	2100      	movs	r1, #0
 8001762:	200f      	movs	r0, #15
 8001764:	f001 ffc5 	bl	80036f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001768:	200f      	movs	r0, #15
 800176a:	f001 ffde 	bl	800372a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800176e:	2200      	movs	r2, #0
 8001770:	2100      	movs	r1, #0
 8001772:	2038      	movs	r0, #56	@ 0x38
 8001774:	f001 ffbd 	bl	80036f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001778:	2038      	movs	r0, #56	@ 0x38
 800177a:	f001 ffd6 	bl	800372a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800177e:	2200      	movs	r2, #0
 8001780:	2100      	movs	r1, #0
 8001782:	203a      	movs	r0, #58	@ 0x3a
 8001784:	f001 ffb5 	bl	80036f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001788:	203a      	movs	r0, #58	@ 0x3a
 800178a:	f001 ffce 	bl	800372a <HAL_NVIC_EnableIRQ>

}
 800178e:	bf00      	nop
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	40023800 	.word	0x40023800

0800179c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b08c      	sub	sp, #48	@ 0x30
 80017a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a2:	f107 031c 	add.w	r3, r7, #28
 80017a6:	2200      	movs	r2, #0
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	605a      	str	r2, [r3, #4]
 80017ac:	609a      	str	r2, [r3, #8]
 80017ae:	60da      	str	r2, [r3, #12]
 80017b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80017b2:	2300      	movs	r3, #0
 80017b4:	61bb      	str	r3, [r7, #24]
 80017b6:	4b6f      	ldr	r3, [pc, #444]	@ (8001974 <MX_GPIO_Init+0x1d8>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ba:	4a6e      	ldr	r2, [pc, #440]	@ (8001974 <MX_GPIO_Init+0x1d8>)
 80017bc:	f043 0310 	orr.w	r3, r3, #16
 80017c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017c2:	4b6c      	ldr	r3, [pc, #432]	@ (8001974 <MX_GPIO_Init+0x1d8>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c6:	f003 0310 	and.w	r3, r3, #16
 80017ca:	61bb      	str	r3, [r7, #24]
 80017cc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	617b      	str	r3, [r7, #20]
 80017d2:	4b68      	ldr	r3, [pc, #416]	@ (8001974 <MX_GPIO_Init+0x1d8>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d6:	4a67      	ldr	r2, [pc, #412]	@ (8001974 <MX_GPIO_Init+0x1d8>)
 80017d8:	f043 0304 	orr.w	r3, r3, #4
 80017dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80017de:	4b65      	ldr	r3, [pc, #404]	@ (8001974 <MX_GPIO_Init+0x1d8>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e2:	f003 0304 	and.w	r3, r3, #4
 80017e6:	617b      	str	r3, [r7, #20]
 80017e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017ea:	2300      	movs	r3, #0
 80017ec:	613b      	str	r3, [r7, #16]
 80017ee:	4b61      	ldr	r3, [pc, #388]	@ (8001974 <MX_GPIO_Init+0x1d8>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f2:	4a60      	ldr	r2, [pc, #384]	@ (8001974 <MX_GPIO_Init+0x1d8>)
 80017f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017fa:	4b5e      	ldr	r3, [pc, #376]	@ (8001974 <MX_GPIO_Init+0x1d8>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001802:	613b      	str	r3, [r7, #16]
 8001804:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001806:	2300      	movs	r3, #0
 8001808:	60fb      	str	r3, [r7, #12]
 800180a:	4b5a      	ldr	r3, [pc, #360]	@ (8001974 <MX_GPIO_Init+0x1d8>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180e:	4a59      	ldr	r2, [pc, #356]	@ (8001974 <MX_GPIO_Init+0x1d8>)
 8001810:	f043 0301 	orr.w	r3, r3, #1
 8001814:	6313      	str	r3, [r2, #48]	@ 0x30
 8001816:	4b57      	ldr	r3, [pc, #348]	@ (8001974 <MX_GPIO_Init+0x1d8>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	60fb      	str	r3, [r7, #12]
 8001820:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001822:	2300      	movs	r3, #0
 8001824:	60bb      	str	r3, [r7, #8]
 8001826:	4b53      	ldr	r3, [pc, #332]	@ (8001974 <MX_GPIO_Init+0x1d8>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182a:	4a52      	ldr	r2, [pc, #328]	@ (8001974 <MX_GPIO_Init+0x1d8>)
 800182c:	f043 0302 	orr.w	r3, r3, #2
 8001830:	6313      	str	r3, [r2, #48]	@ 0x30
 8001832:	4b50      	ldr	r3, [pc, #320]	@ (8001974 <MX_GPIO_Init+0x1d8>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001836:	f003 0302 	and.w	r3, r3, #2
 800183a:	60bb      	str	r3, [r7, #8]
 800183c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	607b      	str	r3, [r7, #4]
 8001842:	4b4c      	ldr	r3, [pc, #304]	@ (8001974 <MX_GPIO_Init+0x1d8>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001846:	4a4b      	ldr	r2, [pc, #300]	@ (8001974 <MX_GPIO_Init+0x1d8>)
 8001848:	f043 0308 	orr.w	r3, r3, #8
 800184c:	6313      	str	r3, [r2, #48]	@ 0x30
 800184e:	4b49      	ldr	r3, [pc, #292]	@ (8001974 <MX_GPIO_Init+0x1d8>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001852:	f003 0308 	and.w	r3, r3, #8
 8001856:	607b      	str	r3, [r7, #4]
 8001858:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800185a:	2200      	movs	r2, #0
 800185c:	2108      	movs	r1, #8
 800185e:	4846      	ldr	r0, [pc, #280]	@ (8001978 <MX_GPIO_Init+0x1dc>)
 8001860:	f002 fc8a 	bl	8004178 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001864:	2201      	movs	r2, #1
 8001866:	2101      	movs	r1, #1
 8001868:	4844      	ldr	r0, [pc, #272]	@ (800197c <MX_GPIO_Init+0x1e0>)
 800186a:	f002 fc85 	bl	8004178 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADC_debug_GPIO_Port, ADC_debug_Pin, GPIO_PIN_RESET);
 800186e:	2200      	movs	r2, #0
 8001870:	2102      	movs	r1, #2
 8001872:	4842      	ldr	r0, [pc, #264]	@ (800197c <MX_GPIO_Init+0x1e0>)
 8001874:	f002 fc80 	bl	8004178 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001878:	2200      	movs	r2, #0
 800187a:	f24f 0110 	movw	r1, #61456	@ 0xf010
 800187e:	4840      	ldr	r0, [pc, #256]	@ (8001980 <MX_GPIO_Init+0x1e4>)
 8001880:	f002 fc7a 	bl	8004178 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001884:	2308      	movs	r3, #8
 8001886:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001888:	2301      	movs	r3, #1
 800188a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188c:	2300      	movs	r3, #0
 800188e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001890:	2300      	movs	r3, #0
 8001892:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001894:	f107 031c 	add.w	r3, r7, #28
 8001898:	4619      	mov	r1, r3
 800189a:	4837      	ldr	r0, [pc, #220]	@ (8001978 <MX_GPIO_Init+0x1dc>)
 800189c:	f002 fad0 	bl	8003e40 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80018a0:	2301      	movs	r3, #1
 80018a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a4:	2301      	movs	r3, #1
 80018a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a8:	2300      	movs	r3, #0
 80018aa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ac:	2300      	movs	r3, #0
 80018ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80018b0:	f107 031c 	add.w	r3, r7, #28
 80018b4:	4619      	mov	r1, r3
 80018b6:	4831      	ldr	r0, [pc, #196]	@ (800197c <MX_GPIO_Init+0x1e0>)
 80018b8:	f002 fac2 	bl	8003e40 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_debug_Pin */
  GPIO_InitStruct.Pin = ADC_debug_Pin;
 80018bc:	2302      	movs	r3, #2
 80018be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c0:	2301      	movs	r3, #1
 80018c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c4:	2300      	movs	r3, #0
 80018c6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018c8:	2303      	movs	r3, #3
 80018ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ADC_debug_GPIO_Port, &GPIO_InitStruct);
 80018cc:	f107 031c 	add.w	r3, r7, #28
 80018d0:	4619      	mov	r1, r3
 80018d2:	482a      	ldr	r0, [pc, #168]	@ (800197c <MX_GPIO_Init+0x1e0>)
 80018d4:	f002 fab4 	bl	8003e40 <HAL_GPIO_Init>

  /*Configure GPIO pin : Pulse_Oximeter_Int_Pin */
  GPIO_InitStruct.Pin = Pulse_Oximeter_Int_Pin;
 80018d8:	2301      	movs	r3, #1
 80018da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018dc:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80018e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018e2:	2301      	movs	r3, #1
 80018e4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(Pulse_Oximeter_Int_GPIO_Port, &GPIO_InitStruct);
 80018e6:	f107 031c 	add.w	r3, r7, #28
 80018ea:	4619      	mov	r1, r3
 80018ec:	4825      	ldr	r0, [pc, #148]	@ (8001984 <MX_GPIO_Init+0x1e8>)
 80018ee:	f002 faa7 	bl	8003e40 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80018f2:	2304      	movs	r3, #4
 80018f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018f6:	2300      	movs	r3, #0
 80018f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fa:	2300      	movs	r3, #0
 80018fc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80018fe:	f107 031c 	add.w	r3, r7, #28
 8001902:	4619      	mov	r1, r3
 8001904:	481f      	ldr	r0, [pc, #124]	@ (8001984 <MX_GPIO_Init+0x1e8>)
 8001906:	f002 fa9b 	bl	8003e40 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800190a:	f24f 0310 	movw	r3, #61456	@ 0xf010
 800190e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001910:	2301      	movs	r3, #1
 8001912:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001914:	2300      	movs	r3, #0
 8001916:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001918:	2300      	movs	r3, #0
 800191a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800191c:	f107 031c 	add.w	r3, r7, #28
 8001920:	4619      	mov	r1, r3
 8001922:	4817      	ldr	r0, [pc, #92]	@ (8001980 <MX_GPIO_Init+0x1e4>)
 8001924:	f002 fa8c 	bl	8003e40 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001928:	2320      	movs	r3, #32
 800192a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800192c:	2300      	movs	r3, #0
 800192e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001930:	2300      	movs	r3, #0
 8001932:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001934:	f107 031c 	add.w	r3, r7, #28
 8001938:	4619      	mov	r1, r3
 800193a:	4811      	ldr	r0, [pc, #68]	@ (8001980 <MX_GPIO_Init+0x1e4>)
 800193c:	f002 fa80 	bl	8003e40 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001940:	2302      	movs	r3, #2
 8001942:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001944:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001948:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194a:	2300      	movs	r3, #0
 800194c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800194e:	f107 031c 	add.w	r3, r7, #28
 8001952:	4619      	mov	r1, r3
 8001954:	4808      	ldr	r0, [pc, #32]	@ (8001978 <MX_GPIO_Init+0x1dc>)
 8001956:	f002 fa73 	bl	8003e40 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800195a:	2200      	movs	r2, #0
 800195c:	2100      	movs	r1, #0
 800195e:	2006      	movs	r0, #6
 8001960:	f001 fec7 	bl	80036f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001964:	2006      	movs	r0, #6
 8001966:	f001 fee0 	bl	800372a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800196a:	bf00      	nop
 800196c:	3730      	adds	r7, #48	@ 0x30
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	40023800 	.word	0x40023800
 8001978:	40021000 	.word	0x40021000
 800197c:	40020800 	.word	0x40020800
 8001980:	40020c00 	.word	0x40020c00
 8001984:	40020400 	.word	0x40020400

08001988 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	4603      	mov	r3, r0
 8001990:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == Pulse_Oximeter_Int_Pin)
 8001992:	88fb      	ldrh	r3, [r7, #6]
 8001994:	2b01      	cmp	r3, #1
 8001996:	d102      	bne.n	800199e <HAL_GPIO_EXTI_Callback+0x16>
	{
		pulseOximiterIntFlag = 1;
 8001998:	4b04      	ldr	r3, [pc, #16]	@ (80019ac <HAL_GPIO_EXTI_Callback+0x24>)
 800199a:	2201      	movs	r2, #1
 800199c:	701a      	strb	r2, [r3, #0]
	}
}
 800199e:	bf00      	nop
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	200005d8 	.word	0x200005d8

080019b0 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 80019b0:	b5b0      	push	{r4, r5, r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
	static float adc_dc_left = 0.0; // left microphone is PA0 i think
	static float adc_dc_right = 0.0;
	static uint16_t adc_sum_left = 0;
	static uint16_t adc_sum_right = 0;

	if (hadc->Instance == ADC1) {
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a60      	ldr	r2, [pc, #384]	@ (8001b40 <HAL_ADC_ConvCpltCallback+0x190>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d154      	bne.n	8001a6c <HAL_ADC_ConvCpltCallback+0xbc>
		adc_sum_left = 0;
 80019c2:	4b60      	ldr	r3, [pc, #384]	@ (8001b44 <HAL_ADC_ConvCpltCallback+0x194>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	801a      	strh	r2, [r3, #0]

		for (int i = 0; i < MIC_OVERSAMPLING; i++) {
 80019c8:	2300      	movs	r3, #0
 80019ca:	60fb      	str	r3, [r7, #12]
 80019cc:	e00c      	b.n	80019e8 <HAL_ADC_ConvCpltCallback+0x38>
			adc_sum_left += adc1_buffer[i];
 80019ce:	4a5e      	ldr	r2, [pc, #376]	@ (8001b48 <HAL_ADC_ConvCpltCallback+0x198>)
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80019d6:	4b5b      	ldr	r3, [pc, #364]	@ (8001b44 <HAL_ADC_ConvCpltCallback+0x194>)
 80019d8:	881b      	ldrh	r3, [r3, #0]
 80019da:	4413      	add	r3, r2
 80019dc:	b29a      	uxth	r2, r3
 80019de:	4b59      	ldr	r3, [pc, #356]	@ (8001b44 <HAL_ADC_ConvCpltCallback+0x194>)
 80019e0:	801a      	strh	r2, [r3, #0]
		for (int i = 0; i < MIC_OVERSAMPLING; i++) {
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	3301      	adds	r3, #1
 80019e6:	60fb      	str	r3, [r7, #12]
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	2b07      	cmp	r3, #7
 80019ec:	ddef      	ble.n	80019ce <HAL_ADC_ConvCpltCallback+0x1e>
		}
		adc_sum_left = adc_sum_left / 2;
 80019ee:	4b55      	ldr	r3, [pc, #340]	@ (8001b44 <HAL_ADC_ConvCpltCallback+0x194>)
 80019f0:	881b      	ldrh	r3, [r3, #0]
 80019f2:	085b      	lsrs	r3, r3, #1
 80019f4:	b29a      	uxth	r2, r3
 80019f6:	4b53      	ldr	r3, [pc, #332]	@ (8001b44 <HAL_ADC_ConvCpltCallback+0x194>)
 80019f8:	801a      	strh	r2, [r3, #0]


		adc_dc_left 	= ADC_DC_FILT_COEFF * adc_dc_left 	+ (1-ADC_DC_FILT_COEFF) * adc_sum_left; // calculate dc offset
 80019fa:	4b54      	ldr	r3, [pc, #336]	@ (8001b4c <HAL_ADC_ConvCpltCallback+0x19c>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7fe fda2 	bl	8000548 <__aeabi_f2d>
 8001a04:	a34a      	add	r3, pc, #296	@ (adr r3, 8001b30 <HAL_ADC_ConvCpltCallback+0x180>)
 8001a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a0a:	f7fe fdf5 	bl	80005f8 <__aeabi_dmul>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	460b      	mov	r3, r1
 8001a12:	4614      	mov	r4, r2
 8001a14:	461d      	mov	r5, r3
 8001a16:	4b4b      	ldr	r3, [pc, #300]	@ (8001b44 <HAL_ADC_ConvCpltCallback+0x194>)
 8001a18:	881b      	ldrh	r3, [r3, #0]
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f7fe fd82 	bl	8000524 <__aeabi_i2d>
 8001a20:	a345      	add	r3, pc, #276	@ (adr r3, 8001b38 <HAL_ADC_ConvCpltCallback+0x188>)
 8001a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a26:	f7fe fde7 	bl	80005f8 <__aeabi_dmul>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	4620      	mov	r0, r4
 8001a30:	4629      	mov	r1, r5
 8001a32:	f7fe fc2b 	bl	800028c <__adddf3>
 8001a36:	4602      	mov	r2, r0
 8001a38:	460b      	mov	r3, r1
 8001a3a:	4610      	mov	r0, r2
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	f7ff f8d3 	bl	8000be8 <__aeabi_d2f>
 8001a42:	4603      	mov	r3, r0
 8001a44:	4a41      	ldr	r2, [pc, #260]	@ (8001b4c <HAL_ADC_ConvCpltCallback+0x19c>)
 8001a46:	6013      	str	r3, [r2, #0]

		audio_tx_buffer[0] = (int16_t)(adc_dc_left - adc_sum_left); // remove dc offset from sum and invert
 8001a48:	4b40      	ldr	r3, [pc, #256]	@ (8001b4c <HAL_ADC_ConvCpltCallback+0x19c>)
 8001a4a:	ed93 7a00 	vldr	s14, [r3]
 8001a4e:	4b3d      	ldr	r3, [pc, #244]	@ (8001b44 <HAL_ADC_ConvCpltCallback+0x194>)
 8001a50:	881b      	ldrh	r3, [r3, #0]
 8001a52:	ee07 3a90 	vmov	s15, r3
 8001a56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a62:	ee17 3a90 	vmov	r3, s15
 8001a66:	b21a      	sxth	r2, r3
 8001a68:	4b39      	ldr	r3, [pc, #228]	@ (8001b50 <HAL_ADC_ConvCpltCallback+0x1a0>)
 8001a6a:	801a      	strh	r2, [r3, #0]

		//HAL_GPIO_TogglePin(GPIOC, ADC_debug_Pin);
	}

	if (hadc->Instance == ADC2) {
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a38      	ldr	r2, [pc, #224]	@ (8001b54 <HAL_ADC_ConvCpltCallback+0x1a4>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d154      	bne.n	8001b20 <HAL_ADC_ConvCpltCallback+0x170>
		adc_sum_right = 0;
 8001a76:	4b38      	ldr	r3, [pc, #224]	@ (8001b58 <HAL_ADC_ConvCpltCallback+0x1a8>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	801a      	strh	r2, [r3, #0]

		for (int i = 0; i < MIC_OVERSAMPLING; i++) {
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	60bb      	str	r3, [r7, #8]
 8001a80:	e00c      	b.n	8001a9c <HAL_ADC_ConvCpltCallback+0xec>
			adc_sum_right += adc2_buffer[i];
 8001a82:	4a36      	ldr	r2, [pc, #216]	@ (8001b5c <HAL_ADC_ConvCpltCallback+0x1ac>)
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001a8a:	4b33      	ldr	r3, [pc, #204]	@ (8001b58 <HAL_ADC_ConvCpltCallback+0x1a8>)
 8001a8c:	881b      	ldrh	r3, [r3, #0]
 8001a8e:	4413      	add	r3, r2
 8001a90:	b29a      	uxth	r2, r3
 8001a92:	4b31      	ldr	r3, [pc, #196]	@ (8001b58 <HAL_ADC_ConvCpltCallback+0x1a8>)
 8001a94:	801a      	strh	r2, [r3, #0]
		for (int i = 0; i < MIC_OVERSAMPLING; i++) {
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	3301      	adds	r3, #1
 8001a9a:	60bb      	str	r3, [r7, #8]
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	2b07      	cmp	r3, #7
 8001aa0:	ddef      	ble.n	8001a82 <HAL_ADC_ConvCpltCallback+0xd2>
		}
		adc_sum_right = adc_sum_right / 2;
 8001aa2:	4b2d      	ldr	r3, [pc, #180]	@ (8001b58 <HAL_ADC_ConvCpltCallback+0x1a8>)
 8001aa4:	881b      	ldrh	r3, [r3, #0]
 8001aa6:	085b      	lsrs	r3, r3, #1
 8001aa8:	b29a      	uxth	r2, r3
 8001aaa:	4b2b      	ldr	r3, [pc, #172]	@ (8001b58 <HAL_ADC_ConvCpltCallback+0x1a8>)
 8001aac:	801a      	strh	r2, [r3, #0]

		adc_dc_right 	= ADC_DC_FILT_COEFF * adc_dc_right 	+ (1-ADC_DC_FILT_COEFF) * adc_sum_right; // calculate dc offset
 8001aae:	4b2c      	ldr	r3, [pc, #176]	@ (8001b60 <HAL_ADC_ConvCpltCallback+0x1b0>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7fe fd48 	bl	8000548 <__aeabi_f2d>
 8001ab8:	a31d      	add	r3, pc, #116	@ (adr r3, 8001b30 <HAL_ADC_ConvCpltCallback+0x180>)
 8001aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001abe:	f7fe fd9b 	bl	80005f8 <__aeabi_dmul>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	4614      	mov	r4, r2
 8001ac8:	461d      	mov	r5, r3
 8001aca:	4b23      	ldr	r3, [pc, #140]	@ (8001b58 <HAL_ADC_ConvCpltCallback+0x1a8>)
 8001acc:	881b      	ldrh	r3, [r3, #0]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7fe fd28 	bl	8000524 <__aeabi_i2d>
 8001ad4:	a318      	add	r3, pc, #96	@ (adr r3, 8001b38 <HAL_ADC_ConvCpltCallback+0x188>)
 8001ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ada:	f7fe fd8d 	bl	80005f8 <__aeabi_dmul>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	4620      	mov	r0, r4
 8001ae4:	4629      	mov	r1, r5
 8001ae6:	f7fe fbd1 	bl	800028c <__adddf3>
 8001aea:	4602      	mov	r2, r0
 8001aec:	460b      	mov	r3, r1
 8001aee:	4610      	mov	r0, r2
 8001af0:	4619      	mov	r1, r3
 8001af2:	f7ff f879 	bl	8000be8 <__aeabi_d2f>
 8001af6:	4603      	mov	r3, r0
 8001af8:	4a19      	ldr	r2, [pc, #100]	@ (8001b60 <HAL_ADC_ConvCpltCallback+0x1b0>)
 8001afa:	6013      	str	r3, [r2, #0]

		audio_tx_buffer[1] = (int16_t)(adc_dc_right - adc_sum_right); // remove dc offset from sum and invert
 8001afc:	4b18      	ldr	r3, [pc, #96]	@ (8001b60 <HAL_ADC_ConvCpltCallback+0x1b0>)
 8001afe:	ed93 7a00 	vldr	s14, [r3]
 8001b02:	4b15      	ldr	r3, [pc, #84]	@ (8001b58 <HAL_ADC_ConvCpltCallback+0x1a8>)
 8001b04:	881b      	ldrh	r3, [r3, #0]
 8001b06:	ee07 3a90 	vmov	s15, r3
 8001b0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b16:	ee17 3a90 	vmov	r3, s15
 8001b1a:	b21a      	sxth	r2, r3
 8001b1c:	4b0c      	ldr	r3, [pc, #48]	@ (8001b50 <HAL_ADC_ConvCpltCallback+0x1a0>)
 8001b1e:	805a      	strh	r2, [r3, #2]

		//HAL_GPIO_TogglePin(GPIOC, ADC_debug_Pin);
	}
	HAL_GPIO_TogglePin(GPIOC, ADC_debug_Pin);
 8001b20:	2102      	movs	r1, #2
 8001b22:	4810      	ldr	r0, [pc, #64]	@ (8001b64 <HAL_ADC_ConvCpltCallback+0x1b4>)
 8001b24:	f002 fb41 	bl	80041aa <HAL_GPIO_TogglePin>
}
 8001b28:	bf00      	nop
 8001b2a:	3710      	adds	r7, #16
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bdb0      	pop	{r4, r5, r7, pc}
 8001b30:	d916872b 	.word	0xd916872b
 8001b34:	3feff7ce 	.word	0x3feff7ce
 8001b38:	d2f1aa00 	.word	0xd2f1aa00
 8001b3c:	3f50624d 	.word	0x3f50624d
 8001b40:	40012000 	.word	0x40012000
 8001b44:	20000602 	.word	0x20000602
 8001b48:	200005dc 	.word	0x200005dc
 8001b4c:	20000604 	.word	0x20000604
 8001b50:	200005fc 	.word	0x200005fc
 8001b54:	40012100 	.word	0x40012100
 8001b58:	20000608 	.word	0x20000608
 8001b5c:	200005ec 	.word	0x200005ec
 8001b60:	2000060c 	.word	0x2000060c
 8001b64:	40020800 	.word	0x40020800

08001b68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b6c:	b672      	cpsid	i
}
 8001b6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001b70:	bf00      	nop
 8001b72:	e7fd      	b.n	8001b70 <Error_Handler+0x8>

08001b74 <MAX30102_WriteRegister>:
uint8_t max30102_sensor_data[6 * MAX30102_SAMPLES_PER_BURST] = {0};


/* USER CODE BEGIN 0 */
// I2C write to register
HAL_StatusTypeDef MAX30102_WriteRegister(uint8_t reg, uint8_t value) {
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b086      	sub	sp, #24
 8001b78:	af04      	add	r7, sp, #16
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	460a      	mov	r2, r1
 8001b7e:	71fb      	strb	r3, [r7, #7]
 8001b80:	4613      	mov	r3, r2
 8001b82:	71bb      	strb	r3, [r7, #6]
    return HAL_I2C_Mem_Write(&hi2c1, (MAX30102_ADDRESS << 1), reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 100);
 8001b84:	79fb      	ldrb	r3, [r7, #7]
 8001b86:	b29a      	uxth	r2, r3
 8001b88:	2364      	movs	r3, #100	@ 0x64
 8001b8a:	9302      	str	r3, [sp, #8]
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	9301      	str	r3, [sp, #4]
 8001b90:	1dbb      	adds	r3, r7, #6
 8001b92:	9300      	str	r3, [sp, #0]
 8001b94:	2301      	movs	r3, #1
 8001b96:	21ae      	movs	r1, #174	@ 0xae
 8001b98:	4803      	ldr	r0, [pc, #12]	@ (8001ba8 <MAX30102_WriteRegister+0x34>)
 8001b9a:	f002 fc7d 	bl	8004498 <HAL_I2C_Mem_Write>
 8001b9e:	4603      	mov	r3, r0
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3708      	adds	r7, #8
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	20000444 	.word	0x20000444

08001bac <MAX30102_ReadRegister>:

// I2C read from register
HAL_StatusTypeDef MAX30102_ReadRegister(uint8_t reg, uint8_t *value) {
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b086      	sub	sp, #24
 8001bb0:	af04      	add	r7, sp, #16
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	6039      	str	r1, [r7, #0]
 8001bb6:	71fb      	strb	r3, [r7, #7]
    return HAL_I2C_Mem_Read(&hi2c1, (MAX30102_ADDRESS << 1), reg, I2C_MEMADD_SIZE_8BIT, value, 1, 100);
 8001bb8:	79fb      	ldrb	r3, [r7, #7]
 8001bba:	b29a      	uxth	r2, r3
 8001bbc:	2364      	movs	r3, #100	@ 0x64
 8001bbe:	9302      	str	r3, [sp, #8]
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	9301      	str	r3, [sp, #4]
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	9300      	str	r3, [sp, #0]
 8001bc8:	2301      	movs	r3, #1
 8001bca:	21ae      	movs	r1, #174	@ 0xae
 8001bcc:	4803      	ldr	r0, [pc, #12]	@ (8001bdc <MAX30102_ReadRegister+0x30>)
 8001bce:	f002 fd5d 	bl	800468c <HAL_I2C_Mem_Read>
 8001bd2:	4603      	mov	r3, r0
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3708      	adds	r7, #8
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	20000444 	.word	0x20000444

08001be0 <MAX30102_ReadFIFO>:

// Read FIFO data
uint8_t MAX30102_ReadFIFO(uint8_t *buffer, uint8_t length) {
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af04      	add	r7, sp, #16
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	460b      	mov	r3, r1
 8001bea:	70fb      	strb	r3, [r7, #3]
    return HAL_I2C_Mem_Read(&hi2c1, (MAX30102_ADDRESS << 1), REG_FIFO_DATA, I2C_MEMADD_SIZE_8BIT, buffer, length, 100);
 8001bec:	78fb      	ldrb	r3, [r7, #3]
 8001bee:	b29b      	uxth	r3, r3
 8001bf0:	2264      	movs	r2, #100	@ 0x64
 8001bf2:	9202      	str	r2, [sp, #8]
 8001bf4:	9301      	str	r3, [sp, #4]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	9300      	str	r3, [sp, #0]
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	2207      	movs	r2, #7
 8001bfe:	21ae      	movs	r1, #174	@ 0xae
 8001c00:	4803      	ldr	r0, [pc, #12]	@ (8001c10 <MAX30102_ReadFIFO+0x30>)
 8001c02:	f002 fd43 	bl	800468c <HAL_I2C_Mem_Read>
 8001c06:	4603      	mov	r3, r0
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3708      	adds	r7, #8
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	20000444 	.word	0x20000444

08001c14 <MAX30102_Init>:

// MAX30102 initialization
uint8_t MAX30102_Init(void) {
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
    uint8_t part_id = 0;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	71bb      	strb	r3, [r7, #6]

    // Read MAX30102 ID to verify device presence
    if (MAX30102_ReadRegister(REG_PART_ID, &part_id) != HAL_OK || part_id != 0x15) {
 8001c1e:	1dbb      	adds	r3, r7, #6
 8001c20:	4619      	mov	r1, r3
 8001c22:	20ff      	movs	r0, #255	@ 0xff
 8001c24:	f7ff ffc2 	bl	8001bac <MAX30102_ReadRegister>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d102      	bne.n	8001c34 <MAX30102_Init+0x20>
 8001c2e:	79bb      	ldrb	r3, [r7, #6]
 8001c30:	2b15      	cmp	r3, #21
 8001c32:	d001      	beq.n	8001c38 <MAX30102_Init+0x24>
        return 0;  // Device not found
 8001c34:	2300      	movs	r3, #0
 8001c36:	e02b      	b.n	8001c90 <MAX30102_Init+0x7c>
    }

    // Reset MAX30102
    MAX30102_WriteRegister(REG_MODE_CONFIG, (1 << 6));  // Reset MAX30102  (bit 6)
 8001c38:	2140      	movs	r1, #64	@ 0x40
 8001c3a:	2009      	movs	r0, #9
 8001c3c:	f7ff ff9a 	bl	8001b74 <MAX30102_WriteRegister>
    HAL_Delay(10);
 8001c40:	200a      	movs	r0, #10
 8001c42:	f001 f809 	bl	8002c58 <HAL_Delay>

    // Configure SPO2 mode
    MAX30102_WriteRegister(REG_MODE_CONFIG, 0b011 << BIT_MODE);  // Use heart rate mode only (or 0x07 to enable SPO2)
 8001c46:	2103      	movs	r1, #3
 8001c48:	2009      	movs	r0, #9
 8001c4a:	f7ff ff93 	bl	8001b74 <MAX30102_WriteRegister>
    uint8_t spo2_bits = (0b01 << BIT_SPO2_ADC_RGE) |  (0b000 << BIT_SPO2_SR) | (0b01 << BIT_LED_PW); //pw of 11 browns out supply
 8001c4e:	2321      	movs	r3, #33	@ 0x21
 8001c50:	71fb      	strb	r3, [r7, #7]
    MAX30102_WriteRegister(REG_SPO2_CONFIG, spo2_bits);  // Set ADC range and sampling rate
 8001c52:	79fb      	ldrb	r3, [r7, #7]
 8001c54:	4619      	mov	r1, r3
 8001c56:	200a      	movs	r0, #10
 8001c58:	f7ff ff8c 	bl	8001b74 <MAX30102_WriteRegister>

    // Set LED brightness (0x24 represents medium brightness, adjustable)
    redLEDCurrent = 50;
 8001c5c:	4b0e      	ldr	r3, [pc, #56]	@ (8001c98 <MAX30102_Init+0x84>)
 8001c5e:	2232      	movs	r2, #50	@ 0x32
 8001c60:	701a      	strb	r2, [r3, #0]
    MAX30102_setLedCurrent(RED_LED, redLEDCurrent);
 8001c62:	4b0d      	ldr	r3, [pc, #52]	@ (8001c98 <MAX30102_Init+0x84>)
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	4619      	mov	r1, r3
 8001c68:	2001      	movs	r0, #1
 8001c6a:	f000 f825 	bl	8001cb8 <MAX30102_setLedCurrent>
    MAX30102_setLedCurrent(IR_LED, redLEDCurrent);
 8001c6e:	4b0a      	ldr	r3, [pc, #40]	@ (8001c98 <MAX30102_Init+0x84>)
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	4619      	mov	r1, r3
 8001c74:	2002      	movs	r0, #2
 8001c76:	f000 f81f 	bl	8001cb8 <MAX30102_setLedCurrent>

    // interrupts
    MAX30102_WriteRegister(REG_FIFO_CONFIG, (0b000 << BIT_SMP_AVG) | ((32 - MAX30102_SAMPLES_PER_BURST) << BIT_FIFO_A_FULL_VAL)); // max value is 15 min is 0
 8001c7a:	2100      	movs	r1, #0
 8001c7c:	2008      	movs	r0, #8
 8001c7e:	f7ff ff79 	bl	8001b74 <MAX30102_WriteRegister>
    MAX30102_WriteRegister(REG_INT1_EN, 1 << BIT_EN_A_FULL_INT);
 8001c82:	2180      	movs	r1, #128	@ 0x80
 8001c84:	2002      	movs	r0, #2
 8001c86:	f7ff ff75 	bl	8001b74 <MAX30102_WriteRegister>

    MAX30102_ClearInterrupt();
 8001c8a:	f000 f807 	bl	8001c9c <MAX30102_ClearInterrupt>

    return 1;  // Initialization successful
 8001c8e:	2301      	movs	r3, #1
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3708      	adds	r7, #8
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	200006dc 	.word	0x200006dc

08001c9c <MAX30102_ClearInterrupt>:

void MAX30102_ClearInterrupt(void) {
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
	uint8_t reset = 0;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	71fb      	strb	r3, [r7, #7]
	MAX30102_ReadRegister(REG_STATUS, &reset); // clears initial interrupt
 8001ca6:	1dfb      	adds	r3, r7, #7
 8001ca8:	4619      	mov	r1, r3
 8001caa:	2000      	movs	r0, #0
 8001cac:	f7ff ff7e 	bl	8001bac <MAX30102_ReadRegister>
}
 8001cb0:	bf00      	nop
 8001cb2:	3708      	adds	r7, #8
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <MAX30102_setLedCurrent>:
	return 1;
}


uint8_t MAX30102_setLedCurrent(uint8_t led, uint8_t currentLevel)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	460a      	mov	r2, r1
 8001cc2:	71fb      	strb	r3, [r7, #7]
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	71bb      	strb	r3, [r7, #6]
	uint8_t ledRegister = 0;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	73fb      	strb	r3, [r7, #15]

	switch(led){
 8001ccc:	79fb      	ldrb	r3, [r7, #7]
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d002      	beq.n	8001cd8 <MAX30102_setLedCurrent+0x20>
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d003      	beq.n	8001cde <MAX30102_setLedCurrent+0x26>
 8001cd6:	e005      	b.n	8001ce4 <MAX30102_setLedCurrent+0x2c>
	case RED_LED: 	ledRegister = REG_LED1_PA; break;
 8001cd8:	230c      	movs	r3, #12
 8001cda:	73fb      	strb	r3, [r7, #15]
 8001cdc:	e002      	b.n	8001ce4 <MAX30102_setLedCurrent+0x2c>
	case IR_LED:	ledRegister = REG_LED2_PA; break;
 8001cde:	230d      	movs	r3, #13
 8001ce0:	73fb      	strb	r3, [r7, #15]
 8001ce2:	bf00      	nop
	}

	if( MAX30102_WriteRegister(ledRegister, currentLevel) != HAL_OK){
 8001ce4:	79ba      	ldrb	r2, [r7, #6]
 8001ce6:	7bfb      	ldrb	r3, [r7, #15]
 8001ce8:	4611      	mov	r1, r2
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7ff ff42 	bl	8001b74 <MAX30102_WriteRegister>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <MAX30102_setLedCurrent+0x42>
		return 0;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	e000      	b.n	8001cfc <MAX30102_setLedCurrent+0x44>
	}
	return 1;
 8001cfa:	2301      	movs	r3, #1
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3710      	adds	r7, #16
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}

08001d04 <MAX30102_DumpFifo>:

uint8_t MAX30102_DumpFifo() {
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
	uint8_t retval = MAX30102_ReadFIFO(max30102_sensor_data, 6 * MAX30102_SAMPLES_PER_BURST);
 8001d0a:	21c0      	movs	r1, #192	@ 0xc0
 8001d0c:	4805      	ldr	r0, [pc, #20]	@ (8001d24 <MAX30102_DumpFifo+0x20>)
 8001d0e:	f7ff ff67 	bl	8001be0 <MAX30102_ReadFIFO>
 8001d12:	4603      	mov	r3, r0
 8001d14:	71fb      	strb	r3, [r7, #7]
	MAX30102_ClearInterrupt();
 8001d16:	f7ff ffc1 	bl	8001c9c <MAX30102_ClearInterrupt>
	return retval;
 8001d1a:	79fb      	ldrb	r3, [r7, #7]
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3708      	adds	r7, #8
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	200006e8 	.word	0x200006e8

08001d28 <MAX30102_ProcessData>:

void MAX30102_ProcessData() {
 8001d28:	b5b0      	push	{r4, r5, r7, lr}
 8001d2a:	b08e      	sub	sp, #56	@ 0x38
 8001d2c:	af00      	add	r7, sp, #0
	for (int i = 0 ; i < MAX30102_SAMPLES_PER_BURST; i++) {
 8001d2e:	2300      	movs	r3, #0
 8001d30:	637b      	str	r3, [r7, #52]	@ 0x34
 8001d32:	e048      	b.n	8001dc6 <MAX30102_ProcessData+0x9e>
		// heart rate mode only needs red, so only save red data initially long term
		FIFO_LED_DATA rawData = {0};
 8001d34:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001d38:	2200      	movs	r2, #0
 8001d3a:	601a      	str	r2, [r3, #0]
 8001d3c:	605a      	str	r2, [r3, #4]
		uint8_t n = i*6;
 8001d3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	461a      	mov	r2, r3
 8001d44:	0052      	lsls	r2, r2, #1
 8001d46:	4413      	add	r3, r2
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
		rawData.redLedRaw = ((max30102_sensor_data[n+0] << 16) | (max30102_sensor_data[n+1] << 8) | max30102_sensor_data[n+2]);
 8001d4e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001d52:	4a21      	ldr	r2, [pc, #132]	@ (8001dd8 <MAX30102_ProcessData+0xb0>)
 8001d54:	5cd3      	ldrb	r3, [r2, r3]
 8001d56:	041a      	lsls	r2, r3, #16
 8001d58:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	491e      	ldr	r1, [pc, #120]	@ (8001dd8 <MAX30102_ProcessData+0xb0>)
 8001d60:	5ccb      	ldrb	r3, [r1, r3]
 8001d62:	021b      	lsls	r3, r3, #8
 8001d64:	4313      	orrs	r3, r2
 8001d66:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8001d6a:	3202      	adds	r2, #2
 8001d6c:	491a      	ldr	r1, [pc, #104]	@ (8001dd8 <MAX30102_ProcessData+0xb0>)
 8001d6e:	5c8a      	ldrb	r2, [r1, r2]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	62bb      	str	r3, [r7, #40]	@ 0x28
		rawData.irLedRaw = 	((max30102_sensor_data[n+3] << 16) | (max30102_sensor_data[n+4] << 8) | max30102_sensor_data[n+5]);
 8001d74:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001d78:	3303      	adds	r3, #3
 8001d7a:	4a17      	ldr	r2, [pc, #92]	@ (8001dd8 <MAX30102_ProcessData+0xb0>)
 8001d7c:	5cd3      	ldrb	r3, [r2, r3]
 8001d7e:	041a      	lsls	r2, r3, #16
 8001d80:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001d84:	3304      	adds	r3, #4
 8001d86:	4914      	ldr	r1, [pc, #80]	@ (8001dd8 <MAX30102_ProcessData+0xb0>)
 8001d88:	5ccb      	ldrb	r3, [r1, r3]
 8001d8a:	021b      	lsls	r3, r3, #8
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8001d92:	3205      	adds	r2, #5
 8001d94:	4910      	ldr	r1, [pc, #64]	@ (8001dd8 <MAX30102_ProcessData+0xb0>)
 8001d96:	5c8a      	ldrb	r2, [r1, r2]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	62fb      	str	r3, [r7, #44]	@ 0x2c

		pulseOximeter = pulseOximeter_update(rawData);
 8001d9c:	4c0f      	ldr	r4, [pc, #60]	@ (8001ddc <MAX30102_ProcessData+0xb4>)
 8001d9e:	4638      	mov	r0, r7
 8001da0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001da4:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001da8:	f000 f97c 	bl	80020a4 <pulseOximeter_update>
 8001dac:	4625      	mov	r5, r4
 8001dae:	463c      	mov	r4, r7
 8001db0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001db2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001db4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001db6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001db8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001dbc:	e885 0003 	stmia.w	r5, {r0, r1}
	for (int i = 0 ; i < MAX30102_SAMPLES_PER_BURST; i++) {
 8001dc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	637b      	str	r3, [r7, #52]	@ 0x34
 8001dc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001dc8:	2b1f      	cmp	r3, #31
 8001dca:	ddb3      	ble.n	8001d34 <MAX30102_ProcessData+0xc>

	}
}
 8001dcc:	bf00      	nop
 8001dce:	bf00      	nop
 8001dd0:	3738      	adds	r7, #56	@ 0x38
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bdb0      	pop	{r4, r5, r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	200006e8 	.word	0x200006e8
 8001ddc:	20000610 	.word	0x20000610

08001de0 <compare>:

	currentTemperature = temperature;
}

// Comparison function for qsort
int compare(const void *a, const void *b) {
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
    return (*(int*)a - *(int*)b);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	1ad3      	subs	r3, r2, r3
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <getMedian>:

// Function to calculate the median
double getMedian(int arr[], int size) {
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	6039      	str	r1, [r7, #0]
    // Sort the array
    qsort(arr, size, sizeof(int), compare);
 8001e0a:	6839      	ldr	r1, [r7, #0]
 8001e0c:	4b0d      	ldr	r3, [pc, #52]	@ (8001e44 <getMedian+0x44>)
 8001e0e:	2204      	movs	r2, #4
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f00b fa1e 	bl	800d252 <qsort>

    return arr[size - 1 - 3];
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001e1c:	3b04      	subs	r3, #4
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	4413      	add	r3, r2
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7fe fb7c 	bl	8000524 <__aeabi_i2d>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	460b      	mov	r3, r1
 8001e30:	ec43 2b17 	vmov	d7, r2, r3
}
 8001e34:	eeb0 0a47 	vmov.f32	s0, s14
 8001e38:	eef0 0a67 	vmov.f32	s1, s15
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	08001de1 	.word	0x08001de1

08001e48 <detectPulse>:


bool detectPulse(float sensor_value)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	ed87 0a01 	vstr	s0, [r7, #4]
  static float prev_sensor_value = 0;
  static uint8_t values_went_down = 0;
  static uint16_t currentBeatIndex = 0;

  if(sensor_value > PULSE_MAX_THRESHOLD)
 8001e52:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e56:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 8001fc8 <detectPulse+0x180>
 8001e5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e62:	dd0b      	ble.n	8001e7c <detectPulse+0x34>
  {
    currentPulseDetectorState = PULSE_IDLE;
 8001e64:	4b59      	ldr	r3, [pc, #356]	@ (8001fcc <detectPulse+0x184>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	701a      	strb	r2, [r3, #0]
    prev_sensor_value = 0;
 8001e6a:	4b59      	ldr	r3, [pc, #356]	@ (8001fd0 <detectPulse+0x188>)
 8001e6c:	f04f 0200 	mov.w	r2, #0
 8001e70:	601a      	str	r2, [r3, #0]
    values_went_down = 0;
 8001e72:	4b58      	ldr	r3, [pc, #352]	@ (8001fd4 <detectPulse+0x18c>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	701a      	strb	r2, [r3, #0]
    return false;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	e09b      	b.n	8001fb4 <detectPulse+0x16c>
  }

  currentBeatIndex++;
 8001e7c:	4b56      	ldr	r3, [pc, #344]	@ (8001fd8 <detectPulse+0x190>)
 8001e7e:	881b      	ldrh	r3, [r3, #0]
 8001e80:	3301      	adds	r3, #1
 8001e82:	b29a      	uxth	r2, r3
 8001e84:	4b54      	ldr	r3, [pc, #336]	@ (8001fd8 <detectPulse+0x190>)
 8001e86:	801a      	strh	r2, [r3, #0]

  switch(currentPulseDetectorState)
 8001e88:	4b50      	ldr	r3, [pc, #320]	@ (8001fcc <detectPulse+0x184>)
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d06e      	beq.n	8001f6e <detectPulse+0x126>
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	f300 808b 	bgt.w	8001fac <detectPulse+0x164>
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d002      	beq.n	8001ea0 <detectPulse+0x58>
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d011      	beq.n	8001ec2 <detectPulse+0x7a>
 8001e9e:	e085      	b.n	8001fac <detectPulse+0x164>
  {
    case PULSE_IDLE:
      if(sensor_value >= PULSE_MIN_THRESHOLD) {
 8001ea0:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ea4:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8001fdc <detectPulse+0x194>
 8001ea8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eb0:	da00      	bge.n	8001eb4 <detectPulse+0x6c>
        currentPulseDetectorState = PULSE_TRACE_UP;
        values_went_down = 0;
      }
      break;
 8001eb2:	e07b      	b.n	8001fac <detectPulse+0x164>
        currentPulseDetectorState = PULSE_TRACE_UP;
 8001eb4:	4b45      	ldr	r3, [pc, #276]	@ (8001fcc <detectPulse+0x184>)
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	701a      	strb	r2, [r3, #0]
        values_went_down = 0;
 8001eba:	4b46      	ldr	r3, [pc, #280]	@ (8001fd4 <detectPulse+0x18c>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	701a      	strb	r2, [r3, #0]
      break;
 8001ec0:	e074      	b.n	8001fac <detectPulse+0x164>

    case PULSE_TRACE_UP:
      if (!(sensor_value > prev_sensor_value))
 8001ec2:	4b43      	ldr	r3, [pc, #268]	@ (8001fd0 <detectPulse+0x188>)
 8001ec4:	edd3 7a00 	vldr	s15, [r3]
 8001ec8:	ed97 7a01 	vldr	s14, [r7, #4]
 8001ecc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ed4:	bfcc      	ite	gt
 8001ed6:	2301      	movgt	r3, #1
 8001ed8:	2300      	movle	r3, #0
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	f083 0301 	eor.w	r3, r3, #1
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d061      	beq.n	8001faa <detectPulse+0x162>
      {
    	if (currentBeatIndex > 0) valuesBPM[bpmIndex] = currentBeatIndex;
 8001ee6:	4b3c      	ldr	r3, [pc, #240]	@ (8001fd8 <detectPulse+0x190>)
 8001ee8:	881b      	ldrh	r3, [r3, #0]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d007      	beq.n	8001efe <detectPulse+0xb6>
 8001eee:	4b3a      	ldr	r3, [pc, #232]	@ (8001fd8 <detectPulse+0x190>)
 8001ef0:	8819      	ldrh	r1, [r3, #0]
 8001ef2:	4b3b      	ldr	r3, [pc, #236]	@ (8001fe0 <detectPulse+0x198>)
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	4b3a      	ldr	r3, [pc, #232]	@ (8001fe4 <detectPulse+0x19c>)
 8001efa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    	currentBeatIndex = 0;
 8001efe:	4b36      	ldr	r3, [pc, #216]	@ (8001fd8 <detectPulse+0x190>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	801a      	strh	r2, [r3, #0]

        bpmIndex++;
 8001f04:	4b36      	ldr	r3, [pc, #216]	@ (8001fe0 <detectPulse+0x198>)
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	3301      	adds	r3, #1
 8001f0a:	b2da      	uxtb	r2, r3
 8001f0c:	4b34      	ldr	r3, [pc, #208]	@ (8001fe0 <detectPulse+0x198>)
 8001f0e:	701a      	strb	r2, [r3, #0]

        if (bpmIndex >= PULSE_BPM_SAMPLE_SIZE){
 8001f10:	4b33      	ldr	r3, [pc, #204]	@ (8001fe0 <detectPulse+0x198>)
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	2b09      	cmp	r3, #9
 8001f16:	d925      	bls.n	8001f64 <detectPulse+0x11c>
        	bpmIndex = 0;
 8001f18:	4b31      	ldr	r3, [pc, #196]	@ (8001fe0 <detectPulse+0x198>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	701a      	strb	r2, [r3, #0]
        	uint16_t medianIdx = getMedian(valuesBPM, (int)PULSE_BPM_SAMPLE_SIZE);
 8001f1e:	210a      	movs	r1, #10
 8001f20:	4830      	ldr	r0, [pc, #192]	@ (8001fe4 <detectPulse+0x19c>)
 8001f22:	f7ff ff6d 	bl	8001e00 <getMedian>
 8001f26:	ec53 2b10 	vmov	r2, r3, d0
 8001f2a:	4610      	mov	r0, r2
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	f7fe fe3b 	bl	8000ba8 <__aeabi_d2uiz>
 8001f32:	4603      	mov	r3, r0
 8001f34:	81fb      	strh	r3, [r7, #14]

        	if(medianIdx > 0)
 8001f36:	89fb      	ldrh	r3, [r7, #14]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d013      	beq.n	8001f64 <detectPulse+0x11c>
        		currentBPM = (60.0 * MAX30102_SAMPLE_RATE) / medianIdx;
 8001f3c:	89fb      	ldrh	r3, [r7, #14]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7fe faf0 	bl	8000524 <__aeabi_i2d>
 8001f44:	4602      	mov	r2, r0
 8001f46:	460b      	mov	r3, r1
 8001f48:	a11d      	add	r1, pc, #116	@ (adr r1, 8001fc0 <detectPulse+0x178>)
 8001f4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001f4e:	f7fe fc7d 	bl	800084c <__aeabi_ddiv>
 8001f52:	4602      	mov	r2, r0
 8001f54:	460b      	mov	r3, r1
 8001f56:	4610      	mov	r0, r2
 8001f58:	4619      	mov	r1, r3
 8001f5a:	f7fe fe45 	bl	8000be8 <__aeabi_d2f>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	4a21      	ldr	r2, [pc, #132]	@ (8001fe8 <detectPulse+0x1a0>)
 8001f62:	6013      	str	r3, [r2, #0]
        }

        currentPulseDetectorState = PULSE_TRACE_DOWN;
 8001f64:	4b19      	ldr	r3, [pc, #100]	@ (8001fcc <detectPulse+0x184>)
 8001f66:	2202      	movs	r2, #2
 8001f68:	701a      	strb	r2, [r3, #0]

        return true;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e022      	b.n	8001fb4 <detectPulse+0x16c>
      }
      break;

    case PULSE_TRACE_DOWN:
      if(sensor_value < prev_sensor_value)
 8001f6e:	4b18      	ldr	r3, [pc, #96]	@ (8001fd0 <detectPulse+0x188>)
 8001f70:	edd3 7a00 	vldr	s15, [r3]
 8001f74:	ed97 7a01 	vldr	s14, [r7, #4]
 8001f78:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f80:	d505      	bpl.n	8001f8e <detectPulse+0x146>
      {
        values_went_down++;
 8001f82:	4b14      	ldr	r3, [pc, #80]	@ (8001fd4 <detectPulse+0x18c>)
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	3301      	adds	r3, #1
 8001f88:	b2da      	uxtb	r2, r3
 8001f8a:	4b12      	ldr	r3, [pc, #72]	@ (8001fd4 <detectPulse+0x18c>)
 8001f8c:	701a      	strb	r2, [r3, #0]
      }


      if(sensor_value < PULSE_MIN_THRESHOLD)
 8001f8e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f92:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8001fdc <detectPulse+0x194>
 8001f96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f9e:	d400      	bmi.n	8001fa2 <detectPulse+0x15a>
      {
        currentPulseDetectorState = PULSE_IDLE;
      }
      break;
 8001fa0:	e004      	b.n	8001fac <detectPulse+0x164>
        currentPulseDetectorState = PULSE_IDLE;
 8001fa2:	4b0a      	ldr	r3, [pc, #40]	@ (8001fcc <detectPulse+0x184>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	701a      	strb	r2, [r3, #0]
      break;
 8001fa8:	e000      	b.n	8001fac <detectPulse+0x164>
      break;
 8001faa:	bf00      	nop
  }

  prev_sensor_value = sensor_value;
 8001fac:	4a08      	ldr	r2, [pc, #32]	@ (8001fd0 <detectPulse+0x188>)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6013      	str	r3, [r2, #0]
  return false;
 8001fb2:	2300      	movs	r3, #0
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3710      	adds	r7, #16
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	f3af 8000 	nop.w
 8001fc0:	00000000 	.word	0x00000000
 8001fc4:	40a77000 	.word	0x40a77000
 8001fc8:	44fa0000 	.word	0x44fa0000
 8001fcc:	200006e4 	.word	0x200006e4
 8001fd0:	200007a8 	.word	0x200007a8
 8001fd4:	200007ac 	.word	0x200007ac
 8001fd8:	200007ae 	.word	0x200007ae
 8001fdc:	42c80000 	.word	0x42c80000
 8001fe0:	200006c8 	.word	0x200006c8
 8001fe4:	200006a0 	.word	0x200006a0
 8001fe8:	2000069c 	.word	0x2000069c

08001fec <balanceIntesities>:

void balanceIntesities( float redLedDC, float IRLedDC )
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	ed87 0a01 	vstr	s0, [r7, #4]
 8001ff6:	edc7 0a00 	vstr	s1, [r7]
	uint32_t currentTime = millis();
 8001ffa:	f000 fd77 	bl	8002aec <millis>
 8001ffe:	60f8      	str	r0, [r7, #12]
  if( currentTime - lastREDLedCurrentCheck >= RED_LED_CURRENT_ADJUSTMENT_MS)
 8002000:	4b25      	ldr	r3, [pc, #148]	@ (8002098 <balanceIntesities+0xac>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	461a      	mov	r2, r3
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	1a9b      	subs	r3, r3, r2
 800200a:	2bc7      	cmp	r3, #199	@ 0xc7
 800200c:	d940      	bls.n	8002090 <balanceIntesities+0xa4>
  {
	if( IRLedDC - redLedDC > MAGIC_ACCEPTABLE_INTENSITY_DIFF && redLEDCurrent < 51)
 800200e:	ed97 7a00 	vldr	s14, [r7]
 8002012:	edd7 7a01 	vldr	s15, [r7, #4]
 8002016:	ee77 7a67 	vsub.f32	s15, s14, s15
 800201a:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 800209c <balanceIntesities+0xb0>
 800201e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002026:	dd10      	ble.n	800204a <balanceIntesities+0x5e>
 8002028:	4b1d      	ldr	r3, [pc, #116]	@ (80020a0 <balanceIntesities+0xb4>)
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	2b32      	cmp	r3, #50	@ 0x32
 800202e:	d80c      	bhi.n	800204a <balanceIntesities+0x5e>
    {
		redLEDCurrent++;
 8002030:	4b1b      	ldr	r3, [pc, #108]	@ (80020a0 <balanceIntesities+0xb4>)
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	3301      	adds	r3, #1
 8002036:	b2da      	uxtb	r2, r3
 8002038:	4b19      	ldr	r3, [pc, #100]	@ (80020a0 <balanceIntesities+0xb4>)
 800203a:	701a      	strb	r2, [r3, #0]
		MAX30102_setLedCurrent(RED_LED, redLEDCurrent);
 800203c:	4b18      	ldr	r3, [pc, #96]	@ (80020a0 <balanceIntesities+0xb4>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	4619      	mov	r1, r3
 8002042:	2001      	movs	r0, #1
 8002044:	f7ff fe38 	bl	8001cb8 <MAX30102_setLedCurrent>
 8002048:	e01c      	b.n	8002084 <balanceIntesities+0x98>
    }
    else if(redLedDC - IRLedDC > MAGIC_ACCEPTABLE_INTENSITY_DIFF && redLEDCurrent > 0)
 800204a:	ed97 7a01 	vldr	s14, [r7, #4]
 800204e:	edd7 7a00 	vldr	s15, [r7]
 8002052:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002056:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 800209c <balanceIntesities+0xb0>
 800205a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800205e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002062:	dd0f      	ble.n	8002084 <balanceIntesities+0x98>
 8002064:	4b0e      	ldr	r3, [pc, #56]	@ (80020a0 <balanceIntesities+0xb4>)
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d00b      	beq.n	8002084 <balanceIntesities+0x98>
    {
    	redLEDCurrent--;
 800206c:	4b0c      	ldr	r3, [pc, #48]	@ (80020a0 <balanceIntesities+0xb4>)
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	3b01      	subs	r3, #1
 8002072:	b2da      	uxtb	r2, r3
 8002074:	4b0a      	ldr	r3, [pc, #40]	@ (80020a0 <balanceIntesities+0xb4>)
 8002076:	701a      	strb	r2, [r3, #0]
    	MAX30102_setLedCurrent(RED_LED, redLEDCurrent);
 8002078:	4b09      	ldr	r3, [pc, #36]	@ (80020a0 <balanceIntesities+0xb4>)
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	4619      	mov	r1, r3
 800207e:	2001      	movs	r0, #1
 8002080:	f7ff fe1a 	bl	8001cb8 <MAX30102_setLedCurrent>
    }

    lastREDLedCurrentCheck = millis();
 8002084:	f000 fd32 	bl	8002aec <millis>
 8002088:	4603      	mov	r3, r0
 800208a:	461a      	mov	r2, r3
 800208c:	4b02      	ldr	r3, [pc, #8]	@ (8002098 <balanceIntesities+0xac>)
 800208e:	601a      	str	r2, [r3, #0]
  }
}
 8002090:	bf00      	nop
 8002092:	3710      	adds	r7, #16
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	200006e0 	.word	0x200006e0
 800209c:	461c4000 	.word	0x461c4000
 80020a0:	200006dc 	.word	0x200006dc

080020a4 <pulseOximeter_update>:

MAX30102 pulseOximeter_update(FIFO_LED_DATA m_fifoData)
	{
 80020a4:	b5b0      	push	{r4, r5, r7, lr}
 80020a6:	b090      	sub	sp, #64	@ 0x40
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	60f8      	str	r0, [r7, #12]
 80020ac:	1d3b      	adds	r3, r7, #4
 80020ae:	e883 0006 	stmia.w	r3, {r1, r2}
		MAX30102 result = {
 80020b2:	f107 0310 	add.w	r3, r7, #16
 80020b6:	2228      	movs	r2, #40	@ 0x28
 80020b8:	2100      	movs	r1, #0
 80020ba:	4618      	mov	r0, r3
 80020bc:	f00b ff6d 	bl	800df9a <memset>
 80020c0:	4b96      	ldr	r3, [pc, #600]	@ (800231c <pulseOximeter_update+0x278>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80020c6:	4b96      	ldr	r3, [pc, #600]	@ (8002320 <pulseOximeter_update+0x27c>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	633b      	str	r3, [r7, #48]	@ 0x30
		/*float dcFilteredIR*/ 0.0,
		/*float dcFilteredRed*/ 0.0,
		/*float temperature;*/ currentTemperature
	};

	dcFilterIR = dcRemoval( (float)m_fifoData.irLedRaw, dcFilterIR.w, ALPHA );
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	ee07 3a90 	vmov	s15, r3
 80020d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020d6:	4b93      	ldr	r3, [pc, #588]	@ (8002324 <pulseOximeter_update+0x280>)
 80020d8:	ed93 7a00 	vldr	s14, [r3]
 80020dc:	ed9f 1a92 	vldr	s2, [pc, #584]	@ 8002328 <pulseOximeter_update+0x284>
 80020e0:	eef0 0a47 	vmov.f32	s1, s14
 80020e4:	eeb0 0a67 	vmov.f32	s0, s15
 80020e8:	f7fe ff46 	bl	8000f78 <dcRemoval>
 80020ec:	eeb0 7a40 	vmov.f32	s14, s0
 80020f0:	eef0 7a60 	vmov.f32	s15, s1
 80020f4:	4b8b      	ldr	r3, [pc, #556]	@ (8002324 <pulseOximeter_update+0x280>)
 80020f6:	ed83 7a00 	vstr	s14, [r3]
 80020fa:	edc3 7a01 	vstr	s15, [r3, #4]
	dcFilterRed = dcRemoval( (float)m_fifoData.redLedRaw, dcFilterRed.w, ALPHA );
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	ee07 3a90 	vmov	s15, r3
 8002104:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002108:	4b88      	ldr	r3, [pc, #544]	@ (800232c <pulseOximeter_update+0x288>)
 800210a:	ed93 7a00 	vldr	s14, [r3]
 800210e:	ed9f 1a86 	vldr	s2, [pc, #536]	@ 8002328 <pulseOximeter_update+0x284>
 8002112:	eef0 0a47 	vmov.f32	s1, s14
 8002116:	eeb0 0a67 	vmov.f32	s0, s15
 800211a:	f7fe ff2d 	bl	8000f78 <dcRemoval>
 800211e:	eeb0 7a40 	vmov.f32	s14, s0
 8002122:	eef0 7a60 	vmov.f32	s15, s1
 8002126:	4b81      	ldr	r3, [pc, #516]	@ (800232c <pulseOximeter_update+0x288>)
 8002128:	ed83 7a00 	vstr	s14, [r3]
 800212c:	edc3 7a01 	vstr	s15, [r3, #4]

	float meanDiffResIR = meanDiff( dcFilterIR.result, &meanDiffIR);
 8002130:	4b7c      	ldr	r3, [pc, #496]	@ (8002324 <pulseOximeter_update+0x280>)
 8002132:	edd3 7a01 	vldr	s15, [r3, #4]
 8002136:	487e      	ldr	r0, [pc, #504]	@ (8002330 <pulseOximeter_update+0x28c>)
 8002138:	eeb0 0a67 	vmov.f32	s0, s15
 800213c:	f7fe ff98 	bl	8001070 <meanDiff>
 8002140:	ed87 0a0f 	vstr	s0, [r7, #60]	@ 0x3c
	lowPassButterworthFilter( meanDiffResIR/*-dcFilterIR.result*/, &lpbFilterIR );
 8002144:	487b      	ldr	r0, [pc, #492]	@ (8002334 <pulseOximeter_update+0x290>)
 8002146:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 800214a:	f7fe ff49 	bl	8000fe0 <lowPassButterworthFilter>

	irACValueSqSum += dcFilterIR.result * dcFilterIR.result;
 800214e:	4b75      	ldr	r3, [pc, #468]	@ (8002324 <pulseOximeter_update+0x280>)
 8002150:	ed93 7a01 	vldr	s14, [r3, #4]
 8002154:	4b73      	ldr	r3, [pc, #460]	@ (8002324 <pulseOximeter_update+0x280>)
 8002156:	edd3 7a01 	vldr	s15, [r3, #4]
 800215a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800215e:	4b76      	ldr	r3, [pc, #472]	@ (8002338 <pulseOximeter_update+0x294>)
 8002160:	edd3 7a00 	vldr	s15, [r3]
 8002164:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002168:	4b73      	ldr	r3, [pc, #460]	@ (8002338 <pulseOximeter_update+0x294>)
 800216a:	edc3 7a00 	vstr	s15, [r3]
	redACValueSqSum += dcFilterRed.result * dcFilterRed.result;
 800216e:	4b6f      	ldr	r3, [pc, #444]	@ (800232c <pulseOximeter_update+0x288>)
 8002170:	ed93 7a01 	vldr	s14, [r3, #4]
 8002174:	4b6d      	ldr	r3, [pc, #436]	@ (800232c <pulseOximeter_update+0x288>)
 8002176:	edd3 7a01 	vldr	s15, [r3, #4]
 800217a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800217e:	4b6f      	ldr	r3, [pc, #444]	@ (800233c <pulseOximeter_update+0x298>)
 8002180:	edd3 7a00 	vldr	s15, [r3]
 8002184:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002188:	4b6c      	ldr	r3, [pc, #432]	@ (800233c <pulseOximeter_update+0x298>)
 800218a:	edc3 7a00 	vstr	s15, [r3]
	samplesRecorded++;
 800218e:	4b6c      	ldr	r3, [pc, #432]	@ (8002340 <pulseOximeter_update+0x29c>)
 8002190:	881b      	ldrh	r3, [r3, #0]
 8002192:	3301      	adds	r3, #1
 8002194:	b29a      	uxth	r2, r3
 8002196:	4b6a      	ldr	r3, [pc, #424]	@ (8002340 <pulseOximeter_update+0x29c>)
 8002198:	801a      	strh	r2, [r3, #0]

	if( detectPulse( lpbFilterIR.result ) &&  samplesRecorded > 0 )
 800219a:	4b66      	ldr	r3, [pc, #408]	@ (8002334 <pulseOximeter_update+0x290>)
 800219c:	edd3 7a02 	vldr	s15, [r3, #8]
 80021a0:	eeb0 0a67 	vmov.f32	s0, s15
 80021a4:	f7ff fe50 	bl	8001e48 <detectPulse>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	f000 8088 	beq.w	80022c0 <pulseOximeter_update+0x21c>
 80021b0:	4b63      	ldr	r3, [pc, #396]	@ (8002340 <pulseOximeter_update+0x29c>)
 80021b2:	881b      	ldrh	r3, [r3, #0]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	f000 8083 	beq.w	80022c0 <pulseOximeter_update+0x21c>
	{
		result.pulseDetected=true;
 80021ba:	2301      	movs	r3, #1
 80021bc:	743b      	strb	r3, [r7, #16]
		pulsesDetected++;
 80021be:	4b61      	ldr	r3, [pc, #388]	@ (8002344 <pulseOximeter_update+0x2a0>)
 80021c0:	881b      	ldrh	r3, [r3, #0]
 80021c2:	3301      	adds	r3, #1
 80021c4:	b29a      	uxth	r2, r3
 80021c6:	4b5f      	ldr	r3, [pc, #380]	@ (8002344 <pulseOximeter_update+0x2a0>)
 80021c8:	801a      	strh	r2, [r3, #0]

		if( (pulsesDetected % RESET_SPO2_EVERY_N_PULSES == 0) )
 80021ca:	4b5e      	ldr	r3, [pc, #376]	@ (8002344 <pulseOximeter_update+0x2a0>)
 80021cc:	881b      	ldrh	r3, [r3, #0]
 80021ce:	f003 0303 	and.w	r3, r3, #3
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d173      	bne.n	80022c0 <pulseOximeter_update+0x21c>
		{
			float ratioRMS = log( sqrt(redACValueSqSum/samplesRecorded) ) / log( sqrt(irACValueSqSum/samplesRecorded) );
 80021d8:	4b58      	ldr	r3, [pc, #352]	@ (800233c <pulseOximeter_update+0x298>)
 80021da:	ed93 7a00 	vldr	s14, [r3]
 80021de:	4b58      	ldr	r3, [pc, #352]	@ (8002340 <pulseOximeter_update+0x29c>)
 80021e0:	881b      	ldrh	r3, [r3, #0]
 80021e2:	ee07 3a90 	vmov	s15, r3
 80021e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021ea:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80021ee:	ee16 0a90 	vmov	r0, s13
 80021f2:	f7fe f9a9 	bl	8000548 <__aeabi_f2d>
 80021f6:	4602      	mov	r2, r0
 80021f8:	460b      	mov	r3, r1
 80021fa:	ec43 2b10 	vmov	d0, r2, r3
 80021fe:	f00d fe2d 	bl	800fe5c <sqrt>
 8002202:	eeb0 7a40 	vmov.f32	s14, s0
 8002206:	eef0 7a60 	vmov.f32	s15, s1
 800220a:	eeb0 0a47 	vmov.f32	s0, s14
 800220e:	eef0 0a67 	vmov.f32	s1, s15
 8002212:	f00d fde5 	bl	800fde0 <log>
 8002216:	ec55 4b10 	vmov	r4, r5, d0
 800221a:	4b47      	ldr	r3, [pc, #284]	@ (8002338 <pulseOximeter_update+0x294>)
 800221c:	ed93 7a00 	vldr	s14, [r3]
 8002220:	4b47      	ldr	r3, [pc, #284]	@ (8002340 <pulseOximeter_update+0x29c>)
 8002222:	881b      	ldrh	r3, [r3, #0]
 8002224:	ee07 3a90 	vmov	s15, r3
 8002228:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800222c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002230:	ee16 0a90 	vmov	r0, s13
 8002234:	f7fe f988 	bl	8000548 <__aeabi_f2d>
 8002238:	4602      	mov	r2, r0
 800223a:	460b      	mov	r3, r1
 800223c:	ec43 2b10 	vmov	d0, r2, r3
 8002240:	f00d fe0c 	bl	800fe5c <sqrt>
 8002244:	eeb0 7a40 	vmov.f32	s14, s0
 8002248:	eef0 7a60 	vmov.f32	s15, s1
 800224c:	eeb0 0a47 	vmov.f32	s0, s14
 8002250:	eef0 0a67 	vmov.f32	s1, s15
 8002254:	f00d fdc4 	bl	800fde0 <log>
 8002258:	ec53 2b10 	vmov	r2, r3, d0
 800225c:	4620      	mov	r0, r4
 800225e:	4629      	mov	r1, r5
 8002260:	f7fe faf4 	bl	800084c <__aeabi_ddiv>
 8002264:	4602      	mov	r2, r0
 8002266:	460b      	mov	r3, r1
 8002268:	4610      	mov	r0, r2
 800226a:	4619      	mov	r1, r3
 800226c:	f7fe fcbc 	bl	8000be8 <__aeabi_d2f>
 8002270:	4603      	mov	r3, r0
 8002272:	63bb      	str	r3, [r7, #56]	@ 0x38
			currentSpO2Value = 114.0 - 18.0 * ratioRMS;
 8002274:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002276:	f7fe f967 	bl	8000548 <__aeabi_f2d>
 800227a:	f04f 0200 	mov.w	r2, #0
 800227e:	4b32      	ldr	r3, [pc, #200]	@ (8002348 <pulseOximeter_update+0x2a4>)
 8002280:	f7fe f9ba 	bl	80005f8 <__aeabi_dmul>
 8002284:	4602      	mov	r2, r0
 8002286:	460b      	mov	r3, r1
 8002288:	f04f 0000 	mov.w	r0, #0
 800228c:	492f      	ldr	r1, [pc, #188]	@ (800234c <pulseOximeter_update+0x2a8>)
 800228e:	f7fd fffb 	bl	8000288 <__aeabi_dsub>
 8002292:	4602      	mov	r2, r0
 8002294:	460b      	mov	r3, r1
 8002296:	4610      	mov	r0, r2
 8002298:	4619      	mov	r1, r3
 800229a:	f7fe fca5 	bl	8000be8 <__aeabi_d2f>
 800229e:	4603      	mov	r3, r0
 80022a0:	4a1e      	ldr	r2, [pc, #120]	@ (800231c <pulseOximeter_update+0x278>)
 80022a2:	6013      	str	r3, [r2, #0]

			//uint8_t ratio =  ((redACValueSqSum/samplesRecorded) * 100) / (irACValueSqSum/samplesRecorded);
			//if (ratio > 183) ratio = 183;
			//currentSpO2Value = uch_spo2_table[ratio];

			result.SpO2 = currentSpO2Value;
 80022a4:	4b1d      	ldr	r3, [pc, #116]	@ (800231c <pulseOximeter_update+0x278>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	627b      	str	r3, [r7, #36]	@ 0x24

			irACValueSqSum = 0;
 80022aa:	4b23      	ldr	r3, [pc, #140]	@ (8002338 <pulseOximeter_update+0x294>)
 80022ac:	f04f 0200 	mov.w	r2, #0
 80022b0:	601a      	str	r2, [r3, #0]
			redACValueSqSum = 0;
 80022b2:	4b22      	ldr	r3, [pc, #136]	@ (800233c <pulseOximeter_update+0x298>)
 80022b4:	f04f 0200 	mov.w	r2, #0
 80022b8:	601a      	str	r2, [r3, #0]
			samplesRecorded = 0;
 80022ba:	4b21      	ldr	r3, [pc, #132]	@ (8002340 <pulseOximeter_update+0x29c>)
 80022bc:	2200      	movs	r2, #0
 80022be:	801a      	strh	r2, [r3, #0]
		}
	}

	balanceIntesities( dcFilterRed.w, dcFilterIR.w );
 80022c0:	4b1a      	ldr	r3, [pc, #104]	@ (800232c <pulseOximeter_update+0x288>)
 80022c2:	edd3 7a00 	vldr	s15, [r3]
 80022c6:	4b17      	ldr	r3, [pc, #92]	@ (8002324 <pulseOximeter_update+0x280>)
 80022c8:	ed93 7a00 	vldr	s14, [r3]
 80022cc:	eef0 0a47 	vmov.f32	s1, s14
 80022d0:	eeb0 0a67 	vmov.f32	s0, s15
 80022d4:	f7ff fe8a 	bl	8001fec <balanceIntesities>

	result.heartBPM = currentBPM;
 80022d8:	4b1d      	ldr	r3, [pc, #116]	@ (8002350 <pulseOximeter_update+0x2ac>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	617b      	str	r3, [r7, #20]
	result.irCardiogram = lpbFilterIR.result;
 80022de:	4b15      	ldr	r3, [pc, #84]	@ (8002334 <pulseOximeter_update+0x290>)
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	61bb      	str	r3, [r7, #24]
	result.irDcValue = dcFilterIR.w;
 80022e4:	4b0f      	ldr	r3, [pc, #60]	@ (8002324 <pulseOximeter_update+0x280>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	61fb      	str	r3, [r7, #28]
	result.redDcValue = dcFilterRed.w;
 80022ea:	4b10      	ldr	r3, [pc, #64]	@ (800232c <pulseOximeter_update+0x288>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	623b      	str	r3, [r7, #32]
	result.dcFilteredIR = dcFilterIR.result;
 80022f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002324 <pulseOximeter_update+0x280>)
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	result.dcFilteredRed = dcFilterRed.result;
 80022f6:	4b0d      	ldr	r3, [pc, #52]	@ (800232c <pulseOximeter_update+0x288>)
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	633b      	str	r3, [r7, #48]	@ 0x30

	return result;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	461d      	mov	r5, r3
 8002300:	f107 0410 	add.w	r4, r7, #16
 8002304:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002306:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002308:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800230a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800230c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002310:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8002314:	68f8      	ldr	r0, [r7, #12]
 8002316:	3740      	adds	r7, #64	@ 0x40
 8002318:	46bd      	mov	sp, r7
 800231a:	bdb0      	pop	{r4, r5, r7, pc}
 800231c:	200006d8 	.word	0x200006d8
 8002320:	20000000 	.word	0x20000000
 8002324:	20000638 	.word	0x20000638
 8002328:	3f733333 	.word	0x3f733333
 800232c:	20000640 	.word	0x20000640
 8002330:	20000648 	.word	0x20000648
 8002334:	20000690 	.word	0x20000690
 8002338:	200006cc 	.word	0x200006cc
 800233c:	200006d0 	.word	0x200006d0
 8002340:	200006d4 	.word	0x200006d4
 8002344:	200006d6 	.word	0x200006d6
 8002348:	40320000 	.word	0x40320000
 800234c:	405c8000 	.word	0x405c8000
 8002350:	2000069c 	.word	0x2000069c

08002354 <MAX30102_getBPM>:

float MAX30102_getBPM(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
	return pulseOximeter.heartBPM;
 8002358:	4b04      	ldr	r3, [pc, #16]	@ (800236c <MAX30102_getBPM+0x18>)
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	ee07 3a90 	vmov	s15, r3
}
 8002360:	eeb0 0a67 	vmov.f32	s0, s15
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr
 800236c:	20000610 	.word	0x20000610

08002370 <MAX30102_getSPO2>:
float MAX30102_getSPO2(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
	return pulseOximeter.SpO2;
 8002374:	4b04      	ldr	r3, [pc, #16]	@ (8002388 <MAX30102_getSPO2+0x18>)
 8002376:	695b      	ldr	r3, [r3, #20]
 8002378:	ee07 3a90 	vmov	s15, r3
}
 800237c:	eeb0 0a67 	vmov.f32	s0, s15
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr
 8002388:	20000610 	.word	0x20000610

0800238c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002392:	2300      	movs	r3, #0
 8002394:	607b      	str	r3, [r7, #4]
 8002396:	4b10      	ldr	r3, [pc, #64]	@ (80023d8 <HAL_MspInit+0x4c>)
 8002398:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800239a:	4a0f      	ldr	r2, [pc, #60]	@ (80023d8 <HAL_MspInit+0x4c>)
 800239c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80023a2:	4b0d      	ldr	r3, [pc, #52]	@ (80023d8 <HAL_MspInit+0x4c>)
 80023a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023aa:	607b      	str	r3, [r7, #4]
 80023ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023ae:	2300      	movs	r3, #0
 80023b0:	603b      	str	r3, [r7, #0]
 80023b2:	4b09      	ldr	r3, [pc, #36]	@ (80023d8 <HAL_MspInit+0x4c>)
 80023b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b6:	4a08      	ldr	r2, [pc, #32]	@ (80023d8 <HAL_MspInit+0x4c>)
 80023b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80023be:	4b06      	ldr	r3, [pc, #24]	@ (80023d8 <HAL_MspInit+0x4c>)
 80023c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023c6:	603b      	str	r3, [r7, #0]
 80023c8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80023ca:	2007      	movs	r0, #7
 80023cc:	f001 f986 	bl	80036dc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023d0:	bf00      	nop
 80023d2:	3708      	adds	r7, #8
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	40023800 	.word	0x40023800

080023dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b08c      	sub	sp, #48	@ 0x30
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023e4:	f107 031c 	add.w	r3, r7, #28
 80023e8:	2200      	movs	r2, #0
 80023ea:	601a      	str	r2, [r3, #0]
 80023ec:	605a      	str	r2, [r3, #4]
 80023ee:	609a      	str	r2, [r3, #8]
 80023f0:	60da      	str	r2, [r3, #12]
 80023f2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a5f      	ldr	r2, [pc, #380]	@ (8002578 <HAL_ADC_MspInit+0x19c>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d159      	bne.n	80024b2 <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80023fe:	2300      	movs	r3, #0
 8002400:	61bb      	str	r3, [r7, #24]
 8002402:	4b5e      	ldr	r3, [pc, #376]	@ (800257c <HAL_ADC_MspInit+0x1a0>)
 8002404:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002406:	4a5d      	ldr	r2, [pc, #372]	@ (800257c <HAL_ADC_MspInit+0x1a0>)
 8002408:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800240c:	6453      	str	r3, [r2, #68]	@ 0x44
 800240e:	4b5b      	ldr	r3, [pc, #364]	@ (800257c <HAL_ADC_MspInit+0x1a0>)
 8002410:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002412:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002416:	61bb      	str	r3, [r7, #24]
 8002418:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800241a:	2300      	movs	r3, #0
 800241c:	617b      	str	r3, [r7, #20]
 800241e:	4b57      	ldr	r3, [pc, #348]	@ (800257c <HAL_ADC_MspInit+0x1a0>)
 8002420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002422:	4a56      	ldr	r2, [pc, #344]	@ (800257c <HAL_ADC_MspInit+0x1a0>)
 8002424:	f043 0301 	orr.w	r3, r3, #1
 8002428:	6313      	str	r3, [r2, #48]	@ 0x30
 800242a:	4b54      	ldr	r3, [pc, #336]	@ (800257c <HAL_ADC_MspInit+0x1a0>)
 800242c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	617b      	str	r3, [r7, #20]
 8002434:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002436:	2301      	movs	r3, #1
 8002438:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800243a:	2303      	movs	r3, #3
 800243c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243e:	2300      	movs	r3, #0
 8002440:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002442:	f107 031c 	add.w	r3, r7, #28
 8002446:	4619      	mov	r1, r3
 8002448:	484d      	ldr	r0, [pc, #308]	@ (8002580 <HAL_ADC_MspInit+0x1a4>)
 800244a:	f001 fcf9 	bl	8003e40 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800244e:	4b4d      	ldr	r3, [pc, #308]	@ (8002584 <HAL_ADC_MspInit+0x1a8>)
 8002450:	4a4d      	ldr	r2, [pc, #308]	@ (8002588 <HAL_ADC_MspInit+0x1ac>)
 8002452:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002454:	4b4b      	ldr	r3, [pc, #300]	@ (8002584 <HAL_ADC_MspInit+0x1a8>)
 8002456:	2200      	movs	r2, #0
 8002458:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800245a:	4b4a      	ldr	r3, [pc, #296]	@ (8002584 <HAL_ADC_MspInit+0x1a8>)
 800245c:	2200      	movs	r2, #0
 800245e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002460:	4b48      	ldr	r3, [pc, #288]	@ (8002584 <HAL_ADC_MspInit+0x1a8>)
 8002462:	2200      	movs	r2, #0
 8002464:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002466:	4b47      	ldr	r3, [pc, #284]	@ (8002584 <HAL_ADC_MspInit+0x1a8>)
 8002468:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800246c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800246e:	4b45      	ldr	r3, [pc, #276]	@ (8002584 <HAL_ADC_MspInit+0x1a8>)
 8002470:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002474:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002476:	4b43      	ldr	r3, [pc, #268]	@ (8002584 <HAL_ADC_MspInit+0x1a8>)
 8002478:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800247c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800247e:	4b41      	ldr	r3, [pc, #260]	@ (8002584 <HAL_ADC_MspInit+0x1a8>)
 8002480:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002484:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002486:	4b3f      	ldr	r3, [pc, #252]	@ (8002584 <HAL_ADC_MspInit+0x1a8>)
 8002488:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800248c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800248e:	4b3d      	ldr	r3, [pc, #244]	@ (8002584 <HAL_ADC_MspInit+0x1a8>)
 8002490:	2200      	movs	r2, #0
 8002492:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002494:	483b      	ldr	r0, [pc, #236]	@ (8002584 <HAL_ADC_MspInit+0x1a8>)
 8002496:	f001 f963 	bl	8003760 <HAL_DMA_Init>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d001      	beq.n	80024a4 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 80024a0:	f7ff fb62 	bl	8001b68 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	4a37      	ldr	r2, [pc, #220]	@ (8002584 <HAL_ADC_MspInit+0x1a8>)
 80024a8:	639a      	str	r2, [r3, #56]	@ 0x38
 80024aa:	4a36      	ldr	r2, [pc, #216]	@ (8002584 <HAL_ADC_MspInit+0x1a8>)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80024b0:	e05e      	b.n	8002570 <HAL_ADC_MspInit+0x194>
  else if(hadc->Instance==ADC2)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a35      	ldr	r2, [pc, #212]	@ (800258c <HAL_ADC_MspInit+0x1b0>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d159      	bne.n	8002570 <HAL_ADC_MspInit+0x194>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80024bc:	2300      	movs	r3, #0
 80024be:	613b      	str	r3, [r7, #16]
 80024c0:	4b2e      	ldr	r3, [pc, #184]	@ (800257c <HAL_ADC_MspInit+0x1a0>)
 80024c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024c4:	4a2d      	ldr	r2, [pc, #180]	@ (800257c <HAL_ADC_MspInit+0x1a0>)
 80024c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80024ca:	6453      	str	r3, [r2, #68]	@ 0x44
 80024cc:	4b2b      	ldr	r3, [pc, #172]	@ (800257c <HAL_ADC_MspInit+0x1a0>)
 80024ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80024d4:	613b      	str	r3, [r7, #16]
 80024d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024d8:	2300      	movs	r3, #0
 80024da:	60fb      	str	r3, [r7, #12]
 80024dc:	4b27      	ldr	r3, [pc, #156]	@ (800257c <HAL_ADC_MspInit+0x1a0>)
 80024de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024e0:	4a26      	ldr	r2, [pc, #152]	@ (800257c <HAL_ADC_MspInit+0x1a0>)
 80024e2:	f043 0301 	orr.w	r3, r3, #1
 80024e6:	6313      	str	r3, [r2, #48]	@ 0x30
 80024e8:	4b24      	ldr	r3, [pc, #144]	@ (800257c <HAL_ADC_MspInit+0x1a0>)
 80024ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ec:	f003 0301 	and.w	r3, r3, #1
 80024f0:	60fb      	str	r3, [r7, #12]
 80024f2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80024f4:	2302      	movs	r3, #2
 80024f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024f8:	2303      	movs	r3, #3
 80024fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fc:	2300      	movs	r3, #0
 80024fe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002500:	f107 031c 	add.w	r3, r7, #28
 8002504:	4619      	mov	r1, r3
 8002506:	481e      	ldr	r0, [pc, #120]	@ (8002580 <HAL_ADC_MspInit+0x1a4>)
 8002508:	f001 fc9a 	bl	8003e40 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 800250c:	4b20      	ldr	r3, [pc, #128]	@ (8002590 <HAL_ADC_MspInit+0x1b4>)
 800250e:	4a21      	ldr	r2, [pc, #132]	@ (8002594 <HAL_ADC_MspInit+0x1b8>)
 8002510:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8002512:	4b1f      	ldr	r3, [pc, #124]	@ (8002590 <HAL_ADC_MspInit+0x1b4>)
 8002514:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002518:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800251a:	4b1d      	ldr	r3, [pc, #116]	@ (8002590 <HAL_ADC_MspInit+0x1b4>)
 800251c:	2200      	movs	r2, #0
 800251e:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002520:	4b1b      	ldr	r3, [pc, #108]	@ (8002590 <HAL_ADC_MspInit+0x1b4>)
 8002522:	2200      	movs	r2, #0
 8002524:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8002526:	4b1a      	ldr	r3, [pc, #104]	@ (8002590 <HAL_ADC_MspInit+0x1b4>)
 8002528:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800252c:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800252e:	4b18      	ldr	r3, [pc, #96]	@ (8002590 <HAL_ADC_MspInit+0x1b4>)
 8002530:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002534:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002536:	4b16      	ldr	r3, [pc, #88]	@ (8002590 <HAL_ADC_MspInit+0x1b4>)
 8002538:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800253c:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800253e:	4b14      	ldr	r3, [pc, #80]	@ (8002590 <HAL_ADC_MspInit+0x1b4>)
 8002540:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002544:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002546:	4b12      	ldr	r3, [pc, #72]	@ (8002590 <HAL_ADC_MspInit+0x1b4>)
 8002548:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800254c:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800254e:	4b10      	ldr	r3, [pc, #64]	@ (8002590 <HAL_ADC_MspInit+0x1b4>)
 8002550:	2200      	movs	r2, #0
 8002552:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8002554:	480e      	ldr	r0, [pc, #56]	@ (8002590 <HAL_ADC_MspInit+0x1b4>)
 8002556:	f001 f903 	bl	8003760 <HAL_DMA_Init>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d001      	beq.n	8002564 <HAL_ADC_MspInit+0x188>
      Error_Handler();
 8002560:	f7ff fb02 	bl	8001b68 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	4a0a      	ldr	r2, [pc, #40]	@ (8002590 <HAL_ADC_MspInit+0x1b4>)
 8002568:	639a      	str	r2, [r3, #56]	@ 0x38
 800256a:	4a09      	ldr	r2, [pc, #36]	@ (8002590 <HAL_ADC_MspInit+0x1b4>)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002570:	bf00      	nop
 8002572:	3730      	adds	r7, #48	@ 0x30
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	40012000 	.word	0x40012000
 800257c:	40023800 	.word	0x40023800
 8002580:	40020000 	.word	0x40020000
 8002584:	20000384 	.word	0x20000384
 8002588:	40026410 	.word	0x40026410
 800258c:	40012100 	.word	0x40012100
 8002590:	200003e4 	.word	0x200003e4
 8002594:	40026440 	.word	0x40026440

08002598 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b08a      	sub	sp, #40	@ 0x28
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025a0:	f107 0314 	add.w	r3, r7, #20
 80025a4:	2200      	movs	r2, #0
 80025a6:	601a      	str	r2, [r3, #0]
 80025a8:	605a      	str	r2, [r3, #4]
 80025aa:	609a      	str	r2, [r3, #8]
 80025ac:	60da      	str	r2, [r3, #12]
 80025ae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a19      	ldr	r2, [pc, #100]	@ (800261c <HAL_I2C_MspInit+0x84>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d12c      	bne.n	8002614 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025ba:	2300      	movs	r3, #0
 80025bc:	613b      	str	r3, [r7, #16]
 80025be:	4b18      	ldr	r3, [pc, #96]	@ (8002620 <HAL_I2C_MspInit+0x88>)
 80025c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025c2:	4a17      	ldr	r2, [pc, #92]	@ (8002620 <HAL_I2C_MspInit+0x88>)
 80025c4:	f043 0302 	orr.w	r3, r3, #2
 80025c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80025ca:	4b15      	ldr	r3, [pc, #84]	@ (8002620 <HAL_I2C_MspInit+0x88>)
 80025cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ce:	f003 0302 	and.w	r3, r3, #2
 80025d2:	613b      	str	r3, [r7, #16]
 80025d4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80025d6:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80025da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025dc:	2312      	movs	r3, #18
 80025de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025e0:	2301      	movs	r3, #1
 80025e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025e4:	2300      	movs	r3, #0
 80025e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80025e8:	2304      	movs	r3, #4
 80025ea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025ec:	f107 0314 	add.w	r3, r7, #20
 80025f0:	4619      	mov	r1, r3
 80025f2:	480c      	ldr	r0, [pc, #48]	@ (8002624 <HAL_I2C_MspInit+0x8c>)
 80025f4:	f001 fc24 	bl	8003e40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80025f8:	2300      	movs	r3, #0
 80025fa:	60fb      	str	r3, [r7, #12]
 80025fc:	4b08      	ldr	r3, [pc, #32]	@ (8002620 <HAL_I2C_MspInit+0x88>)
 80025fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002600:	4a07      	ldr	r2, [pc, #28]	@ (8002620 <HAL_I2C_MspInit+0x88>)
 8002602:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002606:	6413      	str	r3, [r2, #64]	@ 0x40
 8002608:	4b05      	ldr	r3, [pc, #20]	@ (8002620 <HAL_I2C_MspInit+0x88>)
 800260a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800260c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002610:	60fb      	str	r3, [r7, #12]
 8002612:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002614:	bf00      	nop
 8002616:	3728      	adds	r7, #40	@ 0x28
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	40005400 	.word	0x40005400
 8002620:	40023800 	.word	0x40023800
 8002624:	40020400 	.word	0x40020400

08002628 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b08e      	sub	sp, #56	@ 0x38
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002630:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002634:	2200      	movs	r2, #0
 8002636:	601a      	str	r2, [r3, #0]
 8002638:	605a      	str	r2, [r3, #4]
 800263a:	609a      	str	r2, [r3, #8]
 800263c:	60da      	str	r2, [r3, #12]
 800263e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002640:	f107 0314 	add.w	r3, r7, #20
 8002644:	2200      	movs	r2, #0
 8002646:	601a      	str	r2, [r3, #0]
 8002648:	605a      	str	r2, [r3, #4]
 800264a:	609a      	str	r2, [r3, #8]
 800264c:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI2)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a4a      	ldr	r2, [pc, #296]	@ (800277c <HAL_I2S_MspInit+0x154>)
 8002654:	4293      	cmp	r3, r2
 8002656:	f040 808d 	bne.w	8002774 <HAL_I2S_MspInit+0x14c>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800265a:	2301      	movs	r3, #1
 800265c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 336;
 800265e:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8002662:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8002664:	2302      	movs	r3, #2
 8002666:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002668:	f107 0314 	add.w	r3, r7, #20
 800266c:	4618      	mov	r0, r3
 800266e:	f005 fa7f 	bl	8007b70 <HAL_RCCEx_PeriphCLKConfig>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d001      	beq.n	800267c <HAL_I2S_MspInit+0x54>
    {
      Error_Handler();
 8002678:	f7ff fa76 	bl	8001b68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800267c:	2300      	movs	r3, #0
 800267e:	613b      	str	r3, [r7, #16]
 8002680:	4b3f      	ldr	r3, [pc, #252]	@ (8002780 <HAL_I2S_MspInit+0x158>)
 8002682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002684:	4a3e      	ldr	r2, [pc, #248]	@ (8002780 <HAL_I2S_MspInit+0x158>)
 8002686:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800268a:	6413      	str	r3, [r2, #64]	@ 0x40
 800268c:	4b3c      	ldr	r3, [pc, #240]	@ (8002780 <HAL_I2S_MspInit+0x158>)
 800268e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002690:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002694:	613b      	str	r3, [r7, #16]
 8002696:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002698:	2300      	movs	r3, #0
 800269a:	60fb      	str	r3, [r7, #12]
 800269c:	4b38      	ldr	r3, [pc, #224]	@ (8002780 <HAL_I2S_MspInit+0x158>)
 800269e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026a0:	4a37      	ldr	r2, [pc, #220]	@ (8002780 <HAL_I2S_MspInit+0x158>)
 80026a2:	f043 0304 	orr.w	r3, r3, #4
 80026a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80026a8:	4b35      	ldr	r3, [pc, #212]	@ (8002780 <HAL_I2S_MspInit+0x158>)
 80026aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ac:	f003 0304 	and.w	r3, r3, #4
 80026b0:	60fb      	str	r3, [r7, #12]
 80026b2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026b4:	2300      	movs	r3, #0
 80026b6:	60bb      	str	r3, [r7, #8]
 80026b8:	4b31      	ldr	r3, [pc, #196]	@ (8002780 <HAL_I2S_MspInit+0x158>)
 80026ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026bc:	4a30      	ldr	r2, [pc, #192]	@ (8002780 <HAL_I2S_MspInit+0x158>)
 80026be:	f043 0302 	orr.w	r3, r3, #2
 80026c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80026c4:	4b2e      	ldr	r3, [pc, #184]	@ (8002780 <HAL_I2S_MspInit+0x158>)
 80026c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026c8:	f003 0302 	and.w	r3, r3, #2
 80026cc:	60bb      	str	r3, [r7, #8]
 80026ce:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80026d0:	2308      	movs	r3, #8
 80026d2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d4:	2302      	movs	r3, #2
 80026d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d8:	2300      	movs	r3, #0
 80026da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026dc:	2300      	movs	r3, #0
 80026de:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80026e0:	2305      	movs	r3, #5
 80026e2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026e8:	4619      	mov	r1, r3
 80026ea:	4826      	ldr	r0, [pc, #152]	@ (8002784 <HAL_I2S_MspInit+0x15c>)
 80026ec:	f001 fba8 	bl	8003e40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 80026f0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80026f4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f6:	2302      	movs	r3, #2
 80026f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fa:	2300      	movs	r3, #0
 80026fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026fe:	2300      	movs	r3, #0
 8002700:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002702:	2305      	movs	r3, #5
 8002704:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002706:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800270a:	4619      	mov	r1, r3
 800270c:	481e      	ldr	r0, [pc, #120]	@ (8002788 <HAL_I2S_MspInit+0x160>)
 800270e:	f001 fb97 	bl	8003e40 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8002712:	4b1e      	ldr	r3, [pc, #120]	@ (800278c <HAL_I2S_MspInit+0x164>)
 8002714:	4a1e      	ldr	r2, [pc, #120]	@ (8002790 <HAL_I2S_MspInit+0x168>)
 8002716:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8002718:	4b1c      	ldr	r3, [pc, #112]	@ (800278c <HAL_I2S_MspInit+0x164>)
 800271a:	2200      	movs	r2, #0
 800271c:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800271e:	4b1b      	ldr	r3, [pc, #108]	@ (800278c <HAL_I2S_MspInit+0x164>)
 8002720:	2240      	movs	r2, #64	@ 0x40
 8002722:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002724:	4b19      	ldr	r3, [pc, #100]	@ (800278c <HAL_I2S_MspInit+0x164>)
 8002726:	2200      	movs	r2, #0
 8002728:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800272a:	4b18      	ldr	r3, [pc, #96]	@ (800278c <HAL_I2S_MspInit+0x164>)
 800272c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002730:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002732:	4b16      	ldr	r3, [pc, #88]	@ (800278c <HAL_I2S_MspInit+0x164>)
 8002734:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002738:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800273a:	4b14      	ldr	r3, [pc, #80]	@ (800278c <HAL_I2S_MspInit+0x164>)
 800273c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002740:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8002742:	4b12      	ldr	r3, [pc, #72]	@ (800278c <HAL_I2S_MspInit+0x164>)
 8002744:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002748:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800274a:	4b10      	ldr	r3, [pc, #64]	@ (800278c <HAL_I2S_MspInit+0x164>)
 800274c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002750:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002752:	4b0e      	ldr	r3, [pc, #56]	@ (800278c <HAL_I2S_MspInit+0x164>)
 8002754:	2200      	movs	r2, #0
 8002756:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8002758:	480c      	ldr	r0, [pc, #48]	@ (800278c <HAL_I2S_MspInit+0x164>)
 800275a:	f001 f801 	bl	8003760 <HAL_DMA_Init>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d001      	beq.n	8002768 <HAL_I2S_MspInit+0x140>
    {
      Error_Handler();
 8002764:	f7ff fa00 	bl	8001b68 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	4a08      	ldr	r2, [pc, #32]	@ (800278c <HAL_I2S_MspInit+0x164>)
 800276c:	639a      	str	r2, [r3, #56]	@ 0x38
 800276e:	4a07      	ldr	r2, [pc, #28]	@ (800278c <HAL_I2S_MspInit+0x164>)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8002774:	bf00      	nop
 8002776:	3738      	adds	r7, #56	@ 0x38
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	40003800 	.word	0x40003800
 8002780:	40023800 	.word	0x40023800
 8002784:	40020800 	.word	0x40020800
 8002788:	40020400 	.word	0x40020400
 800278c:	200004e0 	.word	0x200004e0
 8002790:	40026070 	.word	0x40026070

08002794 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002794:	b480      	push	{r7}
 8002796:	b085      	sub	sp, #20
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027a4:	d10d      	bne.n	80027c2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80027a6:	2300      	movs	r3, #0
 80027a8:	60fb      	str	r3, [r7, #12]
 80027aa:	4b09      	ldr	r3, [pc, #36]	@ (80027d0 <HAL_TIM_Base_MspInit+0x3c>)
 80027ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ae:	4a08      	ldr	r2, [pc, #32]	@ (80027d0 <HAL_TIM_Base_MspInit+0x3c>)
 80027b0:	f043 0301 	orr.w	r3, r3, #1
 80027b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80027b6:	4b06      	ldr	r3, [pc, #24]	@ (80027d0 <HAL_TIM_Base_MspInit+0x3c>)
 80027b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ba:	f003 0301 	and.w	r3, r3, #1
 80027be:	60fb      	str	r3, [r7, #12]
 80027c0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80027c2:	bf00      	nop
 80027c4:	3714      	adds	r7, #20
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	40023800 	.word	0x40023800

080027d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b08a      	sub	sp, #40	@ 0x28
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027dc:	f107 0314 	add.w	r3, r7, #20
 80027e0:	2200      	movs	r2, #0
 80027e2:	601a      	str	r2, [r3, #0]
 80027e4:	605a      	str	r2, [r3, #4]
 80027e6:	609a      	str	r2, [r3, #8]
 80027e8:	60da      	str	r2, [r3, #12]
 80027ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a28      	ldr	r2, [pc, #160]	@ (8002894 <HAL_UART_MspInit+0xc0>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d14a      	bne.n	800288c <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80027f6:	2300      	movs	r3, #0
 80027f8:	613b      	str	r3, [r7, #16]
 80027fa:	4b27      	ldr	r3, [pc, #156]	@ (8002898 <HAL_UART_MspInit+0xc4>)
 80027fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027fe:	4a26      	ldr	r2, [pc, #152]	@ (8002898 <HAL_UART_MspInit+0xc4>)
 8002800:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002804:	6413      	str	r3, [r2, #64]	@ 0x40
 8002806:	4b24      	ldr	r3, [pc, #144]	@ (8002898 <HAL_UART_MspInit+0xc4>)
 8002808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800280a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800280e:	613b      	str	r3, [r7, #16]
 8002810:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002812:	2300      	movs	r3, #0
 8002814:	60fb      	str	r3, [r7, #12]
 8002816:	4b20      	ldr	r3, [pc, #128]	@ (8002898 <HAL_UART_MspInit+0xc4>)
 8002818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800281a:	4a1f      	ldr	r2, [pc, #124]	@ (8002898 <HAL_UART_MspInit+0xc4>)
 800281c:	f043 0304 	orr.w	r3, r3, #4
 8002820:	6313      	str	r3, [r2, #48]	@ 0x30
 8002822:	4b1d      	ldr	r3, [pc, #116]	@ (8002898 <HAL_UART_MspInit+0xc4>)
 8002824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002826:	f003 0304 	and.w	r3, r3, #4
 800282a:	60fb      	str	r3, [r7, #12]
 800282c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800282e:	2300      	movs	r3, #0
 8002830:	60bb      	str	r3, [r7, #8]
 8002832:	4b19      	ldr	r3, [pc, #100]	@ (8002898 <HAL_UART_MspInit+0xc4>)
 8002834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002836:	4a18      	ldr	r2, [pc, #96]	@ (8002898 <HAL_UART_MspInit+0xc4>)
 8002838:	f043 0308 	orr.w	r3, r3, #8
 800283c:	6313      	str	r3, [r2, #48]	@ 0x30
 800283e:	4b16      	ldr	r3, [pc, #88]	@ (8002898 <HAL_UART_MspInit+0xc4>)
 8002840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002842:	f003 0308 	and.w	r3, r3, #8
 8002846:	60bb      	str	r3, [r7, #8]
 8002848:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800284a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800284e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002850:	2302      	movs	r3, #2
 8002852:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002854:	2300      	movs	r3, #0
 8002856:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002858:	2303      	movs	r3, #3
 800285a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800285c:	2308      	movs	r3, #8
 800285e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002860:	f107 0314 	add.w	r3, r7, #20
 8002864:	4619      	mov	r1, r3
 8002866:	480d      	ldr	r0, [pc, #52]	@ (800289c <HAL_UART_MspInit+0xc8>)
 8002868:	f001 faea 	bl	8003e40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800286c:	2304      	movs	r3, #4
 800286e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002870:	2302      	movs	r3, #2
 8002872:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002874:	2300      	movs	r3, #0
 8002876:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002878:	2303      	movs	r3, #3
 800287a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800287c:	2308      	movs	r3, #8
 800287e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002880:	f107 0314 	add.w	r3, r7, #20
 8002884:	4619      	mov	r1, r3
 8002886:	4806      	ldr	r0, [pc, #24]	@ (80028a0 <HAL_UART_MspInit+0xcc>)
 8002888:	f001 fada 	bl	8003e40 <HAL_GPIO_Init>

  /* USER CODE END UART5_MspInit 1 */

  }

}
 800288c:	bf00      	nop
 800288e:	3728      	adds	r7, #40	@ 0x28
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	40005000 	.word	0x40005000
 8002898:	40023800 	.word	0x40023800
 800289c:	40020800 	.word	0x40020800
 80028a0:	40020c00 	.word	0x40020c00

080028a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028a4:	b480      	push	{r7}
 80028a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80028a8:	bf00      	nop
 80028aa:	e7fd      	b.n	80028a8 <NMI_Handler+0x4>

080028ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028b0:	bf00      	nop
 80028b2:	e7fd      	b.n	80028b0 <HardFault_Handler+0x4>

080028b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028b8:	bf00      	nop
 80028ba:	e7fd      	b.n	80028b8 <MemManage_Handler+0x4>

080028bc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028c0:	bf00      	nop
 80028c2:	e7fd      	b.n	80028c0 <BusFault_Handler+0x4>

080028c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028c8:	bf00      	nop
 80028ca:	e7fd      	b.n	80028c8 <UsageFault_Handler+0x4>

080028cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028cc:	b480      	push	{r7}
 80028ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028d0:	bf00      	nop
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr

080028da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028da:	b480      	push	{r7}
 80028dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028de:	bf00      	nop
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr

080028e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028ec:	bf00      	nop
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr

080028f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028f6:	b580      	push	{r7, lr}
 80028f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028fa:	f000 f98d 	bl	8002c18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028fe:	bf00      	nop
 8002900:	bd80      	pop	{r7, pc}

08002902 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002902:	b580      	push	{r7, lr}
 8002904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Pulse_Oximeter_Int_Pin);
 8002906:	2001      	movs	r0, #1
 8002908:	f001 fc6a 	bl	80041e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800290c:	bf00      	nop
 800290e:	bd80      	pop	{r7, pc}

08002910 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8002914:	4802      	ldr	r0, [pc, #8]	@ (8002920 <DMA1_Stream4_IRQHandler+0x10>)
 8002916:	f001 f829 	bl	800396c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800291a:	bf00      	nop
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	200004e0 	.word	0x200004e0

08002924 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002928:	4802      	ldr	r0, [pc, #8]	@ (8002934 <DMA2_Stream0_IRQHandler+0x10>)
 800292a:	f001 f81f 	bl	800396c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800292e:	bf00      	nop
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	20000384 	.word	0x20000384

08002938 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800293c:	4802      	ldr	r0, [pc, #8]	@ (8002948 <DMA2_Stream2_IRQHandler+0x10>)
 800293e:	f001 f815 	bl	800396c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002942:	bf00      	nop
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	200003e4 	.word	0x200003e4

0800294c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002950:	4802      	ldr	r0, [pc, #8]	@ (800295c <OTG_FS_IRQHandler+0x10>)
 8002952:	f003 fb67 	bl	8006024 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002956:	bf00      	nop
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	20001c98 	.word	0x20001c98

08002960 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002960:	b480      	push	{r7}
 8002962:	af00      	add	r7, sp, #0
  return 1;
 8002964:	2301      	movs	r3, #1
}
 8002966:	4618      	mov	r0, r3
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr

08002970 <_kill>:

int _kill(int pid, int sig)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800297a:	f00b fb61 	bl	800e040 <__errno>
 800297e:	4603      	mov	r3, r0
 8002980:	2216      	movs	r2, #22
 8002982:	601a      	str	r2, [r3, #0]
  return -1;
 8002984:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002988:	4618      	mov	r0, r3
 800298a:	3708      	adds	r7, #8
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}

08002990 <_exit>:

void _exit (int status)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002998:	f04f 31ff 	mov.w	r1, #4294967295
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f7ff ffe7 	bl	8002970 <_kill>
  while (1) {}    /* Make sure we hang here */
 80029a2:	bf00      	nop
 80029a4:	e7fd      	b.n	80029a2 <_exit+0x12>

080029a6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b086      	sub	sp, #24
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	60f8      	str	r0, [r7, #12]
 80029ae:	60b9      	str	r1, [r7, #8]
 80029b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029b2:	2300      	movs	r3, #0
 80029b4:	617b      	str	r3, [r7, #20]
 80029b6:	e00a      	b.n	80029ce <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80029b8:	f3af 8000 	nop.w
 80029bc:	4601      	mov	r1, r0
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	1c5a      	adds	r2, r3, #1
 80029c2:	60ba      	str	r2, [r7, #8]
 80029c4:	b2ca      	uxtb	r2, r1
 80029c6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	3301      	adds	r3, #1
 80029cc:	617b      	str	r3, [r7, #20]
 80029ce:	697a      	ldr	r2, [r7, #20]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	429a      	cmp	r2, r3
 80029d4:	dbf0      	blt.n	80029b8 <_read+0x12>
  }

  return len;
 80029d6:	687b      	ldr	r3, [r7, #4]
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3718      	adds	r7, #24
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}

080029e0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b086      	sub	sp, #24
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	60b9      	str	r1, [r7, #8]
 80029ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029ec:	2300      	movs	r3, #0
 80029ee:	617b      	str	r3, [r7, #20]
 80029f0:	e009      	b.n	8002a06 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	1c5a      	adds	r2, r3, #1
 80029f6:	60ba      	str	r2, [r7, #8]
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	4618      	mov	r0, r3
 80029fc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	3301      	adds	r3, #1
 8002a04:	617b      	str	r3, [r7, #20]
 8002a06:	697a      	ldr	r2, [r7, #20]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	dbf1      	blt.n	80029f2 <_write+0x12>
  }
  return len;
 8002a0e:	687b      	ldr	r3, [r7, #4]
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3718      	adds	r7, #24
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <_close>:

int _close(int file)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002a20:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	370c      	adds	r7, #12
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr

08002a30 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002a40:	605a      	str	r2, [r3, #4]
  return 0;
 8002a42:	2300      	movs	r3, #0
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	370c      	adds	r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <_isatty>:

int _isatty(int file)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002a58:	2301      	movs	r3, #1
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	370c      	adds	r7, #12
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr

08002a66 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a66:	b480      	push	{r7}
 8002a68:	b085      	sub	sp, #20
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	60f8      	str	r0, [r7, #12]
 8002a6e:	60b9      	str	r1, [r7, #8]
 8002a70:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002a72:	2300      	movs	r3, #0
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3714      	adds	r7, #20
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr

08002a80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b086      	sub	sp, #24
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a88:	4a14      	ldr	r2, [pc, #80]	@ (8002adc <_sbrk+0x5c>)
 8002a8a:	4b15      	ldr	r3, [pc, #84]	@ (8002ae0 <_sbrk+0x60>)
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a94:	4b13      	ldr	r3, [pc, #76]	@ (8002ae4 <_sbrk+0x64>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d102      	bne.n	8002aa2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a9c:	4b11      	ldr	r3, [pc, #68]	@ (8002ae4 <_sbrk+0x64>)
 8002a9e:	4a12      	ldr	r2, [pc, #72]	@ (8002ae8 <_sbrk+0x68>)
 8002aa0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002aa2:	4b10      	ldr	r3, [pc, #64]	@ (8002ae4 <_sbrk+0x64>)
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4413      	add	r3, r2
 8002aaa:	693a      	ldr	r2, [r7, #16]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d207      	bcs.n	8002ac0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ab0:	f00b fac6 	bl	800e040 <__errno>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	220c      	movs	r2, #12
 8002ab8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002aba:	f04f 33ff 	mov.w	r3, #4294967295
 8002abe:	e009      	b.n	8002ad4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ac0:	4b08      	ldr	r3, [pc, #32]	@ (8002ae4 <_sbrk+0x64>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ac6:	4b07      	ldr	r3, [pc, #28]	@ (8002ae4 <_sbrk+0x64>)
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4413      	add	r3, r2
 8002ace:	4a05      	ldr	r2, [pc, #20]	@ (8002ae4 <_sbrk+0x64>)
 8002ad0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3718      	adds	r7, #24
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	20020000 	.word	0x20020000
 8002ae0:	00000400 	.word	0x00000400
 8002ae4:	200007b0 	.word	0x200007b0
 8002ae8:	200024e8 	.word	0x200024e8

08002aec <millis>:
  }
}

// Get number of elapsed milliseconds
uint32_t millis(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8002af0:	f000 f8a6 	bl	8002c40 <HAL_GetTick>
 8002af4:	4603      	mov	r3, r0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	bd80      	pop	{r7, pc}
	...

08002afc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002afc:	b480      	push	{r7}
 8002afe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b00:	4b06      	ldr	r3, [pc, #24]	@ (8002b1c <SystemInit+0x20>)
 8002b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b06:	4a05      	ldr	r2, [pc, #20]	@ (8002b1c <SystemInit+0x20>)
 8002b08:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002b0c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b10:	bf00      	nop
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	e000ed00 	.word	0xe000ed00

08002b20 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

   ldr   sp, =_estack     /* set stack pointer */
 8002b20:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002b58 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002b24:	f7ff ffea 	bl	8002afc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002b28:	480c      	ldr	r0, [pc, #48]	@ (8002b5c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002b2a:	490d      	ldr	r1, [pc, #52]	@ (8002b60 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002b2c:	4a0d      	ldr	r2, [pc, #52]	@ (8002b64 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002b2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b30:	e002      	b.n	8002b38 <LoopCopyDataInit>

08002b32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b36:	3304      	adds	r3, #4

08002b38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b3c:	d3f9      	bcc.n	8002b32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b3e:	4a0a      	ldr	r2, [pc, #40]	@ (8002b68 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002b40:	4c0a      	ldr	r4, [pc, #40]	@ (8002b6c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002b42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b44:	e001      	b.n	8002b4a <LoopFillZerobss>

08002b46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b48:	3204      	adds	r2, #4

08002b4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b4c:	d3fb      	bcc.n	8002b46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002b4e:	f00b fa7d 	bl	800e04c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b52:	f7fe faff 	bl	8001154 <main>
  bx  lr    
 8002b56:	4770      	bx	lr
   ldr   sp, =_estack     /* set stack pointer */
 8002b58:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002b5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b60:	200002d8 	.word	0x200002d8
  ldr r2, =_sidata
 8002b64:	080107f0 	.word	0x080107f0
  ldr r2, =_sbss
 8002b68:	200002d8 	.word	0x200002d8
  ldr r4, =_ebss
 8002b6c:	200024e8 	.word	0x200024e8

08002b70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b70:	e7fe      	b.n	8002b70 <ADC_IRQHandler>
	...

08002b74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b78:	4b0e      	ldr	r3, [pc, #56]	@ (8002bb4 <HAL_Init+0x40>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a0d      	ldr	r2, [pc, #52]	@ (8002bb4 <HAL_Init+0x40>)
 8002b7e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b84:	4b0b      	ldr	r3, [pc, #44]	@ (8002bb4 <HAL_Init+0x40>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a0a      	ldr	r2, [pc, #40]	@ (8002bb4 <HAL_Init+0x40>)
 8002b8a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002b8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b90:	4b08      	ldr	r3, [pc, #32]	@ (8002bb4 <HAL_Init+0x40>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a07      	ldr	r2, [pc, #28]	@ (8002bb4 <HAL_Init+0x40>)
 8002b96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b9c:	2003      	movs	r0, #3
 8002b9e:	f000 fd9d 	bl	80036dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ba2:	2000      	movs	r0, #0
 8002ba4:	f000 f808 	bl	8002bb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ba8:	f7ff fbf0 	bl	800238c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002bac:	2300      	movs	r3, #0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	40023c00 	.word	0x40023c00

08002bb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002bc0:	4b12      	ldr	r3, [pc, #72]	@ (8002c0c <HAL_InitTick+0x54>)
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	4b12      	ldr	r3, [pc, #72]	@ (8002c10 <HAL_InitTick+0x58>)
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	4619      	mov	r1, r3
 8002bca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002bce:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f000 fdb5 	bl	8003746 <HAL_SYSTICK_Config>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d001      	beq.n	8002be6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e00e      	b.n	8002c04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2b0f      	cmp	r3, #15
 8002bea:	d80a      	bhi.n	8002c02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bec:	2200      	movs	r2, #0
 8002bee:	6879      	ldr	r1, [r7, #4]
 8002bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8002bf4:	f000 fd7d 	bl	80036f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002bf8:	4a06      	ldr	r2, [pc, #24]	@ (8002c14 <HAL_InitTick+0x5c>)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	e000      	b.n	8002c04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3708      	adds	r7, #8
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	20000004 	.word	0x20000004
 8002c10:	2000000c 	.word	0x2000000c
 8002c14:	20000008 	.word	0x20000008

08002c18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c1c:	4b06      	ldr	r3, [pc, #24]	@ (8002c38 <HAL_IncTick+0x20>)
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	461a      	mov	r2, r3
 8002c22:	4b06      	ldr	r3, [pc, #24]	@ (8002c3c <HAL_IncTick+0x24>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4413      	add	r3, r2
 8002c28:	4a04      	ldr	r2, [pc, #16]	@ (8002c3c <HAL_IncTick+0x24>)
 8002c2a:	6013      	str	r3, [r2, #0]
}
 8002c2c:	bf00      	nop
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	2000000c 	.word	0x2000000c
 8002c3c:	200007b4 	.word	0x200007b4

08002c40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c40:	b480      	push	{r7}
 8002c42:	af00      	add	r7, sp, #0
  return uwTick;
 8002c44:	4b03      	ldr	r3, [pc, #12]	@ (8002c54 <HAL_GetTick+0x14>)
 8002c46:	681b      	ldr	r3, [r3, #0]
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop
 8002c54:	200007b4 	.word	0x200007b4

08002c58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c60:	f7ff ffee 	bl	8002c40 <HAL_GetTick>
 8002c64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c70:	d005      	beq.n	8002c7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c72:	4b0a      	ldr	r3, [pc, #40]	@ (8002c9c <HAL_Delay+0x44>)
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	461a      	mov	r2, r3
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	4413      	add	r3, r2
 8002c7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002c7e:	bf00      	nop
 8002c80:	f7ff ffde 	bl	8002c40 <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	68fa      	ldr	r2, [r7, #12]
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d8f7      	bhi.n	8002c80 <HAL_Delay+0x28>
  {
  }
}
 8002c90:	bf00      	nop
 8002c92:	bf00      	nop
 8002c94:	3710      	adds	r7, #16
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	2000000c 	.word	0x2000000c

08002ca0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d101      	bne.n	8002cb6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e033      	b.n	8002d1e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d109      	bne.n	8002cd2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f7ff fb8c 	bl	80023dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cd6:	f003 0310 	and.w	r3, r3, #16
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d118      	bne.n	8002d10 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002ce6:	f023 0302 	bic.w	r3, r3, #2
 8002cea:	f043 0202 	orr.w	r2, r3, #2
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f000 fa5e 	bl	80031b4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d02:	f023 0303 	bic.w	r3, r3, #3
 8002d06:	f043 0201 	orr.w	r2, r3, #1
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	641a      	str	r2, [r3, #64]	@ 0x40
 8002d0e:	e001      	b.n	8002d14 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002d1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3710      	adds	r7, #16
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
	...

08002d28 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b086      	sub	sp, #24
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	60b9      	str	r1, [r7, #8]
 8002d32:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002d34:	2300      	movs	r3, #0
 8002d36:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d101      	bne.n	8002d46 <HAL_ADC_Start_DMA+0x1e>
 8002d42:	2302      	movs	r3, #2
 8002d44:	e0e9      	b.n	8002f1a <HAL_ADC_Start_DMA+0x1f2>
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2201      	movs	r2, #1
 8002d4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	f003 0301 	and.w	r3, r3, #1
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d018      	beq.n	8002d8e <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	689a      	ldr	r2, [r3, #8]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f042 0201 	orr.w	r2, r2, #1
 8002d6a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002d6c:	4b6d      	ldr	r3, [pc, #436]	@ (8002f24 <HAL_ADC_Start_DMA+0x1fc>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a6d      	ldr	r2, [pc, #436]	@ (8002f28 <HAL_ADC_Start_DMA+0x200>)
 8002d72:	fba2 2303 	umull	r2, r3, r2, r3
 8002d76:	0c9a      	lsrs	r2, r3, #18
 8002d78:	4613      	mov	r3, r2
 8002d7a:	005b      	lsls	r3, r3, #1
 8002d7c:	4413      	add	r3, r2
 8002d7e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002d80:	e002      	b.n	8002d88 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	3b01      	subs	r3, #1
 8002d86:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d1f9      	bne.n	8002d82 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d9c:	d107      	bne.n	8002dae <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	689a      	ldr	r2, [r3, #8]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002dac:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	f003 0301 	and.w	r3, r3, #1
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	f040 80a1 	bne.w	8002f00 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dc2:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002dc6:	f023 0301 	bic.w	r3, r3, #1
 8002dca:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d007      	beq.n	8002df0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002de8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002df8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002dfc:	d106      	bne.n	8002e0c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e02:	f023 0206 	bic.w	r2, r3, #6
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	645a      	str	r2, [r3, #68]	@ 0x44
 8002e0a:	e002      	b.n	8002e12 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e1a:	4b44      	ldr	r3, [pc, #272]	@ (8002f2c <HAL_ADC_Start_DMA+0x204>)
 8002e1c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e22:	4a43      	ldr	r2, [pc, #268]	@ (8002f30 <HAL_ADC_Start_DMA+0x208>)
 8002e24:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e2a:	4a42      	ldr	r2, [pc, #264]	@ (8002f34 <HAL_ADC_Start_DMA+0x20c>)
 8002e2c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e32:	4a41      	ldr	r2, [pc, #260]	@ (8002f38 <HAL_ADC_Start_DMA+0x210>)
 8002e34:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002e3e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	685a      	ldr	r2, [r3, #4]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002e4e:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	689a      	ldr	r2, [r3, #8]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e5e:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	334c      	adds	r3, #76	@ 0x4c
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	68ba      	ldr	r2, [r7, #8]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f000 fd24 	bl	80038bc <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f003 031f 	and.w	r3, r3, #31
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d12a      	bne.n	8002ed6 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a2d      	ldr	r2, [pc, #180]	@ (8002f3c <HAL_ADC_Start_DMA+0x214>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d015      	beq.n	8002eb6 <HAL_ADC_Start_DMA+0x18e>
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a2c      	ldr	r2, [pc, #176]	@ (8002f40 <HAL_ADC_Start_DMA+0x218>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d105      	bne.n	8002ea0 <HAL_ADC_Start_DMA+0x178>
 8002e94:	4b25      	ldr	r3, [pc, #148]	@ (8002f2c <HAL_ADC_Start_DMA+0x204>)
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f003 031f 	and.w	r3, r3, #31
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d00a      	beq.n	8002eb6 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a27      	ldr	r2, [pc, #156]	@ (8002f44 <HAL_ADC_Start_DMA+0x21c>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d136      	bne.n	8002f18 <HAL_ADC_Start_DMA+0x1f0>
 8002eaa:	4b20      	ldr	r3, [pc, #128]	@ (8002f2c <HAL_ADC_Start_DMA+0x204>)
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	f003 0310 	and.w	r3, r3, #16
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d130      	bne.n	8002f18 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d129      	bne.n	8002f18 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	689a      	ldr	r2, [r3, #8]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002ed2:	609a      	str	r2, [r3, #8]
 8002ed4:	e020      	b.n	8002f18 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a18      	ldr	r2, [pc, #96]	@ (8002f3c <HAL_ADC_Start_DMA+0x214>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d11b      	bne.n	8002f18 <HAL_ADC_Start_DMA+0x1f0>
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d114      	bne.n	8002f18 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	689a      	ldr	r2, [r3, #8]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002efc:	609a      	str	r2, [r3, #8]
 8002efe:	e00b      	b.n	8002f18 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f04:	f043 0210 	orr.w	r2, r3, #16
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f10:	f043 0201 	orr.w	r2, r3, #1
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002f18:	2300      	movs	r3, #0
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3718      	adds	r7, #24
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	20000004 	.word	0x20000004
 8002f28:	431bde83 	.word	0x431bde83
 8002f2c:	40012300 	.word	0x40012300
 8002f30:	080033ad 	.word	0x080033ad
 8002f34:	08003467 	.word	0x08003467
 8002f38:	08003483 	.word	0x08003483
 8002f3c:	40012000 	.word	0x40012000
 8002f40:	40012100 	.word	0x40012100
 8002f44:	40012200 	.word	0x40012200

08002f48 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002f50:	bf00      	nop
 8002f52:	370c      	adds	r7, #12
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002f64:	bf00      	nop
 8002f66:	370c      	adds	r7, #12
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr

08002f70 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b085      	sub	sp, #20
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d101      	bne.n	8002f8c <HAL_ADC_ConfigChannel+0x1c>
 8002f88:	2302      	movs	r3, #2
 8002f8a:	e105      	b.n	8003198 <HAL_ADC_ConfigChannel+0x228>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2b09      	cmp	r3, #9
 8002f9a:	d925      	bls.n	8002fe8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	68d9      	ldr	r1, [r3, #12]
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	461a      	mov	r2, r3
 8002faa:	4613      	mov	r3, r2
 8002fac:	005b      	lsls	r3, r3, #1
 8002fae:	4413      	add	r3, r2
 8002fb0:	3b1e      	subs	r3, #30
 8002fb2:	2207      	movs	r2, #7
 8002fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb8:	43da      	mvns	r2, r3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	400a      	ands	r2, r1
 8002fc0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	68d9      	ldr	r1, [r3, #12]
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	689a      	ldr	r2, [r3, #8]
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	005b      	lsls	r3, r3, #1
 8002fd8:	4403      	add	r3, r0
 8002fda:	3b1e      	subs	r3, #30
 8002fdc:	409a      	lsls	r2, r3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	430a      	orrs	r2, r1
 8002fe4:	60da      	str	r2, [r3, #12]
 8002fe6:	e022      	b.n	800302e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	6919      	ldr	r1, [r3, #16]
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	005b      	lsls	r3, r3, #1
 8002ffa:	4413      	add	r3, r2
 8002ffc:	2207      	movs	r2, #7
 8002ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8003002:	43da      	mvns	r2, r3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	400a      	ands	r2, r1
 800300a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	6919      	ldr	r1, [r3, #16]
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	689a      	ldr	r2, [r3, #8]
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	b29b      	uxth	r3, r3
 800301c:	4618      	mov	r0, r3
 800301e:	4603      	mov	r3, r0
 8003020:	005b      	lsls	r3, r3, #1
 8003022:	4403      	add	r3, r0
 8003024:	409a      	lsls	r2, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	430a      	orrs	r2, r1
 800302c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	2b06      	cmp	r3, #6
 8003034:	d824      	bhi.n	8003080 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	685a      	ldr	r2, [r3, #4]
 8003040:	4613      	mov	r3, r2
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	4413      	add	r3, r2
 8003046:	3b05      	subs	r3, #5
 8003048:	221f      	movs	r2, #31
 800304a:	fa02 f303 	lsl.w	r3, r2, r3
 800304e:	43da      	mvns	r2, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	400a      	ands	r2, r1
 8003056:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	b29b      	uxth	r3, r3
 8003064:	4618      	mov	r0, r3
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	685a      	ldr	r2, [r3, #4]
 800306a:	4613      	mov	r3, r2
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	4413      	add	r3, r2
 8003070:	3b05      	subs	r3, #5
 8003072:	fa00 f203 	lsl.w	r2, r0, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	430a      	orrs	r2, r1
 800307c:	635a      	str	r2, [r3, #52]	@ 0x34
 800307e:	e04c      	b.n	800311a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	2b0c      	cmp	r3, #12
 8003086:	d824      	bhi.n	80030d2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	685a      	ldr	r2, [r3, #4]
 8003092:	4613      	mov	r3, r2
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	4413      	add	r3, r2
 8003098:	3b23      	subs	r3, #35	@ 0x23
 800309a:	221f      	movs	r2, #31
 800309c:	fa02 f303 	lsl.w	r3, r2, r3
 80030a0:	43da      	mvns	r2, r3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	400a      	ands	r2, r1
 80030a8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	4618      	mov	r0, r3
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	685a      	ldr	r2, [r3, #4]
 80030bc:	4613      	mov	r3, r2
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	4413      	add	r3, r2
 80030c2:	3b23      	subs	r3, #35	@ 0x23
 80030c4:	fa00 f203 	lsl.w	r2, r0, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	430a      	orrs	r2, r1
 80030ce:	631a      	str	r2, [r3, #48]	@ 0x30
 80030d0:	e023      	b.n	800311a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	685a      	ldr	r2, [r3, #4]
 80030dc:	4613      	mov	r3, r2
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	4413      	add	r3, r2
 80030e2:	3b41      	subs	r3, #65	@ 0x41
 80030e4:	221f      	movs	r2, #31
 80030e6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ea:	43da      	mvns	r2, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	400a      	ands	r2, r1
 80030f2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	b29b      	uxth	r3, r3
 8003100:	4618      	mov	r0, r3
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	685a      	ldr	r2, [r3, #4]
 8003106:	4613      	mov	r3, r2
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	4413      	add	r3, r2
 800310c:	3b41      	subs	r3, #65	@ 0x41
 800310e:	fa00 f203 	lsl.w	r2, r0, r3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	430a      	orrs	r2, r1
 8003118:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800311a:	4b22      	ldr	r3, [pc, #136]	@ (80031a4 <HAL_ADC_ConfigChannel+0x234>)
 800311c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a21      	ldr	r2, [pc, #132]	@ (80031a8 <HAL_ADC_ConfigChannel+0x238>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d109      	bne.n	800313c <HAL_ADC_ConfigChannel+0x1cc>
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2b12      	cmp	r3, #18
 800312e:	d105      	bne.n	800313c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a19      	ldr	r2, [pc, #100]	@ (80031a8 <HAL_ADC_ConfigChannel+0x238>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d123      	bne.n	800318e <HAL_ADC_ConfigChannel+0x21e>
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	2b10      	cmp	r3, #16
 800314c:	d003      	beq.n	8003156 <HAL_ADC_ConfigChannel+0x1e6>
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	2b11      	cmp	r3, #17
 8003154:	d11b      	bne.n	800318e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2b10      	cmp	r3, #16
 8003168:	d111      	bne.n	800318e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800316a:	4b10      	ldr	r3, [pc, #64]	@ (80031ac <HAL_ADC_ConfigChannel+0x23c>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a10      	ldr	r2, [pc, #64]	@ (80031b0 <HAL_ADC_ConfigChannel+0x240>)
 8003170:	fba2 2303 	umull	r2, r3, r2, r3
 8003174:	0c9a      	lsrs	r2, r3, #18
 8003176:	4613      	mov	r3, r2
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	4413      	add	r3, r2
 800317c:	005b      	lsls	r3, r3, #1
 800317e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003180:	e002      	b.n	8003188 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	3b01      	subs	r3, #1
 8003186:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d1f9      	bne.n	8003182 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003196:	2300      	movs	r3, #0
}
 8003198:	4618      	mov	r0, r3
 800319a:	3714      	adds	r7, #20
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr
 80031a4:	40012300 	.word	0x40012300
 80031a8:	40012000 	.word	0x40012000
 80031ac:	20000004 	.word	0x20000004
 80031b0:	431bde83 	.word	0x431bde83

080031b4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b085      	sub	sp, #20
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80031bc:	4b79      	ldr	r3, [pc, #484]	@ (80033a4 <ADC_Init+0x1f0>)
 80031be:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	685a      	ldr	r2, [r3, #4]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	431a      	orrs	r2, r3
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	685a      	ldr	r2, [r3, #4]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80031e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	6859      	ldr	r1, [r3, #4]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	691b      	ldr	r3, [r3, #16]
 80031f4:	021a      	lsls	r2, r3, #8
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	430a      	orrs	r2, r1
 80031fc:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	685a      	ldr	r2, [r3, #4]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800320c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	6859      	ldr	r1, [r3, #4]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	689a      	ldr	r2, [r3, #8]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	430a      	orrs	r2, r1
 800321e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	689a      	ldr	r2, [r3, #8]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800322e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	6899      	ldr	r1, [r3, #8]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	68da      	ldr	r2, [r3, #12]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	430a      	orrs	r2, r1
 8003240:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003246:	4a58      	ldr	r2, [pc, #352]	@ (80033a8 <ADC_Init+0x1f4>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d022      	beq.n	8003292 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	689a      	ldr	r2, [r3, #8]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800325a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	6899      	ldr	r1, [r3, #8]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	430a      	orrs	r2, r1
 800326c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	689a      	ldr	r2, [r3, #8]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800327c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	6899      	ldr	r1, [r3, #8]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	430a      	orrs	r2, r1
 800328e:	609a      	str	r2, [r3, #8]
 8003290:	e00f      	b.n	80032b2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	689a      	ldr	r2, [r3, #8]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80032a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	689a      	ldr	r2, [r3, #8]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80032b0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	689a      	ldr	r2, [r3, #8]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f022 0202 	bic.w	r2, r2, #2
 80032c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	6899      	ldr	r1, [r3, #8]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	7e1b      	ldrb	r3, [r3, #24]
 80032cc:	005a      	lsls	r2, r3, #1
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	430a      	orrs	r2, r1
 80032d4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d01b      	beq.n	8003318 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	685a      	ldr	r2, [r3, #4]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80032ee:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	685a      	ldr	r2, [r3, #4]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80032fe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	6859      	ldr	r1, [r3, #4]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800330a:	3b01      	subs	r3, #1
 800330c:	035a      	lsls	r2, r3, #13
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	430a      	orrs	r2, r1
 8003314:	605a      	str	r2, [r3, #4]
 8003316:	e007      	b.n	8003328 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	685a      	ldr	r2, [r3, #4]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003326:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003336:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	69db      	ldr	r3, [r3, #28]
 8003342:	3b01      	subs	r3, #1
 8003344:	051a      	lsls	r2, r3, #20
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	430a      	orrs	r2, r1
 800334c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	689a      	ldr	r2, [r3, #8]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800335c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	6899      	ldr	r1, [r3, #8]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800336a:	025a      	lsls	r2, r3, #9
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	430a      	orrs	r2, r1
 8003372:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	689a      	ldr	r2, [r3, #8]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003382:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	6899      	ldr	r1, [r3, #8]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	695b      	ldr	r3, [r3, #20]
 800338e:	029a      	lsls	r2, r3, #10
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	430a      	orrs	r2, r1
 8003396:	609a      	str	r2, [r3, #8]
}
 8003398:	bf00      	nop
 800339a:	3714      	adds	r7, #20
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr
 80033a4:	40012300 	.word	0x40012300
 80033a8:	0f000001 	.word	0x0f000001

080033ac <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033b8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033be:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d13c      	bne.n	8003440 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ca:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d12b      	bne.n	8003438 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d127      	bne.n	8003438 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033ee:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d006      	beq.n	8003404 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003400:	2b00      	cmp	r3, #0
 8003402:	d119      	bne.n	8003438 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	685a      	ldr	r2, [r3, #4]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f022 0220 	bic.w	r2, r2, #32
 8003412:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003418:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003424:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d105      	bne.n	8003438 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003430:	f043 0201 	orr.w	r2, r3, #1
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003438:	68f8      	ldr	r0, [r7, #12]
 800343a:	f7fe fab9 	bl	80019b0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800343e:	e00e      	b.n	800345e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003444:	f003 0310 	and.w	r3, r3, #16
 8003448:	2b00      	cmp	r3, #0
 800344a:	d003      	beq.n	8003454 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800344c:	68f8      	ldr	r0, [r7, #12]
 800344e:	f7ff fd85 	bl	8002f5c <HAL_ADC_ErrorCallback>
}
 8003452:	e004      	b.n	800345e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003458:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	4798      	blx	r3
}
 800345e:	bf00      	nop
 8003460:	3710      	adds	r7, #16
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}

08003466 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003466:	b580      	push	{r7, lr}
 8003468:	b084      	sub	sp, #16
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003472:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003474:	68f8      	ldr	r0, [r7, #12]
 8003476:	f7ff fd67 	bl	8002f48 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800347a:	bf00      	nop
 800347c:	3710      	adds	r7, #16
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}

08003482 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003482:	b580      	push	{r7, lr}
 8003484:	b084      	sub	sp, #16
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800348e:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2240      	movs	r2, #64	@ 0x40
 8003494:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800349a:	f043 0204 	orr.w	r2, r3, #4
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80034a2:	68f8      	ldr	r0, [r7, #12]
 80034a4:	f7ff fd5a 	bl	8002f5c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80034a8:	bf00      	nop
 80034aa:	3710      	adds	r7, #16
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  multimode  pointer to an ADC_MultiModeTypeDef structure that contains
  *                     the configuration information for  multimode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b085      	sub	sp, #20
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_MODE(multimode->Mode));
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));

  /* Process locked */
  __HAL_LOCK(hadc);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d101      	bne.n	80034c8 <HAL_ADCEx_MultiModeConfigChannel+0x18>
 80034c4:	2302      	movs	r3, #2
 80034c6:	e031      	b.n	800352c <HAL_ADCEx_MultiModeConfigChannel+0x7c>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80034d0:	4b19      	ldr	r3, [pc, #100]	@ (8003538 <HAL_ADCEx_MultiModeConfigChannel+0x88>)
 80034d2:	60fb      	str	r3, [r7, #12]

  /* Set ADC mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_MULTI);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f023 021f 	bic.w	r2, r3, #31
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->Mode;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	685a      	ldr	r2, [r3, #4]
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	431a      	orrs	r2, r3
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	605a      	str	r2, [r3, #4]

  /* Set the ADC DMA access mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_DMA);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->DMAAccessMode;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	685a      	ldr	r2, [r3, #4]
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	431a      	orrs	r2, r3
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	605a      	str	r2, [r3, #4]

  /* Set delay between two sampling phases */
  tmpADC_Common->CCR &= ~(ADC_CCR_DELAY);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->TwoSamplingDelay;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	685a      	ldr	r2, [r3, #4]
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	431a      	orrs	r2, r3
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	605a      	str	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800352a:	2300      	movs	r3, #0
}
 800352c:	4618      	mov	r0, r3
 800352e:	3714      	adds	r7, #20
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr
 8003538:	40012300 	.word	0x40012300

0800353c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800353c:	b480      	push	{r7}
 800353e:	b085      	sub	sp, #20
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f003 0307 	and.w	r3, r3, #7
 800354a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800354c:	4b0c      	ldr	r3, [pc, #48]	@ (8003580 <__NVIC_SetPriorityGrouping+0x44>)
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003552:	68ba      	ldr	r2, [r7, #8]
 8003554:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003558:	4013      	ands	r3, r2
 800355a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003564:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003568:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800356c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800356e:	4a04      	ldr	r2, [pc, #16]	@ (8003580 <__NVIC_SetPriorityGrouping+0x44>)
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	60d3      	str	r3, [r2, #12]
}
 8003574:	bf00      	nop
 8003576:	3714      	adds	r7, #20
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr
 8003580:	e000ed00 	.word	0xe000ed00

08003584 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003584:	b480      	push	{r7}
 8003586:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003588:	4b04      	ldr	r3, [pc, #16]	@ (800359c <__NVIC_GetPriorityGrouping+0x18>)
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	0a1b      	lsrs	r3, r3, #8
 800358e:	f003 0307 	and.w	r3, r3, #7
}
 8003592:	4618      	mov	r0, r3
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr
 800359c:	e000ed00 	.word	0xe000ed00

080035a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	4603      	mov	r3, r0
 80035a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	db0b      	blt.n	80035ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035b2:	79fb      	ldrb	r3, [r7, #7]
 80035b4:	f003 021f 	and.w	r2, r3, #31
 80035b8:	4907      	ldr	r1, [pc, #28]	@ (80035d8 <__NVIC_EnableIRQ+0x38>)
 80035ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035be:	095b      	lsrs	r3, r3, #5
 80035c0:	2001      	movs	r0, #1
 80035c2:	fa00 f202 	lsl.w	r2, r0, r2
 80035c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80035ca:	bf00      	nop
 80035cc:	370c      	adds	r7, #12
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr
 80035d6:	bf00      	nop
 80035d8:	e000e100 	.word	0xe000e100

080035dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035dc:	b480      	push	{r7}
 80035de:	b083      	sub	sp, #12
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	4603      	mov	r3, r0
 80035e4:	6039      	str	r1, [r7, #0]
 80035e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	db0a      	blt.n	8003606 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	b2da      	uxtb	r2, r3
 80035f4:	490c      	ldr	r1, [pc, #48]	@ (8003628 <__NVIC_SetPriority+0x4c>)
 80035f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035fa:	0112      	lsls	r2, r2, #4
 80035fc:	b2d2      	uxtb	r2, r2
 80035fe:	440b      	add	r3, r1
 8003600:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003604:	e00a      	b.n	800361c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	b2da      	uxtb	r2, r3
 800360a:	4908      	ldr	r1, [pc, #32]	@ (800362c <__NVIC_SetPriority+0x50>)
 800360c:	79fb      	ldrb	r3, [r7, #7]
 800360e:	f003 030f 	and.w	r3, r3, #15
 8003612:	3b04      	subs	r3, #4
 8003614:	0112      	lsls	r2, r2, #4
 8003616:	b2d2      	uxtb	r2, r2
 8003618:	440b      	add	r3, r1
 800361a:	761a      	strb	r2, [r3, #24]
}
 800361c:	bf00      	nop
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr
 8003628:	e000e100 	.word	0xe000e100
 800362c:	e000ed00 	.word	0xe000ed00

08003630 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003630:	b480      	push	{r7}
 8003632:	b089      	sub	sp, #36	@ 0x24
 8003634:	af00      	add	r7, sp, #0
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f003 0307 	and.w	r3, r3, #7
 8003642:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	f1c3 0307 	rsb	r3, r3, #7
 800364a:	2b04      	cmp	r3, #4
 800364c:	bf28      	it	cs
 800364e:	2304      	movcs	r3, #4
 8003650:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	3304      	adds	r3, #4
 8003656:	2b06      	cmp	r3, #6
 8003658:	d902      	bls.n	8003660 <NVIC_EncodePriority+0x30>
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	3b03      	subs	r3, #3
 800365e:	e000      	b.n	8003662 <NVIC_EncodePriority+0x32>
 8003660:	2300      	movs	r3, #0
 8003662:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003664:	f04f 32ff 	mov.w	r2, #4294967295
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	fa02 f303 	lsl.w	r3, r2, r3
 800366e:	43da      	mvns	r2, r3
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	401a      	ands	r2, r3
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003678:	f04f 31ff 	mov.w	r1, #4294967295
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	fa01 f303 	lsl.w	r3, r1, r3
 8003682:	43d9      	mvns	r1, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003688:	4313      	orrs	r3, r2
         );
}
 800368a:	4618      	mov	r0, r3
 800368c:	3724      	adds	r7, #36	@ 0x24
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr
	...

08003698 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	3b01      	subs	r3, #1
 80036a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80036a8:	d301      	bcc.n	80036ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036aa:	2301      	movs	r3, #1
 80036ac:	e00f      	b.n	80036ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036ae:	4a0a      	ldr	r2, [pc, #40]	@ (80036d8 <SysTick_Config+0x40>)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	3b01      	subs	r3, #1
 80036b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036b6:	210f      	movs	r1, #15
 80036b8:	f04f 30ff 	mov.w	r0, #4294967295
 80036bc:	f7ff ff8e 	bl	80035dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036c0:	4b05      	ldr	r3, [pc, #20]	@ (80036d8 <SysTick_Config+0x40>)
 80036c2:	2200      	movs	r2, #0
 80036c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036c6:	4b04      	ldr	r3, [pc, #16]	@ (80036d8 <SysTick_Config+0x40>)
 80036c8:	2207      	movs	r2, #7
 80036ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3708      	adds	r7, #8
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	e000e010 	.word	0xe000e010

080036dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f7ff ff29 	bl	800353c <__NVIC_SetPriorityGrouping>
}
 80036ea:	bf00      	nop
 80036ec:	3708      	adds	r7, #8
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80036f2:	b580      	push	{r7, lr}
 80036f4:	b086      	sub	sp, #24
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	4603      	mov	r3, r0
 80036fa:	60b9      	str	r1, [r7, #8]
 80036fc:	607a      	str	r2, [r7, #4]
 80036fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003700:	2300      	movs	r3, #0
 8003702:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003704:	f7ff ff3e 	bl	8003584 <__NVIC_GetPriorityGrouping>
 8003708:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	68b9      	ldr	r1, [r7, #8]
 800370e:	6978      	ldr	r0, [r7, #20]
 8003710:	f7ff ff8e 	bl	8003630 <NVIC_EncodePriority>
 8003714:	4602      	mov	r2, r0
 8003716:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800371a:	4611      	mov	r1, r2
 800371c:	4618      	mov	r0, r3
 800371e:	f7ff ff5d 	bl	80035dc <__NVIC_SetPriority>
}
 8003722:	bf00      	nop
 8003724:	3718      	adds	r7, #24
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}

0800372a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800372a:	b580      	push	{r7, lr}
 800372c:	b082      	sub	sp, #8
 800372e:	af00      	add	r7, sp, #0
 8003730:	4603      	mov	r3, r0
 8003732:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003734:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003738:	4618      	mov	r0, r3
 800373a:	f7ff ff31 	bl	80035a0 <__NVIC_EnableIRQ>
}
 800373e:	bf00      	nop
 8003740:	3708      	adds	r7, #8
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}

08003746 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003746:	b580      	push	{r7, lr}
 8003748:	b082      	sub	sp, #8
 800374a:	af00      	add	r7, sp, #0
 800374c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f7ff ffa2 	bl	8003698 <SysTick_Config>
 8003754:	4603      	mov	r3, r0
}
 8003756:	4618      	mov	r0, r3
 8003758:	3708      	adds	r7, #8
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
	...

08003760 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b086      	sub	sp, #24
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003768:	2300      	movs	r3, #0
 800376a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800376c:	f7ff fa68 	bl	8002c40 <HAL_GetTick>
 8003770:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d101      	bne.n	800377c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e099      	b.n	80038b0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2202      	movs	r2, #2
 8003780:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f022 0201 	bic.w	r2, r2, #1
 800379a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800379c:	e00f      	b.n	80037be <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800379e:	f7ff fa4f 	bl	8002c40 <HAL_GetTick>
 80037a2:	4602      	mov	r2, r0
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	2b05      	cmp	r3, #5
 80037aa:	d908      	bls.n	80037be <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2220      	movs	r2, #32
 80037b0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2203      	movs	r2, #3
 80037b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e078      	b.n	80038b0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0301 	and.w	r3, r3, #1
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d1e8      	bne.n	800379e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80037d4:	697a      	ldr	r2, [r7, #20]
 80037d6:	4b38      	ldr	r3, [pc, #224]	@ (80038b8 <HAL_DMA_Init+0x158>)
 80037d8:	4013      	ands	r3, r2
 80037da:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685a      	ldr	r2, [r3, #4]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	691b      	ldr	r3, [r3, #16]
 80037f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	699b      	ldr	r3, [r3, #24]
 80037fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003802:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6a1b      	ldr	r3, [r3, #32]
 8003808:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800380a:	697a      	ldr	r2, [r7, #20]
 800380c:	4313      	orrs	r3, r2
 800380e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003814:	2b04      	cmp	r3, #4
 8003816:	d107      	bne.n	8003828 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003820:	4313      	orrs	r3, r2
 8003822:	697a      	ldr	r2, [r7, #20]
 8003824:	4313      	orrs	r3, r2
 8003826:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	697a      	ldr	r2, [r7, #20]
 800382e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	695b      	ldr	r3, [r3, #20]
 8003836:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	f023 0307 	bic.w	r3, r3, #7
 800383e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003844:	697a      	ldr	r2, [r7, #20]
 8003846:	4313      	orrs	r3, r2
 8003848:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800384e:	2b04      	cmp	r3, #4
 8003850:	d117      	bne.n	8003882 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003856:	697a      	ldr	r2, [r7, #20]
 8003858:	4313      	orrs	r3, r2
 800385a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003860:	2b00      	cmp	r3, #0
 8003862:	d00e      	beq.n	8003882 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f000 fa6f 	bl	8003d48 <DMA_CheckFifoParam>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d008      	beq.n	8003882 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2240      	movs	r2, #64	@ 0x40
 8003874:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2201      	movs	r2, #1
 800387a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800387e:	2301      	movs	r3, #1
 8003880:	e016      	b.n	80038b0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	697a      	ldr	r2, [r7, #20]
 8003888:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f000 fa26 	bl	8003cdc <DMA_CalcBaseAndBitshift>
 8003890:	4603      	mov	r3, r0
 8003892:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003898:	223f      	movs	r2, #63	@ 0x3f
 800389a:	409a      	lsls	r2, r3
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2201      	movs	r2, #1
 80038aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80038ae:	2300      	movs	r3, #0
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3718      	adds	r7, #24
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	f010803f 	.word	0xf010803f

080038bc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b086      	sub	sp, #24
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	60b9      	str	r1, [r7, #8]
 80038c6:	607a      	str	r2, [r7, #4]
 80038c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038ca:	2300      	movs	r3, #0
 80038cc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038d2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d101      	bne.n	80038e2 <HAL_DMA_Start_IT+0x26>
 80038de:	2302      	movs	r3, #2
 80038e0:	e040      	b.n	8003964 <HAL_DMA_Start_IT+0xa8>
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2201      	movs	r2, #1
 80038e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d12f      	bne.n	8003956 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2202      	movs	r2, #2
 80038fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2200      	movs	r2, #0
 8003902:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	68b9      	ldr	r1, [r7, #8]
 800390a:	68f8      	ldr	r0, [r7, #12]
 800390c:	f000 f9b8 	bl	8003c80 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003914:	223f      	movs	r2, #63	@ 0x3f
 8003916:	409a      	lsls	r2, r3
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f042 0216 	orr.w	r2, r2, #22
 800392a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003930:	2b00      	cmp	r3, #0
 8003932:	d007      	beq.n	8003944 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f042 0208 	orr.w	r2, r2, #8
 8003942:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f042 0201 	orr.w	r2, r2, #1
 8003952:	601a      	str	r2, [r3, #0]
 8003954:	e005      	b.n	8003962 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2200      	movs	r2, #0
 800395a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800395e:	2302      	movs	r3, #2
 8003960:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003962:	7dfb      	ldrb	r3, [r7, #23]
}
 8003964:	4618      	mov	r0, r3
 8003966:	3718      	adds	r7, #24
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b086      	sub	sp, #24
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003974:	2300      	movs	r3, #0
 8003976:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003978:	4b8e      	ldr	r3, [pc, #568]	@ (8003bb4 <HAL_DMA_IRQHandler+0x248>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a8e      	ldr	r2, [pc, #568]	@ (8003bb8 <HAL_DMA_IRQHandler+0x24c>)
 800397e:	fba2 2303 	umull	r2, r3, r2, r3
 8003982:	0a9b      	lsrs	r3, r3, #10
 8003984:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800398a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003996:	2208      	movs	r2, #8
 8003998:	409a      	lsls	r2, r3
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	4013      	ands	r3, r2
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d01a      	beq.n	80039d8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0304 	and.w	r3, r3, #4
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d013      	beq.n	80039d8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f022 0204 	bic.w	r2, r2, #4
 80039be:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039c4:	2208      	movs	r2, #8
 80039c6:	409a      	lsls	r2, r3
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039d0:	f043 0201 	orr.w	r2, r3, #1
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039dc:	2201      	movs	r2, #1
 80039de:	409a      	lsls	r2, r3
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	4013      	ands	r3, r2
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d012      	beq.n	8003a0e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	695b      	ldr	r3, [r3, #20]
 80039ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d00b      	beq.n	8003a0e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039fa:	2201      	movs	r2, #1
 80039fc:	409a      	lsls	r2, r3
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a06:	f043 0202 	orr.w	r2, r3, #2
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a12:	2204      	movs	r2, #4
 8003a14:	409a      	lsls	r2, r3
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	4013      	ands	r3, r2
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d012      	beq.n	8003a44 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0302 	and.w	r3, r3, #2
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d00b      	beq.n	8003a44 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a30:	2204      	movs	r2, #4
 8003a32:	409a      	lsls	r2, r3
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a3c:	f043 0204 	orr.w	r2, r3, #4
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a48:	2210      	movs	r2, #16
 8003a4a:	409a      	lsls	r2, r3
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	4013      	ands	r3, r2
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d043      	beq.n	8003adc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0308 	and.w	r3, r3, #8
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d03c      	beq.n	8003adc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a66:	2210      	movs	r2, #16
 8003a68:	409a      	lsls	r2, r3
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d018      	beq.n	8003aae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d108      	bne.n	8003a9c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d024      	beq.n	8003adc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	4798      	blx	r3
 8003a9a:	e01f      	b.n	8003adc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d01b      	beq.n	8003adc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	4798      	blx	r3
 8003aac:	e016      	b.n	8003adc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d107      	bne.n	8003acc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f022 0208 	bic.w	r2, r2, #8
 8003aca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d003      	beq.n	8003adc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ae0:	2220      	movs	r2, #32
 8003ae2:	409a      	lsls	r2, r3
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	f000 808f 	beq.w	8003c0c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0310 	and.w	r3, r3, #16
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	f000 8087 	beq.w	8003c0c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b02:	2220      	movs	r2, #32
 8003b04:	409a      	lsls	r2, r3
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	2b05      	cmp	r3, #5
 8003b14:	d136      	bne.n	8003b84 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f022 0216 	bic.w	r2, r2, #22
 8003b24:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	695a      	ldr	r2, [r3, #20]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003b34:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d103      	bne.n	8003b46 <HAL_DMA_IRQHandler+0x1da>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d007      	beq.n	8003b56 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f022 0208 	bic.w	r2, r2, #8
 8003b54:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b5a:	223f      	movs	r2, #63	@ 0x3f
 8003b5c:	409a      	lsls	r2, r3
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2201      	movs	r2, #1
 8003b66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d07e      	beq.n	8003c78 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	4798      	blx	r3
        }
        return;
 8003b82:	e079      	b.n	8003c78 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d01d      	beq.n	8003bce <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d10d      	bne.n	8003bbc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d031      	beq.n	8003c0c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	4798      	blx	r3
 8003bb0:	e02c      	b.n	8003c0c <HAL_DMA_IRQHandler+0x2a0>
 8003bb2:	bf00      	nop
 8003bb4:	20000004 	.word	0x20000004
 8003bb8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d023      	beq.n	8003c0c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	4798      	blx	r3
 8003bcc:	e01e      	b.n	8003c0c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d10f      	bne.n	8003bfc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f022 0210 	bic.w	r2, r2, #16
 8003bea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d003      	beq.n	8003c0c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d032      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c18:	f003 0301 	and.w	r3, r3, #1
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d022      	beq.n	8003c66 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2205      	movs	r2, #5
 8003c24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f022 0201 	bic.w	r2, r2, #1
 8003c36:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	3301      	adds	r3, #1
 8003c3c:	60bb      	str	r3, [r7, #8]
 8003c3e:	697a      	ldr	r2, [r7, #20]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d307      	bcc.n	8003c54 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0301 	and.w	r3, r3, #1
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d1f2      	bne.n	8003c38 <HAL_DMA_IRQHandler+0x2cc>
 8003c52:	e000      	b.n	8003c56 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003c54:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d005      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	4798      	blx	r3
 8003c76:	e000      	b.n	8003c7a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003c78:	bf00      	nop
    }
  }
}
 8003c7a:	3718      	adds	r7, #24
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b085      	sub	sp, #20
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	60b9      	str	r1, [r7, #8]
 8003c8a:	607a      	str	r2, [r7, #4]
 8003c8c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003c9c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	683a      	ldr	r2, [r7, #0]
 8003ca4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	2b40      	cmp	r3, #64	@ 0x40
 8003cac:	d108      	bne.n	8003cc0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	68ba      	ldr	r2, [r7, #8]
 8003cbc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003cbe:	e007      	b.n	8003cd0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	68ba      	ldr	r2, [r7, #8]
 8003cc6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	60da      	str	r2, [r3, #12]
}
 8003cd0:	bf00      	nop
 8003cd2:	3714      	adds	r7, #20
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr

08003cdc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b085      	sub	sp, #20
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	3b10      	subs	r3, #16
 8003cec:	4a14      	ldr	r2, [pc, #80]	@ (8003d40 <DMA_CalcBaseAndBitshift+0x64>)
 8003cee:	fba2 2303 	umull	r2, r3, r2, r3
 8003cf2:	091b      	lsrs	r3, r3, #4
 8003cf4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003cf6:	4a13      	ldr	r2, [pc, #76]	@ (8003d44 <DMA_CalcBaseAndBitshift+0x68>)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	4413      	add	r3, r2
 8003cfc:	781b      	ldrb	r3, [r3, #0]
 8003cfe:	461a      	mov	r2, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2b03      	cmp	r3, #3
 8003d08:	d909      	bls.n	8003d1e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003d12:	f023 0303 	bic.w	r3, r3, #3
 8003d16:	1d1a      	adds	r2, r3, #4
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	659a      	str	r2, [r3, #88]	@ 0x58
 8003d1c:	e007      	b.n	8003d2e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003d26:	f023 0303 	bic.w	r3, r3, #3
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3714      	adds	r7, #20
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr
 8003d3e:	bf00      	nop
 8003d40:	aaaaaaab 	.word	0xaaaaaaab
 8003d44:	08010468 	.word	0x08010468

08003d48 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b085      	sub	sp, #20
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d50:	2300      	movs	r3, #0
 8003d52:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d58:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	699b      	ldr	r3, [r3, #24]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d11f      	bne.n	8003da2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	2b03      	cmp	r3, #3
 8003d66:	d856      	bhi.n	8003e16 <DMA_CheckFifoParam+0xce>
 8003d68:	a201      	add	r2, pc, #4	@ (adr r2, 8003d70 <DMA_CheckFifoParam+0x28>)
 8003d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d6e:	bf00      	nop
 8003d70:	08003d81 	.word	0x08003d81
 8003d74:	08003d93 	.word	0x08003d93
 8003d78:	08003d81 	.word	0x08003d81
 8003d7c:	08003e17 	.word	0x08003e17
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d84:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d046      	beq.n	8003e1a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d90:	e043      	b.n	8003e1a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d96:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003d9a:	d140      	bne.n	8003e1e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003da0:	e03d      	b.n	8003e1e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	699b      	ldr	r3, [r3, #24]
 8003da6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003daa:	d121      	bne.n	8003df0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	2b03      	cmp	r3, #3
 8003db0:	d837      	bhi.n	8003e22 <DMA_CheckFifoParam+0xda>
 8003db2:	a201      	add	r2, pc, #4	@ (adr r2, 8003db8 <DMA_CheckFifoParam+0x70>)
 8003db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003db8:	08003dc9 	.word	0x08003dc9
 8003dbc:	08003dcf 	.word	0x08003dcf
 8003dc0:	08003dc9 	.word	0x08003dc9
 8003dc4:	08003de1 	.word	0x08003de1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	73fb      	strb	r3, [r7, #15]
      break;
 8003dcc:	e030      	b.n	8003e30 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dd2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d025      	beq.n	8003e26 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dde:	e022      	b.n	8003e26 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003de4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003de8:	d11f      	bne.n	8003e2a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003dee:	e01c      	b.n	8003e2a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d903      	bls.n	8003dfe <DMA_CheckFifoParam+0xb6>
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	2b03      	cmp	r3, #3
 8003dfa:	d003      	beq.n	8003e04 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003dfc:	e018      	b.n	8003e30 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	73fb      	strb	r3, [r7, #15]
      break;
 8003e02:	e015      	b.n	8003e30 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e08:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d00e      	beq.n	8003e2e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	73fb      	strb	r3, [r7, #15]
      break;
 8003e14:	e00b      	b.n	8003e2e <DMA_CheckFifoParam+0xe6>
      break;
 8003e16:	bf00      	nop
 8003e18:	e00a      	b.n	8003e30 <DMA_CheckFifoParam+0xe8>
      break;
 8003e1a:	bf00      	nop
 8003e1c:	e008      	b.n	8003e30 <DMA_CheckFifoParam+0xe8>
      break;
 8003e1e:	bf00      	nop
 8003e20:	e006      	b.n	8003e30 <DMA_CheckFifoParam+0xe8>
      break;
 8003e22:	bf00      	nop
 8003e24:	e004      	b.n	8003e30 <DMA_CheckFifoParam+0xe8>
      break;
 8003e26:	bf00      	nop
 8003e28:	e002      	b.n	8003e30 <DMA_CheckFifoParam+0xe8>
      break;   
 8003e2a:	bf00      	nop
 8003e2c:	e000      	b.n	8003e30 <DMA_CheckFifoParam+0xe8>
      break;
 8003e2e:	bf00      	nop
    }
  } 
  
  return status; 
 8003e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3714      	adds	r7, #20
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr
 8003e3e:	bf00      	nop

08003e40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b089      	sub	sp, #36	@ 0x24
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003e52:	2300      	movs	r3, #0
 8003e54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e56:	2300      	movs	r3, #0
 8003e58:	61fb      	str	r3, [r7, #28]
 8003e5a:	e16b      	b.n	8004134 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	fa02 f303 	lsl.w	r3, r2, r3
 8003e64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	697a      	ldr	r2, [r7, #20]
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003e70:	693a      	ldr	r2, [r7, #16]
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	429a      	cmp	r2, r3
 8003e76:	f040 815a 	bne.w	800412e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	f003 0303 	and.w	r3, r3, #3
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d005      	beq.n	8003e92 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d130      	bne.n	8003ef4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003e98:	69fb      	ldr	r3, [r7, #28]
 8003e9a:	005b      	lsls	r3, r3, #1
 8003e9c:	2203      	movs	r2, #3
 8003e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea2:	43db      	mvns	r3, r3
 8003ea4:	69ba      	ldr	r2, [r7, #24]
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	68da      	ldr	r2, [r3, #12]
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	005b      	lsls	r3, r3, #1
 8003eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb6:	69ba      	ldr	r2, [r7, #24]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	69ba      	ldr	r2, [r7, #24]
 8003ec0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ec8:	2201      	movs	r2, #1
 8003eca:	69fb      	ldr	r3, [r7, #28]
 8003ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed0:	43db      	mvns	r3, r3
 8003ed2:	69ba      	ldr	r2, [r7, #24]
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	091b      	lsrs	r3, r3, #4
 8003ede:	f003 0201 	and.w	r2, r3, #1
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee8:	69ba      	ldr	r2, [r7, #24]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	69ba      	ldr	r2, [r7, #24]
 8003ef2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f003 0303 	and.w	r3, r3, #3
 8003efc:	2b03      	cmp	r3, #3
 8003efe:	d017      	beq.n	8003f30 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f06:	69fb      	ldr	r3, [r7, #28]
 8003f08:	005b      	lsls	r3, r3, #1
 8003f0a:	2203      	movs	r2, #3
 8003f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f10:	43db      	mvns	r3, r3
 8003f12:	69ba      	ldr	r2, [r7, #24]
 8003f14:	4013      	ands	r3, r2
 8003f16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	689a      	ldr	r2, [r3, #8]
 8003f1c:	69fb      	ldr	r3, [r7, #28]
 8003f1e:	005b      	lsls	r3, r3, #1
 8003f20:	fa02 f303 	lsl.w	r3, r2, r3
 8003f24:	69ba      	ldr	r2, [r7, #24]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	69ba      	ldr	r2, [r7, #24]
 8003f2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	f003 0303 	and.w	r3, r3, #3
 8003f38:	2b02      	cmp	r3, #2
 8003f3a:	d123      	bne.n	8003f84 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f3c:	69fb      	ldr	r3, [r7, #28]
 8003f3e:	08da      	lsrs	r2, r3, #3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	3208      	adds	r2, #8
 8003f44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f48:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	f003 0307 	and.w	r3, r3, #7
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	220f      	movs	r2, #15
 8003f54:	fa02 f303 	lsl.w	r3, r2, r3
 8003f58:	43db      	mvns	r3, r3
 8003f5a:	69ba      	ldr	r2, [r7, #24]
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	691a      	ldr	r2, [r3, #16]
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	f003 0307 	and.w	r3, r3, #7
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f70:	69ba      	ldr	r2, [r7, #24]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003f76:	69fb      	ldr	r3, [r7, #28]
 8003f78:	08da      	lsrs	r2, r3, #3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	3208      	adds	r2, #8
 8003f7e:	69b9      	ldr	r1, [r7, #24]
 8003f80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	005b      	lsls	r3, r3, #1
 8003f8e:	2203      	movs	r2, #3
 8003f90:	fa02 f303 	lsl.w	r3, r2, r3
 8003f94:	43db      	mvns	r3, r3
 8003f96:	69ba      	ldr	r2, [r7, #24]
 8003f98:	4013      	ands	r3, r2
 8003f9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	f003 0203 	and.w	r2, r3, #3
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	005b      	lsls	r3, r3, #1
 8003fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fac:	69ba      	ldr	r2, [r7, #24]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	69ba      	ldr	r2, [r7, #24]
 8003fb6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	f000 80b4 	beq.w	800412e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	60fb      	str	r3, [r7, #12]
 8003fca:	4b60      	ldr	r3, [pc, #384]	@ (800414c <HAL_GPIO_Init+0x30c>)
 8003fcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fce:	4a5f      	ldr	r2, [pc, #380]	@ (800414c <HAL_GPIO_Init+0x30c>)
 8003fd0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003fd4:	6453      	str	r3, [r2, #68]	@ 0x44
 8003fd6:	4b5d      	ldr	r3, [pc, #372]	@ (800414c <HAL_GPIO_Init+0x30c>)
 8003fd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fda:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003fde:	60fb      	str	r3, [r7, #12]
 8003fe0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003fe2:	4a5b      	ldr	r2, [pc, #364]	@ (8004150 <HAL_GPIO_Init+0x310>)
 8003fe4:	69fb      	ldr	r3, [r7, #28]
 8003fe6:	089b      	lsrs	r3, r3, #2
 8003fe8:	3302      	adds	r3, #2
 8003fea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	f003 0303 	and.w	r3, r3, #3
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	220f      	movs	r2, #15
 8003ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8003ffe:	43db      	mvns	r3, r3
 8004000:	69ba      	ldr	r2, [r7, #24]
 8004002:	4013      	ands	r3, r2
 8004004:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a52      	ldr	r2, [pc, #328]	@ (8004154 <HAL_GPIO_Init+0x314>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d02b      	beq.n	8004066 <HAL_GPIO_Init+0x226>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4a51      	ldr	r2, [pc, #324]	@ (8004158 <HAL_GPIO_Init+0x318>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d025      	beq.n	8004062 <HAL_GPIO_Init+0x222>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a50      	ldr	r2, [pc, #320]	@ (800415c <HAL_GPIO_Init+0x31c>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d01f      	beq.n	800405e <HAL_GPIO_Init+0x21e>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a4f      	ldr	r2, [pc, #316]	@ (8004160 <HAL_GPIO_Init+0x320>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d019      	beq.n	800405a <HAL_GPIO_Init+0x21a>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a4e      	ldr	r2, [pc, #312]	@ (8004164 <HAL_GPIO_Init+0x324>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d013      	beq.n	8004056 <HAL_GPIO_Init+0x216>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4a4d      	ldr	r2, [pc, #308]	@ (8004168 <HAL_GPIO_Init+0x328>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d00d      	beq.n	8004052 <HAL_GPIO_Init+0x212>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a4c      	ldr	r2, [pc, #304]	@ (800416c <HAL_GPIO_Init+0x32c>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d007      	beq.n	800404e <HAL_GPIO_Init+0x20e>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a4b      	ldr	r2, [pc, #300]	@ (8004170 <HAL_GPIO_Init+0x330>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d101      	bne.n	800404a <HAL_GPIO_Init+0x20a>
 8004046:	2307      	movs	r3, #7
 8004048:	e00e      	b.n	8004068 <HAL_GPIO_Init+0x228>
 800404a:	2308      	movs	r3, #8
 800404c:	e00c      	b.n	8004068 <HAL_GPIO_Init+0x228>
 800404e:	2306      	movs	r3, #6
 8004050:	e00a      	b.n	8004068 <HAL_GPIO_Init+0x228>
 8004052:	2305      	movs	r3, #5
 8004054:	e008      	b.n	8004068 <HAL_GPIO_Init+0x228>
 8004056:	2304      	movs	r3, #4
 8004058:	e006      	b.n	8004068 <HAL_GPIO_Init+0x228>
 800405a:	2303      	movs	r3, #3
 800405c:	e004      	b.n	8004068 <HAL_GPIO_Init+0x228>
 800405e:	2302      	movs	r3, #2
 8004060:	e002      	b.n	8004068 <HAL_GPIO_Init+0x228>
 8004062:	2301      	movs	r3, #1
 8004064:	e000      	b.n	8004068 <HAL_GPIO_Init+0x228>
 8004066:	2300      	movs	r3, #0
 8004068:	69fa      	ldr	r2, [r7, #28]
 800406a:	f002 0203 	and.w	r2, r2, #3
 800406e:	0092      	lsls	r2, r2, #2
 8004070:	4093      	lsls	r3, r2
 8004072:	69ba      	ldr	r2, [r7, #24]
 8004074:	4313      	orrs	r3, r2
 8004076:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004078:	4935      	ldr	r1, [pc, #212]	@ (8004150 <HAL_GPIO_Init+0x310>)
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	089b      	lsrs	r3, r3, #2
 800407e:	3302      	adds	r3, #2
 8004080:	69ba      	ldr	r2, [r7, #24]
 8004082:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004086:	4b3b      	ldr	r3, [pc, #236]	@ (8004174 <HAL_GPIO_Init+0x334>)
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	43db      	mvns	r3, r3
 8004090:	69ba      	ldr	r2, [r7, #24]
 8004092:	4013      	ands	r3, r2
 8004094:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d003      	beq.n	80040aa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80040a2:	69ba      	ldr	r2, [r7, #24]
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80040aa:	4a32      	ldr	r2, [pc, #200]	@ (8004174 <HAL_GPIO_Init+0x334>)
 80040ac:	69bb      	ldr	r3, [r7, #24]
 80040ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80040b0:	4b30      	ldr	r3, [pc, #192]	@ (8004174 <HAL_GPIO_Init+0x334>)
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	43db      	mvns	r3, r3
 80040ba:	69ba      	ldr	r2, [r7, #24]
 80040bc:	4013      	ands	r3, r2
 80040be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d003      	beq.n	80040d4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80040cc:	69ba      	ldr	r2, [r7, #24]
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80040d4:	4a27      	ldr	r2, [pc, #156]	@ (8004174 <HAL_GPIO_Init+0x334>)
 80040d6:	69bb      	ldr	r3, [r7, #24]
 80040d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80040da:	4b26      	ldr	r3, [pc, #152]	@ (8004174 <HAL_GPIO_Init+0x334>)
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	43db      	mvns	r3, r3
 80040e4:	69ba      	ldr	r2, [r7, #24]
 80040e6:	4013      	ands	r3, r2
 80040e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d003      	beq.n	80040fe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80040f6:	69ba      	ldr	r2, [r7, #24]
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80040fe:	4a1d      	ldr	r2, [pc, #116]	@ (8004174 <HAL_GPIO_Init+0x334>)
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004104:	4b1b      	ldr	r3, [pc, #108]	@ (8004174 <HAL_GPIO_Init+0x334>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	43db      	mvns	r3, r3
 800410e:	69ba      	ldr	r2, [r7, #24]
 8004110:	4013      	ands	r3, r2
 8004112:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800411c:	2b00      	cmp	r3, #0
 800411e:	d003      	beq.n	8004128 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004120:	69ba      	ldr	r2, [r7, #24]
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	4313      	orrs	r3, r2
 8004126:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004128:	4a12      	ldr	r2, [pc, #72]	@ (8004174 <HAL_GPIO_Init+0x334>)
 800412a:	69bb      	ldr	r3, [r7, #24]
 800412c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	3301      	adds	r3, #1
 8004132:	61fb      	str	r3, [r7, #28]
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	2b0f      	cmp	r3, #15
 8004138:	f67f ae90 	bls.w	8003e5c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800413c:	bf00      	nop
 800413e:	bf00      	nop
 8004140:	3724      	adds	r7, #36	@ 0x24
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop
 800414c:	40023800 	.word	0x40023800
 8004150:	40013800 	.word	0x40013800
 8004154:	40020000 	.word	0x40020000
 8004158:	40020400 	.word	0x40020400
 800415c:	40020800 	.word	0x40020800
 8004160:	40020c00 	.word	0x40020c00
 8004164:	40021000 	.word	0x40021000
 8004168:	40021400 	.word	0x40021400
 800416c:	40021800 	.word	0x40021800
 8004170:	40021c00 	.word	0x40021c00
 8004174:	40013c00 	.word	0x40013c00

08004178 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	460b      	mov	r3, r1
 8004182:	807b      	strh	r3, [r7, #2]
 8004184:	4613      	mov	r3, r2
 8004186:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004188:	787b      	ldrb	r3, [r7, #1]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d003      	beq.n	8004196 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800418e:	887a      	ldrh	r2, [r7, #2]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004194:	e003      	b.n	800419e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004196:	887b      	ldrh	r3, [r7, #2]
 8004198:	041a      	lsls	r2, r3, #16
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	619a      	str	r2, [r3, #24]
}
 800419e:	bf00      	nop
 80041a0:	370c      	adds	r7, #12
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr

080041aa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80041aa:	b480      	push	{r7}
 80041ac:	b085      	sub	sp, #20
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	6078      	str	r0, [r7, #4]
 80041b2:	460b      	mov	r3, r1
 80041b4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	695b      	ldr	r3, [r3, #20]
 80041ba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80041bc:	887a      	ldrh	r2, [r7, #2]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	4013      	ands	r3, r2
 80041c2:	041a      	lsls	r2, r3, #16
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	43d9      	mvns	r1, r3
 80041c8:	887b      	ldrh	r3, [r7, #2]
 80041ca:	400b      	ands	r3, r1
 80041cc:	431a      	orrs	r2, r3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	619a      	str	r2, [r3, #24]
}
 80041d2:	bf00      	nop
 80041d4:	3714      	adds	r7, #20
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr
	...

080041e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b082      	sub	sp, #8
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	4603      	mov	r3, r0
 80041e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80041ea:	4b08      	ldr	r3, [pc, #32]	@ (800420c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80041ec:	695a      	ldr	r2, [r3, #20]
 80041ee:	88fb      	ldrh	r3, [r7, #6]
 80041f0:	4013      	ands	r3, r2
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d006      	beq.n	8004204 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80041f6:	4a05      	ldr	r2, [pc, #20]	@ (800420c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80041f8:	88fb      	ldrh	r3, [r7, #6]
 80041fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80041fc:	88fb      	ldrh	r3, [r7, #6]
 80041fe:	4618      	mov	r0, r3
 8004200:	f7fd fbc2 	bl	8001988 <HAL_GPIO_EXTI_Callback>
  }
}
 8004204:	bf00      	nop
 8004206:	3708      	adds	r7, #8
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}
 800420c:	40013c00 	.word	0x40013c00

08004210 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b084      	sub	sp, #16
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d101      	bne.n	8004222 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e12b      	b.n	800447a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004228:	b2db      	uxtb	r3, r3
 800422a:	2b00      	cmp	r3, #0
 800422c:	d106      	bne.n	800423c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2200      	movs	r2, #0
 8004232:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f7fe f9ae 	bl	8002598 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2224      	movs	r2, #36	@ 0x24
 8004240:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f022 0201 	bic.w	r2, r2, #1
 8004252:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004262:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004272:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004274:	f003 fc54 	bl	8007b20 <HAL_RCC_GetPCLK1Freq>
 8004278:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	4a81      	ldr	r2, [pc, #516]	@ (8004484 <HAL_I2C_Init+0x274>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d807      	bhi.n	8004294 <HAL_I2C_Init+0x84>
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	4a80      	ldr	r2, [pc, #512]	@ (8004488 <HAL_I2C_Init+0x278>)
 8004288:	4293      	cmp	r3, r2
 800428a:	bf94      	ite	ls
 800428c:	2301      	movls	r3, #1
 800428e:	2300      	movhi	r3, #0
 8004290:	b2db      	uxtb	r3, r3
 8004292:	e006      	b.n	80042a2 <HAL_I2C_Init+0x92>
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	4a7d      	ldr	r2, [pc, #500]	@ (800448c <HAL_I2C_Init+0x27c>)
 8004298:	4293      	cmp	r3, r2
 800429a:	bf94      	ite	ls
 800429c:	2301      	movls	r3, #1
 800429e:	2300      	movhi	r3, #0
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d001      	beq.n	80042aa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e0e7      	b.n	800447a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	4a78      	ldr	r2, [pc, #480]	@ (8004490 <HAL_I2C_Init+0x280>)
 80042ae:	fba2 2303 	umull	r2, r3, r2, r3
 80042b2:	0c9b      	lsrs	r3, r3, #18
 80042b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	68ba      	ldr	r2, [r7, #8]
 80042c6:	430a      	orrs	r2, r1
 80042c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	6a1b      	ldr	r3, [r3, #32]
 80042d0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	4a6a      	ldr	r2, [pc, #424]	@ (8004484 <HAL_I2C_Init+0x274>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d802      	bhi.n	80042e4 <HAL_I2C_Init+0xd4>
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	3301      	adds	r3, #1
 80042e2:	e009      	b.n	80042f8 <HAL_I2C_Init+0xe8>
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80042ea:	fb02 f303 	mul.w	r3, r2, r3
 80042ee:	4a69      	ldr	r2, [pc, #420]	@ (8004494 <HAL_I2C_Init+0x284>)
 80042f0:	fba2 2303 	umull	r2, r3, r2, r3
 80042f4:	099b      	lsrs	r3, r3, #6
 80042f6:	3301      	adds	r3, #1
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	6812      	ldr	r2, [r2, #0]
 80042fc:	430b      	orrs	r3, r1
 80042fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	69db      	ldr	r3, [r3, #28]
 8004306:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800430a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	495c      	ldr	r1, [pc, #368]	@ (8004484 <HAL_I2C_Init+0x274>)
 8004314:	428b      	cmp	r3, r1
 8004316:	d819      	bhi.n	800434c <HAL_I2C_Init+0x13c>
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	1e59      	subs	r1, r3, #1
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	005b      	lsls	r3, r3, #1
 8004322:	fbb1 f3f3 	udiv	r3, r1, r3
 8004326:	1c59      	adds	r1, r3, #1
 8004328:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800432c:	400b      	ands	r3, r1
 800432e:	2b00      	cmp	r3, #0
 8004330:	d00a      	beq.n	8004348 <HAL_I2C_Init+0x138>
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	1e59      	subs	r1, r3, #1
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	005b      	lsls	r3, r3, #1
 800433c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004340:	3301      	adds	r3, #1
 8004342:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004346:	e051      	b.n	80043ec <HAL_I2C_Init+0x1dc>
 8004348:	2304      	movs	r3, #4
 800434a:	e04f      	b.n	80043ec <HAL_I2C_Init+0x1dc>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d111      	bne.n	8004378 <HAL_I2C_Init+0x168>
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	1e58      	subs	r0, r3, #1
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6859      	ldr	r1, [r3, #4]
 800435c:	460b      	mov	r3, r1
 800435e:	005b      	lsls	r3, r3, #1
 8004360:	440b      	add	r3, r1
 8004362:	fbb0 f3f3 	udiv	r3, r0, r3
 8004366:	3301      	adds	r3, #1
 8004368:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800436c:	2b00      	cmp	r3, #0
 800436e:	bf0c      	ite	eq
 8004370:	2301      	moveq	r3, #1
 8004372:	2300      	movne	r3, #0
 8004374:	b2db      	uxtb	r3, r3
 8004376:	e012      	b.n	800439e <HAL_I2C_Init+0x18e>
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	1e58      	subs	r0, r3, #1
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6859      	ldr	r1, [r3, #4]
 8004380:	460b      	mov	r3, r1
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	440b      	add	r3, r1
 8004386:	0099      	lsls	r1, r3, #2
 8004388:	440b      	add	r3, r1
 800438a:	fbb0 f3f3 	udiv	r3, r0, r3
 800438e:	3301      	adds	r3, #1
 8004390:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004394:	2b00      	cmp	r3, #0
 8004396:	bf0c      	ite	eq
 8004398:	2301      	moveq	r3, #1
 800439a:	2300      	movne	r3, #0
 800439c:	b2db      	uxtb	r3, r3
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d001      	beq.n	80043a6 <HAL_I2C_Init+0x196>
 80043a2:	2301      	movs	r3, #1
 80043a4:	e022      	b.n	80043ec <HAL_I2C_Init+0x1dc>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d10e      	bne.n	80043cc <HAL_I2C_Init+0x1bc>
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	1e58      	subs	r0, r3, #1
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6859      	ldr	r1, [r3, #4]
 80043b6:	460b      	mov	r3, r1
 80043b8:	005b      	lsls	r3, r3, #1
 80043ba:	440b      	add	r3, r1
 80043bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80043c0:	3301      	adds	r3, #1
 80043c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80043ca:	e00f      	b.n	80043ec <HAL_I2C_Init+0x1dc>
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	1e58      	subs	r0, r3, #1
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6859      	ldr	r1, [r3, #4]
 80043d4:	460b      	mov	r3, r1
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	440b      	add	r3, r1
 80043da:	0099      	lsls	r1, r3, #2
 80043dc:	440b      	add	r3, r1
 80043de:	fbb0 f3f3 	udiv	r3, r0, r3
 80043e2:	3301      	adds	r3, #1
 80043e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043e8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80043ec:	6879      	ldr	r1, [r7, #4]
 80043ee:	6809      	ldr	r1, [r1, #0]
 80043f0:	4313      	orrs	r3, r2
 80043f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	69da      	ldr	r2, [r3, #28]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6a1b      	ldr	r3, [r3, #32]
 8004406:	431a      	orrs	r2, r3
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	430a      	orrs	r2, r1
 800440e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800441a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800441e:	687a      	ldr	r2, [r7, #4]
 8004420:	6911      	ldr	r1, [r2, #16]
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	68d2      	ldr	r2, [r2, #12]
 8004426:	4311      	orrs	r1, r2
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	6812      	ldr	r2, [r2, #0]
 800442c:	430b      	orrs	r3, r1
 800442e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	695a      	ldr	r2, [r3, #20]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	699b      	ldr	r3, [r3, #24]
 8004442:	431a      	orrs	r2, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	430a      	orrs	r2, r1
 800444a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f042 0201 	orr.w	r2, r2, #1
 800445a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2220      	movs	r2, #32
 8004466:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004478:	2300      	movs	r3, #0
}
 800447a:	4618      	mov	r0, r3
 800447c:	3710      	adds	r7, #16
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	000186a0 	.word	0x000186a0
 8004488:	001e847f 	.word	0x001e847f
 800448c:	003d08ff 	.word	0x003d08ff
 8004490:	431bde83 	.word	0x431bde83
 8004494:	10624dd3 	.word	0x10624dd3

08004498 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b088      	sub	sp, #32
 800449c:	af02      	add	r7, sp, #8
 800449e:	60f8      	str	r0, [r7, #12]
 80044a0:	4608      	mov	r0, r1
 80044a2:	4611      	mov	r1, r2
 80044a4:	461a      	mov	r2, r3
 80044a6:	4603      	mov	r3, r0
 80044a8:	817b      	strh	r3, [r7, #10]
 80044aa:	460b      	mov	r3, r1
 80044ac:	813b      	strh	r3, [r7, #8]
 80044ae:	4613      	mov	r3, r2
 80044b0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80044b2:	f7fe fbc5 	bl	8002c40 <HAL_GetTick>
 80044b6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	2b20      	cmp	r3, #32
 80044c2:	f040 80d9 	bne.w	8004678 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	9300      	str	r3, [sp, #0]
 80044ca:	2319      	movs	r3, #25
 80044cc:	2201      	movs	r2, #1
 80044ce:	496d      	ldr	r1, [pc, #436]	@ (8004684 <HAL_I2C_Mem_Write+0x1ec>)
 80044d0:	68f8      	ldr	r0, [r7, #12]
 80044d2:	f000 fc8b 	bl	8004dec <I2C_WaitOnFlagUntilTimeout>
 80044d6:	4603      	mov	r3, r0
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d001      	beq.n	80044e0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80044dc:	2302      	movs	r3, #2
 80044de:	e0cc      	b.n	800467a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d101      	bne.n	80044ee <HAL_I2C_Mem_Write+0x56>
 80044ea:	2302      	movs	r3, #2
 80044ec:	e0c5      	b.n	800467a <HAL_I2C_Mem_Write+0x1e2>
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2201      	movs	r2, #1
 80044f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 0301 	and.w	r3, r3, #1
 8004500:	2b01      	cmp	r3, #1
 8004502:	d007      	beq.n	8004514 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f042 0201 	orr.w	r2, r2, #1
 8004512:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004522:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2221      	movs	r2, #33	@ 0x21
 8004528:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2240      	movs	r2, #64	@ 0x40
 8004530:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2200      	movs	r2, #0
 8004538:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6a3a      	ldr	r2, [r7, #32]
 800453e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004544:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800454a:	b29a      	uxth	r2, r3
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	4a4d      	ldr	r2, [pc, #308]	@ (8004688 <HAL_I2C_Mem_Write+0x1f0>)
 8004554:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004556:	88f8      	ldrh	r0, [r7, #6]
 8004558:	893a      	ldrh	r2, [r7, #8]
 800455a:	8979      	ldrh	r1, [r7, #10]
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	9301      	str	r3, [sp, #4]
 8004560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004562:	9300      	str	r3, [sp, #0]
 8004564:	4603      	mov	r3, r0
 8004566:	68f8      	ldr	r0, [r7, #12]
 8004568:	f000 fac2 	bl	8004af0 <I2C_RequestMemoryWrite>
 800456c:	4603      	mov	r3, r0
 800456e:	2b00      	cmp	r3, #0
 8004570:	d052      	beq.n	8004618 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e081      	b.n	800467a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004576:	697a      	ldr	r2, [r7, #20]
 8004578:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800457a:	68f8      	ldr	r0, [r7, #12]
 800457c:	f000 fd50 	bl	8005020 <I2C_WaitOnTXEFlagUntilTimeout>
 8004580:	4603      	mov	r3, r0
 8004582:	2b00      	cmp	r3, #0
 8004584:	d00d      	beq.n	80045a2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800458a:	2b04      	cmp	r3, #4
 800458c:	d107      	bne.n	800459e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800459c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e06b      	b.n	800467a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045a6:	781a      	ldrb	r2, [r3, #0]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045b2:	1c5a      	adds	r2, r3, #1
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045bc:	3b01      	subs	r3, #1
 80045be:	b29a      	uxth	r2, r3
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	3b01      	subs	r3, #1
 80045cc:	b29a      	uxth	r2, r3
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	695b      	ldr	r3, [r3, #20]
 80045d8:	f003 0304 	and.w	r3, r3, #4
 80045dc:	2b04      	cmp	r3, #4
 80045de:	d11b      	bne.n	8004618 <HAL_I2C_Mem_Write+0x180>
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d017      	beq.n	8004618 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ec:	781a      	ldrb	r2, [r3, #0]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045f8:	1c5a      	adds	r2, r3, #1
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004602:	3b01      	subs	r3, #1
 8004604:	b29a      	uxth	r2, r3
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800460e:	b29b      	uxth	r3, r3
 8004610:	3b01      	subs	r3, #1
 8004612:	b29a      	uxth	r2, r3
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800461c:	2b00      	cmp	r3, #0
 800461e:	d1aa      	bne.n	8004576 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004620:	697a      	ldr	r2, [r7, #20]
 8004622:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004624:	68f8      	ldr	r0, [r7, #12]
 8004626:	f000 fd43 	bl	80050b0 <I2C_WaitOnBTFFlagUntilTimeout>
 800462a:	4603      	mov	r3, r0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d00d      	beq.n	800464c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004634:	2b04      	cmp	r3, #4
 8004636:	d107      	bne.n	8004648 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004646:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e016      	b.n	800467a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800465a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2220      	movs	r2, #32
 8004660:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2200      	movs	r2, #0
 8004668:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2200      	movs	r2, #0
 8004670:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004674:	2300      	movs	r3, #0
 8004676:	e000      	b.n	800467a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004678:	2302      	movs	r3, #2
  }
}
 800467a:	4618      	mov	r0, r3
 800467c:	3718      	adds	r7, #24
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	00100002 	.word	0x00100002
 8004688:	ffff0000 	.word	0xffff0000

0800468c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b08c      	sub	sp, #48	@ 0x30
 8004690:	af02      	add	r7, sp, #8
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	4608      	mov	r0, r1
 8004696:	4611      	mov	r1, r2
 8004698:	461a      	mov	r2, r3
 800469a:	4603      	mov	r3, r0
 800469c:	817b      	strh	r3, [r7, #10]
 800469e:	460b      	mov	r3, r1
 80046a0:	813b      	strh	r3, [r7, #8]
 80046a2:	4613      	mov	r3, r2
 80046a4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80046a6:	f7fe facb 	bl	8002c40 <HAL_GetTick>
 80046aa:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	2b20      	cmp	r3, #32
 80046b6:	f040 8214 	bne.w	8004ae2 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80046ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046bc:	9300      	str	r3, [sp, #0]
 80046be:	2319      	movs	r3, #25
 80046c0:	2201      	movs	r2, #1
 80046c2:	497b      	ldr	r1, [pc, #492]	@ (80048b0 <HAL_I2C_Mem_Read+0x224>)
 80046c4:	68f8      	ldr	r0, [r7, #12]
 80046c6:	f000 fb91 	bl	8004dec <I2C_WaitOnFlagUntilTimeout>
 80046ca:	4603      	mov	r3, r0
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d001      	beq.n	80046d4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80046d0:	2302      	movs	r3, #2
 80046d2:	e207      	b.n	8004ae4 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d101      	bne.n	80046e2 <HAL_I2C_Mem_Read+0x56>
 80046de:	2302      	movs	r3, #2
 80046e0:	e200      	b.n	8004ae4 <HAL_I2C_Mem_Read+0x458>
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2201      	movs	r2, #1
 80046e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 0301 	and.w	r3, r3, #1
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d007      	beq.n	8004708 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f042 0201 	orr.w	r2, r2, #1
 8004706:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004716:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2222      	movs	r2, #34	@ 0x22
 800471c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2240      	movs	r2, #64	@ 0x40
 8004724:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2200      	movs	r2, #0
 800472c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004732:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004738:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800473e:	b29a      	uxth	r2, r3
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	4a5b      	ldr	r2, [pc, #364]	@ (80048b4 <HAL_I2C_Mem_Read+0x228>)
 8004748:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800474a:	88f8      	ldrh	r0, [r7, #6]
 800474c:	893a      	ldrh	r2, [r7, #8]
 800474e:	8979      	ldrh	r1, [r7, #10]
 8004750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004752:	9301      	str	r3, [sp, #4]
 8004754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004756:	9300      	str	r3, [sp, #0]
 8004758:	4603      	mov	r3, r0
 800475a:	68f8      	ldr	r0, [r7, #12]
 800475c:	f000 fa5e 	bl	8004c1c <I2C_RequestMemoryRead>
 8004760:	4603      	mov	r3, r0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d001      	beq.n	800476a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e1bc      	b.n	8004ae4 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800476e:	2b00      	cmp	r3, #0
 8004770:	d113      	bne.n	800479a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004772:	2300      	movs	r3, #0
 8004774:	623b      	str	r3, [r7, #32]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	695b      	ldr	r3, [r3, #20]
 800477c:	623b      	str	r3, [r7, #32]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	699b      	ldr	r3, [r3, #24]
 8004784:	623b      	str	r3, [r7, #32]
 8004786:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004796:	601a      	str	r2, [r3, #0]
 8004798:	e190      	b.n	8004abc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d11b      	bne.n	80047da <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047b0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047b2:	2300      	movs	r3, #0
 80047b4:	61fb      	str	r3, [r7, #28]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	695b      	ldr	r3, [r3, #20]
 80047bc:	61fb      	str	r3, [r7, #28]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	699b      	ldr	r3, [r3, #24]
 80047c4:	61fb      	str	r3, [r7, #28]
 80047c6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047d6:	601a      	str	r2, [r3, #0]
 80047d8:	e170      	b.n	8004abc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047de:	2b02      	cmp	r3, #2
 80047e0:	d11b      	bne.n	800481a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047f0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004800:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004802:	2300      	movs	r3, #0
 8004804:	61bb      	str	r3, [r7, #24]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	695b      	ldr	r3, [r3, #20]
 800480c:	61bb      	str	r3, [r7, #24]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	699b      	ldr	r3, [r3, #24]
 8004814:	61bb      	str	r3, [r7, #24]
 8004816:	69bb      	ldr	r3, [r7, #24]
 8004818:	e150      	b.n	8004abc <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800481a:	2300      	movs	r3, #0
 800481c:	617b      	str	r3, [r7, #20]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	695b      	ldr	r3, [r3, #20]
 8004824:	617b      	str	r3, [r7, #20]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	699b      	ldr	r3, [r3, #24]
 800482c:	617b      	str	r3, [r7, #20]
 800482e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004830:	e144      	b.n	8004abc <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004836:	2b03      	cmp	r3, #3
 8004838:	f200 80f1 	bhi.w	8004a1e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004840:	2b01      	cmp	r3, #1
 8004842:	d123      	bne.n	800488c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004844:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004846:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004848:	68f8      	ldr	r0, [r7, #12]
 800484a:	f000 fc79 	bl	8005140 <I2C_WaitOnRXNEFlagUntilTimeout>
 800484e:	4603      	mov	r3, r0
 8004850:	2b00      	cmp	r3, #0
 8004852:	d001      	beq.n	8004858 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	e145      	b.n	8004ae4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	691a      	ldr	r2, [r3, #16]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004862:	b2d2      	uxtb	r2, r2
 8004864:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800486a:	1c5a      	adds	r2, r3, #1
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004874:	3b01      	subs	r3, #1
 8004876:	b29a      	uxth	r2, r3
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004880:	b29b      	uxth	r3, r3
 8004882:	3b01      	subs	r3, #1
 8004884:	b29a      	uxth	r2, r3
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800488a:	e117      	b.n	8004abc <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004890:	2b02      	cmp	r3, #2
 8004892:	d14e      	bne.n	8004932 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004896:	9300      	str	r3, [sp, #0]
 8004898:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800489a:	2200      	movs	r2, #0
 800489c:	4906      	ldr	r1, [pc, #24]	@ (80048b8 <HAL_I2C_Mem_Read+0x22c>)
 800489e:	68f8      	ldr	r0, [r7, #12]
 80048a0:	f000 faa4 	bl	8004dec <I2C_WaitOnFlagUntilTimeout>
 80048a4:	4603      	mov	r3, r0
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d008      	beq.n	80048bc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e11a      	b.n	8004ae4 <HAL_I2C_Mem_Read+0x458>
 80048ae:	bf00      	nop
 80048b0:	00100002 	.word	0x00100002
 80048b4:	ffff0000 	.word	0xffff0000
 80048b8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	691a      	ldr	r2, [r3, #16]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048d6:	b2d2      	uxtb	r2, r2
 80048d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048de:	1c5a      	adds	r2, r3, #1
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048e8:	3b01      	subs	r3, #1
 80048ea:	b29a      	uxth	r2, r3
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	3b01      	subs	r3, #1
 80048f8:	b29a      	uxth	r2, r3
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	691a      	ldr	r2, [r3, #16]
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004908:	b2d2      	uxtb	r2, r2
 800490a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004910:	1c5a      	adds	r2, r3, #1
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800491a:	3b01      	subs	r3, #1
 800491c:	b29a      	uxth	r2, r3
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004926:	b29b      	uxth	r3, r3
 8004928:	3b01      	subs	r3, #1
 800492a:	b29a      	uxth	r2, r3
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004930:	e0c4      	b.n	8004abc <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004934:	9300      	str	r3, [sp, #0]
 8004936:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004938:	2200      	movs	r2, #0
 800493a:	496c      	ldr	r1, [pc, #432]	@ (8004aec <HAL_I2C_Mem_Read+0x460>)
 800493c:	68f8      	ldr	r0, [r7, #12]
 800493e:	f000 fa55 	bl	8004dec <I2C_WaitOnFlagUntilTimeout>
 8004942:	4603      	mov	r3, r0
 8004944:	2b00      	cmp	r3, #0
 8004946:	d001      	beq.n	800494c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e0cb      	b.n	8004ae4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800495a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	691a      	ldr	r2, [r3, #16]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004966:	b2d2      	uxtb	r2, r2
 8004968:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800496e:	1c5a      	adds	r2, r3, #1
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004978:	3b01      	subs	r3, #1
 800497a:	b29a      	uxth	r2, r3
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004984:	b29b      	uxth	r3, r3
 8004986:	3b01      	subs	r3, #1
 8004988:	b29a      	uxth	r2, r3
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800498e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004990:	9300      	str	r3, [sp, #0]
 8004992:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004994:	2200      	movs	r2, #0
 8004996:	4955      	ldr	r1, [pc, #340]	@ (8004aec <HAL_I2C_Mem_Read+0x460>)
 8004998:	68f8      	ldr	r0, [r7, #12]
 800499a:	f000 fa27 	bl	8004dec <I2C_WaitOnFlagUntilTimeout>
 800499e:	4603      	mov	r3, r0
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d001      	beq.n	80049a8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	e09d      	b.n	8004ae4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	691a      	ldr	r2, [r3, #16]
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049c2:	b2d2      	uxtb	r2, r2
 80049c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ca:	1c5a      	adds	r2, r3, #1
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049d4:	3b01      	subs	r3, #1
 80049d6:	b29a      	uxth	r2, r3
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	3b01      	subs	r3, #1
 80049e4:	b29a      	uxth	r2, r3
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	691a      	ldr	r2, [r3, #16]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049f4:	b2d2      	uxtb	r2, r2
 80049f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049fc:	1c5a      	adds	r2, r3, #1
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a06:	3b01      	subs	r3, #1
 8004a08:	b29a      	uxth	r2, r3
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	3b01      	subs	r3, #1
 8004a16:	b29a      	uxth	r2, r3
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004a1c:	e04e      	b.n	8004abc <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a20:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004a22:	68f8      	ldr	r0, [r7, #12]
 8004a24:	f000 fb8c 	bl	8005140 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d001      	beq.n	8004a32 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e058      	b.n	8004ae4 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	691a      	ldr	r2, [r3, #16]
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a3c:	b2d2      	uxtb	r2, r2
 8004a3e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a44:	1c5a      	adds	r2, r3, #1
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a4e:	3b01      	subs	r3, #1
 8004a50:	b29a      	uxth	r2, r3
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	3b01      	subs	r3, #1
 8004a5e:	b29a      	uxth	r2, r3
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	695b      	ldr	r3, [r3, #20]
 8004a6a:	f003 0304 	and.w	r3, r3, #4
 8004a6e:	2b04      	cmp	r3, #4
 8004a70:	d124      	bne.n	8004abc <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a76:	2b03      	cmp	r3, #3
 8004a78:	d107      	bne.n	8004a8a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a88:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	691a      	ldr	r2, [r3, #16]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a94:	b2d2      	uxtb	r2, r2
 8004a96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a9c:	1c5a      	adds	r2, r3, #1
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004aa6:	3b01      	subs	r3, #1
 8004aa8:	b29a      	uxth	r2, r3
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	3b01      	subs	r3, #1
 8004ab6:	b29a      	uxth	r2, r3
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	f47f aeb6 	bne.w	8004832 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2220      	movs	r2, #32
 8004aca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	e000      	b.n	8004ae4 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004ae2:	2302      	movs	r3, #2
  }
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3728      	adds	r7, #40	@ 0x28
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}
 8004aec:	00010004 	.word	0x00010004

08004af0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b088      	sub	sp, #32
 8004af4:	af02      	add	r7, sp, #8
 8004af6:	60f8      	str	r0, [r7, #12]
 8004af8:	4608      	mov	r0, r1
 8004afa:	4611      	mov	r1, r2
 8004afc:	461a      	mov	r2, r3
 8004afe:	4603      	mov	r3, r0
 8004b00:	817b      	strh	r3, [r7, #10]
 8004b02:	460b      	mov	r3, r1
 8004b04:	813b      	strh	r3, [r7, #8]
 8004b06:	4613      	mov	r3, r2
 8004b08:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b18:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b1c:	9300      	str	r3, [sp, #0]
 8004b1e:	6a3b      	ldr	r3, [r7, #32]
 8004b20:	2200      	movs	r2, #0
 8004b22:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004b26:	68f8      	ldr	r0, [r7, #12]
 8004b28:	f000 f960 	bl	8004dec <I2C_WaitOnFlagUntilTimeout>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d00d      	beq.n	8004b4e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b40:	d103      	bne.n	8004b4a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b48:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	e05f      	b.n	8004c0e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004b4e:	897b      	ldrh	r3, [r7, #10]
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	461a      	mov	r2, r3
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004b5c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b60:	6a3a      	ldr	r2, [r7, #32]
 8004b62:	492d      	ldr	r1, [pc, #180]	@ (8004c18 <I2C_RequestMemoryWrite+0x128>)
 8004b64:	68f8      	ldr	r0, [r7, #12]
 8004b66:	f000 f9bb 	bl	8004ee0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d001      	beq.n	8004b74 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	e04c      	b.n	8004c0e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b74:	2300      	movs	r3, #0
 8004b76:	617b      	str	r3, [r7, #20]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	695b      	ldr	r3, [r3, #20]
 8004b7e:	617b      	str	r3, [r7, #20]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	699b      	ldr	r3, [r3, #24]
 8004b86:	617b      	str	r3, [r7, #20]
 8004b88:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b8c:	6a39      	ldr	r1, [r7, #32]
 8004b8e:	68f8      	ldr	r0, [r7, #12]
 8004b90:	f000 fa46 	bl	8005020 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d00d      	beq.n	8004bb6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b9e:	2b04      	cmp	r3, #4
 8004ba0:	d107      	bne.n	8004bb2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004bb0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e02b      	b.n	8004c0e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004bb6:	88fb      	ldrh	r3, [r7, #6]
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d105      	bne.n	8004bc8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004bbc:	893b      	ldrh	r3, [r7, #8]
 8004bbe:	b2da      	uxtb	r2, r3
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	611a      	str	r2, [r3, #16]
 8004bc6:	e021      	b.n	8004c0c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004bc8:	893b      	ldrh	r3, [r7, #8]
 8004bca:	0a1b      	lsrs	r3, r3, #8
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	b2da      	uxtb	r2, r3
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bd8:	6a39      	ldr	r1, [r7, #32]
 8004bda:	68f8      	ldr	r0, [r7, #12]
 8004bdc:	f000 fa20 	bl	8005020 <I2C_WaitOnTXEFlagUntilTimeout>
 8004be0:	4603      	mov	r3, r0
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d00d      	beq.n	8004c02 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bea:	2b04      	cmp	r3, #4
 8004bec:	d107      	bne.n	8004bfe <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004bfc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e005      	b.n	8004c0e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004c02:	893b      	ldrh	r3, [r7, #8]
 8004c04:	b2da      	uxtb	r2, r3
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004c0c:	2300      	movs	r3, #0
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3718      	adds	r7, #24
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}
 8004c16:	bf00      	nop
 8004c18:	00010002 	.word	0x00010002

08004c1c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b088      	sub	sp, #32
 8004c20:	af02      	add	r7, sp, #8
 8004c22:	60f8      	str	r0, [r7, #12]
 8004c24:	4608      	mov	r0, r1
 8004c26:	4611      	mov	r1, r2
 8004c28:	461a      	mov	r2, r3
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	817b      	strh	r3, [r7, #10]
 8004c2e:	460b      	mov	r3, r1
 8004c30:	813b      	strh	r3, [r7, #8]
 8004c32:	4613      	mov	r3, r2
 8004c34:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004c44:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004c54:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c58:	9300      	str	r3, [sp, #0]
 8004c5a:	6a3b      	ldr	r3, [r7, #32]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004c62:	68f8      	ldr	r0, [r7, #12]
 8004c64:	f000 f8c2 	bl	8004dec <I2C_WaitOnFlagUntilTimeout>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d00d      	beq.n	8004c8a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c78:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c7c:	d103      	bne.n	8004c86 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c84:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004c86:	2303      	movs	r3, #3
 8004c88:	e0aa      	b.n	8004de0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004c8a:	897b      	ldrh	r3, [r7, #10]
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	461a      	mov	r2, r3
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004c98:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c9c:	6a3a      	ldr	r2, [r7, #32]
 8004c9e:	4952      	ldr	r1, [pc, #328]	@ (8004de8 <I2C_RequestMemoryRead+0x1cc>)
 8004ca0:	68f8      	ldr	r0, [r7, #12]
 8004ca2:	f000 f91d 	bl	8004ee0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d001      	beq.n	8004cb0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	e097      	b.n	8004de0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	617b      	str	r3, [r7, #20]
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	695b      	ldr	r3, [r3, #20]
 8004cba:	617b      	str	r3, [r7, #20]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	699b      	ldr	r3, [r3, #24]
 8004cc2:	617b      	str	r3, [r7, #20]
 8004cc4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cc8:	6a39      	ldr	r1, [r7, #32]
 8004cca:	68f8      	ldr	r0, [r7, #12]
 8004ccc:	f000 f9a8 	bl	8005020 <I2C_WaitOnTXEFlagUntilTimeout>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d00d      	beq.n	8004cf2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cda:	2b04      	cmp	r3, #4
 8004cdc:	d107      	bne.n	8004cee <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004cec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e076      	b.n	8004de0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004cf2:	88fb      	ldrh	r3, [r7, #6]
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d105      	bne.n	8004d04 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004cf8:	893b      	ldrh	r3, [r7, #8]
 8004cfa:	b2da      	uxtb	r2, r3
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	611a      	str	r2, [r3, #16]
 8004d02:	e021      	b.n	8004d48 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004d04:	893b      	ldrh	r3, [r7, #8]
 8004d06:	0a1b      	lsrs	r3, r3, #8
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	b2da      	uxtb	r2, r3
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d14:	6a39      	ldr	r1, [r7, #32]
 8004d16:	68f8      	ldr	r0, [r7, #12]
 8004d18:	f000 f982 	bl	8005020 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d00d      	beq.n	8004d3e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d26:	2b04      	cmp	r3, #4
 8004d28:	d107      	bne.n	8004d3a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d38:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e050      	b.n	8004de0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004d3e:	893b      	ldrh	r3, [r7, #8]
 8004d40:	b2da      	uxtb	r2, r3
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d4a:	6a39      	ldr	r1, [r7, #32]
 8004d4c:	68f8      	ldr	r0, [r7, #12]
 8004d4e:	f000 f967 	bl	8005020 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d52:	4603      	mov	r3, r0
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d00d      	beq.n	8004d74 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d5c:	2b04      	cmp	r3, #4
 8004d5e:	d107      	bne.n	8004d70 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d6e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	e035      	b.n	8004de0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004d82:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d86:	9300      	str	r3, [sp, #0]
 8004d88:	6a3b      	ldr	r3, [r7, #32]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004d90:	68f8      	ldr	r0, [r7, #12]
 8004d92:	f000 f82b 	bl	8004dec <I2C_WaitOnFlagUntilTimeout>
 8004d96:	4603      	mov	r3, r0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d00d      	beq.n	8004db8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004da6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004daa:	d103      	bne.n	8004db4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004db2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004db4:	2303      	movs	r3, #3
 8004db6:	e013      	b.n	8004de0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004db8:	897b      	ldrh	r3, [r7, #10]
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	f043 0301 	orr.w	r3, r3, #1
 8004dc0:	b2da      	uxtb	r2, r3
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dca:	6a3a      	ldr	r2, [r7, #32]
 8004dcc:	4906      	ldr	r1, [pc, #24]	@ (8004de8 <I2C_RequestMemoryRead+0x1cc>)
 8004dce:	68f8      	ldr	r0, [r7, #12]
 8004dd0:	f000 f886 	bl	8004ee0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d001      	beq.n	8004dde <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e000      	b.n	8004de0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004dde:	2300      	movs	r3, #0
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3718      	adds	r7, #24
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}
 8004de8:	00010002 	.word	0x00010002

08004dec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b084      	sub	sp, #16
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	60f8      	str	r0, [r7, #12]
 8004df4:	60b9      	str	r1, [r7, #8]
 8004df6:	603b      	str	r3, [r7, #0]
 8004df8:	4613      	mov	r3, r2
 8004dfa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004dfc:	e048      	b.n	8004e90 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e04:	d044      	beq.n	8004e90 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e06:	f7fd ff1b 	bl	8002c40 <HAL_GetTick>
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	69bb      	ldr	r3, [r7, #24]
 8004e0e:	1ad3      	subs	r3, r2, r3
 8004e10:	683a      	ldr	r2, [r7, #0]
 8004e12:	429a      	cmp	r2, r3
 8004e14:	d302      	bcc.n	8004e1c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d139      	bne.n	8004e90 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	0c1b      	lsrs	r3, r3, #16
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d10d      	bne.n	8004e42 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	695b      	ldr	r3, [r3, #20]
 8004e2c:	43da      	mvns	r2, r3
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	4013      	ands	r3, r2
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	bf0c      	ite	eq
 8004e38:	2301      	moveq	r3, #1
 8004e3a:	2300      	movne	r3, #0
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	461a      	mov	r2, r3
 8004e40:	e00c      	b.n	8004e5c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	699b      	ldr	r3, [r3, #24]
 8004e48:	43da      	mvns	r2, r3
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	4013      	ands	r3, r2
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	bf0c      	ite	eq
 8004e54:	2301      	moveq	r3, #1
 8004e56:	2300      	movne	r3, #0
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	79fb      	ldrb	r3, [r7, #7]
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d116      	bne.n	8004e90 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2200      	movs	r2, #0
 8004e66:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2220      	movs	r2, #32
 8004e6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2200      	movs	r2, #0
 8004e74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e7c:	f043 0220 	orr.w	r2, r3, #32
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2200      	movs	r2, #0
 8004e88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	e023      	b.n	8004ed8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	0c1b      	lsrs	r3, r3, #16
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d10d      	bne.n	8004eb6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	695b      	ldr	r3, [r3, #20]
 8004ea0:	43da      	mvns	r2, r3
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	4013      	ands	r3, r2
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	bf0c      	ite	eq
 8004eac:	2301      	moveq	r3, #1
 8004eae:	2300      	movne	r3, #0
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	e00c      	b.n	8004ed0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	699b      	ldr	r3, [r3, #24]
 8004ebc:	43da      	mvns	r2, r3
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	4013      	ands	r3, r2
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	bf0c      	ite	eq
 8004ec8:	2301      	moveq	r3, #1
 8004eca:	2300      	movne	r3, #0
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	461a      	mov	r2, r3
 8004ed0:	79fb      	ldrb	r3, [r7, #7]
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d093      	beq.n	8004dfe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ed6:	2300      	movs	r3, #0
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3710      	adds	r7, #16
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}

08004ee0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b084      	sub	sp, #16
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	60f8      	str	r0, [r7, #12]
 8004ee8:	60b9      	str	r1, [r7, #8]
 8004eea:	607a      	str	r2, [r7, #4]
 8004eec:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004eee:	e071      	b.n	8004fd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	695b      	ldr	r3, [r3, #20]
 8004ef6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004efa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004efe:	d123      	bne.n	8004f48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f0e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004f18:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2220      	movs	r2, #32
 8004f24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f34:	f043 0204 	orr.w	r2, r3, #4
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	e067      	b.n	8005018 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f4e:	d041      	beq.n	8004fd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f50:	f7fd fe76 	bl	8002c40 <HAL_GetTick>
 8004f54:	4602      	mov	r2, r0
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d302      	bcc.n	8004f66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d136      	bne.n	8004fd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	0c1b      	lsrs	r3, r3, #16
 8004f6a:	b2db      	uxtb	r3, r3
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d10c      	bne.n	8004f8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	695b      	ldr	r3, [r3, #20]
 8004f76:	43da      	mvns	r2, r3
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	4013      	ands	r3, r2
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	bf14      	ite	ne
 8004f82:	2301      	movne	r3, #1
 8004f84:	2300      	moveq	r3, #0
 8004f86:	b2db      	uxtb	r3, r3
 8004f88:	e00b      	b.n	8004fa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	699b      	ldr	r3, [r3, #24]
 8004f90:	43da      	mvns	r2, r3
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	4013      	ands	r3, r2
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	bf14      	ite	ne
 8004f9c:	2301      	movne	r3, #1
 8004f9e:	2300      	moveq	r3, #0
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d016      	beq.n	8004fd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2220      	movs	r2, #32
 8004fb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fc0:	f043 0220 	orr.w	r2, r3, #32
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e021      	b.n	8005018 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	0c1b      	lsrs	r3, r3, #16
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d10c      	bne.n	8004ff8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	695b      	ldr	r3, [r3, #20]
 8004fe4:	43da      	mvns	r2, r3
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	4013      	ands	r3, r2
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	bf14      	ite	ne
 8004ff0:	2301      	movne	r3, #1
 8004ff2:	2300      	moveq	r3, #0
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	e00b      	b.n	8005010 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	699b      	ldr	r3, [r3, #24]
 8004ffe:	43da      	mvns	r2, r3
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	4013      	ands	r3, r2
 8005004:	b29b      	uxth	r3, r3
 8005006:	2b00      	cmp	r3, #0
 8005008:	bf14      	ite	ne
 800500a:	2301      	movne	r3, #1
 800500c:	2300      	moveq	r3, #0
 800500e:	b2db      	uxtb	r3, r3
 8005010:	2b00      	cmp	r3, #0
 8005012:	f47f af6d 	bne.w	8004ef0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005016:	2300      	movs	r3, #0
}
 8005018:	4618      	mov	r0, r3
 800501a:	3710      	adds	r7, #16
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}

08005020 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b084      	sub	sp, #16
 8005024:	af00      	add	r7, sp, #0
 8005026:	60f8      	str	r0, [r7, #12]
 8005028:	60b9      	str	r1, [r7, #8]
 800502a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800502c:	e034      	b.n	8005098 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800502e:	68f8      	ldr	r0, [r7, #12]
 8005030:	f000 f8e3 	bl	80051fa <I2C_IsAcknowledgeFailed>
 8005034:	4603      	mov	r3, r0
 8005036:	2b00      	cmp	r3, #0
 8005038:	d001      	beq.n	800503e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	e034      	b.n	80050a8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005044:	d028      	beq.n	8005098 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005046:	f7fd fdfb 	bl	8002c40 <HAL_GetTick>
 800504a:	4602      	mov	r2, r0
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	1ad3      	subs	r3, r2, r3
 8005050:	68ba      	ldr	r2, [r7, #8]
 8005052:	429a      	cmp	r2, r3
 8005054:	d302      	bcc.n	800505c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d11d      	bne.n	8005098 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	695b      	ldr	r3, [r3, #20]
 8005062:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005066:	2b80      	cmp	r3, #128	@ 0x80
 8005068:	d016      	beq.n	8005098 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2200      	movs	r2, #0
 800506e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2220      	movs	r2, #32
 8005074:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2200      	movs	r2, #0
 800507c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005084:	f043 0220 	orr.w	r2, r3, #32
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2200      	movs	r2, #0
 8005090:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	e007      	b.n	80050a8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	695b      	ldr	r3, [r3, #20]
 800509e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050a2:	2b80      	cmp	r3, #128	@ 0x80
 80050a4:	d1c3      	bne.n	800502e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80050a6:	2300      	movs	r3, #0
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3710      	adds	r7, #16
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}

080050b0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b084      	sub	sp, #16
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	60f8      	str	r0, [r7, #12]
 80050b8:	60b9      	str	r1, [r7, #8]
 80050ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80050bc:	e034      	b.n	8005128 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80050be:	68f8      	ldr	r0, [r7, #12]
 80050c0:	f000 f89b 	bl	80051fa <I2C_IsAcknowledgeFailed>
 80050c4:	4603      	mov	r3, r0
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d001      	beq.n	80050ce <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	e034      	b.n	8005138 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050d4:	d028      	beq.n	8005128 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050d6:	f7fd fdb3 	bl	8002c40 <HAL_GetTick>
 80050da:	4602      	mov	r2, r0
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	1ad3      	subs	r3, r2, r3
 80050e0:	68ba      	ldr	r2, [r7, #8]
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d302      	bcc.n	80050ec <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d11d      	bne.n	8005128 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	695b      	ldr	r3, [r3, #20]
 80050f2:	f003 0304 	and.w	r3, r3, #4
 80050f6:	2b04      	cmp	r3, #4
 80050f8:	d016      	beq.n	8005128 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2200      	movs	r2, #0
 80050fe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2220      	movs	r2, #32
 8005104:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2200      	movs	r2, #0
 800510c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005114:	f043 0220 	orr.w	r2, r3, #32
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2200      	movs	r2, #0
 8005120:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	e007      	b.n	8005138 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	695b      	ldr	r3, [r3, #20]
 800512e:	f003 0304 	and.w	r3, r3, #4
 8005132:	2b04      	cmp	r3, #4
 8005134:	d1c3      	bne.n	80050be <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005136:	2300      	movs	r3, #0
}
 8005138:	4618      	mov	r0, r3
 800513a:	3710      	adds	r7, #16
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}

08005140 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b084      	sub	sp, #16
 8005144:	af00      	add	r7, sp, #0
 8005146:	60f8      	str	r0, [r7, #12]
 8005148:	60b9      	str	r1, [r7, #8]
 800514a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800514c:	e049      	b.n	80051e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	695b      	ldr	r3, [r3, #20]
 8005154:	f003 0310 	and.w	r3, r3, #16
 8005158:	2b10      	cmp	r3, #16
 800515a:	d119      	bne.n	8005190 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f06f 0210 	mvn.w	r2, #16
 8005164:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2200      	movs	r2, #0
 800516a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2220      	movs	r2, #32
 8005170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2200      	movs	r2, #0
 8005178:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2200      	movs	r2, #0
 8005188:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	e030      	b.n	80051f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005190:	f7fd fd56 	bl	8002c40 <HAL_GetTick>
 8005194:	4602      	mov	r2, r0
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	1ad3      	subs	r3, r2, r3
 800519a:	68ba      	ldr	r2, [r7, #8]
 800519c:	429a      	cmp	r2, r3
 800519e:	d302      	bcc.n	80051a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d11d      	bne.n	80051e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	695b      	ldr	r3, [r3, #20]
 80051ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051b0:	2b40      	cmp	r3, #64	@ 0x40
 80051b2:	d016      	beq.n	80051e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2200      	movs	r2, #0
 80051b8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2220      	movs	r2, #32
 80051be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2200      	movs	r2, #0
 80051c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051ce:	f043 0220 	orr.w	r2, r3, #32
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2200      	movs	r2, #0
 80051da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	e007      	b.n	80051f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	695b      	ldr	r3, [r3, #20]
 80051e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051ec:	2b40      	cmp	r3, #64	@ 0x40
 80051ee:	d1ae      	bne.n	800514e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80051f0:	2300      	movs	r3, #0
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3710      	adds	r7, #16
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}

080051fa <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80051fa:	b480      	push	{r7}
 80051fc:	b083      	sub	sp, #12
 80051fe:	af00      	add	r7, sp, #0
 8005200:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	695b      	ldr	r3, [r3, #20]
 8005208:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800520c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005210:	d11b      	bne.n	800524a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800521a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2220      	movs	r2, #32
 8005226:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2200      	movs	r2, #0
 800522e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005236:	f043 0204 	orr.w	r2, r3, #4
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2200      	movs	r2, #0
 8005242:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e000      	b.n	800524c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800524a:	2300      	movs	r3, #0
}
 800524c:	4618      	mov	r0, r3
 800524e:	370c      	adds	r7, #12
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b088      	sub	sp, #32
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d101      	bne.n	800526a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e128      	b.n	80054bc <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005270:	b2db      	uxtb	r3, r3
 8005272:	2b00      	cmp	r3, #0
 8005274:	d109      	bne.n	800528a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	4a90      	ldr	r2, [pc, #576]	@ (80054c4 <HAL_I2S_Init+0x26c>)
 8005282:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f7fd f9cf 	bl	8002628 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2202      	movs	r2, #2
 800528e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	69db      	ldr	r3, [r3, #28]
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	6812      	ldr	r2, [r2, #0]
 800529c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80052a0:	f023 030f 	bic.w	r3, r3, #15
 80052a4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	2202      	movs	r2, #2
 80052ac:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	695b      	ldr	r3, [r3, #20]
 80052b2:	2b02      	cmp	r3, #2
 80052b4:	d060      	beq.n	8005378 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	68db      	ldr	r3, [r3, #12]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d102      	bne.n	80052c4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80052be:	2310      	movs	r3, #16
 80052c0:	617b      	str	r3, [r7, #20]
 80052c2:	e001      	b.n	80052c8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80052c4:	2320      	movs	r3, #32
 80052c6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	2b20      	cmp	r3, #32
 80052ce:	d802      	bhi.n	80052d6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	005b      	lsls	r3, r3, #1
 80052d4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80052d6:	2001      	movs	r0, #1
 80052d8:	f002 fd2c 	bl	8007d34 <HAL_RCCEx_GetPeriphCLKFreq>
 80052dc:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	691b      	ldr	r3, [r3, #16]
 80052e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80052e6:	d125      	bne.n	8005334 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d010      	beq.n	8005312 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	009b      	lsls	r3, r3, #2
 80052f4:	68fa      	ldr	r2, [r7, #12]
 80052f6:	fbb2 f2f3 	udiv	r2, r2, r3
 80052fa:	4613      	mov	r3, r2
 80052fc:	009b      	lsls	r3, r3, #2
 80052fe:	4413      	add	r3, r2
 8005300:	005b      	lsls	r3, r3, #1
 8005302:	461a      	mov	r2, r3
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	695b      	ldr	r3, [r3, #20]
 8005308:	fbb2 f3f3 	udiv	r3, r2, r3
 800530c:	3305      	adds	r3, #5
 800530e:	613b      	str	r3, [r7, #16]
 8005310:	e01f      	b.n	8005352 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	00db      	lsls	r3, r3, #3
 8005316:	68fa      	ldr	r2, [r7, #12]
 8005318:	fbb2 f2f3 	udiv	r2, r2, r3
 800531c:	4613      	mov	r3, r2
 800531e:	009b      	lsls	r3, r3, #2
 8005320:	4413      	add	r3, r2
 8005322:	005b      	lsls	r3, r3, #1
 8005324:	461a      	mov	r2, r3
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	695b      	ldr	r3, [r3, #20]
 800532a:	fbb2 f3f3 	udiv	r3, r2, r3
 800532e:	3305      	adds	r3, #5
 8005330:	613b      	str	r3, [r7, #16]
 8005332:	e00e      	b.n	8005352 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005334:	68fa      	ldr	r2, [r7, #12]
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	fbb2 f2f3 	udiv	r2, r2, r3
 800533c:	4613      	mov	r3, r2
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	4413      	add	r3, r2
 8005342:	005b      	lsls	r3, r3, #1
 8005344:	461a      	mov	r2, r3
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	695b      	ldr	r3, [r3, #20]
 800534a:	fbb2 f3f3 	udiv	r3, r2, r3
 800534e:	3305      	adds	r3, #5
 8005350:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	4a5c      	ldr	r2, [pc, #368]	@ (80054c8 <HAL_I2S_Init+0x270>)
 8005356:	fba2 2303 	umull	r2, r3, r2, r3
 800535a:	08db      	lsrs	r3, r3, #3
 800535c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	f003 0301 	and.w	r3, r3, #1
 8005364:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005366:	693a      	ldr	r2, [r7, #16]
 8005368:	69bb      	ldr	r3, [r7, #24]
 800536a:	1ad3      	subs	r3, r2, r3
 800536c:	085b      	lsrs	r3, r3, #1
 800536e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005370:	69bb      	ldr	r3, [r7, #24]
 8005372:	021b      	lsls	r3, r3, #8
 8005374:	61bb      	str	r3, [r7, #24]
 8005376:	e003      	b.n	8005380 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005378:	2302      	movs	r3, #2
 800537a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800537c:	2300      	movs	r3, #0
 800537e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005380:	69fb      	ldr	r3, [r7, #28]
 8005382:	2b01      	cmp	r3, #1
 8005384:	d902      	bls.n	800538c <HAL_I2S_Init+0x134>
 8005386:	69fb      	ldr	r3, [r7, #28]
 8005388:	2bff      	cmp	r3, #255	@ 0xff
 800538a:	d907      	bls.n	800539c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005390:	f043 0210 	orr.w	r2, r3, #16
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8005398:	2301      	movs	r3, #1
 800539a:	e08f      	b.n	80054bc <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	691a      	ldr	r2, [r3, #16]
 80053a0:	69bb      	ldr	r3, [r7, #24]
 80053a2:	ea42 0103 	orr.w	r1, r2, r3
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	69fa      	ldr	r2, [r7, #28]
 80053ac:	430a      	orrs	r2, r1
 80053ae:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	69db      	ldr	r3, [r3, #28]
 80053b6:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80053ba:	f023 030f 	bic.w	r3, r3, #15
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	6851      	ldr	r1, [r2, #4]
 80053c2:	687a      	ldr	r2, [r7, #4]
 80053c4:	6892      	ldr	r2, [r2, #8]
 80053c6:	4311      	orrs	r1, r2
 80053c8:	687a      	ldr	r2, [r7, #4]
 80053ca:	68d2      	ldr	r2, [r2, #12]
 80053cc:	4311      	orrs	r1, r2
 80053ce:	687a      	ldr	r2, [r7, #4]
 80053d0:	6992      	ldr	r2, [r2, #24]
 80053d2:	430a      	orrs	r2, r1
 80053d4:	431a      	orrs	r2, r3
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80053de:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6a1b      	ldr	r3, [r3, #32]
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d161      	bne.n	80054ac <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	4a38      	ldr	r2, [pc, #224]	@ (80054cc <HAL_I2S_Init+0x274>)
 80053ec:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a37      	ldr	r2, [pc, #220]	@ (80054d0 <HAL_I2S_Init+0x278>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d101      	bne.n	80053fc <HAL_I2S_Init+0x1a4>
 80053f8:	4b36      	ldr	r3, [pc, #216]	@ (80054d4 <HAL_I2S_Init+0x27c>)
 80053fa:	e001      	b.n	8005400 <HAL_I2S_Init+0x1a8>
 80053fc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005400:	69db      	ldr	r3, [r3, #28]
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	6812      	ldr	r2, [r2, #0]
 8005406:	4932      	ldr	r1, [pc, #200]	@ (80054d0 <HAL_I2S_Init+0x278>)
 8005408:	428a      	cmp	r2, r1
 800540a:	d101      	bne.n	8005410 <HAL_I2S_Init+0x1b8>
 800540c:	4a31      	ldr	r2, [pc, #196]	@ (80054d4 <HAL_I2S_Init+0x27c>)
 800540e:	e001      	b.n	8005414 <HAL_I2S_Init+0x1bc>
 8005410:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8005414:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005418:	f023 030f 	bic.w	r3, r3, #15
 800541c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a2b      	ldr	r2, [pc, #172]	@ (80054d0 <HAL_I2S_Init+0x278>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d101      	bne.n	800542c <HAL_I2S_Init+0x1d4>
 8005428:	4b2a      	ldr	r3, [pc, #168]	@ (80054d4 <HAL_I2S_Init+0x27c>)
 800542a:	e001      	b.n	8005430 <HAL_I2S_Init+0x1d8>
 800542c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005430:	2202      	movs	r2, #2
 8005432:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a25      	ldr	r2, [pc, #148]	@ (80054d0 <HAL_I2S_Init+0x278>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d101      	bne.n	8005442 <HAL_I2S_Init+0x1ea>
 800543e:	4b25      	ldr	r3, [pc, #148]	@ (80054d4 <HAL_I2S_Init+0x27c>)
 8005440:	e001      	b.n	8005446 <HAL_I2S_Init+0x1ee>
 8005442:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005446:	69db      	ldr	r3, [r3, #28]
 8005448:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005452:	d003      	beq.n	800545c <HAL_I2S_Init+0x204>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d103      	bne.n	8005464 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800545c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005460:	613b      	str	r3, [r7, #16]
 8005462:	e001      	b.n	8005468 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005464:	2300      	movs	r3, #0
 8005466:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005472:	4313      	orrs	r3, r2
 8005474:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800547c:	4313      	orrs	r3, r2
 800547e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	699b      	ldr	r3, [r3, #24]
 8005484:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005486:	4313      	orrs	r3, r2
 8005488:	b29a      	uxth	r2, r3
 800548a:	897b      	ldrh	r3, [r7, #10]
 800548c:	4313      	orrs	r3, r2
 800548e:	b29b      	uxth	r3, r3
 8005490:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005494:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a0d      	ldr	r2, [pc, #52]	@ (80054d0 <HAL_I2S_Init+0x278>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d101      	bne.n	80054a4 <HAL_I2S_Init+0x24c>
 80054a0:	4b0c      	ldr	r3, [pc, #48]	@ (80054d4 <HAL_I2S_Init+0x27c>)
 80054a2:	e001      	b.n	80054a8 <HAL_I2S_Init+0x250>
 80054a4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80054a8:	897a      	ldrh	r2, [r7, #10]
 80054aa:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2200      	movs	r2, #0
 80054b0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2201      	movs	r2, #1
 80054b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 80054ba:	2300      	movs	r3, #0
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3720      	adds	r7, #32
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}
 80054c4:	080057d5 	.word	0x080057d5
 80054c8:	cccccccd 	.word	0xcccccccd
 80054cc:	080058e9 	.word	0x080058e9
 80054d0:	40003800 	.word	0x40003800
 80054d4:	40003400 	.word	0x40003400

080054d8 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b086      	sub	sp, #24
 80054dc:	af00      	add	r7, sp, #0
 80054de:	60f8      	str	r0, [r7, #12]
 80054e0:	60b9      	str	r1, [r7, #8]
 80054e2:	4613      	mov	r3, r2
 80054e4:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d002      	beq.n	80054f2 <HAL_I2S_Transmit_DMA+0x1a>
 80054ec:	88fb      	ldrh	r3, [r7, #6]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d101      	bne.n	80054f6 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e08a      	b.n	800560c <HAL_I2S_Transmit_DMA+0x134>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d001      	beq.n	8005506 <HAL_I2S_Transmit_DMA+0x2e>
  {
    return HAL_BUSY;
 8005502:	2302      	movs	r3, #2
 8005504:	e082      	b.n	800560c <HAL_I2S_Transmit_DMA+0x134>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800550c:	b2db      	uxtb	r3, r3
 800550e:	2b01      	cmp	r3, #1
 8005510:	d101      	bne.n	8005516 <HAL_I2S_Transmit_DMA+0x3e>
 8005512:	2302      	movs	r3, #2
 8005514:	e07a      	b.n	800560c <HAL_I2S_Transmit_DMA+0x134>
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2201      	movs	r2, #1
 800551a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2203      	movs	r2, #3
 8005522:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2200      	movs	r2, #0
 800552a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pTxBuffPtr = pData;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	68ba      	ldr	r2, [r7, #8]
 8005530:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	69db      	ldr	r3, [r3, #28]
 8005538:	f003 0307 	and.w	r3, r3, #7
 800553c:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	2b03      	cmp	r3, #3
 8005542:	d002      	beq.n	800554a <HAL_I2S_Transmit_DMA+0x72>
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	2b05      	cmp	r3, #5
 8005548:	d10a      	bne.n	8005560 <HAL_I2S_Transmit_DMA+0x88>
  {
    hi2s->TxXferSize = (Size << 1U);
 800554a:	88fb      	ldrh	r3, [r7, #6]
 800554c:	005b      	lsls	r3, r3, #1
 800554e:	b29a      	uxth	r2, r3
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 8005554:	88fb      	ldrh	r3, [r7, #6]
 8005556:	005b      	lsls	r3, r3, #1
 8005558:	b29a      	uxth	r2, r3
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800555e:	e005      	b.n	800556c <HAL_I2S_Transmit_DMA+0x94>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	88fa      	ldrh	r2, [r7, #6]
 8005564:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	88fa      	ldrh	r2, [r7, #6]
 800556a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005570:	4a28      	ldr	r2, [pc, #160]	@ (8005614 <HAL_I2S_Transmit_DMA+0x13c>)
 8005572:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005578:	4a27      	ldr	r2, [pc, #156]	@ (8005618 <HAL_I2S_Transmit_DMA+0x140>)
 800557a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005580:	4a26      	ldr	r2, [pc, #152]	@ (800561c <HAL_I2S_Transmit_DMA+0x144>)
 8005582:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800558c:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005594:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800559a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800559c:	f7fe f98e 	bl	80038bc <HAL_DMA_Start_IT>
 80055a0:	4603      	mov	r3, r0
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d00f      	beq.n	80055c6 <HAL_I2S_Transmit_DMA+0xee>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055aa:	f043 0208 	orr.w	r2, r3, #8
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2201      	movs	r2, #1
 80055b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2200      	movs	r2, #0
 80055be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	e022      	b.n	800560c <HAL_I2S_Transmit_DMA+0x134>
  }

  __HAL_UNLOCK(hi2s);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2200      	movs	r2, #0
 80055ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	f003 0302 	and.w	r3, r3, #2
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d107      	bne.n	80055ec <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	685a      	ldr	r2, [r3, #4]
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f042 0202 	orr.w	r2, r2, #2
 80055ea:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	69db      	ldr	r3, [r3, #28]
 80055f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d107      	bne.n	800560a <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	69da      	ldr	r2, [r3, #28]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005608:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 800560a:	2300      	movs	r3, #0
}
 800560c:	4618      	mov	r0, r3
 800560e:	3718      	adds	r7, #24
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}
 8005614:	080056b3 	.word	0x080056b3
 8005618:	08005671 	.word	0x08005671
 800561c:	080056cf 	.word	0x080056cf

08005620 <HAL_I2S_TxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005620:	b480      	push	{r7}
 8005622:	b083      	sub	sp, #12
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005628:	bf00      	nop
 800562a:	370c      	adds	r7, #12
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr

08005634 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005634:	b480      	push	{r7}
 8005636:	b083      	sub	sp, #12
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800563c:	bf00      	nop
 800563e:	370c      	adds	r7, #12
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr

08005648 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005648:	b480      	push	{r7}
 800564a:	b083      	sub	sp, #12
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8005650:	bf00      	nop
 8005652:	370c      	adds	r7, #12
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr

0800565c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800565c:	b480      	push	{r7}
 800565e:	b083      	sub	sp, #12
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005664:	bf00      	nop
 8005666:	370c      	adds	r7, #12
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr

08005670 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b084      	sub	sp, #16
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800567c:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	69db      	ldr	r3, [r3, #28]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d10e      	bne.n	80056a4 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	685a      	ldr	r2, [r3, #4]
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f022 0202 	bic.w	r2, r2, #2
 8005694:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2200      	movs	r2, #0
 800569a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2201      	movs	r2, #1
 80056a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 80056a4:	68f8      	ldr	r0, [r7, #12]
 80056a6:	f7ff ffc5 	bl	8005634 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80056aa:	bf00      	nop
 80056ac:	3710      	adds	r7, #16
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}

080056b2 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80056b2:	b580      	push	{r7, lr}
 80056b4:	b084      	sub	sp, #16
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056be:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 80056c0:	68f8      	ldr	r0, [r7, #12]
 80056c2:	f7ff ffad 	bl	8005620 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80056c6:	bf00      	nop
 80056c8:	3710      	adds	r7, #16
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}

080056ce <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80056ce:	b580      	push	{r7, lr}
 80056d0:	b084      	sub	sp, #16
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056da:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	685a      	ldr	r2, [r3, #4]
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f022 0203 	bic.w	r2, r2, #3
 80056ea:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2200      	movs	r2, #0
 80056f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2200      	movs	r2, #0
 80056f6:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2201      	movs	r2, #1
 80056fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005704:	f043 0208 	orr.w	r2, r3, #8
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 800570c:	68f8      	ldr	r0, [r7, #12]
 800570e:	f7ff ffa5 	bl	800565c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005712:	bf00      	nop
 8005714:	3710      	adds	r7, #16
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}

0800571a <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800571a:	b580      	push	{r7, lr}
 800571c:	b082      	sub	sp, #8
 800571e:	af00      	add	r7, sp, #0
 8005720:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005726:	881a      	ldrh	r2, [r3, #0]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005732:	1c9a      	adds	r2, r3, #2
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800573c:	b29b      	uxth	r3, r3
 800573e:	3b01      	subs	r3, #1
 8005740:	b29a      	uxth	r2, r3
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800574a:	b29b      	uxth	r3, r3
 800574c:	2b00      	cmp	r3, #0
 800574e:	d10e      	bne.n	800576e <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	685a      	ldr	r2, [r3, #4]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800575e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2201      	movs	r2, #1
 8005764:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f7ff ff63 	bl	8005634 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800576e:	bf00      	nop
 8005770:	3708      	adds	r7, #8
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}

08005776 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005776:	b580      	push	{r7, lr}
 8005778:	b082      	sub	sp, #8
 800577a:	af00      	add	r7, sp, #0
 800577c:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	68da      	ldr	r2, [r3, #12]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005788:	b292      	uxth	r2, r2
 800578a:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005790:	1c9a      	adds	r2, r3, #2
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800579a:	b29b      	uxth	r3, r3
 800579c:	3b01      	subs	r3, #1
 800579e:	b29a      	uxth	r2, r3
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d10e      	bne.n	80057cc <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	685a      	ldr	r2, [r3, #4]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80057bc:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2201      	movs	r2, #1
 80057c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f7ff ff3e 	bl	8005648 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80057cc:	bf00      	nop
 80057ce:	3708      	adds	r7, #8
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}

080057d4 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b086      	sub	sp, #24
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	689b      	ldr	r3, [r3, #8]
 80057e2:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057ea:	b2db      	uxtb	r3, r3
 80057ec:	2b04      	cmp	r3, #4
 80057ee:	d13a      	bne.n	8005866 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	f003 0301 	and.w	r3, r3, #1
 80057f6:	2b01      	cmp	r3, #1
 80057f8:	d109      	bne.n	800580e <I2S_IRQHandler+0x3a>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005804:	2b40      	cmp	r3, #64	@ 0x40
 8005806:	d102      	bne.n	800580e <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f7ff ffb4 	bl	8005776 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005814:	2b40      	cmp	r3, #64	@ 0x40
 8005816:	d126      	bne.n	8005866 <I2S_IRQHandler+0x92>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	f003 0320 	and.w	r3, r3, #32
 8005822:	2b20      	cmp	r3, #32
 8005824:	d11f      	bne.n	8005866 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	685a      	ldr	r2, [r3, #4]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005834:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005836:	2300      	movs	r3, #0
 8005838:	613b      	str	r3, [r7, #16]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	68db      	ldr	r3, [r3, #12]
 8005840:	613b      	str	r3, [r7, #16]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	613b      	str	r3, [r7, #16]
 800584a:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2201      	movs	r2, #1
 8005850:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005858:	f043 0202 	orr.w	r2, r3, #2
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f7ff fefb 	bl	800565c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800586c:	b2db      	uxtb	r3, r3
 800586e:	2b03      	cmp	r3, #3
 8005870:	d136      	bne.n	80058e0 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	f003 0302 	and.w	r3, r3, #2
 8005878:	2b02      	cmp	r3, #2
 800587a:	d109      	bne.n	8005890 <I2S_IRQHandler+0xbc>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005886:	2b80      	cmp	r3, #128	@ 0x80
 8005888:	d102      	bne.n	8005890 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f7ff ff45 	bl	800571a <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	f003 0308 	and.w	r3, r3, #8
 8005896:	2b08      	cmp	r3, #8
 8005898:	d122      	bne.n	80058e0 <I2S_IRQHandler+0x10c>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	f003 0320 	and.w	r3, r3, #32
 80058a4:	2b20      	cmp	r3, #32
 80058a6:	d11b      	bne.n	80058e0 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	685a      	ldr	r2, [r3, #4]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80058b6:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80058b8:	2300      	movs	r3, #0
 80058ba:	60fb      	str	r3, [r7, #12]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	60fb      	str	r3, [r7, #12]
 80058c4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2201      	movs	r2, #1
 80058ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058d2:	f043 0204 	orr.w	r2, r3, #4
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f7ff febe 	bl	800565c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80058e0:	bf00      	nop
 80058e2:	3718      	adds	r7, #24
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}

080058e8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b088      	sub	sp, #32
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a92      	ldr	r2, [pc, #584]	@ (8005b48 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d101      	bne.n	8005906 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8005902:	4b92      	ldr	r3, [pc, #584]	@ (8005b4c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005904:	e001      	b.n	800590a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8005906:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a8b      	ldr	r2, [pc, #556]	@ (8005b48 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d101      	bne.n	8005924 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8005920:	4b8a      	ldr	r3, [pc, #552]	@ (8005b4c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005922:	e001      	b.n	8005928 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005924:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005934:	d004      	beq.n	8005940 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	2b00      	cmp	r3, #0
 800593c:	f040 8099 	bne.w	8005a72 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005940:	69fb      	ldr	r3, [r7, #28]
 8005942:	f003 0302 	and.w	r3, r3, #2
 8005946:	2b02      	cmp	r3, #2
 8005948:	d107      	bne.n	800595a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005950:	2b00      	cmp	r3, #0
 8005952:	d002      	beq.n	800595a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f000 f925 	bl	8005ba4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800595a:	69bb      	ldr	r3, [r7, #24]
 800595c:	f003 0301 	and.w	r3, r3, #1
 8005960:	2b01      	cmp	r3, #1
 8005962:	d107      	bne.n	8005974 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800596a:	2b00      	cmp	r3, #0
 800596c:	d002      	beq.n	8005974 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f000 f9c8 	bl	8005d04 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005974:	69bb      	ldr	r3, [r7, #24]
 8005976:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800597a:	2b40      	cmp	r3, #64	@ 0x40
 800597c:	d13a      	bne.n	80059f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	f003 0320 	and.w	r3, r3, #32
 8005984:	2b00      	cmp	r3, #0
 8005986:	d035      	beq.n	80059f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a6e      	ldr	r2, [pc, #440]	@ (8005b48 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d101      	bne.n	8005996 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8005992:	4b6e      	ldr	r3, [pc, #440]	@ (8005b4c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005994:	e001      	b.n	800599a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8005996:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800599a:	685a      	ldr	r2, [r3, #4]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4969      	ldr	r1, [pc, #420]	@ (8005b48 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80059a2:	428b      	cmp	r3, r1
 80059a4:	d101      	bne.n	80059aa <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80059a6:	4b69      	ldr	r3, [pc, #420]	@ (8005b4c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80059a8:	e001      	b.n	80059ae <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80059aa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80059ae:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80059b2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	685a      	ldr	r2, [r3, #4]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80059c2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80059c4:	2300      	movs	r3, #0
 80059c6:	60fb      	str	r3, [r7, #12]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	68db      	ldr	r3, [r3, #12]
 80059ce:	60fb      	str	r3, [r7, #12]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	60fb      	str	r3, [r7, #12]
 80059d8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2201      	movs	r2, #1
 80059de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059e6:	f043 0202 	orr.w	r2, r3, #2
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f7ff fe34 	bl	800565c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80059f4:	69fb      	ldr	r3, [r7, #28]
 80059f6:	f003 0308 	and.w	r3, r3, #8
 80059fa:	2b08      	cmp	r3, #8
 80059fc:	f040 80c3 	bne.w	8005b86 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	f003 0320 	and.w	r3, r3, #32
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	f000 80bd 	beq.w	8005b86 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	685a      	ldr	r2, [r3, #4]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005a1a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a49      	ldr	r2, [pc, #292]	@ (8005b48 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d101      	bne.n	8005a2a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8005a26:	4b49      	ldr	r3, [pc, #292]	@ (8005b4c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005a28:	e001      	b.n	8005a2e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8005a2a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005a2e:	685a      	ldr	r2, [r3, #4]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4944      	ldr	r1, [pc, #272]	@ (8005b48 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005a36:	428b      	cmp	r3, r1
 8005a38:	d101      	bne.n	8005a3e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8005a3a:	4b44      	ldr	r3, [pc, #272]	@ (8005b4c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005a3c:	e001      	b.n	8005a42 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8005a3e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005a42:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005a46:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005a48:	2300      	movs	r3, #0
 8005a4a:	60bb      	str	r3, [r7, #8]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	60bb      	str	r3, [r7, #8]
 8005a54:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2201      	movs	r2, #1
 8005a5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a62:	f043 0204 	orr.w	r2, r3, #4
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f7ff fdf6 	bl	800565c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005a70:	e089      	b.n	8005b86 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005a72:	69bb      	ldr	r3, [r7, #24]
 8005a74:	f003 0302 	and.w	r3, r3, #2
 8005a78:	2b02      	cmp	r3, #2
 8005a7a:	d107      	bne.n	8005a8c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d002      	beq.n	8005a8c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f000 f8be 	bl	8005c08 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005a8c:	69fb      	ldr	r3, [r7, #28]
 8005a8e:	f003 0301 	and.w	r3, r3, #1
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	d107      	bne.n	8005aa6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d002      	beq.n	8005aa6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f000 f8fd 	bl	8005ca0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005aa6:	69fb      	ldr	r3, [r7, #28]
 8005aa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005aac:	2b40      	cmp	r3, #64	@ 0x40
 8005aae:	d12f      	bne.n	8005b10 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	f003 0320 	and.w	r3, r3, #32
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d02a      	beq.n	8005b10 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	685a      	ldr	r2, [r3, #4]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005ac8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a1e      	ldr	r2, [pc, #120]	@ (8005b48 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d101      	bne.n	8005ad8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005ad4:	4b1d      	ldr	r3, [pc, #116]	@ (8005b4c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005ad6:	e001      	b.n	8005adc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005ad8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005adc:	685a      	ldr	r2, [r3, #4]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4919      	ldr	r1, [pc, #100]	@ (8005b48 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005ae4:	428b      	cmp	r3, r1
 8005ae6:	d101      	bne.n	8005aec <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005ae8:	4b18      	ldr	r3, [pc, #96]	@ (8005b4c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005aea:	e001      	b.n	8005af0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005aec:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005af0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005af4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2201      	movs	r2, #1
 8005afa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b02:	f043 0202 	orr.w	r2, r3, #2
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f7ff fda6 	bl	800565c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005b10:	69bb      	ldr	r3, [r7, #24]
 8005b12:	f003 0308 	and.w	r3, r3, #8
 8005b16:	2b08      	cmp	r3, #8
 8005b18:	d136      	bne.n	8005b88 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	f003 0320 	and.w	r3, r3, #32
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d031      	beq.n	8005b88 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a07      	ldr	r2, [pc, #28]	@ (8005b48 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d101      	bne.n	8005b32 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8005b2e:	4b07      	ldr	r3, [pc, #28]	@ (8005b4c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005b30:	e001      	b.n	8005b36 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8005b32:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005b36:	685a      	ldr	r2, [r3, #4]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4902      	ldr	r1, [pc, #8]	@ (8005b48 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005b3e:	428b      	cmp	r3, r1
 8005b40:	d106      	bne.n	8005b50 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8005b42:	4b02      	ldr	r3, [pc, #8]	@ (8005b4c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005b44:	e006      	b.n	8005b54 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8005b46:	bf00      	nop
 8005b48:	40003800 	.word	0x40003800
 8005b4c:	40003400 	.word	0x40003400
 8005b50:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005b54:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005b58:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	685a      	ldr	r2, [r3, #4]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005b68:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b76:	f043 0204 	orr.w	r2, r3, #4
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f7ff fd6c 	bl	800565c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005b84:	e000      	b.n	8005b88 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005b86:	bf00      	nop
}
 8005b88:	bf00      	nop
 8005b8a:	3720      	adds	r7, #32
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}

08005b90 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b083      	sub	sp, #12
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005b98:	bf00      	nop
 8005b9a:	370c      	adds	r7, #12
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr

08005ba4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b082      	sub	sp, #8
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bb0:	1c99      	adds	r1, r3, #2
 8005bb2:	687a      	ldr	r2, [r7, #4]
 8005bb4:	6251      	str	r1, [r2, #36]	@ 0x24
 8005bb6:	881a      	ldrh	r2, [r3, #0]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	3b01      	subs	r3, #1
 8005bc6:	b29a      	uxth	r2, r3
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d113      	bne.n	8005bfe <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	685a      	ldr	r2, [r3, #4]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005be4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d106      	bne.n	8005bfe <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f7ff ffc9 	bl	8005b90 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005bfe:	bf00      	nop
 8005c00:	3708      	adds	r7, #8
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
	...

08005c08 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b082      	sub	sp, #8
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c14:	1c99      	adds	r1, r3, #2
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	6251      	str	r1, [r2, #36]	@ 0x24
 8005c1a:	8819      	ldrh	r1, [r3, #0]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a1d      	ldr	r2, [pc, #116]	@ (8005c98 <I2SEx_TxISR_I2SExt+0x90>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d101      	bne.n	8005c2a <I2SEx_TxISR_I2SExt+0x22>
 8005c26:	4b1d      	ldr	r3, [pc, #116]	@ (8005c9c <I2SEx_TxISR_I2SExt+0x94>)
 8005c28:	e001      	b.n	8005c2e <I2SEx_TxISR_I2SExt+0x26>
 8005c2a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005c2e:	460a      	mov	r2, r1
 8005c30:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	3b01      	subs	r3, #1
 8005c3a:	b29a      	uxth	r2, r3
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d121      	bne.n	8005c8e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a12      	ldr	r2, [pc, #72]	@ (8005c98 <I2SEx_TxISR_I2SExt+0x90>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d101      	bne.n	8005c58 <I2SEx_TxISR_I2SExt+0x50>
 8005c54:	4b11      	ldr	r3, [pc, #68]	@ (8005c9c <I2SEx_TxISR_I2SExt+0x94>)
 8005c56:	e001      	b.n	8005c5c <I2SEx_TxISR_I2SExt+0x54>
 8005c58:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005c5c:	685a      	ldr	r2, [r3, #4]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	490d      	ldr	r1, [pc, #52]	@ (8005c98 <I2SEx_TxISR_I2SExt+0x90>)
 8005c64:	428b      	cmp	r3, r1
 8005c66:	d101      	bne.n	8005c6c <I2SEx_TxISR_I2SExt+0x64>
 8005c68:	4b0c      	ldr	r3, [pc, #48]	@ (8005c9c <I2SEx_TxISR_I2SExt+0x94>)
 8005c6a:	e001      	b.n	8005c70 <I2SEx_TxISR_I2SExt+0x68>
 8005c6c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005c70:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005c74:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d106      	bne.n	8005c8e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2201      	movs	r2, #1
 8005c84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	f7ff ff81 	bl	8005b90 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005c8e:	bf00      	nop
 8005c90:	3708      	adds	r7, #8
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
 8005c96:	bf00      	nop
 8005c98:	40003800 	.word	0x40003800
 8005c9c:	40003400 	.word	0x40003400

08005ca0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b082      	sub	sp, #8
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	68d8      	ldr	r0, [r3, #12]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cb2:	1c99      	adds	r1, r3, #2
 8005cb4:	687a      	ldr	r2, [r7, #4]
 8005cb6:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8005cb8:	b282      	uxth	r2, r0
 8005cba:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	3b01      	subs	r3, #1
 8005cc4:	b29a      	uxth	r2, r3
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d113      	bne.n	8005cfc <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	685a      	ldr	r2, [r3, #4]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005ce2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ce8:	b29b      	uxth	r3, r3
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d106      	bne.n	8005cfc <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f7ff ff4a 	bl	8005b90 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005cfc:	bf00      	nop
 8005cfe:	3708      	adds	r7, #8
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}

08005d04 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b082      	sub	sp, #8
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a20      	ldr	r2, [pc, #128]	@ (8005d94 <I2SEx_RxISR_I2SExt+0x90>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d101      	bne.n	8005d1a <I2SEx_RxISR_I2SExt+0x16>
 8005d16:	4b20      	ldr	r3, [pc, #128]	@ (8005d98 <I2SEx_RxISR_I2SExt+0x94>)
 8005d18:	e001      	b.n	8005d1e <I2SEx_RxISR_I2SExt+0x1a>
 8005d1a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005d1e:	68d8      	ldr	r0, [r3, #12]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d24:	1c99      	adds	r1, r3, #2
 8005d26:	687a      	ldr	r2, [r7, #4]
 8005d28:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8005d2a:	b282      	uxth	r2, r0
 8005d2c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	3b01      	subs	r3, #1
 8005d36:	b29a      	uxth	r2, r3
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d121      	bne.n	8005d8a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a12      	ldr	r2, [pc, #72]	@ (8005d94 <I2SEx_RxISR_I2SExt+0x90>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d101      	bne.n	8005d54 <I2SEx_RxISR_I2SExt+0x50>
 8005d50:	4b11      	ldr	r3, [pc, #68]	@ (8005d98 <I2SEx_RxISR_I2SExt+0x94>)
 8005d52:	e001      	b.n	8005d58 <I2SEx_RxISR_I2SExt+0x54>
 8005d54:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005d58:	685a      	ldr	r2, [r3, #4]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	490d      	ldr	r1, [pc, #52]	@ (8005d94 <I2SEx_RxISR_I2SExt+0x90>)
 8005d60:	428b      	cmp	r3, r1
 8005d62:	d101      	bne.n	8005d68 <I2SEx_RxISR_I2SExt+0x64>
 8005d64:	4b0c      	ldr	r3, [pc, #48]	@ (8005d98 <I2SEx_RxISR_I2SExt+0x94>)
 8005d66:	e001      	b.n	8005d6c <I2SEx_RxISR_I2SExt+0x68>
 8005d68:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005d6c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005d70:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d76:	b29b      	uxth	r3, r3
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d106      	bne.n	8005d8a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f7ff ff03 	bl	8005b90 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005d8a:	bf00      	nop
 8005d8c:	3708      	adds	r7, #8
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
 8005d92:	bf00      	nop
 8005d94:	40003800 	.word	0x40003800
 8005d98:	40003400 	.word	0x40003400

08005d9c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b086      	sub	sp, #24
 8005da0:	af02      	add	r7, sp, #8
 8005da2:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d101      	bne.n	8005dae <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005daa:	2301      	movs	r3, #1
 8005dac:	e101      	b.n	8005fb2 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8005dba:	b2db      	uxtb	r3, r3
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d106      	bne.n	8005dce <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f006 fee7 	bl	800cb9c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2203      	movs	r2, #3
 8005dd2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005ddc:	d102      	bne.n	8005de4 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2200      	movs	r2, #0
 8005de2:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4618      	mov	r0, r3
 8005dea:	f003 fb34 	bl	8009456 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6818      	ldr	r0, [r3, #0]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	7c1a      	ldrb	r2, [r3, #16]
 8005df6:	f88d 2000 	strb.w	r2, [sp]
 8005dfa:	3304      	adds	r3, #4
 8005dfc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005dfe:	f003 fa13 	bl	8009228 <USB_CoreInit>
 8005e02:	4603      	mov	r3, r0
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d005      	beq.n	8005e14 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2202      	movs	r2, #2
 8005e0c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005e10:	2301      	movs	r3, #1
 8005e12:	e0ce      	b.n	8005fb2 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	2100      	movs	r1, #0
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f003 fb2c 	bl	8009478 <USB_SetCurrentMode>
 8005e20:	4603      	mov	r3, r0
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d005      	beq.n	8005e32 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2202      	movs	r2, #2
 8005e2a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	e0bf      	b.n	8005fb2 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e32:	2300      	movs	r3, #0
 8005e34:	73fb      	strb	r3, [r7, #15]
 8005e36:	e04a      	b.n	8005ece <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005e38:	7bfa      	ldrb	r2, [r7, #15]
 8005e3a:	6879      	ldr	r1, [r7, #4]
 8005e3c:	4613      	mov	r3, r2
 8005e3e:	00db      	lsls	r3, r3, #3
 8005e40:	4413      	add	r3, r2
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	440b      	add	r3, r1
 8005e46:	3315      	adds	r3, #21
 8005e48:	2201      	movs	r2, #1
 8005e4a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005e4c:	7bfa      	ldrb	r2, [r7, #15]
 8005e4e:	6879      	ldr	r1, [r7, #4]
 8005e50:	4613      	mov	r3, r2
 8005e52:	00db      	lsls	r3, r3, #3
 8005e54:	4413      	add	r3, r2
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	440b      	add	r3, r1
 8005e5a:	3314      	adds	r3, #20
 8005e5c:	7bfa      	ldrb	r2, [r7, #15]
 8005e5e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005e60:	7bfa      	ldrb	r2, [r7, #15]
 8005e62:	7bfb      	ldrb	r3, [r7, #15]
 8005e64:	b298      	uxth	r0, r3
 8005e66:	6879      	ldr	r1, [r7, #4]
 8005e68:	4613      	mov	r3, r2
 8005e6a:	00db      	lsls	r3, r3, #3
 8005e6c:	4413      	add	r3, r2
 8005e6e:	009b      	lsls	r3, r3, #2
 8005e70:	440b      	add	r3, r1
 8005e72:	332e      	adds	r3, #46	@ 0x2e
 8005e74:	4602      	mov	r2, r0
 8005e76:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005e78:	7bfa      	ldrb	r2, [r7, #15]
 8005e7a:	6879      	ldr	r1, [r7, #4]
 8005e7c:	4613      	mov	r3, r2
 8005e7e:	00db      	lsls	r3, r3, #3
 8005e80:	4413      	add	r3, r2
 8005e82:	009b      	lsls	r3, r3, #2
 8005e84:	440b      	add	r3, r1
 8005e86:	3318      	adds	r3, #24
 8005e88:	2200      	movs	r2, #0
 8005e8a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005e8c:	7bfa      	ldrb	r2, [r7, #15]
 8005e8e:	6879      	ldr	r1, [r7, #4]
 8005e90:	4613      	mov	r3, r2
 8005e92:	00db      	lsls	r3, r3, #3
 8005e94:	4413      	add	r3, r2
 8005e96:	009b      	lsls	r3, r3, #2
 8005e98:	440b      	add	r3, r1
 8005e9a:	331c      	adds	r3, #28
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005ea0:	7bfa      	ldrb	r2, [r7, #15]
 8005ea2:	6879      	ldr	r1, [r7, #4]
 8005ea4:	4613      	mov	r3, r2
 8005ea6:	00db      	lsls	r3, r3, #3
 8005ea8:	4413      	add	r3, r2
 8005eaa:	009b      	lsls	r3, r3, #2
 8005eac:	440b      	add	r3, r1
 8005eae:	3320      	adds	r3, #32
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005eb4:	7bfa      	ldrb	r2, [r7, #15]
 8005eb6:	6879      	ldr	r1, [r7, #4]
 8005eb8:	4613      	mov	r3, r2
 8005eba:	00db      	lsls	r3, r3, #3
 8005ebc:	4413      	add	r3, r2
 8005ebe:	009b      	lsls	r3, r3, #2
 8005ec0:	440b      	add	r3, r1
 8005ec2:	3324      	adds	r3, #36	@ 0x24
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ec8:	7bfb      	ldrb	r3, [r7, #15]
 8005eca:	3301      	adds	r3, #1
 8005ecc:	73fb      	strb	r3, [r7, #15]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	791b      	ldrb	r3, [r3, #4]
 8005ed2:	7bfa      	ldrb	r2, [r7, #15]
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d3af      	bcc.n	8005e38 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ed8:	2300      	movs	r3, #0
 8005eda:	73fb      	strb	r3, [r7, #15]
 8005edc:	e044      	b.n	8005f68 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005ede:	7bfa      	ldrb	r2, [r7, #15]
 8005ee0:	6879      	ldr	r1, [r7, #4]
 8005ee2:	4613      	mov	r3, r2
 8005ee4:	00db      	lsls	r3, r3, #3
 8005ee6:	4413      	add	r3, r2
 8005ee8:	009b      	lsls	r3, r3, #2
 8005eea:	440b      	add	r3, r1
 8005eec:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005ef4:	7bfa      	ldrb	r2, [r7, #15]
 8005ef6:	6879      	ldr	r1, [r7, #4]
 8005ef8:	4613      	mov	r3, r2
 8005efa:	00db      	lsls	r3, r3, #3
 8005efc:	4413      	add	r3, r2
 8005efe:	009b      	lsls	r3, r3, #2
 8005f00:	440b      	add	r3, r1
 8005f02:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8005f06:	7bfa      	ldrb	r2, [r7, #15]
 8005f08:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005f0a:	7bfa      	ldrb	r2, [r7, #15]
 8005f0c:	6879      	ldr	r1, [r7, #4]
 8005f0e:	4613      	mov	r3, r2
 8005f10:	00db      	lsls	r3, r3, #3
 8005f12:	4413      	add	r3, r2
 8005f14:	009b      	lsls	r3, r3, #2
 8005f16:	440b      	add	r3, r1
 8005f18:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005f20:	7bfa      	ldrb	r2, [r7, #15]
 8005f22:	6879      	ldr	r1, [r7, #4]
 8005f24:	4613      	mov	r3, r2
 8005f26:	00db      	lsls	r3, r3, #3
 8005f28:	4413      	add	r3, r2
 8005f2a:	009b      	lsls	r3, r3, #2
 8005f2c:	440b      	add	r3, r1
 8005f2e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8005f32:	2200      	movs	r2, #0
 8005f34:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005f36:	7bfa      	ldrb	r2, [r7, #15]
 8005f38:	6879      	ldr	r1, [r7, #4]
 8005f3a:	4613      	mov	r3, r2
 8005f3c:	00db      	lsls	r3, r3, #3
 8005f3e:	4413      	add	r3, r2
 8005f40:	009b      	lsls	r3, r3, #2
 8005f42:	440b      	add	r3, r1
 8005f44:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005f48:	2200      	movs	r2, #0
 8005f4a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005f4c:	7bfa      	ldrb	r2, [r7, #15]
 8005f4e:	6879      	ldr	r1, [r7, #4]
 8005f50:	4613      	mov	r3, r2
 8005f52:	00db      	lsls	r3, r3, #3
 8005f54:	4413      	add	r3, r2
 8005f56:	009b      	lsls	r3, r3, #2
 8005f58:	440b      	add	r3, r1
 8005f5a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005f5e:	2200      	movs	r2, #0
 8005f60:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f62:	7bfb      	ldrb	r3, [r7, #15]
 8005f64:	3301      	adds	r3, #1
 8005f66:	73fb      	strb	r3, [r7, #15]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	791b      	ldrb	r3, [r3, #4]
 8005f6c:	7bfa      	ldrb	r2, [r7, #15]
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	d3b5      	bcc.n	8005ede <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6818      	ldr	r0, [r3, #0]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	7c1a      	ldrb	r2, [r3, #16]
 8005f7a:	f88d 2000 	strb.w	r2, [sp]
 8005f7e:	3304      	adds	r3, #4
 8005f80:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005f82:	f003 fac5 	bl	8009510 <USB_DevInit>
 8005f86:	4603      	mov	r3, r0
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d005      	beq.n	8005f98 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2202      	movs	r2, #2
 8005f90:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005f94:	2301      	movs	r3, #1
 8005f96:	e00c      	b.n	8005fb2 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2201      	movs	r2, #1
 8005fa2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4618      	mov	r0, r3
 8005fac:	f004 fb0f 	bl	800a5ce <USB_DevDisconnect>

  return HAL_OK;
 8005fb0:	2300      	movs	r3, #0
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3710      	adds	r7, #16
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}

08005fba <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005fba:	b580      	push	{r7, lr}
 8005fbc:	b084      	sub	sp, #16
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005fce:	2b01      	cmp	r3, #1
 8005fd0:	d101      	bne.n	8005fd6 <HAL_PCD_Start+0x1c>
 8005fd2:	2302      	movs	r3, #2
 8005fd4:	e022      	b.n	800601c <HAL_PCD_Start+0x62>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2201      	movs	r2, #1
 8005fda:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	68db      	ldr	r3, [r3, #12]
 8005fe2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d009      	beq.n	8005ffe <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8005fee:	2b01      	cmp	r3, #1
 8005ff0:	d105      	bne.n	8005ffe <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ff6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4618      	mov	r0, r3
 8006004:	f003 fa16 	bl	8009434 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4618      	mov	r0, r3
 800600e:	f004 fabd 	bl	800a58c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2200      	movs	r2, #0
 8006016:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800601a:	2300      	movs	r3, #0
}
 800601c:	4618      	mov	r0, r3
 800601e:	3710      	adds	r7, #16
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}

08006024 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006024:	b590      	push	{r4, r7, lr}
 8006026:	b08d      	sub	sp, #52	@ 0x34
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006032:	6a3b      	ldr	r3, [r7, #32]
 8006034:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4618      	mov	r0, r3
 800603c:	f004 fb7b 	bl	800a736 <USB_GetMode>
 8006040:	4603      	mov	r3, r0
 8006042:	2b00      	cmp	r3, #0
 8006044:	f040 848c 	bne.w	8006960 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4618      	mov	r0, r3
 800604e:	f004 fadf 	bl	800a610 <USB_ReadInterrupts>
 8006052:	4603      	mov	r3, r0
 8006054:	2b00      	cmp	r3, #0
 8006056:	f000 8482 	beq.w	800695e <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800605a:	69fb      	ldr	r3, [r7, #28]
 800605c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006060:	689b      	ldr	r3, [r3, #8]
 8006062:	0a1b      	lsrs	r3, r3, #8
 8006064:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4618      	mov	r0, r3
 8006074:	f004 facc 	bl	800a610 <USB_ReadInterrupts>
 8006078:	4603      	mov	r3, r0
 800607a:	f003 0302 	and.w	r3, r3, #2
 800607e:	2b02      	cmp	r3, #2
 8006080:	d107      	bne.n	8006092 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	695a      	ldr	r2, [r3, #20]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f002 0202 	and.w	r2, r2, #2
 8006090:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4618      	mov	r0, r3
 8006098:	f004 faba 	bl	800a610 <USB_ReadInterrupts>
 800609c:	4603      	mov	r3, r0
 800609e:	f003 0310 	and.w	r3, r3, #16
 80060a2:	2b10      	cmp	r3, #16
 80060a4:	d161      	bne.n	800616a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	699a      	ldr	r2, [r3, #24]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f022 0210 	bic.w	r2, r2, #16
 80060b4:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80060b6:	6a3b      	ldr	r3, [r7, #32]
 80060b8:	6a1b      	ldr	r3, [r3, #32]
 80060ba:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80060bc:	69bb      	ldr	r3, [r7, #24]
 80060be:	f003 020f 	and.w	r2, r3, #15
 80060c2:	4613      	mov	r3, r2
 80060c4:	00db      	lsls	r3, r3, #3
 80060c6:	4413      	add	r3, r2
 80060c8:	009b      	lsls	r3, r3, #2
 80060ca:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80060ce:	687a      	ldr	r2, [r7, #4]
 80060d0:	4413      	add	r3, r2
 80060d2:	3304      	adds	r3, #4
 80060d4:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80060d6:	69bb      	ldr	r3, [r7, #24]
 80060d8:	0c5b      	lsrs	r3, r3, #17
 80060da:	f003 030f 	and.w	r3, r3, #15
 80060de:	2b02      	cmp	r3, #2
 80060e0:	d124      	bne.n	800612c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80060e2:	69ba      	ldr	r2, [r7, #24]
 80060e4:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80060e8:	4013      	ands	r3, r2
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d035      	beq.n	800615a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80060f2:	69bb      	ldr	r3, [r7, #24]
 80060f4:	091b      	lsrs	r3, r3, #4
 80060f6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80060f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	461a      	mov	r2, r3
 8006100:	6a38      	ldr	r0, [r7, #32]
 8006102:	f004 f8f1 	bl	800a2e8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	68da      	ldr	r2, [r3, #12]
 800610a:	69bb      	ldr	r3, [r7, #24]
 800610c:	091b      	lsrs	r3, r3, #4
 800610e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006112:	441a      	add	r2, r3
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	695a      	ldr	r2, [r3, #20]
 800611c:	69bb      	ldr	r3, [r7, #24]
 800611e:	091b      	lsrs	r3, r3, #4
 8006120:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006124:	441a      	add	r2, r3
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	615a      	str	r2, [r3, #20]
 800612a:	e016      	b.n	800615a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800612c:	69bb      	ldr	r3, [r7, #24]
 800612e:	0c5b      	lsrs	r3, r3, #17
 8006130:	f003 030f 	and.w	r3, r3, #15
 8006134:	2b06      	cmp	r3, #6
 8006136:	d110      	bne.n	800615a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800613e:	2208      	movs	r2, #8
 8006140:	4619      	mov	r1, r3
 8006142:	6a38      	ldr	r0, [r7, #32]
 8006144:	f004 f8d0 	bl	800a2e8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	695a      	ldr	r2, [r3, #20]
 800614c:	69bb      	ldr	r3, [r7, #24]
 800614e:	091b      	lsrs	r3, r3, #4
 8006150:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006154:	441a      	add	r2, r3
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	699a      	ldr	r2, [r3, #24]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f042 0210 	orr.w	r2, r2, #16
 8006168:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4618      	mov	r0, r3
 8006170:	f004 fa4e 	bl	800a610 <USB_ReadInterrupts>
 8006174:	4603      	mov	r3, r0
 8006176:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800617a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800617e:	f040 80a7 	bne.w	80062d0 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8006182:	2300      	movs	r3, #0
 8006184:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4618      	mov	r0, r3
 800618c:	f004 fa53 	bl	800a636 <USB_ReadDevAllOutEpInterrupt>
 8006190:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8006192:	e099      	b.n	80062c8 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006194:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006196:	f003 0301 	and.w	r3, r3, #1
 800619a:	2b00      	cmp	r3, #0
 800619c:	f000 808e 	beq.w	80062bc <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061a6:	b2d2      	uxtb	r2, r2
 80061a8:	4611      	mov	r1, r2
 80061aa:	4618      	mov	r0, r3
 80061ac:	f004 fa77 	bl	800a69e <USB_ReadDevOutEPInterrupt>
 80061b0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	f003 0301 	and.w	r3, r3, #1
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d00c      	beq.n	80061d6 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80061bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061be:	015a      	lsls	r2, r3, #5
 80061c0:	69fb      	ldr	r3, [r7, #28]
 80061c2:	4413      	add	r3, r2
 80061c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061c8:	461a      	mov	r2, r3
 80061ca:	2301      	movs	r3, #1
 80061cc:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80061ce:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f000 fea3 	bl	8006f1c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	f003 0308 	and.w	r3, r3, #8
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d00c      	beq.n	80061fa <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80061e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061e2:	015a      	lsls	r2, r3, #5
 80061e4:	69fb      	ldr	r3, [r7, #28]
 80061e6:	4413      	add	r3, r2
 80061e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061ec:	461a      	mov	r2, r3
 80061ee:	2308      	movs	r3, #8
 80061f0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80061f2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f000 ff79 	bl	80070ec <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	f003 0310 	and.w	r3, r3, #16
 8006200:	2b00      	cmp	r3, #0
 8006202:	d008      	beq.n	8006216 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006206:	015a      	lsls	r2, r3, #5
 8006208:	69fb      	ldr	r3, [r7, #28]
 800620a:	4413      	add	r3, r2
 800620c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006210:	461a      	mov	r2, r3
 8006212:	2310      	movs	r3, #16
 8006214:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	f003 0302 	and.w	r3, r3, #2
 800621c:	2b00      	cmp	r3, #0
 800621e:	d030      	beq.n	8006282 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8006220:	6a3b      	ldr	r3, [r7, #32]
 8006222:	695b      	ldr	r3, [r3, #20]
 8006224:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006228:	2b80      	cmp	r3, #128	@ 0x80
 800622a:	d109      	bne.n	8006240 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800622c:	69fb      	ldr	r3, [r7, #28]
 800622e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	69fa      	ldr	r2, [r7, #28]
 8006236:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800623a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800623e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8006240:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006242:	4613      	mov	r3, r2
 8006244:	00db      	lsls	r3, r3, #3
 8006246:	4413      	add	r3, r2
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800624e:	687a      	ldr	r2, [r7, #4]
 8006250:	4413      	add	r3, r2
 8006252:	3304      	adds	r3, #4
 8006254:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	78db      	ldrb	r3, [r3, #3]
 800625a:	2b01      	cmp	r3, #1
 800625c:	d108      	bne.n	8006270 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	2200      	movs	r2, #0
 8006262:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006266:	b2db      	uxtb	r3, r3
 8006268:	4619      	mov	r1, r3
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f006 fdaa 	bl	800cdc4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8006270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006272:	015a      	lsls	r2, r3, #5
 8006274:	69fb      	ldr	r3, [r7, #28]
 8006276:	4413      	add	r3, r2
 8006278:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800627c:	461a      	mov	r2, r3
 800627e:	2302      	movs	r3, #2
 8006280:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	f003 0320 	and.w	r3, r3, #32
 8006288:	2b00      	cmp	r3, #0
 800628a:	d008      	beq.n	800629e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800628c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800628e:	015a      	lsls	r2, r3, #5
 8006290:	69fb      	ldr	r3, [r7, #28]
 8006292:	4413      	add	r3, r2
 8006294:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006298:	461a      	mov	r2, r3
 800629a:	2320      	movs	r3, #32
 800629c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d009      	beq.n	80062bc <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80062a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062aa:	015a      	lsls	r2, r3, #5
 80062ac:	69fb      	ldr	r3, [r7, #28]
 80062ae:	4413      	add	r3, r2
 80062b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062b4:	461a      	mov	r2, r3
 80062b6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80062ba:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80062bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062be:	3301      	adds	r3, #1
 80062c0:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80062c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062c4:	085b      	lsrs	r3, r3, #1
 80062c6:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80062c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	f47f af62 	bne.w	8006194 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4618      	mov	r0, r3
 80062d6:	f004 f99b 	bl	800a610 <USB_ReadInterrupts>
 80062da:	4603      	mov	r3, r0
 80062dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80062e0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80062e4:	f040 80db 	bne.w	800649e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4618      	mov	r0, r3
 80062ee:	f004 f9bc 	bl	800a66a <USB_ReadDevAllInEpInterrupt>
 80062f2:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80062f4:	2300      	movs	r3, #0
 80062f6:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80062f8:	e0cd      	b.n	8006496 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80062fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062fc:	f003 0301 	and.w	r3, r3, #1
 8006300:	2b00      	cmp	r3, #0
 8006302:	f000 80c2 	beq.w	800648a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800630c:	b2d2      	uxtb	r2, r2
 800630e:	4611      	mov	r1, r2
 8006310:	4618      	mov	r0, r3
 8006312:	f004 f9e2 	bl	800a6da <USB_ReadDevInEPInterrupt>
 8006316:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	f003 0301 	and.w	r3, r3, #1
 800631e:	2b00      	cmp	r3, #0
 8006320:	d057      	beq.n	80063d2 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006324:	f003 030f 	and.w	r3, r3, #15
 8006328:	2201      	movs	r2, #1
 800632a:	fa02 f303 	lsl.w	r3, r2, r3
 800632e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006330:	69fb      	ldr	r3, [r7, #28]
 8006332:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006336:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	43db      	mvns	r3, r3
 800633c:	69f9      	ldr	r1, [r7, #28]
 800633e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006342:	4013      	ands	r3, r2
 8006344:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006348:	015a      	lsls	r2, r3, #5
 800634a:	69fb      	ldr	r3, [r7, #28]
 800634c:	4413      	add	r3, r2
 800634e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006352:	461a      	mov	r2, r3
 8006354:	2301      	movs	r3, #1
 8006356:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	799b      	ldrb	r3, [r3, #6]
 800635c:	2b01      	cmp	r3, #1
 800635e:	d132      	bne.n	80063c6 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006360:	6879      	ldr	r1, [r7, #4]
 8006362:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006364:	4613      	mov	r3, r2
 8006366:	00db      	lsls	r3, r3, #3
 8006368:	4413      	add	r3, r2
 800636a:	009b      	lsls	r3, r3, #2
 800636c:	440b      	add	r3, r1
 800636e:	3320      	adds	r3, #32
 8006370:	6819      	ldr	r1, [r3, #0]
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006376:	4613      	mov	r3, r2
 8006378:	00db      	lsls	r3, r3, #3
 800637a:	4413      	add	r3, r2
 800637c:	009b      	lsls	r3, r3, #2
 800637e:	4403      	add	r3, r0
 8006380:	331c      	adds	r3, #28
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4419      	add	r1, r3
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800638a:	4613      	mov	r3, r2
 800638c:	00db      	lsls	r3, r3, #3
 800638e:	4413      	add	r3, r2
 8006390:	009b      	lsls	r3, r3, #2
 8006392:	4403      	add	r3, r0
 8006394:	3320      	adds	r3, #32
 8006396:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800639a:	2b00      	cmp	r3, #0
 800639c:	d113      	bne.n	80063c6 <HAL_PCD_IRQHandler+0x3a2>
 800639e:	6879      	ldr	r1, [r7, #4]
 80063a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063a2:	4613      	mov	r3, r2
 80063a4:	00db      	lsls	r3, r3, #3
 80063a6:	4413      	add	r3, r2
 80063a8:	009b      	lsls	r3, r3, #2
 80063aa:	440b      	add	r3, r1
 80063ac:	3324      	adds	r3, #36	@ 0x24
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d108      	bne.n	80063c6 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6818      	ldr	r0, [r3, #0]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80063be:	461a      	mov	r2, r3
 80063c0:	2101      	movs	r1, #1
 80063c2:	f004 f9e9 	bl	800a798 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80063c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	4619      	mov	r1, r3
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f006 fc74 	bl	800ccba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	f003 0308 	and.w	r3, r3, #8
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d008      	beq.n	80063ee <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80063dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063de:	015a      	lsls	r2, r3, #5
 80063e0:	69fb      	ldr	r3, [r7, #28]
 80063e2:	4413      	add	r3, r2
 80063e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063e8:	461a      	mov	r2, r3
 80063ea:	2308      	movs	r3, #8
 80063ec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	f003 0310 	and.w	r3, r3, #16
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d008      	beq.n	800640a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80063f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063fa:	015a      	lsls	r2, r3, #5
 80063fc:	69fb      	ldr	r3, [r7, #28]
 80063fe:	4413      	add	r3, r2
 8006400:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006404:	461a      	mov	r2, r3
 8006406:	2310      	movs	r3, #16
 8006408:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006410:	2b00      	cmp	r3, #0
 8006412:	d008      	beq.n	8006426 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006416:	015a      	lsls	r2, r3, #5
 8006418:	69fb      	ldr	r3, [r7, #28]
 800641a:	4413      	add	r3, r2
 800641c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006420:	461a      	mov	r2, r3
 8006422:	2340      	movs	r3, #64	@ 0x40
 8006424:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	f003 0302 	and.w	r3, r3, #2
 800642c:	2b00      	cmp	r3, #0
 800642e:	d023      	beq.n	8006478 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8006430:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006432:	6a38      	ldr	r0, [r7, #32]
 8006434:	f003 f9d0 	bl	80097d8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8006438:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800643a:	4613      	mov	r3, r2
 800643c:	00db      	lsls	r3, r3, #3
 800643e:	4413      	add	r3, r2
 8006440:	009b      	lsls	r3, r3, #2
 8006442:	3310      	adds	r3, #16
 8006444:	687a      	ldr	r2, [r7, #4]
 8006446:	4413      	add	r3, r2
 8006448:	3304      	adds	r3, #4
 800644a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	78db      	ldrb	r3, [r3, #3]
 8006450:	2b01      	cmp	r3, #1
 8006452:	d108      	bne.n	8006466 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	2200      	movs	r2, #0
 8006458:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800645a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800645c:	b2db      	uxtb	r3, r3
 800645e:	4619      	mov	r1, r3
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f006 fcc1 	bl	800cde8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006468:	015a      	lsls	r2, r3, #5
 800646a:	69fb      	ldr	r3, [r7, #28]
 800646c:	4413      	add	r3, r2
 800646e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006472:	461a      	mov	r2, r3
 8006474:	2302      	movs	r3, #2
 8006476:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800647e:	2b00      	cmp	r3, #0
 8006480:	d003      	beq.n	800648a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006482:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f000 fcbd 	bl	8006e04 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800648a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800648c:	3301      	adds	r3, #1
 800648e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8006490:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006492:	085b      	lsrs	r3, r3, #1
 8006494:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8006496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006498:	2b00      	cmp	r3, #0
 800649a:	f47f af2e 	bne.w	80062fa <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4618      	mov	r0, r3
 80064a4:	f004 f8b4 	bl	800a610 <USB_ReadInterrupts>
 80064a8:	4603      	mov	r3, r0
 80064aa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80064ae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80064b2:	d122      	bne.n	80064fa <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80064b4:	69fb      	ldr	r3, [r7, #28]
 80064b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	69fa      	ldr	r2, [r7, #28]
 80064be:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80064c2:	f023 0301 	bic.w	r3, r3, #1
 80064c6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80064ce:	2b01      	cmp	r3, #1
 80064d0:	d108      	bne.n	80064e4 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2200      	movs	r2, #0
 80064d6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80064da:	2100      	movs	r1, #0
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f000 fea3 	bl	8007228 <HAL_PCDEx_LPM_Callback>
 80064e2:	e002      	b.n	80064ea <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f006 fc5f 	bl	800cda8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	695a      	ldr	r2, [r3, #20]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80064f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4618      	mov	r0, r3
 8006500:	f004 f886 	bl	800a610 <USB_ReadInterrupts>
 8006504:	4603      	mov	r3, r0
 8006506:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800650a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800650e:	d112      	bne.n	8006536 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006510:	69fb      	ldr	r3, [r7, #28]
 8006512:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006516:	689b      	ldr	r3, [r3, #8]
 8006518:	f003 0301 	and.w	r3, r3, #1
 800651c:	2b01      	cmp	r3, #1
 800651e:	d102      	bne.n	8006526 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f006 fc1b 	bl	800cd5c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	695a      	ldr	r2, [r3, #20]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8006534:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4618      	mov	r0, r3
 800653c:	f004 f868 	bl	800a610 <USB_ReadInterrupts>
 8006540:	4603      	mov	r3, r0
 8006542:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006546:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800654a:	f040 80b7 	bne.w	80066bc <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800654e:	69fb      	ldr	r3, [r7, #28]
 8006550:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	69fa      	ldr	r2, [r7, #28]
 8006558:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800655c:	f023 0301 	bic.w	r3, r3, #1
 8006560:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	2110      	movs	r1, #16
 8006568:	4618      	mov	r0, r3
 800656a:	f003 f935 	bl	80097d8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800656e:	2300      	movs	r3, #0
 8006570:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006572:	e046      	b.n	8006602 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006574:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006576:	015a      	lsls	r2, r3, #5
 8006578:	69fb      	ldr	r3, [r7, #28]
 800657a:	4413      	add	r3, r2
 800657c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006580:	461a      	mov	r2, r3
 8006582:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006586:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800658a:	015a      	lsls	r2, r3, #5
 800658c:	69fb      	ldr	r3, [r7, #28]
 800658e:	4413      	add	r3, r2
 8006590:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006598:	0151      	lsls	r1, r2, #5
 800659a:	69fa      	ldr	r2, [r7, #28]
 800659c:	440a      	add	r2, r1
 800659e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80065a2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80065a6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80065a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065aa:	015a      	lsls	r2, r3, #5
 80065ac:	69fb      	ldr	r3, [r7, #28]
 80065ae:	4413      	add	r3, r2
 80065b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065b4:	461a      	mov	r2, r3
 80065b6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80065ba:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80065bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065be:	015a      	lsls	r2, r3, #5
 80065c0:	69fb      	ldr	r3, [r7, #28]
 80065c2:	4413      	add	r3, r2
 80065c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80065cc:	0151      	lsls	r1, r2, #5
 80065ce:	69fa      	ldr	r2, [r7, #28]
 80065d0:	440a      	add	r2, r1
 80065d2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80065d6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80065da:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80065dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065de:	015a      	lsls	r2, r3, #5
 80065e0:	69fb      	ldr	r3, [r7, #28]
 80065e2:	4413      	add	r3, r2
 80065e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80065ec:	0151      	lsls	r1, r2, #5
 80065ee:	69fa      	ldr	r2, [r7, #28]
 80065f0:	440a      	add	r2, r1
 80065f2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80065f6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80065fa:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80065fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065fe:	3301      	adds	r3, #1
 8006600:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	791b      	ldrb	r3, [r3, #4]
 8006606:	461a      	mov	r2, r3
 8006608:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800660a:	4293      	cmp	r3, r2
 800660c:	d3b2      	bcc.n	8006574 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800660e:	69fb      	ldr	r3, [r7, #28]
 8006610:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006614:	69db      	ldr	r3, [r3, #28]
 8006616:	69fa      	ldr	r2, [r7, #28]
 8006618:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800661c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8006620:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	7bdb      	ldrb	r3, [r3, #15]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d016      	beq.n	8006658 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800662a:	69fb      	ldr	r3, [r7, #28]
 800662c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006630:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006634:	69fa      	ldr	r2, [r7, #28]
 8006636:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800663a:	f043 030b 	orr.w	r3, r3, #11
 800663e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006642:	69fb      	ldr	r3, [r7, #28]
 8006644:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006648:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800664a:	69fa      	ldr	r2, [r7, #28]
 800664c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006650:	f043 030b 	orr.w	r3, r3, #11
 8006654:	6453      	str	r3, [r2, #68]	@ 0x44
 8006656:	e015      	b.n	8006684 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006658:	69fb      	ldr	r3, [r7, #28]
 800665a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800665e:	695b      	ldr	r3, [r3, #20]
 8006660:	69fa      	ldr	r2, [r7, #28]
 8006662:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006666:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800666a:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800666e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006670:	69fb      	ldr	r3, [r7, #28]
 8006672:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006676:	691b      	ldr	r3, [r3, #16]
 8006678:	69fa      	ldr	r2, [r7, #28]
 800667a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800667e:	f043 030b 	orr.w	r3, r3, #11
 8006682:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006684:	69fb      	ldr	r3, [r7, #28]
 8006686:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	69fa      	ldr	r2, [r7, #28]
 800668e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006692:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006696:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6818      	ldr	r0, [r3, #0]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80066a6:	461a      	mov	r2, r3
 80066a8:	f004 f876 	bl	800a798 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	695a      	ldr	r2, [r3, #20]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80066ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4618      	mov	r0, r3
 80066c2:	f003 ffa5 	bl	800a610 <USB_ReadInterrupts>
 80066c6:	4603      	mov	r3, r0
 80066c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80066cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80066d0:	d123      	bne.n	800671a <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4618      	mov	r0, r3
 80066d8:	f004 f83b 	bl	800a752 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4618      	mov	r0, r3
 80066e2:	f003 f8f2 	bl	80098ca <USB_GetDevSpeed>
 80066e6:	4603      	mov	r3, r0
 80066e8:	461a      	mov	r2, r3
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681c      	ldr	r4, [r3, #0]
 80066f2:	f001 fa09 	bl	8007b08 <HAL_RCC_GetHCLKFreq>
 80066f6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80066fc:	461a      	mov	r2, r3
 80066fe:	4620      	mov	r0, r4
 8006700:	f002 fdf6 	bl	80092f0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f006 fb00 	bl	800cd0a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	695a      	ldr	r2, [r3, #20]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8006718:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4618      	mov	r0, r3
 8006720:	f003 ff76 	bl	800a610 <USB_ReadInterrupts>
 8006724:	4603      	mov	r3, r0
 8006726:	f003 0308 	and.w	r3, r3, #8
 800672a:	2b08      	cmp	r3, #8
 800672c:	d10a      	bne.n	8006744 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f006 fadd 	bl	800ccee <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	695a      	ldr	r2, [r3, #20]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f002 0208 	and.w	r2, r2, #8
 8006742:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4618      	mov	r0, r3
 800674a:	f003 ff61 	bl	800a610 <USB_ReadInterrupts>
 800674e:	4603      	mov	r3, r0
 8006750:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006754:	2b80      	cmp	r3, #128	@ 0x80
 8006756:	d123      	bne.n	80067a0 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8006758:	6a3b      	ldr	r3, [r7, #32]
 800675a:	699b      	ldr	r3, [r3, #24]
 800675c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006760:	6a3b      	ldr	r3, [r7, #32]
 8006762:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006764:	2301      	movs	r3, #1
 8006766:	627b      	str	r3, [r7, #36]	@ 0x24
 8006768:	e014      	b.n	8006794 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800676a:	6879      	ldr	r1, [r7, #4]
 800676c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800676e:	4613      	mov	r3, r2
 8006770:	00db      	lsls	r3, r3, #3
 8006772:	4413      	add	r3, r2
 8006774:	009b      	lsls	r3, r3, #2
 8006776:	440b      	add	r3, r1
 8006778:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800677c:	781b      	ldrb	r3, [r3, #0]
 800677e:	2b01      	cmp	r3, #1
 8006780:	d105      	bne.n	800678e <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8006782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006784:	b2db      	uxtb	r3, r3
 8006786:	4619      	mov	r1, r3
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f000 fb0a 	bl	8006da2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800678e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006790:	3301      	adds	r3, #1
 8006792:	627b      	str	r3, [r7, #36]	@ 0x24
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	791b      	ldrb	r3, [r3, #4]
 8006798:	461a      	mov	r2, r3
 800679a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800679c:	4293      	cmp	r3, r2
 800679e:	d3e4      	bcc.n	800676a <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4618      	mov	r0, r3
 80067a6:	f003 ff33 	bl	800a610 <USB_ReadInterrupts>
 80067aa:	4603      	mov	r3, r0
 80067ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80067b0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80067b4:	d13c      	bne.n	8006830 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80067b6:	2301      	movs	r3, #1
 80067b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80067ba:	e02b      	b.n	8006814 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80067bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067be:	015a      	lsls	r2, r3, #5
 80067c0:	69fb      	ldr	r3, [r7, #28]
 80067c2:	4413      	add	r3, r2
 80067c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80067cc:	6879      	ldr	r1, [r7, #4]
 80067ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067d0:	4613      	mov	r3, r2
 80067d2:	00db      	lsls	r3, r3, #3
 80067d4:	4413      	add	r3, r2
 80067d6:	009b      	lsls	r3, r3, #2
 80067d8:	440b      	add	r3, r1
 80067da:	3318      	adds	r3, #24
 80067dc:	781b      	ldrb	r3, [r3, #0]
 80067de:	2b01      	cmp	r3, #1
 80067e0:	d115      	bne.n	800680e <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80067e2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	da12      	bge.n	800680e <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80067e8:	6879      	ldr	r1, [r7, #4]
 80067ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067ec:	4613      	mov	r3, r2
 80067ee:	00db      	lsls	r3, r3, #3
 80067f0:	4413      	add	r3, r2
 80067f2:	009b      	lsls	r3, r3, #2
 80067f4:	440b      	add	r3, r1
 80067f6:	3317      	adds	r3, #23
 80067f8:	2201      	movs	r2, #1
 80067fa:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80067fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067fe:	b2db      	uxtb	r3, r3
 8006800:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006804:	b2db      	uxtb	r3, r3
 8006806:	4619      	mov	r1, r3
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f000 faca 	bl	8006da2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800680e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006810:	3301      	adds	r3, #1
 8006812:	627b      	str	r3, [r7, #36]	@ 0x24
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	791b      	ldrb	r3, [r3, #4]
 8006818:	461a      	mov	r2, r3
 800681a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800681c:	4293      	cmp	r3, r2
 800681e:	d3cd      	bcc.n	80067bc <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	695a      	ldr	r2, [r3, #20]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800682e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4618      	mov	r0, r3
 8006836:	f003 feeb 	bl	800a610 <USB_ReadInterrupts>
 800683a:	4603      	mov	r3, r0
 800683c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006840:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006844:	d156      	bne.n	80068f4 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006846:	2301      	movs	r3, #1
 8006848:	627b      	str	r3, [r7, #36]	@ 0x24
 800684a:	e045      	b.n	80068d8 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800684c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800684e:	015a      	lsls	r2, r3, #5
 8006850:	69fb      	ldr	r3, [r7, #28]
 8006852:	4413      	add	r3, r2
 8006854:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800685c:	6879      	ldr	r1, [r7, #4]
 800685e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006860:	4613      	mov	r3, r2
 8006862:	00db      	lsls	r3, r3, #3
 8006864:	4413      	add	r3, r2
 8006866:	009b      	lsls	r3, r3, #2
 8006868:	440b      	add	r3, r1
 800686a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800686e:	781b      	ldrb	r3, [r3, #0]
 8006870:	2b01      	cmp	r3, #1
 8006872:	d12e      	bne.n	80068d2 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006874:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006876:	2b00      	cmp	r3, #0
 8006878:	da2b      	bge.n	80068d2 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800687a:	69bb      	ldr	r3, [r7, #24]
 800687c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8006886:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800688a:	429a      	cmp	r2, r3
 800688c:	d121      	bne.n	80068d2 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800688e:	6879      	ldr	r1, [r7, #4]
 8006890:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006892:	4613      	mov	r3, r2
 8006894:	00db      	lsls	r3, r3, #3
 8006896:	4413      	add	r3, r2
 8006898:	009b      	lsls	r3, r3, #2
 800689a:	440b      	add	r3, r1
 800689c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80068a0:	2201      	movs	r2, #1
 80068a2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80068a4:	6a3b      	ldr	r3, [r7, #32]
 80068a6:	699b      	ldr	r3, [r3, #24]
 80068a8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80068ac:	6a3b      	ldr	r3, [r7, #32]
 80068ae:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80068b0:	6a3b      	ldr	r3, [r7, #32]
 80068b2:	695b      	ldr	r3, [r3, #20]
 80068b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d10a      	bne.n	80068d2 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80068bc:	69fb      	ldr	r3, [r7, #28]
 80068be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	69fa      	ldr	r2, [r7, #28]
 80068c6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80068ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80068ce:	6053      	str	r3, [r2, #4]
            break;
 80068d0:	e008      	b.n	80068e4 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80068d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068d4:	3301      	adds	r3, #1
 80068d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	791b      	ldrb	r3, [r3, #4]
 80068dc:	461a      	mov	r2, r3
 80068de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d3b3      	bcc.n	800684c <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	695a      	ldr	r2, [r3, #20]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80068f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4618      	mov	r0, r3
 80068fa:	f003 fe89 	bl	800a610 <USB_ReadInterrupts>
 80068fe:	4603      	mov	r3, r0
 8006900:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006904:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006908:	d10a      	bne.n	8006920 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f006 fa7e 	bl	800ce0c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	695a      	ldr	r2, [r3, #20]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800691e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4618      	mov	r0, r3
 8006926:	f003 fe73 	bl	800a610 <USB_ReadInterrupts>
 800692a:	4603      	mov	r3, r0
 800692c:	f003 0304 	and.w	r3, r3, #4
 8006930:	2b04      	cmp	r3, #4
 8006932:	d115      	bne.n	8006960 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800693c:	69bb      	ldr	r3, [r7, #24]
 800693e:	f003 0304 	and.w	r3, r3, #4
 8006942:	2b00      	cmp	r3, #0
 8006944:	d002      	beq.n	800694c <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f006 fa6e 	bl	800ce28 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	6859      	ldr	r1, [r3, #4]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	69ba      	ldr	r2, [r7, #24]
 8006958:	430a      	orrs	r2, r1
 800695a:	605a      	str	r2, [r3, #4]
 800695c:	e000      	b.n	8006960 <HAL_PCD_IRQHandler+0x93c>
      return;
 800695e:	bf00      	nop
    }
  }
}
 8006960:	3734      	adds	r7, #52	@ 0x34
 8006962:	46bd      	mov	sp, r7
 8006964:	bd90      	pop	{r4, r7, pc}

08006966 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006966:	b580      	push	{r7, lr}
 8006968:	b082      	sub	sp, #8
 800696a:	af00      	add	r7, sp, #0
 800696c:	6078      	str	r0, [r7, #4]
 800696e:	460b      	mov	r3, r1
 8006970:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006978:	2b01      	cmp	r3, #1
 800697a:	d101      	bne.n	8006980 <HAL_PCD_SetAddress+0x1a>
 800697c:	2302      	movs	r3, #2
 800697e:	e012      	b.n	80069a6 <HAL_PCD_SetAddress+0x40>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2201      	movs	r2, #1
 8006984:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	78fa      	ldrb	r2, [r7, #3]
 800698c:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	78fa      	ldrb	r2, [r7, #3]
 8006994:	4611      	mov	r1, r2
 8006996:	4618      	mov	r0, r3
 8006998:	f003 fdd2 	bl	800a540 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2200      	movs	r2, #0
 80069a0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80069a4:	2300      	movs	r3, #0
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3708      	adds	r7, #8
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}

080069ae <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80069ae:	b580      	push	{r7, lr}
 80069b0:	b084      	sub	sp, #16
 80069b2:	af00      	add	r7, sp, #0
 80069b4:	6078      	str	r0, [r7, #4]
 80069b6:	4608      	mov	r0, r1
 80069b8:	4611      	mov	r1, r2
 80069ba:	461a      	mov	r2, r3
 80069bc:	4603      	mov	r3, r0
 80069be:	70fb      	strb	r3, [r7, #3]
 80069c0:	460b      	mov	r3, r1
 80069c2:	803b      	strh	r3, [r7, #0]
 80069c4:	4613      	mov	r3, r2
 80069c6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80069c8:	2300      	movs	r3, #0
 80069ca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80069cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	da0f      	bge.n	80069f4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80069d4:	78fb      	ldrb	r3, [r7, #3]
 80069d6:	f003 020f 	and.w	r2, r3, #15
 80069da:	4613      	mov	r3, r2
 80069dc:	00db      	lsls	r3, r3, #3
 80069de:	4413      	add	r3, r2
 80069e0:	009b      	lsls	r3, r3, #2
 80069e2:	3310      	adds	r3, #16
 80069e4:	687a      	ldr	r2, [r7, #4]
 80069e6:	4413      	add	r3, r2
 80069e8:	3304      	adds	r3, #4
 80069ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2201      	movs	r2, #1
 80069f0:	705a      	strb	r2, [r3, #1]
 80069f2:	e00f      	b.n	8006a14 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80069f4:	78fb      	ldrb	r3, [r7, #3]
 80069f6:	f003 020f 	and.w	r2, r3, #15
 80069fa:	4613      	mov	r3, r2
 80069fc:	00db      	lsls	r3, r3, #3
 80069fe:	4413      	add	r3, r2
 8006a00:	009b      	lsls	r3, r3, #2
 8006a02:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006a06:	687a      	ldr	r2, [r7, #4]
 8006a08:	4413      	add	r3, r2
 8006a0a:	3304      	adds	r3, #4
 8006a0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	2200      	movs	r2, #0
 8006a12:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006a14:	78fb      	ldrb	r3, [r7, #3]
 8006a16:	f003 030f 	and.w	r3, r3, #15
 8006a1a:	b2da      	uxtb	r2, r3
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8006a20:	883b      	ldrh	r3, [r7, #0]
 8006a22:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	78ba      	ldrb	r2, [r7, #2]
 8006a2e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	785b      	ldrb	r3, [r3, #1]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d004      	beq.n	8006a42 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	781b      	ldrb	r3, [r3, #0]
 8006a3c:	461a      	mov	r2, r3
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006a42:	78bb      	ldrb	r3, [r7, #2]
 8006a44:	2b02      	cmp	r3, #2
 8006a46:	d102      	bne.n	8006a4e <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d101      	bne.n	8006a5c <HAL_PCD_EP_Open+0xae>
 8006a58:	2302      	movs	r3, #2
 8006a5a:	e00e      	b.n	8006a7a <HAL_PCD_EP_Open+0xcc>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2201      	movs	r2, #1
 8006a60:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	68f9      	ldr	r1, [r7, #12]
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f002 ff52 	bl	8009914 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2200      	movs	r2, #0
 8006a74:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8006a78:	7afb      	ldrb	r3, [r7, #11]
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3710      	adds	r7, #16
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}

08006a82 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006a82:	b580      	push	{r7, lr}
 8006a84:	b084      	sub	sp, #16
 8006a86:	af00      	add	r7, sp, #0
 8006a88:	6078      	str	r0, [r7, #4]
 8006a8a:	460b      	mov	r3, r1
 8006a8c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006a8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	da0f      	bge.n	8006ab6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006a96:	78fb      	ldrb	r3, [r7, #3]
 8006a98:	f003 020f 	and.w	r2, r3, #15
 8006a9c:	4613      	mov	r3, r2
 8006a9e:	00db      	lsls	r3, r3, #3
 8006aa0:	4413      	add	r3, r2
 8006aa2:	009b      	lsls	r3, r3, #2
 8006aa4:	3310      	adds	r3, #16
 8006aa6:	687a      	ldr	r2, [r7, #4]
 8006aa8:	4413      	add	r3, r2
 8006aaa:	3304      	adds	r3, #4
 8006aac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2201      	movs	r2, #1
 8006ab2:	705a      	strb	r2, [r3, #1]
 8006ab4:	e00f      	b.n	8006ad6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006ab6:	78fb      	ldrb	r3, [r7, #3]
 8006ab8:	f003 020f 	and.w	r2, r3, #15
 8006abc:	4613      	mov	r3, r2
 8006abe:	00db      	lsls	r3, r3, #3
 8006ac0:	4413      	add	r3, r2
 8006ac2:	009b      	lsls	r3, r3, #2
 8006ac4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006ac8:	687a      	ldr	r2, [r7, #4]
 8006aca:	4413      	add	r3, r2
 8006acc:	3304      	adds	r3, #4
 8006ace:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8006ad6:	78fb      	ldrb	r3, [r7, #3]
 8006ad8:	f003 030f 	and.w	r3, r3, #15
 8006adc:	b2da      	uxtb	r2, r3
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006ae8:	2b01      	cmp	r3, #1
 8006aea:	d101      	bne.n	8006af0 <HAL_PCD_EP_Close+0x6e>
 8006aec:	2302      	movs	r3, #2
 8006aee:	e00e      	b.n	8006b0e <HAL_PCD_EP_Close+0x8c>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2201      	movs	r2, #1
 8006af4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	68f9      	ldr	r1, [r7, #12]
 8006afe:	4618      	mov	r0, r3
 8006b00:	f002 ff90 	bl	8009a24 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2200      	movs	r2, #0
 8006b08:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8006b0c:	2300      	movs	r3, #0
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3710      	adds	r7, #16
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}

08006b16 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006b16:	b580      	push	{r7, lr}
 8006b18:	b086      	sub	sp, #24
 8006b1a:	af00      	add	r7, sp, #0
 8006b1c:	60f8      	str	r0, [r7, #12]
 8006b1e:	607a      	str	r2, [r7, #4]
 8006b20:	603b      	str	r3, [r7, #0]
 8006b22:	460b      	mov	r3, r1
 8006b24:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006b26:	7afb      	ldrb	r3, [r7, #11]
 8006b28:	f003 020f 	and.w	r2, r3, #15
 8006b2c:	4613      	mov	r3, r2
 8006b2e:	00db      	lsls	r3, r3, #3
 8006b30:	4413      	add	r3, r2
 8006b32:	009b      	lsls	r3, r3, #2
 8006b34:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006b38:	68fa      	ldr	r2, [r7, #12]
 8006b3a:	4413      	add	r3, r2
 8006b3c:	3304      	adds	r3, #4
 8006b3e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	687a      	ldr	r2, [r7, #4]
 8006b44:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	683a      	ldr	r2, [r7, #0]
 8006b4a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	2200      	movs	r2, #0
 8006b56:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006b58:	7afb      	ldrb	r3, [r7, #11]
 8006b5a:	f003 030f 	and.w	r3, r3, #15
 8006b5e:	b2da      	uxtb	r2, r3
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	799b      	ldrb	r3, [r3, #6]
 8006b68:	2b01      	cmp	r3, #1
 8006b6a:	d102      	bne.n	8006b72 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006b6c:	687a      	ldr	r2, [r7, #4]
 8006b6e:	697b      	ldr	r3, [r7, #20]
 8006b70:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	6818      	ldr	r0, [r3, #0]
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	799b      	ldrb	r3, [r3, #6]
 8006b7a:	461a      	mov	r2, r3
 8006b7c:	6979      	ldr	r1, [r7, #20]
 8006b7e:	f003 f82d 	bl	8009bdc <USB_EPStartXfer>

  return HAL_OK;
 8006b82:	2300      	movs	r3, #0
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	3718      	adds	r7, #24
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}

08006b8c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b083      	sub	sp, #12
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
 8006b94:	460b      	mov	r3, r1
 8006b96:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006b98:	78fb      	ldrb	r3, [r7, #3]
 8006b9a:	f003 020f 	and.w	r2, r3, #15
 8006b9e:	6879      	ldr	r1, [r7, #4]
 8006ba0:	4613      	mov	r3, r2
 8006ba2:	00db      	lsls	r3, r3, #3
 8006ba4:	4413      	add	r3, r2
 8006ba6:	009b      	lsls	r3, r3, #2
 8006ba8:	440b      	add	r3, r1
 8006baa:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8006bae:	681b      	ldr	r3, [r3, #0]
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	370c      	adds	r7, #12
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bba:	4770      	bx	lr

08006bbc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b086      	sub	sp, #24
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	60f8      	str	r0, [r7, #12]
 8006bc4:	607a      	str	r2, [r7, #4]
 8006bc6:	603b      	str	r3, [r7, #0]
 8006bc8:	460b      	mov	r3, r1
 8006bca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006bcc:	7afb      	ldrb	r3, [r7, #11]
 8006bce:	f003 020f 	and.w	r2, r3, #15
 8006bd2:	4613      	mov	r3, r2
 8006bd4:	00db      	lsls	r3, r3, #3
 8006bd6:	4413      	add	r3, r2
 8006bd8:	009b      	lsls	r3, r3, #2
 8006bda:	3310      	adds	r3, #16
 8006bdc:	68fa      	ldr	r2, [r7, #12]
 8006bde:	4413      	add	r3, r2
 8006be0:	3304      	adds	r3, #4
 8006be2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	687a      	ldr	r2, [r7, #4]
 8006be8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	683a      	ldr	r2, [r7, #0]
 8006bee:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	2201      	movs	r2, #1
 8006bfa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006bfc:	7afb      	ldrb	r3, [r7, #11]
 8006bfe:	f003 030f 	and.w	r3, r3, #15
 8006c02:	b2da      	uxtb	r2, r3
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	799b      	ldrb	r3, [r3, #6]
 8006c0c:	2b01      	cmp	r3, #1
 8006c0e:	d102      	bne.n	8006c16 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006c10:	687a      	ldr	r2, [r7, #4]
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	6818      	ldr	r0, [r3, #0]
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	799b      	ldrb	r3, [r3, #6]
 8006c1e:	461a      	mov	r2, r3
 8006c20:	6979      	ldr	r1, [r7, #20]
 8006c22:	f002 ffdb 	bl	8009bdc <USB_EPStartXfer>

  return HAL_OK;
 8006c26:	2300      	movs	r3, #0
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	3718      	adds	r7, #24
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}

08006c30 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b084      	sub	sp, #16
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
 8006c38:	460b      	mov	r3, r1
 8006c3a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006c3c:	78fb      	ldrb	r3, [r7, #3]
 8006c3e:	f003 030f 	and.w	r3, r3, #15
 8006c42:	687a      	ldr	r2, [r7, #4]
 8006c44:	7912      	ldrb	r2, [r2, #4]
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d901      	bls.n	8006c4e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	e04f      	b.n	8006cee <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006c4e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	da0f      	bge.n	8006c76 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006c56:	78fb      	ldrb	r3, [r7, #3]
 8006c58:	f003 020f 	and.w	r2, r3, #15
 8006c5c:	4613      	mov	r3, r2
 8006c5e:	00db      	lsls	r3, r3, #3
 8006c60:	4413      	add	r3, r2
 8006c62:	009b      	lsls	r3, r3, #2
 8006c64:	3310      	adds	r3, #16
 8006c66:	687a      	ldr	r2, [r7, #4]
 8006c68:	4413      	add	r3, r2
 8006c6a:	3304      	adds	r3, #4
 8006c6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2201      	movs	r2, #1
 8006c72:	705a      	strb	r2, [r3, #1]
 8006c74:	e00d      	b.n	8006c92 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006c76:	78fa      	ldrb	r2, [r7, #3]
 8006c78:	4613      	mov	r3, r2
 8006c7a:	00db      	lsls	r3, r3, #3
 8006c7c:	4413      	add	r3, r2
 8006c7e:	009b      	lsls	r3, r3, #2
 8006c80:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006c84:	687a      	ldr	r2, [r7, #4]
 8006c86:	4413      	add	r3, r2
 8006c88:	3304      	adds	r3, #4
 8006c8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	2201      	movs	r2, #1
 8006c96:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006c98:	78fb      	ldrb	r3, [r7, #3]
 8006c9a:	f003 030f 	and.w	r3, r3, #15
 8006c9e:	b2da      	uxtb	r2, r3
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006caa:	2b01      	cmp	r3, #1
 8006cac:	d101      	bne.n	8006cb2 <HAL_PCD_EP_SetStall+0x82>
 8006cae:	2302      	movs	r3, #2
 8006cb0:	e01d      	b.n	8006cee <HAL_PCD_EP_SetStall+0xbe>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2201      	movs	r2, #1
 8006cb6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	68f9      	ldr	r1, [r7, #12]
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	f003 fb69 	bl	800a398 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006cc6:	78fb      	ldrb	r3, [r7, #3]
 8006cc8:	f003 030f 	and.w	r3, r3, #15
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d109      	bne.n	8006ce4 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6818      	ldr	r0, [r3, #0]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	7999      	ldrb	r1, [r3, #6]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006cde:	461a      	mov	r2, r3
 8006ce0:	f003 fd5a 	bl	800a798 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006cec:	2300      	movs	r3, #0
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	3710      	adds	r7, #16
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}

08006cf6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006cf6:	b580      	push	{r7, lr}
 8006cf8:	b084      	sub	sp, #16
 8006cfa:	af00      	add	r7, sp, #0
 8006cfc:	6078      	str	r0, [r7, #4]
 8006cfe:	460b      	mov	r3, r1
 8006d00:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006d02:	78fb      	ldrb	r3, [r7, #3]
 8006d04:	f003 030f 	and.w	r3, r3, #15
 8006d08:	687a      	ldr	r2, [r7, #4]
 8006d0a:	7912      	ldrb	r2, [r2, #4]
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d901      	bls.n	8006d14 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006d10:	2301      	movs	r3, #1
 8006d12:	e042      	b.n	8006d9a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006d14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	da0f      	bge.n	8006d3c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006d1c:	78fb      	ldrb	r3, [r7, #3]
 8006d1e:	f003 020f 	and.w	r2, r3, #15
 8006d22:	4613      	mov	r3, r2
 8006d24:	00db      	lsls	r3, r3, #3
 8006d26:	4413      	add	r3, r2
 8006d28:	009b      	lsls	r3, r3, #2
 8006d2a:	3310      	adds	r3, #16
 8006d2c:	687a      	ldr	r2, [r7, #4]
 8006d2e:	4413      	add	r3, r2
 8006d30:	3304      	adds	r3, #4
 8006d32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	2201      	movs	r2, #1
 8006d38:	705a      	strb	r2, [r3, #1]
 8006d3a:	e00f      	b.n	8006d5c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006d3c:	78fb      	ldrb	r3, [r7, #3]
 8006d3e:	f003 020f 	and.w	r2, r3, #15
 8006d42:	4613      	mov	r3, r2
 8006d44:	00db      	lsls	r3, r3, #3
 8006d46:	4413      	add	r3, r2
 8006d48:	009b      	lsls	r3, r3, #2
 8006d4a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006d4e:	687a      	ldr	r2, [r7, #4]
 8006d50:	4413      	add	r3, r2
 8006d52:	3304      	adds	r3, #4
 8006d54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006d62:	78fb      	ldrb	r3, [r7, #3]
 8006d64:	f003 030f 	and.w	r3, r3, #15
 8006d68:	b2da      	uxtb	r2, r3
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	d101      	bne.n	8006d7c <HAL_PCD_EP_ClrStall+0x86>
 8006d78:	2302      	movs	r3, #2
 8006d7a:	e00e      	b.n	8006d9a <HAL_PCD_EP_ClrStall+0xa4>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2201      	movs	r2, #1
 8006d80:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	68f9      	ldr	r1, [r7, #12]
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f003 fb72 	bl	800a474 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2200      	movs	r2, #0
 8006d94:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006d98:	2300      	movs	r3, #0
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3710      	adds	r7, #16
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}

08006da2 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006da2:	b580      	push	{r7, lr}
 8006da4:	b084      	sub	sp, #16
 8006da6:	af00      	add	r7, sp, #0
 8006da8:	6078      	str	r0, [r7, #4]
 8006daa:	460b      	mov	r3, r1
 8006dac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006dae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	da0c      	bge.n	8006dd0 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006db6:	78fb      	ldrb	r3, [r7, #3]
 8006db8:	f003 020f 	and.w	r2, r3, #15
 8006dbc:	4613      	mov	r3, r2
 8006dbe:	00db      	lsls	r3, r3, #3
 8006dc0:	4413      	add	r3, r2
 8006dc2:	009b      	lsls	r3, r3, #2
 8006dc4:	3310      	adds	r3, #16
 8006dc6:	687a      	ldr	r2, [r7, #4]
 8006dc8:	4413      	add	r3, r2
 8006dca:	3304      	adds	r3, #4
 8006dcc:	60fb      	str	r3, [r7, #12]
 8006dce:	e00c      	b.n	8006dea <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006dd0:	78fb      	ldrb	r3, [r7, #3]
 8006dd2:	f003 020f 	and.w	r2, r3, #15
 8006dd6:	4613      	mov	r3, r2
 8006dd8:	00db      	lsls	r3, r3, #3
 8006dda:	4413      	add	r3, r2
 8006ddc:	009b      	lsls	r3, r3, #2
 8006dde:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006de2:	687a      	ldr	r2, [r7, #4]
 8006de4:	4413      	add	r3, r2
 8006de6:	3304      	adds	r3, #4
 8006de8:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	68f9      	ldr	r1, [r7, #12]
 8006df0:	4618      	mov	r0, r3
 8006df2:	f003 f991 	bl	800a118 <USB_EPStopXfer>
 8006df6:	4603      	mov	r3, r0
 8006df8:	72fb      	strb	r3, [r7, #11]

  return ret;
 8006dfa:	7afb      	ldrb	r3, [r7, #11]
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3710      	adds	r7, #16
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}

08006e04 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b08a      	sub	sp, #40	@ 0x28
 8006e08:	af02      	add	r7, sp, #8
 8006e0a:	6078      	str	r0, [r7, #4]
 8006e0c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006e18:	683a      	ldr	r2, [r7, #0]
 8006e1a:	4613      	mov	r3, r2
 8006e1c:	00db      	lsls	r3, r3, #3
 8006e1e:	4413      	add	r3, r2
 8006e20:	009b      	lsls	r3, r3, #2
 8006e22:	3310      	adds	r3, #16
 8006e24:	687a      	ldr	r2, [r7, #4]
 8006e26:	4413      	add	r3, r2
 8006e28:	3304      	adds	r3, #4
 8006e2a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	695a      	ldr	r2, [r3, #20]
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	691b      	ldr	r3, [r3, #16]
 8006e34:	429a      	cmp	r2, r3
 8006e36:	d901      	bls.n	8006e3c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006e38:	2301      	movs	r3, #1
 8006e3a:	e06b      	b.n	8006f14 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	691a      	ldr	r2, [r3, #16]
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	695b      	ldr	r3, [r3, #20]
 8006e44:	1ad3      	subs	r3, r2, r3
 8006e46:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	689b      	ldr	r3, [r3, #8]
 8006e4c:	69fa      	ldr	r2, [r7, #28]
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	d902      	bls.n	8006e58 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	689b      	ldr	r3, [r3, #8]
 8006e56:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006e58:	69fb      	ldr	r3, [r7, #28]
 8006e5a:	3303      	adds	r3, #3
 8006e5c:	089b      	lsrs	r3, r3, #2
 8006e5e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006e60:	e02a      	b.n	8006eb8 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	691a      	ldr	r2, [r3, #16]
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	695b      	ldr	r3, [r3, #20]
 8006e6a:	1ad3      	subs	r3, r2, r3
 8006e6c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	689b      	ldr	r3, [r3, #8]
 8006e72:	69fa      	ldr	r2, [r7, #28]
 8006e74:	429a      	cmp	r2, r3
 8006e76:	d902      	bls.n	8006e7e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	689b      	ldr	r3, [r3, #8]
 8006e7c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006e7e:	69fb      	ldr	r3, [r7, #28]
 8006e80:	3303      	adds	r3, #3
 8006e82:	089b      	lsrs	r3, r3, #2
 8006e84:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	68d9      	ldr	r1, [r3, #12]
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	b2da      	uxtb	r2, r3
 8006e8e:	69fb      	ldr	r3, [r7, #28]
 8006e90:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006e96:	9300      	str	r3, [sp, #0]
 8006e98:	4603      	mov	r3, r0
 8006e9a:	6978      	ldr	r0, [r7, #20]
 8006e9c:	f003 f9e6 	bl	800a26c <USB_WritePacket>

    ep->xfer_buff  += len;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	68da      	ldr	r2, [r3, #12]
 8006ea4:	69fb      	ldr	r3, [r7, #28]
 8006ea6:	441a      	add	r2, r3
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	695a      	ldr	r2, [r3, #20]
 8006eb0:	69fb      	ldr	r3, [r7, #28]
 8006eb2:	441a      	add	r2, r3
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	015a      	lsls	r2, r3, #5
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	4413      	add	r3, r2
 8006ec0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ec4:	699b      	ldr	r3, [r3, #24]
 8006ec6:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006ec8:	69ba      	ldr	r2, [r7, #24]
 8006eca:	429a      	cmp	r2, r3
 8006ecc:	d809      	bhi.n	8006ee2 <PCD_WriteEmptyTxFifo+0xde>
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	695a      	ldr	r2, [r3, #20]
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006ed6:	429a      	cmp	r2, r3
 8006ed8:	d203      	bcs.n	8006ee2 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	691b      	ldr	r3, [r3, #16]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d1bf      	bne.n	8006e62 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	691a      	ldr	r2, [r3, #16]
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	695b      	ldr	r3, [r3, #20]
 8006eea:	429a      	cmp	r2, r3
 8006eec:	d811      	bhi.n	8006f12 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	f003 030f 	and.w	r3, r3, #15
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8006efa:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f02:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	43db      	mvns	r3, r3
 8006f08:	6939      	ldr	r1, [r7, #16]
 8006f0a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006f0e:	4013      	ands	r3, r2
 8006f10:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8006f12:	2300      	movs	r3, #0
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3720      	adds	r7, #32
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}

08006f1c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b088      	sub	sp, #32
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
 8006f24:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f2c:	69fb      	ldr	r3, [r7, #28]
 8006f2e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006f30:	69fb      	ldr	r3, [r7, #28]
 8006f32:	333c      	adds	r3, #60	@ 0x3c
 8006f34:	3304      	adds	r3, #4
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	015a      	lsls	r2, r3, #5
 8006f3e:	69bb      	ldr	r3, [r7, #24]
 8006f40:	4413      	add	r3, r2
 8006f42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f46:	689b      	ldr	r3, [r3, #8]
 8006f48:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	799b      	ldrb	r3, [r3, #6]
 8006f4e:	2b01      	cmp	r3, #1
 8006f50:	d17b      	bne.n	800704a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	f003 0308 	and.w	r3, r3, #8
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d015      	beq.n	8006f88 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	4a61      	ldr	r2, [pc, #388]	@ (80070e4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	f240 80b9 	bls.w	80070d8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	f000 80b3 	beq.w	80070d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	015a      	lsls	r2, r3, #5
 8006f76:	69bb      	ldr	r3, [r7, #24]
 8006f78:	4413      	add	r3, r2
 8006f7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f7e:	461a      	mov	r2, r3
 8006f80:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f84:	6093      	str	r3, [r2, #8]
 8006f86:	e0a7      	b.n	80070d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	f003 0320 	and.w	r3, r3, #32
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d009      	beq.n	8006fa6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	015a      	lsls	r2, r3, #5
 8006f96:	69bb      	ldr	r3, [r7, #24]
 8006f98:	4413      	add	r3, r2
 8006f9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f9e:	461a      	mov	r2, r3
 8006fa0:	2320      	movs	r3, #32
 8006fa2:	6093      	str	r3, [r2, #8]
 8006fa4:	e098      	b.n	80070d8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	f040 8093 	bne.w	80070d8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	4a4b      	ldr	r2, [pc, #300]	@ (80070e4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d90f      	bls.n	8006fda <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d00a      	beq.n	8006fda <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	015a      	lsls	r2, r3, #5
 8006fc8:	69bb      	ldr	r3, [r7, #24]
 8006fca:	4413      	add	r3, r2
 8006fcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fd0:	461a      	mov	r2, r3
 8006fd2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006fd6:	6093      	str	r3, [r2, #8]
 8006fd8:	e07e      	b.n	80070d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8006fda:	683a      	ldr	r2, [r7, #0]
 8006fdc:	4613      	mov	r3, r2
 8006fde:	00db      	lsls	r3, r3, #3
 8006fe0:	4413      	add	r3, r2
 8006fe2:	009b      	lsls	r3, r3, #2
 8006fe4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006fe8:	687a      	ldr	r2, [r7, #4]
 8006fea:	4413      	add	r3, r2
 8006fec:	3304      	adds	r3, #4
 8006fee:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	6a1a      	ldr	r2, [r3, #32]
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	0159      	lsls	r1, r3, #5
 8006ff8:	69bb      	ldr	r3, [r7, #24]
 8006ffa:	440b      	add	r3, r1
 8006ffc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007000:	691b      	ldr	r3, [r3, #16]
 8007002:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007006:	1ad2      	subs	r2, r2, r3
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d114      	bne.n	800703c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	691b      	ldr	r3, [r3, #16]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d109      	bne.n	800702e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6818      	ldr	r0, [r3, #0]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007024:	461a      	mov	r2, r3
 8007026:	2101      	movs	r1, #1
 8007028:	f003 fbb6 	bl	800a798 <USB_EP0_OutStart>
 800702c:	e006      	b.n	800703c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	68da      	ldr	r2, [r3, #12]
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	695b      	ldr	r3, [r3, #20]
 8007036:	441a      	add	r2, r3
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	b2db      	uxtb	r3, r3
 8007040:	4619      	mov	r1, r3
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f005 fe1e 	bl	800cc84 <HAL_PCD_DataOutStageCallback>
 8007048:	e046      	b.n	80070d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	4a26      	ldr	r2, [pc, #152]	@ (80070e8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d124      	bne.n	800709c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007058:	2b00      	cmp	r3, #0
 800705a:	d00a      	beq.n	8007072 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	015a      	lsls	r2, r3, #5
 8007060:	69bb      	ldr	r3, [r7, #24]
 8007062:	4413      	add	r3, r2
 8007064:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007068:	461a      	mov	r2, r3
 800706a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800706e:	6093      	str	r3, [r2, #8]
 8007070:	e032      	b.n	80070d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	f003 0320 	and.w	r3, r3, #32
 8007078:	2b00      	cmp	r3, #0
 800707a:	d008      	beq.n	800708e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	015a      	lsls	r2, r3, #5
 8007080:	69bb      	ldr	r3, [r7, #24]
 8007082:	4413      	add	r3, r2
 8007084:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007088:	461a      	mov	r2, r3
 800708a:	2320      	movs	r3, #32
 800708c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	b2db      	uxtb	r3, r3
 8007092:	4619      	mov	r1, r3
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	f005 fdf5 	bl	800cc84 <HAL_PCD_DataOutStageCallback>
 800709a:	e01d      	b.n	80070d8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d114      	bne.n	80070cc <PCD_EP_OutXfrComplete_int+0x1b0>
 80070a2:	6879      	ldr	r1, [r7, #4]
 80070a4:	683a      	ldr	r2, [r7, #0]
 80070a6:	4613      	mov	r3, r2
 80070a8:	00db      	lsls	r3, r3, #3
 80070aa:	4413      	add	r3, r2
 80070ac:	009b      	lsls	r3, r3, #2
 80070ae:	440b      	add	r3, r1
 80070b0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d108      	bne.n	80070cc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6818      	ldr	r0, [r3, #0]
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80070c4:	461a      	mov	r2, r3
 80070c6:	2100      	movs	r1, #0
 80070c8:	f003 fb66 	bl	800a798 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	b2db      	uxtb	r3, r3
 80070d0:	4619      	mov	r1, r3
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f005 fdd6 	bl	800cc84 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80070d8:	2300      	movs	r3, #0
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3720      	adds	r7, #32
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}
 80070e2:	bf00      	nop
 80070e4:	4f54300a 	.word	0x4f54300a
 80070e8:	4f54310a 	.word	0x4f54310a

080070ec <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b086      	sub	sp, #24
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
 80070f4:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	333c      	adds	r3, #60	@ 0x3c
 8007104:	3304      	adds	r3, #4
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	015a      	lsls	r2, r3, #5
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	4413      	add	r3, r2
 8007112:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007116:	689b      	ldr	r3, [r3, #8]
 8007118:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	4a15      	ldr	r2, [pc, #84]	@ (8007174 <PCD_EP_OutSetupPacket_int+0x88>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d90e      	bls.n	8007140 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007128:	2b00      	cmp	r3, #0
 800712a:	d009      	beq.n	8007140 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	015a      	lsls	r2, r3, #5
 8007130:	693b      	ldr	r3, [r7, #16]
 8007132:	4413      	add	r3, r2
 8007134:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007138:	461a      	mov	r2, r3
 800713a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800713e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f005 fd8d 	bl	800cc60 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	4a0a      	ldr	r2, [pc, #40]	@ (8007174 <PCD_EP_OutSetupPacket_int+0x88>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d90c      	bls.n	8007168 <PCD_EP_OutSetupPacket_int+0x7c>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	799b      	ldrb	r3, [r3, #6]
 8007152:	2b01      	cmp	r3, #1
 8007154:	d108      	bne.n	8007168 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6818      	ldr	r0, [r3, #0]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007160:	461a      	mov	r2, r3
 8007162:	2101      	movs	r1, #1
 8007164:	f003 fb18 	bl	800a798 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007168:	2300      	movs	r3, #0
}
 800716a:	4618      	mov	r0, r3
 800716c:	3718      	adds	r7, #24
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}
 8007172:	bf00      	nop
 8007174:	4f54300a 	.word	0x4f54300a

08007178 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007178:	b480      	push	{r7}
 800717a:	b085      	sub	sp, #20
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
 8007180:	460b      	mov	r3, r1
 8007182:	70fb      	strb	r3, [r7, #3]
 8007184:	4613      	mov	r3, r2
 8007186:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800718e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007190:	78fb      	ldrb	r3, [r7, #3]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d107      	bne.n	80071a6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007196:	883b      	ldrh	r3, [r7, #0]
 8007198:	0419      	lsls	r1, r3, #16
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	68ba      	ldr	r2, [r7, #8]
 80071a0:	430a      	orrs	r2, r1
 80071a2:	629a      	str	r2, [r3, #40]	@ 0x28
 80071a4:	e028      	b.n	80071f8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071ac:	0c1b      	lsrs	r3, r3, #16
 80071ae:	68ba      	ldr	r2, [r7, #8]
 80071b0:	4413      	add	r3, r2
 80071b2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80071b4:	2300      	movs	r3, #0
 80071b6:	73fb      	strb	r3, [r7, #15]
 80071b8:	e00d      	b.n	80071d6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681a      	ldr	r2, [r3, #0]
 80071be:	7bfb      	ldrb	r3, [r7, #15]
 80071c0:	3340      	adds	r3, #64	@ 0x40
 80071c2:	009b      	lsls	r3, r3, #2
 80071c4:	4413      	add	r3, r2
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	0c1b      	lsrs	r3, r3, #16
 80071ca:	68ba      	ldr	r2, [r7, #8]
 80071cc:	4413      	add	r3, r2
 80071ce:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80071d0:	7bfb      	ldrb	r3, [r7, #15]
 80071d2:	3301      	adds	r3, #1
 80071d4:	73fb      	strb	r3, [r7, #15]
 80071d6:	7bfa      	ldrb	r2, [r7, #15]
 80071d8:	78fb      	ldrb	r3, [r7, #3]
 80071da:	3b01      	subs	r3, #1
 80071dc:	429a      	cmp	r2, r3
 80071de:	d3ec      	bcc.n	80071ba <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80071e0:	883b      	ldrh	r3, [r7, #0]
 80071e2:	0418      	lsls	r0, r3, #16
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6819      	ldr	r1, [r3, #0]
 80071e8:	78fb      	ldrb	r3, [r7, #3]
 80071ea:	3b01      	subs	r3, #1
 80071ec:	68ba      	ldr	r2, [r7, #8]
 80071ee:	4302      	orrs	r2, r0
 80071f0:	3340      	adds	r3, #64	@ 0x40
 80071f2:	009b      	lsls	r3, r3, #2
 80071f4:	440b      	add	r3, r1
 80071f6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80071f8:	2300      	movs	r3, #0
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3714      	adds	r7, #20
 80071fe:	46bd      	mov	sp, r7
 8007200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007204:	4770      	bx	lr

08007206 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8007206:	b480      	push	{r7}
 8007208:	b083      	sub	sp, #12
 800720a:	af00      	add	r7, sp, #0
 800720c:	6078      	str	r0, [r7, #4]
 800720e:	460b      	mov	r3, r1
 8007210:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	887a      	ldrh	r2, [r7, #2]
 8007218:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800721a:	2300      	movs	r3, #0
}
 800721c:	4618      	mov	r0, r3
 800721e:	370c      	adds	r7, #12
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr

08007228 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007228:	b480      	push	{r7}
 800722a:	b083      	sub	sp, #12
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
 8007230:	460b      	mov	r3, r1
 8007232:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007234:	bf00      	nop
 8007236:	370c      	adds	r7, #12
 8007238:	46bd      	mov	sp, r7
 800723a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723e:	4770      	bx	lr

08007240 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b086      	sub	sp, #24
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d101      	bne.n	8007252 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800724e:	2301      	movs	r3, #1
 8007250:	e267      	b.n	8007722 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f003 0301 	and.w	r3, r3, #1
 800725a:	2b00      	cmp	r3, #0
 800725c:	d075      	beq.n	800734a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800725e:	4b88      	ldr	r3, [pc, #544]	@ (8007480 <HAL_RCC_OscConfig+0x240>)
 8007260:	689b      	ldr	r3, [r3, #8]
 8007262:	f003 030c 	and.w	r3, r3, #12
 8007266:	2b04      	cmp	r3, #4
 8007268:	d00c      	beq.n	8007284 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800726a:	4b85      	ldr	r3, [pc, #532]	@ (8007480 <HAL_RCC_OscConfig+0x240>)
 800726c:	689b      	ldr	r3, [r3, #8]
 800726e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007272:	2b08      	cmp	r3, #8
 8007274:	d112      	bne.n	800729c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007276:	4b82      	ldr	r3, [pc, #520]	@ (8007480 <HAL_RCC_OscConfig+0x240>)
 8007278:	685b      	ldr	r3, [r3, #4]
 800727a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800727e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007282:	d10b      	bne.n	800729c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007284:	4b7e      	ldr	r3, [pc, #504]	@ (8007480 <HAL_RCC_OscConfig+0x240>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800728c:	2b00      	cmp	r3, #0
 800728e:	d05b      	beq.n	8007348 <HAL_RCC_OscConfig+0x108>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	685b      	ldr	r3, [r3, #4]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d157      	bne.n	8007348 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007298:	2301      	movs	r3, #1
 800729a:	e242      	b.n	8007722 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	685b      	ldr	r3, [r3, #4]
 80072a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80072a4:	d106      	bne.n	80072b4 <HAL_RCC_OscConfig+0x74>
 80072a6:	4b76      	ldr	r3, [pc, #472]	@ (8007480 <HAL_RCC_OscConfig+0x240>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a75      	ldr	r2, [pc, #468]	@ (8007480 <HAL_RCC_OscConfig+0x240>)
 80072ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80072b0:	6013      	str	r3, [r2, #0]
 80072b2:	e01d      	b.n	80072f0 <HAL_RCC_OscConfig+0xb0>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	685b      	ldr	r3, [r3, #4]
 80072b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80072bc:	d10c      	bne.n	80072d8 <HAL_RCC_OscConfig+0x98>
 80072be:	4b70      	ldr	r3, [pc, #448]	@ (8007480 <HAL_RCC_OscConfig+0x240>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4a6f      	ldr	r2, [pc, #444]	@ (8007480 <HAL_RCC_OscConfig+0x240>)
 80072c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80072c8:	6013      	str	r3, [r2, #0]
 80072ca:	4b6d      	ldr	r3, [pc, #436]	@ (8007480 <HAL_RCC_OscConfig+0x240>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4a6c      	ldr	r2, [pc, #432]	@ (8007480 <HAL_RCC_OscConfig+0x240>)
 80072d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80072d4:	6013      	str	r3, [r2, #0]
 80072d6:	e00b      	b.n	80072f0 <HAL_RCC_OscConfig+0xb0>
 80072d8:	4b69      	ldr	r3, [pc, #420]	@ (8007480 <HAL_RCC_OscConfig+0x240>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4a68      	ldr	r2, [pc, #416]	@ (8007480 <HAL_RCC_OscConfig+0x240>)
 80072de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80072e2:	6013      	str	r3, [r2, #0]
 80072e4:	4b66      	ldr	r3, [pc, #408]	@ (8007480 <HAL_RCC_OscConfig+0x240>)
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a65      	ldr	r2, [pc, #404]	@ (8007480 <HAL_RCC_OscConfig+0x240>)
 80072ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80072ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	685b      	ldr	r3, [r3, #4]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d013      	beq.n	8007320 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072f8:	f7fb fca2 	bl	8002c40 <HAL_GetTick>
 80072fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80072fe:	e008      	b.n	8007312 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007300:	f7fb fc9e 	bl	8002c40 <HAL_GetTick>
 8007304:	4602      	mov	r2, r0
 8007306:	693b      	ldr	r3, [r7, #16]
 8007308:	1ad3      	subs	r3, r2, r3
 800730a:	2b64      	cmp	r3, #100	@ 0x64
 800730c:	d901      	bls.n	8007312 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800730e:	2303      	movs	r3, #3
 8007310:	e207      	b.n	8007722 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007312:	4b5b      	ldr	r3, [pc, #364]	@ (8007480 <HAL_RCC_OscConfig+0x240>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800731a:	2b00      	cmp	r3, #0
 800731c:	d0f0      	beq.n	8007300 <HAL_RCC_OscConfig+0xc0>
 800731e:	e014      	b.n	800734a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007320:	f7fb fc8e 	bl	8002c40 <HAL_GetTick>
 8007324:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007326:	e008      	b.n	800733a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007328:	f7fb fc8a 	bl	8002c40 <HAL_GetTick>
 800732c:	4602      	mov	r2, r0
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	1ad3      	subs	r3, r2, r3
 8007332:	2b64      	cmp	r3, #100	@ 0x64
 8007334:	d901      	bls.n	800733a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007336:	2303      	movs	r3, #3
 8007338:	e1f3      	b.n	8007722 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800733a:	4b51      	ldr	r3, [pc, #324]	@ (8007480 <HAL_RCC_OscConfig+0x240>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007342:	2b00      	cmp	r3, #0
 8007344:	d1f0      	bne.n	8007328 <HAL_RCC_OscConfig+0xe8>
 8007346:	e000      	b.n	800734a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007348:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f003 0302 	and.w	r3, r3, #2
 8007352:	2b00      	cmp	r3, #0
 8007354:	d063      	beq.n	800741e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007356:	4b4a      	ldr	r3, [pc, #296]	@ (8007480 <HAL_RCC_OscConfig+0x240>)
 8007358:	689b      	ldr	r3, [r3, #8]
 800735a:	f003 030c 	and.w	r3, r3, #12
 800735e:	2b00      	cmp	r3, #0
 8007360:	d00b      	beq.n	800737a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007362:	4b47      	ldr	r3, [pc, #284]	@ (8007480 <HAL_RCC_OscConfig+0x240>)
 8007364:	689b      	ldr	r3, [r3, #8]
 8007366:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800736a:	2b08      	cmp	r3, #8
 800736c:	d11c      	bne.n	80073a8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800736e:	4b44      	ldr	r3, [pc, #272]	@ (8007480 <HAL_RCC_OscConfig+0x240>)
 8007370:	685b      	ldr	r3, [r3, #4]
 8007372:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007376:	2b00      	cmp	r3, #0
 8007378:	d116      	bne.n	80073a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800737a:	4b41      	ldr	r3, [pc, #260]	@ (8007480 <HAL_RCC_OscConfig+0x240>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f003 0302 	and.w	r3, r3, #2
 8007382:	2b00      	cmp	r3, #0
 8007384:	d005      	beq.n	8007392 <HAL_RCC_OscConfig+0x152>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	68db      	ldr	r3, [r3, #12]
 800738a:	2b01      	cmp	r3, #1
 800738c:	d001      	beq.n	8007392 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800738e:	2301      	movs	r3, #1
 8007390:	e1c7      	b.n	8007722 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007392:	4b3b      	ldr	r3, [pc, #236]	@ (8007480 <HAL_RCC_OscConfig+0x240>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	691b      	ldr	r3, [r3, #16]
 800739e:	00db      	lsls	r3, r3, #3
 80073a0:	4937      	ldr	r1, [pc, #220]	@ (8007480 <HAL_RCC_OscConfig+0x240>)
 80073a2:	4313      	orrs	r3, r2
 80073a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80073a6:	e03a      	b.n	800741e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	68db      	ldr	r3, [r3, #12]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d020      	beq.n	80073f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80073b0:	4b34      	ldr	r3, [pc, #208]	@ (8007484 <HAL_RCC_OscConfig+0x244>)
 80073b2:	2201      	movs	r2, #1
 80073b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073b6:	f7fb fc43 	bl	8002c40 <HAL_GetTick>
 80073ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80073bc:	e008      	b.n	80073d0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80073be:	f7fb fc3f 	bl	8002c40 <HAL_GetTick>
 80073c2:	4602      	mov	r2, r0
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	1ad3      	subs	r3, r2, r3
 80073c8:	2b02      	cmp	r3, #2
 80073ca:	d901      	bls.n	80073d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80073cc:	2303      	movs	r3, #3
 80073ce:	e1a8      	b.n	8007722 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80073d0:	4b2b      	ldr	r3, [pc, #172]	@ (8007480 <HAL_RCC_OscConfig+0x240>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f003 0302 	and.w	r3, r3, #2
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d0f0      	beq.n	80073be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80073dc:	4b28      	ldr	r3, [pc, #160]	@ (8007480 <HAL_RCC_OscConfig+0x240>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	691b      	ldr	r3, [r3, #16]
 80073e8:	00db      	lsls	r3, r3, #3
 80073ea:	4925      	ldr	r1, [pc, #148]	@ (8007480 <HAL_RCC_OscConfig+0x240>)
 80073ec:	4313      	orrs	r3, r2
 80073ee:	600b      	str	r3, [r1, #0]
 80073f0:	e015      	b.n	800741e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80073f2:	4b24      	ldr	r3, [pc, #144]	@ (8007484 <HAL_RCC_OscConfig+0x244>)
 80073f4:	2200      	movs	r2, #0
 80073f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073f8:	f7fb fc22 	bl	8002c40 <HAL_GetTick>
 80073fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80073fe:	e008      	b.n	8007412 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007400:	f7fb fc1e 	bl	8002c40 <HAL_GetTick>
 8007404:	4602      	mov	r2, r0
 8007406:	693b      	ldr	r3, [r7, #16]
 8007408:	1ad3      	subs	r3, r2, r3
 800740a:	2b02      	cmp	r3, #2
 800740c:	d901      	bls.n	8007412 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800740e:	2303      	movs	r3, #3
 8007410:	e187      	b.n	8007722 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007412:	4b1b      	ldr	r3, [pc, #108]	@ (8007480 <HAL_RCC_OscConfig+0x240>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f003 0302 	and.w	r3, r3, #2
 800741a:	2b00      	cmp	r3, #0
 800741c:	d1f0      	bne.n	8007400 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f003 0308 	and.w	r3, r3, #8
 8007426:	2b00      	cmp	r3, #0
 8007428:	d036      	beq.n	8007498 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	695b      	ldr	r3, [r3, #20]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d016      	beq.n	8007460 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007432:	4b15      	ldr	r3, [pc, #84]	@ (8007488 <HAL_RCC_OscConfig+0x248>)
 8007434:	2201      	movs	r2, #1
 8007436:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007438:	f7fb fc02 	bl	8002c40 <HAL_GetTick>
 800743c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800743e:	e008      	b.n	8007452 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007440:	f7fb fbfe 	bl	8002c40 <HAL_GetTick>
 8007444:	4602      	mov	r2, r0
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	1ad3      	subs	r3, r2, r3
 800744a:	2b02      	cmp	r3, #2
 800744c:	d901      	bls.n	8007452 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800744e:	2303      	movs	r3, #3
 8007450:	e167      	b.n	8007722 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007452:	4b0b      	ldr	r3, [pc, #44]	@ (8007480 <HAL_RCC_OscConfig+0x240>)
 8007454:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007456:	f003 0302 	and.w	r3, r3, #2
 800745a:	2b00      	cmp	r3, #0
 800745c:	d0f0      	beq.n	8007440 <HAL_RCC_OscConfig+0x200>
 800745e:	e01b      	b.n	8007498 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007460:	4b09      	ldr	r3, [pc, #36]	@ (8007488 <HAL_RCC_OscConfig+0x248>)
 8007462:	2200      	movs	r2, #0
 8007464:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007466:	f7fb fbeb 	bl	8002c40 <HAL_GetTick>
 800746a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800746c:	e00e      	b.n	800748c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800746e:	f7fb fbe7 	bl	8002c40 <HAL_GetTick>
 8007472:	4602      	mov	r2, r0
 8007474:	693b      	ldr	r3, [r7, #16]
 8007476:	1ad3      	subs	r3, r2, r3
 8007478:	2b02      	cmp	r3, #2
 800747a:	d907      	bls.n	800748c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800747c:	2303      	movs	r3, #3
 800747e:	e150      	b.n	8007722 <HAL_RCC_OscConfig+0x4e2>
 8007480:	40023800 	.word	0x40023800
 8007484:	42470000 	.word	0x42470000
 8007488:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800748c:	4b88      	ldr	r3, [pc, #544]	@ (80076b0 <HAL_RCC_OscConfig+0x470>)
 800748e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007490:	f003 0302 	and.w	r3, r3, #2
 8007494:	2b00      	cmp	r3, #0
 8007496:	d1ea      	bne.n	800746e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f003 0304 	and.w	r3, r3, #4
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	f000 8097 	beq.w	80075d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80074a6:	2300      	movs	r3, #0
 80074a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80074aa:	4b81      	ldr	r3, [pc, #516]	@ (80076b0 <HAL_RCC_OscConfig+0x470>)
 80074ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d10f      	bne.n	80074d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80074b6:	2300      	movs	r3, #0
 80074b8:	60bb      	str	r3, [r7, #8]
 80074ba:	4b7d      	ldr	r3, [pc, #500]	@ (80076b0 <HAL_RCC_OscConfig+0x470>)
 80074bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074be:	4a7c      	ldr	r2, [pc, #496]	@ (80076b0 <HAL_RCC_OscConfig+0x470>)
 80074c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80074c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80074c6:	4b7a      	ldr	r3, [pc, #488]	@ (80076b0 <HAL_RCC_OscConfig+0x470>)
 80074c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80074ce:	60bb      	str	r3, [r7, #8]
 80074d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80074d2:	2301      	movs	r3, #1
 80074d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80074d6:	4b77      	ldr	r3, [pc, #476]	@ (80076b4 <HAL_RCC_OscConfig+0x474>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d118      	bne.n	8007514 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80074e2:	4b74      	ldr	r3, [pc, #464]	@ (80076b4 <HAL_RCC_OscConfig+0x474>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4a73      	ldr	r2, [pc, #460]	@ (80076b4 <HAL_RCC_OscConfig+0x474>)
 80074e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80074ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80074ee:	f7fb fba7 	bl	8002c40 <HAL_GetTick>
 80074f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80074f4:	e008      	b.n	8007508 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80074f6:	f7fb fba3 	bl	8002c40 <HAL_GetTick>
 80074fa:	4602      	mov	r2, r0
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	1ad3      	subs	r3, r2, r3
 8007500:	2b02      	cmp	r3, #2
 8007502:	d901      	bls.n	8007508 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007504:	2303      	movs	r3, #3
 8007506:	e10c      	b.n	8007722 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007508:	4b6a      	ldr	r3, [pc, #424]	@ (80076b4 <HAL_RCC_OscConfig+0x474>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007510:	2b00      	cmp	r3, #0
 8007512:	d0f0      	beq.n	80074f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	689b      	ldr	r3, [r3, #8]
 8007518:	2b01      	cmp	r3, #1
 800751a:	d106      	bne.n	800752a <HAL_RCC_OscConfig+0x2ea>
 800751c:	4b64      	ldr	r3, [pc, #400]	@ (80076b0 <HAL_RCC_OscConfig+0x470>)
 800751e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007520:	4a63      	ldr	r2, [pc, #396]	@ (80076b0 <HAL_RCC_OscConfig+0x470>)
 8007522:	f043 0301 	orr.w	r3, r3, #1
 8007526:	6713      	str	r3, [r2, #112]	@ 0x70
 8007528:	e01c      	b.n	8007564 <HAL_RCC_OscConfig+0x324>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	689b      	ldr	r3, [r3, #8]
 800752e:	2b05      	cmp	r3, #5
 8007530:	d10c      	bne.n	800754c <HAL_RCC_OscConfig+0x30c>
 8007532:	4b5f      	ldr	r3, [pc, #380]	@ (80076b0 <HAL_RCC_OscConfig+0x470>)
 8007534:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007536:	4a5e      	ldr	r2, [pc, #376]	@ (80076b0 <HAL_RCC_OscConfig+0x470>)
 8007538:	f043 0304 	orr.w	r3, r3, #4
 800753c:	6713      	str	r3, [r2, #112]	@ 0x70
 800753e:	4b5c      	ldr	r3, [pc, #368]	@ (80076b0 <HAL_RCC_OscConfig+0x470>)
 8007540:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007542:	4a5b      	ldr	r2, [pc, #364]	@ (80076b0 <HAL_RCC_OscConfig+0x470>)
 8007544:	f043 0301 	orr.w	r3, r3, #1
 8007548:	6713      	str	r3, [r2, #112]	@ 0x70
 800754a:	e00b      	b.n	8007564 <HAL_RCC_OscConfig+0x324>
 800754c:	4b58      	ldr	r3, [pc, #352]	@ (80076b0 <HAL_RCC_OscConfig+0x470>)
 800754e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007550:	4a57      	ldr	r2, [pc, #348]	@ (80076b0 <HAL_RCC_OscConfig+0x470>)
 8007552:	f023 0301 	bic.w	r3, r3, #1
 8007556:	6713      	str	r3, [r2, #112]	@ 0x70
 8007558:	4b55      	ldr	r3, [pc, #340]	@ (80076b0 <HAL_RCC_OscConfig+0x470>)
 800755a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800755c:	4a54      	ldr	r2, [pc, #336]	@ (80076b0 <HAL_RCC_OscConfig+0x470>)
 800755e:	f023 0304 	bic.w	r3, r3, #4
 8007562:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	689b      	ldr	r3, [r3, #8]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d015      	beq.n	8007598 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800756c:	f7fb fb68 	bl	8002c40 <HAL_GetTick>
 8007570:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007572:	e00a      	b.n	800758a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007574:	f7fb fb64 	bl	8002c40 <HAL_GetTick>
 8007578:	4602      	mov	r2, r0
 800757a:	693b      	ldr	r3, [r7, #16]
 800757c:	1ad3      	subs	r3, r2, r3
 800757e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007582:	4293      	cmp	r3, r2
 8007584:	d901      	bls.n	800758a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007586:	2303      	movs	r3, #3
 8007588:	e0cb      	b.n	8007722 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800758a:	4b49      	ldr	r3, [pc, #292]	@ (80076b0 <HAL_RCC_OscConfig+0x470>)
 800758c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800758e:	f003 0302 	and.w	r3, r3, #2
 8007592:	2b00      	cmp	r3, #0
 8007594:	d0ee      	beq.n	8007574 <HAL_RCC_OscConfig+0x334>
 8007596:	e014      	b.n	80075c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007598:	f7fb fb52 	bl	8002c40 <HAL_GetTick>
 800759c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800759e:	e00a      	b.n	80075b6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80075a0:	f7fb fb4e 	bl	8002c40 <HAL_GetTick>
 80075a4:	4602      	mov	r2, r0
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	1ad3      	subs	r3, r2, r3
 80075aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d901      	bls.n	80075b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80075b2:	2303      	movs	r3, #3
 80075b4:	e0b5      	b.n	8007722 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80075b6:	4b3e      	ldr	r3, [pc, #248]	@ (80076b0 <HAL_RCC_OscConfig+0x470>)
 80075b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075ba:	f003 0302 	and.w	r3, r3, #2
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d1ee      	bne.n	80075a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80075c2:	7dfb      	ldrb	r3, [r7, #23]
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	d105      	bne.n	80075d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80075c8:	4b39      	ldr	r3, [pc, #228]	@ (80076b0 <HAL_RCC_OscConfig+0x470>)
 80075ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075cc:	4a38      	ldr	r2, [pc, #224]	@ (80076b0 <HAL_RCC_OscConfig+0x470>)
 80075ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80075d2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	699b      	ldr	r3, [r3, #24]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	f000 80a1 	beq.w	8007720 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80075de:	4b34      	ldr	r3, [pc, #208]	@ (80076b0 <HAL_RCC_OscConfig+0x470>)
 80075e0:	689b      	ldr	r3, [r3, #8]
 80075e2:	f003 030c 	and.w	r3, r3, #12
 80075e6:	2b08      	cmp	r3, #8
 80075e8:	d05c      	beq.n	80076a4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	699b      	ldr	r3, [r3, #24]
 80075ee:	2b02      	cmp	r3, #2
 80075f0:	d141      	bne.n	8007676 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80075f2:	4b31      	ldr	r3, [pc, #196]	@ (80076b8 <HAL_RCC_OscConfig+0x478>)
 80075f4:	2200      	movs	r2, #0
 80075f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075f8:	f7fb fb22 	bl	8002c40 <HAL_GetTick>
 80075fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80075fe:	e008      	b.n	8007612 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007600:	f7fb fb1e 	bl	8002c40 <HAL_GetTick>
 8007604:	4602      	mov	r2, r0
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	1ad3      	subs	r3, r2, r3
 800760a:	2b02      	cmp	r3, #2
 800760c:	d901      	bls.n	8007612 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800760e:	2303      	movs	r3, #3
 8007610:	e087      	b.n	8007722 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007612:	4b27      	ldr	r3, [pc, #156]	@ (80076b0 <HAL_RCC_OscConfig+0x470>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800761a:	2b00      	cmp	r3, #0
 800761c:	d1f0      	bne.n	8007600 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	69da      	ldr	r2, [r3, #28]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6a1b      	ldr	r3, [r3, #32]
 8007626:	431a      	orrs	r2, r3
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800762c:	019b      	lsls	r3, r3, #6
 800762e:	431a      	orrs	r2, r3
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007634:	085b      	lsrs	r3, r3, #1
 8007636:	3b01      	subs	r3, #1
 8007638:	041b      	lsls	r3, r3, #16
 800763a:	431a      	orrs	r2, r3
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007640:	061b      	lsls	r3, r3, #24
 8007642:	491b      	ldr	r1, [pc, #108]	@ (80076b0 <HAL_RCC_OscConfig+0x470>)
 8007644:	4313      	orrs	r3, r2
 8007646:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007648:	4b1b      	ldr	r3, [pc, #108]	@ (80076b8 <HAL_RCC_OscConfig+0x478>)
 800764a:	2201      	movs	r2, #1
 800764c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800764e:	f7fb faf7 	bl	8002c40 <HAL_GetTick>
 8007652:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007654:	e008      	b.n	8007668 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007656:	f7fb faf3 	bl	8002c40 <HAL_GetTick>
 800765a:	4602      	mov	r2, r0
 800765c:	693b      	ldr	r3, [r7, #16]
 800765e:	1ad3      	subs	r3, r2, r3
 8007660:	2b02      	cmp	r3, #2
 8007662:	d901      	bls.n	8007668 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007664:	2303      	movs	r3, #3
 8007666:	e05c      	b.n	8007722 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007668:	4b11      	ldr	r3, [pc, #68]	@ (80076b0 <HAL_RCC_OscConfig+0x470>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007670:	2b00      	cmp	r3, #0
 8007672:	d0f0      	beq.n	8007656 <HAL_RCC_OscConfig+0x416>
 8007674:	e054      	b.n	8007720 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007676:	4b10      	ldr	r3, [pc, #64]	@ (80076b8 <HAL_RCC_OscConfig+0x478>)
 8007678:	2200      	movs	r2, #0
 800767a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800767c:	f7fb fae0 	bl	8002c40 <HAL_GetTick>
 8007680:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007682:	e008      	b.n	8007696 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007684:	f7fb fadc 	bl	8002c40 <HAL_GetTick>
 8007688:	4602      	mov	r2, r0
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	1ad3      	subs	r3, r2, r3
 800768e:	2b02      	cmp	r3, #2
 8007690:	d901      	bls.n	8007696 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007692:	2303      	movs	r3, #3
 8007694:	e045      	b.n	8007722 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007696:	4b06      	ldr	r3, [pc, #24]	@ (80076b0 <HAL_RCC_OscConfig+0x470>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d1f0      	bne.n	8007684 <HAL_RCC_OscConfig+0x444>
 80076a2:	e03d      	b.n	8007720 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	699b      	ldr	r3, [r3, #24]
 80076a8:	2b01      	cmp	r3, #1
 80076aa:	d107      	bne.n	80076bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80076ac:	2301      	movs	r3, #1
 80076ae:	e038      	b.n	8007722 <HAL_RCC_OscConfig+0x4e2>
 80076b0:	40023800 	.word	0x40023800
 80076b4:	40007000 	.word	0x40007000
 80076b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80076bc:	4b1b      	ldr	r3, [pc, #108]	@ (800772c <HAL_RCC_OscConfig+0x4ec>)
 80076be:	685b      	ldr	r3, [r3, #4]
 80076c0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	699b      	ldr	r3, [r3, #24]
 80076c6:	2b01      	cmp	r3, #1
 80076c8:	d028      	beq.n	800771c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80076d4:	429a      	cmp	r2, r3
 80076d6:	d121      	bne.n	800771c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80076e2:	429a      	cmp	r2, r3
 80076e4:	d11a      	bne.n	800771c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80076e6:	68fa      	ldr	r2, [r7, #12]
 80076e8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80076ec:	4013      	ands	r3, r2
 80076ee:	687a      	ldr	r2, [r7, #4]
 80076f0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80076f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d111      	bne.n	800771c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007702:	085b      	lsrs	r3, r3, #1
 8007704:	3b01      	subs	r3, #1
 8007706:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007708:	429a      	cmp	r2, r3
 800770a:	d107      	bne.n	800771c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007716:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007718:	429a      	cmp	r2, r3
 800771a:	d001      	beq.n	8007720 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800771c:	2301      	movs	r3, #1
 800771e:	e000      	b.n	8007722 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007720:	2300      	movs	r3, #0
}
 8007722:	4618      	mov	r0, r3
 8007724:	3718      	adds	r7, #24
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}
 800772a:	bf00      	nop
 800772c:	40023800 	.word	0x40023800

08007730 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b084      	sub	sp, #16
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
 8007738:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d101      	bne.n	8007744 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007740:	2301      	movs	r3, #1
 8007742:	e0cc      	b.n	80078de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007744:	4b68      	ldr	r3, [pc, #416]	@ (80078e8 <HAL_RCC_ClockConfig+0x1b8>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f003 0307 	and.w	r3, r3, #7
 800774c:	683a      	ldr	r2, [r7, #0]
 800774e:	429a      	cmp	r2, r3
 8007750:	d90c      	bls.n	800776c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007752:	4b65      	ldr	r3, [pc, #404]	@ (80078e8 <HAL_RCC_ClockConfig+0x1b8>)
 8007754:	683a      	ldr	r2, [r7, #0]
 8007756:	b2d2      	uxtb	r2, r2
 8007758:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800775a:	4b63      	ldr	r3, [pc, #396]	@ (80078e8 <HAL_RCC_ClockConfig+0x1b8>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f003 0307 	and.w	r3, r3, #7
 8007762:	683a      	ldr	r2, [r7, #0]
 8007764:	429a      	cmp	r2, r3
 8007766:	d001      	beq.n	800776c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007768:	2301      	movs	r3, #1
 800776a:	e0b8      	b.n	80078de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f003 0302 	and.w	r3, r3, #2
 8007774:	2b00      	cmp	r3, #0
 8007776:	d020      	beq.n	80077ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f003 0304 	and.w	r3, r3, #4
 8007780:	2b00      	cmp	r3, #0
 8007782:	d005      	beq.n	8007790 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007784:	4b59      	ldr	r3, [pc, #356]	@ (80078ec <HAL_RCC_ClockConfig+0x1bc>)
 8007786:	689b      	ldr	r3, [r3, #8]
 8007788:	4a58      	ldr	r2, [pc, #352]	@ (80078ec <HAL_RCC_ClockConfig+0x1bc>)
 800778a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800778e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f003 0308 	and.w	r3, r3, #8
 8007798:	2b00      	cmp	r3, #0
 800779a:	d005      	beq.n	80077a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800779c:	4b53      	ldr	r3, [pc, #332]	@ (80078ec <HAL_RCC_ClockConfig+0x1bc>)
 800779e:	689b      	ldr	r3, [r3, #8]
 80077a0:	4a52      	ldr	r2, [pc, #328]	@ (80078ec <HAL_RCC_ClockConfig+0x1bc>)
 80077a2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80077a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80077a8:	4b50      	ldr	r3, [pc, #320]	@ (80078ec <HAL_RCC_ClockConfig+0x1bc>)
 80077aa:	689b      	ldr	r3, [r3, #8]
 80077ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	689b      	ldr	r3, [r3, #8]
 80077b4:	494d      	ldr	r1, [pc, #308]	@ (80078ec <HAL_RCC_ClockConfig+0x1bc>)
 80077b6:	4313      	orrs	r3, r2
 80077b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f003 0301 	and.w	r3, r3, #1
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d044      	beq.n	8007850 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	685b      	ldr	r3, [r3, #4]
 80077ca:	2b01      	cmp	r3, #1
 80077cc:	d107      	bne.n	80077de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80077ce:	4b47      	ldr	r3, [pc, #284]	@ (80078ec <HAL_RCC_ClockConfig+0x1bc>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d119      	bne.n	800780e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80077da:	2301      	movs	r3, #1
 80077dc:	e07f      	b.n	80078de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	685b      	ldr	r3, [r3, #4]
 80077e2:	2b02      	cmp	r3, #2
 80077e4:	d003      	beq.n	80077ee <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80077ea:	2b03      	cmp	r3, #3
 80077ec:	d107      	bne.n	80077fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80077ee:	4b3f      	ldr	r3, [pc, #252]	@ (80078ec <HAL_RCC_ClockConfig+0x1bc>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d109      	bne.n	800780e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80077fa:	2301      	movs	r3, #1
 80077fc:	e06f      	b.n	80078de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80077fe:	4b3b      	ldr	r3, [pc, #236]	@ (80078ec <HAL_RCC_ClockConfig+0x1bc>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f003 0302 	and.w	r3, r3, #2
 8007806:	2b00      	cmp	r3, #0
 8007808:	d101      	bne.n	800780e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800780a:	2301      	movs	r3, #1
 800780c:	e067      	b.n	80078de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800780e:	4b37      	ldr	r3, [pc, #220]	@ (80078ec <HAL_RCC_ClockConfig+0x1bc>)
 8007810:	689b      	ldr	r3, [r3, #8]
 8007812:	f023 0203 	bic.w	r2, r3, #3
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	685b      	ldr	r3, [r3, #4]
 800781a:	4934      	ldr	r1, [pc, #208]	@ (80078ec <HAL_RCC_ClockConfig+0x1bc>)
 800781c:	4313      	orrs	r3, r2
 800781e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007820:	f7fb fa0e 	bl	8002c40 <HAL_GetTick>
 8007824:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007826:	e00a      	b.n	800783e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007828:	f7fb fa0a 	bl	8002c40 <HAL_GetTick>
 800782c:	4602      	mov	r2, r0
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	1ad3      	subs	r3, r2, r3
 8007832:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007836:	4293      	cmp	r3, r2
 8007838:	d901      	bls.n	800783e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800783a:	2303      	movs	r3, #3
 800783c:	e04f      	b.n	80078de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800783e:	4b2b      	ldr	r3, [pc, #172]	@ (80078ec <HAL_RCC_ClockConfig+0x1bc>)
 8007840:	689b      	ldr	r3, [r3, #8]
 8007842:	f003 020c 	and.w	r2, r3, #12
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	685b      	ldr	r3, [r3, #4]
 800784a:	009b      	lsls	r3, r3, #2
 800784c:	429a      	cmp	r2, r3
 800784e:	d1eb      	bne.n	8007828 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007850:	4b25      	ldr	r3, [pc, #148]	@ (80078e8 <HAL_RCC_ClockConfig+0x1b8>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f003 0307 	and.w	r3, r3, #7
 8007858:	683a      	ldr	r2, [r7, #0]
 800785a:	429a      	cmp	r2, r3
 800785c:	d20c      	bcs.n	8007878 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800785e:	4b22      	ldr	r3, [pc, #136]	@ (80078e8 <HAL_RCC_ClockConfig+0x1b8>)
 8007860:	683a      	ldr	r2, [r7, #0]
 8007862:	b2d2      	uxtb	r2, r2
 8007864:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007866:	4b20      	ldr	r3, [pc, #128]	@ (80078e8 <HAL_RCC_ClockConfig+0x1b8>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f003 0307 	and.w	r3, r3, #7
 800786e:	683a      	ldr	r2, [r7, #0]
 8007870:	429a      	cmp	r2, r3
 8007872:	d001      	beq.n	8007878 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007874:	2301      	movs	r3, #1
 8007876:	e032      	b.n	80078de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f003 0304 	and.w	r3, r3, #4
 8007880:	2b00      	cmp	r3, #0
 8007882:	d008      	beq.n	8007896 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007884:	4b19      	ldr	r3, [pc, #100]	@ (80078ec <HAL_RCC_ClockConfig+0x1bc>)
 8007886:	689b      	ldr	r3, [r3, #8]
 8007888:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	68db      	ldr	r3, [r3, #12]
 8007890:	4916      	ldr	r1, [pc, #88]	@ (80078ec <HAL_RCC_ClockConfig+0x1bc>)
 8007892:	4313      	orrs	r3, r2
 8007894:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f003 0308 	and.w	r3, r3, #8
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d009      	beq.n	80078b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80078a2:	4b12      	ldr	r3, [pc, #72]	@ (80078ec <HAL_RCC_ClockConfig+0x1bc>)
 80078a4:	689b      	ldr	r3, [r3, #8]
 80078a6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	691b      	ldr	r3, [r3, #16]
 80078ae:	00db      	lsls	r3, r3, #3
 80078b0:	490e      	ldr	r1, [pc, #56]	@ (80078ec <HAL_RCC_ClockConfig+0x1bc>)
 80078b2:	4313      	orrs	r3, r2
 80078b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80078b6:	f000 f821 	bl	80078fc <HAL_RCC_GetSysClockFreq>
 80078ba:	4602      	mov	r2, r0
 80078bc:	4b0b      	ldr	r3, [pc, #44]	@ (80078ec <HAL_RCC_ClockConfig+0x1bc>)
 80078be:	689b      	ldr	r3, [r3, #8]
 80078c0:	091b      	lsrs	r3, r3, #4
 80078c2:	f003 030f 	and.w	r3, r3, #15
 80078c6:	490a      	ldr	r1, [pc, #40]	@ (80078f0 <HAL_RCC_ClockConfig+0x1c0>)
 80078c8:	5ccb      	ldrb	r3, [r1, r3]
 80078ca:	fa22 f303 	lsr.w	r3, r2, r3
 80078ce:	4a09      	ldr	r2, [pc, #36]	@ (80078f4 <HAL_RCC_ClockConfig+0x1c4>)
 80078d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80078d2:	4b09      	ldr	r3, [pc, #36]	@ (80078f8 <HAL_RCC_ClockConfig+0x1c8>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4618      	mov	r0, r3
 80078d8:	f7fb f96e 	bl	8002bb8 <HAL_InitTick>

  return HAL_OK;
 80078dc:	2300      	movs	r3, #0
}
 80078de:	4618      	mov	r0, r3
 80078e0:	3710      	adds	r7, #16
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}
 80078e6:	bf00      	nop
 80078e8:	40023c00 	.word	0x40023c00
 80078ec:	40023800 	.word	0x40023800
 80078f0:	08010450 	.word	0x08010450
 80078f4:	20000004 	.word	0x20000004
 80078f8:	20000008 	.word	0x20000008

080078fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80078fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007900:	b094      	sub	sp, #80	@ 0x50
 8007902:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007904:	2300      	movs	r3, #0
 8007906:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8007908:	2300      	movs	r3, #0
 800790a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800790c:	2300      	movs	r3, #0
 800790e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8007910:	2300      	movs	r3, #0
 8007912:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007914:	4b79      	ldr	r3, [pc, #484]	@ (8007afc <HAL_RCC_GetSysClockFreq+0x200>)
 8007916:	689b      	ldr	r3, [r3, #8]
 8007918:	f003 030c 	and.w	r3, r3, #12
 800791c:	2b08      	cmp	r3, #8
 800791e:	d00d      	beq.n	800793c <HAL_RCC_GetSysClockFreq+0x40>
 8007920:	2b08      	cmp	r3, #8
 8007922:	f200 80e1 	bhi.w	8007ae8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007926:	2b00      	cmp	r3, #0
 8007928:	d002      	beq.n	8007930 <HAL_RCC_GetSysClockFreq+0x34>
 800792a:	2b04      	cmp	r3, #4
 800792c:	d003      	beq.n	8007936 <HAL_RCC_GetSysClockFreq+0x3a>
 800792e:	e0db      	b.n	8007ae8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007930:	4b73      	ldr	r3, [pc, #460]	@ (8007b00 <HAL_RCC_GetSysClockFreq+0x204>)
 8007932:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007934:	e0db      	b.n	8007aee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007936:	4b73      	ldr	r3, [pc, #460]	@ (8007b04 <HAL_RCC_GetSysClockFreq+0x208>)
 8007938:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800793a:	e0d8      	b.n	8007aee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800793c:	4b6f      	ldr	r3, [pc, #444]	@ (8007afc <HAL_RCC_GetSysClockFreq+0x200>)
 800793e:	685b      	ldr	r3, [r3, #4]
 8007940:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007944:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007946:	4b6d      	ldr	r3, [pc, #436]	@ (8007afc <HAL_RCC_GetSysClockFreq+0x200>)
 8007948:	685b      	ldr	r3, [r3, #4]
 800794a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800794e:	2b00      	cmp	r3, #0
 8007950:	d063      	beq.n	8007a1a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007952:	4b6a      	ldr	r3, [pc, #424]	@ (8007afc <HAL_RCC_GetSysClockFreq+0x200>)
 8007954:	685b      	ldr	r3, [r3, #4]
 8007956:	099b      	lsrs	r3, r3, #6
 8007958:	2200      	movs	r2, #0
 800795a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800795c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800795e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007960:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007964:	633b      	str	r3, [r7, #48]	@ 0x30
 8007966:	2300      	movs	r3, #0
 8007968:	637b      	str	r3, [r7, #52]	@ 0x34
 800796a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800796e:	4622      	mov	r2, r4
 8007970:	462b      	mov	r3, r5
 8007972:	f04f 0000 	mov.w	r0, #0
 8007976:	f04f 0100 	mov.w	r1, #0
 800797a:	0159      	lsls	r1, r3, #5
 800797c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007980:	0150      	lsls	r0, r2, #5
 8007982:	4602      	mov	r2, r0
 8007984:	460b      	mov	r3, r1
 8007986:	4621      	mov	r1, r4
 8007988:	1a51      	subs	r1, r2, r1
 800798a:	6139      	str	r1, [r7, #16]
 800798c:	4629      	mov	r1, r5
 800798e:	eb63 0301 	sbc.w	r3, r3, r1
 8007992:	617b      	str	r3, [r7, #20]
 8007994:	f04f 0200 	mov.w	r2, #0
 8007998:	f04f 0300 	mov.w	r3, #0
 800799c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80079a0:	4659      	mov	r1, fp
 80079a2:	018b      	lsls	r3, r1, #6
 80079a4:	4651      	mov	r1, sl
 80079a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80079aa:	4651      	mov	r1, sl
 80079ac:	018a      	lsls	r2, r1, #6
 80079ae:	4651      	mov	r1, sl
 80079b0:	ebb2 0801 	subs.w	r8, r2, r1
 80079b4:	4659      	mov	r1, fp
 80079b6:	eb63 0901 	sbc.w	r9, r3, r1
 80079ba:	f04f 0200 	mov.w	r2, #0
 80079be:	f04f 0300 	mov.w	r3, #0
 80079c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80079c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80079ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80079ce:	4690      	mov	r8, r2
 80079d0:	4699      	mov	r9, r3
 80079d2:	4623      	mov	r3, r4
 80079d4:	eb18 0303 	adds.w	r3, r8, r3
 80079d8:	60bb      	str	r3, [r7, #8]
 80079da:	462b      	mov	r3, r5
 80079dc:	eb49 0303 	adc.w	r3, r9, r3
 80079e0:	60fb      	str	r3, [r7, #12]
 80079e2:	f04f 0200 	mov.w	r2, #0
 80079e6:	f04f 0300 	mov.w	r3, #0
 80079ea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80079ee:	4629      	mov	r1, r5
 80079f0:	024b      	lsls	r3, r1, #9
 80079f2:	4621      	mov	r1, r4
 80079f4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80079f8:	4621      	mov	r1, r4
 80079fa:	024a      	lsls	r2, r1, #9
 80079fc:	4610      	mov	r0, r2
 80079fe:	4619      	mov	r1, r3
 8007a00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007a02:	2200      	movs	r2, #0
 8007a04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007a06:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007a08:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007a0c:	f7f9 f93c 	bl	8000c88 <__aeabi_uldivmod>
 8007a10:	4602      	mov	r2, r0
 8007a12:	460b      	mov	r3, r1
 8007a14:	4613      	mov	r3, r2
 8007a16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007a18:	e058      	b.n	8007acc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007a1a:	4b38      	ldr	r3, [pc, #224]	@ (8007afc <HAL_RCC_GetSysClockFreq+0x200>)
 8007a1c:	685b      	ldr	r3, [r3, #4]
 8007a1e:	099b      	lsrs	r3, r3, #6
 8007a20:	2200      	movs	r2, #0
 8007a22:	4618      	mov	r0, r3
 8007a24:	4611      	mov	r1, r2
 8007a26:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007a2a:	623b      	str	r3, [r7, #32]
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a30:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007a34:	4642      	mov	r2, r8
 8007a36:	464b      	mov	r3, r9
 8007a38:	f04f 0000 	mov.w	r0, #0
 8007a3c:	f04f 0100 	mov.w	r1, #0
 8007a40:	0159      	lsls	r1, r3, #5
 8007a42:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007a46:	0150      	lsls	r0, r2, #5
 8007a48:	4602      	mov	r2, r0
 8007a4a:	460b      	mov	r3, r1
 8007a4c:	4641      	mov	r1, r8
 8007a4e:	ebb2 0a01 	subs.w	sl, r2, r1
 8007a52:	4649      	mov	r1, r9
 8007a54:	eb63 0b01 	sbc.w	fp, r3, r1
 8007a58:	f04f 0200 	mov.w	r2, #0
 8007a5c:	f04f 0300 	mov.w	r3, #0
 8007a60:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007a64:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007a68:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007a6c:	ebb2 040a 	subs.w	r4, r2, sl
 8007a70:	eb63 050b 	sbc.w	r5, r3, fp
 8007a74:	f04f 0200 	mov.w	r2, #0
 8007a78:	f04f 0300 	mov.w	r3, #0
 8007a7c:	00eb      	lsls	r3, r5, #3
 8007a7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007a82:	00e2      	lsls	r2, r4, #3
 8007a84:	4614      	mov	r4, r2
 8007a86:	461d      	mov	r5, r3
 8007a88:	4643      	mov	r3, r8
 8007a8a:	18e3      	adds	r3, r4, r3
 8007a8c:	603b      	str	r3, [r7, #0]
 8007a8e:	464b      	mov	r3, r9
 8007a90:	eb45 0303 	adc.w	r3, r5, r3
 8007a94:	607b      	str	r3, [r7, #4]
 8007a96:	f04f 0200 	mov.w	r2, #0
 8007a9a:	f04f 0300 	mov.w	r3, #0
 8007a9e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007aa2:	4629      	mov	r1, r5
 8007aa4:	028b      	lsls	r3, r1, #10
 8007aa6:	4621      	mov	r1, r4
 8007aa8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007aac:	4621      	mov	r1, r4
 8007aae:	028a      	lsls	r2, r1, #10
 8007ab0:	4610      	mov	r0, r2
 8007ab2:	4619      	mov	r1, r3
 8007ab4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	61bb      	str	r3, [r7, #24]
 8007aba:	61fa      	str	r2, [r7, #28]
 8007abc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007ac0:	f7f9 f8e2 	bl	8000c88 <__aeabi_uldivmod>
 8007ac4:	4602      	mov	r2, r0
 8007ac6:	460b      	mov	r3, r1
 8007ac8:	4613      	mov	r3, r2
 8007aca:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8007acc:	4b0b      	ldr	r3, [pc, #44]	@ (8007afc <HAL_RCC_GetSysClockFreq+0x200>)
 8007ace:	685b      	ldr	r3, [r3, #4]
 8007ad0:	0c1b      	lsrs	r3, r3, #16
 8007ad2:	f003 0303 	and.w	r3, r3, #3
 8007ad6:	3301      	adds	r3, #1
 8007ad8:	005b      	lsls	r3, r3, #1
 8007ada:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8007adc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007ade:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ae4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007ae6:	e002      	b.n	8007aee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007ae8:	4b05      	ldr	r3, [pc, #20]	@ (8007b00 <HAL_RCC_GetSysClockFreq+0x204>)
 8007aea:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007aec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007aee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3750      	adds	r7, #80	@ 0x50
 8007af4:	46bd      	mov	sp, r7
 8007af6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007afa:	bf00      	nop
 8007afc:	40023800 	.word	0x40023800
 8007b00:	00f42400 	.word	0x00f42400
 8007b04:	007a1200 	.word	0x007a1200

08007b08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007b0c:	4b03      	ldr	r3, [pc, #12]	@ (8007b1c <HAL_RCC_GetHCLKFreq+0x14>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	46bd      	mov	sp, r7
 8007b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b18:	4770      	bx	lr
 8007b1a:	bf00      	nop
 8007b1c:	20000004 	.word	0x20000004

08007b20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007b24:	f7ff fff0 	bl	8007b08 <HAL_RCC_GetHCLKFreq>
 8007b28:	4602      	mov	r2, r0
 8007b2a:	4b05      	ldr	r3, [pc, #20]	@ (8007b40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007b2c:	689b      	ldr	r3, [r3, #8]
 8007b2e:	0a9b      	lsrs	r3, r3, #10
 8007b30:	f003 0307 	and.w	r3, r3, #7
 8007b34:	4903      	ldr	r1, [pc, #12]	@ (8007b44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007b36:	5ccb      	ldrb	r3, [r1, r3]
 8007b38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	bd80      	pop	{r7, pc}
 8007b40:	40023800 	.word	0x40023800
 8007b44:	08010460 	.word	0x08010460

08007b48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007b4c:	f7ff ffdc 	bl	8007b08 <HAL_RCC_GetHCLKFreq>
 8007b50:	4602      	mov	r2, r0
 8007b52:	4b05      	ldr	r3, [pc, #20]	@ (8007b68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007b54:	689b      	ldr	r3, [r3, #8]
 8007b56:	0b5b      	lsrs	r3, r3, #13
 8007b58:	f003 0307 	and.w	r3, r3, #7
 8007b5c:	4903      	ldr	r1, [pc, #12]	@ (8007b6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007b5e:	5ccb      	ldrb	r3, [r1, r3]
 8007b60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007b64:	4618      	mov	r0, r3
 8007b66:	bd80      	pop	{r7, pc}
 8007b68:	40023800 	.word	0x40023800
 8007b6c:	08010460 	.word	0x08010460

08007b70 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b086      	sub	sp, #24
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007b78:	2300      	movs	r3, #0
 8007b7a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f003 0301 	and.w	r3, r3, #1
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d105      	bne.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d035      	beq.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007b98:	4b62      	ldr	r3, [pc, #392]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007b9e:	f7fb f84f 	bl	8002c40 <HAL_GetTick>
 8007ba2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007ba4:	e008      	b.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007ba6:	f7fb f84b 	bl	8002c40 <HAL_GetTick>
 8007baa:	4602      	mov	r2, r0
 8007bac:	697b      	ldr	r3, [r7, #20]
 8007bae:	1ad3      	subs	r3, r2, r3
 8007bb0:	2b02      	cmp	r3, #2
 8007bb2:	d901      	bls.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007bb4:	2303      	movs	r3, #3
 8007bb6:	e0b0      	b.n	8007d1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007bb8:	4b5b      	ldr	r3, [pc, #364]	@ (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d1f0      	bne.n	8007ba6 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	685b      	ldr	r3, [r3, #4]
 8007bc8:	019a      	lsls	r2, r3, #6
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	689b      	ldr	r3, [r3, #8]
 8007bce:	071b      	lsls	r3, r3, #28
 8007bd0:	4955      	ldr	r1, [pc, #340]	@ (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007bd2:	4313      	orrs	r3, r2
 8007bd4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007bd8:	4b52      	ldr	r3, [pc, #328]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007bda:	2201      	movs	r2, #1
 8007bdc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007bde:	f7fb f82f 	bl	8002c40 <HAL_GetTick>
 8007be2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007be4:	e008      	b.n	8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007be6:	f7fb f82b 	bl	8002c40 <HAL_GetTick>
 8007bea:	4602      	mov	r2, r0
 8007bec:	697b      	ldr	r3, [r7, #20]
 8007bee:	1ad3      	subs	r3, r2, r3
 8007bf0:	2b02      	cmp	r3, #2
 8007bf2:	d901      	bls.n	8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007bf4:	2303      	movs	r3, #3
 8007bf6:	e090      	b.n	8007d1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007bf8:	4b4b      	ldr	r3, [pc, #300]	@ (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d0f0      	beq.n	8007be6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f003 0302 	and.w	r3, r3, #2
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	f000 8083 	beq.w	8007d18 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007c12:	2300      	movs	r3, #0
 8007c14:	60fb      	str	r3, [r7, #12]
 8007c16:	4b44      	ldr	r3, [pc, #272]	@ (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c1a:	4a43      	ldr	r2, [pc, #268]	@ (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007c1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007c20:	6413      	str	r3, [r2, #64]	@ 0x40
 8007c22:	4b41      	ldr	r3, [pc, #260]	@ (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007c2a:	60fb      	str	r3, [r7, #12]
 8007c2c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007c2e:	4b3f      	ldr	r3, [pc, #252]	@ (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	4a3e      	ldr	r2, [pc, #248]	@ (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007c34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007c38:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007c3a:	f7fb f801 	bl	8002c40 <HAL_GetTick>
 8007c3e:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8007c40:	e008      	b.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c42:	f7fa fffd 	bl	8002c40 <HAL_GetTick>
 8007c46:	4602      	mov	r2, r0
 8007c48:	697b      	ldr	r3, [r7, #20]
 8007c4a:	1ad3      	subs	r3, r2, r3
 8007c4c:	2b02      	cmp	r3, #2
 8007c4e:	d901      	bls.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8007c50:	2303      	movs	r3, #3
 8007c52:	e062      	b.n	8007d1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8007c54:	4b35      	ldr	r3, [pc, #212]	@ (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d0f0      	beq.n	8007c42 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007c60:	4b31      	ldr	r3, [pc, #196]	@ (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007c62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c64:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007c68:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007c6a:	693b      	ldr	r3, [r7, #16]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d02f      	beq.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	68db      	ldr	r3, [r3, #12]
 8007c74:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007c78:	693a      	ldr	r2, [r7, #16]
 8007c7a:	429a      	cmp	r2, r3
 8007c7c:	d028      	beq.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007c7e:	4b2a      	ldr	r3, [pc, #168]	@ (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007c80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007c86:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007c88:	4b29      	ldr	r3, [pc, #164]	@ (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007c8e:	4b28      	ldr	r3, [pc, #160]	@ (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007c90:	2200      	movs	r2, #0
 8007c92:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007c94:	4a24      	ldr	r2, [pc, #144]	@ (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007c9a:	4b23      	ldr	r3, [pc, #140]	@ (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007c9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c9e:	f003 0301 	and.w	r3, r3, #1
 8007ca2:	2b01      	cmp	r3, #1
 8007ca4:	d114      	bne.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007ca6:	f7fa ffcb 	bl	8002c40 <HAL_GetTick>
 8007caa:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007cac:	e00a      	b.n	8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007cae:	f7fa ffc7 	bl	8002c40 <HAL_GetTick>
 8007cb2:	4602      	mov	r2, r0
 8007cb4:	697b      	ldr	r3, [r7, #20]
 8007cb6:	1ad3      	subs	r3, r2, r3
 8007cb8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d901      	bls.n	8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8007cc0:	2303      	movs	r3, #3
 8007cc2:	e02a      	b.n	8007d1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007cc4:	4b18      	ldr	r3, [pc, #96]	@ (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007cc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007cc8:	f003 0302 	and.w	r3, r3, #2
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d0ee      	beq.n	8007cae <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	68db      	ldr	r3, [r3, #12]
 8007cd4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007cd8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007cdc:	d10d      	bne.n	8007cfa <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8007cde:	4b12      	ldr	r3, [pc, #72]	@ (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007ce0:	689b      	ldr	r3, [r3, #8]
 8007ce2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	68db      	ldr	r3, [r3, #12]
 8007cea:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8007cee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007cf2:	490d      	ldr	r1, [pc, #52]	@ (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007cf4:	4313      	orrs	r3, r2
 8007cf6:	608b      	str	r3, [r1, #8]
 8007cf8:	e005      	b.n	8007d06 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007cfa:	4b0b      	ldr	r3, [pc, #44]	@ (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007cfc:	689b      	ldr	r3, [r3, #8]
 8007cfe:	4a0a      	ldr	r2, [pc, #40]	@ (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007d00:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8007d04:	6093      	str	r3, [r2, #8]
 8007d06:	4b08      	ldr	r3, [pc, #32]	@ (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007d08:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	68db      	ldr	r3, [r3, #12]
 8007d0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007d12:	4905      	ldr	r1, [pc, #20]	@ (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007d14:	4313      	orrs	r3, r2
 8007d16:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007d18:	2300      	movs	r3, #0
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3718      	adds	r7, #24
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}
 8007d22:	bf00      	nop
 8007d24:	42470068 	.word	0x42470068
 8007d28:	40023800 	.word	0x40023800
 8007d2c:	40007000 	.word	0x40007000
 8007d30:	42470e40 	.word	0x42470e40

08007d34 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007d34:	b480      	push	{r7}
 8007d36:	b087      	sub	sp, #28
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8007d40:	2300      	movs	r3, #0
 8007d42:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8007d44:	2300      	movs	r3, #0
 8007d46:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8007d48:	2300      	movs	r3, #0
 8007d4a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2b01      	cmp	r3, #1
 8007d50:	d13f      	bne.n	8007dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8007d52:	4b24      	ldr	r3, [pc, #144]	@ (8007de4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007d54:	689b      	ldr	r3, [r3, #8]
 8007d56:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007d5a:	60fb      	str	r3, [r7, #12]
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d006      	beq.n	8007d70 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007d68:	d12f      	bne.n	8007dca <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8007d6a:	4b1f      	ldr	r3, [pc, #124]	@ (8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8007d6c:	617b      	str	r3, [r7, #20]
          break;
 8007d6e:	e02f      	b.n	8007dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007d70:	4b1c      	ldr	r3, [pc, #112]	@ (8007de4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007d72:	685b      	ldr	r3, [r3, #4]
 8007d74:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007d78:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007d7c:	d108      	bne.n	8007d90 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007d7e:	4b19      	ldr	r3, [pc, #100]	@ (8007de4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007d80:	685b      	ldr	r3, [r3, #4]
 8007d82:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007d86:	4a19      	ldr	r2, [pc, #100]	@ (8007dec <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8007d88:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d8c:	613b      	str	r3, [r7, #16]
 8007d8e:	e007      	b.n	8007da0 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007d90:	4b14      	ldr	r3, [pc, #80]	@ (8007de4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007d92:	685b      	ldr	r3, [r3, #4]
 8007d94:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007d98:	4a15      	ldr	r2, [pc, #84]	@ (8007df0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8007d9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d9e:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8007da0:	4b10      	ldr	r3, [pc, #64]	@ (8007de4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007da2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007da6:	099b      	lsrs	r3, r3, #6
 8007da8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007dac:	693b      	ldr	r3, [r7, #16]
 8007dae:	fb02 f303 	mul.w	r3, r2, r3
 8007db2:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8007db4:	4b0b      	ldr	r3, [pc, #44]	@ (8007de4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007db6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007dba:	0f1b      	lsrs	r3, r3, #28
 8007dbc:	f003 0307 	and.w	r3, r3, #7
 8007dc0:	68ba      	ldr	r2, [r7, #8]
 8007dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dc6:	617b      	str	r3, [r7, #20]
          break;
 8007dc8:	e002      	b.n	8007dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	617b      	str	r3, [r7, #20]
          break;
 8007dce:	bf00      	nop
        }
      }
      break;
 8007dd0:	e000      	b.n	8007dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8007dd2:	bf00      	nop
    }
  }
  return frequency;
 8007dd4:	697b      	ldr	r3, [r7, #20]
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	371c      	adds	r7, #28
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de0:	4770      	bx	lr
 8007de2:	bf00      	nop
 8007de4:	40023800 	.word	0x40023800
 8007de8:	00bb8000 	.word	0x00bb8000
 8007dec:	007a1200 	.word	0x007a1200
 8007df0:	00f42400 	.word	0x00f42400

08007df4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b082      	sub	sp, #8
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d101      	bne.n	8007e06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007e02:	2301      	movs	r3, #1
 8007e04:	e041      	b.n	8007e8a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007e0c:	b2db      	uxtb	r3, r3
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d106      	bne.n	8007e20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2200      	movs	r2, #0
 8007e16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f7fa fcba 	bl	8002794 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2202      	movs	r2, #2
 8007e24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681a      	ldr	r2, [r3, #0]
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	3304      	adds	r3, #4
 8007e30:	4619      	mov	r1, r3
 8007e32:	4610      	mov	r0, r2
 8007e34:	f000 fa7a 	bl	800832c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2201      	movs	r2, #1
 8007e3c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2201      	movs	r2, #1
 8007e44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2201      	movs	r2, #1
 8007e4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2201      	movs	r2, #1
 8007e54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2201      	movs	r2, #1
 8007e64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2201      	movs	r2, #1
 8007e6c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2201      	movs	r2, #1
 8007e74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2201      	movs	r2, #1
 8007e7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2201      	movs	r2, #1
 8007e84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007e88:	2300      	movs	r3, #0
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	3708      	adds	r7, #8
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}
	...

08007e94 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007e94:	b480      	push	{r7}
 8007e96:	b085      	sub	sp, #20
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ea2:	b2db      	uxtb	r3, r3
 8007ea4:	2b01      	cmp	r3, #1
 8007ea6:	d001      	beq.n	8007eac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	e046      	b.n	8007f3a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2202      	movs	r2, #2
 8007eb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	4a23      	ldr	r2, [pc, #140]	@ (8007f48 <HAL_TIM_Base_Start+0xb4>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d022      	beq.n	8007f04 <HAL_TIM_Base_Start+0x70>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ec6:	d01d      	beq.n	8007f04 <HAL_TIM_Base_Start+0x70>
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	4a1f      	ldr	r2, [pc, #124]	@ (8007f4c <HAL_TIM_Base_Start+0xb8>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d018      	beq.n	8007f04 <HAL_TIM_Base_Start+0x70>
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	4a1e      	ldr	r2, [pc, #120]	@ (8007f50 <HAL_TIM_Base_Start+0xbc>)
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d013      	beq.n	8007f04 <HAL_TIM_Base_Start+0x70>
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	4a1c      	ldr	r2, [pc, #112]	@ (8007f54 <HAL_TIM_Base_Start+0xc0>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d00e      	beq.n	8007f04 <HAL_TIM_Base_Start+0x70>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	4a1b      	ldr	r2, [pc, #108]	@ (8007f58 <HAL_TIM_Base_Start+0xc4>)
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d009      	beq.n	8007f04 <HAL_TIM_Base_Start+0x70>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	4a19      	ldr	r2, [pc, #100]	@ (8007f5c <HAL_TIM_Base_Start+0xc8>)
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d004      	beq.n	8007f04 <HAL_TIM_Base_Start+0x70>
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	4a18      	ldr	r2, [pc, #96]	@ (8007f60 <HAL_TIM_Base_Start+0xcc>)
 8007f00:	4293      	cmp	r3, r2
 8007f02:	d111      	bne.n	8007f28 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	689b      	ldr	r3, [r3, #8]
 8007f0a:	f003 0307 	and.w	r3, r3, #7
 8007f0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	2b06      	cmp	r3, #6
 8007f14:	d010      	beq.n	8007f38 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	681a      	ldr	r2, [r3, #0]
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f042 0201 	orr.w	r2, r2, #1
 8007f24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f26:	e007      	b.n	8007f38 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	681a      	ldr	r2, [r3, #0]
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f042 0201 	orr.w	r2, r2, #1
 8007f36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007f38:	2300      	movs	r3, #0
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	3714      	adds	r7, #20
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f44:	4770      	bx	lr
 8007f46:	bf00      	nop
 8007f48:	40010000 	.word	0x40010000
 8007f4c:	40000400 	.word	0x40000400
 8007f50:	40000800 	.word	0x40000800
 8007f54:	40000c00 	.word	0x40000c00
 8007f58:	40010400 	.word	0x40010400
 8007f5c:	40014000 	.word	0x40014000
 8007f60:	40001800 	.word	0x40001800

08007f64 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b082      	sub	sp, #8
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d101      	bne.n	8007f76 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007f72:	2301      	movs	r3, #1
 8007f74:	e041      	b.n	8007ffa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007f7c:	b2db      	uxtb	r3, r3
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d106      	bne.n	8007f90 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2200      	movs	r2, #0
 8007f86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	f000 f839 	bl	8008002 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2202      	movs	r2, #2
 8007f94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681a      	ldr	r2, [r3, #0]
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	3304      	adds	r3, #4
 8007fa0:	4619      	mov	r1, r3
 8007fa2:	4610      	mov	r0, r2
 8007fa4:	f000 f9c2 	bl	800832c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2201      	movs	r2, #1
 8007fac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2201      	movs	r2, #1
 8007fb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2201      	movs	r2, #1
 8007fbc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2201      	movs	r2, #1
 8007fc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2201      	movs	r2, #1
 8007fcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2201      	movs	r2, #1
 8007fd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2201      	movs	r2, #1
 8007fdc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2201      	movs	r2, #1
 8007fe4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2201      	movs	r2, #1
 8007fec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2201      	movs	r2, #1
 8007ff4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007ff8:	2300      	movs	r3, #0
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	3708      	adds	r7, #8
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}

08008002 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008002:	b480      	push	{r7}
 8008004:	b083      	sub	sp, #12
 8008006:	af00      	add	r7, sp, #0
 8008008:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800800a:	bf00      	nop
 800800c:	370c      	adds	r7, #12
 800800e:	46bd      	mov	sp, r7
 8008010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008014:	4770      	bx	lr
	...

08008018 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b086      	sub	sp, #24
 800801c:	af00      	add	r7, sp, #0
 800801e:	60f8      	str	r0, [r7, #12]
 8008020:	60b9      	str	r1, [r7, #8]
 8008022:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008024:	2300      	movs	r3, #0
 8008026:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800802e:	2b01      	cmp	r3, #1
 8008030:	d101      	bne.n	8008036 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008032:	2302      	movs	r3, #2
 8008034:	e0ae      	b.n	8008194 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	2201      	movs	r2, #1
 800803a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2b0c      	cmp	r3, #12
 8008042:	f200 809f 	bhi.w	8008184 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008046:	a201      	add	r2, pc, #4	@ (adr r2, 800804c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800804c:	08008081 	.word	0x08008081
 8008050:	08008185 	.word	0x08008185
 8008054:	08008185 	.word	0x08008185
 8008058:	08008185 	.word	0x08008185
 800805c:	080080c1 	.word	0x080080c1
 8008060:	08008185 	.word	0x08008185
 8008064:	08008185 	.word	0x08008185
 8008068:	08008185 	.word	0x08008185
 800806c:	08008103 	.word	0x08008103
 8008070:	08008185 	.word	0x08008185
 8008074:	08008185 	.word	0x08008185
 8008078:	08008185 	.word	0x08008185
 800807c:	08008143 	.word	0x08008143
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	68b9      	ldr	r1, [r7, #8]
 8008086:	4618      	mov	r0, r3
 8008088:	f000 f9fc 	bl	8008484 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	699a      	ldr	r2, [r3, #24]
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f042 0208 	orr.w	r2, r2, #8
 800809a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	699a      	ldr	r2, [r3, #24]
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f022 0204 	bic.w	r2, r2, #4
 80080aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	6999      	ldr	r1, [r3, #24]
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	691a      	ldr	r2, [r3, #16]
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	430a      	orrs	r2, r1
 80080bc:	619a      	str	r2, [r3, #24]
      break;
 80080be:	e064      	b.n	800818a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	68b9      	ldr	r1, [r7, #8]
 80080c6:	4618      	mov	r0, r3
 80080c8:	f000 fa4c 	bl	8008564 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	699a      	ldr	r2, [r3, #24]
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80080da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	699a      	ldr	r2, [r3, #24]
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80080ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	6999      	ldr	r1, [r3, #24]
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	691b      	ldr	r3, [r3, #16]
 80080f6:	021a      	lsls	r2, r3, #8
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	430a      	orrs	r2, r1
 80080fe:	619a      	str	r2, [r3, #24]
      break;
 8008100:	e043      	b.n	800818a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	68b9      	ldr	r1, [r7, #8]
 8008108:	4618      	mov	r0, r3
 800810a:	f000 faa1 	bl	8008650 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	69da      	ldr	r2, [r3, #28]
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f042 0208 	orr.w	r2, r2, #8
 800811c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	69da      	ldr	r2, [r3, #28]
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f022 0204 	bic.w	r2, r2, #4
 800812c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	69d9      	ldr	r1, [r3, #28]
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	691a      	ldr	r2, [r3, #16]
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	430a      	orrs	r2, r1
 800813e:	61da      	str	r2, [r3, #28]
      break;
 8008140:	e023      	b.n	800818a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	68b9      	ldr	r1, [r7, #8]
 8008148:	4618      	mov	r0, r3
 800814a:	f000 faf5 	bl	8008738 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	69da      	ldr	r2, [r3, #28]
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800815c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	69da      	ldr	r2, [r3, #28]
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800816c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	69d9      	ldr	r1, [r3, #28]
 8008174:	68bb      	ldr	r3, [r7, #8]
 8008176:	691b      	ldr	r3, [r3, #16]
 8008178:	021a      	lsls	r2, r3, #8
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	430a      	orrs	r2, r1
 8008180:	61da      	str	r2, [r3, #28]
      break;
 8008182:	e002      	b.n	800818a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008184:	2301      	movs	r3, #1
 8008186:	75fb      	strb	r3, [r7, #23]
      break;
 8008188:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	2200      	movs	r2, #0
 800818e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008192:	7dfb      	ldrb	r3, [r7, #23]
}
 8008194:	4618      	mov	r0, r3
 8008196:	3718      	adds	r7, #24
 8008198:	46bd      	mov	sp, r7
 800819a:	bd80      	pop	{r7, pc}

0800819c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b084      	sub	sp, #16
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
 80081a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80081a6:	2300      	movs	r3, #0
 80081a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80081b0:	2b01      	cmp	r3, #1
 80081b2:	d101      	bne.n	80081b8 <HAL_TIM_ConfigClockSource+0x1c>
 80081b4:	2302      	movs	r3, #2
 80081b6:	e0b4      	b.n	8008322 <HAL_TIM_ConfigClockSource+0x186>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2201      	movs	r2, #1
 80081bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2202      	movs	r2, #2
 80081c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	689b      	ldr	r3, [r3, #8]
 80081ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80081d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80081de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	68ba      	ldr	r2, [r7, #8]
 80081e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80081f0:	d03e      	beq.n	8008270 <HAL_TIM_ConfigClockSource+0xd4>
 80081f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80081f6:	f200 8087 	bhi.w	8008308 <HAL_TIM_ConfigClockSource+0x16c>
 80081fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80081fe:	f000 8086 	beq.w	800830e <HAL_TIM_ConfigClockSource+0x172>
 8008202:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008206:	d87f      	bhi.n	8008308 <HAL_TIM_ConfigClockSource+0x16c>
 8008208:	2b70      	cmp	r3, #112	@ 0x70
 800820a:	d01a      	beq.n	8008242 <HAL_TIM_ConfigClockSource+0xa6>
 800820c:	2b70      	cmp	r3, #112	@ 0x70
 800820e:	d87b      	bhi.n	8008308 <HAL_TIM_ConfigClockSource+0x16c>
 8008210:	2b60      	cmp	r3, #96	@ 0x60
 8008212:	d050      	beq.n	80082b6 <HAL_TIM_ConfigClockSource+0x11a>
 8008214:	2b60      	cmp	r3, #96	@ 0x60
 8008216:	d877      	bhi.n	8008308 <HAL_TIM_ConfigClockSource+0x16c>
 8008218:	2b50      	cmp	r3, #80	@ 0x50
 800821a:	d03c      	beq.n	8008296 <HAL_TIM_ConfigClockSource+0xfa>
 800821c:	2b50      	cmp	r3, #80	@ 0x50
 800821e:	d873      	bhi.n	8008308 <HAL_TIM_ConfigClockSource+0x16c>
 8008220:	2b40      	cmp	r3, #64	@ 0x40
 8008222:	d058      	beq.n	80082d6 <HAL_TIM_ConfigClockSource+0x13a>
 8008224:	2b40      	cmp	r3, #64	@ 0x40
 8008226:	d86f      	bhi.n	8008308 <HAL_TIM_ConfigClockSource+0x16c>
 8008228:	2b30      	cmp	r3, #48	@ 0x30
 800822a:	d064      	beq.n	80082f6 <HAL_TIM_ConfigClockSource+0x15a>
 800822c:	2b30      	cmp	r3, #48	@ 0x30
 800822e:	d86b      	bhi.n	8008308 <HAL_TIM_ConfigClockSource+0x16c>
 8008230:	2b20      	cmp	r3, #32
 8008232:	d060      	beq.n	80082f6 <HAL_TIM_ConfigClockSource+0x15a>
 8008234:	2b20      	cmp	r3, #32
 8008236:	d867      	bhi.n	8008308 <HAL_TIM_ConfigClockSource+0x16c>
 8008238:	2b00      	cmp	r3, #0
 800823a:	d05c      	beq.n	80082f6 <HAL_TIM_ConfigClockSource+0x15a>
 800823c:	2b10      	cmp	r3, #16
 800823e:	d05a      	beq.n	80082f6 <HAL_TIM_ConfigClockSource+0x15a>
 8008240:	e062      	b.n	8008308 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008252:	f000 fb41 	bl	80088d8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	689b      	ldr	r3, [r3, #8]
 800825c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008264:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	68ba      	ldr	r2, [r7, #8]
 800826c:	609a      	str	r2, [r3, #8]
      break;
 800826e:	e04f      	b.n	8008310 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008280:	f000 fb2a 	bl	80088d8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	689a      	ldr	r2, [r3, #8]
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008292:	609a      	str	r2, [r3, #8]
      break;
 8008294:	e03c      	b.n	8008310 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80082a2:	461a      	mov	r2, r3
 80082a4:	f000 fa9e 	bl	80087e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	2150      	movs	r1, #80	@ 0x50
 80082ae:	4618      	mov	r0, r3
 80082b0:	f000 faf7 	bl	80088a2 <TIM_ITRx_SetConfig>
      break;
 80082b4:	e02c      	b.n	8008310 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80082c2:	461a      	mov	r2, r3
 80082c4:	f000 fabd 	bl	8008842 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	2160      	movs	r1, #96	@ 0x60
 80082ce:	4618      	mov	r0, r3
 80082d0:	f000 fae7 	bl	80088a2 <TIM_ITRx_SetConfig>
      break;
 80082d4:	e01c      	b.n	8008310 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80082e2:	461a      	mov	r2, r3
 80082e4:	f000 fa7e 	bl	80087e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	2140      	movs	r1, #64	@ 0x40
 80082ee:	4618      	mov	r0, r3
 80082f0:	f000 fad7 	bl	80088a2 <TIM_ITRx_SetConfig>
      break;
 80082f4:	e00c      	b.n	8008310 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681a      	ldr	r2, [r3, #0]
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	4619      	mov	r1, r3
 8008300:	4610      	mov	r0, r2
 8008302:	f000 face 	bl	80088a2 <TIM_ITRx_SetConfig>
      break;
 8008306:	e003      	b.n	8008310 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008308:	2301      	movs	r3, #1
 800830a:	73fb      	strb	r3, [r7, #15]
      break;
 800830c:	e000      	b.n	8008310 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800830e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2201      	movs	r2, #1
 8008314:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2200      	movs	r2, #0
 800831c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008320:	7bfb      	ldrb	r3, [r7, #15]
}
 8008322:	4618      	mov	r0, r3
 8008324:	3710      	adds	r7, #16
 8008326:	46bd      	mov	sp, r7
 8008328:	bd80      	pop	{r7, pc}
	...

0800832c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800832c:	b480      	push	{r7}
 800832e:	b085      	sub	sp, #20
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
 8008334:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	4a46      	ldr	r2, [pc, #280]	@ (8008458 <TIM_Base_SetConfig+0x12c>)
 8008340:	4293      	cmp	r3, r2
 8008342:	d013      	beq.n	800836c <TIM_Base_SetConfig+0x40>
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800834a:	d00f      	beq.n	800836c <TIM_Base_SetConfig+0x40>
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	4a43      	ldr	r2, [pc, #268]	@ (800845c <TIM_Base_SetConfig+0x130>)
 8008350:	4293      	cmp	r3, r2
 8008352:	d00b      	beq.n	800836c <TIM_Base_SetConfig+0x40>
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	4a42      	ldr	r2, [pc, #264]	@ (8008460 <TIM_Base_SetConfig+0x134>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d007      	beq.n	800836c <TIM_Base_SetConfig+0x40>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	4a41      	ldr	r2, [pc, #260]	@ (8008464 <TIM_Base_SetConfig+0x138>)
 8008360:	4293      	cmp	r3, r2
 8008362:	d003      	beq.n	800836c <TIM_Base_SetConfig+0x40>
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	4a40      	ldr	r2, [pc, #256]	@ (8008468 <TIM_Base_SetConfig+0x13c>)
 8008368:	4293      	cmp	r3, r2
 800836a:	d108      	bne.n	800837e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008372:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	685b      	ldr	r3, [r3, #4]
 8008378:	68fa      	ldr	r2, [r7, #12]
 800837a:	4313      	orrs	r3, r2
 800837c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	4a35      	ldr	r2, [pc, #212]	@ (8008458 <TIM_Base_SetConfig+0x12c>)
 8008382:	4293      	cmp	r3, r2
 8008384:	d02b      	beq.n	80083de <TIM_Base_SetConfig+0xb2>
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800838c:	d027      	beq.n	80083de <TIM_Base_SetConfig+0xb2>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	4a32      	ldr	r2, [pc, #200]	@ (800845c <TIM_Base_SetConfig+0x130>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d023      	beq.n	80083de <TIM_Base_SetConfig+0xb2>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	4a31      	ldr	r2, [pc, #196]	@ (8008460 <TIM_Base_SetConfig+0x134>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d01f      	beq.n	80083de <TIM_Base_SetConfig+0xb2>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	4a30      	ldr	r2, [pc, #192]	@ (8008464 <TIM_Base_SetConfig+0x138>)
 80083a2:	4293      	cmp	r3, r2
 80083a4:	d01b      	beq.n	80083de <TIM_Base_SetConfig+0xb2>
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	4a2f      	ldr	r2, [pc, #188]	@ (8008468 <TIM_Base_SetConfig+0x13c>)
 80083aa:	4293      	cmp	r3, r2
 80083ac:	d017      	beq.n	80083de <TIM_Base_SetConfig+0xb2>
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	4a2e      	ldr	r2, [pc, #184]	@ (800846c <TIM_Base_SetConfig+0x140>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d013      	beq.n	80083de <TIM_Base_SetConfig+0xb2>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	4a2d      	ldr	r2, [pc, #180]	@ (8008470 <TIM_Base_SetConfig+0x144>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d00f      	beq.n	80083de <TIM_Base_SetConfig+0xb2>
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	4a2c      	ldr	r2, [pc, #176]	@ (8008474 <TIM_Base_SetConfig+0x148>)
 80083c2:	4293      	cmp	r3, r2
 80083c4:	d00b      	beq.n	80083de <TIM_Base_SetConfig+0xb2>
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	4a2b      	ldr	r2, [pc, #172]	@ (8008478 <TIM_Base_SetConfig+0x14c>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d007      	beq.n	80083de <TIM_Base_SetConfig+0xb2>
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	4a2a      	ldr	r2, [pc, #168]	@ (800847c <TIM_Base_SetConfig+0x150>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d003      	beq.n	80083de <TIM_Base_SetConfig+0xb2>
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	4a29      	ldr	r2, [pc, #164]	@ (8008480 <TIM_Base_SetConfig+0x154>)
 80083da:	4293      	cmp	r3, r2
 80083dc:	d108      	bne.n	80083f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80083e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	68db      	ldr	r3, [r3, #12]
 80083ea:	68fa      	ldr	r2, [r7, #12]
 80083ec:	4313      	orrs	r3, r2
 80083ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	695b      	ldr	r3, [r3, #20]
 80083fa:	4313      	orrs	r3, r2
 80083fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	68fa      	ldr	r2, [r7, #12]
 8008402:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	689a      	ldr	r2, [r3, #8]
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	681a      	ldr	r2, [r3, #0]
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	4a10      	ldr	r2, [pc, #64]	@ (8008458 <TIM_Base_SetConfig+0x12c>)
 8008418:	4293      	cmp	r3, r2
 800841a:	d003      	beq.n	8008424 <TIM_Base_SetConfig+0xf8>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	4a12      	ldr	r2, [pc, #72]	@ (8008468 <TIM_Base_SetConfig+0x13c>)
 8008420:	4293      	cmp	r3, r2
 8008422:	d103      	bne.n	800842c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	691a      	ldr	r2, [r3, #16]
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2201      	movs	r2, #1
 8008430:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	691b      	ldr	r3, [r3, #16]
 8008436:	f003 0301 	and.w	r3, r3, #1
 800843a:	2b01      	cmp	r3, #1
 800843c:	d105      	bne.n	800844a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	691b      	ldr	r3, [r3, #16]
 8008442:	f023 0201 	bic.w	r2, r3, #1
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	611a      	str	r2, [r3, #16]
  }
}
 800844a:	bf00      	nop
 800844c:	3714      	adds	r7, #20
 800844e:	46bd      	mov	sp, r7
 8008450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008454:	4770      	bx	lr
 8008456:	bf00      	nop
 8008458:	40010000 	.word	0x40010000
 800845c:	40000400 	.word	0x40000400
 8008460:	40000800 	.word	0x40000800
 8008464:	40000c00 	.word	0x40000c00
 8008468:	40010400 	.word	0x40010400
 800846c:	40014000 	.word	0x40014000
 8008470:	40014400 	.word	0x40014400
 8008474:	40014800 	.word	0x40014800
 8008478:	40001800 	.word	0x40001800
 800847c:	40001c00 	.word	0x40001c00
 8008480:	40002000 	.word	0x40002000

08008484 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008484:	b480      	push	{r7}
 8008486:	b087      	sub	sp, #28
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
 800848c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6a1b      	ldr	r3, [r3, #32]
 8008492:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6a1b      	ldr	r3, [r3, #32]
 8008498:	f023 0201 	bic.w	r2, r3, #1
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	685b      	ldr	r3, [r3, #4]
 80084a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	699b      	ldr	r3, [r3, #24]
 80084aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80084b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	f023 0303 	bic.w	r3, r3, #3
 80084ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	68fa      	ldr	r2, [r7, #12]
 80084c2:	4313      	orrs	r3, r2
 80084c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80084c6:	697b      	ldr	r3, [r7, #20]
 80084c8:	f023 0302 	bic.w	r3, r3, #2
 80084cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	689b      	ldr	r3, [r3, #8]
 80084d2:	697a      	ldr	r2, [r7, #20]
 80084d4:	4313      	orrs	r3, r2
 80084d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	4a20      	ldr	r2, [pc, #128]	@ (800855c <TIM_OC1_SetConfig+0xd8>)
 80084dc:	4293      	cmp	r3, r2
 80084de:	d003      	beq.n	80084e8 <TIM_OC1_SetConfig+0x64>
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	4a1f      	ldr	r2, [pc, #124]	@ (8008560 <TIM_OC1_SetConfig+0xdc>)
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d10c      	bne.n	8008502 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80084e8:	697b      	ldr	r3, [r7, #20]
 80084ea:	f023 0308 	bic.w	r3, r3, #8
 80084ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	68db      	ldr	r3, [r3, #12]
 80084f4:	697a      	ldr	r2, [r7, #20]
 80084f6:	4313      	orrs	r3, r2
 80084f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	f023 0304 	bic.w	r3, r3, #4
 8008500:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	4a15      	ldr	r2, [pc, #84]	@ (800855c <TIM_OC1_SetConfig+0xd8>)
 8008506:	4293      	cmp	r3, r2
 8008508:	d003      	beq.n	8008512 <TIM_OC1_SetConfig+0x8e>
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	4a14      	ldr	r2, [pc, #80]	@ (8008560 <TIM_OC1_SetConfig+0xdc>)
 800850e:	4293      	cmp	r3, r2
 8008510:	d111      	bne.n	8008536 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008512:	693b      	ldr	r3, [r7, #16]
 8008514:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008518:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800851a:	693b      	ldr	r3, [r7, #16]
 800851c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008520:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	695b      	ldr	r3, [r3, #20]
 8008526:	693a      	ldr	r2, [r7, #16]
 8008528:	4313      	orrs	r3, r2
 800852a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	699b      	ldr	r3, [r3, #24]
 8008530:	693a      	ldr	r2, [r7, #16]
 8008532:	4313      	orrs	r3, r2
 8008534:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	693a      	ldr	r2, [r7, #16]
 800853a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	68fa      	ldr	r2, [r7, #12]
 8008540:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	685a      	ldr	r2, [r3, #4]
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	697a      	ldr	r2, [r7, #20]
 800854e:	621a      	str	r2, [r3, #32]
}
 8008550:	bf00      	nop
 8008552:	371c      	adds	r7, #28
 8008554:	46bd      	mov	sp, r7
 8008556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855a:	4770      	bx	lr
 800855c:	40010000 	.word	0x40010000
 8008560:	40010400 	.word	0x40010400

08008564 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008564:	b480      	push	{r7}
 8008566:	b087      	sub	sp, #28
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
 800856c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6a1b      	ldr	r3, [r3, #32]
 8008572:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6a1b      	ldr	r3, [r3, #32]
 8008578:	f023 0210 	bic.w	r2, r3, #16
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	685b      	ldr	r3, [r3, #4]
 8008584:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	699b      	ldr	r3, [r3, #24]
 800858a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008592:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800859a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	021b      	lsls	r3, r3, #8
 80085a2:	68fa      	ldr	r2, [r7, #12]
 80085a4:	4313      	orrs	r3, r2
 80085a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80085a8:	697b      	ldr	r3, [r7, #20]
 80085aa:	f023 0320 	bic.w	r3, r3, #32
 80085ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	689b      	ldr	r3, [r3, #8]
 80085b4:	011b      	lsls	r3, r3, #4
 80085b6:	697a      	ldr	r2, [r7, #20]
 80085b8:	4313      	orrs	r3, r2
 80085ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	4a22      	ldr	r2, [pc, #136]	@ (8008648 <TIM_OC2_SetConfig+0xe4>)
 80085c0:	4293      	cmp	r3, r2
 80085c2:	d003      	beq.n	80085cc <TIM_OC2_SetConfig+0x68>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	4a21      	ldr	r2, [pc, #132]	@ (800864c <TIM_OC2_SetConfig+0xe8>)
 80085c8:	4293      	cmp	r3, r2
 80085ca:	d10d      	bne.n	80085e8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80085cc:	697b      	ldr	r3, [r7, #20]
 80085ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80085d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	68db      	ldr	r3, [r3, #12]
 80085d8:	011b      	lsls	r3, r3, #4
 80085da:	697a      	ldr	r2, [r7, #20]
 80085dc:	4313      	orrs	r3, r2
 80085de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80085e0:	697b      	ldr	r3, [r7, #20]
 80085e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80085e6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	4a17      	ldr	r2, [pc, #92]	@ (8008648 <TIM_OC2_SetConfig+0xe4>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d003      	beq.n	80085f8 <TIM_OC2_SetConfig+0x94>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	4a16      	ldr	r2, [pc, #88]	@ (800864c <TIM_OC2_SetConfig+0xe8>)
 80085f4:	4293      	cmp	r3, r2
 80085f6:	d113      	bne.n	8008620 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80085f8:	693b      	ldr	r3, [r7, #16]
 80085fa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80085fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008600:	693b      	ldr	r3, [r7, #16]
 8008602:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008606:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	695b      	ldr	r3, [r3, #20]
 800860c:	009b      	lsls	r3, r3, #2
 800860e:	693a      	ldr	r2, [r7, #16]
 8008610:	4313      	orrs	r3, r2
 8008612:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	699b      	ldr	r3, [r3, #24]
 8008618:	009b      	lsls	r3, r3, #2
 800861a:	693a      	ldr	r2, [r7, #16]
 800861c:	4313      	orrs	r3, r2
 800861e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	693a      	ldr	r2, [r7, #16]
 8008624:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	68fa      	ldr	r2, [r7, #12]
 800862a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	685a      	ldr	r2, [r3, #4]
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	697a      	ldr	r2, [r7, #20]
 8008638:	621a      	str	r2, [r3, #32]
}
 800863a:	bf00      	nop
 800863c:	371c      	adds	r7, #28
 800863e:	46bd      	mov	sp, r7
 8008640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008644:	4770      	bx	lr
 8008646:	bf00      	nop
 8008648:	40010000 	.word	0x40010000
 800864c:	40010400 	.word	0x40010400

08008650 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008650:	b480      	push	{r7}
 8008652:	b087      	sub	sp, #28
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
 8008658:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6a1b      	ldr	r3, [r3, #32]
 800865e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6a1b      	ldr	r3, [r3, #32]
 8008664:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	685b      	ldr	r3, [r3, #4]
 8008670:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	69db      	ldr	r3, [r3, #28]
 8008676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800867e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	f023 0303 	bic.w	r3, r3, #3
 8008686:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	68fa      	ldr	r2, [r7, #12]
 800868e:	4313      	orrs	r3, r2
 8008690:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008692:	697b      	ldr	r3, [r7, #20]
 8008694:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008698:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	689b      	ldr	r3, [r3, #8]
 800869e:	021b      	lsls	r3, r3, #8
 80086a0:	697a      	ldr	r2, [r7, #20]
 80086a2:	4313      	orrs	r3, r2
 80086a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	4a21      	ldr	r2, [pc, #132]	@ (8008730 <TIM_OC3_SetConfig+0xe0>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d003      	beq.n	80086b6 <TIM_OC3_SetConfig+0x66>
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	4a20      	ldr	r2, [pc, #128]	@ (8008734 <TIM_OC3_SetConfig+0xe4>)
 80086b2:	4293      	cmp	r3, r2
 80086b4:	d10d      	bne.n	80086d2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80086b6:	697b      	ldr	r3, [r7, #20]
 80086b8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80086bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	68db      	ldr	r3, [r3, #12]
 80086c2:	021b      	lsls	r3, r3, #8
 80086c4:	697a      	ldr	r2, [r7, #20]
 80086c6:	4313      	orrs	r3, r2
 80086c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80086d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	4a16      	ldr	r2, [pc, #88]	@ (8008730 <TIM_OC3_SetConfig+0xe0>)
 80086d6:	4293      	cmp	r3, r2
 80086d8:	d003      	beq.n	80086e2 <TIM_OC3_SetConfig+0x92>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	4a15      	ldr	r2, [pc, #84]	@ (8008734 <TIM_OC3_SetConfig+0xe4>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d113      	bne.n	800870a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80086e2:	693b      	ldr	r3, [r7, #16]
 80086e4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80086e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80086ea:	693b      	ldr	r3, [r7, #16]
 80086ec:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80086f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	695b      	ldr	r3, [r3, #20]
 80086f6:	011b      	lsls	r3, r3, #4
 80086f8:	693a      	ldr	r2, [r7, #16]
 80086fa:	4313      	orrs	r3, r2
 80086fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	699b      	ldr	r3, [r3, #24]
 8008702:	011b      	lsls	r3, r3, #4
 8008704:	693a      	ldr	r2, [r7, #16]
 8008706:	4313      	orrs	r3, r2
 8008708:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	693a      	ldr	r2, [r7, #16]
 800870e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	68fa      	ldr	r2, [r7, #12]
 8008714:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	685a      	ldr	r2, [r3, #4]
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	697a      	ldr	r2, [r7, #20]
 8008722:	621a      	str	r2, [r3, #32]
}
 8008724:	bf00      	nop
 8008726:	371c      	adds	r7, #28
 8008728:	46bd      	mov	sp, r7
 800872a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872e:	4770      	bx	lr
 8008730:	40010000 	.word	0x40010000
 8008734:	40010400 	.word	0x40010400

08008738 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008738:	b480      	push	{r7}
 800873a:	b087      	sub	sp, #28
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
 8008740:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6a1b      	ldr	r3, [r3, #32]
 8008746:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6a1b      	ldr	r3, [r3, #32]
 800874c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	685b      	ldr	r3, [r3, #4]
 8008758:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	69db      	ldr	r3, [r3, #28]
 800875e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008766:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800876e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	021b      	lsls	r3, r3, #8
 8008776:	68fa      	ldr	r2, [r7, #12]
 8008778:	4313      	orrs	r3, r2
 800877a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800877c:	693b      	ldr	r3, [r7, #16]
 800877e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008782:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	689b      	ldr	r3, [r3, #8]
 8008788:	031b      	lsls	r3, r3, #12
 800878a:	693a      	ldr	r2, [r7, #16]
 800878c:	4313      	orrs	r3, r2
 800878e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	4a12      	ldr	r2, [pc, #72]	@ (80087dc <TIM_OC4_SetConfig+0xa4>)
 8008794:	4293      	cmp	r3, r2
 8008796:	d003      	beq.n	80087a0 <TIM_OC4_SetConfig+0x68>
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	4a11      	ldr	r2, [pc, #68]	@ (80087e0 <TIM_OC4_SetConfig+0xa8>)
 800879c:	4293      	cmp	r3, r2
 800879e:	d109      	bne.n	80087b4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80087a0:	697b      	ldr	r3, [r7, #20]
 80087a2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80087a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	695b      	ldr	r3, [r3, #20]
 80087ac:	019b      	lsls	r3, r3, #6
 80087ae:	697a      	ldr	r2, [r7, #20]
 80087b0:	4313      	orrs	r3, r2
 80087b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	697a      	ldr	r2, [r7, #20]
 80087b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	68fa      	ldr	r2, [r7, #12]
 80087be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	685a      	ldr	r2, [r3, #4]
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	693a      	ldr	r2, [r7, #16]
 80087cc:	621a      	str	r2, [r3, #32]
}
 80087ce:	bf00      	nop
 80087d0:	371c      	adds	r7, #28
 80087d2:	46bd      	mov	sp, r7
 80087d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d8:	4770      	bx	lr
 80087da:	bf00      	nop
 80087dc:	40010000 	.word	0x40010000
 80087e0:	40010400 	.word	0x40010400

080087e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80087e4:	b480      	push	{r7}
 80087e6:	b087      	sub	sp, #28
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	60f8      	str	r0, [r7, #12]
 80087ec:	60b9      	str	r1, [r7, #8]
 80087ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	6a1b      	ldr	r3, [r3, #32]
 80087f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	6a1b      	ldr	r3, [r3, #32]
 80087fa:	f023 0201 	bic.w	r2, r3, #1
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	699b      	ldr	r3, [r3, #24]
 8008806:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008808:	693b      	ldr	r3, [r7, #16]
 800880a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800880e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	011b      	lsls	r3, r3, #4
 8008814:	693a      	ldr	r2, [r7, #16]
 8008816:	4313      	orrs	r3, r2
 8008818:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800881a:	697b      	ldr	r3, [r7, #20]
 800881c:	f023 030a 	bic.w	r3, r3, #10
 8008820:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008822:	697a      	ldr	r2, [r7, #20]
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	4313      	orrs	r3, r2
 8008828:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	693a      	ldr	r2, [r7, #16]
 800882e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	697a      	ldr	r2, [r7, #20]
 8008834:	621a      	str	r2, [r3, #32]
}
 8008836:	bf00      	nop
 8008838:	371c      	adds	r7, #28
 800883a:	46bd      	mov	sp, r7
 800883c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008840:	4770      	bx	lr

08008842 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008842:	b480      	push	{r7}
 8008844:	b087      	sub	sp, #28
 8008846:	af00      	add	r7, sp, #0
 8008848:	60f8      	str	r0, [r7, #12]
 800884a:	60b9      	str	r1, [r7, #8]
 800884c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	6a1b      	ldr	r3, [r3, #32]
 8008852:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	6a1b      	ldr	r3, [r3, #32]
 8008858:	f023 0210 	bic.w	r2, r3, #16
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	699b      	ldr	r3, [r3, #24]
 8008864:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008866:	693b      	ldr	r3, [r7, #16]
 8008868:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800886c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	031b      	lsls	r3, r3, #12
 8008872:	693a      	ldr	r2, [r7, #16]
 8008874:	4313      	orrs	r3, r2
 8008876:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008878:	697b      	ldr	r3, [r7, #20]
 800887a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800887e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	011b      	lsls	r3, r3, #4
 8008884:	697a      	ldr	r2, [r7, #20]
 8008886:	4313      	orrs	r3, r2
 8008888:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	693a      	ldr	r2, [r7, #16]
 800888e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	697a      	ldr	r2, [r7, #20]
 8008894:	621a      	str	r2, [r3, #32]
}
 8008896:	bf00      	nop
 8008898:	371c      	adds	r7, #28
 800889a:	46bd      	mov	sp, r7
 800889c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a0:	4770      	bx	lr

080088a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80088a2:	b480      	push	{r7}
 80088a4:	b085      	sub	sp, #20
 80088a6:	af00      	add	r7, sp, #0
 80088a8:	6078      	str	r0, [r7, #4]
 80088aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	689b      	ldr	r3, [r3, #8]
 80088b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80088ba:	683a      	ldr	r2, [r7, #0]
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	4313      	orrs	r3, r2
 80088c0:	f043 0307 	orr.w	r3, r3, #7
 80088c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	68fa      	ldr	r2, [r7, #12]
 80088ca:	609a      	str	r2, [r3, #8]
}
 80088cc:	bf00      	nop
 80088ce:	3714      	adds	r7, #20
 80088d0:	46bd      	mov	sp, r7
 80088d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d6:	4770      	bx	lr

080088d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80088d8:	b480      	push	{r7}
 80088da:	b087      	sub	sp, #28
 80088dc:	af00      	add	r7, sp, #0
 80088de:	60f8      	str	r0, [r7, #12]
 80088e0:	60b9      	str	r1, [r7, #8]
 80088e2:	607a      	str	r2, [r7, #4]
 80088e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	689b      	ldr	r3, [r3, #8]
 80088ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80088ec:	697b      	ldr	r3, [r7, #20]
 80088ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80088f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	021a      	lsls	r2, r3, #8
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	431a      	orrs	r2, r3
 80088fc:	68bb      	ldr	r3, [r7, #8]
 80088fe:	4313      	orrs	r3, r2
 8008900:	697a      	ldr	r2, [r7, #20]
 8008902:	4313      	orrs	r3, r2
 8008904:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	697a      	ldr	r2, [r7, #20]
 800890a:	609a      	str	r2, [r3, #8]
}
 800890c:	bf00      	nop
 800890e:	371c      	adds	r7, #28
 8008910:	46bd      	mov	sp, r7
 8008912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008916:	4770      	bx	lr

08008918 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008918:	b480      	push	{r7}
 800891a:	b085      	sub	sp, #20
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
 8008920:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008928:	2b01      	cmp	r3, #1
 800892a:	d101      	bne.n	8008930 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800892c:	2302      	movs	r3, #2
 800892e:	e05a      	b.n	80089e6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2201      	movs	r2, #1
 8008934:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2202      	movs	r2, #2
 800893c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	685b      	ldr	r3, [r3, #4]
 8008946:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	689b      	ldr	r3, [r3, #8]
 800894e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008956:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	68fa      	ldr	r2, [r7, #12]
 800895e:	4313      	orrs	r3, r2
 8008960:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	68fa      	ldr	r2, [r7, #12]
 8008968:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	4a21      	ldr	r2, [pc, #132]	@ (80089f4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008970:	4293      	cmp	r3, r2
 8008972:	d022      	beq.n	80089ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800897c:	d01d      	beq.n	80089ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	4a1d      	ldr	r2, [pc, #116]	@ (80089f8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008984:	4293      	cmp	r3, r2
 8008986:	d018      	beq.n	80089ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	4a1b      	ldr	r2, [pc, #108]	@ (80089fc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800898e:	4293      	cmp	r3, r2
 8008990:	d013      	beq.n	80089ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	4a1a      	ldr	r2, [pc, #104]	@ (8008a00 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008998:	4293      	cmp	r3, r2
 800899a:	d00e      	beq.n	80089ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	4a18      	ldr	r2, [pc, #96]	@ (8008a04 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80089a2:	4293      	cmp	r3, r2
 80089a4:	d009      	beq.n	80089ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	4a17      	ldr	r2, [pc, #92]	@ (8008a08 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80089ac:	4293      	cmp	r3, r2
 80089ae:	d004      	beq.n	80089ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	4a15      	ldr	r2, [pc, #84]	@ (8008a0c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80089b6:	4293      	cmp	r3, r2
 80089b8:	d10c      	bne.n	80089d4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80089c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	685b      	ldr	r3, [r3, #4]
 80089c6:	68ba      	ldr	r2, [r7, #8]
 80089c8:	4313      	orrs	r3, r2
 80089ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	68ba      	ldr	r2, [r7, #8]
 80089d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2201      	movs	r2, #1
 80089d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2200      	movs	r2, #0
 80089e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80089e4:	2300      	movs	r3, #0
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3714      	adds	r7, #20
 80089ea:	46bd      	mov	sp, r7
 80089ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f0:	4770      	bx	lr
 80089f2:	bf00      	nop
 80089f4:	40010000 	.word	0x40010000
 80089f8:	40000400 	.word	0x40000400
 80089fc:	40000800 	.word	0x40000800
 8008a00:	40000c00 	.word	0x40000c00
 8008a04:	40010400 	.word	0x40010400
 8008a08:	40014000 	.word	0x40014000
 8008a0c:	40001800 	.word	0x40001800

08008a10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b082      	sub	sp, #8
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d101      	bne.n	8008a22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008a1e:	2301      	movs	r3, #1
 8008a20:	e042      	b.n	8008aa8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008a28:	b2db      	uxtb	r3, r3
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d106      	bne.n	8008a3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2200      	movs	r2, #0
 8008a32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f7f9 fecc 	bl	80027d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2224      	movs	r2, #36	@ 0x24
 8008a40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	68da      	ldr	r2, [r3, #12]
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008a52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	f000 f973 	bl	8008d40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	691a      	ldr	r2, [r3, #16]
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008a68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	695a      	ldr	r2, [r3, #20]
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008a78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	68da      	ldr	r2, [r3, #12]
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008a88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2220      	movs	r2, #32
 8008a94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2220      	movs	r2, #32
 8008a9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008aa6:	2300      	movs	r3, #0
}
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	3708      	adds	r7, #8
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd80      	pop	{r7, pc}

08008ab0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b08a      	sub	sp, #40	@ 0x28
 8008ab4:	af02      	add	r7, sp, #8
 8008ab6:	60f8      	str	r0, [r7, #12]
 8008ab8:	60b9      	str	r1, [r7, #8]
 8008aba:	603b      	str	r3, [r7, #0]
 8008abc:	4613      	mov	r3, r2
 8008abe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008aca:	b2db      	uxtb	r3, r3
 8008acc:	2b20      	cmp	r3, #32
 8008ace:	d175      	bne.n	8008bbc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d002      	beq.n	8008adc <HAL_UART_Transmit+0x2c>
 8008ad6:	88fb      	ldrh	r3, [r7, #6]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d101      	bne.n	8008ae0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008adc:	2301      	movs	r3, #1
 8008ade:	e06e      	b.n	8008bbe <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	2221      	movs	r2, #33	@ 0x21
 8008aea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008aee:	f7fa f8a7 	bl	8002c40 <HAL_GetTick>
 8008af2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	88fa      	ldrh	r2, [r7, #6]
 8008af8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	88fa      	ldrh	r2, [r7, #6]
 8008afe:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	689b      	ldr	r3, [r3, #8]
 8008b04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b08:	d108      	bne.n	8008b1c <HAL_UART_Transmit+0x6c>
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	691b      	ldr	r3, [r3, #16]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d104      	bne.n	8008b1c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008b12:	2300      	movs	r3, #0
 8008b14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008b16:	68bb      	ldr	r3, [r7, #8]
 8008b18:	61bb      	str	r3, [r7, #24]
 8008b1a:	e003      	b.n	8008b24 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008b20:	2300      	movs	r3, #0
 8008b22:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008b24:	e02e      	b.n	8008b84 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	9300      	str	r3, [sp, #0]
 8008b2a:	697b      	ldr	r3, [r7, #20]
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	2180      	movs	r1, #128	@ 0x80
 8008b30:	68f8      	ldr	r0, [r7, #12]
 8008b32:	f000 f848 	bl	8008bc6 <UART_WaitOnFlagUntilTimeout>
 8008b36:	4603      	mov	r3, r0
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d005      	beq.n	8008b48 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	2220      	movs	r2, #32
 8008b40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8008b44:	2303      	movs	r3, #3
 8008b46:	e03a      	b.n	8008bbe <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8008b48:	69fb      	ldr	r3, [r7, #28]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d10b      	bne.n	8008b66 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008b4e:	69bb      	ldr	r3, [r7, #24]
 8008b50:	881b      	ldrh	r3, [r3, #0]
 8008b52:	461a      	mov	r2, r3
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008b5c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008b5e:	69bb      	ldr	r3, [r7, #24]
 8008b60:	3302      	adds	r3, #2
 8008b62:	61bb      	str	r3, [r7, #24]
 8008b64:	e007      	b.n	8008b76 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008b66:	69fb      	ldr	r3, [r7, #28]
 8008b68:	781a      	ldrb	r2, [r3, #0]
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008b70:	69fb      	ldr	r3, [r7, #28]
 8008b72:	3301      	adds	r3, #1
 8008b74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008b7a:	b29b      	uxth	r3, r3
 8008b7c:	3b01      	subs	r3, #1
 8008b7e:	b29a      	uxth	r2, r3
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008b88:	b29b      	uxth	r3, r3
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d1cb      	bne.n	8008b26 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	9300      	str	r3, [sp, #0]
 8008b92:	697b      	ldr	r3, [r7, #20]
 8008b94:	2200      	movs	r2, #0
 8008b96:	2140      	movs	r1, #64	@ 0x40
 8008b98:	68f8      	ldr	r0, [r7, #12]
 8008b9a:	f000 f814 	bl	8008bc6 <UART_WaitOnFlagUntilTimeout>
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d005      	beq.n	8008bb0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	2220      	movs	r2, #32
 8008ba8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8008bac:	2303      	movs	r3, #3
 8008bae:	e006      	b.n	8008bbe <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	2220      	movs	r2, #32
 8008bb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8008bb8:	2300      	movs	r3, #0
 8008bba:	e000      	b.n	8008bbe <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8008bbc:	2302      	movs	r3, #2
  }
}
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	3720      	adds	r7, #32
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}

08008bc6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008bc6:	b580      	push	{r7, lr}
 8008bc8:	b086      	sub	sp, #24
 8008bca:	af00      	add	r7, sp, #0
 8008bcc:	60f8      	str	r0, [r7, #12]
 8008bce:	60b9      	str	r1, [r7, #8]
 8008bd0:	603b      	str	r3, [r7, #0]
 8008bd2:	4613      	mov	r3, r2
 8008bd4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008bd6:	e03b      	b.n	8008c50 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008bd8:	6a3b      	ldr	r3, [r7, #32]
 8008bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bde:	d037      	beq.n	8008c50 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008be0:	f7fa f82e 	bl	8002c40 <HAL_GetTick>
 8008be4:	4602      	mov	r2, r0
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	1ad3      	subs	r3, r2, r3
 8008bea:	6a3a      	ldr	r2, [r7, #32]
 8008bec:	429a      	cmp	r2, r3
 8008bee:	d302      	bcc.n	8008bf6 <UART_WaitOnFlagUntilTimeout+0x30>
 8008bf0:	6a3b      	ldr	r3, [r7, #32]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d101      	bne.n	8008bfa <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008bf6:	2303      	movs	r3, #3
 8008bf8:	e03a      	b.n	8008c70 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	68db      	ldr	r3, [r3, #12]
 8008c00:	f003 0304 	and.w	r3, r3, #4
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d023      	beq.n	8008c50 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	2b80      	cmp	r3, #128	@ 0x80
 8008c0c:	d020      	beq.n	8008c50 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008c0e:	68bb      	ldr	r3, [r7, #8]
 8008c10:	2b40      	cmp	r3, #64	@ 0x40
 8008c12:	d01d      	beq.n	8008c50 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f003 0308 	and.w	r3, r3, #8
 8008c1e:	2b08      	cmp	r3, #8
 8008c20:	d116      	bne.n	8008c50 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8008c22:	2300      	movs	r3, #0
 8008c24:	617b      	str	r3, [r7, #20]
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	617b      	str	r3, [r7, #20]
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	685b      	ldr	r3, [r3, #4]
 8008c34:	617b      	str	r3, [r7, #20]
 8008c36:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008c38:	68f8      	ldr	r0, [r7, #12]
 8008c3a:	f000 f81d 	bl	8008c78 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	2208      	movs	r2, #8
 8008c42:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	2200      	movs	r2, #0
 8008c48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	e00f      	b.n	8008c70 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	681a      	ldr	r2, [r3, #0]
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	4013      	ands	r3, r2
 8008c5a:	68ba      	ldr	r2, [r7, #8]
 8008c5c:	429a      	cmp	r2, r3
 8008c5e:	bf0c      	ite	eq
 8008c60:	2301      	moveq	r3, #1
 8008c62:	2300      	movne	r3, #0
 8008c64:	b2db      	uxtb	r3, r3
 8008c66:	461a      	mov	r2, r3
 8008c68:	79fb      	ldrb	r3, [r7, #7]
 8008c6a:	429a      	cmp	r2, r3
 8008c6c:	d0b4      	beq.n	8008bd8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008c6e:	2300      	movs	r3, #0
}
 8008c70:	4618      	mov	r0, r3
 8008c72:	3718      	adds	r7, #24
 8008c74:	46bd      	mov	sp, r7
 8008c76:	bd80      	pop	{r7, pc}

08008c78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008c78:	b480      	push	{r7}
 8008c7a:	b095      	sub	sp, #84	@ 0x54
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	330c      	adds	r3, #12
 8008c86:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c8a:	e853 3f00 	ldrex	r3, [r3]
 8008c8e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008c90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c92:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008c96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	330c      	adds	r3, #12
 8008c9e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008ca0:	643a      	str	r2, [r7, #64]	@ 0x40
 8008ca2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ca4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008ca6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008ca8:	e841 2300 	strex	r3, r2, [r1]
 8008cac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008cae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d1e5      	bne.n	8008c80 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	3314      	adds	r3, #20
 8008cba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cbc:	6a3b      	ldr	r3, [r7, #32]
 8008cbe:	e853 3f00 	ldrex	r3, [r3]
 8008cc2:	61fb      	str	r3, [r7, #28]
   return(result);
 8008cc4:	69fb      	ldr	r3, [r7, #28]
 8008cc6:	f023 0301 	bic.w	r3, r3, #1
 8008cca:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	3314      	adds	r3, #20
 8008cd2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008cd4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008cd6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cd8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008cda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008cdc:	e841 2300 	strex	r3, r2, [r1]
 8008ce0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d1e5      	bne.n	8008cb4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008cec:	2b01      	cmp	r3, #1
 8008cee:	d119      	bne.n	8008d24 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	330c      	adds	r3, #12
 8008cf6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	e853 3f00 	ldrex	r3, [r3]
 8008cfe:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	f023 0310 	bic.w	r3, r3, #16
 8008d06:	647b      	str	r3, [r7, #68]	@ 0x44
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	330c      	adds	r3, #12
 8008d0e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008d10:	61ba      	str	r2, [r7, #24]
 8008d12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d14:	6979      	ldr	r1, [r7, #20]
 8008d16:	69ba      	ldr	r2, [r7, #24]
 8008d18:	e841 2300 	strex	r3, r2, [r1]
 8008d1c:	613b      	str	r3, [r7, #16]
   return(result);
 8008d1e:	693b      	ldr	r3, [r7, #16]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d1e5      	bne.n	8008cf0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2220      	movs	r2, #32
 8008d28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008d32:	bf00      	nop
 8008d34:	3754      	adds	r7, #84	@ 0x54
 8008d36:	46bd      	mov	sp, r7
 8008d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3c:	4770      	bx	lr
	...

08008d40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008d40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008d44:	b0c0      	sub	sp, #256	@ 0x100
 8008d46:	af00      	add	r7, sp, #0
 8008d48:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	691b      	ldr	r3, [r3, #16]
 8008d54:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d5c:	68d9      	ldr	r1, [r3, #12]
 8008d5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d62:	681a      	ldr	r2, [r3, #0]
 8008d64:	ea40 0301 	orr.w	r3, r0, r1
 8008d68:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008d6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d6e:	689a      	ldr	r2, [r3, #8]
 8008d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d74:	691b      	ldr	r3, [r3, #16]
 8008d76:	431a      	orrs	r2, r3
 8008d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d7c:	695b      	ldr	r3, [r3, #20]
 8008d7e:	431a      	orrs	r2, r3
 8008d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d84:	69db      	ldr	r3, [r3, #28]
 8008d86:	4313      	orrs	r3, r2
 8008d88:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	68db      	ldr	r3, [r3, #12]
 8008d94:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008d98:	f021 010c 	bic.w	r1, r1, #12
 8008d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008da0:	681a      	ldr	r2, [r3, #0]
 8008da2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008da6:	430b      	orrs	r3, r1
 8008da8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008daa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	695b      	ldr	r3, [r3, #20]
 8008db2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008db6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008dba:	6999      	ldr	r1, [r3, #24]
 8008dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008dc0:	681a      	ldr	r2, [r3, #0]
 8008dc2:	ea40 0301 	orr.w	r3, r0, r1
 8008dc6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008dcc:	681a      	ldr	r2, [r3, #0]
 8008dce:	4b8f      	ldr	r3, [pc, #572]	@ (800900c <UART_SetConfig+0x2cc>)
 8008dd0:	429a      	cmp	r2, r3
 8008dd2:	d005      	beq.n	8008de0 <UART_SetConfig+0xa0>
 8008dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008dd8:	681a      	ldr	r2, [r3, #0]
 8008dda:	4b8d      	ldr	r3, [pc, #564]	@ (8009010 <UART_SetConfig+0x2d0>)
 8008ddc:	429a      	cmp	r2, r3
 8008dde:	d104      	bne.n	8008dea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008de0:	f7fe feb2 	bl	8007b48 <HAL_RCC_GetPCLK2Freq>
 8008de4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008de8:	e003      	b.n	8008df2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008dea:	f7fe fe99 	bl	8007b20 <HAL_RCC_GetPCLK1Freq>
 8008dee:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008df2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008df6:	69db      	ldr	r3, [r3, #28]
 8008df8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008dfc:	f040 810c 	bne.w	8009018 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008e00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008e04:	2200      	movs	r2, #0
 8008e06:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008e0a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008e0e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008e12:	4622      	mov	r2, r4
 8008e14:	462b      	mov	r3, r5
 8008e16:	1891      	adds	r1, r2, r2
 8008e18:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008e1a:	415b      	adcs	r3, r3
 8008e1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008e1e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008e22:	4621      	mov	r1, r4
 8008e24:	eb12 0801 	adds.w	r8, r2, r1
 8008e28:	4629      	mov	r1, r5
 8008e2a:	eb43 0901 	adc.w	r9, r3, r1
 8008e2e:	f04f 0200 	mov.w	r2, #0
 8008e32:	f04f 0300 	mov.w	r3, #0
 8008e36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008e3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008e3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008e42:	4690      	mov	r8, r2
 8008e44:	4699      	mov	r9, r3
 8008e46:	4623      	mov	r3, r4
 8008e48:	eb18 0303 	adds.w	r3, r8, r3
 8008e4c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008e50:	462b      	mov	r3, r5
 8008e52:	eb49 0303 	adc.w	r3, r9, r3
 8008e56:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008e5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e5e:	685b      	ldr	r3, [r3, #4]
 8008e60:	2200      	movs	r2, #0
 8008e62:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008e66:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008e6a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008e6e:	460b      	mov	r3, r1
 8008e70:	18db      	adds	r3, r3, r3
 8008e72:	653b      	str	r3, [r7, #80]	@ 0x50
 8008e74:	4613      	mov	r3, r2
 8008e76:	eb42 0303 	adc.w	r3, r2, r3
 8008e7a:	657b      	str	r3, [r7, #84]	@ 0x54
 8008e7c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008e80:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008e84:	f7f7 ff00 	bl	8000c88 <__aeabi_uldivmod>
 8008e88:	4602      	mov	r2, r0
 8008e8a:	460b      	mov	r3, r1
 8008e8c:	4b61      	ldr	r3, [pc, #388]	@ (8009014 <UART_SetConfig+0x2d4>)
 8008e8e:	fba3 2302 	umull	r2, r3, r3, r2
 8008e92:	095b      	lsrs	r3, r3, #5
 8008e94:	011c      	lsls	r4, r3, #4
 8008e96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008ea0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008ea4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008ea8:	4642      	mov	r2, r8
 8008eaa:	464b      	mov	r3, r9
 8008eac:	1891      	adds	r1, r2, r2
 8008eae:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008eb0:	415b      	adcs	r3, r3
 8008eb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008eb4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008eb8:	4641      	mov	r1, r8
 8008eba:	eb12 0a01 	adds.w	sl, r2, r1
 8008ebe:	4649      	mov	r1, r9
 8008ec0:	eb43 0b01 	adc.w	fp, r3, r1
 8008ec4:	f04f 0200 	mov.w	r2, #0
 8008ec8:	f04f 0300 	mov.w	r3, #0
 8008ecc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008ed0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008ed4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008ed8:	4692      	mov	sl, r2
 8008eda:	469b      	mov	fp, r3
 8008edc:	4643      	mov	r3, r8
 8008ede:	eb1a 0303 	adds.w	r3, sl, r3
 8008ee2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008ee6:	464b      	mov	r3, r9
 8008ee8:	eb4b 0303 	adc.w	r3, fp, r3
 8008eec:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ef4:	685b      	ldr	r3, [r3, #4]
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008efc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008f00:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008f04:	460b      	mov	r3, r1
 8008f06:	18db      	adds	r3, r3, r3
 8008f08:	643b      	str	r3, [r7, #64]	@ 0x40
 8008f0a:	4613      	mov	r3, r2
 8008f0c:	eb42 0303 	adc.w	r3, r2, r3
 8008f10:	647b      	str	r3, [r7, #68]	@ 0x44
 8008f12:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008f16:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008f1a:	f7f7 feb5 	bl	8000c88 <__aeabi_uldivmod>
 8008f1e:	4602      	mov	r2, r0
 8008f20:	460b      	mov	r3, r1
 8008f22:	4611      	mov	r1, r2
 8008f24:	4b3b      	ldr	r3, [pc, #236]	@ (8009014 <UART_SetConfig+0x2d4>)
 8008f26:	fba3 2301 	umull	r2, r3, r3, r1
 8008f2a:	095b      	lsrs	r3, r3, #5
 8008f2c:	2264      	movs	r2, #100	@ 0x64
 8008f2e:	fb02 f303 	mul.w	r3, r2, r3
 8008f32:	1acb      	subs	r3, r1, r3
 8008f34:	00db      	lsls	r3, r3, #3
 8008f36:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008f3a:	4b36      	ldr	r3, [pc, #216]	@ (8009014 <UART_SetConfig+0x2d4>)
 8008f3c:	fba3 2302 	umull	r2, r3, r3, r2
 8008f40:	095b      	lsrs	r3, r3, #5
 8008f42:	005b      	lsls	r3, r3, #1
 8008f44:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008f48:	441c      	add	r4, r3
 8008f4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008f4e:	2200      	movs	r2, #0
 8008f50:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008f54:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008f58:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008f5c:	4642      	mov	r2, r8
 8008f5e:	464b      	mov	r3, r9
 8008f60:	1891      	adds	r1, r2, r2
 8008f62:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008f64:	415b      	adcs	r3, r3
 8008f66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008f68:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008f6c:	4641      	mov	r1, r8
 8008f6e:	1851      	adds	r1, r2, r1
 8008f70:	6339      	str	r1, [r7, #48]	@ 0x30
 8008f72:	4649      	mov	r1, r9
 8008f74:	414b      	adcs	r3, r1
 8008f76:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f78:	f04f 0200 	mov.w	r2, #0
 8008f7c:	f04f 0300 	mov.w	r3, #0
 8008f80:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008f84:	4659      	mov	r1, fp
 8008f86:	00cb      	lsls	r3, r1, #3
 8008f88:	4651      	mov	r1, sl
 8008f8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008f8e:	4651      	mov	r1, sl
 8008f90:	00ca      	lsls	r2, r1, #3
 8008f92:	4610      	mov	r0, r2
 8008f94:	4619      	mov	r1, r3
 8008f96:	4603      	mov	r3, r0
 8008f98:	4642      	mov	r2, r8
 8008f9a:	189b      	adds	r3, r3, r2
 8008f9c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008fa0:	464b      	mov	r3, r9
 8008fa2:	460a      	mov	r2, r1
 8008fa4:	eb42 0303 	adc.w	r3, r2, r3
 8008fa8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008fb0:	685b      	ldr	r3, [r3, #4]
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008fb8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008fbc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008fc0:	460b      	mov	r3, r1
 8008fc2:	18db      	adds	r3, r3, r3
 8008fc4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008fc6:	4613      	mov	r3, r2
 8008fc8:	eb42 0303 	adc.w	r3, r2, r3
 8008fcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008fce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008fd2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008fd6:	f7f7 fe57 	bl	8000c88 <__aeabi_uldivmod>
 8008fda:	4602      	mov	r2, r0
 8008fdc:	460b      	mov	r3, r1
 8008fde:	4b0d      	ldr	r3, [pc, #52]	@ (8009014 <UART_SetConfig+0x2d4>)
 8008fe0:	fba3 1302 	umull	r1, r3, r3, r2
 8008fe4:	095b      	lsrs	r3, r3, #5
 8008fe6:	2164      	movs	r1, #100	@ 0x64
 8008fe8:	fb01 f303 	mul.w	r3, r1, r3
 8008fec:	1ad3      	subs	r3, r2, r3
 8008fee:	00db      	lsls	r3, r3, #3
 8008ff0:	3332      	adds	r3, #50	@ 0x32
 8008ff2:	4a08      	ldr	r2, [pc, #32]	@ (8009014 <UART_SetConfig+0x2d4>)
 8008ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8008ff8:	095b      	lsrs	r3, r3, #5
 8008ffa:	f003 0207 	and.w	r2, r3, #7
 8008ffe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	4422      	add	r2, r4
 8009006:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009008:	e106      	b.n	8009218 <UART_SetConfig+0x4d8>
 800900a:	bf00      	nop
 800900c:	40011000 	.word	0x40011000
 8009010:	40011400 	.word	0x40011400
 8009014:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009018:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800901c:	2200      	movs	r2, #0
 800901e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009022:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009026:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800902a:	4642      	mov	r2, r8
 800902c:	464b      	mov	r3, r9
 800902e:	1891      	adds	r1, r2, r2
 8009030:	6239      	str	r1, [r7, #32]
 8009032:	415b      	adcs	r3, r3
 8009034:	627b      	str	r3, [r7, #36]	@ 0x24
 8009036:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800903a:	4641      	mov	r1, r8
 800903c:	1854      	adds	r4, r2, r1
 800903e:	4649      	mov	r1, r9
 8009040:	eb43 0501 	adc.w	r5, r3, r1
 8009044:	f04f 0200 	mov.w	r2, #0
 8009048:	f04f 0300 	mov.w	r3, #0
 800904c:	00eb      	lsls	r3, r5, #3
 800904e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009052:	00e2      	lsls	r2, r4, #3
 8009054:	4614      	mov	r4, r2
 8009056:	461d      	mov	r5, r3
 8009058:	4643      	mov	r3, r8
 800905a:	18e3      	adds	r3, r4, r3
 800905c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009060:	464b      	mov	r3, r9
 8009062:	eb45 0303 	adc.w	r3, r5, r3
 8009066:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800906a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800906e:	685b      	ldr	r3, [r3, #4]
 8009070:	2200      	movs	r2, #0
 8009072:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009076:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800907a:	f04f 0200 	mov.w	r2, #0
 800907e:	f04f 0300 	mov.w	r3, #0
 8009082:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009086:	4629      	mov	r1, r5
 8009088:	008b      	lsls	r3, r1, #2
 800908a:	4621      	mov	r1, r4
 800908c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009090:	4621      	mov	r1, r4
 8009092:	008a      	lsls	r2, r1, #2
 8009094:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009098:	f7f7 fdf6 	bl	8000c88 <__aeabi_uldivmod>
 800909c:	4602      	mov	r2, r0
 800909e:	460b      	mov	r3, r1
 80090a0:	4b60      	ldr	r3, [pc, #384]	@ (8009224 <UART_SetConfig+0x4e4>)
 80090a2:	fba3 2302 	umull	r2, r3, r3, r2
 80090a6:	095b      	lsrs	r3, r3, #5
 80090a8:	011c      	lsls	r4, r3, #4
 80090aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80090ae:	2200      	movs	r2, #0
 80090b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80090b4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80090b8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80090bc:	4642      	mov	r2, r8
 80090be:	464b      	mov	r3, r9
 80090c0:	1891      	adds	r1, r2, r2
 80090c2:	61b9      	str	r1, [r7, #24]
 80090c4:	415b      	adcs	r3, r3
 80090c6:	61fb      	str	r3, [r7, #28]
 80090c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80090cc:	4641      	mov	r1, r8
 80090ce:	1851      	adds	r1, r2, r1
 80090d0:	6139      	str	r1, [r7, #16]
 80090d2:	4649      	mov	r1, r9
 80090d4:	414b      	adcs	r3, r1
 80090d6:	617b      	str	r3, [r7, #20]
 80090d8:	f04f 0200 	mov.w	r2, #0
 80090dc:	f04f 0300 	mov.w	r3, #0
 80090e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80090e4:	4659      	mov	r1, fp
 80090e6:	00cb      	lsls	r3, r1, #3
 80090e8:	4651      	mov	r1, sl
 80090ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80090ee:	4651      	mov	r1, sl
 80090f0:	00ca      	lsls	r2, r1, #3
 80090f2:	4610      	mov	r0, r2
 80090f4:	4619      	mov	r1, r3
 80090f6:	4603      	mov	r3, r0
 80090f8:	4642      	mov	r2, r8
 80090fa:	189b      	adds	r3, r3, r2
 80090fc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009100:	464b      	mov	r3, r9
 8009102:	460a      	mov	r2, r1
 8009104:	eb42 0303 	adc.w	r3, r2, r3
 8009108:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800910c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009110:	685b      	ldr	r3, [r3, #4]
 8009112:	2200      	movs	r2, #0
 8009114:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009116:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009118:	f04f 0200 	mov.w	r2, #0
 800911c:	f04f 0300 	mov.w	r3, #0
 8009120:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009124:	4649      	mov	r1, r9
 8009126:	008b      	lsls	r3, r1, #2
 8009128:	4641      	mov	r1, r8
 800912a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800912e:	4641      	mov	r1, r8
 8009130:	008a      	lsls	r2, r1, #2
 8009132:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009136:	f7f7 fda7 	bl	8000c88 <__aeabi_uldivmod>
 800913a:	4602      	mov	r2, r0
 800913c:	460b      	mov	r3, r1
 800913e:	4611      	mov	r1, r2
 8009140:	4b38      	ldr	r3, [pc, #224]	@ (8009224 <UART_SetConfig+0x4e4>)
 8009142:	fba3 2301 	umull	r2, r3, r3, r1
 8009146:	095b      	lsrs	r3, r3, #5
 8009148:	2264      	movs	r2, #100	@ 0x64
 800914a:	fb02 f303 	mul.w	r3, r2, r3
 800914e:	1acb      	subs	r3, r1, r3
 8009150:	011b      	lsls	r3, r3, #4
 8009152:	3332      	adds	r3, #50	@ 0x32
 8009154:	4a33      	ldr	r2, [pc, #204]	@ (8009224 <UART_SetConfig+0x4e4>)
 8009156:	fba2 2303 	umull	r2, r3, r2, r3
 800915a:	095b      	lsrs	r3, r3, #5
 800915c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009160:	441c      	add	r4, r3
 8009162:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009166:	2200      	movs	r2, #0
 8009168:	673b      	str	r3, [r7, #112]	@ 0x70
 800916a:	677a      	str	r2, [r7, #116]	@ 0x74
 800916c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009170:	4642      	mov	r2, r8
 8009172:	464b      	mov	r3, r9
 8009174:	1891      	adds	r1, r2, r2
 8009176:	60b9      	str	r1, [r7, #8]
 8009178:	415b      	adcs	r3, r3
 800917a:	60fb      	str	r3, [r7, #12]
 800917c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009180:	4641      	mov	r1, r8
 8009182:	1851      	adds	r1, r2, r1
 8009184:	6039      	str	r1, [r7, #0]
 8009186:	4649      	mov	r1, r9
 8009188:	414b      	adcs	r3, r1
 800918a:	607b      	str	r3, [r7, #4]
 800918c:	f04f 0200 	mov.w	r2, #0
 8009190:	f04f 0300 	mov.w	r3, #0
 8009194:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009198:	4659      	mov	r1, fp
 800919a:	00cb      	lsls	r3, r1, #3
 800919c:	4651      	mov	r1, sl
 800919e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80091a2:	4651      	mov	r1, sl
 80091a4:	00ca      	lsls	r2, r1, #3
 80091a6:	4610      	mov	r0, r2
 80091a8:	4619      	mov	r1, r3
 80091aa:	4603      	mov	r3, r0
 80091ac:	4642      	mov	r2, r8
 80091ae:	189b      	adds	r3, r3, r2
 80091b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80091b2:	464b      	mov	r3, r9
 80091b4:	460a      	mov	r2, r1
 80091b6:	eb42 0303 	adc.w	r3, r2, r3
 80091ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80091bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80091c0:	685b      	ldr	r3, [r3, #4]
 80091c2:	2200      	movs	r2, #0
 80091c4:	663b      	str	r3, [r7, #96]	@ 0x60
 80091c6:	667a      	str	r2, [r7, #100]	@ 0x64
 80091c8:	f04f 0200 	mov.w	r2, #0
 80091cc:	f04f 0300 	mov.w	r3, #0
 80091d0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80091d4:	4649      	mov	r1, r9
 80091d6:	008b      	lsls	r3, r1, #2
 80091d8:	4641      	mov	r1, r8
 80091da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80091de:	4641      	mov	r1, r8
 80091e0:	008a      	lsls	r2, r1, #2
 80091e2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80091e6:	f7f7 fd4f 	bl	8000c88 <__aeabi_uldivmod>
 80091ea:	4602      	mov	r2, r0
 80091ec:	460b      	mov	r3, r1
 80091ee:	4b0d      	ldr	r3, [pc, #52]	@ (8009224 <UART_SetConfig+0x4e4>)
 80091f0:	fba3 1302 	umull	r1, r3, r3, r2
 80091f4:	095b      	lsrs	r3, r3, #5
 80091f6:	2164      	movs	r1, #100	@ 0x64
 80091f8:	fb01 f303 	mul.w	r3, r1, r3
 80091fc:	1ad3      	subs	r3, r2, r3
 80091fe:	011b      	lsls	r3, r3, #4
 8009200:	3332      	adds	r3, #50	@ 0x32
 8009202:	4a08      	ldr	r2, [pc, #32]	@ (8009224 <UART_SetConfig+0x4e4>)
 8009204:	fba2 2303 	umull	r2, r3, r2, r3
 8009208:	095b      	lsrs	r3, r3, #5
 800920a:	f003 020f 	and.w	r2, r3, #15
 800920e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	4422      	add	r2, r4
 8009216:	609a      	str	r2, [r3, #8]
}
 8009218:	bf00      	nop
 800921a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800921e:	46bd      	mov	sp, r7
 8009220:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009224:	51eb851f 	.word	0x51eb851f

08009228 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009228:	b084      	sub	sp, #16
 800922a:	b580      	push	{r7, lr}
 800922c:	b084      	sub	sp, #16
 800922e:	af00      	add	r7, sp, #0
 8009230:	6078      	str	r0, [r7, #4]
 8009232:	f107 001c 	add.w	r0, r7, #28
 8009236:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800923a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800923e:	2b01      	cmp	r3, #1
 8009240:	d123      	bne.n	800928a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009246:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	68db      	ldr	r3, [r3, #12]
 8009252:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8009256:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800925a:	687a      	ldr	r2, [r7, #4]
 800925c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	68db      	ldr	r3, [r3, #12]
 8009262:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800926a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800926e:	2b01      	cmp	r3, #1
 8009270:	d105      	bne.n	800927e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	68db      	ldr	r3, [r3, #12]
 8009276:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	f001 fae8 	bl	800a854 <USB_CoreReset>
 8009284:	4603      	mov	r3, r0
 8009286:	73fb      	strb	r3, [r7, #15]
 8009288:	e01b      	b.n	80092c2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	68db      	ldr	r3, [r3, #12]
 800928e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	f001 fadc 	bl	800a854 <USB_CoreReset>
 800929c:	4603      	mov	r3, r0
 800929e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80092a0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d106      	bne.n	80092b6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092ac:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	639a      	str	r2, [r3, #56]	@ 0x38
 80092b4:	e005      	b.n	80092c2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092ba:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80092c2:	7fbb      	ldrb	r3, [r7, #30]
 80092c4:	2b01      	cmp	r3, #1
 80092c6:	d10b      	bne.n	80092e0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	689b      	ldr	r3, [r3, #8]
 80092cc:	f043 0206 	orr.w	r2, r3, #6
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	689b      	ldr	r3, [r3, #8]
 80092d8:	f043 0220 	orr.w	r2, r3, #32
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80092e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80092e2:	4618      	mov	r0, r3
 80092e4:	3710      	adds	r7, #16
 80092e6:	46bd      	mov	sp, r7
 80092e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80092ec:	b004      	add	sp, #16
 80092ee:	4770      	bx	lr

080092f0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80092f0:	b480      	push	{r7}
 80092f2:	b087      	sub	sp, #28
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	60f8      	str	r0, [r7, #12]
 80092f8:	60b9      	str	r1, [r7, #8]
 80092fa:	4613      	mov	r3, r2
 80092fc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80092fe:	79fb      	ldrb	r3, [r7, #7]
 8009300:	2b02      	cmp	r3, #2
 8009302:	d165      	bne.n	80093d0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009304:	68bb      	ldr	r3, [r7, #8]
 8009306:	4a41      	ldr	r2, [pc, #260]	@ (800940c <USB_SetTurnaroundTime+0x11c>)
 8009308:	4293      	cmp	r3, r2
 800930a:	d906      	bls.n	800931a <USB_SetTurnaroundTime+0x2a>
 800930c:	68bb      	ldr	r3, [r7, #8]
 800930e:	4a40      	ldr	r2, [pc, #256]	@ (8009410 <USB_SetTurnaroundTime+0x120>)
 8009310:	4293      	cmp	r3, r2
 8009312:	d202      	bcs.n	800931a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009314:	230f      	movs	r3, #15
 8009316:	617b      	str	r3, [r7, #20]
 8009318:	e062      	b.n	80093e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800931a:	68bb      	ldr	r3, [r7, #8]
 800931c:	4a3c      	ldr	r2, [pc, #240]	@ (8009410 <USB_SetTurnaroundTime+0x120>)
 800931e:	4293      	cmp	r3, r2
 8009320:	d306      	bcc.n	8009330 <USB_SetTurnaroundTime+0x40>
 8009322:	68bb      	ldr	r3, [r7, #8]
 8009324:	4a3b      	ldr	r2, [pc, #236]	@ (8009414 <USB_SetTurnaroundTime+0x124>)
 8009326:	4293      	cmp	r3, r2
 8009328:	d202      	bcs.n	8009330 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800932a:	230e      	movs	r3, #14
 800932c:	617b      	str	r3, [r7, #20]
 800932e:	e057      	b.n	80093e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009330:	68bb      	ldr	r3, [r7, #8]
 8009332:	4a38      	ldr	r2, [pc, #224]	@ (8009414 <USB_SetTurnaroundTime+0x124>)
 8009334:	4293      	cmp	r3, r2
 8009336:	d306      	bcc.n	8009346 <USB_SetTurnaroundTime+0x56>
 8009338:	68bb      	ldr	r3, [r7, #8]
 800933a:	4a37      	ldr	r2, [pc, #220]	@ (8009418 <USB_SetTurnaroundTime+0x128>)
 800933c:	4293      	cmp	r3, r2
 800933e:	d202      	bcs.n	8009346 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009340:	230d      	movs	r3, #13
 8009342:	617b      	str	r3, [r7, #20]
 8009344:	e04c      	b.n	80093e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009346:	68bb      	ldr	r3, [r7, #8]
 8009348:	4a33      	ldr	r2, [pc, #204]	@ (8009418 <USB_SetTurnaroundTime+0x128>)
 800934a:	4293      	cmp	r3, r2
 800934c:	d306      	bcc.n	800935c <USB_SetTurnaroundTime+0x6c>
 800934e:	68bb      	ldr	r3, [r7, #8]
 8009350:	4a32      	ldr	r2, [pc, #200]	@ (800941c <USB_SetTurnaroundTime+0x12c>)
 8009352:	4293      	cmp	r3, r2
 8009354:	d802      	bhi.n	800935c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009356:	230c      	movs	r3, #12
 8009358:	617b      	str	r3, [r7, #20]
 800935a:	e041      	b.n	80093e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	4a2f      	ldr	r2, [pc, #188]	@ (800941c <USB_SetTurnaroundTime+0x12c>)
 8009360:	4293      	cmp	r3, r2
 8009362:	d906      	bls.n	8009372 <USB_SetTurnaroundTime+0x82>
 8009364:	68bb      	ldr	r3, [r7, #8]
 8009366:	4a2e      	ldr	r2, [pc, #184]	@ (8009420 <USB_SetTurnaroundTime+0x130>)
 8009368:	4293      	cmp	r3, r2
 800936a:	d802      	bhi.n	8009372 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800936c:	230b      	movs	r3, #11
 800936e:	617b      	str	r3, [r7, #20]
 8009370:	e036      	b.n	80093e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009372:	68bb      	ldr	r3, [r7, #8]
 8009374:	4a2a      	ldr	r2, [pc, #168]	@ (8009420 <USB_SetTurnaroundTime+0x130>)
 8009376:	4293      	cmp	r3, r2
 8009378:	d906      	bls.n	8009388 <USB_SetTurnaroundTime+0x98>
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	4a29      	ldr	r2, [pc, #164]	@ (8009424 <USB_SetTurnaroundTime+0x134>)
 800937e:	4293      	cmp	r3, r2
 8009380:	d802      	bhi.n	8009388 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009382:	230a      	movs	r3, #10
 8009384:	617b      	str	r3, [r7, #20]
 8009386:	e02b      	b.n	80093e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009388:	68bb      	ldr	r3, [r7, #8]
 800938a:	4a26      	ldr	r2, [pc, #152]	@ (8009424 <USB_SetTurnaroundTime+0x134>)
 800938c:	4293      	cmp	r3, r2
 800938e:	d906      	bls.n	800939e <USB_SetTurnaroundTime+0xae>
 8009390:	68bb      	ldr	r3, [r7, #8]
 8009392:	4a25      	ldr	r2, [pc, #148]	@ (8009428 <USB_SetTurnaroundTime+0x138>)
 8009394:	4293      	cmp	r3, r2
 8009396:	d202      	bcs.n	800939e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009398:	2309      	movs	r3, #9
 800939a:	617b      	str	r3, [r7, #20]
 800939c:	e020      	b.n	80093e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	4a21      	ldr	r2, [pc, #132]	@ (8009428 <USB_SetTurnaroundTime+0x138>)
 80093a2:	4293      	cmp	r3, r2
 80093a4:	d306      	bcc.n	80093b4 <USB_SetTurnaroundTime+0xc4>
 80093a6:	68bb      	ldr	r3, [r7, #8]
 80093a8:	4a20      	ldr	r2, [pc, #128]	@ (800942c <USB_SetTurnaroundTime+0x13c>)
 80093aa:	4293      	cmp	r3, r2
 80093ac:	d802      	bhi.n	80093b4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80093ae:	2308      	movs	r3, #8
 80093b0:	617b      	str	r3, [r7, #20]
 80093b2:	e015      	b.n	80093e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80093b4:	68bb      	ldr	r3, [r7, #8]
 80093b6:	4a1d      	ldr	r2, [pc, #116]	@ (800942c <USB_SetTurnaroundTime+0x13c>)
 80093b8:	4293      	cmp	r3, r2
 80093ba:	d906      	bls.n	80093ca <USB_SetTurnaroundTime+0xda>
 80093bc:	68bb      	ldr	r3, [r7, #8]
 80093be:	4a1c      	ldr	r2, [pc, #112]	@ (8009430 <USB_SetTurnaroundTime+0x140>)
 80093c0:	4293      	cmp	r3, r2
 80093c2:	d202      	bcs.n	80093ca <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80093c4:	2307      	movs	r3, #7
 80093c6:	617b      	str	r3, [r7, #20]
 80093c8:	e00a      	b.n	80093e0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80093ca:	2306      	movs	r3, #6
 80093cc:	617b      	str	r3, [r7, #20]
 80093ce:	e007      	b.n	80093e0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80093d0:	79fb      	ldrb	r3, [r7, #7]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d102      	bne.n	80093dc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80093d6:	2309      	movs	r3, #9
 80093d8:	617b      	str	r3, [r7, #20]
 80093da:	e001      	b.n	80093e0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80093dc:	2309      	movs	r3, #9
 80093de:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	68db      	ldr	r3, [r3, #12]
 80093e4:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	68da      	ldr	r2, [r3, #12]
 80093f0:	697b      	ldr	r3, [r7, #20]
 80093f2:	029b      	lsls	r3, r3, #10
 80093f4:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80093f8:	431a      	orrs	r2, r3
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80093fe:	2300      	movs	r3, #0
}
 8009400:	4618      	mov	r0, r3
 8009402:	371c      	adds	r7, #28
 8009404:	46bd      	mov	sp, r7
 8009406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940a:	4770      	bx	lr
 800940c:	00d8acbf 	.word	0x00d8acbf
 8009410:	00e4e1c0 	.word	0x00e4e1c0
 8009414:	00f42400 	.word	0x00f42400
 8009418:	01067380 	.word	0x01067380
 800941c:	011a499f 	.word	0x011a499f
 8009420:	01312cff 	.word	0x01312cff
 8009424:	014ca43f 	.word	0x014ca43f
 8009428:	016e3600 	.word	0x016e3600
 800942c:	01a6ab1f 	.word	0x01a6ab1f
 8009430:	01e84800 	.word	0x01e84800

08009434 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009434:	b480      	push	{r7}
 8009436:	b083      	sub	sp, #12
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	689b      	ldr	r3, [r3, #8]
 8009440:	f043 0201 	orr.w	r2, r3, #1
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009448:	2300      	movs	r3, #0
}
 800944a:	4618      	mov	r0, r3
 800944c:	370c      	adds	r7, #12
 800944e:	46bd      	mov	sp, r7
 8009450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009454:	4770      	bx	lr

08009456 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009456:	b480      	push	{r7}
 8009458:	b083      	sub	sp, #12
 800945a:	af00      	add	r7, sp, #0
 800945c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	689b      	ldr	r3, [r3, #8]
 8009462:	f023 0201 	bic.w	r2, r3, #1
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800946a:	2300      	movs	r3, #0
}
 800946c:	4618      	mov	r0, r3
 800946e:	370c      	adds	r7, #12
 8009470:	46bd      	mov	sp, r7
 8009472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009476:	4770      	bx	lr

08009478 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b084      	sub	sp, #16
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
 8009480:	460b      	mov	r3, r1
 8009482:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009484:	2300      	movs	r3, #0
 8009486:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	68db      	ldr	r3, [r3, #12]
 800948c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009494:	78fb      	ldrb	r3, [r7, #3]
 8009496:	2b01      	cmp	r3, #1
 8009498:	d115      	bne.n	80094c6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	68db      	ldr	r3, [r3, #12]
 800949e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80094a6:	200a      	movs	r0, #10
 80094a8:	f7f9 fbd6 	bl	8002c58 <HAL_Delay>
      ms += 10U;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	330a      	adds	r3, #10
 80094b0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f001 f93f 	bl	800a736 <USB_GetMode>
 80094b8:	4603      	mov	r3, r0
 80094ba:	2b01      	cmp	r3, #1
 80094bc:	d01e      	beq.n	80094fc <USB_SetCurrentMode+0x84>
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	2bc7      	cmp	r3, #199	@ 0xc7
 80094c2:	d9f0      	bls.n	80094a6 <USB_SetCurrentMode+0x2e>
 80094c4:	e01a      	b.n	80094fc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80094c6:	78fb      	ldrb	r3, [r7, #3]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d115      	bne.n	80094f8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	68db      	ldr	r3, [r3, #12]
 80094d0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80094d8:	200a      	movs	r0, #10
 80094da:	f7f9 fbbd 	bl	8002c58 <HAL_Delay>
      ms += 10U;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	330a      	adds	r3, #10
 80094e2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80094e4:	6878      	ldr	r0, [r7, #4]
 80094e6:	f001 f926 	bl	800a736 <USB_GetMode>
 80094ea:	4603      	mov	r3, r0
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d005      	beq.n	80094fc <USB_SetCurrentMode+0x84>
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	2bc7      	cmp	r3, #199	@ 0xc7
 80094f4:	d9f0      	bls.n	80094d8 <USB_SetCurrentMode+0x60>
 80094f6:	e001      	b.n	80094fc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80094f8:	2301      	movs	r3, #1
 80094fa:	e005      	b.n	8009508 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	2bc8      	cmp	r3, #200	@ 0xc8
 8009500:	d101      	bne.n	8009506 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009502:	2301      	movs	r3, #1
 8009504:	e000      	b.n	8009508 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009506:	2300      	movs	r3, #0
}
 8009508:	4618      	mov	r0, r3
 800950a:	3710      	adds	r7, #16
 800950c:	46bd      	mov	sp, r7
 800950e:	bd80      	pop	{r7, pc}

08009510 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009510:	b084      	sub	sp, #16
 8009512:	b580      	push	{r7, lr}
 8009514:	b086      	sub	sp, #24
 8009516:	af00      	add	r7, sp, #0
 8009518:	6078      	str	r0, [r7, #4]
 800951a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800951e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009522:	2300      	movs	r3, #0
 8009524:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800952a:	2300      	movs	r3, #0
 800952c:	613b      	str	r3, [r7, #16]
 800952e:	e009      	b.n	8009544 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009530:	687a      	ldr	r2, [r7, #4]
 8009532:	693b      	ldr	r3, [r7, #16]
 8009534:	3340      	adds	r3, #64	@ 0x40
 8009536:	009b      	lsls	r3, r3, #2
 8009538:	4413      	add	r3, r2
 800953a:	2200      	movs	r2, #0
 800953c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800953e:	693b      	ldr	r3, [r7, #16]
 8009540:	3301      	adds	r3, #1
 8009542:	613b      	str	r3, [r7, #16]
 8009544:	693b      	ldr	r3, [r7, #16]
 8009546:	2b0e      	cmp	r3, #14
 8009548:	d9f2      	bls.n	8009530 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800954a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800954e:	2b00      	cmp	r3, #0
 8009550:	d11c      	bne.n	800958c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009558:	685b      	ldr	r3, [r3, #4]
 800955a:	68fa      	ldr	r2, [r7, #12]
 800955c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009560:	f043 0302 	orr.w	r3, r3, #2
 8009564:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800956a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009576:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009582:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	639a      	str	r2, [r3, #56]	@ 0x38
 800958a:	e00b      	b.n	80095a4 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009590:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800959c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80095aa:	461a      	mov	r2, r3
 80095ac:	2300      	movs	r3, #0
 80095ae:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80095b0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80095b4:	2b01      	cmp	r3, #1
 80095b6:	d10d      	bne.n	80095d4 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80095b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d104      	bne.n	80095ca <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80095c0:	2100      	movs	r1, #0
 80095c2:	6878      	ldr	r0, [r7, #4]
 80095c4:	f000 f968 	bl	8009898 <USB_SetDevSpeed>
 80095c8:	e008      	b.n	80095dc <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80095ca:	2101      	movs	r1, #1
 80095cc:	6878      	ldr	r0, [r7, #4]
 80095ce:	f000 f963 	bl	8009898 <USB_SetDevSpeed>
 80095d2:	e003      	b.n	80095dc <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80095d4:	2103      	movs	r1, #3
 80095d6:	6878      	ldr	r0, [r7, #4]
 80095d8:	f000 f95e 	bl	8009898 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80095dc:	2110      	movs	r1, #16
 80095de:	6878      	ldr	r0, [r7, #4]
 80095e0:	f000 f8fa 	bl	80097d8 <USB_FlushTxFifo>
 80095e4:	4603      	mov	r3, r0
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d001      	beq.n	80095ee <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80095ea:	2301      	movs	r3, #1
 80095ec:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	f000 f924 	bl	800983c <USB_FlushRxFifo>
 80095f4:	4603      	mov	r3, r0
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d001      	beq.n	80095fe <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80095fa:	2301      	movs	r3, #1
 80095fc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009604:	461a      	mov	r2, r3
 8009606:	2300      	movs	r3, #0
 8009608:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009610:	461a      	mov	r2, r3
 8009612:	2300      	movs	r3, #0
 8009614:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800961c:	461a      	mov	r2, r3
 800961e:	2300      	movs	r3, #0
 8009620:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009622:	2300      	movs	r3, #0
 8009624:	613b      	str	r3, [r7, #16]
 8009626:	e043      	b.n	80096b0 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009628:	693b      	ldr	r3, [r7, #16]
 800962a:	015a      	lsls	r2, r3, #5
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	4413      	add	r3, r2
 8009630:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800963a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800963e:	d118      	bne.n	8009672 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8009640:	693b      	ldr	r3, [r7, #16]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d10a      	bne.n	800965c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009646:	693b      	ldr	r3, [r7, #16]
 8009648:	015a      	lsls	r2, r3, #5
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	4413      	add	r3, r2
 800964e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009652:	461a      	mov	r2, r3
 8009654:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009658:	6013      	str	r3, [r2, #0]
 800965a:	e013      	b.n	8009684 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800965c:	693b      	ldr	r3, [r7, #16]
 800965e:	015a      	lsls	r2, r3, #5
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	4413      	add	r3, r2
 8009664:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009668:	461a      	mov	r2, r3
 800966a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800966e:	6013      	str	r3, [r2, #0]
 8009670:	e008      	b.n	8009684 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009672:	693b      	ldr	r3, [r7, #16]
 8009674:	015a      	lsls	r2, r3, #5
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	4413      	add	r3, r2
 800967a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800967e:	461a      	mov	r2, r3
 8009680:	2300      	movs	r3, #0
 8009682:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009684:	693b      	ldr	r3, [r7, #16]
 8009686:	015a      	lsls	r2, r3, #5
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	4413      	add	r3, r2
 800968c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009690:	461a      	mov	r2, r3
 8009692:	2300      	movs	r3, #0
 8009694:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009696:	693b      	ldr	r3, [r7, #16]
 8009698:	015a      	lsls	r2, r3, #5
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	4413      	add	r3, r2
 800969e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096a2:	461a      	mov	r2, r3
 80096a4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80096a8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80096aa:	693b      	ldr	r3, [r7, #16]
 80096ac:	3301      	adds	r3, #1
 80096ae:	613b      	str	r3, [r7, #16]
 80096b0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80096b4:	461a      	mov	r2, r3
 80096b6:	693b      	ldr	r3, [r7, #16]
 80096b8:	4293      	cmp	r3, r2
 80096ba:	d3b5      	bcc.n	8009628 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80096bc:	2300      	movs	r3, #0
 80096be:	613b      	str	r3, [r7, #16]
 80096c0:	e043      	b.n	800974a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80096c2:	693b      	ldr	r3, [r7, #16]
 80096c4:	015a      	lsls	r2, r3, #5
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	4413      	add	r3, r2
 80096ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80096d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80096d8:	d118      	bne.n	800970c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80096da:	693b      	ldr	r3, [r7, #16]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d10a      	bne.n	80096f6 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80096e0:	693b      	ldr	r3, [r7, #16]
 80096e2:	015a      	lsls	r2, r3, #5
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	4413      	add	r3, r2
 80096e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80096ec:	461a      	mov	r2, r3
 80096ee:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80096f2:	6013      	str	r3, [r2, #0]
 80096f4:	e013      	b.n	800971e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80096f6:	693b      	ldr	r3, [r7, #16]
 80096f8:	015a      	lsls	r2, r3, #5
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	4413      	add	r3, r2
 80096fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009702:	461a      	mov	r2, r3
 8009704:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009708:	6013      	str	r3, [r2, #0]
 800970a:	e008      	b.n	800971e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800970c:	693b      	ldr	r3, [r7, #16]
 800970e:	015a      	lsls	r2, r3, #5
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	4413      	add	r3, r2
 8009714:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009718:	461a      	mov	r2, r3
 800971a:	2300      	movs	r3, #0
 800971c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800971e:	693b      	ldr	r3, [r7, #16]
 8009720:	015a      	lsls	r2, r3, #5
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	4413      	add	r3, r2
 8009726:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800972a:	461a      	mov	r2, r3
 800972c:	2300      	movs	r3, #0
 800972e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009730:	693b      	ldr	r3, [r7, #16]
 8009732:	015a      	lsls	r2, r3, #5
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	4413      	add	r3, r2
 8009738:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800973c:	461a      	mov	r2, r3
 800973e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009742:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009744:	693b      	ldr	r3, [r7, #16]
 8009746:	3301      	adds	r3, #1
 8009748:	613b      	str	r3, [r7, #16]
 800974a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800974e:	461a      	mov	r2, r3
 8009750:	693b      	ldr	r3, [r7, #16]
 8009752:	4293      	cmp	r3, r2
 8009754:	d3b5      	bcc.n	80096c2 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800975c:	691b      	ldr	r3, [r3, #16]
 800975e:	68fa      	ldr	r2, [r7, #12]
 8009760:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009764:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009768:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	2200      	movs	r2, #0
 800976e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8009776:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009778:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800977c:	2b00      	cmp	r3, #0
 800977e:	d105      	bne.n	800978c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	699b      	ldr	r3, [r3, #24]
 8009784:	f043 0210 	orr.w	r2, r3, #16
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	699a      	ldr	r2, [r3, #24]
 8009790:	4b10      	ldr	r3, [pc, #64]	@ (80097d4 <USB_DevInit+0x2c4>)
 8009792:	4313      	orrs	r3, r2
 8009794:	687a      	ldr	r2, [r7, #4]
 8009796:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009798:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800979c:	2b00      	cmp	r3, #0
 800979e:	d005      	beq.n	80097ac <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	699b      	ldr	r3, [r3, #24]
 80097a4:	f043 0208 	orr.w	r2, r3, #8
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80097ac:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80097b0:	2b01      	cmp	r3, #1
 80097b2:	d107      	bne.n	80097c4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	699b      	ldr	r3, [r3, #24]
 80097b8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80097bc:	f043 0304 	orr.w	r3, r3, #4
 80097c0:	687a      	ldr	r2, [r7, #4]
 80097c2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80097c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80097c6:	4618      	mov	r0, r3
 80097c8:	3718      	adds	r7, #24
 80097ca:	46bd      	mov	sp, r7
 80097cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80097d0:	b004      	add	sp, #16
 80097d2:	4770      	bx	lr
 80097d4:	803c3800 	.word	0x803c3800

080097d8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80097d8:	b480      	push	{r7}
 80097da:	b085      	sub	sp, #20
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
 80097e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80097e2:	2300      	movs	r3, #0
 80097e4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	3301      	adds	r3, #1
 80097ea:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80097f2:	d901      	bls.n	80097f8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80097f4:	2303      	movs	r3, #3
 80097f6:	e01b      	b.n	8009830 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	691b      	ldr	r3, [r3, #16]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	daf2      	bge.n	80097e6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009800:	2300      	movs	r3, #0
 8009802:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	019b      	lsls	r3, r3, #6
 8009808:	f043 0220 	orr.w	r2, r3, #32
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	3301      	adds	r3, #1
 8009814:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800981c:	d901      	bls.n	8009822 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800981e:	2303      	movs	r3, #3
 8009820:	e006      	b.n	8009830 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	691b      	ldr	r3, [r3, #16]
 8009826:	f003 0320 	and.w	r3, r3, #32
 800982a:	2b20      	cmp	r3, #32
 800982c:	d0f0      	beq.n	8009810 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800982e:	2300      	movs	r3, #0
}
 8009830:	4618      	mov	r0, r3
 8009832:	3714      	adds	r7, #20
 8009834:	46bd      	mov	sp, r7
 8009836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983a:	4770      	bx	lr

0800983c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800983c:	b480      	push	{r7}
 800983e:	b085      	sub	sp, #20
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009844:	2300      	movs	r3, #0
 8009846:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	3301      	adds	r3, #1
 800984c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009854:	d901      	bls.n	800985a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009856:	2303      	movs	r3, #3
 8009858:	e018      	b.n	800988c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	691b      	ldr	r3, [r3, #16]
 800985e:	2b00      	cmp	r3, #0
 8009860:	daf2      	bge.n	8009848 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009862:	2300      	movs	r3, #0
 8009864:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2210      	movs	r2, #16
 800986a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	3301      	adds	r3, #1
 8009870:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009878:	d901      	bls.n	800987e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800987a:	2303      	movs	r3, #3
 800987c:	e006      	b.n	800988c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	691b      	ldr	r3, [r3, #16]
 8009882:	f003 0310 	and.w	r3, r3, #16
 8009886:	2b10      	cmp	r3, #16
 8009888:	d0f0      	beq.n	800986c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800988a:	2300      	movs	r3, #0
}
 800988c:	4618      	mov	r0, r3
 800988e:	3714      	adds	r7, #20
 8009890:	46bd      	mov	sp, r7
 8009892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009896:	4770      	bx	lr

08009898 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009898:	b480      	push	{r7}
 800989a:	b085      	sub	sp, #20
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
 80098a0:	460b      	mov	r3, r1
 80098a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80098ae:	681a      	ldr	r2, [r3, #0]
 80098b0:	78fb      	ldrb	r3, [r7, #3]
 80098b2:	68f9      	ldr	r1, [r7, #12]
 80098b4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80098b8:	4313      	orrs	r3, r2
 80098ba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80098bc:	2300      	movs	r3, #0
}
 80098be:	4618      	mov	r0, r3
 80098c0:	3714      	adds	r7, #20
 80098c2:	46bd      	mov	sp, r7
 80098c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c8:	4770      	bx	lr

080098ca <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80098ca:	b480      	push	{r7}
 80098cc:	b087      	sub	sp, #28
 80098ce:	af00      	add	r7, sp, #0
 80098d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80098d6:	693b      	ldr	r3, [r7, #16]
 80098d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80098dc:	689b      	ldr	r3, [r3, #8]
 80098de:	f003 0306 	and.w	r3, r3, #6
 80098e2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d102      	bne.n	80098f0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80098ea:	2300      	movs	r3, #0
 80098ec:	75fb      	strb	r3, [r7, #23]
 80098ee:	e00a      	b.n	8009906 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	2b02      	cmp	r3, #2
 80098f4:	d002      	beq.n	80098fc <USB_GetDevSpeed+0x32>
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	2b06      	cmp	r3, #6
 80098fa:	d102      	bne.n	8009902 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80098fc:	2302      	movs	r3, #2
 80098fe:	75fb      	strb	r3, [r7, #23]
 8009900:	e001      	b.n	8009906 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009902:	230f      	movs	r3, #15
 8009904:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009906:	7dfb      	ldrb	r3, [r7, #23]
}
 8009908:	4618      	mov	r0, r3
 800990a:	371c      	adds	r7, #28
 800990c:	46bd      	mov	sp, r7
 800990e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009912:	4770      	bx	lr

08009914 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009914:	b480      	push	{r7}
 8009916:	b085      	sub	sp, #20
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
 800991c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009922:	683b      	ldr	r3, [r7, #0]
 8009924:	781b      	ldrb	r3, [r3, #0]
 8009926:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	785b      	ldrb	r3, [r3, #1]
 800992c:	2b01      	cmp	r3, #1
 800992e:	d13a      	bne.n	80099a6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009936:	69da      	ldr	r2, [r3, #28]
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	781b      	ldrb	r3, [r3, #0]
 800993c:	f003 030f 	and.w	r3, r3, #15
 8009940:	2101      	movs	r1, #1
 8009942:	fa01 f303 	lsl.w	r3, r1, r3
 8009946:	b29b      	uxth	r3, r3
 8009948:	68f9      	ldr	r1, [r7, #12]
 800994a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800994e:	4313      	orrs	r3, r2
 8009950:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009952:	68bb      	ldr	r3, [r7, #8]
 8009954:	015a      	lsls	r2, r3, #5
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	4413      	add	r3, r2
 800995a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009964:	2b00      	cmp	r3, #0
 8009966:	d155      	bne.n	8009a14 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009968:	68bb      	ldr	r3, [r7, #8]
 800996a:	015a      	lsls	r2, r3, #5
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	4413      	add	r3, r2
 8009970:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009974:	681a      	ldr	r2, [r3, #0]
 8009976:	683b      	ldr	r3, [r7, #0]
 8009978:	689b      	ldr	r3, [r3, #8]
 800997a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800997e:	683b      	ldr	r3, [r7, #0]
 8009980:	791b      	ldrb	r3, [r3, #4]
 8009982:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009984:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009986:	68bb      	ldr	r3, [r7, #8]
 8009988:	059b      	lsls	r3, r3, #22
 800998a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800998c:	4313      	orrs	r3, r2
 800998e:	68ba      	ldr	r2, [r7, #8]
 8009990:	0151      	lsls	r1, r2, #5
 8009992:	68fa      	ldr	r2, [r7, #12]
 8009994:	440a      	add	r2, r1
 8009996:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800999a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800999e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80099a2:	6013      	str	r3, [r2, #0]
 80099a4:	e036      	b.n	8009a14 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80099ac:	69da      	ldr	r2, [r3, #28]
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	781b      	ldrb	r3, [r3, #0]
 80099b2:	f003 030f 	and.w	r3, r3, #15
 80099b6:	2101      	movs	r1, #1
 80099b8:	fa01 f303 	lsl.w	r3, r1, r3
 80099bc:	041b      	lsls	r3, r3, #16
 80099be:	68f9      	ldr	r1, [r7, #12]
 80099c0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80099c4:	4313      	orrs	r3, r2
 80099c6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80099c8:	68bb      	ldr	r3, [r7, #8]
 80099ca:	015a      	lsls	r2, r3, #5
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	4413      	add	r3, r2
 80099d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d11a      	bne.n	8009a14 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80099de:	68bb      	ldr	r3, [r7, #8]
 80099e0:	015a      	lsls	r2, r3, #5
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	4413      	add	r3, r2
 80099e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099ea:	681a      	ldr	r2, [r3, #0]
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	689b      	ldr	r3, [r3, #8]
 80099f0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	791b      	ldrb	r3, [r3, #4]
 80099f8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80099fa:	430b      	orrs	r3, r1
 80099fc:	4313      	orrs	r3, r2
 80099fe:	68ba      	ldr	r2, [r7, #8]
 8009a00:	0151      	lsls	r1, r2, #5
 8009a02:	68fa      	ldr	r2, [r7, #12]
 8009a04:	440a      	add	r2, r1
 8009a06:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009a0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009a0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009a12:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009a14:	2300      	movs	r3, #0
}
 8009a16:	4618      	mov	r0, r3
 8009a18:	3714      	adds	r7, #20
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a20:	4770      	bx	lr
	...

08009a24 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009a24:	b480      	push	{r7}
 8009a26:	b085      	sub	sp, #20
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
 8009a2c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	781b      	ldrb	r3, [r3, #0]
 8009a36:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	785b      	ldrb	r3, [r3, #1]
 8009a3c:	2b01      	cmp	r3, #1
 8009a3e:	d161      	bne.n	8009b04 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009a40:	68bb      	ldr	r3, [r7, #8]
 8009a42:	015a      	lsls	r2, r3, #5
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	4413      	add	r3, r2
 8009a48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009a52:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009a56:	d11f      	bne.n	8009a98 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009a58:	68bb      	ldr	r3, [r7, #8]
 8009a5a:	015a      	lsls	r2, r3, #5
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	4413      	add	r3, r2
 8009a60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	68ba      	ldr	r2, [r7, #8]
 8009a68:	0151      	lsls	r1, r2, #5
 8009a6a:	68fa      	ldr	r2, [r7, #12]
 8009a6c:	440a      	add	r2, r1
 8009a6e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009a72:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009a76:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009a78:	68bb      	ldr	r3, [r7, #8]
 8009a7a:	015a      	lsls	r2, r3, #5
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	4413      	add	r3, r2
 8009a80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	68ba      	ldr	r2, [r7, #8]
 8009a88:	0151      	lsls	r1, r2, #5
 8009a8a:	68fa      	ldr	r2, [r7, #12]
 8009a8c:	440a      	add	r2, r1
 8009a8e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009a92:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009a96:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a9e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	781b      	ldrb	r3, [r3, #0]
 8009aa4:	f003 030f 	and.w	r3, r3, #15
 8009aa8:	2101      	movs	r1, #1
 8009aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8009aae:	b29b      	uxth	r3, r3
 8009ab0:	43db      	mvns	r3, r3
 8009ab2:	68f9      	ldr	r1, [r7, #12]
 8009ab4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009ab8:	4013      	ands	r3, r2
 8009aba:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ac2:	69da      	ldr	r2, [r3, #28]
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	781b      	ldrb	r3, [r3, #0]
 8009ac8:	f003 030f 	and.w	r3, r3, #15
 8009acc:	2101      	movs	r1, #1
 8009ace:	fa01 f303 	lsl.w	r3, r1, r3
 8009ad2:	b29b      	uxth	r3, r3
 8009ad4:	43db      	mvns	r3, r3
 8009ad6:	68f9      	ldr	r1, [r7, #12]
 8009ad8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009adc:	4013      	ands	r3, r2
 8009ade:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009ae0:	68bb      	ldr	r3, [r7, #8]
 8009ae2:	015a      	lsls	r2, r3, #5
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	4413      	add	r3, r2
 8009ae8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009aec:	681a      	ldr	r2, [r3, #0]
 8009aee:	68bb      	ldr	r3, [r7, #8]
 8009af0:	0159      	lsls	r1, r3, #5
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	440b      	add	r3, r1
 8009af6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009afa:	4619      	mov	r1, r3
 8009afc:	4b35      	ldr	r3, [pc, #212]	@ (8009bd4 <USB_DeactivateEndpoint+0x1b0>)
 8009afe:	4013      	ands	r3, r2
 8009b00:	600b      	str	r3, [r1, #0]
 8009b02:	e060      	b.n	8009bc6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009b04:	68bb      	ldr	r3, [r7, #8]
 8009b06:	015a      	lsls	r2, r3, #5
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	4413      	add	r3, r2
 8009b0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009b16:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009b1a:	d11f      	bne.n	8009b5c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009b1c:	68bb      	ldr	r3, [r7, #8]
 8009b1e:	015a      	lsls	r2, r3, #5
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	4413      	add	r3, r2
 8009b24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	68ba      	ldr	r2, [r7, #8]
 8009b2c:	0151      	lsls	r1, r2, #5
 8009b2e:	68fa      	ldr	r2, [r7, #12]
 8009b30:	440a      	add	r2, r1
 8009b32:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009b36:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009b3a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009b3c:	68bb      	ldr	r3, [r7, #8]
 8009b3e:	015a      	lsls	r2, r3, #5
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	4413      	add	r3, r2
 8009b44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	68ba      	ldr	r2, [r7, #8]
 8009b4c:	0151      	lsls	r1, r2, #5
 8009b4e:	68fa      	ldr	r2, [r7, #12]
 8009b50:	440a      	add	r2, r1
 8009b52:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009b56:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009b5a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b62:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	781b      	ldrb	r3, [r3, #0]
 8009b68:	f003 030f 	and.w	r3, r3, #15
 8009b6c:	2101      	movs	r1, #1
 8009b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8009b72:	041b      	lsls	r3, r3, #16
 8009b74:	43db      	mvns	r3, r3
 8009b76:	68f9      	ldr	r1, [r7, #12]
 8009b78:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009b7c:	4013      	ands	r3, r2
 8009b7e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b86:	69da      	ldr	r2, [r3, #28]
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	781b      	ldrb	r3, [r3, #0]
 8009b8c:	f003 030f 	and.w	r3, r3, #15
 8009b90:	2101      	movs	r1, #1
 8009b92:	fa01 f303 	lsl.w	r3, r1, r3
 8009b96:	041b      	lsls	r3, r3, #16
 8009b98:	43db      	mvns	r3, r3
 8009b9a:	68f9      	ldr	r1, [r7, #12]
 8009b9c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009ba0:	4013      	ands	r3, r2
 8009ba2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	015a      	lsls	r2, r3, #5
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	4413      	add	r3, r2
 8009bac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009bb0:	681a      	ldr	r2, [r3, #0]
 8009bb2:	68bb      	ldr	r3, [r7, #8]
 8009bb4:	0159      	lsls	r1, r3, #5
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	440b      	add	r3, r1
 8009bba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009bbe:	4619      	mov	r1, r3
 8009bc0:	4b05      	ldr	r3, [pc, #20]	@ (8009bd8 <USB_DeactivateEndpoint+0x1b4>)
 8009bc2:	4013      	ands	r3, r2
 8009bc4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009bc6:	2300      	movs	r3, #0
}
 8009bc8:	4618      	mov	r0, r3
 8009bca:	3714      	adds	r7, #20
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd2:	4770      	bx	lr
 8009bd4:	ec337800 	.word	0xec337800
 8009bd8:	eff37800 	.word	0xeff37800

08009bdc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b08a      	sub	sp, #40	@ 0x28
 8009be0:	af02      	add	r7, sp, #8
 8009be2:	60f8      	str	r0, [r7, #12]
 8009be4:	60b9      	str	r1, [r7, #8]
 8009be6:	4613      	mov	r3, r2
 8009be8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009bee:	68bb      	ldr	r3, [r7, #8]
 8009bf0:	781b      	ldrb	r3, [r3, #0]
 8009bf2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009bf4:	68bb      	ldr	r3, [r7, #8]
 8009bf6:	785b      	ldrb	r3, [r3, #1]
 8009bf8:	2b01      	cmp	r3, #1
 8009bfa:	f040 817f 	bne.w	8009efc <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009bfe:	68bb      	ldr	r3, [r7, #8]
 8009c00:	691b      	ldr	r3, [r3, #16]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d132      	bne.n	8009c6c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009c06:	69bb      	ldr	r3, [r7, #24]
 8009c08:	015a      	lsls	r2, r3, #5
 8009c0a:	69fb      	ldr	r3, [r7, #28]
 8009c0c:	4413      	add	r3, r2
 8009c0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c12:	691b      	ldr	r3, [r3, #16]
 8009c14:	69ba      	ldr	r2, [r7, #24]
 8009c16:	0151      	lsls	r1, r2, #5
 8009c18:	69fa      	ldr	r2, [r7, #28]
 8009c1a:	440a      	add	r2, r1
 8009c1c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009c20:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009c24:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009c28:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009c2a:	69bb      	ldr	r3, [r7, #24]
 8009c2c:	015a      	lsls	r2, r3, #5
 8009c2e:	69fb      	ldr	r3, [r7, #28]
 8009c30:	4413      	add	r3, r2
 8009c32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c36:	691b      	ldr	r3, [r3, #16]
 8009c38:	69ba      	ldr	r2, [r7, #24]
 8009c3a:	0151      	lsls	r1, r2, #5
 8009c3c:	69fa      	ldr	r2, [r7, #28]
 8009c3e:	440a      	add	r2, r1
 8009c40:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009c44:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009c48:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009c4a:	69bb      	ldr	r3, [r7, #24]
 8009c4c:	015a      	lsls	r2, r3, #5
 8009c4e:	69fb      	ldr	r3, [r7, #28]
 8009c50:	4413      	add	r3, r2
 8009c52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c56:	691b      	ldr	r3, [r3, #16]
 8009c58:	69ba      	ldr	r2, [r7, #24]
 8009c5a:	0151      	lsls	r1, r2, #5
 8009c5c:	69fa      	ldr	r2, [r7, #28]
 8009c5e:	440a      	add	r2, r1
 8009c60:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009c64:	0cdb      	lsrs	r3, r3, #19
 8009c66:	04db      	lsls	r3, r3, #19
 8009c68:	6113      	str	r3, [r2, #16]
 8009c6a:	e097      	b.n	8009d9c <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009c6c:	69bb      	ldr	r3, [r7, #24]
 8009c6e:	015a      	lsls	r2, r3, #5
 8009c70:	69fb      	ldr	r3, [r7, #28]
 8009c72:	4413      	add	r3, r2
 8009c74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c78:	691b      	ldr	r3, [r3, #16]
 8009c7a:	69ba      	ldr	r2, [r7, #24]
 8009c7c:	0151      	lsls	r1, r2, #5
 8009c7e:	69fa      	ldr	r2, [r7, #28]
 8009c80:	440a      	add	r2, r1
 8009c82:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009c86:	0cdb      	lsrs	r3, r3, #19
 8009c88:	04db      	lsls	r3, r3, #19
 8009c8a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009c8c:	69bb      	ldr	r3, [r7, #24]
 8009c8e:	015a      	lsls	r2, r3, #5
 8009c90:	69fb      	ldr	r3, [r7, #28]
 8009c92:	4413      	add	r3, r2
 8009c94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c98:	691b      	ldr	r3, [r3, #16]
 8009c9a:	69ba      	ldr	r2, [r7, #24]
 8009c9c:	0151      	lsls	r1, r2, #5
 8009c9e:	69fa      	ldr	r2, [r7, #28]
 8009ca0:	440a      	add	r2, r1
 8009ca2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009ca6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009caa:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009cae:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8009cb0:	69bb      	ldr	r3, [r7, #24]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d11a      	bne.n	8009cec <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8009cb6:	68bb      	ldr	r3, [r7, #8]
 8009cb8:	691a      	ldr	r2, [r3, #16]
 8009cba:	68bb      	ldr	r3, [r7, #8]
 8009cbc:	689b      	ldr	r3, [r3, #8]
 8009cbe:	429a      	cmp	r2, r3
 8009cc0:	d903      	bls.n	8009cca <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8009cc2:	68bb      	ldr	r3, [r7, #8]
 8009cc4:	689a      	ldr	r2, [r3, #8]
 8009cc6:	68bb      	ldr	r3, [r7, #8]
 8009cc8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009cca:	69bb      	ldr	r3, [r7, #24]
 8009ccc:	015a      	lsls	r2, r3, #5
 8009cce:	69fb      	ldr	r3, [r7, #28]
 8009cd0:	4413      	add	r3, r2
 8009cd2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009cd6:	691b      	ldr	r3, [r3, #16]
 8009cd8:	69ba      	ldr	r2, [r7, #24]
 8009cda:	0151      	lsls	r1, r2, #5
 8009cdc:	69fa      	ldr	r2, [r7, #28]
 8009cde:	440a      	add	r2, r1
 8009ce0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009ce4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009ce8:	6113      	str	r3, [r2, #16]
 8009cea:	e044      	b.n	8009d76 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009cec:	68bb      	ldr	r3, [r7, #8]
 8009cee:	691a      	ldr	r2, [r3, #16]
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	689b      	ldr	r3, [r3, #8]
 8009cf4:	4413      	add	r3, r2
 8009cf6:	1e5a      	subs	r2, r3, #1
 8009cf8:	68bb      	ldr	r3, [r7, #8]
 8009cfa:	689b      	ldr	r3, [r3, #8]
 8009cfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d00:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8009d02:	69bb      	ldr	r3, [r7, #24]
 8009d04:	015a      	lsls	r2, r3, #5
 8009d06:	69fb      	ldr	r3, [r7, #28]
 8009d08:	4413      	add	r3, r2
 8009d0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d0e:	691a      	ldr	r2, [r3, #16]
 8009d10:	8afb      	ldrh	r3, [r7, #22]
 8009d12:	04d9      	lsls	r1, r3, #19
 8009d14:	4ba4      	ldr	r3, [pc, #656]	@ (8009fa8 <USB_EPStartXfer+0x3cc>)
 8009d16:	400b      	ands	r3, r1
 8009d18:	69b9      	ldr	r1, [r7, #24]
 8009d1a:	0148      	lsls	r0, r1, #5
 8009d1c:	69f9      	ldr	r1, [r7, #28]
 8009d1e:	4401      	add	r1, r0
 8009d20:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009d24:	4313      	orrs	r3, r2
 8009d26:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8009d28:	68bb      	ldr	r3, [r7, #8]
 8009d2a:	791b      	ldrb	r3, [r3, #4]
 8009d2c:	2b01      	cmp	r3, #1
 8009d2e:	d122      	bne.n	8009d76 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009d30:	69bb      	ldr	r3, [r7, #24]
 8009d32:	015a      	lsls	r2, r3, #5
 8009d34:	69fb      	ldr	r3, [r7, #28]
 8009d36:	4413      	add	r3, r2
 8009d38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d3c:	691b      	ldr	r3, [r3, #16]
 8009d3e:	69ba      	ldr	r2, [r7, #24]
 8009d40:	0151      	lsls	r1, r2, #5
 8009d42:	69fa      	ldr	r2, [r7, #28]
 8009d44:	440a      	add	r2, r1
 8009d46:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009d4a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8009d4e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8009d50:	69bb      	ldr	r3, [r7, #24]
 8009d52:	015a      	lsls	r2, r3, #5
 8009d54:	69fb      	ldr	r3, [r7, #28]
 8009d56:	4413      	add	r3, r2
 8009d58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d5c:	691a      	ldr	r2, [r3, #16]
 8009d5e:	8afb      	ldrh	r3, [r7, #22]
 8009d60:	075b      	lsls	r3, r3, #29
 8009d62:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8009d66:	69b9      	ldr	r1, [r7, #24]
 8009d68:	0148      	lsls	r0, r1, #5
 8009d6a:	69f9      	ldr	r1, [r7, #28]
 8009d6c:	4401      	add	r1, r0
 8009d6e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009d72:	4313      	orrs	r3, r2
 8009d74:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009d76:	69bb      	ldr	r3, [r7, #24]
 8009d78:	015a      	lsls	r2, r3, #5
 8009d7a:	69fb      	ldr	r3, [r7, #28]
 8009d7c:	4413      	add	r3, r2
 8009d7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d82:	691a      	ldr	r2, [r3, #16]
 8009d84:	68bb      	ldr	r3, [r7, #8]
 8009d86:	691b      	ldr	r3, [r3, #16]
 8009d88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009d8c:	69b9      	ldr	r1, [r7, #24]
 8009d8e:	0148      	lsls	r0, r1, #5
 8009d90:	69f9      	ldr	r1, [r7, #28]
 8009d92:	4401      	add	r1, r0
 8009d94:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009d98:	4313      	orrs	r3, r2
 8009d9a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009d9c:	79fb      	ldrb	r3, [r7, #7]
 8009d9e:	2b01      	cmp	r3, #1
 8009da0:	d14b      	bne.n	8009e3a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009da2:	68bb      	ldr	r3, [r7, #8]
 8009da4:	69db      	ldr	r3, [r3, #28]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d009      	beq.n	8009dbe <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009daa:	69bb      	ldr	r3, [r7, #24]
 8009dac:	015a      	lsls	r2, r3, #5
 8009dae:	69fb      	ldr	r3, [r7, #28]
 8009db0:	4413      	add	r3, r2
 8009db2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009db6:	461a      	mov	r2, r3
 8009db8:	68bb      	ldr	r3, [r7, #8]
 8009dba:	69db      	ldr	r3, [r3, #28]
 8009dbc:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009dbe:	68bb      	ldr	r3, [r7, #8]
 8009dc0:	791b      	ldrb	r3, [r3, #4]
 8009dc2:	2b01      	cmp	r3, #1
 8009dc4:	d128      	bne.n	8009e18 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009dc6:	69fb      	ldr	r3, [r7, #28]
 8009dc8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009dcc:	689b      	ldr	r3, [r3, #8]
 8009dce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d110      	bne.n	8009df8 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009dd6:	69bb      	ldr	r3, [r7, #24]
 8009dd8:	015a      	lsls	r2, r3, #5
 8009dda:	69fb      	ldr	r3, [r7, #28]
 8009ddc:	4413      	add	r3, r2
 8009dde:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	69ba      	ldr	r2, [r7, #24]
 8009de6:	0151      	lsls	r1, r2, #5
 8009de8:	69fa      	ldr	r2, [r7, #28]
 8009dea:	440a      	add	r2, r1
 8009dec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009df0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009df4:	6013      	str	r3, [r2, #0]
 8009df6:	e00f      	b.n	8009e18 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009df8:	69bb      	ldr	r3, [r7, #24]
 8009dfa:	015a      	lsls	r2, r3, #5
 8009dfc:	69fb      	ldr	r3, [r7, #28]
 8009dfe:	4413      	add	r3, r2
 8009e00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	69ba      	ldr	r2, [r7, #24]
 8009e08:	0151      	lsls	r1, r2, #5
 8009e0a:	69fa      	ldr	r2, [r7, #28]
 8009e0c:	440a      	add	r2, r1
 8009e0e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009e12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009e16:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009e18:	69bb      	ldr	r3, [r7, #24]
 8009e1a:	015a      	lsls	r2, r3, #5
 8009e1c:	69fb      	ldr	r3, [r7, #28]
 8009e1e:	4413      	add	r3, r2
 8009e20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	69ba      	ldr	r2, [r7, #24]
 8009e28:	0151      	lsls	r1, r2, #5
 8009e2a:	69fa      	ldr	r2, [r7, #28]
 8009e2c:	440a      	add	r2, r1
 8009e2e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009e32:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009e36:	6013      	str	r3, [r2, #0]
 8009e38:	e166      	b.n	800a108 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009e3a:	69bb      	ldr	r3, [r7, #24]
 8009e3c:	015a      	lsls	r2, r3, #5
 8009e3e:	69fb      	ldr	r3, [r7, #28]
 8009e40:	4413      	add	r3, r2
 8009e42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	69ba      	ldr	r2, [r7, #24]
 8009e4a:	0151      	lsls	r1, r2, #5
 8009e4c:	69fa      	ldr	r2, [r7, #28]
 8009e4e:	440a      	add	r2, r1
 8009e50:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009e54:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009e58:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009e5a:	68bb      	ldr	r3, [r7, #8]
 8009e5c:	791b      	ldrb	r3, [r3, #4]
 8009e5e:	2b01      	cmp	r3, #1
 8009e60:	d015      	beq.n	8009e8e <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009e62:	68bb      	ldr	r3, [r7, #8]
 8009e64:	691b      	ldr	r3, [r3, #16]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	f000 814e 	beq.w	800a108 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009e6c:	69fb      	ldr	r3, [r7, #28]
 8009e6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e72:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009e74:	68bb      	ldr	r3, [r7, #8]
 8009e76:	781b      	ldrb	r3, [r3, #0]
 8009e78:	f003 030f 	and.w	r3, r3, #15
 8009e7c:	2101      	movs	r1, #1
 8009e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8009e82:	69f9      	ldr	r1, [r7, #28]
 8009e84:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009e88:	4313      	orrs	r3, r2
 8009e8a:	634b      	str	r3, [r1, #52]	@ 0x34
 8009e8c:	e13c      	b.n	800a108 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009e8e:	69fb      	ldr	r3, [r7, #28]
 8009e90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e94:	689b      	ldr	r3, [r3, #8]
 8009e96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d110      	bne.n	8009ec0 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009e9e:	69bb      	ldr	r3, [r7, #24]
 8009ea0:	015a      	lsls	r2, r3, #5
 8009ea2:	69fb      	ldr	r3, [r7, #28]
 8009ea4:	4413      	add	r3, r2
 8009ea6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	69ba      	ldr	r2, [r7, #24]
 8009eae:	0151      	lsls	r1, r2, #5
 8009eb0:	69fa      	ldr	r2, [r7, #28]
 8009eb2:	440a      	add	r2, r1
 8009eb4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009eb8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009ebc:	6013      	str	r3, [r2, #0]
 8009ebe:	e00f      	b.n	8009ee0 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009ec0:	69bb      	ldr	r3, [r7, #24]
 8009ec2:	015a      	lsls	r2, r3, #5
 8009ec4:	69fb      	ldr	r3, [r7, #28]
 8009ec6:	4413      	add	r3, r2
 8009ec8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	69ba      	ldr	r2, [r7, #24]
 8009ed0:	0151      	lsls	r1, r2, #5
 8009ed2:	69fa      	ldr	r2, [r7, #28]
 8009ed4:	440a      	add	r2, r1
 8009ed6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009eda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009ede:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009ee0:	68bb      	ldr	r3, [r7, #8]
 8009ee2:	68d9      	ldr	r1, [r3, #12]
 8009ee4:	68bb      	ldr	r3, [r7, #8]
 8009ee6:	781a      	ldrb	r2, [r3, #0]
 8009ee8:	68bb      	ldr	r3, [r7, #8]
 8009eea:	691b      	ldr	r3, [r3, #16]
 8009eec:	b298      	uxth	r0, r3
 8009eee:	79fb      	ldrb	r3, [r7, #7]
 8009ef0:	9300      	str	r3, [sp, #0]
 8009ef2:	4603      	mov	r3, r0
 8009ef4:	68f8      	ldr	r0, [r7, #12]
 8009ef6:	f000 f9b9 	bl	800a26c <USB_WritePacket>
 8009efa:	e105      	b.n	800a108 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009efc:	69bb      	ldr	r3, [r7, #24]
 8009efe:	015a      	lsls	r2, r3, #5
 8009f00:	69fb      	ldr	r3, [r7, #28]
 8009f02:	4413      	add	r3, r2
 8009f04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f08:	691b      	ldr	r3, [r3, #16]
 8009f0a:	69ba      	ldr	r2, [r7, #24]
 8009f0c:	0151      	lsls	r1, r2, #5
 8009f0e:	69fa      	ldr	r2, [r7, #28]
 8009f10:	440a      	add	r2, r1
 8009f12:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009f16:	0cdb      	lsrs	r3, r3, #19
 8009f18:	04db      	lsls	r3, r3, #19
 8009f1a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009f1c:	69bb      	ldr	r3, [r7, #24]
 8009f1e:	015a      	lsls	r2, r3, #5
 8009f20:	69fb      	ldr	r3, [r7, #28]
 8009f22:	4413      	add	r3, r2
 8009f24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f28:	691b      	ldr	r3, [r3, #16]
 8009f2a:	69ba      	ldr	r2, [r7, #24]
 8009f2c:	0151      	lsls	r1, r2, #5
 8009f2e:	69fa      	ldr	r2, [r7, #28]
 8009f30:	440a      	add	r2, r1
 8009f32:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009f36:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009f3a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009f3e:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8009f40:	69bb      	ldr	r3, [r7, #24]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d132      	bne.n	8009fac <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8009f46:	68bb      	ldr	r3, [r7, #8]
 8009f48:	691b      	ldr	r3, [r3, #16]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d003      	beq.n	8009f56 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8009f4e:	68bb      	ldr	r3, [r7, #8]
 8009f50:	689a      	ldr	r2, [r3, #8]
 8009f52:	68bb      	ldr	r3, [r7, #8]
 8009f54:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8009f56:	68bb      	ldr	r3, [r7, #8]
 8009f58:	689a      	ldr	r2, [r3, #8]
 8009f5a:	68bb      	ldr	r3, [r7, #8]
 8009f5c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009f5e:	69bb      	ldr	r3, [r7, #24]
 8009f60:	015a      	lsls	r2, r3, #5
 8009f62:	69fb      	ldr	r3, [r7, #28]
 8009f64:	4413      	add	r3, r2
 8009f66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f6a:	691a      	ldr	r2, [r3, #16]
 8009f6c:	68bb      	ldr	r3, [r7, #8]
 8009f6e:	6a1b      	ldr	r3, [r3, #32]
 8009f70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009f74:	69b9      	ldr	r1, [r7, #24]
 8009f76:	0148      	lsls	r0, r1, #5
 8009f78:	69f9      	ldr	r1, [r7, #28]
 8009f7a:	4401      	add	r1, r0
 8009f7c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009f80:	4313      	orrs	r3, r2
 8009f82:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009f84:	69bb      	ldr	r3, [r7, #24]
 8009f86:	015a      	lsls	r2, r3, #5
 8009f88:	69fb      	ldr	r3, [r7, #28]
 8009f8a:	4413      	add	r3, r2
 8009f8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f90:	691b      	ldr	r3, [r3, #16]
 8009f92:	69ba      	ldr	r2, [r7, #24]
 8009f94:	0151      	lsls	r1, r2, #5
 8009f96:	69fa      	ldr	r2, [r7, #28]
 8009f98:	440a      	add	r2, r1
 8009f9a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009f9e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009fa2:	6113      	str	r3, [r2, #16]
 8009fa4:	e062      	b.n	800a06c <USB_EPStartXfer+0x490>
 8009fa6:	bf00      	nop
 8009fa8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8009fac:	68bb      	ldr	r3, [r7, #8]
 8009fae:	691b      	ldr	r3, [r3, #16]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d123      	bne.n	8009ffc <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009fb4:	69bb      	ldr	r3, [r7, #24]
 8009fb6:	015a      	lsls	r2, r3, #5
 8009fb8:	69fb      	ldr	r3, [r7, #28]
 8009fba:	4413      	add	r3, r2
 8009fbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009fc0:	691a      	ldr	r2, [r3, #16]
 8009fc2:	68bb      	ldr	r3, [r7, #8]
 8009fc4:	689b      	ldr	r3, [r3, #8]
 8009fc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009fca:	69b9      	ldr	r1, [r7, #24]
 8009fcc:	0148      	lsls	r0, r1, #5
 8009fce:	69f9      	ldr	r1, [r7, #28]
 8009fd0:	4401      	add	r1, r0
 8009fd2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009fd6:	4313      	orrs	r3, r2
 8009fd8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009fda:	69bb      	ldr	r3, [r7, #24]
 8009fdc:	015a      	lsls	r2, r3, #5
 8009fde:	69fb      	ldr	r3, [r7, #28]
 8009fe0:	4413      	add	r3, r2
 8009fe2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009fe6:	691b      	ldr	r3, [r3, #16]
 8009fe8:	69ba      	ldr	r2, [r7, #24]
 8009fea:	0151      	lsls	r1, r2, #5
 8009fec:	69fa      	ldr	r2, [r7, #28]
 8009fee:	440a      	add	r2, r1
 8009ff0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009ff4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009ff8:	6113      	str	r3, [r2, #16]
 8009ffa:	e037      	b.n	800a06c <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009ffc:	68bb      	ldr	r3, [r7, #8]
 8009ffe:	691a      	ldr	r2, [r3, #16]
 800a000:	68bb      	ldr	r3, [r7, #8]
 800a002:	689b      	ldr	r3, [r3, #8]
 800a004:	4413      	add	r3, r2
 800a006:	1e5a      	subs	r2, r3, #1
 800a008:	68bb      	ldr	r3, [r7, #8]
 800a00a:	689b      	ldr	r3, [r3, #8]
 800a00c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a010:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800a012:	68bb      	ldr	r3, [r7, #8]
 800a014:	689b      	ldr	r3, [r3, #8]
 800a016:	8afa      	ldrh	r2, [r7, #22]
 800a018:	fb03 f202 	mul.w	r2, r3, r2
 800a01c:	68bb      	ldr	r3, [r7, #8]
 800a01e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a020:	69bb      	ldr	r3, [r7, #24]
 800a022:	015a      	lsls	r2, r3, #5
 800a024:	69fb      	ldr	r3, [r7, #28]
 800a026:	4413      	add	r3, r2
 800a028:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a02c:	691a      	ldr	r2, [r3, #16]
 800a02e:	8afb      	ldrh	r3, [r7, #22]
 800a030:	04d9      	lsls	r1, r3, #19
 800a032:	4b38      	ldr	r3, [pc, #224]	@ (800a114 <USB_EPStartXfer+0x538>)
 800a034:	400b      	ands	r3, r1
 800a036:	69b9      	ldr	r1, [r7, #24]
 800a038:	0148      	lsls	r0, r1, #5
 800a03a:	69f9      	ldr	r1, [r7, #28]
 800a03c:	4401      	add	r1, r0
 800a03e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a042:	4313      	orrs	r3, r2
 800a044:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a046:	69bb      	ldr	r3, [r7, #24]
 800a048:	015a      	lsls	r2, r3, #5
 800a04a:	69fb      	ldr	r3, [r7, #28]
 800a04c:	4413      	add	r3, r2
 800a04e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a052:	691a      	ldr	r2, [r3, #16]
 800a054:	68bb      	ldr	r3, [r7, #8]
 800a056:	6a1b      	ldr	r3, [r3, #32]
 800a058:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a05c:	69b9      	ldr	r1, [r7, #24]
 800a05e:	0148      	lsls	r0, r1, #5
 800a060:	69f9      	ldr	r1, [r7, #28]
 800a062:	4401      	add	r1, r0
 800a064:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a068:	4313      	orrs	r3, r2
 800a06a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800a06c:	79fb      	ldrb	r3, [r7, #7]
 800a06e:	2b01      	cmp	r3, #1
 800a070:	d10d      	bne.n	800a08e <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a072:	68bb      	ldr	r3, [r7, #8]
 800a074:	68db      	ldr	r3, [r3, #12]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d009      	beq.n	800a08e <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a07a:	68bb      	ldr	r3, [r7, #8]
 800a07c:	68d9      	ldr	r1, [r3, #12]
 800a07e:	69bb      	ldr	r3, [r7, #24]
 800a080:	015a      	lsls	r2, r3, #5
 800a082:	69fb      	ldr	r3, [r7, #28]
 800a084:	4413      	add	r3, r2
 800a086:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a08a:	460a      	mov	r2, r1
 800a08c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a08e:	68bb      	ldr	r3, [r7, #8]
 800a090:	791b      	ldrb	r3, [r3, #4]
 800a092:	2b01      	cmp	r3, #1
 800a094:	d128      	bne.n	800a0e8 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a096:	69fb      	ldr	r3, [r7, #28]
 800a098:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a09c:	689b      	ldr	r3, [r3, #8]
 800a09e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d110      	bne.n	800a0c8 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a0a6:	69bb      	ldr	r3, [r7, #24]
 800a0a8:	015a      	lsls	r2, r3, #5
 800a0aa:	69fb      	ldr	r3, [r7, #28]
 800a0ac:	4413      	add	r3, r2
 800a0ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	69ba      	ldr	r2, [r7, #24]
 800a0b6:	0151      	lsls	r1, r2, #5
 800a0b8:	69fa      	ldr	r2, [r7, #28]
 800a0ba:	440a      	add	r2, r1
 800a0bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a0c0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a0c4:	6013      	str	r3, [r2, #0]
 800a0c6:	e00f      	b.n	800a0e8 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a0c8:	69bb      	ldr	r3, [r7, #24]
 800a0ca:	015a      	lsls	r2, r3, #5
 800a0cc:	69fb      	ldr	r3, [r7, #28]
 800a0ce:	4413      	add	r3, r2
 800a0d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	69ba      	ldr	r2, [r7, #24]
 800a0d8:	0151      	lsls	r1, r2, #5
 800a0da:	69fa      	ldr	r2, [r7, #28]
 800a0dc:	440a      	add	r2, r1
 800a0de:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a0e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a0e6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a0e8:	69bb      	ldr	r3, [r7, #24]
 800a0ea:	015a      	lsls	r2, r3, #5
 800a0ec:	69fb      	ldr	r3, [r7, #28]
 800a0ee:	4413      	add	r3, r2
 800a0f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	69ba      	ldr	r2, [r7, #24]
 800a0f8:	0151      	lsls	r1, r2, #5
 800a0fa:	69fa      	ldr	r2, [r7, #28]
 800a0fc:	440a      	add	r2, r1
 800a0fe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a102:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a106:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a108:	2300      	movs	r3, #0
}
 800a10a:	4618      	mov	r0, r3
 800a10c:	3720      	adds	r7, #32
 800a10e:	46bd      	mov	sp, r7
 800a110:	bd80      	pop	{r7, pc}
 800a112:	bf00      	nop
 800a114:	1ff80000 	.word	0x1ff80000

0800a118 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a118:	b480      	push	{r7}
 800a11a:	b087      	sub	sp, #28
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
 800a120:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a122:	2300      	movs	r3, #0
 800a124:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a126:	2300      	movs	r3, #0
 800a128:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a12e:	683b      	ldr	r3, [r7, #0]
 800a130:	785b      	ldrb	r3, [r3, #1]
 800a132:	2b01      	cmp	r3, #1
 800a134:	d14a      	bne.n	800a1cc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a136:	683b      	ldr	r3, [r7, #0]
 800a138:	781b      	ldrb	r3, [r3, #0]
 800a13a:	015a      	lsls	r2, r3, #5
 800a13c:	693b      	ldr	r3, [r7, #16]
 800a13e:	4413      	add	r3, r2
 800a140:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a14a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a14e:	f040 8086 	bne.w	800a25e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	781b      	ldrb	r3, [r3, #0]
 800a156:	015a      	lsls	r2, r3, #5
 800a158:	693b      	ldr	r3, [r7, #16]
 800a15a:	4413      	add	r3, r2
 800a15c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	683a      	ldr	r2, [r7, #0]
 800a164:	7812      	ldrb	r2, [r2, #0]
 800a166:	0151      	lsls	r1, r2, #5
 800a168:	693a      	ldr	r2, [r7, #16]
 800a16a:	440a      	add	r2, r1
 800a16c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a170:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a174:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	781b      	ldrb	r3, [r3, #0]
 800a17a:	015a      	lsls	r2, r3, #5
 800a17c:	693b      	ldr	r3, [r7, #16]
 800a17e:	4413      	add	r3, r2
 800a180:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	683a      	ldr	r2, [r7, #0]
 800a188:	7812      	ldrb	r2, [r2, #0]
 800a18a:	0151      	lsls	r1, r2, #5
 800a18c:	693a      	ldr	r2, [r7, #16]
 800a18e:	440a      	add	r2, r1
 800a190:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a194:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a198:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	3301      	adds	r3, #1
 800a19e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a1a6:	4293      	cmp	r3, r2
 800a1a8:	d902      	bls.n	800a1b0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a1aa:	2301      	movs	r3, #1
 800a1ac:	75fb      	strb	r3, [r7, #23]
          break;
 800a1ae:	e056      	b.n	800a25e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	781b      	ldrb	r3, [r3, #0]
 800a1b4:	015a      	lsls	r2, r3, #5
 800a1b6:	693b      	ldr	r3, [r7, #16]
 800a1b8:	4413      	add	r3, r2
 800a1ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a1c4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a1c8:	d0e7      	beq.n	800a19a <USB_EPStopXfer+0x82>
 800a1ca:	e048      	b.n	800a25e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	781b      	ldrb	r3, [r3, #0]
 800a1d0:	015a      	lsls	r2, r3, #5
 800a1d2:	693b      	ldr	r3, [r7, #16]
 800a1d4:	4413      	add	r3, r2
 800a1d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a1e0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a1e4:	d13b      	bne.n	800a25e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a1e6:	683b      	ldr	r3, [r7, #0]
 800a1e8:	781b      	ldrb	r3, [r3, #0]
 800a1ea:	015a      	lsls	r2, r3, #5
 800a1ec:	693b      	ldr	r3, [r7, #16]
 800a1ee:	4413      	add	r3, r2
 800a1f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	683a      	ldr	r2, [r7, #0]
 800a1f8:	7812      	ldrb	r2, [r2, #0]
 800a1fa:	0151      	lsls	r1, r2, #5
 800a1fc:	693a      	ldr	r2, [r7, #16]
 800a1fe:	440a      	add	r2, r1
 800a200:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a204:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a208:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a20a:	683b      	ldr	r3, [r7, #0]
 800a20c:	781b      	ldrb	r3, [r3, #0]
 800a20e:	015a      	lsls	r2, r3, #5
 800a210:	693b      	ldr	r3, [r7, #16]
 800a212:	4413      	add	r3, r2
 800a214:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	683a      	ldr	r2, [r7, #0]
 800a21c:	7812      	ldrb	r2, [r2, #0]
 800a21e:	0151      	lsls	r1, r2, #5
 800a220:	693a      	ldr	r2, [r7, #16]
 800a222:	440a      	add	r2, r1
 800a224:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a228:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a22c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	3301      	adds	r3, #1
 800a232:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a23a:	4293      	cmp	r3, r2
 800a23c:	d902      	bls.n	800a244 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a23e:	2301      	movs	r3, #1
 800a240:	75fb      	strb	r3, [r7, #23]
          break;
 800a242:	e00c      	b.n	800a25e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	781b      	ldrb	r3, [r3, #0]
 800a248:	015a      	lsls	r2, r3, #5
 800a24a:	693b      	ldr	r3, [r7, #16]
 800a24c:	4413      	add	r3, r2
 800a24e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a258:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a25c:	d0e7      	beq.n	800a22e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a25e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a260:	4618      	mov	r0, r3
 800a262:	371c      	adds	r7, #28
 800a264:	46bd      	mov	sp, r7
 800a266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26a:	4770      	bx	lr

0800a26c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a26c:	b480      	push	{r7}
 800a26e:	b089      	sub	sp, #36	@ 0x24
 800a270:	af00      	add	r7, sp, #0
 800a272:	60f8      	str	r0, [r7, #12]
 800a274:	60b9      	str	r1, [r7, #8]
 800a276:	4611      	mov	r1, r2
 800a278:	461a      	mov	r2, r3
 800a27a:	460b      	mov	r3, r1
 800a27c:	71fb      	strb	r3, [r7, #7]
 800a27e:	4613      	mov	r3, r2
 800a280:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a286:	68bb      	ldr	r3, [r7, #8]
 800a288:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a28a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d123      	bne.n	800a2da <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a292:	88bb      	ldrh	r3, [r7, #4]
 800a294:	3303      	adds	r3, #3
 800a296:	089b      	lsrs	r3, r3, #2
 800a298:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a29a:	2300      	movs	r3, #0
 800a29c:	61bb      	str	r3, [r7, #24]
 800a29e:	e018      	b.n	800a2d2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a2a0:	79fb      	ldrb	r3, [r7, #7]
 800a2a2:	031a      	lsls	r2, r3, #12
 800a2a4:	697b      	ldr	r3, [r7, #20]
 800a2a6:	4413      	add	r3, r2
 800a2a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a2ac:	461a      	mov	r2, r3
 800a2ae:	69fb      	ldr	r3, [r7, #28]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a2b4:	69fb      	ldr	r3, [r7, #28]
 800a2b6:	3301      	adds	r3, #1
 800a2b8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a2ba:	69fb      	ldr	r3, [r7, #28]
 800a2bc:	3301      	adds	r3, #1
 800a2be:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a2c0:	69fb      	ldr	r3, [r7, #28]
 800a2c2:	3301      	adds	r3, #1
 800a2c4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a2c6:	69fb      	ldr	r3, [r7, #28]
 800a2c8:	3301      	adds	r3, #1
 800a2ca:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a2cc:	69bb      	ldr	r3, [r7, #24]
 800a2ce:	3301      	adds	r3, #1
 800a2d0:	61bb      	str	r3, [r7, #24]
 800a2d2:	69ba      	ldr	r2, [r7, #24]
 800a2d4:	693b      	ldr	r3, [r7, #16]
 800a2d6:	429a      	cmp	r2, r3
 800a2d8:	d3e2      	bcc.n	800a2a0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a2da:	2300      	movs	r3, #0
}
 800a2dc:	4618      	mov	r0, r3
 800a2de:	3724      	adds	r7, #36	@ 0x24
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e6:	4770      	bx	lr

0800a2e8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a2e8:	b480      	push	{r7}
 800a2ea:	b08b      	sub	sp, #44	@ 0x2c
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	60f8      	str	r0, [r7, #12]
 800a2f0:	60b9      	str	r1, [r7, #8]
 800a2f2:	4613      	mov	r3, r2
 800a2f4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a2fa:	68bb      	ldr	r3, [r7, #8]
 800a2fc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a2fe:	88fb      	ldrh	r3, [r7, #6]
 800a300:	089b      	lsrs	r3, r3, #2
 800a302:	b29b      	uxth	r3, r3
 800a304:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a306:	88fb      	ldrh	r3, [r7, #6]
 800a308:	f003 0303 	and.w	r3, r3, #3
 800a30c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a30e:	2300      	movs	r3, #0
 800a310:	623b      	str	r3, [r7, #32]
 800a312:	e014      	b.n	800a33e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a314:	69bb      	ldr	r3, [r7, #24]
 800a316:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a31a:	681a      	ldr	r2, [r3, #0]
 800a31c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a31e:	601a      	str	r2, [r3, #0]
    pDest++;
 800a320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a322:	3301      	adds	r3, #1
 800a324:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a328:	3301      	adds	r3, #1
 800a32a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a32c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a32e:	3301      	adds	r3, #1
 800a330:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a334:	3301      	adds	r3, #1
 800a336:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800a338:	6a3b      	ldr	r3, [r7, #32]
 800a33a:	3301      	adds	r3, #1
 800a33c:	623b      	str	r3, [r7, #32]
 800a33e:	6a3a      	ldr	r2, [r7, #32]
 800a340:	697b      	ldr	r3, [r7, #20]
 800a342:	429a      	cmp	r2, r3
 800a344:	d3e6      	bcc.n	800a314 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a346:	8bfb      	ldrh	r3, [r7, #30]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d01e      	beq.n	800a38a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a34c:	2300      	movs	r3, #0
 800a34e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a350:	69bb      	ldr	r3, [r7, #24]
 800a352:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a356:	461a      	mov	r2, r3
 800a358:	f107 0310 	add.w	r3, r7, #16
 800a35c:	6812      	ldr	r2, [r2, #0]
 800a35e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a360:	693a      	ldr	r2, [r7, #16]
 800a362:	6a3b      	ldr	r3, [r7, #32]
 800a364:	b2db      	uxtb	r3, r3
 800a366:	00db      	lsls	r3, r3, #3
 800a368:	fa22 f303 	lsr.w	r3, r2, r3
 800a36c:	b2da      	uxtb	r2, r3
 800a36e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a370:	701a      	strb	r2, [r3, #0]
      i++;
 800a372:	6a3b      	ldr	r3, [r7, #32]
 800a374:	3301      	adds	r3, #1
 800a376:	623b      	str	r3, [r7, #32]
      pDest++;
 800a378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a37a:	3301      	adds	r3, #1
 800a37c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800a37e:	8bfb      	ldrh	r3, [r7, #30]
 800a380:	3b01      	subs	r3, #1
 800a382:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a384:	8bfb      	ldrh	r3, [r7, #30]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d1ea      	bne.n	800a360 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a38a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a38c:	4618      	mov	r0, r3
 800a38e:	372c      	adds	r7, #44	@ 0x2c
 800a390:	46bd      	mov	sp, r7
 800a392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a396:	4770      	bx	lr

0800a398 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a398:	b480      	push	{r7}
 800a39a:	b085      	sub	sp, #20
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
 800a3a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a3a6:	683b      	ldr	r3, [r7, #0]
 800a3a8:	781b      	ldrb	r3, [r3, #0]
 800a3aa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a3ac:	683b      	ldr	r3, [r7, #0]
 800a3ae:	785b      	ldrb	r3, [r3, #1]
 800a3b0:	2b01      	cmp	r3, #1
 800a3b2:	d12c      	bne.n	800a40e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a3b4:	68bb      	ldr	r3, [r7, #8]
 800a3b6:	015a      	lsls	r2, r3, #5
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	4413      	add	r3, r2
 800a3bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	db12      	blt.n	800a3ec <USB_EPSetStall+0x54>
 800a3c6:	68bb      	ldr	r3, [r7, #8]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d00f      	beq.n	800a3ec <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a3cc:	68bb      	ldr	r3, [r7, #8]
 800a3ce:	015a      	lsls	r2, r3, #5
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	4413      	add	r3, r2
 800a3d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	68ba      	ldr	r2, [r7, #8]
 800a3dc:	0151      	lsls	r1, r2, #5
 800a3de:	68fa      	ldr	r2, [r7, #12]
 800a3e0:	440a      	add	r2, r1
 800a3e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a3e6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a3ea:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a3ec:	68bb      	ldr	r3, [r7, #8]
 800a3ee:	015a      	lsls	r2, r3, #5
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	4413      	add	r3, r2
 800a3f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	68ba      	ldr	r2, [r7, #8]
 800a3fc:	0151      	lsls	r1, r2, #5
 800a3fe:	68fa      	ldr	r2, [r7, #12]
 800a400:	440a      	add	r2, r1
 800a402:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a406:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a40a:	6013      	str	r3, [r2, #0]
 800a40c:	e02b      	b.n	800a466 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a40e:	68bb      	ldr	r3, [r7, #8]
 800a410:	015a      	lsls	r2, r3, #5
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	4413      	add	r3, r2
 800a416:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	db12      	blt.n	800a446 <USB_EPSetStall+0xae>
 800a420:	68bb      	ldr	r3, [r7, #8]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d00f      	beq.n	800a446 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a426:	68bb      	ldr	r3, [r7, #8]
 800a428:	015a      	lsls	r2, r3, #5
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	4413      	add	r3, r2
 800a42e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	68ba      	ldr	r2, [r7, #8]
 800a436:	0151      	lsls	r1, r2, #5
 800a438:	68fa      	ldr	r2, [r7, #12]
 800a43a:	440a      	add	r2, r1
 800a43c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a440:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a444:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a446:	68bb      	ldr	r3, [r7, #8]
 800a448:	015a      	lsls	r2, r3, #5
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	4413      	add	r3, r2
 800a44e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	68ba      	ldr	r2, [r7, #8]
 800a456:	0151      	lsls	r1, r2, #5
 800a458:	68fa      	ldr	r2, [r7, #12]
 800a45a:	440a      	add	r2, r1
 800a45c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a460:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a464:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a466:	2300      	movs	r3, #0
}
 800a468:	4618      	mov	r0, r3
 800a46a:	3714      	adds	r7, #20
 800a46c:	46bd      	mov	sp, r7
 800a46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a472:	4770      	bx	lr

0800a474 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a474:	b480      	push	{r7}
 800a476:	b085      	sub	sp, #20
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
 800a47c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	781b      	ldrb	r3, [r3, #0]
 800a486:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a488:	683b      	ldr	r3, [r7, #0]
 800a48a:	785b      	ldrb	r3, [r3, #1]
 800a48c:	2b01      	cmp	r3, #1
 800a48e:	d128      	bne.n	800a4e2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a490:	68bb      	ldr	r3, [r7, #8]
 800a492:	015a      	lsls	r2, r3, #5
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	4413      	add	r3, r2
 800a498:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	68ba      	ldr	r2, [r7, #8]
 800a4a0:	0151      	lsls	r1, r2, #5
 800a4a2:	68fa      	ldr	r2, [r7, #12]
 800a4a4:	440a      	add	r2, r1
 800a4a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a4aa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a4ae:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a4b0:	683b      	ldr	r3, [r7, #0]
 800a4b2:	791b      	ldrb	r3, [r3, #4]
 800a4b4:	2b03      	cmp	r3, #3
 800a4b6:	d003      	beq.n	800a4c0 <USB_EPClearStall+0x4c>
 800a4b8:	683b      	ldr	r3, [r7, #0]
 800a4ba:	791b      	ldrb	r3, [r3, #4]
 800a4bc:	2b02      	cmp	r3, #2
 800a4be:	d138      	bne.n	800a532 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a4c0:	68bb      	ldr	r3, [r7, #8]
 800a4c2:	015a      	lsls	r2, r3, #5
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	4413      	add	r3, r2
 800a4c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	68ba      	ldr	r2, [r7, #8]
 800a4d0:	0151      	lsls	r1, r2, #5
 800a4d2:	68fa      	ldr	r2, [r7, #12]
 800a4d4:	440a      	add	r2, r1
 800a4d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a4da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a4de:	6013      	str	r3, [r2, #0]
 800a4e0:	e027      	b.n	800a532 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a4e2:	68bb      	ldr	r3, [r7, #8]
 800a4e4:	015a      	lsls	r2, r3, #5
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	4413      	add	r3, r2
 800a4ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	68ba      	ldr	r2, [r7, #8]
 800a4f2:	0151      	lsls	r1, r2, #5
 800a4f4:	68fa      	ldr	r2, [r7, #12]
 800a4f6:	440a      	add	r2, r1
 800a4f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a4fc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a500:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a502:	683b      	ldr	r3, [r7, #0]
 800a504:	791b      	ldrb	r3, [r3, #4]
 800a506:	2b03      	cmp	r3, #3
 800a508:	d003      	beq.n	800a512 <USB_EPClearStall+0x9e>
 800a50a:	683b      	ldr	r3, [r7, #0]
 800a50c:	791b      	ldrb	r3, [r3, #4]
 800a50e:	2b02      	cmp	r3, #2
 800a510:	d10f      	bne.n	800a532 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a512:	68bb      	ldr	r3, [r7, #8]
 800a514:	015a      	lsls	r2, r3, #5
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	4413      	add	r3, r2
 800a51a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	68ba      	ldr	r2, [r7, #8]
 800a522:	0151      	lsls	r1, r2, #5
 800a524:	68fa      	ldr	r2, [r7, #12]
 800a526:	440a      	add	r2, r1
 800a528:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a52c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a530:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a532:	2300      	movs	r3, #0
}
 800a534:	4618      	mov	r0, r3
 800a536:	3714      	adds	r7, #20
 800a538:	46bd      	mov	sp, r7
 800a53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53e:	4770      	bx	lr

0800a540 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a540:	b480      	push	{r7}
 800a542:	b085      	sub	sp, #20
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
 800a548:	460b      	mov	r3, r1
 800a54a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	68fa      	ldr	r2, [r7, #12]
 800a55a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a55e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800a562:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a56a:	681a      	ldr	r2, [r3, #0]
 800a56c:	78fb      	ldrb	r3, [r7, #3]
 800a56e:	011b      	lsls	r3, r3, #4
 800a570:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800a574:	68f9      	ldr	r1, [r7, #12]
 800a576:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a57a:	4313      	orrs	r3, r2
 800a57c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a57e:	2300      	movs	r3, #0
}
 800a580:	4618      	mov	r0, r3
 800a582:	3714      	adds	r7, #20
 800a584:	46bd      	mov	sp, r7
 800a586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58a:	4770      	bx	lr

0800a58c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a58c:	b480      	push	{r7}
 800a58e:	b085      	sub	sp, #20
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	68fa      	ldr	r2, [r7, #12]
 800a5a2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a5a6:	f023 0303 	bic.w	r3, r3, #3
 800a5aa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a5b2:	685b      	ldr	r3, [r3, #4]
 800a5b4:	68fa      	ldr	r2, [r7, #12]
 800a5b6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a5ba:	f023 0302 	bic.w	r3, r3, #2
 800a5be:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a5c0:	2300      	movs	r3, #0
}
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	3714      	adds	r7, #20
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5cc:	4770      	bx	lr

0800a5ce <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a5ce:	b480      	push	{r7}
 800a5d0:	b085      	sub	sp, #20
 800a5d2:	af00      	add	r7, sp, #0
 800a5d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	68fa      	ldr	r2, [r7, #12]
 800a5e4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a5e8:	f023 0303 	bic.w	r3, r3, #3
 800a5ec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a5f4:	685b      	ldr	r3, [r3, #4]
 800a5f6:	68fa      	ldr	r2, [r7, #12]
 800a5f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a5fc:	f043 0302 	orr.w	r3, r3, #2
 800a600:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a602:	2300      	movs	r3, #0
}
 800a604:	4618      	mov	r0, r3
 800a606:	3714      	adds	r7, #20
 800a608:	46bd      	mov	sp, r7
 800a60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60e:	4770      	bx	lr

0800a610 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800a610:	b480      	push	{r7}
 800a612:	b085      	sub	sp, #20
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	695b      	ldr	r3, [r3, #20]
 800a61c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	699b      	ldr	r3, [r3, #24]
 800a622:	68fa      	ldr	r2, [r7, #12]
 800a624:	4013      	ands	r3, r2
 800a626:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a628:	68fb      	ldr	r3, [r7, #12]
}
 800a62a:	4618      	mov	r0, r3
 800a62c:	3714      	adds	r7, #20
 800a62e:	46bd      	mov	sp, r7
 800a630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a634:	4770      	bx	lr

0800a636 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a636:	b480      	push	{r7}
 800a638:	b085      	sub	sp, #20
 800a63a:	af00      	add	r7, sp, #0
 800a63c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a648:	699b      	ldr	r3, [r3, #24]
 800a64a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a652:	69db      	ldr	r3, [r3, #28]
 800a654:	68ba      	ldr	r2, [r7, #8]
 800a656:	4013      	ands	r3, r2
 800a658:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a65a:	68bb      	ldr	r3, [r7, #8]
 800a65c:	0c1b      	lsrs	r3, r3, #16
}
 800a65e:	4618      	mov	r0, r3
 800a660:	3714      	adds	r7, #20
 800a662:	46bd      	mov	sp, r7
 800a664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a668:	4770      	bx	lr

0800a66a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a66a:	b480      	push	{r7}
 800a66c:	b085      	sub	sp, #20
 800a66e:	af00      	add	r7, sp, #0
 800a670:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a67c:	699b      	ldr	r3, [r3, #24]
 800a67e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a686:	69db      	ldr	r3, [r3, #28]
 800a688:	68ba      	ldr	r2, [r7, #8]
 800a68a:	4013      	ands	r3, r2
 800a68c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a68e:	68bb      	ldr	r3, [r7, #8]
 800a690:	b29b      	uxth	r3, r3
}
 800a692:	4618      	mov	r0, r3
 800a694:	3714      	adds	r7, #20
 800a696:	46bd      	mov	sp, r7
 800a698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69c:	4770      	bx	lr

0800a69e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a69e:	b480      	push	{r7}
 800a6a0:	b085      	sub	sp, #20
 800a6a2:	af00      	add	r7, sp, #0
 800a6a4:	6078      	str	r0, [r7, #4]
 800a6a6:	460b      	mov	r3, r1
 800a6a8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a6ae:	78fb      	ldrb	r3, [r7, #3]
 800a6b0:	015a      	lsls	r2, r3, #5
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	4413      	add	r3, r2
 800a6b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6ba:	689b      	ldr	r3, [r3, #8]
 800a6bc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a6c4:	695b      	ldr	r3, [r3, #20]
 800a6c6:	68ba      	ldr	r2, [r7, #8]
 800a6c8:	4013      	ands	r3, r2
 800a6ca:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a6cc:	68bb      	ldr	r3, [r7, #8]
}
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	3714      	adds	r7, #20
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d8:	4770      	bx	lr

0800a6da <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a6da:	b480      	push	{r7}
 800a6dc:	b087      	sub	sp, #28
 800a6de:	af00      	add	r7, sp, #0
 800a6e0:	6078      	str	r0, [r7, #4]
 800a6e2:	460b      	mov	r3, r1
 800a6e4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a6ea:	697b      	ldr	r3, [r7, #20]
 800a6ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a6f0:	691b      	ldr	r3, [r3, #16]
 800a6f2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a6f4:	697b      	ldr	r3, [r7, #20]
 800a6f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a6fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a6fc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a6fe:	78fb      	ldrb	r3, [r7, #3]
 800a700:	f003 030f 	and.w	r3, r3, #15
 800a704:	68fa      	ldr	r2, [r7, #12]
 800a706:	fa22 f303 	lsr.w	r3, r2, r3
 800a70a:	01db      	lsls	r3, r3, #7
 800a70c:	b2db      	uxtb	r3, r3
 800a70e:	693a      	ldr	r2, [r7, #16]
 800a710:	4313      	orrs	r3, r2
 800a712:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a714:	78fb      	ldrb	r3, [r7, #3]
 800a716:	015a      	lsls	r2, r3, #5
 800a718:	697b      	ldr	r3, [r7, #20]
 800a71a:	4413      	add	r3, r2
 800a71c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a720:	689b      	ldr	r3, [r3, #8]
 800a722:	693a      	ldr	r2, [r7, #16]
 800a724:	4013      	ands	r3, r2
 800a726:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a728:	68bb      	ldr	r3, [r7, #8]
}
 800a72a:	4618      	mov	r0, r3
 800a72c:	371c      	adds	r7, #28
 800a72e:	46bd      	mov	sp, r7
 800a730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a734:	4770      	bx	lr

0800a736 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800a736:	b480      	push	{r7}
 800a738:	b083      	sub	sp, #12
 800a73a:	af00      	add	r7, sp, #0
 800a73c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	695b      	ldr	r3, [r3, #20]
 800a742:	f003 0301 	and.w	r3, r3, #1
}
 800a746:	4618      	mov	r0, r3
 800a748:	370c      	adds	r7, #12
 800a74a:	46bd      	mov	sp, r7
 800a74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a750:	4770      	bx	lr

0800a752 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800a752:	b480      	push	{r7}
 800a754:	b085      	sub	sp, #20
 800a756:	af00      	add	r7, sp, #0
 800a758:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	68fa      	ldr	r2, [r7, #12]
 800a768:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a76c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800a770:	f023 0307 	bic.w	r3, r3, #7
 800a774:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a77c:	685b      	ldr	r3, [r3, #4]
 800a77e:	68fa      	ldr	r2, [r7, #12]
 800a780:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a784:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a788:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a78a:	2300      	movs	r3, #0
}
 800a78c:	4618      	mov	r0, r3
 800a78e:	3714      	adds	r7, #20
 800a790:	46bd      	mov	sp, r7
 800a792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a796:	4770      	bx	lr

0800a798 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800a798:	b480      	push	{r7}
 800a79a:	b087      	sub	sp, #28
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	60f8      	str	r0, [r7, #12]
 800a7a0:	460b      	mov	r3, r1
 800a7a2:	607a      	str	r2, [r7, #4]
 800a7a4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	333c      	adds	r3, #60	@ 0x3c
 800a7ae:	3304      	adds	r3, #4
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a7b4:	693b      	ldr	r3, [r7, #16]
 800a7b6:	4a26      	ldr	r2, [pc, #152]	@ (800a850 <USB_EP0_OutStart+0xb8>)
 800a7b8:	4293      	cmp	r3, r2
 800a7ba:	d90a      	bls.n	800a7d2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a7bc:	697b      	ldr	r3, [r7, #20]
 800a7be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a7c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a7cc:	d101      	bne.n	800a7d2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	e037      	b.n	800a842 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a7d2:	697b      	ldr	r3, [r7, #20]
 800a7d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7d8:	461a      	mov	r2, r3
 800a7da:	2300      	movs	r3, #0
 800a7dc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a7de:	697b      	ldr	r3, [r7, #20]
 800a7e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7e4:	691b      	ldr	r3, [r3, #16]
 800a7e6:	697a      	ldr	r2, [r7, #20]
 800a7e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a7ec:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a7f0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a7f2:	697b      	ldr	r3, [r7, #20]
 800a7f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7f8:	691b      	ldr	r3, [r3, #16]
 800a7fa:	697a      	ldr	r2, [r7, #20]
 800a7fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a800:	f043 0318 	orr.w	r3, r3, #24
 800a804:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a806:	697b      	ldr	r3, [r7, #20]
 800a808:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a80c:	691b      	ldr	r3, [r3, #16]
 800a80e:	697a      	ldr	r2, [r7, #20]
 800a810:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a814:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800a818:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a81a:	7afb      	ldrb	r3, [r7, #11]
 800a81c:	2b01      	cmp	r3, #1
 800a81e:	d10f      	bne.n	800a840 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a820:	697b      	ldr	r3, [r7, #20]
 800a822:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a826:	461a      	mov	r2, r3
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a82c:	697b      	ldr	r3, [r7, #20]
 800a82e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	697a      	ldr	r2, [r7, #20]
 800a836:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a83a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800a83e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a840:	2300      	movs	r3, #0
}
 800a842:	4618      	mov	r0, r3
 800a844:	371c      	adds	r7, #28
 800a846:	46bd      	mov	sp, r7
 800a848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84c:	4770      	bx	lr
 800a84e:	bf00      	nop
 800a850:	4f54300a 	.word	0x4f54300a

0800a854 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a854:	b480      	push	{r7}
 800a856:	b085      	sub	sp, #20
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a85c:	2300      	movs	r3, #0
 800a85e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	3301      	adds	r3, #1
 800a864:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a86c:	d901      	bls.n	800a872 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a86e:	2303      	movs	r3, #3
 800a870:	e01b      	b.n	800a8aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	691b      	ldr	r3, [r3, #16]
 800a876:	2b00      	cmp	r3, #0
 800a878:	daf2      	bge.n	800a860 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a87a:	2300      	movs	r3, #0
 800a87c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	691b      	ldr	r3, [r3, #16]
 800a882:	f043 0201 	orr.w	r2, r3, #1
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	3301      	adds	r3, #1
 800a88e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a896:	d901      	bls.n	800a89c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a898:	2303      	movs	r3, #3
 800a89a:	e006      	b.n	800a8aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	691b      	ldr	r3, [r3, #16]
 800a8a0:	f003 0301 	and.w	r3, r3, #1
 800a8a4:	2b01      	cmp	r3, #1
 800a8a6:	d0f0      	beq.n	800a88a <USB_CoreReset+0x36>

  return HAL_OK;
 800a8a8:	2300      	movs	r3, #0
}
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	3714      	adds	r7, #20
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b4:	4770      	bx	lr
	...

0800a8b8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b084      	sub	sp, #16
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
 800a8c0:	460b      	mov	r3, r1
 800a8c2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a8c4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800a8c8:	f002 fc46 	bl	800d158 <USBD_static_malloc>
 800a8cc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d109      	bne.n	800a8e8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	32b0      	adds	r2, #176	@ 0xb0
 800a8de:	2100      	movs	r1, #0
 800a8e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a8e4:	2302      	movs	r3, #2
 800a8e6:	e0d4      	b.n	800aa92 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800a8e8:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800a8ec:	2100      	movs	r1, #0
 800a8ee:	68f8      	ldr	r0, [r7, #12]
 800a8f0:	f003 fb53 	bl	800df9a <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	32b0      	adds	r2, #176	@ 0xb0
 800a8fe:	68f9      	ldr	r1, [r7, #12]
 800a900:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	32b0      	adds	r2, #176	@ 0xb0
 800a90e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	7c1b      	ldrb	r3, [r3, #16]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d138      	bne.n	800a992 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a920:	4b5e      	ldr	r3, [pc, #376]	@ (800aa9c <USBD_CDC_Init+0x1e4>)
 800a922:	7819      	ldrb	r1, [r3, #0]
 800a924:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a928:	2202      	movs	r2, #2
 800a92a:	6878      	ldr	r0, [r7, #4]
 800a92c:	f002 faf1 	bl	800cf12 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a930:	4b5a      	ldr	r3, [pc, #360]	@ (800aa9c <USBD_CDC_Init+0x1e4>)
 800a932:	781b      	ldrb	r3, [r3, #0]
 800a934:	f003 020f 	and.w	r2, r3, #15
 800a938:	6879      	ldr	r1, [r7, #4]
 800a93a:	4613      	mov	r3, r2
 800a93c:	009b      	lsls	r3, r3, #2
 800a93e:	4413      	add	r3, r2
 800a940:	009b      	lsls	r3, r3, #2
 800a942:	440b      	add	r3, r1
 800a944:	3324      	adds	r3, #36	@ 0x24
 800a946:	2201      	movs	r2, #1
 800a948:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a94a:	4b55      	ldr	r3, [pc, #340]	@ (800aaa0 <USBD_CDC_Init+0x1e8>)
 800a94c:	7819      	ldrb	r1, [r3, #0]
 800a94e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a952:	2202      	movs	r2, #2
 800a954:	6878      	ldr	r0, [r7, #4]
 800a956:	f002 fadc 	bl	800cf12 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a95a:	4b51      	ldr	r3, [pc, #324]	@ (800aaa0 <USBD_CDC_Init+0x1e8>)
 800a95c:	781b      	ldrb	r3, [r3, #0]
 800a95e:	f003 020f 	and.w	r2, r3, #15
 800a962:	6879      	ldr	r1, [r7, #4]
 800a964:	4613      	mov	r3, r2
 800a966:	009b      	lsls	r3, r3, #2
 800a968:	4413      	add	r3, r2
 800a96a:	009b      	lsls	r3, r3, #2
 800a96c:	440b      	add	r3, r1
 800a96e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a972:	2201      	movs	r2, #1
 800a974:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a976:	4b4b      	ldr	r3, [pc, #300]	@ (800aaa4 <USBD_CDC_Init+0x1ec>)
 800a978:	781b      	ldrb	r3, [r3, #0]
 800a97a:	f003 020f 	and.w	r2, r3, #15
 800a97e:	6879      	ldr	r1, [r7, #4]
 800a980:	4613      	mov	r3, r2
 800a982:	009b      	lsls	r3, r3, #2
 800a984:	4413      	add	r3, r2
 800a986:	009b      	lsls	r3, r3, #2
 800a988:	440b      	add	r3, r1
 800a98a:	3326      	adds	r3, #38	@ 0x26
 800a98c:	2210      	movs	r2, #16
 800a98e:	801a      	strh	r2, [r3, #0]
 800a990:	e035      	b.n	800a9fe <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a992:	4b42      	ldr	r3, [pc, #264]	@ (800aa9c <USBD_CDC_Init+0x1e4>)
 800a994:	7819      	ldrb	r1, [r3, #0]
 800a996:	2340      	movs	r3, #64	@ 0x40
 800a998:	2202      	movs	r2, #2
 800a99a:	6878      	ldr	r0, [r7, #4]
 800a99c:	f002 fab9 	bl	800cf12 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a9a0:	4b3e      	ldr	r3, [pc, #248]	@ (800aa9c <USBD_CDC_Init+0x1e4>)
 800a9a2:	781b      	ldrb	r3, [r3, #0]
 800a9a4:	f003 020f 	and.w	r2, r3, #15
 800a9a8:	6879      	ldr	r1, [r7, #4]
 800a9aa:	4613      	mov	r3, r2
 800a9ac:	009b      	lsls	r3, r3, #2
 800a9ae:	4413      	add	r3, r2
 800a9b0:	009b      	lsls	r3, r3, #2
 800a9b2:	440b      	add	r3, r1
 800a9b4:	3324      	adds	r3, #36	@ 0x24
 800a9b6:	2201      	movs	r2, #1
 800a9b8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a9ba:	4b39      	ldr	r3, [pc, #228]	@ (800aaa0 <USBD_CDC_Init+0x1e8>)
 800a9bc:	7819      	ldrb	r1, [r3, #0]
 800a9be:	2340      	movs	r3, #64	@ 0x40
 800a9c0:	2202      	movs	r2, #2
 800a9c2:	6878      	ldr	r0, [r7, #4]
 800a9c4:	f002 faa5 	bl	800cf12 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a9c8:	4b35      	ldr	r3, [pc, #212]	@ (800aaa0 <USBD_CDC_Init+0x1e8>)
 800a9ca:	781b      	ldrb	r3, [r3, #0]
 800a9cc:	f003 020f 	and.w	r2, r3, #15
 800a9d0:	6879      	ldr	r1, [r7, #4]
 800a9d2:	4613      	mov	r3, r2
 800a9d4:	009b      	lsls	r3, r3, #2
 800a9d6:	4413      	add	r3, r2
 800a9d8:	009b      	lsls	r3, r3, #2
 800a9da:	440b      	add	r3, r1
 800a9dc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a9e0:	2201      	movs	r2, #1
 800a9e2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a9e4:	4b2f      	ldr	r3, [pc, #188]	@ (800aaa4 <USBD_CDC_Init+0x1ec>)
 800a9e6:	781b      	ldrb	r3, [r3, #0]
 800a9e8:	f003 020f 	and.w	r2, r3, #15
 800a9ec:	6879      	ldr	r1, [r7, #4]
 800a9ee:	4613      	mov	r3, r2
 800a9f0:	009b      	lsls	r3, r3, #2
 800a9f2:	4413      	add	r3, r2
 800a9f4:	009b      	lsls	r3, r3, #2
 800a9f6:	440b      	add	r3, r1
 800a9f8:	3326      	adds	r3, #38	@ 0x26
 800a9fa:	2210      	movs	r2, #16
 800a9fc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a9fe:	4b29      	ldr	r3, [pc, #164]	@ (800aaa4 <USBD_CDC_Init+0x1ec>)
 800aa00:	7819      	ldrb	r1, [r3, #0]
 800aa02:	2308      	movs	r3, #8
 800aa04:	2203      	movs	r2, #3
 800aa06:	6878      	ldr	r0, [r7, #4]
 800aa08:	f002 fa83 	bl	800cf12 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800aa0c:	4b25      	ldr	r3, [pc, #148]	@ (800aaa4 <USBD_CDC_Init+0x1ec>)
 800aa0e:	781b      	ldrb	r3, [r3, #0]
 800aa10:	f003 020f 	and.w	r2, r3, #15
 800aa14:	6879      	ldr	r1, [r7, #4]
 800aa16:	4613      	mov	r3, r2
 800aa18:	009b      	lsls	r3, r3, #2
 800aa1a:	4413      	add	r3, r2
 800aa1c:	009b      	lsls	r3, r3, #2
 800aa1e:	440b      	add	r3, r1
 800aa20:	3324      	adds	r3, #36	@ 0x24
 800aa22:	2201      	movs	r2, #1
 800aa24:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	2200      	movs	r2, #0
 800aa2a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800aa34:	687a      	ldr	r2, [r7, #4]
 800aa36:	33b0      	adds	r3, #176	@ 0xb0
 800aa38:	009b      	lsls	r3, r3, #2
 800aa3a:	4413      	add	r3, r2
 800aa3c:	685b      	ldr	r3, [r3, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	2200      	movs	r2, #0
 800aa46:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d101      	bne.n	800aa60 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800aa5c:	2302      	movs	r3, #2
 800aa5e:	e018      	b.n	800aa92 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	7c1b      	ldrb	r3, [r3, #16]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d10a      	bne.n	800aa7e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800aa68:	4b0d      	ldr	r3, [pc, #52]	@ (800aaa0 <USBD_CDC_Init+0x1e8>)
 800aa6a:	7819      	ldrb	r1, [r3, #0]
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800aa72:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800aa76:	6878      	ldr	r0, [r7, #4]
 800aa78:	f002 fb3a 	bl	800d0f0 <USBD_LL_PrepareReceive>
 800aa7c:	e008      	b.n	800aa90 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800aa7e:	4b08      	ldr	r3, [pc, #32]	@ (800aaa0 <USBD_CDC_Init+0x1e8>)
 800aa80:	7819      	ldrb	r1, [r3, #0]
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800aa88:	2340      	movs	r3, #64	@ 0x40
 800aa8a:	6878      	ldr	r0, [r7, #4]
 800aa8c:	f002 fb30 	bl	800d0f0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800aa90:	2300      	movs	r3, #0
}
 800aa92:	4618      	mov	r0, r3
 800aa94:	3710      	adds	r7, #16
 800aa96:	46bd      	mov	sp, r7
 800aa98:	bd80      	pop	{r7, pc}
 800aa9a:	bf00      	nop
 800aa9c:	20000097 	.word	0x20000097
 800aaa0:	20000098 	.word	0x20000098
 800aaa4:	20000099 	.word	0x20000099

0800aaa8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b082      	sub	sp, #8
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
 800aab0:	460b      	mov	r3, r1
 800aab2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800aab4:	4b3a      	ldr	r3, [pc, #232]	@ (800aba0 <USBD_CDC_DeInit+0xf8>)
 800aab6:	781b      	ldrb	r3, [r3, #0]
 800aab8:	4619      	mov	r1, r3
 800aaba:	6878      	ldr	r0, [r7, #4]
 800aabc:	f002 fa4f 	bl	800cf5e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800aac0:	4b37      	ldr	r3, [pc, #220]	@ (800aba0 <USBD_CDC_DeInit+0xf8>)
 800aac2:	781b      	ldrb	r3, [r3, #0]
 800aac4:	f003 020f 	and.w	r2, r3, #15
 800aac8:	6879      	ldr	r1, [r7, #4]
 800aaca:	4613      	mov	r3, r2
 800aacc:	009b      	lsls	r3, r3, #2
 800aace:	4413      	add	r3, r2
 800aad0:	009b      	lsls	r3, r3, #2
 800aad2:	440b      	add	r3, r1
 800aad4:	3324      	adds	r3, #36	@ 0x24
 800aad6:	2200      	movs	r2, #0
 800aad8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800aada:	4b32      	ldr	r3, [pc, #200]	@ (800aba4 <USBD_CDC_DeInit+0xfc>)
 800aadc:	781b      	ldrb	r3, [r3, #0]
 800aade:	4619      	mov	r1, r3
 800aae0:	6878      	ldr	r0, [r7, #4]
 800aae2:	f002 fa3c 	bl	800cf5e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800aae6:	4b2f      	ldr	r3, [pc, #188]	@ (800aba4 <USBD_CDC_DeInit+0xfc>)
 800aae8:	781b      	ldrb	r3, [r3, #0]
 800aaea:	f003 020f 	and.w	r2, r3, #15
 800aaee:	6879      	ldr	r1, [r7, #4]
 800aaf0:	4613      	mov	r3, r2
 800aaf2:	009b      	lsls	r3, r3, #2
 800aaf4:	4413      	add	r3, r2
 800aaf6:	009b      	lsls	r3, r3, #2
 800aaf8:	440b      	add	r3, r1
 800aafa:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800aafe:	2200      	movs	r2, #0
 800ab00:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800ab02:	4b29      	ldr	r3, [pc, #164]	@ (800aba8 <USBD_CDC_DeInit+0x100>)
 800ab04:	781b      	ldrb	r3, [r3, #0]
 800ab06:	4619      	mov	r1, r3
 800ab08:	6878      	ldr	r0, [r7, #4]
 800ab0a:	f002 fa28 	bl	800cf5e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800ab0e:	4b26      	ldr	r3, [pc, #152]	@ (800aba8 <USBD_CDC_DeInit+0x100>)
 800ab10:	781b      	ldrb	r3, [r3, #0]
 800ab12:	f003 020f 	and.w	r2, r3, #15
 800ab16:	6879      	ldr	r1, [r7, #4]
 800ab18:	4613      	mov	r3, r2
 800ab1a:	009b      	lsls	r3, r3, #2
 800ab1c:	4413      	add	r3, r2
 800ab1e:	009b      	lsls	r3, r3, #2
 800ab20:	440b      	add	r3, r1
 800ab22:	3324      	adds	r3, #36	@ 0x24
 800ab24:	2200      	movs	r2, #0
 800ab26:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800ab28:	4b1f      	ldr	r3, [pc, #124]	@ (800aba8 <USBD_CDC_DeInit+0x100>)
 800ab2a:	781b      	ldrb	r3, [r3, #0]
 800ab2c:	f003 020f 	and.w	r2, r3, #15
 800ab30:	6879      	ldr	r1, [r7, #4]
 800ab32:	4613      	mov	r3, r2
 800ab34:	009b      	lsls	r3, r3, #2
 800ab36:	4413      	add	r3, r2
 800ab38:	009b      	lsls	r3, r3, #2
 800ab3a:	440b      	add	r3, r1
 800ab3c:	3326      	adds	r3, #38	@ 0x26
 800ab3e:	2200      	movs	r2, #0
 800ab40:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	32b0      	adds	r2, #176	@ 0xb0
 800ab4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d01f      	beq.n	800ab94 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ab5a:	687a      	ldr	r2, [r7, #4]
 800ab5c:	33b0      	adds	r3, #176	@ 0xb0
 800ab5e:	009b      	lsls	r3, r3, #2
 800ab60:	4413      	add	r3, r2
 800ab62:	685b      	ldr	r3, [r3, #4]
 800ab64:	685b      	ldr	r3, [r3, #4]
 800ab66:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	32b0      	adds	r2, #176	@ 0xb0
 800ab72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab76:	4618      	mov	r0, r3
 800ab78:	f002 fafc 	bl	800d174 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	32b0      	adds	r2, #176	@ 0xb0
 800ab86:	2100      	movs	r1, #0
 800ab88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	2200      	movs	r2, #0
 800ab90:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800ab94:	2300      	movs	r3, #0
}
 800ab96:	4618      	mov	r0, r3
 800ab98:	3708      	adds	r7, #8
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	bd80      	pop	{r7, pc}
 800ab9e:	bf00      	nop
 800aba0:	20000097 	.word	0x20000097
 800aba4:	20000098 	.word	0x20000098
 800aba8:	20000099 	.word	0x20000099

0800abac <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800abac:	b580      	push	{r7, lr}
 800abae:	b086      	sub	sp, #24
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
 800abb4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	32b0      	adds	r2, #176	@ 0xb0
 800abc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abc4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800abc6:	2300      	movs	r3, #0
 800abc8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800abca:	2300      	movs	r3, #0
 800abcc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800abce:	2300      	movs	r3, #0
 800abd0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800abd2:	693b      	ldr	r3, [r7, #16]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d101      	bne.n	800abdc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800abd8:	2303      	movs	r3, #3
 800abda:	e0bf      	b.n	800ad5c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800abdc:	683b      	ldr	r3, [r7, #0]
 800abde:	781b      	ldrb	r3, [r3, #0]
 800abe0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d050      	beq.n	800ac8a <USBD_CDC_Setup+0xde>
 800abe8:	2b20      	cmp	r3, #32
 800abea:	f040 80af 	bne.w	800ad4c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	88db      	ldrh	r3, [r3, #6]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d03a      	beq.n	800ac6c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	781b      	ldrb	r3, [r3, #0]
 800abfa:	b25b      	sxtb	r3, r3
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	da1b      	bge.n	800ac38 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ac06:	687a      	ldr	r2, [r7, #4]
 800ac08:	33b0      	adds	r3, #176	@ 0xb0
 800ac0a:	009b      	lsls	r3, r3, #2
 800ac0c:	4413      	add	r3, r2
 800ac0e:	685b      	ldr	r3, [r3, #4]
 800ac10:	689b      	ldr	r3, [r3, #8]
 800ac12:	683a      	ldr	r2, [r7, #0]
 800ac14:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800ac16:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ac18:	683a      	ldr	r2, [r7, #0]
 800ac1a:	88d2      	ldrh	r2, [r2, #6]
 800ac1c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800ac1e:	683b      	ldr	r3, [r7, #0]
 800ac20:	88db      	ldrh	r3, [r3, #6]
 800ac22:	2b07      	cmp	r3, #7
 800ac24:	bf28      	it	cs
 800ac26:	2307      	movcs	r3, #7
 800ac28:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800ac2a:	693b      	ldr	r3, [r7, #16]
 800ac2c:	89fa      	ldrh	r2, [r7, #14]
 800ac2e:	4619      	mov	r1, r3
 800ac30:	6878      	ldr	r0, [r7, #4]
 800ac32:	f001 fd53 	bl	800c6dc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800ac36:	e090      	b.n	800ad5a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800ac38:	683b      	ldr	r3, [r7, #0]
 800ac3a:	785a      	ldrb	r2, [r3, #1]
 800ac3c:	693b      	ldr	r3, [r7, #16]
 800ac3e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800ac42:	683b      	ldr	r3, [r7, #0]
 800ac44:	88db      	ldrh	r3, [r3, #6]
 800ac46:	2b3f      	cmp	r3, #63	@ 0x3f
 800ac48:	d803      	bhi.n	800ac52 <USBD_CDC_Setup+0xa6>
 800ac4a:	683b      	ldr	r3, [r7, #0]
 800ac4c:	88db      	ldrh	r3, [r3, #6]
 800ac4e:	b2da      	uxtb	r2, r3
 800ac50:	e000      	b.n	800ac54 <USBD_CDC_Setup+0xa8>
 800ac52:	2240      	movs	r2, #64	@ 0x40
 800ac54:	693b      	ldr	r3, [r7, #16]
 800ac56:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800ac5a:	6939      	ldr	r1, [r7, #16]
 800ac5c:	693b      	ldr	r3, [r7, #16]
 800ac5e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800ac62:	461a      	mov	r2, r3
 800ac64:	6878      	ldr	r0, [r7, #4]
 800ac66:	f001 fd65 	bl	800c734 <USBD_CtlPrepareRx>
      break;
 800ac6a:	e076      	b.n	800ad5a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ac72:	687a      	ldr	r2, [r7, #4]
 800ac74:	33b0      	adds	r3, #176	@ 0xb0
 800ac76:	009b      	lsls	r3, r3, #2
 800ac78:	4413      	add	r3, r2
 800ac7a:	685b      	ldr	r3, [r3, #4]
 800ac7c:	689b      	ldr	r3, [r3, #8]
 800ac7e:	683a      	ldr	r2, [r7, #0]
 800ac80:	7850      	ldrb	r0, [r2, #1]
 800ac82:	2200      	movs	r2, #0
 800ac84:	6839      	ldr	r1, [r7, #0]
 800ac86:	4798      	blx	r3
      break;
 800ac88:	e067      	b.n	800ad5a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ac8a:	683b      	ldr	r3, [r7, #0]
 800ac8c:	785b      	ldrb	r3, [r3, #1]
 800ac8e:	2b0b      	cmp	r3, #11
 800ac90:	d851      	bhi.n	800ad36 <USBD_CDC_Setup+0x18a>
 800ac92:	a201      	add	r2, pc, #4	@ (adr r2, 800ac98 <USBD_CDC_Setup+0xec>)
 800ac94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac98:	0800acc9 	.word	0x0800acc9
 800ac9c:	0800ad45 	.word	0x0800ad45
 800aca0:	0800ad37 	.word	0x0800ad37
 800aca4:	0800ad37 	.word	0x0800ad37
 800aca8:	0800ad37 	.word	0x0800ad37
 800acac:	0800ad37 	.word	0x0800ad37
 800acb0:	0800ad37 	.word	0x0800ad37
 800acb4:	0800ad37 	.word	0x0800ad37
 800acb8:	0800ad37 	.word	0x0800ad37
 800acbc:	0800ad37 	.word	0x0800ad37
 800acc0:	0800acf3 	.word	0x0800acf3
 800acc4:	0800ad1d 	.word	0x0800ad1d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800acce:	b2db      	uxtb	r3, r3
 800acd0:	2b03      	cmp	r3, #3
 800acd2:	d107      	bne.n	800ace4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800acd4:	f107 030a 	add.w	r3, r7, #10
 800acd8:	2202      	movs	r2, #2
 800acda:	4619      	mov	r1, r3
 800acdc:	6878      	ldr	r0, [r7, #4]
 800acde:	f001 fcfd 	bl	800c6dc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ace2:	e032      	b.n	800ad4a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ace4:	6839      	ldr	r1, [r7, #0]
 800ace6:	6878      	ldr	r0, [r7, #4]
 800ace8:	f001 fc7b 	bl	800c5e2 <USBD_CtlError>
            ret = USBD_FAIL;
 800acec:	2303      	movs	r3, #3
 800acee:	75fb      	strb	r3, [r7, #23]
          break;
 800acf0:	e02b      	b.n	800ad4a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800acf8:	b2db      	uxtb	r3, r3
 800acfa:	2b03      	cmp	r3, #3
 800acfc:	d107      	bne.n	800ad0e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800acfe:	f107 030d 	add.w	r3, r7, #13
 800ad02:	2201      	movs	r2, #1
 800ad04:	4619      	mov	r1, r3
 800ad06:	6878      	ldr	r0, [r7, #4]
 800ad08:	f001 fce8 	bl	800c6dc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ad0c:	e01d      	b.n	800ad4a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ad0e:	6839      	ldr	r1, [r7, #0]
 800ad10:	6878      	ldr	r0, [r7, #4]
 800ad12:	f001 fc66 	bl	800c5e2 <USBD_CtlError>
            ret = USBD_FAIL;
 800ad16:	2303      	movs	r3, #3
 800ad18:	75fb      	strb	r3, [r7, #23]
          break;
 800ad1a:	e016      	b.n	800ad4a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ad22:	b2db      	uxtb	r3, r3
 800ad24:	2b03      	cmp	r3, #3
 800ad26:	d00f      	beq.n	800ad48 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800ad28:	6839      	ldr	r1, [r7, #0]
 800ad2a:	6878      	ldr	r0, [r7, #4]
 800ad2c:	f001 fc59 	bl	800c5e2 <USBD_CtlError>
            ret = USBD_FAIL;
 800ad30:	2303      	movs	r3, #3
 800ad32:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800ad34:	e008      	b.n	800ad48 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800ad36:	6839      	ldr	r1, [r7, #0]
 800ad38:	6878      	ldr	r0, [r7, #4]
 800ad3a:	f001 fc52 	bl	800c5e2 <USBD_CtlError>
          ret = USBD_FAIL;
 800ad3e:	2303      	movs	r3, #3
 800ad40:	75fb      	strb	r3, [r7, #23]
          break;
 800ad42:	e002      	b.n	800ad4a <USBD_CDC_Setup+0x19e>
          break;
 800ad44:	bf00      	nop
 800ad46:	e008      	b.n	800ad5a <USBD_CDC_Setup+0x1ae>
          break;
 800ad48:	bf00      	nop
      }
      break;
 800ad4a:	e006      	b.n	800ad5a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800ad4c:	6839      	ldr	r1, [r7, #0]
 800ad4e:	6878      	ldr	r0, [r7, #4]
 800ad50:	f001 fc47 	bl	800c5e2 <USBD_CtlError>
      ret = USBD_FAIL;
 800ad54:	2303      	movs	r3, #3
 800ad56:	75fb      	strb	r3, [r7, #23]
      break;
 800ad58:	bf00      	nop
  }

  return (uint8_t)ret;
 800ad5a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	3718      	adds	r7, #24
 800ad60:	46bd      	mov	sp, r7
 800ad62:	bd80      	pop	{r7, pc}

0800ad64 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b084      	sub	sp, #16
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
 800ad6c:	460b      	mov	r3, r1
 800ad6e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ad76:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	32b0      	adds	r2, #176	@ 0xb0
 800ad82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d101      	bne.n	800ad8e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800ad8a:	2303      	movs	r3, #3
 800ad8c:	e065      	b.n	800ae5a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	32b0      	adds	r2, #176	@ 0xb0
 800ad98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad9c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ad9e:	78fb      	ldrb	r3, [r7, #3]
 800ada0:	f003 020f 	and.w	r2, r3, #15
 800ada4:	6879      	ldr	r1, [r7, #4]
 800ada6:	4613      	mov	r3, r2
 800ada8:	009b      	lsls	r3, r3, #2
 800adaa:	4413      	add	r3, r2
 800adac:	009b      	lsls	r3, r3, #2
 800adae:	440b      	add	r3, r1
 800adb0:	3318      	adds	r3, #24
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d02f      	beq.n	800ae18 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800adb8:	78fb      	ldrb	r3, [r7, #3]
 800adba:	f003 020f 	and.w	r2, r3, #15
 800adbe:	6879      	ldr	r1, [r7, #4]
 800adc0:	4613      	mov	r3, r2
 800adc2:	009b      	lsls	r3, r3, #2
 800adc4:	4413      	add	r3, r2
 800adc6:	009b      	lsls	r3, r3, #2
 800adc8:	440b      	add	r3, r1
 800adca:	3318      	adds	r3, #24
 800adcc:	681a      	ldr	r2, [r3, #0]
 800adce:	78fb      	ldrb	r3, [r7, #3]
 800add0:	f003 010f 	and.w	r1, r3, #15
 800add4:	68f8      	ldr	r0, [r7, #12]
 800add6:	460b      	mov	r3, r1
 800add8:	00db      	lsls	r3, r3, #3
 800adda:	440b      	add	r3, r1
 800addc:	009b      	lsls	r3, r3, #2
 800adde:	4403      	add	r3, r0
 800ade0:	331c      	adds	r3, #28
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	fbb2 f1f3 	udiv	r1, r2, r3
 800ade8:	fb01 f303 	mul.w	r3, r1, r3
 800adec:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d112      	bne.n	800ae18 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800adf2:	78fb      	ldrb	r3, [r7, #3]
 800adf4:	f003 020f 	and.w	r2, r3, #15
 800adf8:	6879      	ldr	r1, [r7, #4]
 800adfa:	4613      	mov	r3, r2
 800adfc:	009b      	lsls	r3, r3, #2
 800adfe:	4413      	add	r3, r2
 800ae00:	009b      	lsls	r3, r3, #2
 800ae02:	440b      	add	r3, r1
 800ae04:	3318      	adds	r3, #24
 800ae06:	2200      	movs	r2, #0
 800ae08:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800ae0a:	78f9      	ldrb	r1, [r7, #3]
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	2200      	movs	r2, #0
 800ae10:	6878      	ldr	r0, [r7, #4]
 800ae12:	f002 f94c 	bl	800d0ae <USBD_LL_Transmit>
 800ae16:	e01f      	b.n	800ae58 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800ae18:	68bb      	ldr	r3, [r7, #8]
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ae26:	687a      	ldr	r2, [r7, #4]
 800ae28:	33b0      	adds	r3, #176	@ 0xb0
 800ae2a:	009b      	lsls	r3, r3, #2
 800ae2c:	4413      	add	r3, r2
 800ae2e:	685b      	ldr	r3, [r3, #4]
 800ae30:	691b      	ldr	r3, [r3, #16]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d010      	beq.n	800ae58 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ae3c:	687a      	ldr	r2, [r7, #4]
 800ae3e:	33b0      	adds	r3, #176	@ 0xb0
 800ae40:	009b      	lsls	r3, r3, #2
 800ae42:	4413      	add	r3, r2
 800ae44:	685b      	ldr	r3, [r3, #4]
 800ae46:	691b      	ldr	r3, [r3, #16]
 800ae48:	68ba      	ldr	r2, [r7, #8]
 800ae4a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800ae4e:	68ba      	ldr	r2, [r7, #8]
 800ae50:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800ae54:	78fa      	ldrb	r2, [r7, #3]
 800ae56:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800ae58:	2300      	movs	r3, #0
}
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	3710      	adds	r7, #16
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	bd80      	pop	{r7, pc}

0800ae62 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ae62:	b580      	push	{r7, lr}
 800ae64:	b084      	sub	sp, #16
 800ae66:	af00      	add	r7, sp, #0
 800ae68:	6078      	str	r0, [r7, #4]
 800ae6a:	460b      	mov	r3, r1
 800ae6c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	32b0      	adds	r2, #176	@ 0xb0
 800ae78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae7c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	32b0      	adds	r2, #176	@ 0xb0
 800ae88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d101      	bne.n	800ae94 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800ae90:	2303      	movs	r3, #3
 800ae92:	e01a      	b.n	800aeca <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ae94:	78fb      	ldrb	r3, [r7, #3]
 800ae96:	4619      	mov	r1, r3
 800ae98:	6878      	ldr	r0, [r7, #4]
 800ae9a:	f002 f94a 	bl	800d132 <USBD_LL_GetRxDataSize>
 800ae9e:	4602      	mov	r2, r0
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800aeac:	687a      	ldr	r2, [r7, #4]
 800aeae:	33b0      	adds	r3, #176	@ 0xb0
 800aeb0:	009b      	lsls	r3, r3, #2
 800aeb2:	4413      	add	r3, r2
 800aeb4:	685b      	ldr	r3, [r3, #4]
 800aeb6:	68db      	ldr	r3, [r3, #12]
 800aeb8:	68fa      	ldr	r2, [r7, #12]
 800aeba:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800aebe:	68fa      	ldr	r2, [r7, #12]
 800aec0:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800aec4:	4611      	mov	r1, r2
 800aec6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800aec8:	2300      	movs	r3, #0
}
 800aeca:	4618      	mov	r0, r3
 800aecc:	3710      	adds	r7, #16
 800aece:	46bd      	mov	sp, r7
 800aed0:	bd80      	pop	{r7, pc}

0800aed2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800aed2:	b580      	push	{r7, lr}
 800aed4:	b084      	sub	sp, #16
 800aed6:	af00      	add	r7, sp, #0
 800aed8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	32b0      	adds	r2, #176	@ 0xb0
 800aee4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aee8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d101      	bne.n	800aef4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800aef0:	2303      	movs	r3, #3
 800aef2:	e024      	b.n	800af3e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800aefa:	687a      	ldr	r2, [r7, #4]
 800aefc:	33b0      	adds	r3, #176	@ 0xb0
 800aefe:	009b      	lsls	r3, r3, #2
 800af00:	4413      	add	r3, r2
 800af02:	685b      	ldr	r3, [r3, #4]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d019      	beq.n	800af3c <USBD_CDC_EP0_RxReady+0x6a>
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800af0e:	2bff      	cmp	r3, #255	@ 0xff
 800af10:	d014      	beq.n	800af3c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800af18:	687a      	ldr	r2, [r7, #4]
 800af1a:	33b0      	adds	r3, #176	@ 0xb0
 800af1c:	009b      	lsls	r3, r3, #2
 800af1e:	4413      	add	r3, r2
 800af20:	685b      	ldr	r3, [r3, #4]
 800af22:	689b      	ldr	r3, [r3, #8]
 800af24:	68fa      	ldr	r2, [r7, #12]
 800af26:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800af2a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800af2c:	68fa      	ldr	r2, [r7, #12]
 800af2e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800af32:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	22ff      	movs	r2, #255	@ 0xff
 800af38:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800af3c:	2300      	movs	r3, #0
}
 800af3e:	4618      	mov	r0, r3
 800af40:	3710      	adds	r7, #16
 800af42:	46bd      	mov	sp, r7
 800af44:	bd80      	pop	{r7, pc}
	...

0800af48 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	b086      	sub	sp, #24
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800af50:	2182      	movs	r1, #130	@ 0x82
 800af52:	4818      	ldr	r0, [pc, #96]	@ (800afb4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800af54:	f000 fd0f 	bl	800b976 <USBD_GetEpDesc>
 800af58:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800af5a:	2101      	movs	r1, #1
 800af5c:	4815      	ldr	r0, [pc, #84]	@ (800afb4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800af5e:	f000 fd0a 	bl	800b976 <USBD_GetEpDesc>
 800af62:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800af64:	2181      	movs	r1, #129	@ 0x81
 800af66:	4813      	ldr	r0, [pc, #76]	@ (800afb4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800af68:	f000 fd05 	bl	800b976 <USBD_GetEpDesc>
 800af6c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800af6e:	697b      	ldr	r3, [r7, #20]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d002      	beq.n	800af7a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800af74:	697b      	ldr	r3, [r7, #20]
 800af76:	2210      	movs	r2, #16
 800af78:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800af7a:	693b      	ldr	r3, [r7, #16]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d006      	beq.n	800af8e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800af80:	693b      	ldr	r3, [r7, #16]
 800af82:	2200      	movs	r2, #0
 800af84:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800af88:	711a      	strb	r2, [r3, #4]
 800af8a:	2200      	movs	r2, #0
 800af8c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d006      	beq.n	800afa2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	2200      	movs	r2, #0
 800af98:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800af9c:	711a      	strb	r2, [r3, #4]
 800af9e:	2200      	movs	r2, #0
 800afa0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	2243      	movs	r2, #67	@ 0x43
 800afa6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800afa8:	4b02      	ldr	r3, [pc, #8]	@ (800afb4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800afaa:	4618      	mov	r0, r3
 800afac:	3718      	adds	r7, #24
 800afae:	46bd      	mov	sp, r7
 800afb0:	bd80      	pop	{r7, pc}
 800afb2:	bf00      	nop
 800afb4:	20000054 	.word	0x20000054

0800afb8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800afb8:	b580      	push	{r7, lr}
 800afba:	b086      	sub	sp, #24
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800afc0:	2182      	movs	r1, #130	@ 0x82
 800afc2:	4818      	ldr	r0, [pc, #96]	@ (800b024 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800afc4:	f000 fcd7 	bl	800b976 <USBD_GetEpDesc>
 800afc8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800afca:	2101      	movs	r1, #1
 800afcc:	4815      	ldr	r0, [pc, #84]	@ (800b024 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800afce:	f000 fcd2 	bl	800b976 <USBD_GetEpDesc>
 800afd2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800afd4:	2181      	movs	r1, #129	@ 0x81
 800afd6:	4813      	ldr	r0, [pc, #76]	@ (800b024 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800afd8:	f000 fccd 	bl	800b976 <USBD_GetEpDesc>
 800afdc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800afde:	697b      	ldr	r3, [r7, #20]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d002      	beq.n	800afea <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800afe4:	697b      	ldr	r3, [r7, #20]
 800afe6:	2210      	movs	r2, #16
 800afe8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800afea:	693b      	ldr	r3, [r7, #16]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d006      	beq.n	800affe <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800aff0:	693b      	ldr	r3, [r7, #16]
 800aff2:	2200      	movs	r2, #0
 800aff4:	711a      	strb	r2, [r3, #4]
 800aff6:	2200      	movs	r2, #0
 800aff8:	f042 0202 	orr.w	r2, r2, #2
 800affc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d006      	beq.n	800b012 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	2200      	movs	r2, #0
 800b008:	711a      	strb	r2, [r3, #4]
 800b00a:	2200      	movs	r2, #0
 800b00c:	f042 0202 	orr.w	r2, r2, #2
 800b010:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	2243      	movs	r2, #67	@ 0x43
 800b016:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b018:	4b02      	ldr	r3, [pc, #8]	@ (800b024 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b01a:	4618      	mov	r0, r3
 800b01c:	3718      	adds	r7, #24
 800b01e:	46bd      	mov	sp, r7
 800b020:	bd80      	pop	{r7, pc}
 800b022:	bf00      	nop
 800b024:	20000054 	.word	0x20000054

0800b028 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	b086      	sub	sp, #24
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b030:	2182      	movs	r1, #130	@ 0x82
 800b032:	4818      	ldr	r0, [pc, #96]	@ (800b094 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b034:	f000 fc9f 	bl	800b976 <USBD_GetEpDesc>
 800b038:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b03a:	2101      	movs	r1, #1
 800b03c:	4815      	ldr	r0, [pc, #84]	@ (800b094 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b03e:	f000 fc9a 	bl	800b976 <USBD_GetEpDesc>
 800b042:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b044:	2181      	movs	r1, #129	@ 0x81
 800b046:	4813      	ldr	r0, [pc, #76]	@ (800b094 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b048:	f000 fc95 	bl	800b976 <USBD_GetEpDesc>
 800b04c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b04e:	697b      	ldr	r3, [r7, #20]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d002      	beq.n	800b05a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b054:	697b      	ldr	r3, [r7, #20]
 800b056:	2210      	movs	r2, #16
 800b058:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b05a:	693b      	ldr	r3, [r7, #16]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d006      	beq.n	800b06e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b060:	693b      	ldr	r3, [r7, #16]
 800b062:	2200      	movs	r2, #0
 800b064:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b068:	711a      	strb	r2, [r3, #4]
 800b06a:	2200      	movs	r2, #0
 800b06c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d006      	beq.n	800b082 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	2200      	movs	r2, #0
 800b078:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b07c:	711a      	strb	r2, [r3, #4]
 800b07e:	2200      	movs	r2, #0
 800b080:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	2243      	movs	r2, #67	@ 0x43
 800b086:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b088:	4b02      	ldr	r3, [pc, #8]	@ (800b094 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b08a:	4618      	mov	r0, r3
 800b08c:	3718      	adds	r7, #24
 800b08e:	46bd      	mov	sp, r7
 800b090:	bd80      	pop	{r7, pc}
 800b092:	bf00      	nop
 800b094:	20000054 	.word	0x20000054

0800b098 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b098:	b480      	push	{r7}
 800b09a:	b083      	sub	sp, #12
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	220a      	movs	r2, #10
 800b0a4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b0a6:	4b03      	ldr	r3, [pc, #12]	@ (800b0b4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	370c      	adds	r7, #12
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b2:	4770      	bx	lr
 800b0b4:	20000010 	.word	0x20000010

0800b0b8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b0b8:	b480      	push	{r7}
 800b0ba:	b083      	sub	sp, #12
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
 800b0c0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b0c2:	683b      	ldr	r3, [r7, #0]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d101      	bne.n	800b0cc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b0c8:	2303      	movs	r3, #3
 800b0ca:	e009      	b.n	800b0e0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b0d2:	687a      	ldr	r2, [r7, #4]
 800b0d4:	33b0      	adds	r3, #176	@ 0xb0
 800b0d6:	009b      	lsls	r3, r3, #2
 800b0d8:	4413      	add	r3, r2
 800b0da:	683a      	ldr	r2, [r7, #0]
 800b0dc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b0de:	2300      	movs	r3, #0
}
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	370c      	adds	r7, #12
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ea:	4770      	bx	lr

0800b0ec <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b0ec:	b480      	push	{r7}
 800b0ee:	b087      	sub	sp, #28
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	60f8      	str	r0, [r7, #12]
 800b0f4:	60b9      	str	r1, [r7, #8]
 800b0f6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	32b0      	adds	r2, #176	@ 0xb0
 800b102:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b106:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b108:	697b      	ldr	r3, [r7, #20]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d101      	bne.n	800b112 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b10e:	2303      	movs	r3, #3
 800b110:	e008      	b.n	800b124 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b112:	697b      	ldr	r3, [r7, #20]
 800b114:	68ba      	ldr	r2, [r7, #8]
 800b116:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800b11a:	697b      	ldr	r3, [r7, #20]
 800b11c:	687a      	ldr	r2, [r7, #4]
 800b11e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800b122:	2300      	movs	r3, #0
}
 800b124:	4618      	mov	r0, r3
 800b126:	371c      	adds	r7, #28
 800b128:	46bd      	mov	sp, r7
 800b12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b12e:	4770      	bx	lr

0800b130 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b130:	b480      	push	{r7}
 800b132:	b085      	sub	sp, #20
 800b134:	af00      	add	r7, sp, #0
 800b136:	6078      	str	r0, [r7, #4]
 800b138:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	32b0      	adds	r2, #176	@ 0xb0
 800b144:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b148:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d101      	bne.n	800b154 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b150:	2303      	movs	r3, #3
 800b152:	e004      	b.n	800b15e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	683a      	ldr	r2, [r7, #0]
 800b158:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800b15c:	2300      	movs	r3, #0
}
 800b15e:	4618      	mov	r0, r3
 800b160:	3714      	adds	r7, #20
 800b162:	46bd      	mov	sp, r7
 800b164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b168:	4770      	bx	lr
	...

0800b16c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b084      	sub	sp, #16
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	32b0      	adds	r2, #176	@ 0xb0
 800b17e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b182:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	32b0      	adds	r2, #176	@ 0xb0
 800b18e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d101      	bne.n	800b19a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b196:	2303      	movs	r3, #3
 800b198:	e018      	b.n	800b1cc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	7c1b      	ldrb	r3, [r3, #16]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d10a      	bne.n	800b1b8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b1a2:	4b0c      	ldr	r3, [pc, #48]	@ (800b1d4 <USBD_CDC_ReceivePacket+0x68>)
 800b1a4:	7819      	ldrb	r1, [r3, #0]
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b1ac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b1b0:	6878      	ldr	r0, [r7, #4]
 800b1b2:	f001 ff9d 	bl	800d0f0 <USBD_LL_PrepareReceive>
 800b1b6:	e008      	b.n	800b1ca <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b1b8:	4b06      	ldr	r3, [pc, #24]	@ (800b1d4 <USBD_CDC_ReceivePacket+0x68>)
 800b1ba:	7819      	ldrb	r1, [r3, #0]
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b1c2:	2340      	movs	r3, #64	@ 0x40
 800b1c4:	6878      	ldr	r0, [r7, #4]
 800b1c6:	f001 ff93 	bl	800d0f0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b1ca:	2300      	movs	r3, #0
}
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	3710      	adds	r7, #16
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	bd80      	pop	{r7, pc}
 800b1d4:	20000098 	.word	0x20000098

0800b1d8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b086      	sub	sp, #24
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	60f8      	str	r0, [r7, #12]
 800b1e0:	60b9      	str	r1, [r7, #8]
 800b1e2:	4613      	mov	r3, r2
 800b1e4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d101      	bne.n	800b1f0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b1ec:	2303      	movs	r3, #3
 800b1ee:	e01f      	b.n	800b230 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	2200      	movs	r2, #0
 800b1f4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	2200      	movs	r2, #0
 800b204:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b208:	68bb      	ldr	r3, [r7, #8]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d003      	beq.n	800b216 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	68ba      	ldr	r2, [r7, #8]
 800b212:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	2201      	movs	r2, #1
 800b21a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	79fa      	ldrb	r2, [r7, #7]
 800b222:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b224:	68f8      	ldr	r0, [r7, #12]
 800b226:	f001 fe0d 	bl	800ce44 <USBD_LL_Init>
 800b22a:	4603      	mov	r3, r0
 800b22c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b22e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b230:	4618      	mov	r0, r3
 800b232:	3718      	adds	r7, #24
 800b234:	46bd      	mov	sp, r7
 800b236:	bd80      	pop	{r7, pc}

0800b238 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b238:	b580      	push	{r7, lr}
 800b23a:	b084      	sub	sp, #16
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
 800b240:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b242:	2300      	movs	r3, #0
 800b244:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b246:	683b      	ldr	r3, [r7, #0]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d101      	bne.n	800b250 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b24c:	2303      	movs	r3, #3
 800b24e:	e025      	b.n	800b29c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	683a      	ldr	r2, [r7, #0]
 800b254:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	32ae      	adds	r2, #174	@ 0xae
 800b262:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d00f      	beq.n	800b28c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	32ae      	adds	r2, #174	@ 0xae
 800b276:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b27a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b27c:	f107 020e 	add.w	r2, r7, #14
 800b280:	4610      	mov	r0, r2
 800b282:	4798      	blx	r3
 800b284:	4602      	mov	r2, r0
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b292:	1c5a      	adds	r2, r3, #1
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800b29a:	2300      	movs	r3, #0
}
 800b29c:	4618      	mov	r0, r3
 800b29e:	3710      	adds	r7, #16
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	bd80      	pop	{r7, pc}

0800b2a4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b2a4:	b580      	push	{r7, lr}
 800b2a6:	b082      	sub	sp, #8
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b2ac:	6878      	ldr	r0, [r7, #4]
 800b2ae:	f001 fe15 	bl	800cedc <USBD_LL_Start>
 800b2b2:	4603      	mov	r3, r0
}
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	3708      	adds	r7, #8
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	bd80      	pop	{r7, pc}

0800b2bc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b2bc:	b480      	push	{r7}
 800b2be:	b083      	sub	sp, #12
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b2c4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	370c      	adds	r7, #12
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d0:	4770      	bx	lr

0800b2d2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b2d2:	b580      	push	{r7, lr}
 800b2d4:	b084      	sub	sp, #16
 800b2d6:	af00      	add	r7, sp, #0
 800b2d8:	6078      	str	r0, [r7, #4]
 800b2da:	460b      	mov	r3, r1
 800b2dc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b2de:	2300      	movs	r3, #0
 800b2e0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d009      	beq.n	800b300 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	78fa      	ldrb	r2, [r7, #3]
 800b2f6:	4611      	mov	r1, r2
 800b2f8:	6878      	ldr	r0, [r7, #4]
 800b2fa:	4798      	blx	r3
 800b2fc:	4603      	mov	r3, r0
 800b2fe:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b300:	7bfb      	ldrb	r3, [r7, #15]
}
 800b302:	4618      	mov	r0, r3
 800b304:	3710      	adds	r7, #16
 800b306:	46bd      	mov	sp, r7
 800b308:	bd80      	pop	{r7, pc}

0800b30a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b30a:	b580      	push	{r7, lr}
 800b30c:	b084      	sub	sp, #16
 800b30e:	af00      	add	r7, sp, #0
 800b310:	6078      	str	r0, [r7, #4]
 800b312:	460b      	mov	r3, r1
 800b314:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b316:	2300      	movs	r3, #0
 800b318:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b320:	685b      	ldr	r3, [r3, #4]
 800b322:	78fa      	ldrb	r2, [r7, #3]
 800b324:	4611      	mov	r1, r2
 800b326:	6878      	ldr	r0, [r7, #4]
 800b328:	4798      	blx	r3
 800b32a:	4603      	mov	r3, r0
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d001      	beq.n	800b334 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b330:	2303      	movs	r3, #3
 800b332:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b334:	7bfb      	ldrb	r3, [r7, #15]
}
 800b336:	4618      	mov	r0, r3
 800b338:	3710      	adds	r7, #16
 800b33a:	46bd      	mov	sp, r7
 800b33c:	bd80      	pop	{r7, pc}

0800b33e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b33e:	b580      	push	{r7, lr}
 800b340:	b084      	sub	sp, #16
 800b342:	af00      	add	r7, sp, #0
 800b344:	6078      	str	r0, [r7, #4]
 800b346:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b34e:	6839      	ldr	r1, [r7, #0]
 800b350:	4618      	mov	r0, r3
 800b352:	f001 f90c 	bl	800c56e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	2201      	movs	r2, #1
 800b35a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800b364:	461a      	mov	r2, r3
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b372:	f003 031f 	and.w	r3, r3, #31
 800b376:	2b02      	cmp	r3, #2
 800b378:	d01a      	beq.n	800b3b0 <USBD_LL_SetupStage+0x72>
 800b37a:	2b02      	cmp	r3, #2
 800b37c:	d822      	bhi.n	800b3c4 <USBD_LL_SetupStage+0x86>
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d002      	beq.n	800b388 <USBD_LL_SetupStage+0x4a>
 800b382:	2b01      	cmp	r3, #1
 800b384:	d00a      	beq.n	800b39c <USBD_LL_SetupStage+0x5e>
 800b386:	e01d      	b.n	800b3c4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b38e:	4619      	mov	r1, r3
 800b390:	6878      	ldr	r0, [r7, #4]
 800b392:	f000 fb63 	bl	800ba5c <USBD_StdDevReq>
 800b396:	4603      	mov	r3, r0
 800b398:	73fb      	strb	r3, [r7, #15]
      break;
 800b39a:	e020      	b.n	800b3de <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b3a2:	4619      	mov	r1, r3
 800b3a4:	6878      	ldr	r0, [r7, #4]
 800b3a6:	f000 fbcb 	bl	800bb40 <USBD_StdItfReq>
 800b3aa:	4603      	mov	r3, r0
 800b3ac:	73fb      	strb	r3, [r7, #15]
      break;
 800b3ae:	e016      	b.n	800b3de <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b3b6:	4619      	mov	r1, r3
 800b3b8:	6878      	ldr	r0, [r7, #4]
 800b3ba:	f000 fc2d 	bl	800bc18 <USBD_StdEPReq>
 800b3be:	4603      	mov	r3, r0
 800b3c0:	73fb      	strb	r3, [r7, #15]
      break;
 800b3c2:	e00c      	b.n	800b3de <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b3ca:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b3ce:	b2db      	uxtb	r3, r3
 800b3d0:	4619      	mov	r1, r3
 800b3d2:	6878      	ldr	r0, [r7, #4]
 800b3d4:	f001 fde2 	bl	800cf9c <USBD_LL_StallEP>
 800b3d8:	4603      	mov	r3, r0
 800b3da:	73fb      	strb	r3, [r7, #15]
      break;
 800b3dc:	bf00      	nop
  }

  return ret;
 800b3de:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	3710      	adds	r7, #16
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	bd80      	pop	{r7, pc}

0800b3e8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b086      	sub	sp, #24
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	60f8      	str	r0, [r7, #12]
 800b3f0:	460b      	mov	r3, r1
 800b3f2:	607a      	str	r2, [r7, #4]
 800b3f4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b3fa:	7afb      	ldrb	r3, [r7, #11]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d16e      	bne.n	800b4de <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800b406:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b40e:	2b03      	cmp	r3, #3
 800b410:	f040 8098 	bne.w	800b544 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b414:	693b      	ldr	r3, [r7, #16]
 800b416:	689a      	ldr	r2, [r3, #8]
 800b418:	693b      	ldr	r3, [r7, #16]
 800b41a:	68db      	ldr	r3, [r3, #12]
 800b41c:	429a      	cmp	r2, r3
 800b41e:	d913      	bls.n	800b448 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b420:	693b      	ldr	r3, [r7, #16]
 800b422:	689a      	ldr	r2, [r3, #8]
 800b424:	693b      	ldr	r3, [r7, #16]
 800b426:	68db      	ldr	r3, [r3, #12]
 800b428:	1ad2      	subs	r2, r2, r3
 800b42a:	693b      	ldr	r3, [r7, #16]
 800b42c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b42e:	693b      	ldr	r3, [r7, #16]
 800b430:	68da      	ldr	r2, [r3, #12]
 800b432:	693b      	ldr	r3, [r7, #16]
 800b434:	689b      	ldr	r3, [r3, #8]
 800b436:	4293      	cmp	r3, r2
 800b438:	bf28      	it	cs
 800b43a:	4613      	movcs	r3, r2
 800b43c:	461a      	mov	r2, r3
 800b43e:	6879      	ldr	r1, [r7, #4]
 800b440:	68f8      	ldr	r0, [r7, #12]
 800b442:	f001 f994 	bl	800c76e <USBD_CtlContinueRx>
 800b446:	e07d      	b.n	800b544 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b44e:	f003 031f 	and.w	r3, r3, #31
 800b452:	2b02      	cmp	r3, #2
 800b454:	d014      	beq.n	800b480 <USBD_LL_DataOutStage+0x98>
 800b456:	2b02      	cmp	r3, #2
 800b458:	d81d      	bhi.n	800b496 <USBD_LL_DataOutStage+0xae>
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d002      	beq.n	800b464 <USBD_LL_DataOutStage+0x7c>
 800b45e:	2b01      	cmp	r3, #1
 800b460:	d003      	beq.n	800b46a <USBD_LL_DataOutStage+0x82>
 800b462:	e018      	b.n	800b496 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b464:	2300      	movs	r3, #0
 800b466:	75bb      	strb	r3, [r7, #22]
            break;
 800b468:	e018      	b.n	800b49c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b470:	b2db      	uxtb	r3, r3
 800b472:	4619      	mov	r1, r3
 800b474:	68f8      	ldr	r0, [r7, #12]
 800b476:	f000 fa64 	bl	800b942 <USBD_CoreFindIF>
 800b47a:	4603      	mov	r3, r0
 800b47c:	75bb      	strb	r3, [r7, #22]
            break;
 800b47e:	e00d      	b.n	800b49c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b486:	b2db      	uxtb	r3, r3
 800b488:	4619      	mov	r1, r3
 800b48a:	68f8      	ldr	r0, [r7, #12]
 800b48c:	f000 fa66 	bl	800b95c <USBD_CoreFindEP>
 800b490:	4603      	mov	r3, r0
 800b492:	75bb      	strb	r3, [r7, #22]
            break;
 800b494:	e002      	b.n	800b49c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b496:	2300      	movs	r3, #0
 800b498:	75bb      	strb	r3, [r7, #22]
            break;
 800b49a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b49c:	7dbb      	ldrb	r3, [r7, #22]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d119      	bne.n	800b4d6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b4a8:	b2db      	uxtb	r3, r3
 800b4aa:	2b03      	cmp	r3, #3
 800b4ac:	d113      	bne.n	800b4d6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b4ae:	7dba      	ldrb	r2, [r7, #22]
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	32ae      	adds	r2, #174	@ 0xae
 800b4b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4b8:	691b      	ldr	r3, [r3, #16]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d00b      	beq.n	800b4d6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b4be:	7dba      	ldrb	r2, [r7, #22]
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b4c6:	7dba      	ldrb	r2, [r7, #22]
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	32ae      	adds	r2, #174	@ 0xae
 800b4cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4d0:	691b      	ldr	r3, [r3, #16]
 800b4d2:	68f8      	ldr	r0, [r7, #12]
 800b4d4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b4d6:	68f8      	ldr	r0, [r7, #12]
 800b4d8:	f001 f95a 	bl	800c790 <USBD_CtlSendStatus>
 800b4dc:	e032      	b.n	800b544 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b4de:	7afb      	ldrb	r3, [r7, #11]
 800b4e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b4e4:	b2db      	uxtb	r3, r3
 800b4e6:	4619      	mov	r1, r3
 800b4e8:	68f8      	ldr	r0, [r7, #12]
 800b4ea:	f000 fa37 	bl	800b95c <USBD_CoreFindEP>
 800b4ee:	4603      	mov	r3, r0
 800b4f0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b4f2:	7dbb      	ldrb	r3, [r7, #22]
 800b4f4:	2bff      	cmp	r3, #255	@ 0xff
 800b4f6:	d025      	beq.n	800b544 <USBD_LL_DataOutStage+0x15c>
 800b4f8:	7dbb      	ldrb	r3, [r7, #22]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d122      	bne.n	800b544 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b504:	b2db      	uxtb	r3, r3
 800b506:	2b03      	cmp	r3, #3
 800b508:	d117      	bne.n	800b53a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b50a:	7dba      	ldrb	r2, [r7, #22]
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	32ae      	adds	r2, #174	@ 0xae
 800b510:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b514:	699b      	ldr	r3, [r3, #24]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d00f      	beq.n	800b53a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b51a:	7dba      	ldrb	r2, [r7, #22]
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b522:	7dba      	ldrb	r2, [r7, #22]
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	32ae      	adds	r2, #174	@ 0xae
 800b528:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b52c:	699b      	ldr	r3, [r3, #24]
 800b52e:	7afa      	ldrb	r2, [r7, #11]
 800b530:	4611      	mov	r1, r2
 800b532:	68f8      	ldr	r0, [r7, #12]
 800b534:	4798      	blx	r3
 800b536:	4603      	mov	r3, r0
 800b538:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b53a:	7dfb      	ldrb	r3, [r7, #23]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d001      	beq.n	800b544 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b540:	7dfb      	ldrb	r3, [r7, #23]
 800b542:	e000      	b.n	800b546 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b544:	2300      	movs	r3, #0
}
 800b546:	4618      	mov	r0, r3
 800b548:	3718      	adds	r7, #24
 800b54a:	46bd      	mov	sp, r7
 800b54c:	bd80      	pop	{r7, pc}

0800b54e <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b54e:	b580      	push	{r7, lr}
 800b550:	b086      	sub	sp, #24
 800b552:	af00      	add	r7, sp, #0
 800b554:	60f8      	str	r0, [r7, #12]
 800b556:	460b      	mov	r3, r1
 800b558:	607a      	str	r2, [r7, #4]
 800b55a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b55c:	7afb      	ldrb	r3, [r7, #11]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d16f      	bne.n	800b642 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	3314      	adds	r3, #20
 800b566:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b56e:	2b02      	cmp	r3, #2
 800b570:	d15a      	bne.n	800b628 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b572:	693b      	ldr	r3, [r7, #16]
 800b574:	689a      	ldr	r2, [r3, #8]
 800b576:	693b      	ldr	r3, [r7, #16]
 800b578:	68db      	ldr	r3, [r3, #12]
 800b57a:	429a      	cmp	r2, r3
 800b57c:	d914      	bls.n	800b5a8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b57e:	693b      	ldr	r3, [r7, #16]
 800b580:	689a      	ldr	r2, [r3, #8]
 800b582:	693b      	ldr	r3, [r7, #16]
 800b584:	68db      	ldr	r3, [r3, #12]
 800b586:	1ad2      	subs	r2, r2, r3
 800b588:	693b      	ldr	r3, [r7, #16]
 800b58a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b58c:	693b      	ldr	r3, [r7, #16]
 800b58e:	689b      	ldr	r3, [r3, #8]
 800b590:	461a      	mov	r2, r3
 800b592:	6879      	ldr	r1, [r7, #4]
 800b594:	68f8      	ldr	r0, [r7, #12]
 800b596:	f001 f8bc 	bl	800c712 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b59a:	2300      	movs	r3, #0
 800b59c:	2200      	movs	r2, #0
 800b59e:	2100      	movs	r1, #0
 800b5a0:	68f8      	ldr	r0, [r7, #12]
 800b5a2:	f001 fda5 	bl	800d0f0 <USBD_LL_PrepareReceive>
 800b5a6:	e03f      	b.n	800b628 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b5a8:	693b      	ldr	r3, [r7, #16]
 800b5aa:	68da      	ldr	r2, [r3, #12]
 800b5ac:	693b      	ldr	r3, [r7, #16]
 800b5ae:	689b      	ldr	r3, [r3, #8]
 800b5b0:	429a      	cmp	r2, r3
 800b5b2:	d11c      	bne.n	800b5ee <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b5b4:	693b      	ldr	r3, [r7, #16]
 800b5b6:	685a      	ldr	r2, [r3, #4]
 800b5b8:	693b      	ldr	r3, [r7, #16]
 800b5ba:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b5bc:	429a      	cmp	r2, r3
 800b5be:	d316      	bcc.n	800b5ee <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b5c0:	693b      	ldr	r3, [r7, #16]
 800b5c2:	685a      	ldr	r2, [r3, #4]
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b5ca:	429a      	cmp	r2, r3
 800b5cc:	d20f      	bcs.n	800b5ee <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b5ce:	2200      	movs	r2, #0
 800b5d0:	2100      	movs	r1, #0
 800b5d2:	68f8      	ldr	r0, [r7, #12]
 800b5d4:	f001 f89d 	bl	800c712 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	2200      	movs	r2, #0
 800b5dc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	2100      	movs	r1, #0
 800b5e6:	68f8      	ldr	r0, [r7, #12]
 800b5e8:	f001 fd82 	bl	800d0f0 <USBD_LL_PrepareReceive>
 800b5ec:	e01c      	b.n	800b628 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b5f4:	b2db      	uxtb	r3, r3
 800b5f6:	2b03      	cmp	r3, #3
 800b5f8:	d10f      	bne.n	800b61a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b600:	68db      	ldr	r3, [r3, #12]
 800b602:	2b00      	cmp	r3, #0
 800b604:	d009      	beq.n	800b61a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	2200      	movs	r2, #0
 800b60a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b614:	68db      	ldr	r3, [r3, #12]
 800b616:	68f8      	ldr	r0, [r7, #12]
 800b618:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b61a:	2180      	movs	r1, #128	@ 0x80
 800b61c:	68f8      	ldr	r0, [r7, #12]
 800b61e:	f001 fcbd 	bl	800cf9c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b622:	68f8      	ldr	r0, [r7, #12]
 800b624:	f001 f8c7 	bl	800c7b6 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d03a      	beq.n	800b6a8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b632:	68f8      	ldr	r0, [r7, #12]
 800b634:	f7ff fe42 	bl	800b2bc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	2200      	movs	r2, #0
 800b63c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800b640:	e032      	b.n	800b6a8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b642:	7afb      	ldrb	r3, [r7, #11]
 800b644:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b648:	b2db      	uxtb	r3, r3
 800b64a:	4619      	mov	r1, r3
 800b64c:	68f8      	ldr	r0, [r7, #12]
 800b64e:	f000 f985 	bl	800b95c <USBD_CoreFindEP>
 800b652:	4603      	mov	r3, r0
 800b654:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b656:	7dfb      	ldrb	r3, [r7, #23]
 800b658:	2bff      	cmp	r3, #255	@ 0xff
 800b65a:	d025      	beq.n	800b6a8 <USBD_LL_DataInStage+0x15a>
 800b65c:	7dfb      	ldrb	r3, [r7, #23]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d122      	bne.n	800b6a8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b668:	b2db      	uxtb	r3, r3
 800b66a:	2b03      	cmp	r3, #3
 800b66c:	d11c      	bne.n	800b6a8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b66e:	7dfa      	ldrb	r2, [r7, #23]
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	32ae      	adds	r2, #174	@ 0xae
 800b674:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b678:	695b      	ldr	r3, [r3, #20]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d014      	beq.n	800b6a8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b67e:	7dfa      	ldrb	r2, [r7, #23]
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b686:	7dfa      	ldrb	r2, [r7, #23]
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	32ae      	adds	r2, #174	@ 0xae
 800b68c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b690:	695b      	ldr	r3, [r3, #20]
 800b692:	7afa      	ldrb	r2, [r7, #11]
 800b694:	4611      	mov	r1, r2
 800b696:	68f8      	ldr	r0, [r7, #12]
 800b698:	4798      	blx	r3
 800b69a:	4603      	mov	r3, r0
 800b69c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b69e:	7dbb      	ldrb	r3, [r7, #22]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d001      	beq.n	800b6a8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b6a4:	7dbb      	ldrb	r3, [r7, #22]
 800b6a6:	e000      	b.n	800b6aa <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b6a8:	2300      	movs	r3, #0
}
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	3718      	adds	r7, #24
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	bd80      	pop	{r7, pc}

0800b6b2 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b6b2:	b580      	push	{r7, lr}
 800b6b4:	b084      	sub	sp, #16
 800b6b6:	af00      	add	r7, sp, #0
 800b6b8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	2201      	movs	r2, #1
 800b6c2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	2200      	movs	r2, #0
 800b6d2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	2200      	movs	r2, #0
 800b6e0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d014      	beq.n	800b718 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b6f4:	685b      	ldr	r3, [r3, #4]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d00e      	beq.n	800b718 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b700:	685b      	ldr	r3, [r3, #4]
 800b702:	687a      	ldr	r2, [r7, #4]
 800b704:	6852      	ldr	r2, [r2, #4]
 800b706:	b2d2      	uxtb	r2, r2
 800b708:	4611      	mov	r1, r2
 800b70a:	6878      	ldr	r0, [r7, #4]
 800b70c:	4798      	blx	r3
 800b70e:	4603      	mov	r3, r0
 800b710:	2b00      	cmp	r3, #0
 800b712:	d001      	beq.n	800b718 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b714:	2303      	movs	r3, #3
 800b716:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b718:	2340      	movs	r3, #64	@ 0x40
 800b71a:	2200      	movs	r2, #0
 800b71c:	2100      	movs	r1, #0
 800b71e:	6878      	ldr	r0, [r7, #4]
 800b720:	f001 fbf7 	bl	800cf12 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	2201      	movs	r2, #1
 800b728:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	2240      	movs	r2, #64	@ 0x40
 800b730:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b734:	2340      	movs	r3, #64	@ 0x40
 800b736:	2200      	movs	r2, #0
 800b738:	2180      	movs	r1, #128	@ 0x80
 800b73a:	6878      	ldr	r0, [r7, #4]
 800b73c:	f001 fbe9 	bl	800cf12 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	2201      	movs	r2, #1
 800b744:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	2240      	movs	r2, #64	@ 0x40
 800b74a:	621a      	str	r2, [r3, #32]

  return ret;
 800b74c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b74e:	4618      	mov	r0, r3
 800b750:	3710      	adds	r7, #16
 800b752:	46bd      	mov	sp, r7
 800b754:	bd80      	pop	{r7, pc}

0800b756 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b756:	b480      	push	{r7}
 800b758:	b083      	sub	sp, #12
 800b75a:	af00      	add	r7, sp, #0
 800b75c:	6078      	str	r0, [r7, #4]
 800b75e:	460b      	mov	r3, r1
 800b760:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	78fa      	ldrb	r2, [r7, #3]
 800b766:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b768:	2300      	movs	r3, #0
}
 800b76a:	4618      	mov	r0, r3
 800b76c:	370c      	adds	r7, #12
 800b76e:	46bd      	mov	sp, r7
 800b770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b774:	4770      	bx	lr

0800b776 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b776:	b480      	push	{r7}
 800b778:	b083      	sub	sp, #12
 800b77a:	af00      	add	r7, sp, #0
 800b77c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b784:	b2db      	uxtb	r3, r3
 800b786:	2b04      	cmp	r3, #4
 800b788:	d006      	beq.n	800b798 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b790:	b2da      	uxtb	r2, r3
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	2204      	movs	r2, #4
 800b79c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800b7a0:	2300      	movs	r3, #0
}
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	370c      	adds	r7, #12
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ac:	4770      	bx	lr

0800b7ae <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b7ae:	b480      	push	{r7}
 800b7b0:	b083      	sub	sp, #12
 800b7b2:	af00      	add	r7, sp, #0
 800b7b4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b7bc:	b2db      	uxtb	r3, r3
 800b7be:	2b04      	cmp	r3, #4
 800b7c0:	d106      	bne.n	800b7d0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800b7c8:	b2da      	uxtb	r2, r3
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800b7d0:	2300      	movs	r3, #0
}
 800b7d2:	4618      	mov	r0, r3
 800b7d4:	370c      	adds	r7, #12
 800b7d6:	46bd      	mov	sp, r7
 800b7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7dc:	4770      	bx	lr

0800b7de <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b7de:	b580      	push	{r7, lr}
 800b7e0:	b082      	sub	sp, #8
 800b7e2:	af00      	add	r7, sp, #0
 800b7e4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b7ec:	b2db      	uxtb	r3, r3
 800b7ee:	2b03      	cmp	r3, #3
 800b7f0:	d110      	bne.n	800b814 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d00b      	beq.n	800b814 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b802:	69db      	ldr	r3, [r3, #28]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d005      	beq.n	800b814 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b80e:	69db      	ldr	r3, [r3, #28]
 800b810:	6878      	ldr	r0, [r7, #4]
 800b812:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b814:	2300      	movs	r3, #0
}
 800b816:	4618      	mov	r0, r3
 800b818:	3708      	adds	r7, #8
 800b81a:	46bd      	mov	sp, r7
 800b81c:	bd80      	pop	{r7, pc}

0800b81e <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b81e:	b580      	push	{r7, lr}
 800b820:	b082      	sub	sp, #8
 800b822:	af00      	add	r7, sp, #0
 800b824:	6078      	str	r0, [r7, #4]
 800b826:	460b      	mov	r3, r1
 800b828:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	32ae      	adds	r2, #174	@ 0xae
 800b834:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d101      	bne.n	800b840 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800b83c:	2303      	movs	r3, #3
 800b83e:	e01c      	b.n	800b87a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b846:	b2db      	uxtb	r3, r3
 800b848:	2b03      	cmp	r3, #3
 800b84a:	d115      	bne.n	800b878 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	32ae      	adds	r2, #174	@ 0xae
 800b856:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b85a:	6a1b      	ldr	r3, [r3, #32]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d00b      	beq.n	800b878 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	32ae      	adds	r2, #174	@ 0xae
 800b86a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b86e:	6a1b      	ldr	r3, [r3, #32]
 800b870:	78fa      	ldrb	r2, [r7, #3]
 800b872:	4611      	mov	r1, r2
 800b874:	6878      	ldr	r0, [r7, #4]
 800b876:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b878:	2300      	movs	r3, #0
}
 800b87a:	4618      	mov	r0, r3
 800b87c:	3708      	adds	r7, #8
 800b87e:	46bd      	mov	sp, r7
 800b880:	bd80      	pop	{r7, pc}

0800b882 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b882:	b580      	push	{r7, lr}
 800b884:	b082      	sub	sp, #8
 800b886:	af00      	add	r7, sp, #0
 800b888:	6078      	str	r0, [r7, #4]
 800b88a:	460b      	mov	r3, r1
 800b88c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	32ae      	adds	r2, #174	@ 0xae
 800b898:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d101      	bne.n	800b8a4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800b8a0:	2303      	movs	r3, #3
 800b8a2:	e01c      	b.n	800b8de <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b8aa:	b2db      	uxtb	r3, r3
 800b8ac:	2b03      	cmp	r3, #3
 800b8ae:	d115      	bne.n	800b8dc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	32ae      	adds	r2, #174	@ 0xae
 800b8ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d00b      	beq.n	800b8dc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	32ae      	adds	r2, #174	@ 0xae
 800b8ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b8d4:	78fa      	ldrb	r2, [r7, #3]
 800b8d6:	4611      	mov	r1, r2
 800b8d8:	6878      	ldr	r0, [r7, #4]
 800b8da:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b8dc:	2300      	movs	r3, #0
}
 800b8de:	4618      	mov	r0, r3
 800b8e0:	3708      	adds	r7, #8
 800b8e2:	46bd      	mov	sp, r7
 800b8e4:	bd80      	pop	{r7, pc}

0800b8e6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b8e6:	b480      	push	{r7}
 800b8e8:	b083      	sub	sp, #12
 800b8ea:	af00      	add	r7, sp, #0
 800b8ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b8ee:	2300      	movs	r3, #0
}
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	370c      	adds	r7, #12
 800b8f4:	46bd      	mov	sp, r7
 800b8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fa:	4770      	bx	lr

0800b8fc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	b084      	sub	sp, #16
 800b900:	af00      	add	r7, sp, #0
 800b902:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800b904:	2300      	movs	r3, #0
 800b906:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	2201      	movs	r2, #1
 800b90c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b916:	2b00      	cmp	r3, #0
 800b918:	d00e      	beq.n	800b938 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b920:	685b      	ldr	r3, [r3, #4]
 800b922:	687a      	ldr	r2, [r7, #4]
 800b924:	6852      	ldr	r2, [r2, #4]
 800b926:	b2d2      	uxtb	r2, r2
 800b928:	4611      	mov	r1, r2
 800b92a:	6878      	ldr	r0, [r7, #4]
 800b92c:	4798      	blx	r3
 800b92e:	4603      	mov	r3, r0
 800b930:	2b00      	cmp	r3, #0
 800b932:	d001      	beq.n	800b938 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800b934:	2303      	movs	r3, #3
 800b936:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b938:	7bfb      	ldrb	r3, [r7, #15]
}
 800b93a:	4618      	mov	r0, r3
 800b93c:	3710      	adds	r7, #16
 800b93e:	46bd      	mov	sp, r7
 800b940:	bd80      	pop	{r7, pc}

0800b942 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b942:	b480      	push	{r7}
 800b944:	b083      	sub	sp, #12
 800b946:	af00      	add	r7, sp, #0
 800b948:	6078      	str	r0, [r7, #4]
 800b94a:	460b      	mov	r3, r1
 800b94c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b94e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b950:	4618      	mov	r0, r3
 800b952:	370c      	adds	r7, #12
 800b954:	46bd      	mov	sp, r7
 800b956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95a:	4770      	bx	lr

0800b95c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b95c:	b480      	push	{r7}
 800b95e:	b083      	sub	sp, #12
 800b960:	af00      	add	r7, sp, #0
 800b962:	6078      	str	r0, [r7, #4]
 800b964:	460b      	mov	r3, r1
 800b966:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b968:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b96a:	4618      	mov	r0, r3
 800b96c:	370c      	adds	r7, #12
 800b96e:	46bd      	mov	sp, r7
 800b970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b974:	4770      	bx	lr

0800b976 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b976:	b580      	push	{r7, lr}
 800b978:	b086      	sub	sp, #24
 800b97a:	af00      	add	r7, sp, #0
 800b97c:	6078      	str	r0, [r7, #4]
 800b97e:	460b      	mov	r3, r1
 800b980:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b98a:	2300      	movs	r3, #0
 800b98c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	885b      	ldrh	r3, [r3, #2]
 800b992:	b29b      	uxth	r3, r3
 800b994:	68fa      	ldr	r2, [r7, #12]
 800b996:	7812      	ldrb	r2, [r2, #0]
 800b998:	4293      	cmp	r3, r2
 800b99a:	d91f      	bls.n	800b9dc <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	781b      	ldrb	r3, [r3, #0]
 800b9a0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b9a2:	e013      	b.n	800b9cc <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b9a4:	f107 030a 	add.w	r3, r7, #10
 800b9a8:	4619      	mov	r1, r3
 800b9aa:	6978      	ldr	r0, [r7, #20]
 800b9ac:	f000 f81b 	bl	800b9e6 <USBD_GetNextDesc>
 800b9b0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b9b2:	697b      	ldr	r3, [r7, #20]
 800b9b4:	785b      	ldrb	r3, [r3, #1]
 800b9b6:	2b05      	cmp	r3, #5
 800b9b8:	d108      	bne.n	800b9cc <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b9ba:	697b      	ldr	r3, [r7, #20]
 800b9bc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b9be:	693b      	ldr	r3, [r7, #16]
 800b9c0:	789b      	ldrb	r3, [r3, #2]
 800b9c2:	78fa      	ldrb	r2, [r7, #3]
 800b9c4:	429a      	cmp	r2, r3
 800b9c6:	d008      	beq.n	800b9da <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	885b      	ldrh	r3, [r3, #2]
 800b9d0:	b29a      	uxth	r2, r3
 800b9d2:	897b      	ldrh	r3, [r7, #10]
 800b9d4:	429a      	cmp	r2, r3
 800b9d6:	d8e5      	bhi.n	800b9a4 <USBD_GetEpDesc+0x2e>
 800b9d8:	e000      	b.n	800b9dc <USBD_GetEpDesc+0x66>
          break;
 800b9da:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b9dc:	693b      	ldr	r3, [r7, #16]
}
 800b9de:	4618      	mov	r0, r3
 800b9e0:	3718      	adds	r7, #24
 800b9e2:	46bd      	mov	sp, r7
 800b9e4:	bd80      	pop	{r7, pc}

0800b9e6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b9e6:	b480      	push	{r7}
 800b9e8:	b085      	sub	sp, #20
 800b9ea:	af00      	add	r7, sp, #0
 800b9ec:	6078      	str	r0, [r7, #4]
 800b9ee:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b9f4:	683b      	ldr	r3, [r7, #0]
 800b9f6:	881b      	ldrh	r3, [r3, #0]
 800b9f8:	68fa      	ldr	r2, [r7, #12]
 800b9fa:	7812      	ldrb	r2, [r2, #0]
 800b9fc:	4413      	add	r3, r2
 800b9fe:	b29a      	uxth	r2, r3
 800ba00:	683b      	ldr	r3, [r7, #0]
 800ba02:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	781b      	ldrb	r3, [r3, #0]
 800ba08:	461a      	mov	r2, r3
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	4413      	add	r3, r2
 800ba0e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ba10:	68fb      	ldr	r3, [r7, #12]
}
 800ba12:	4618      	mov	r0, r3
 800ba14:	3714      	adds	r7, #20
 800ba16:	46bd      	mov	sp, r7
 800ba18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1c:	4770      	bx	lr

0800ba1e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ba1e:	b480      	push	{r7}
 800ba20:	b087      	sub	sp, #28
 800ba22:	af00      	add	r7, sp, #0
 800ba24:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ba2a:	697b      	ldr	r3, [r7, #20]
 800ba2c:	781b      	ldrb	r3, [r3, #0]
 800ba2e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ba30:	697b      	ldr	r3, [r7, #20]
 800ba32:	3301      	adds	r3, #1
 800ba34:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ba36:	697b      	ldr	r3, [r7, #20]
 800ba38:	781b      	ldrb	r3, [r3, #0]
 800ba3a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ba3c:	8a3b      	ldrh	r3, [r7, #16]
 800ba3e:	021b      	lsls	r3, r3, #8
 800ba40:	b21a      	sxth	r2, r3
 800ba42:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ba46:	4313      	orrs	r3, r2
 800ba48:	b21b      	sxth	r3, r3
 800ba4a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ba4c:	89fb      	ldrh	r3, [r7, #14]
}
 800ba4e:	4618      	mov	r0, r3
 800ba50:	371c      	adds	r7, #28
 800ba52:	46bd      	mov	sp, r7
 800ba54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba58:	4770      	bx	lr
	...

0800ba5c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba5c:	b580      	push	{r7, lr}
 800ba5e:	b084      	sub	sp, #16
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	6078      	str	r0, [r7, #4]
 800ba64:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ba66:	2300      	movs	r3, #0
 800ba68:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ba6a:	683b      	ldr	r3, [r7, #0]
 800ba6c:	781b      	ldrb	r3, [r3, #0]
 800ba6e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ba72:	2b40      	cmp	r3, #64	@ 0x40
 800ba74:	d005      	beq.n	800ba82 <USBD_StdDevReq+0x26>
 800ba76:	2b40      	cmp	r3, #64	@ 0x40
 800ba78:	d857      	bhi.n	800bb2a <USBD_StdDevReq+0xce>
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d00f      	beq.n	800ba9e <USBD_StdDevReq+0x42>
 800ba7e:	2b20      	cmp	r3, #32
 800ba80:	d153      	bne.n	800bb2a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	32ae      	adds	r2, #174	@ 0xae
 800ba8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba90:	689b      	ldr	r3, [r3, #8]
 800ba92:	6839      	ldr	r1, [r7, #0]
 800ba94:	6878      	ldr	r0, [r7, #4]
 800ba96:	4798      	blx	r3
 800ba98:	4603      	mov	r3, r0
 800ba9a:	73fb      	strb	r3, [r7, #15]
      break;
 800ba9c:	e04a      	b.n	800bb34 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ba9e:	683b      	ldr	r3, [r7, #0]
 800baa0:	785b      	ldrb	r3, [r3, #1]
 800baa2:	2b09      	cmp	r3, #9
 800baa4:	d83b      	bhi.n	800bb1e <USBD_StdDevReq+0xc2>
 800baa6:	a201      	add	r2, pc, #4	@ (adr r2, 800baac <USBD_StdDevReq+0x50>)
 800baa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800baac:	0800bb01 	.word	0x0800bb01
 800bab0:	0800bb15 	.word	0x0800bb15
 800bab4:	0800bb1f 	.word	0x0800bb1f
 800bab8:	0800bb0b 	.word	0x0800bb0b
 800babc:	0800bb1f 	.word	0x0800bb1f
 800bac0:	0800badf 	.word	0x0800badf
 800bac4:	0800bad5 	.word	0x0800bad5
 800bac8:	0800bb1f 	.word	0x0800bb1f
 800bacc:	0800baf7 	.word	0x0800baf7
 800bad0:	0800bae9 	.word	0x0800bae9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800bad4:	6839      	ldr	r1, [r7, #0]
 800bad6:	6878      	ldr	r0, [r7, #4]
 800bad8:	f000 fa3c 	bl	800bf54 <USBD_GetDescriptor>
          break;
 800badc:	e024      	b.n	800bb28 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800bade:	6839      	ldr	r1, [r7, #0]
 800bae0:	6878      	ldr	r0, [r7, #4]
 800bae2:	f000 fba1 	bl	800c228 <USBD_SetAddress>
          break;
 800bae6:	e01f      	b.n	800bb28 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800bae8:	6839      	ldr	r1, [r7, #0]
 800baea:	6878      	ldr	r0, [r7, #4]
 800baec:	f000 fbe0 	bl	800c2b0 <USBD_SetConfig>
 800baf0:	4603      	mov	r3, r0
 800baf2:	73fb      	strb	r3, [r7, #15]
          break;
 800baf4:	e018      	b.n	800bb28 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800baf6:	6839      	ldr	r1, [r7, #0]
 800baf8:	6878      	ldr	r0, [r7, #4]
 800bafa:	f000 fc83 	bl	800c404 <USBD_GetConfig>
          break;
 800bafe:	e013      	b.n	800bb28 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800bb00:	6839      	ldr	r1, [r7, #0]
 800bb02:	6878      	ldr	r0, [r7, #4]
 800bb04:	f000 fcb4 	bl	800c470 <USBD_GetStatus>
          break;
 800bb08:	e00e      	b.n	800bb28 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800bb0a:	6839      	ldr	r1, [r7, #0]
 800bb0c:	6878      	ldr	r0, [r7, #4]
 800bb0e:	f000 fce3 	bl	800c4d8 <USBD_SetFeature>
          break;
 800bb12:	e009      	b.n	800bb28 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800bb14:	6839      	ldr	r1, [r7, #0]
 800bb16:	6878      	ldr	r0, [r7, #4]
 800bb18:	f000 fd07 	bl	800c52a <USBD_ClrFeature>
          break;
 800bb1c:	e004      	b.n	800bb28 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800bb1e:	6839      	ldr	r1, [r7, #0]
 800bb20:	6878      	ldr	r0, [r7, #4]
 800bb22:	f000 fd5e 	bl	800c5e2 <USBD_CtlError>
          break;
 800bb26:	bf00      	nop
      }
      break;
 800bb28:	e004      	b.n	800bb34 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800bb2a:	6839      	ldr	r1, [r7, #0]
 800bb2c:	6878      	ldr	r0, [r7, #4]
 800bb2e:	f000 fd58 	bl	800c5e2 <USBD_CtlError>
      break;
 800bb32:	bf00      	nop
  }

  return ret;
 800bb34:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb36:	4618      	mov	r0, r3
 800bb38:	3710      	adds	r7, #16
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	bd80      	pop	{r7, pc}
 800bb3e:	bf00      	nop

0800bb40 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb40:	b580      	push	{r7, lr}
 800bb42:	b084      	sub	sp, #16
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	6078      	str	r0, [r7, #4]
 800bb48:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bb4e:	683b      	ldr	r3, [r7, #0]
 800bb50:	781b      	ldrb	r3, [r3, #0]
 800bb52:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bb56:	2b40      	cmp	r3, #64	@ 0x40
 800bb58:	d005      	beq.n	800bb66 <USBD_StdItfReq+0x26>
 800bb5a:	2b40      	cmp	r3, #64	@ 0x40
 800bb5c:	d852      	bhi.n	800bc04 <USBD_StdItfReq+0xc4>
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d001      	beq.n	800bb66 <USBD_StdItfReq+0x26>
 800bb62:	2b20      	cmp	r3, #32
 800bb64:	d14e      	bne.n	800bc04 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb6c:	b2db      	uxtb	r3, r3
 800bb6e:	3b01      	subs	r3, #1
 800bb70:	2b02      	cmp	r3, #2
 800bb72:	d840      	bhi.n	800bbf6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bb74:	683b      	ldr	r3, [r7, #0]
 800bb76:	889b      	ldrh	r3, [r3, #4]
 800bb78:	b2db      	uxtb	r3, r3
 800bb7a:	2b01      	cmp	r3, #1
 800bb7c:	d836      	bhi.n	800bbec <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800bb7e:	683b      	ldr	r3, [r7, #0]
 800bb80:	889b      	ldrh	r3, [r3, #4]
 800bb82:	b2db      	uxtb	r3, r3
 800bb84:	4619      	mov	r1, r3
 800bb86:	6878      	ldr	r0, [r7, #4]
 800bb88:	f7ff fedb 	bl	800b942 <USBD_CoreFindIF>
 800bb8c:	4603      	mov	r3, r0
 800bb8e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bb90:	7bbb      	ldrb	r3, [r7, #14]
 800bb92:	2bff      	cmp	r3, #255	@ 0xff
 800bb94:	d01d      	beq.n	800bbd2 <USBD_StdItfReq+0x92>
 800bb96:	7bbb      	ldrb	r3, [r7, #14]
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d11a      	bne.n	800bbd2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800bb9c:	7bba      	ldrb	r2, [r7, #14]
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	32ae      	adds	r2, #174	@ 0xae
 800bba2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bba6:	689b      	ldr	r3, [r3, #8]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d00f      	beq.n	800bbcc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800bbac:	7bba      	ldrb	r2, [r7, #14]
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bbb4:	7bba      	ldrb	r2, [r7, #14]
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	32ae      	adds	r2, #174	@ 0xae
 800bbba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbbe:	689b      	ldr	r3, [r3, #8]
 800bbc0:	6839      	ldr	r1, [r7, #0]
 800bbc2:	6878      	ldr	r0, [r7, #4]
 800bbc4:	4798      	blx	r3
 800bbc6:	4603      	mov	r3, r0
 800bbc8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bbca:	e004      	b.n	800bbd6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800bbcc:	2303      	movs	r3, #3
 800bbce:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bbd0:	e001      	b.n	800bbd6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800bbd2:	2303      	movs	r3, #3
 800bbd4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bbd6:	683b      	ldr	r3, [r7, #0]
 800bbd8:	88db      	ldrh	r3, [r3, #6]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d110      	bne.n	800bc00 <USBD_StdItfReq+0xc0>
 800bbde:	7bfb      	ldrb	r3, [r7, #15]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d10d      	bne.n	800bc00 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800bbe4:	6878      	ldr	r0, [r7, #4]
 800bbe6:	f000 fdd3 	bl	800c790 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bbea:	e009      	b.n	800bc00 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800bbec:	6839      	ldr	r1, [r7, #0]
 800bbee:	6878      	ldr	r0, [r7, #4]
 800bbf0:	f000 fcf7 	bl	800c5e2 <USBD_CtlError>
          break;
 800bbf4:	e004      	b.n	800bc00 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800bbf6:	6839      	ldr	r1, [r7, #0]
 800bbf8:	6878      	ldr	r0, [r7, #4]
 800bbfa:	f000 fcf2 	bl	800c5e2 <USBD_CtlError>
          break;
 800bbfe:	e000      	b.n	800bc02 <USBD_StdItfReq+0xc2>
          break;
 800bc00:	bf00      	nop
      }
      break;
 800bc02:	e004      	b.n	800bc0e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800bc04:	6839      	ldr	r1, [r7, #0]
 800bc06:	6878      	ldr	r0, [r7, #4]
 800bc08:	f000 fceb 	bl	800c5e2 <USBD_CtlError>
      break;
 800bc0c:	bf00      	nop
  }

  return ret;
 800bc0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc10:	4618      	mov	r0, r3
 800bc12:	3710      	adds	r7, #16
 800bc14:	46bd      	mov	sp, r7
 800bc16:	bd80      	pop	{r7, pc}

0800bc18 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc18:	b580      	push	{r7, lr}
 800bc1a:	b084      	sub	sp, #16
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	6078      	str	r0, [r7, #4]
 800bc20:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800bc22:	2300      	movs	r3, #0
 800bc24:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800bc26:	683b      	ldr	r3, [r7, #0]
 800bc28:	889b      	ldrh	r3, [r3, #4]
 800bc2a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bc2c:	683b      	ldr	r3, [r7, #0]
 800bc2e:	781b      	ldrb	r3, [r3, #0]
 800bc30:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bc34:	2b40      	cmp	r3, #64	@ 0x40
 800bc36:	d007      	beq.n	800bc48 <USBD_StdEPReq+0x30>
 800bc38:	2b40      	cmp	r3, #64	@ 0x40
 800bc3a:	f200 817f 	bhi.w	800bf3c <USBD_StdEPReq+0x324>
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d02a      	beq.n	800bc98 <USBD_StdEPReq+0x80>
 800bc42:	2b20      	cmp	r3, #32
 800bc44:	f040 817a 	bne.w	800bf3c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800bc48:	7bbb      	ldrb	r3, [r7, #14]
 800bc4a:	4619      	mov	r1, r3
 800bc4c:	6878      	ldr	r0, [r7, #4]
 800bc4e:	f7ff fe85 	bl	800b95c <USBD_CoreFindEP>
 800bc52:	4603      	mov	r3, r0
 800bc54:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bc56:	7b7b      	ldrb	r3, [r7, #13]
 800bc58:	2bff      	cmp	r3, #255	@ 0xff
 800bc5a:	f000 8174 	beq.w	800bf46 <USBD_StdEPReq+0x32e>
 800bc5e:	7b7b      	ldrb	r3, [r7, #13]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	f040 8170 	bne.w	800bf46 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800bc66:	7b7a      	ldrb	r2, [r7, #13]
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800bc6e:	7b7a      	ldrb	r2, [r7, #13]
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	32ae      	adds	r2, #174	@ 0xae
 800bc74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc78:	689b      	ldr	r3, [r3, #8]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	f000 8163 	beq.w	800bf46 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800bc80:	7b7a      	ldrb	r2, [r7, #13]
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	32ae      	adds	r2, #174	@ 0xae
 800bc86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc8a:	689b      	ldr	r3, [r3, #8]
 800bc8c:	6839      	ldr	r1, [r7, #0]
 800bc8e:	6878      	ldr	r0, [r7, #4]
 800bc90:	4798      	blx	r3
 800bc92:	4603      	mov	r3, r0
 800bc94:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800bc96:	e156      	b.n	800bf46 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bc98:	683b      	ldr	r3, [r7, #0]
 800bc9a:	785b      	ldrb	r3, [r3, #1]
 800bc9c:	2b03      	cmp	r3, #3
 800bc9e:	d008      	beq.n	800bcb2 <USBD_StdEPReq+0x9a>
 800bca0:	2b03      	cmp	r3, #3
 800bca2:	f300 8145 	bgt.w	800bf30 <USBD_StdEPReq+0x318>
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	f000 809b 	beq.w	800bde2 <USBD_StdEPReq+0x1ca>
 800bcac:	2b01      	cmp	r3, #1
 800bcae:	d03c      	beq.n	800bd2a <USBD_StdEPReq+0x112>
 800bcb0:	e13e      	b.n	800bf30 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bcb8:	b2db      	uxtb	r3, r3
 800bcba:	2b02      	cmp	r3, #2
 800bcbc:	d002      	beq.n	800bcc4 <USBD_StdEPReq+0xac>
 800bcbe:	2b03      	cmp	r3, #3
 800bcc0:	d016      	beq.n	800bcf0 <USBD_StdEPReq+0xd8>
 800bcc2:	e02c      	b.n	800bd1e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bcc4:	7bbb      	ldrb	r3, [r7, #14]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d00d      	beq.n	800bce6 <USBD_StdEPReq+0xce>
 800bcca:	7bbb      	ldrb	r3, [r7, #14]
 800bccc:	2b80      	cmp	r3, #128	@ 0x80
 800bcce:	d00a      	beq.n	800bce6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bcd0:	7bbb      	ldrb	r3, [r7, #14]
 800bcd2:	4619      	mov	r1, r3
 800bcd4:	6878      	ldr	r0, [r7, #4]
 800bcd6:	f001 f961 	bl	800cf9c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bcda:	2180      	movs	r1, #128	@ 0x80
 800bcdc:	6878      	ldr	r0, [r7, #4]
 800bcde:	f001 f95d 	bl	800cf9c <USBD_LL_StallEP>
 800bce2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bce4:	e020      	b.n	800bd28 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800bce6:	6839      	ldr	r1, [r7, #0]
 800bce8:	6878      	ldr	r0, [r7, #4]
 800bcea:	f000 fc7a 	bl	800c5e2 <USBD_CtlError>
              break;
 800bcee:	e01b      	b.n	800bd28 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bcf0:	683b      	ldr	r3, [r7, #0]
 800bcf2:	885b      	ldrh	r3, [r3, #2]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d10e      	bne.n	800bd16 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bcf8:	7bbb      	ldrb	r3, [r7, #14]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d00b      	beq.n	800bd16 <USBD_StdEPReq+0xfe>
 800bcfe:	7bbb      	ldrb	r3, [r7, #14]
 800bd00:	2b80      	cmp	r3, #128	@ 0x80
 800bd02:	d008      	beq.n	800bd16 <USBD_StdEPReq+0xfe>
 800bd04:	683b      	ldr	r3, [r7, #0]
 800bd06:	88db      	ldrh	r3, [r3, #6]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d104      	bne.n	800bd16 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800bd0c:	7bbb      	ldrb	r3, [r7, #14]
 800bd0e:	4619      	mov	r1, r3
 800bd10:	6878      	ldr	r0, [r7, #4]
 800bd12:	f001 f943 	bl	800cf9c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800bd16:	6878      	ldr	r0, [r7, #4]
 800bd18:	f000 fd3a 	bl	800c790 <USBD_CtlSendStatus>

              break;
 800bd1c:	e004      	b.n	800bd28 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800bd1e:	6839      	ldr	r1, [r7, #0]
 800bd20:	6878      	ldr	r0, [r7, #4]
 800bd22:	f000 fc5e 	bl	800c5e2 <USBD_CtlError>
              break;
 800bd26:	bf00      	nop
          }
          break;
 800bd28:	e107      	b.n	800bf3a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bd30:	b2db      	uxtb	r3, r3
 800bd32:	2b02      	cmp	r3, #2
 800bd34:	d002      	beq.n	800bd3c <USBD_StdEPReq+0x124>
 800bd36:	2b03      	cmp	r3, #3
 800bd38:	d016      	beq.n	800bd68 <USBD_StdEPReq+0x150>
 800bd3a:	e04b      	b.n	800bdd4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bd3c:	7bbb      	ldrb	r3, [r7, #14]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d00d      	beq.n	800bd5e <USBD_StdEPReq+0x146>
 800bd42:	7bbb      	ldrb	r3, [r7, #14]
 800bd44:	2b80      	cmp	r3, #128	@ 0x80
 800bd46:	d00a      	beq.n	800bd5e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bd48:	7bbb      	ldrb	r3, [r7, #14]
 800bd4a:	4619      	mov	r1, r3
 800bd4c:	6878      	ldr	r0, [r7, #4]
 800bd4e:	f001 f925 	bl	800cf9c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bd52:	2180      	movs	r1, #128	@ 0x80
 800bd54:	6878      	ldr	r0, [r7, #4]
 800bd56:	f001 f921 	bl	800cf9c <USBD_LL_StallEP>
 800bd5a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bd5c:	e040      	b.n	800bde0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800bd5e:	6839      	ldr	r1, [r7, #0]
 800bd60:	6878      	ldr	r0, [r7, #4]
 800bd62:	f000 fc3e 	bl	800c5e2 <USBD_CtlError>
              break;
 800bd66:	e03b      	b.n	800bde0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bd68:	683b      	ldr	r3, [r7, #0]
 800bd6a:	885b      	ldrh	r3, [r3, #2]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d136      	bne.n	800bdde <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800bd70:	7bbb      	ldrb	r3, [r7, #14]
 800bd72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d004      	beq.n	800bd84 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800bd7a:	7bbb      	ldrb	r3, [r7, #14]
 800bd7c:	4619      	mov	r1, r3
 800bd7e:	6878      	ldr	r0, [r7, #4]
 800bd80:	f001 f92b 	bl	800cfda <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800bd84:	6878      	ldr	r0, [r7, #4]
 800bd86:	f000 fd03 	bl	800c790 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800bd8a:	7bbb      	ldrb	r3, [r7, #14]
 800bd8c:	4619      	mov	r1, r3
 800bd8e:	6878      	ldr	r0, [r7, #4]
 800bd90:	f7ff fde4 	bl	800b95c <USBD_CoreFindEP>
 800bd94:	4603      	mov	r3, r0
 800bd96:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bd98:	7b7b      	ldrb	r3, [r7, #13]
 800bd9a:	2bff      	cmp	r3, #255	@ 0xff
 800bd9c:	d01f      	beq.n	800bdde <USBD_StdEPReq+0x1c6>
 800bd9e:	7b7b      	ldrb	r3, [r7, #13]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d11c      	bne.n	800bdde <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800bda4:	7b7a      	ldrb	r2, [r7, #13]
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800bdac:	7b7a      	ldrb	r2, [r7, #13]
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	32ae      	adds	r2, #174	@ 0xae
 800bdb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdb6:	689b      	ldr	r3, [r3, #8]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d010      	beq.n	800bdde <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bdbc:	7b7a      	ldrb	r2, [r7, #13]
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	32ae      	adds	r2, #174	@ 0xae
 800bdc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdc6:	689b      	ldr	r3, [r3, #8]
 800bdc8:	6839      	ldr	r1, [r7, #0]
 800bdca:	6878      	ldr	r0, [r7, #4]
 800bdcc:	4798      	blx	r3
 800bdce:	4603      	mov	r3, r0
 800bdd0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800bdd2:	e004      	b.n	800bdde <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800bdd4:	6839      	ldr	r1, [r7, #0]
 800bdd6:	6878      	ldr	r0, [r7, #4]
 800bdd8:	f000 fc03 	bl	800c5e2 <USBD_CtlError>
              break;
 800bddc:	e000      	b.n	800bde0 <USBD_StdEPReq+0x1c8>
              break;
 800bdde:	bf00      	nop
          }
          break;
 800bde0:	e0ab      	b.n	800bf3a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bde8:	b2db      	uxtb	r3, r3
 800bdea:	2b02      	cmp	r3, #2
 800bdec:	d002      	beq.n	800bdf4 <USBD_StdEPReq+0x1dc>
 800bdee:	2b03      	cmp	r3, #3
 800bdf0:	d032      	beq.n	800be58 <USBD_StdEPReq+0x240>
 800bdf2:	e097      	b.n	800bf24 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bdf4:	7bbb      	ldrb	r3, [r7, #14]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d007      	beq.n	800be0a <USBD_StdEPReq+0x1f2>
 800bdfa:	7bbb      	ldrb	r3, [r7, #14]
 800bdfc:	2b80      	cmp	r3, #128	@ 0x80
 800bdfe:	d004      	beq.n	800be0a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800be00:	6839      	ldr	r1, [r7, #0]
 800be02:	6878      	ldr	r0, [r7, #4]
 800be04:	f000 fbed 	bl	800c5e2 <USBD_CtlError>
                break;
 800be08:	e091      	b.n	800bf2e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800be0a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	da0b      	bge.n	800be2a <USBD_StdEPReq+0x212>
 800be12:	7bbb      	ldrb	r3, [r7, #14]
 800be14:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800be18:	4613      	mov	r3, r2
 800be1a:	009b      	lsls	r3, r3, #2
 800be1c:	4413      	add	r3, r2
 800be1e:	009b      	lsls	r3, r3, #2
 800be20:	3310      	adds	r3, #16
 800be22:	687a      	ldr	r2, [r7, #4]
 800be24:	4413      	add	r3, r2
 800be26:	3304      	adds	r3, #4
 800be28:	e00b      	b.n	800be42 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800be2a:	7bbb      	ldrb	r3, [r7, #14]
 800be2c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800be30:	4613      	mov	r3, r2
 800be32:	009b      	lsls	r3, r3, #2
 800be34:	4413      	add	r3, r2
 800be36:	009b      	lsls	r3, r3, #2
 800be38:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800be3c:	687a      	ldr	r2, [r7, #4]
 800be3e:	4413      	add	r3, r2
 800be40:	3304      	adds	r3, #4
 800be42:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800be44:	68bb      	ldr	r3, [r7, #8]
 800be46:	2200      	movs	r2, #0
 800be48:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800be4a:	68bb      	ldr	r3, [r7, #8]
 800be4c:	2202      	movs	r2, #2
 800be4e:	4619      	mov	r1, r3
 800be50:	6878      	ldr	r0, [r7, #4]
 800be52:	f000 fc43 	bl	800c6dc <USBD_CtlSendData>
              break;
 800be56:	e06a      	b.n	800bf2e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800be58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	da11      	bge.n	800be84 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800be60:	7bbb      	ldrb	r3, [r7, #14]
 800be62:	f003 020f 	and.w	r2, r3, #15
 800be66:	6879      	ldr	r1, [r7, #4]
 800be68:	4613      	mov	r3, r2
 800be6a:	009b      	lsls	r3, r3, #2
 800be6c:	4413      	add	r3, r2
 800be6e:	009b      	lsls	r3, r3, #2
 800be70:	440b      	add	r3, r1
 800be72:	3324      	adds	r3, #36	@ 0x24
 800be74:	881b      	ldrh	r3, [r3, #0]
 800be76:	2b00      	cmp	r3, #0
 800be78:	d117      	bne.n	800beaa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800be7a:	6839      	ldr	r1, [r7, #0]
 800be7c:	6878      	ldr	r0, [r7, #4]
 800be7e:	f000 fbb0 	bl	800c5e2 <USBD_CtlError>
                  break;
 800be82:	e054      	b.n	800bf2e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800be84:	7bbb      	ldrb	r3, [r7, #14]
 800be86:	f003 020f 	and.w	r2, r3, #15
 800be8a:	6879      	ldr	r1, [r7, #4]
 800be8c:	4613      	mov	r3, r2
 800be8e:	009b      	lsls	r3, r3, #2
 800be90:	4413      	add	r3, r2
 800be92:	009b      	lsls	r3, r3, #2
 800be94:	440b      	add	r3, r1
 800be96:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800be9a:	881b      	ldrh	r3, [r3, #0]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d104      	bne.n	800beaa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bea0:	6839      	ldr	r1, [r7, #0]
 800bea2:	6878      	ldr	r0, [r7, #4]
 800bea4:	f000 fb9d 	bl	800c5e2 <USBD_CtlError>
                  break;
 800bea8:	e041      	b.n	800bf2e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800beaa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	da0b      	bge.n	800beca <USBD_StdEPReq+0x2b2>
 800beb2:	7bbb      	ldrb	r3, [r7, #14]
 800beb4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800beb8:	4613      	mov	r3, r2
 800beba:	009b      	lsls	r3, r3, #2
 800bebc:	4413      	add	r3, r2
 800bebe:	009b      	lsls	r3, r3, #2
 800bec0:	3310      	adds	r3, #16
 800bec2:	687a      	ldr	r2, [r7, #4]
 800bec4:	4413      	add	r3, r2
 800bec6:	3304      	adds	r3, #4
 800bec8:	e00b      	b.n	800bee2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800beca:	7bbb      	ldrb	r3, [r7, #14]
 800becc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bed0:	4613      	mov	r3, r2
 800bed2:	009b      	lsls	r3, r3, #2
 800bed4:	4413      	add	r3, r2
 800bed6:	009b      	lsls	r3, r3, #2
 800bed8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bedc:	687a      	ldr	r2, [r7, #4]
 800bede:	4413      	add	r3, r2
 800bee0:	3304      	adds	r3, #4
 800bee2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bee4:	7bbb      	ldrb	r3, [r7, #14]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d002      	beq.n	800bef0 <USBD_StdEPReq+0x2d8>
 800beea:	7bbb      	ldrb	r3, [r7, #14]
 800beec:	2b80      	cmp	r3, #128	@ 0x80
 800beee:	d103      	bne.n	800bef8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800bef0:	68bb      	ldr	r3, [r7, #8]
 800bef2:	2200      	movs	r2, #0
 800bef4:	601a      	str	r2, [r3, #0]
 800bef6:	e00e      	b.n	800bf16 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800bef8:	7bbb      	ldrb	r3, [r7, #14]
 800befa:	4619      	mov	r1, r3
 800befc:	6878      	ldr	r0, [r7, #4]
 800befe:	f001 f88b 	bl	800d018 <USBD_LL_IsStallEP>
 800bf02:	4603      	mov	r3, r0
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d003      	beq.n	800bf10 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800bf08:	68bb      	ldr	r3, [r7, #8]
 800bf0a:	2201      	movs	r2, #1
 800bf0c:	601a      	str	r2, [r3, #0]
 800bf0e:	e002      	b.n	800bf16 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800bf10:	68bb      	ldr	r3, [r7, #8]
 800bf12:	2200      	movs	r2, #0
 800bf14:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bf16:	68bb      	ldr	r3, [r7, #8]
 800bf18:	2202      	movs	r2, #2
 800bf1a:	4619      	mov	r1, r3
 800bf1c:	6878      	ldr	r0, [r7, #4]
 800bf1e:	f000 fbdd 	bl	800c6dc <USBD_CtlSendData>
              break;
 800bf22:	e004      	b.n	800bf2e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800bf24:	6839      	ldr	r1, [r7, #0]
 800bf26:	6878      	ldr	r0, [r7, #4]
 800bf28:	f000 fb5b 	bl	800c5e2 <USBD_CtlError>
              break;
 800bf2c:	bf00      	nop
          }
          break;
 800bf2e:	e004      	b.n	800bf3a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800bf30:	6839      	ldr	r1, [r7, #0]
 800bf32:	6878      	ldr	r0, [r7, #4]
 800bf34:	f000 fb55 	bl	800c5e2 <USBD_CtlError>
          break;
 800bf38:	bf00      	nop
      }
      break;
 800bf3a:	e005      	b.n	800bf48 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800bf3c:	6839      	ldr	r1, [r7, #0]
 800bf3e:	6878      	ldr	r0, [r7, #4]
 800bf40:	f000 fb4f 	bl	800c5e2 <USBD_CtlError>
      break;
 800bf44:	e000      	b.n	800bf48 <USBD_StdEPReq+0x330>
      break;
 800bf46:	bf00      	nop
  }

  return ret;
 800bf48:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	3710      	adds	r7, #16
 800bf4e:	46bd      	mov	sp, r7
 800bf50:	bd80      	pop	{r7, pc}
	...

0800bf54 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf54:	b580      	push	{r7, lr}
 800bf56:	b084      	sub	sp, #16
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	6078      	str	r0, [r7, #4]
 800bf5c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bf5e:	2300      	movs	r3, #0
 800bf60:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bf62:	2300      	movs	r3, #0
 800bf64:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bf66:	2300      	movs	r3, #0
 800bf68:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bf6a:	683b      	ldr	r3, [r7, #0]
 800bf6c:	885b      	ldrh	r3, [r3, #2]
 800bf6e:	0a1b      	lsrs	r3, r3, #8
 800bf70:	b29b      	uxth	r3, r3
 800bf72:	3b01      	subs	r3, #1
 800bf74:	2b06      	cmp	r3, #6
 800bf76:	f200 8128 	bhi.w	800c1ca <USBD_GetDescriptor+0x276>
 800bf7a:	a201      	add	r2, pc, #4	@ (adr r2, 800bf80 <USBD_GetDescriptor+0x2c>)
 800bf7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf80:	0800bf9d 	.word	0x0800bf9d
 800bf84:	0800bfb5 	.word	0x0800bfb5
 800bf88:	0800bff5 	.word	0x0800bff5
 800bf8c:	0800c1cb 	.word	0x0800c1cb
 800bf90:	0800c1cb 	.word	0x0800c1cb
 800bf94:	0800c16b 	.word	0x0800c16b
 800bf98:	0800c197 	.word	0x0800c197
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	687a      	ldr	r2, [r7, #4]
 800bfa6:	7c12      	ldrb	r2, [r2, #16]
 800bfa8:	f107 0108 	add.w	r1, r7, #8
 800bfac:	4610      	mov	r0, r2
 800bfae:	4798      	blx	r3
 800bfb0:	60f8      	str	r0, [r7, #12]
      break;
 800bfb2:	e112      	b.n	800c1da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	7c1b      	ldrb	r3, [r3, #16]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d10d      	bne.n	800bfd8 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bfc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfc4:	f107 0208 	add.w	r2, r7, #8
 800bfc8:	4610      	mov	r0, r2
 800bfca:	4798      	blx	r3
 800bfcc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	3301      	adds	r3, #1
 800bfd2:	2202      	movs	r2, #2
 800bfd4:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800bfd6:	e100      	b.n	800c1da <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bfde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bfe0:	f107 0208 	add.w	r2, r7, #8
 800bfe4:	4610      	mov	r0, r2
 800bfe6:	4798      	blx	r3
 800bfe8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	3301      	adds	r3, #1
 800bfee:	2202      	movs	r2, #2
 800bff0:	701a      	strb	r2, [r3, #0]
      break;
 800bff2:	e0f2      	b.n	800c1da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bff4:	683b      	ldr	r3, [r7, #0]
 800bff6:	885b      	ldrh	r3, [r3, #2]
 800bff8:	b2db      	uxtb	r3, r3
 800bffa:	2b05      	cmp	r3, #5
 800bffc:	f200 80ac 	bhi.w	800c158 <USBD_GetDescriptor+0x204>
 800c000:	a201      	add	r2, pc, #4	@ (adr r2, 800c008 <USBD_GetDescriptor+0xb4>)
 800c002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c006:	bf00      	nop
 800c008:	0800c021 	.word	0x0800c021
 800c00c:	0800c055 	.word	0x0800c055
 800c010:	0800c089 	.word	0x0800c089
 800c014:	0800c0bd 	.word	0x0800c0bd
 800c018:	0800c0f1 	.word	0x0800c0f1
 800c01c:	0800c125 	.word	0x0800c125
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c026:	685b      	ldr	r3, [r3, #4]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d00b      	beq.n	800c044 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c032:	685b      	ldr	r3, [r3, #4]
 800c034:	687a      	ldr	r2, [r7, #4]
 800c036:	7c12      	ldrb	r2, [r2, #16]
 800c038:	f107 0108 	add.w	r1, r7, #8
 800c03c:	4610      	mov	r0, r2
 800c03e:	4798      	blx	r3
 800c040:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c042:	e091      	b.n	800c168 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c044:	6839      	ldr	r1, [r7, #0]
 800c046:	6878      	ldr	r0, [r7, #4]
 800c048:	f000 facb 	bl	800c5e2 <USBD_CtlError>
            err++;
 800c04c:	7afb      	ldrb	r3, [r7, #11]
 800c04e:	3301      	adds	r3, #1
 800c050:	72fb      	strb	r3, [r7, #11]
          break;
 800c052:	e089      	b.n	800c168 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c05a:	689b      	ldr	r3, [r3, #8]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d00b      	beq.n	800c078 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c066:	689b      	ldr	r3, [r3, #8]
 800c068:	687a      	ldr	r2, [r7, #4]
 800c06a:	7c12      	ldrb	r2, [r2, #16]
 800c06c:	f107 0108 	add.w	r1, r7, #8
 800c070:	4610      	mov	r0, r2
 800c072:	4798      	blx	r3
 800c074:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c076:	e077      	b.n	800c168 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c078:	6839      	ldr	r1, [r7, #0]
 800c07a:	6878      	ldr	r0, [r7, #4]
 800c07c:	f000 fab1 	bl	800c5e2 <USBD_CtlError>
            err++;
 800c080:	7afb      	ldrb	r3, [r7, #11]
 800c082:	3301      	adds	r3, #1
 800c084:	72fb      	strb	r3, [r7, #11]
          break;
 800c086:	e06f      	b.n	800c168 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c08e:	68db      	ldr	r3, [r3, #12]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d00b      	beq.n	800c0ac <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c09a:	68db      	ldr	r3, [r3, #12]
 800c09c:	687a      	ldr	r2, [r7, #4]
 800c09e:	7c12      	ldrb	r2, [r2, #16]
 800c0a0:	f107 0108 	add.w	r1, r7, #8
 800c0a4:	4610      	mov	r0, r2
 800c0a6:	4798      	blx	r3
 800c0a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c0aa:	e05d      	b.n	800c168 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c0ac:	6839      	ldr	r1, [r7, #0]
 800c0ae:	6878      	ldr	r0, [r7, #4]
 800c0b0:	f000 fa97 	bl	800c5e2 <USBD_CtlError>
            err++;
 800c0b4:	7afb      	ldrb	r3, [r7, #11]
 800c0b6:	3301      	adds	r3, #1
 800c0b8:	72fb      	strb	r3, [r7, #11]
          break;
 800c0ba:	e055      	b.n	800c168 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c0c2:	691b      	ldr	r3, [r3, #16]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d00b      	beq.n	800c0e0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c0ce:	691b      	ldr	r3, [r3, #16]
 800c0d0:	687a      	ldr	r2, [r7, #4]
 800c0d2:	7c12      	ldrb	r2, [r2, #16]
 800c0d4:	f107 0108 	add.w	r1, r7, #8
 800c0d8:	4610      	mov	r0, r2
 800c0da:	4798      	blx	r3
 800c0dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c0de:	e043      	b.n	800c168 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c0e0:	6839      	ldr	r1, [r7, #0]
 800c0e2:	6878      	ldr	r0, [r7, #4]
 800c0e4:	f000 fa7d 	bl	800c5e2 <USBD_CtlError>
            err++;
 800c0e8:	7afb      	ldrb	r3, [r7, #11]
 800c0ea:	3301      	adds	r3, #1
 800c0ec:	72fb      	strb	r3, [r7, #11]
          break;
 800c0ee:	e03b      	b.n	800c168 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c0f6:	695b      	ldr	r3, [r3, #20]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d00b      	beq.n	800c114 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c102:	695b      	ldr	r3, [r3, #20]
 800c104:	687a      	ldr	r2, [r7, #4]
 800c106:	7c12      	ldrb	r2, [r2, #16]
 800c108:	f107 0108 	add.w	r1, r7, #8
 800c10c:	4610      	mov	r0, r2
 800c10e:	4798      	blx	r3
 800c110:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c112:	e029      	b.n	800c168 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c114:	6839      	ldr	r1, [r7, #0]
 800c116:	6878      	ldr	r0, [r7, #4]
 800c118:	f000 fa63 	bl	800c5e2 <USBD_CtlError>
            err++;
 800c11c:	7afb      	ldrb	r3, [r7, #11]
 800c11e:	3301      	adds	r3, #1
 800c120:	72fb      	strb	r3, [r7, #11]
          break;
 800c122:	e021      	b.n	800c168 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c12a:	699b      	ldr	r3, [r3, #24]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d00b      	beq.n	800c148 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c136:	699b      	ldr	r3, [r3, #24]
 800c138:	687a      	ldr	r2, [r7, #4]
 800c13a:	7c12      	ldrb	r2, [r2, #16]
 800c13c:	f107 0108 	add.w	r1, r7, #8
 800c140:	4610      	mov	r0, r2
 800c142:	4798      	blx	r3
 800c144:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c146:	e00f      	b.n	800c168 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c148:	6839      	ldr	r1, [r7, #0]
 800c14a:	6878      	ldr	r0, [r7, #4]
 800c14c:	f000 fa49 	bl	800c5e2 <USBD_CtlError>
            err++;
 800c150:	7afb      	ldrb	r3, [r7, #11]
 800c152:	3301      	adds	r3, #1
 800c154:	72fb      	strb	r3, [r7, #11]
          break;
 800c156:	e007      	b.n	800c168 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c158:	6839      	ldr	r1, [r7, #0]
 800c15a:	6878      	ldr	r0, [r7, #4]
 800c15c:	f000 fa41 	bl	800c5e2 <USBD_CtlError>
          err++;
 800c160:	7afb      	ldrb	r3, [r7, #11]
 800c162:	3301      	adds	r3, #1
 800c164:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c166:	bf00      	nop
      }
      break;
 800c168:	e037      	b.n	800c1da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	7c1b      	ldrb	r3, [r3, #16]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d109      	bne.n	800c186 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c178:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c17a:	f107 0208 	add.w	r2, r7, #8
 800c17e:	4610      	mov	r0, r2
 800c180:	4798      	blx	r3
 800c182:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c184:	e029      	b.n	800c1da <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c186:	6839      	ldr	r1, [r7, #0]
 800c188:	6878      	ldr	r0, [r7, #4]
 800c18a:	f000 fa2a 	bl	800c5e2 <USBD_CtlError>
        err++;
 800c18e:	7afb      	ldrb	r3, [r7, #11]
 800c190:	3301      	adds	r3, #1
 800c192:	72fb      	strb	r3, [r7, #11]
      break;
 800c194:	e021      	b.n	800c1da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	7c1b      	ldrb	r3, [r3, #16]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d10d      	bne.n	800c1ba <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c1a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c1a6:	f107 0208 	add.w	r2, r7, #8
 800c1aa:	4610      	mov	r0, r2
 800c1ac:	4798      	blx	r3
 800c1ae:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	3301      	adds	r3, #1
 800c1b4:	2207      	movs	r2, #7
 800c1b6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c1b8:	e00f      	b.n	800c1da <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c1ba:	6839      	ldr	r1, [r7, #0]
 800c1bc:	6878      	ldr	r0, [r7, #4]
 800c1be:	f000 fa10 	bl	800c5e2 <USBD_CtlError>
        err++;
 800c1c2:	7afb      	ldrb	r3, [r7, #11]
 800c1c4:	3301      	adds	r3, #1
 800c1c6:	72fb      	strb	r3, [r7, #11]
      break;
 800c1c8:	e007      	b.n	800c1da <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c1ca:	6839      	ldr	r1, [r7, #0]
 800c1cc:	6878      	ldr	r0, [r7, #4]
 800c1ce:	f000 fa08 	bl	800c5e2 <USBD_CtlError>
      err++;
 800c1d2:	7afb      	ldrb	r3, [r7, #11]
 800c1d4:	3301      	adds	r3, #1
 800c1d6:	72fb      	strb	r3, [r7, #11]
      break;
 800c1d8:	bf00      	nop
  }

  if (err != 0U)
 800c1da:	7afb      	ldrb	r3, [r7, #11]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d11e      	bne.n	800c21e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800c1e0:	683b      	ldr	r3, [r7, #0]
 800c1e2:	88db      	ldrh	r3, [r3, #6]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d016      	beq.n	800c216 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800c1e8:	893b      	ldrh	r3, [r7, #8]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d00e      	beq.n	800c20c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800c1ee:	683b      	ldr	r3, [r7, #0]
 800c1f0:	88da      	ldrh	r2, [r3, #6]
 800c1f2:	893b      	ldrh	r3, [r7, #8]
 800c1f4:	4293      	cmp	r3, r2
 800c1f6:	bf28      	it	cs
 800c1f8:	4613      	movcs	r3, r2
 800c1fa:	b29b      	uxth	r3, r3
 800c1fc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c1fe:	893b      	ldrh	r3, [r7, #8]
 800c200:	461a      	mov	r2, r3
 800c202:	68f9      	ldr	r1, [r7, #12]
 800c204:	6878      	ldr	r0, [r7, #4]
 800c206:	f000 fa69 	bl	800c6dc <USBD_CtlSendData>
 800c20a:	e009      	b.n	800c220 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c20c:	6839      	ldr	r1, [r7, #0]
 800c20e:	6878      	ldr	r0, [r7, #4]
 800c210:	f000 f9e7 	bl	800c5e2 <USBD_CtlError>
 800c214:	e004      	b.n	800c220 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c216:	6878      	ldr	r0, [r7, #4]
 800c218:	f000 faba 	bl	800c790 <USBD_CtlSendStatus>
 800c21c:	e000      	b.n	800c220 <USBD_GetDescriptor+0x2cc>
    return;
 800c21e:	bf00      	nop
  }
}
 800c220:	3710      	adds	r7, #16
 800c222:	46bd      	mov	sp, r7
 800c224:	bd80      	pop	{r7, pc}
 800c226:	bf00      	nop

0800c228 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c228:	b580      	push	{r7, lr}
 800c22a:	b084      	sub	sp, #16
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	6078      	str	r0, [r7, #4]
 800c230:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c232:	683b      	ldr	r3, [r7, #0]
 800c234:	889b      	ldrh	r3, [r3, #4]
 800c236:	2b00      	cmp	r3, #0
 800c238:	d131      	bne.n	800c29e <USBD_SetAddress+0x76>
 800c23a:	683b      	ldr	r3, [r7, #0]
 800c23c:	88db      	ldrh	r3, [r3, #6]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d12d      	bne.n	800c29e <USBD_SetAddress+0x76>
 800c242:	683b      	ldr	r3, [r7, #0]
 800c244:	885b      	ldrh	r3, [r3, #2]
 800c246:	2b7f      	cmp	r3, #127	@ 0x7f
 800c248:	d829      	bhi.n	800c29e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c24a:	683b      	ldr	r3, [r7, #0]
 800c24c:	885b      	ldrh	r3, [r3, #2]
 800c24e:	b2db      	uxtb	r3, r3
 800c250:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c254:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c25c:	b2db      	uxtb	r3, r3
 800c25e:	2b03      	cmp	r3, #3
 800c260:	d104      	bne.n	800c26c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c262:	6839      	ldr	r1, [r7, #0]
 800c264:	6878      	ldr	r0, [r7, #4]
 800c266:	f000 f9bc 	bl	800c5e2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c26a:	e01d      	b.n	800c2a8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	7bfa      	ldrb	r2, [r7, #15]
 800c270:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c274:	7bfb      	ldrb	r3, [r7, #15]
 800c276:	4619      	mov	r1, r3
 800c278:	6878      	ldr	r0, [r7, #4]
 800c27a:	f000 fef9 	bl	800d070 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c27e:	6878      	ldr	r0, [r7, #4]
 800c280:	f000 fa86 	bl	800c790 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c284:	7bfb      	ldrb	r3, [r7, #15]
 800c286:	2b00      	cmp	r3, #0
 800c288:	d004      	beq.n	800c294 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	2202      	movs	r2, #2
 800c28e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c292:	e009      	b.n	800c2a8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	2201      	movs	r2, #1
 800c298:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c29c:	e004      	b.n	800c2a8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c29e:	6839      	ldr	r1, [r7, #0]
 800c2a0:	6878      	ldr	r0, [r7, #4]
 800c2a2:	f000 f99e 	bl	800c5e2 <USBD_CtlError>
  }
}
 800c2a6:	bf00      	nop
 800c2a8:	bf00      	nop
 800c2aa:	3710      	adds	r7, #16
 800c2ac:	46bd      	mov	sp, r7
 800c2ae:	bd80      	pop	{r7, pc}

0800c2b0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c2b0:	b580      	push	{r7, lr}
 800c2b2:	b084      	sub	sp, #16
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	6078      	str	r0, [r7, #4]
 800c2b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c2be:	683b      	ldr	r3, [r7, #0]
 800c2c0:	885b      	ldrh	r3, [r3, #2]
 800c2c2:	b2da      	uxtb	r2, r3
 800c2c4:	4b4e      	ldr	r3, [pc, #312]	@ (800c400 <USBD_SetConfig+0x150>)
 800c2c6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c2c8:	4b4d      	ldr	r3, [pc, #308]	@ (800c400 <USBD_SetConfig+0x150>)
 800c2ca:	781b      	ldrb	r3, [r3, #0]
 800c2cc:	2b01      	cmp	r3, #1
 800c2ce:	d905      	bls.n	800c2dc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c2d0:	6839      	ldr	r1, [r7, #0]
 800c2d2:	6878      	ldr	r0, [r7, #4]
 800c2d4:	f000 f985 	bl	800c5e2 <USBD_CtlError>
    return USBD_FAIL;
 800c2d8:	2303      	movs	r3, #3
 800c2da:	e08c      	b.n	800c3f6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c2e2:	b2db      	uxtb	r3, r3
 800c2e4:	2b02      	cmp	r3, #2
 800c2e6:	d002      	beq.n	800c2ee <USBD_SetConfig+0x3e>
 800c2e8:	2b03      	cmp	r3, #3
 800c2ea:	d029      	beq.n	800c340 <USBD_SetConfig+0x90>
 800c2ec:	e075      	b.n	800c3da <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c2ee:	4b44      	ldr	r3, [pc, #272]	@ (800c400 <USBD_SetConfig+0x150>)
 800c2f0:	781b      	ldrb	r3, [r3, #0]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d020      	beq.n	800c338 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c2f6:	4b42      	ldr	r3, [pc, #264]	@ (800c400 <USBD_SetConfig+0x150>)
 800c2f8:	781b      	ldrb	r3, [r3, #0]
 800c2fa:	461a      	mov	r2, r3
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c300:	4b3f      	ldr	r3, [pc, #252]	@ (800c400 <USBD_SetConfig+0x150>)
 800c302:	781b      	ldrb	r3, [r3, #0]
 800c304:	4619      	mov	r1, r3
 800c306:	6878      	ldr	r0, [r7, #4]
 800c308:	f7fe ffe3 	bl	800b2d2 <USBD_SetClassConfig>
 800c30c:	4603      	mov	r3, r0
 800c30e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c310:	7bfb      	ldrb	r3, [r7, #15]
 800c312:	2b00      	cmp	r3, #0
 800c314:	d008      	beq.n	800c328 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c316:	6839      	ldr	r1, [r7, #0]
 800c318:	6878      	ldr	r0, [r7, #4]
 800c31a:	f000 f962 	bl	800c5e2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	2202      	movs	r2, #2
 800c322:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c326:	e065      	b.n	800c3f4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c328:	6878      	ldr	r0, [r7, #4]
 800c32a:	f000 fa31 	bl	800c790 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	2203      	movs	r2, #3
 800c332:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c336:	e05d      	b.n	800c3f4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c338:	6878      	ldr	r0, [r7, #4]
 800c33a:	f000 fa29 	bl	800c790 <USBD_CtlSendStatus>
      break;
 800c33e:	e059      	b.n	800c3f4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c340:	4b2f      	ldr	r3, [pc, #188]	@ (800c400 <USBD_SetConfig+0x150>)
 800c342:	781b      	ldrb	r3, [r3, #0]
 800c344:	2b00      	cmp	r3, #0
 800c346:	d112      	bne.n	800c36e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	2202      	movs	r2, #2
 800c34c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800c350:	4b2b      	ldr	r3, [pc, #172]	@ (800c400 <USBD_SetConfig+0x150>)
 800c352:	781b      	ldrb	r3, [r3, #0]
 800c354:	461a      	mov	r2, r3
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c35a:	4b29      	ldr	r3, [pc, #164]	@ (800c400 <USBD_SetConfig+0x150>)
 800c35c:	781b      	ldrb	r3, [r3, #0]
 800c35e:	4619      	mov	r1, r3
 800c360:	6878      	ldr	r0, [r7, #4]
 800c362:	f7fe ffd2 	bl	800b30a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c366:	6878      	ldr	r0, [r7, #4]
 800c368:	f000 fa12 	bl	800c790 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c36c:	e042      	b.n	800c3f4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c36e:	4b24      	ldr	r3, [pc, #144]	@ (800c400 <USBD_SetConfig+0x150>)
 800c370:	781b      	ldrb	r3, [r3, #0]
 800c372:	461a      	mov	r2, r3
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	685b      	ldr	r3, [r3, #4]
 800c378:	429a      	cmp	r2, r3
 800c37a:	d02a      	beq.n	800c3d2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	685b      	ldr	r3, [r3, #4]
 800c380:	b2db      	uxtb	r3, r3
 800c382:	4619      	mov	r1, r3
 800c384:	6878      	ldr	r0, [r7, #4]
 800c386:	f7fe ffc0 	bl	800b30a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c38a:	4b1d      	ldr	r3, [pc, #116]	@ (800c400 <USBD_SetConfig+0x150>)
 800c38c:	781b      	ldrb	r3, [r3, #0]
 800c38e:	461a      	mov	r2, r3
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c394:	4b1a      	ldr	r3, [pc, #104]	@ (800c400 <USBD_SetConfig+0x150>)
 800c396:	781b      	ldrb	r3, [r3, #0]
 800c398:	4619      	mov	r1, r3
 800c39a:	6878      	ldr	r0, [r7, #4]
 800c39c:	f7fe ff99 	bl	800b2d2 <USBD_SetClassConfig>
 800c3a0:	4603      	mov	r3, r0
 800c3a2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c3a4:	7bfb      	ldrb	r3, [r7, #15]
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d00f      	beq.n	800c3ca <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c3aa:	6839      	ldr	r1, [r7, #0]
 800c3ac:	6878      	ldr	r0, [r7, #4]
 800c3ae:	f000 f918 	bl	800c5e2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	685b      	ldr	r3, [r3, #4]
 800c3b6:	b2db      	uxtb	r3, r3
 800c3b8:	4619      	mov	r1, r3
 800c3ba:	6878      	ldr	r0, [r7, #4]
 800c3bc:	f7fe ffa5 	bl	800b30a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	2202      	movs	r2, #2
 800c3c4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c3c8:	e014      	b.n	800c3f4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c3ca:	6878      	ldr	r0, [r7, #4]
 800c3cc:	f000 f9e0 	bl	800c790 <USBD_CtlSendStatus>
      break;
 800c3d0:	e010      	b.n	800c3f4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c3d2:	6878      	ldr	r0, [r7, #4]
 800c3d4:	f000 f9dc 	bl	800c790 <USBD_CtlSendStatus>
      break;
 800c3d8:	e00c      	b.n	800c3f4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c3da:	6839      	ldr	r1, [r7, #0]
 800c3dc:	6878      	ldr	r0, [r7, #4]
 800c3de:	f000 f900 	bl	800c5e2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c3e2:	4b07      	ldr	r3, [pc, #28]	@ (800c400 <USBD_SetConfig+0x150>)
 800c3e4:	781b      	ldrb	r3, [r3, #0]
 800c3e6:	4619      	mov	r1, r3
 800c3e8:	6878      	ldr	r0, [r7, #4]
 800c3ea:	f7fe ff8e 	bl	800b30a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c3ee:	2303      	movs	r3, #3
 800c3f0:	73fb      	strb	r3, [r7, #15]
      break;
 800c3f2:	bf00      	nop
  }

  return ret;
 800c3f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	3710      	adds	r7, #16
 800c3fa:	46bd      	mov	sp, r7
 800c3fc:	bd80      	pop	{r7, pc}
 800c3fe:	bf00      	nop
 800c400:	200007b8 	.word	0x200007b8

0800c404 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c404:	b580      	push	{r7, lr}
 800c406:	b082      	sub	sp, #8
 800c408:	af00      	add	r7, sp, #0
 800c40a:	6078      	str	r0, [r7, #4]
 800c40c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c40e:	683b      	ldr	r3, [r7, #0]
 800c410:	88db      	ldrh	r3, [r3, #6]
 800c412:	2b01      	cmp	r3, #1
 800c414:	d004      	beq.n	800c420 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c416:	6839      	ldr	r1, [r7, #0]
 800c418:	6878      	ldr	r0, [r7, #4]
 800c41a:	f000 f8e2 	bl	800c5e2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c41e:	e023      	b.n	800c468 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c426:	b2db      	uxtb	r3, r3
 800c428:	2b02      	cmp	r3, #2
 800c42a:	dc02      	bgt.n	800c432 <USBD_GetConfig+0x2e>
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	dc03      	bgt.n	800c438 <USBD_GetConfig+0x34>
 800c430:	e015      	b.n	800c45e <USBD_GetConfig+0x5a>
 800c432:	2b03      	cmp	r3, #3
 800c434:	d00b      	beq.n	800c44e <USBD_GetConfig+0x4a>
 800c436:	e012      	b.n	800c45e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	2200      	movs	r2, #0
 800c43c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	3308      	adds	r3, #8
 800c442:	2201      	movs	r2, #1
 800c444:	4619      	mov	r1, r3
 800c446:	6878      	ldr	r0, [r7, #4]
 800c448:	f000 f948 	bl	800c6dc <USBD_CtlSendData>
        break;
 800c44c:	e00c      	b.n	800c468 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	3304      	adds	r3, #4
 800c452:	2201      	movs	r2, #1
 800c454:	4619      	mov	r1, r3
 800c456:	6878      	ldr	r0, [r7, #4]
 800c458:	f000 f940 	bl	800c6dc <USBD_CtlSendData>
        break;
 800c45c:	e004      	b.n	800c468 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c45e:	6839      	ldr	r1, [r7, #0]
 800c460:	6878      	ldr	r0, [r7, #4]
 800c462:	f000 f8be 	bl	800c5e2 <USBD_CtlError>
        break;
 800c466:	bf00      	nop
}
 800c468:	bf00      	nop
 800c46a:	3708      	adds	r7, #8
 800c46c:	46bd      	mov	sp, r7
 800c46e:	bd80      	pop	{r7, pc}

0800c470 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c470:	b580      	push	{r7, lr}
 800c472:	b082      	sub	sp, #8
 800c474:	af00      	add	r7, sp, #0
 800c476:	6078      	str	r0, [r7, #4]
 800c478:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c480:	b2db      	uxtb	r3, r3
 800c482:	3b01      	subs	r3, #1
 800c484:	2b02      	cmp	r3, #2
 800c486:	d81e      	bhi.n	800c4c6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c488:	683b      	ldr	r3, [r7, #0]
 800c48a:	88db      	ldrh	r3, [r3, #6]
 800c48c:	2b02      	cmp	r3, #2
 800c48e:	d004      	beq.n	800c49a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c490:	6839      	ldr	r1, [r7, #0]
 800c492:	6878      	ldr	r0, [r7, #4]
 800c494:	f000 f8a5 	bl	800c5e2 <USBD_CtlError>
        break;
 800c498:	e01a      	b.n	800c4d0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	2201      	movs	r2, #1
 800c49e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d005      	beq.n	800c4b6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	68db      	ldr	r3, [r3, #12]
 800c4ae:	f043 0202 	orr.w	r2, r3, #2
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	330c      	adds	r3, #12
 800c4ba:	2202      	movs	r2, #2
 800c4bc:	4619      	mov	r1, r3
 800c4be:	6878      	ldr	r0, [r7, #4]
 800c4c0:	f000 f90c 	bl	800c6dc <USBD_CtlSendData>
      break;
 800c4c4:	e004      	b.n	800c4d0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c4c6:	6839      	ldr	r1, [r7, #0]
 800c4c8:	6878      	ldr	r0, [r7, #4]
 800c4ca:	f000 f88a 	bl	800c5e2 <USBD_CtlError>
      break;
 800c4ce:	bf00      	nop
  }
}
 800c4d0:	bf00      	nop
 800c4d2:	3708      	adds	r7, #8
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	bd80      	pop	{r7, pc}

0800c4d8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	b082      	sub	sp, #8
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	6078      	str	r0, [r7, #4]
 800c4e0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c4e2:	683b      	ldr	r3, [r7, #0]
 800c4e4:	885b      	ldrh	r3, [r3, #2]
 800c4e6:	2b01      	cmp	r3, #1
 800c4e8:	d107      	bne.n	800c4fa <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	2201      	movs	r2, #1
 800c4ee:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c4f2:	6878      	ldr	r0, [r7, #4]
 800c4f4:	f000 f94c 	bl	800c790 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c4f8:	e013      	b.n	800c522 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c4fa:	683b      	ldr	r3, [r7, #0]
 800c4fc:	885b      	ldrh	r3, [r3, #2]
 800c4fe:	2b02      	cmp	r3, #2
 800c500:	d10b      	bne.n	800c51a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800c502:	683b      	ldr	r3, [r7, #0]
 800c504:	889b      	ldrh	r3, [r3, #4]
 800c506:	0a1b      	lsrs	r3, r3, #8
 800c508:	b29b      	uxth	r3, r3
 800c50a:	b2da      	uxtb	r2, r3
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c512:	6878      	ldr	r0, [r7, #4]
 800c514:	f000 f93c 	bl	800c790 <USBD_CtlSendStatus>
}
 800c518:	e003      	b.n	800c522 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c51a:	6839      	ldr	r1, [r7, #0]
 800c51c:	6878      	ldr	r0, [r7, #4]
 800c51e:	f000 f860 	bl	800c5e2 <USBD_CtlError>
}
 800c522:	bf00      	nop
 800c524:	3708      	adds	r7, #8
 800c526:	46bd      	mov	sp, r7
 800c528:	bd80      	pop	{r7, pc}

0800c52a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c52a:	b580      	push	{r7, lr}
 800c52c:	b082      	sub	sp, #8
 800c52e:	af00      	add	r7, sp, #0
 800c530:	6078      	str	r0, [r7, #4]
 800c532:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c53a:	b2db      	uxtb	r3, r3
 800c53c:	3b01      	subs	r3, #1
 800c53e:	2b02      	cmp	r3, #2
 800c540:	d80b      	bhi.n	800c55a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c542:	683b      	ldr	r3, [r7, #0]
 800c544:	885b      	ldrh	r3, [r3, #2]
 800c546:	2b01      	cmp	r3, #1
 800c548:	d10c      	bne.n	800c564 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	2200      	movs	r2, #0
 800c54e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c552:	6878      	ldr	r0, [r7, #4]
 800c554:	f000 f91c 	bl	800c790 <USBD_CtlSendStatus>
      }
      break;
 800c558:	e004      	b.n	800c564 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c55a:	6839      	ldr	r1, [r7, #0]
 800c55c:	6878      	ldr	r0, [r7, #4]
 800c55e:	f000 f840 	bl	800c5e2 <USBD_CtlError>
      break;
 800c562:	e000      	b.n	800c566 <USBD_ClrFeature+0x3c>
      break;
 800c564:	bf00      	nop
  }
}
 800c566:	bf00      	nop
 800c568:	3708      	adds	r7, #8
 800c56a:	46bd      	mov	sp, r7
 800c56c:	bd80      	pop	{r7, pc}

0800c56e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c56e:	b580      	push	{r7, lr}
 800c570:	b084      	sub	sp, #16
 800c572:	af00      	add	r7, sp, #0
 800c574:	6078      	str	r0, [r7, #4]
 800c576:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c578:	683b      	ldr	r3, [r7, #0]
 800c57a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	781a      	ldrb	r2, [r3, #0]
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	3301      	adds	r3, #1
 800c588:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	781a      	ldrb	r2, [r3, #0]
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	3301      	adds	r3, #1
 800c596:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c598:	68f8      	ldr	r0, [r7, #12]
 800c59a:	f7ff fa40 	bl	800ba1e <SWAPBYTE>
 800c59e:	4603      	mov	r3, r0
 800c5a0:	461a      	mov	r2, r3
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	3301      	adds	r3, #1
 800c5aa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	3301      	adds	r3, #1
 800c5b0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c5b2:	68f8      	ldr	r0, [r7, #12]
 800c5b4:	f7ff fa33 	bl	800ba1e <SWAPBYTE>
 800c5b8:	4603      	mov	r3, r0
 800c5ba:	461a      	mov	r2, r3
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	3301      	adds	r3, #1
 800c5c4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	3301      	adds	r3, #1
 800c5ca:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c5cc:	68f8      	ldr	r0, [r7, #12]
 800c5ce:	f7ff fa26 	bl	800ba1e <SWAPBYTE>
 800c5d2:	4603      	mov	r3, r0
 800c5d4:	461a      	mov	r2, r3
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	80da      	strh	r2, [r3, #6]
}
 800c5da:	bf00      	nop
 800c5dc:	3710      	adds	r7, #16
 800c5de:	46bd      	mov	sp, r7
 800c5e0:	bd80      	pop	{r7, pc}

0800c5e2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c5e2:	b580      	push	{r7, lr}
 800c5e4:	b082      	sub	sp, #8
 800c5e6:	af00      	add	r7, sp, #0
 800c5e8:	6078      	str	r0, [r7, #4]
 800c5ea:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c5ec:	2180      	movs	r1, #128	@ 0x80
 800c5ee:	6878      	ldr	r0, [r7, #4]
 800c5f0:	f000 fcd4 	bl	800cf9c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c5f4:	2100      	movs	r1, #0
 800c5f6:	6878      	ldr	r0, [r7, #4]
 800c5f8:	f000 fcd0 	bl	800cf9c <USBD_LL_StallEP>
}
 800c5fc:	bf00      	nop
 800c5fe:	3708      	adds	r7, #8
 800c600:	46bd      	mov	sp, r7
 800c602:	bd80      	pop	{r7, pc}

0800c604 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c604:	b580      	push	{r7, lr}
 800c606:	b086      	sub	sp, #24
 800c608:	af00      	add	r7, sp, #0
 800c60a:	60f8      	str	r0, [r7, #12]
 800c60c:	60b9      	str	r1, [r7, #8]
 800c60e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c610:	2300      	movs	r3, #0
 800c612:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	2b00      	cmp	r3, #0
 800c618:	d042      	beq.n	800c6a0 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800c61e:	6938      	ldr	r0, [r7, #16]
 800c620:	f000 f842 	bl	800c6a8 <USBD_GetLen>
 800c624:	4603      	mov	r3, r0
 800c626:	3301      	adds	r3, #1
 800c628:	005b      	lsls	r3, r3, #1
 800c62a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c62e:	d808      	bhi.n	800c642 <USBD_GetString+0x3e>
 800c630:	6938      	ldr	r0, [r7, #16]
 800c632:	f000 f839 	bl	800c6a8 <USBD_GetLen>
 800c636:	4603      	mov	r3, r0
 800c638:	3301      	adds	r3, #1
 800c63a:	b29b      	uxth	r3, r3
 800c63c:	005b      	lsls	r3, r3, #1
 800c63e:	b29a      	uxth	r2, r3
 800c640:	e001      	b.n	800c646 <USBD_GetString+0x42>
 800c642:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c64a:	7dfb      	ldrb	r3, [r7, #23]
 800c64c:	68ba      	ldr	r2, [r7, #8]
 800c64e:	4413      	add	r3, r2
 800c650:	687a      	ldr	r2, [r7, #4]
 800c652:	7812      	ldrb	r2, [r2, #0]
 800c654:	701a      	strb	r2, [r3, #0]
  idx++;
 800c656:	7dfb      	ldrb	r3, [r7, #23]
 800c658:	3301      	adds	r3, #1
 800c65a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c65c:	7dfb      	ldrb	r3, [r7, #23]
 800c65e:	68ba      	ldr	r2, [r7, #8]
 800c660:	4413      	add	r3, r2
 800c662:	2203      	movs	r2, #3
 800c664:	701a      	strb	r2, [r3, #0]
  idx++;
 800c666:	7dfb      	ldrb	r3, [r7, #23]
 800c668:	3301      	adds	r3, #1
 800c66a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c66c:	e013      	b.n	800c696 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800c66e:	7dfb      	ldrb	r3, [r7, #23]
 800c670:	68ba      	ldr	r2, [r7, #8]
 800c672:	4413      	add	r3, r2
 800c674:	693a      	ldr	r2, [r7, #16]
 800c676:	7812      	ldrb	r2, [r2, #0]
 800c678:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c67a:	693b      	ldr	r3, [r7, #16]
 800c67c:	3301      	adds	r3, #1
 800c67e:	613b      	str	r3, [r7, #16]
    idx++;
 800c680:	7dfb      	ldrb	r3, [r7, #23]
 800c682:	3301      	adds	r3, #1
 800c684:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c686:	7dfb      	ldrb	r3, [r7, #23]
 800c688:	68ba      	ldr	r2, [r7, #8]
 800c68a:	4413      	add	r3, r2
 800c68c:	2200      	movs	r2, #0
 800c68e:	701a      	strb	r2, [r3, #0]
    idx++;
 800c690:	7dfb      	ldrb	r3, [r7, #23]
 800c692:	3301      	adds	r3, #1
 800c694:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c696:	693b      	ldr	r3, [r7, #16]
 800c698:	781b      	ldrb	r3, [r3, #0]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d1e7      	bne.n	800c66e <USBD_GetString+0x6a>
 800c69e:	e000      	b.n	800c6a2 <USBD_GetString+0x9e>
    return;
 800c6a0:	bf00      	nop
  }
}
 800c6a2:	3718      	adds	r7, #24
 800c6a4:	46bd      	mov	sp, r7
 800c6a6:	bd80      	pop	{r7, pc}

0800c6a8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c6a8:	b480      	push	{r7}
 800c6aa:	b085      	sub	sp, #20
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c6b0:	2300      	movs	r3, #0
 800c6b2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c6b8:	e005      	b.n	800c6c6 <USBD_GetLen+0x1e>
  {
    len++;
 800c6ba:	7bfb      	ldrb	r3, [r7, #15]
 800c6bc:	3301      	adds	r3, #1
 800c6be:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c6c0:	68bb      	ldr	r3, [r7, #8]
 800c6c2:	3301      	adds	r3, #1
 800c6c4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c6c6:	68bb      	ldr	r3, [r7, #8]
 800c6c8:	781b      	ldrb	r3, [r3, #0]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d1f5      	bne.n	800c6ba <USBD_GetLen+0x12>
  }

  return len;
 800c6ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	3714      	adds	r7, #20
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6da:	4770      	bx	lr

0800c6dc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	b084      	sub	sp, #16
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	60f8      	str	r0, [r7, #12]
 800c6e4:	60b9      	str	r1, [r7, #8]
 800c6e6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	2202      	movs	r2, #2
 800c6ec:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	687a      	ldr	r2, [r7, #4]
 800c6f4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	687a      	ldr	r2, [r7, #4]
 800c6fa:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	68ba      	ldr	r2, [r7, #8]
 800c700:	2100      	movs	r1, #0
 800c702:	68f8      	ldr	r0, [r7, #12]
 800c704:	f000 fcd3 	bl	800d0ae <USBD_LL_Transmit>

  return USBD_OK;
 800c708:	2300      	movs	r3, #0
}
 800c70a:	4618      	mov	r0, r3
 800c70c:	3710      	adds	r7, #16
 800c70e:	46bd      	mov	sp, r7
 800c710:	bd80      	pop	{r7, pc}

0800c712 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c712:	b580      	push	{r7, lr}
 800c714:	b084      	sub	sp, #16
 800c716:	af00      	add	r7, sp, #0
 800c718:	60f8      	str	r0, [r7, #12]
 800c71a:	60b9      	str	r1, [r7, #8]
 800c71c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	68ba      	ldr	r2, [r7, #8]
 800c722:	2100      	movs	r1, #0
 800c724:	68f8      	ldr	r0, [r7, #12]
 800c726:	f000 fcc2 	bl	800d0ae <USBD_LL_Transmit>

  return USBD_OK;
 800c72a:	2300      	movs	r3, #0
}
 800c72c:	4618      	mov	r0, r3
 800c72e:	3710      	adds	r7, #16
 800c730:	46bd      	mov	sp, r7
 800c732:	bd80      	pop	{r7, pc}

0800c734 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c734:	b580      	push	{r7, lr}
 800c736:	b084      	sub	sp, #16
 800c738:	af00      	add	r7, sp, #0
 800c73a:	60f8      	str	r0, [r7, #12]
 800c73c:	60b9      	str	r1, [r7, #8]
 800c73e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	2203      	movs	r2, #3
 800c744:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	687a      	ldr	r2, [r7, #4]
 800c74c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	687a      	ldr	r2, [r7, #4]
 800c754:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	68ba      	ldr	r2, [r7, #8]
 800c75c:	2100      	movs	r1, #0
 800c75e:	68f8      	ldr	r0, [r7, #12]
 800c760:	f000 fcc6 	bl	800d0f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c764:	2300      	movs	r3, #0
}
 800c766:	4618      	mov	r0, r3
 800c768:	3710      	adds	r7, #16
 800c76a:	46bd      	mov	sp, r7
 800c76c:	bd80      	pop	{r7, pc}

0800c76e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c76e:	b580      	push	{r7, lr}
 800c770:	b084      	sub	sp, #16
 800c772:	af00      	add	r7, sp, #0
 800c774:	60f8      	str	r0, [r7, #12]
 800c776:	60b9      	str	r1, [r7, #8]
 800c778:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	68ba      	ldr	r2, [r7, #8]
 800c77e:	2100      	movs	r1, #0
 800c780:	68f8      	ldr	r0, [r7, #12]
 800c782:	f000 fcb5 	bl	800d0f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c786:	2300      	movs	r3, #0
}
 800c788:	4618      	mov	r0, r3
 800c78a:	3710      	adds	r7, #16
 800c78c:	46bd      	mov	sp, r7
 800c78e:	bd80      	pop	{r7, pc}

0800c790 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c790:	b580      	push	{r7, lr}
 800c792:	b082      	sub	sp, #8
 800c794:	af00      	add	r7, sp, #0
 800c796:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	2204      	movs	r2, #4
 800c79c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c7a0:	2300      	movs	r3, #0
 800c7a2:	2200      	movs	r2, #0
 800c7a4:	2100      	movs	r1, #0
 800c7a6:	6878      	ldr	r0, [r7, #4]
 800c7a8:	f000 fc81 	bl	800d0ae <USBD_LL_Transmit>

  return USBD_OK;
 800c7ac:	2300      	movs	r3, #0
}
 800c7ae:	4618      	mov	r0, r3
 800c7b0:	3708      	adds	r7, #8
 800c7b2:	46bd      	mov	sp, r7
 800c7b4:	bd80      	pop	{r7, pc}

0800c7b6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c7b6:	b580      	push	{r7, lr}
 800c7b8:	b082      	sub	sp, #8
 800c7ba:	af00      	add	r7, sp, #0
 800c7bc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	2205      	movs	r2, #5
 800c7c2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c7c6:	2300      	movs	r3, #0
 800c7c8:	2200      	movs	r2, #0
 800c7ca:	2100      	movs	r1, #0
 800c7cc:	6878      	ldr	r0, [r7, #4]
 800c7ce:	f000 fc8f 	bl	800d0f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c7d2:	2300      	movs	r3, #0
}
 800c7d4:	4618      	mov	r0, r3
 800c7d6:	3708      	adds	r7, #8
 800c7d8:	46bd      	mov	sp, r7
 800c7da:	bd80      	pop	{r7, pc}

0800c7dc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c7dc:	b580      	push	{r7, lr}
 800c7de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c7e0:	2200      	movs	r2, #0
 800c7e2:	4912      	ldr	r1, [pc, #72]	@ (800c82c <MX_USB_DEVICE_Init+0x50>)
 800c7e4:	4812      	ldr	r0, [pc, #72]	@ (800c830 <MX_USB_DEVICE_Init+0x54>)
 800c7e6:	f7fe fcf7 	bl	800b1d8 <USBD_Init>
 800c7ea:	4603      	mov	r3, r0
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d001      	beq.n	800c7f4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c7f0:	f7f5 f9ba 	bl	8001b68 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c7f4:	490f      	ldr	r1, [pc, #60]	@ (800c834 <MX_USB_DEVICE_Init+0x58>)
 800c7f6:	480e      	ldr	r0, [pc, #56]	@ (800c830 <MX_USB_DEVICE_Init+0x54>)
 800c7f8:	f7fe fd1e 	bl	800b238 <USBD_RegisterClass>
 800c7fc:	4603      	mov	r3, r0
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d001      	beq.n	800c806 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c802:	f7f5 f9b1 	bl	8001b68 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c806:	490c      	ldr	r1, [pc, #48]	@ (800c838 <MX_USB_DEVICE_Init+0x5c>)
 800c808:	4809      	ldr	r0, [pc, #36]	@ (800c830 <MX_USB_DEVICE_Init+0x54>)
 800c80a:	f7fe fc55 	bl	800b0b8 <USBD_CDC_RegisterInterface>
 800c80e:	4603      	mov	r3, r0
 800c810:	2b00      	cmp	r3, #0
 800c812:	d001      	beq.n	800c818 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c814:	f7f5 f9a8 	bl	8001b68 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c818:	4805      	ldr	r0, [pc, #20]	@ (800c830 <MX_USB_DEVICE_Init+0x54>)
 800c81a:	f7fe fd43 	bl	800b2a4 <USBD_Start>
 800c81e:	4603      	mov	r3, r0
 800c820:	2b00      	cmp	r3, #0
 800c822:	d001      	beq.n	800c828 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c824:	f7f5 f9a0 	bl	8001b68 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c828:	bf00      	nop
 800c82a:	bd80      	pop	{r7, pc}
 800c82c:	200000b0 	.word	0x200000b0
 800c830:	200007bc 	.word	0x200007bc
 800c834:	2000001c 	.word	0x2000001c
 800c838:	2000009c 	.word	0x2000009c

0800c83c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c83c:	b580      	push	{r7, lr}
 800c83e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c840:	2200      	movs	r2, #0
 800c842:	4905      	ldr	r1, [pc, #20]	@ (800c858 <CDC_Init_FS+0x1c>)
 800c844:	4805      	ldr	r0, [pc, #20]	@ (800c85c <CDC_Init_FS+0x20>)
 800c846:	f7fe fc51 	bl	800b0ec <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c84a:	4905      	ldr	r1, [pc, #20]	@ (800c860 <CDC_Init_FS+0x24>)
 800c84c:	4803      	ldr	r0, [pc, #12]	@ (800c85c <CDC_Init_FS+0x20>)
 800c84e:	f7fe fc6f 	bl	800b130 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c852:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c854:	4618      	mov	r0, r3
 800c856:	bd80      	pop	{r7, pc}
 800c858:	20001298 	.word	0x20001298
 800c85c:	200007bc 	.word	0x200007bc
 800c860:	20000a98 	.word	0x20000a98

0800c864 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c864:	b480      	push	{r7}
 800c866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c868:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c86a:	4618      	mov	r0, r3
 800c86c:	46bd      	mov	sp, r7
 800c86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c872:	4770      	bx	lr

0800c874 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c874:	b480      	push	{r7}
 800c876:	b083      	sub	sp, #12
 800c878:	af00      	add	r7, sp, #0
 800c87a:	4603      	mov	r3, r0
 800c87c:	6039      	str	r1, [r7, #0]
 800c87e:	71fb      	strb	r3, [r7, #7]
 800c880:	4613      	mov	r3, r2
 800c882:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c884:	79fb      	ldrb	r3, [r7, #7]
 800c886:	2b23      	cmp	r3, #35	@ 0x23
 800c888:	d84a      	bhi.n	800c920 <CDC_Control_FS+0xac>
 800c88a:	a201      	add	r2, pc, #4	@ (adr r2, 800c890 <CDC_Control_FS+0x1c>)
 800c88c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c890:	0800c921 	.word	0x0800c921
 800c894:	0800c921 	.word	0x0800c921
 800c898:	0800c921 	.word	0x0800c921
 800c89c:	0800c921 	.word	0x0800c921
 800c8a0:	0800c921 	.word	0x0800c921
 800c8a4:	0800c921 	.word	0x0800c921
 800c8a8:	0800c921 	.word	0x0800c921
 800c8ac:	0800c921 	.word	0x0800c921
 800c8b0:	0800c921 	.word	0x0800c921
 800c8b4:	0800c921 	.word	0x0800c921
 800c8b8:	0800c921 	.word	0x0800c921
 800c8bc:	0800c921 	.word	0x0800c921
 800c8c0:	0800c921 	.word	0x0800c921
 800c8c4:	0800c921 	.word	0x0800c921
 800c8c8:	0800c921 	.word	0x0800c921
 800c8cc:	0800c921 	.word	0x0800c921
 800c8d0:	0800c921 	.word	0x0800c921
 800c8d4:	0800c921 	.word	0x0800c921
 800c8d8:	0800c921 	.word	0x0800c921
 800c8dc:	0800c921 	.word	0x0800c921
 800c8e0:	0800c921 	.word	0x0800c921
 800c8e4:	0800c921 	.word	0x0800c921
 800c8e8:	0800c921 	.word	0x0800c921
 800c8ec:	0800c921 	.word	0x0800c921
 800c8f0:	0800c921 	.word	0x0800c921
 800c8f4:	0800c921 	.word	0x0800c921
 800c8f8:	0800c921 	.word	0x0800c921
 800c8fc:	0800c921 	.word	0x0800c921
 800c900:	0800c921 	.word	0x0800c921
 800c904:	0800c921 	.word	0x0800c921
 800c908:	0800c921 	.word	0x0800c921
 800c90c:	0800c921 	.word	0x0800c921
 800c910:	0800c921 	.word	0x0800c921
 800c914:	0800c921 	.word	0x0800c921
 800c918:	0800c921 	.word	0x0800c921
 800c91c:	0800c921 	.word	0x0800c921
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c920:	bf00      	nop
  }

  return (USBD_OK);
 800c922:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c924:	4618      	mov	r0, r3
 800c926:	370c      	adds	r7, #12
 800c928:	46bd      	mov	sp, r7
 800c92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c92e:	4770      	bx	lr

0800c930 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c930:	b580      	push	{r7, lr}
 800c932:	b082      	sub	sp, #8
 800c934:	af00      	add	r7, sp, #0
 800c936:	6078      	str	r0, [r7, #4]
 800c938:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c93a:	6879      	ldr	r1, [r7, #4]
 800c93c:	4805      	ldr	r0, [pc, #20]	@ (800c954 <CDC_Receive_FS+0x24>)
 800c93e:	f7fe fbf7 	bl	800b130 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c942:	4804      	ldr	r0, [pc, #16]	@ (800c954 <CDC_Receive_FS+0x24>)
 800c944:	f7fe fc12 	bl	800b16c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c948:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c94a:	4618      	mov	r0, r3
 800c94c:	3708      	adds	r7, #8
 800c94e:	46bd      	mov	sp, r7
 800c950:	bd80      	pop	{r7, pc}
 800c952:	bf00      	nop
 800c954:	200007bc 	.word	0x200007bc

0800c958 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800c958:	b480      	push	{r7}
 800c95a:	b087      	sub	sp, #28
 800c95c:	af00      	add	r7, sp, #0
 800c95e:	60f8      	str	r0, [r7, #12]
 800c960:	60b9      	str	r1, [r7, #8]
 800c962:	4613      	mov	r3, r2
 800c964:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800c966:	2300      	movs	r3, #0
 800c968:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800c96a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c96e:	4618      	mov	r0, r3
 800c970:	371c      	adds	r7, #28
 800c972:	46bd      	mov	sp, r7
 800c974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c978:	4770      	bx	lr
	...

0800c97c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c97c:	b480      	push	{r7}
 800c97e:	b083      	sub	sp, #12
 800c980:	af00      	add	r7, sp, #0
 800c982:	4603      	mov	r3, r0
 800c984:	6039      	str	r1, [r7, #0]
 800c986:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c988:	683b      	ldr	r3, [r7, #0]
 800c98a:	2212      	movs	r2, #18
 800c98c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c98e:	4b03      	ldr	r3, [pc, #12]	@ (800c99c <USBD_FS_DeviceDescriptor+0x20>)
}
 800c990:	4618      	mov	r0, r3
 800c992:	370c      	adds	r7, #12
 800c994:	46bd      	mov	sp, r7
 800c996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c99a:	4770      	bx	lr
 800c99c:	200000cc 	.word	0x200000cc

0800c9a0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c9a0:	b480      	push	{r7}
 800c9a2:	b083      	sub	sp, #12
 800c9a4:	af00      	add	r7, sp, #0
 800c9a6:	4603      	mov	r3, r0
 800c9a8:	6039      	str	r1, [r7, #0]
 800c9aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c9ac:	683b      	ldr	r3, [r7, #0]
 800c9ae:	2204      	movs	r2, #4
 800c9b0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c9b2:	4b03      	ldr	r3, [pc, #12]	@ (800c9c0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c9b4:	4618      	mov	r0, r3
 800c9b6:	370c      	adds	r7, #12
 800c9b8:	46bd      	mov	sp, r7
 800c9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9be:	4770      	bx	lr
 800c9c0:	200000e0 	.word	0x200000e0

0800c9c4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c9c4:	b580      	push	{r7, lr}
 800c9c6:	b082      	sub	sp, #8
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	4603      	mov	r3, r0
 800c9cc:	6039      	str	r1, [r7, #0]
 800c9ce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c9d0:	79fb      	ldrb	r3, [r7, #7]
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d105      	bne.n	800c9e2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c9d6:	683a      	ldr	r2, [r7, #0]
 800c9d8:	4907      	ldr	r1, [pc, #28]	@ (800c9f8 <USBD_FS_ProductStrDescriptor+0x34>)
 800c9da:	4808      	ldr	r0, [pc, #32]	@ (800c9fc <USBD_FS_ProductStrDescriptor+0x38>)
 800c9dc:	f7ff fe12 	bl	800c604 <USBD_GetString>
 800c9e0:	e004      	b.n	800c9ec <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c9e2:	683a      	ldr	r2, [r7, #0]
 800c9e4:	4904      	ldr	r1, [pc, #16]	@ (800c9f8 <USBD_FS_ProductStrDescriptor+0x34>)
 800c9e6:	4805      	ldr	r0, [pc, #20]	@ (800c9fc <USBD_FS_ProductStrDescriptor+0x38>)
 800c9e8:	f7ff fe0c 	bl	800c604 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c9ec:	4b02      	ldr	r3, [pc, #8]	@ (800c9f8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c9ee:	4618      	mov	r0, r3
 800c9f0:	3708      	adds	r7, #8
 800c9f2:	46bd      	mov	sp, r7
 800c9f4:	bd80      	pop	{r7, pc}
 800c9f6:	bf00      	nop
 800c9f8:	20001a98 	.word	0x20001a98
 800c9fc:	08010408 	.word	0x08010408

0800ca00 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ca00:	b580      	push	{r7, lr}
 800ca02:	b082      	sub	sp, #8
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	4603      	mov	r3, r0
 800ca08:	6039      	str	r1, [r7, #0]
 800ca0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ca0c:	683a      	ldr	r2, [r7, #0]
 800ca0e:	4904      	ldr	r1, [pc, #16]	@ (800ca20 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ca10:	4804      	ldr	r0, [pc, #16]	@ (800ca24 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ca12:	f7ff fdf7 	bl	800c604 <USBD_GetString>
  return USBD_StrDesc;
 800ca16:	4b02      	ldr	r3, [pc, #8]	@ (800ca20 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ca18:	4618      	mov	r0, r3
 800ca1a:	3708      	adds	r7, #8
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	bd80      	pop	{r7, pc}
 800ca20:	20001a98 	.word	0x20001a98
 800ca24:	08010420 	.word	0x08010420

0800ca28 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ca28:	b580      	push	{r7, lr}
 800ca2a:	b082      	sub	sp, #8
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	4603      	mov	r3, r0
 800ca30:	6039      	str	r1, [r7, #0]
 800ca32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ca34:	683b      	ldr	r3, [r7, #0]
 800ca36:	221a      	movs	r2, #26
 800ca38:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ca3a:	f000 f843 	bl	800cac4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ca3e:	4b02      	ldr	r3, [pc, #8]	@ (800ca48 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ca40:	4618      	mov	r0, r3
 800ca42:	3708      	adds	r7, #8
 800ca44:	46bd      	mov	sp, r7
 800ca46:	bd80      	pop	{r7, pc}
 800ca48:	200000e4 	.word	0x200000e4

0800ca4c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ca4c:	b580      	push	{r7, lr}
 800ca4e:	b082      	sub	sp, #8
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	4603      	mov	r3, r0
 800ca54:	6039      	str	r1, [r7, #0]
 800ca56:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ca58:	79fb      	ldrb	r3, [r7, #7]
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d105      	bne.n	800ca6a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ca5e:	683a      	ldr	r2, [r7, #0]
 800ca60:	4907      	ldr	r1, [pc, #28]	@ (800ca80 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ca62:	4808      	ldr	r0, [pc, #32]	@ (800ca84 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ca64:	f7ff fdce 	bl	800c604 <USBD_GetString>
 800ca68:	e004      	b.n	800ca74 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ca6a:	683a      	ldr	r2, [r7, #0]
 800ca6c:	4904      	ldr	r1, [pc, #16]	@ (800ca80 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ca6e:	4805      	ldr	r0, [pc, #20]	@ (800ca84 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ca70:	f7ff fdc8 	bl	800c604 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ca74:	4b02      	ldr	r3, [pc, #8]	@ (800ca80 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ca76:	4618      	mov	r0, r3
 800ca78:	3708      	adds	r7, #8
 800ca7a:	46bd      	mov	sp, r7
 800ca7c:	bd80      	pop	{r7, pc}
 800ca7e:	bf00      	nop
 800ca80:	20001a98 	.word	0x20001a98
 800ca84:	08010434 	.word	0x08010434

0800ca88 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ca88:	b580      	push	{r7, lr}
 800ca8a:	b082      	sub	sp, #8
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	4603      	mov	r3, r0
 800ca90:	6039      	str	r1, [r7, #0]
 800ca92:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ca94:	79fb      	ldrb	r3, [r7, #7]
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d105      	bne.n	800caa6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ca9a:	683a      	ldr	r2, [r7, #0]
 800ca9c:	4907      	ldr	r1, [pc, #28]	@ (800cabc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ca9e:	4808      	ldr	r0, [pc, #32]	@ (800cac0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800caa0:	f7ff fdb0 	bl	800c604 <USBD_GetString>
 800caa4:	e004      	b.n	800cab0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800caa6:	683a      	ldr	r2, [r7, #0]
 800caa8:	4904      	ldr	r1, [pc, #16]	@ (800cabc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800caaa:	4805      	ldr	r0, [pc, #20]	@ (800cac0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800caac:	f7ff fdaa 	bl	800c604 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cab0:	4b02      	ldr	r3, [pc, #8]	@ (800cabc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800cab2:	4618      	mov	r0, r3
 800cab4:	3708      	adds	r7, #8
 800cab6:	46bd      	mov	sp, r7
 800cab8:	bd80      	pop	{r7, pc}
 800caba:	bf00      	nop
 800cabc:	20001a98 	.word	0x20001a98
 800cac0:	08010440 	.word	0x08010440

0800cac4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800cac4:	b580      	push	{r7, lr}
 800cac6:	b084      	sub	sp, #16
 800cac8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800caca:	4b0f      	ldr	r3, [pc, #60]	@ (800cb08 <Get_SerialNum+0x44>)
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cad0:	4b0e      	ldr	r3, [pc, #56]	@ (800cb0c <Get_SerialNum+0x48>)
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cad6:	4b0e      	ldr	r3, [pc, #56]	@ (800cb10 <Get_SerialNum+0x4c>)
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cadc:	68fa      	ldr	r2, [r7, #12]
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	4413      	add	r3, r2
 800cae2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d009      	beq.n	800cafe <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800caea:	2208      	movs	r2, #8
 800caec:	4909      	ldr	r1, [pc, #36]	@ (800cb14 <Get_SerialNum+0x50>)
 800caee:	68f8      	ldr	r0, [r7, #12]
 800caf0:	f000 f814 	bl	800cb1c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800caf4:	2204      	movs	r2, #4
 800caf6:	4908      	ldr	r1, [pc, #32]	@ (800cb18 <Get_SerialNum+0x54>)
 800caf8:	68b8      	ldr	r0, [r7, #8]
 800cafa:	f000 f80f 	bl	800cb1c <IntToUnicode>
  }
}
 800cafe:	bf00      	nop
 800cb00:	3710      	adds	r7, #16
 800cb02:	46bd      	mov	sp, r7
 800cb04:	bd80      	pop	{r7, pc}
 800cb06:	bf00      	nop
 800cb08:	1fff7a10 	.word	0x1fff7a10
 800cb0c:	1fff7a14 	.word	0x1fff7a14
 800cb10:	1fff7a18 	.word	0x1fff7a18
 800cb14:	200000e6 	.word	0x200000e6
 800cb18:	200000f6 	.word	0x200000f6

0800cb1c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cb1c:	b480      	push	{r7}
 800cb1e:	b087      	sub	sp, #28
 800cb20:	af00      	add	r7, sp, #0
 800cb22:	60f8      	str	r0, [r7, #12]
 800cb24:	60b9      	str	r1, [r7, #8]
 800cb26:	4613      	mov	r3, r2
 800cb28:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800cb2e:	2300      	movs	r3, #0
 800cb30:	75fb      	strb	r3, [r7, #23]
 800cb32:	e027      	b.n	800cb84 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	0f1b      	lsrs	r3, r3, #28
 800cb38:	2b09      	cmp	r3, #9
 800cb3a:	d80b      	bhi.n	800cb54 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	0f1b      	lsrs	r3, r3, #28
 800cb40:	b2da      	uxtb	r2, r3
 800cb42:	7dfb      	ldrb	r3, [r7, #23]
 800cb44:	005b      	lsls	r3, r3, #1
 800cb46:	4619      	mov	r1, r3
 800cb48:	68bb      	ldr	r3, [r7, #8]
 800cb4a:	440b      	add	r3, r1
 800cb4c:	3230      	adds	r2, #48	@ 0x30
 800cb4e:	b2d2      	uxtb	r2, r2
 800cb50:	701a      	strb	r2, [r3, #0]
 800cb52:	e00a      	b.n	800cb6a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	0f1b      	lsrs	r3, r3, #28
 800cb58:	b2da      	uxtb	r2, r3
 800cb5a:	7dfb      	ldrb	r3, [r7, #23]
 800cb5c:	005b      	lsls	r3, r3, #1
 800cb5e:	4619      	mov	r1, r3
 800cb60:	68bb      	ldr	r3, [r7, #8]
 800cb62:	440b      	add	r3, r1
 800cb64:	3237      	adds	r2, #55	@ 0x37
 800cb66:	b2d2      	uxtb	r2, r2
 800cb68:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	011b      	lsls	r3, r3, #4
 800cb6e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800cb70:	7dfb      	ldrb	r3, [r7, #23]
 800cb72:	005b      	lsls	r3, r3, #1
 800cb74:	3301      	adds	r3, #1
 800cb76:	68ba      	ldr	r2, [r7, #8]
 800cb78:	4413      	add	r3, r2
 800cb7a:	2200      	movs	r2, #0
 800cb7c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800cb7e:	7dfb      	ldrb	r3, [r7, #23]
 800cb80:	3301      	adds	r3, #1
 800cb82:	75fb      	strb	r3, [r7, #23]
 800cb84:	7dfa      	ldrb	r2, [r7, #23]
 800cb86:	79fb      	ldrb	r3, [r7, #7]
 800cb88:	429a      	cmp	r2, r3
 800cb8a:	d3d3      	bcc.n	800cb34 <IntToUnicode+0x18>
  }
}
 800cb8c:	bf00      	nop
 800cb8e:	bf00      	nop
 800cb90:	371c      	adds	r7, #28
 800cb92:	46bd      	mov	sp, r7
 800cb94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb98:	4770      	bx	lr
	...

0800cb9c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800cb9c:	b580      	push	{r7, lr}
 800cb9e:	b08a      	sub	sp, #40	@ 0x28
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cba4:	f107 0314 	add.w	r3, r7, #20
 800cba8:	2200      	movs	r2, #0
 800cbaa:	601a      	str	r2, [r3, #0]
 800cbac:	605a      	str	r2, [r3, #4]
 800cbae:	609a      	str	r2, [r3, #8]
 800cbb0:	60da      	str	r2, [r3, #12]
 800cbb2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800cbbc:	d147      	bne.n	800cc4e <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	613b      	str	r3, [r7, #16]
 800cbc2:	4b25      	ldr	r3, [pc, #148]	@ (800cc58 <HAL_PCD_MspInit+0xbc>)
 800cbc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cbc6:	4a24      	ldr	r2, [pc, #144]	@ (800cc58 <HAL_PCD_MspInit+0xbc>)
 800cbc8:	f043 0301 	orr.w	r3, r3, #1
 800cbcc:	6313      	str	r3, [r2, #48]	@ 0x30
 800cbce:	4b22      	ldr	r3, [pc, #136]	@ (800cc58 <HAL_PCD_MspInit+0xbc>)
 800cbd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cbd2:	f003 0301 	and.w	r3, r3, #1
 800cbd6:	613b      	str	r3, [r7, #16]
 800cbd8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800cbda:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800cbde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800cbe0:	2300      	movs	r3, #0
 800cbe2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cbe4:	2300      	movs	r3, #0
 800cbe6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800cbe8:	f107 0314 	add.w	r3, r7, #20
 800cbec:	4619      	mov	r1, r3
 800cbee:	481b      	ldr	r0, [pc, #108]	@ (800cc5c <HAL_PCD_MspInit+0xc0>)
 800cbf0:	f7f7 f926 	bl	8003e40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800cbf4:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800cbf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cbfa:	2302      	movs	r3, #2
 800cbfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cbfe:	2300      	movs	r3, #0
 800cc00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cc02:	2300      	movs	r3, #0
 800cc04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800cc06:	230a      	movs	r3, #10
 800cc08:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cc0a:	f107 0314 	add.w	r3, r7, #20
 800cc0e:	4619      	mov	r1, r3
 800cc10:	4812      	ldr	r0, [pc, #72]	@ (800cc5c <HAL_PCD_MspInit+0xc0>)
 800cc12:	f7f7 f915 	bl	8003e40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800cc16:	4b10      	ldr	r3, [pc, #64]	@ (800cc58 <HAL_PCD_MspInit+0xbc>)
 800cc18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc1a:	4a0f      	ldr	r2, [pc, #60]	@ (800cc58 <HAL_PCD_MspInit+0xbc>)
 800cc1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cc20:	6353      	str	r3, [r2, #52]	@ 0x34
 800cc22:	2300      	movs	r3, #0
 800cc24:	60fb      	str	r3, [r7, #12]
 800cc26:	4b0c      	ldr	r3, [pc, #48]	@ (800cc58 <HAL_PCD_MspInit+0xbc>)
 800cc28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cc2a:	4a0b      	ldr	r2, [pc, #44]	@ (800cc58 <HAL_PCD_MspInit+0xbc>)
 800cc2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800cc30:	6453      	str	r3, [r2, #68]	@ 0x44
 800cc32:	4b09      	ldr	r3, [pc, #36]	@ (800cc58 <HAL_PCD_MspInit+0xbc>)
 800cc34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cc36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cc3a:	60fb      	str	r3, [r7, #12]
 800cc3c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800cc3e:	2200      	movs	r2, #0
 800cc40:	2100      	movs	r1, #0
 800cc42:	2043      	movs	r0, #67	@ 0x43
 800cc44:	f7f6 fd55 	bl	80036f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800cc48:	2043      	movs	r0, #67	@ 0x43
 800cc4a:	f7f6 fd6e 	bl	800372a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800cc4e:	bf00      	nop
 800cc50:	3728      	adds	r7, #40	@ 0x28
 800cc52:	46bd      	mov	sp, r7
 800cc54:	bd80      	pop	{r7, pc}
 800cc56:	bf00      	nop
 800cc58:	40023800 	.word	0x40023800
 800cc5c:	40020000 	.word	0x40020000

0800cc60 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc60:	b580      	push	{r7, lr}
 800cc62:	b082      	sub	sp, #8
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800cc74:	4619      	mov	r1, r3
 800cc76:	4610      	mov	r0, r2
 800cc78:	f7fe fb61 	bl	800b33e <USBD_LL_SetupStage>
}
 800cc7c:	bf00      	nop
 800cc7e:	3708      	adds	r7, #8
 800cc80:	46bd      	mov	sp, r7
 800cc82:	bd80      	pop	{r7, pc}

0800cc84 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc84:	b580      	push	{r7, lr}
 800cc86:	b082      	sub	sp, #8
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	6078      	str	r0, [r7, #4]
 800cc8c:	460b      	mov	r3, r1
 800cc8e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800cc96:	78fa      	ldrb	r2, [r7, #3]
 800cc98:	6879      	ldr	r1, [r7, #4]
 800cc9a:	4613      	mov	r3, r2
 800cc9c:	00db      	lsls	r3, r3, #3
 800cc9e:	4413      	add	r3, r2
 800cca0:	009b      	lsls	r3, r3, #2
 800cca2:	440b      	add	r3, r1
 800cca4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800cca8:	681a      	ldr	r2, [r3, #0]
 800ccaa:	78fb      	ldrb	r3, [r7, #3]
 800ccac:	4619      	mov	r1, r3
 800ccae:	f7fe fb9b 	bl	800b3e8 <USBD_LL_DataOutStage>
}
 800ccb2:	bf00      	nop
 800ccb4:	3708      	adds	r7, #8
 800ccb6:	46bd      	mov	sp, r7
 800ccb8:	bd80      	pop	{r7, pc}

0800ccba <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ccba:	b580      	push	{r7, lr}
 800ccbc:	b082      	sub	sp, #8
 800ccbe:	af00      	add	r7, sp, #0
 800ccc0:	6078      	str	r0, [r7, #4]
 800ccc2:	460b      	mov	r3, r1
 800ccc4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800cccc:	78fa      	ldrb	r2, [r7, #3]
 800ccce:	6879      	ldr	r1, [r7, #4]
 800ccd0:	4613      	mov	r3, r2
 800ccd2:	00db      	lsls	r3, r3, #3
 800ccd4:	4413      	add	r3, r2
 800ccd6:	009b      	lsls	r3, r3, #2
 800ccd8:	440b      	add	r3, r1
 800ccda:	3320      	adds	r3, #32
 800ccdc:	681a      	ldr	r2, [r3, #0]
 800ccde:	78fb      	ldrb	r3, [r7, #3]
 800cce0:	4619      	mov	r1, r3
 800cce2:	f7fe fc34 	bl	800b54e <USBD_LL_DataInStage>
}
 800cce6:	bf00      	nop
 800cce8:	3708      	adds	r7, #8
 800ccea:	46bd      	mov	sp, r7
 800ccec:	bd80      	pop	{r7, pc}

0800ccee <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ccee:	b580      	push	{r7, lr}
 800ccf0:	b082      	sub	sp, #8
 800ccf2:	af00      	add	r7, sp, #0
 800ccf4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ccfc:	4618      	mov	r0, r3
 800ccfe:	f7fe fd6e 	bl	800b7de <USBD_LL_SOF>
}
 800cd02:	bf00      	nop
 800cd04:	3708      	adds	r7, #8
 800cd06:	46bd      	mov	sp, r7
 800cd08:	bd80      	pop	{r7, pc}

0800cd0a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd0a:	b580      	push	{r7, lr}
 800cd0c:	b084      	sub	sp, #16
 800cd0e:	af00      	add	r7, sp, #0
 800cd10:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800cd12:	2301      	movs	r3, #1
 800cd14:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	79db      	ldrb	r3, [r3, #7]
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d102      	bne.n	800cd24 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800cd1e:	2300      	movs	r3, #0
 800cd20:	73fb      	strb	r3, [r7, #15]
 800cd22:	e008      	b.n	800cd36 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	79db      	ldrb	r3, [r3, #7]
 800cd28:	2b02      	cmp	r3, #2
 800cd2a:	d102      	bne.n	800cd32 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800cd2c:	2301      	movs	r3, #1
 800cd2e:	73fb      	strb	r3, [r7, #15]
 800cd30:	e001      	b.n	800cd36 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800cd32:	f7f4 ff19 	bl	8001b68 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cd3c:	7bfa      	ldrb	r2, [r7, #15]
 800cd3e:	4611      	mov	r1, r2
 800cd40:	4618      	mov	r0, r3
 800cd42:	f7fe fd08 	bl	800b756 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	f7fe fcb0 	bl	800b6b2 <USBD_LL_Reset>
}
 800cd52:	bf00      	nop
 800cd54:	3710      	adds	r7, #16
 800cd56:	46bd      	mov	sp, r7
 800cd58:	bd80      	pop	{r7, pc}
	...

0800cd5c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd5c:	b580      	push	{r7, lr}
 800cd5e:	b082      	sub	sp, #8
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	f7fe fd03 	bl	800b776 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	687a      	ldr	r2, [r7, #4]
 800cd7c:	6812      	ldr	r2, [r2, #0]
 800cd7e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800cd82:	f043 0301 	orr.w	r3, r3, #1
 800cd86:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	7adb      	ldrb	r3, [r3, #11]
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d005      	beq.n	800cd9c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cd90:	4b04      	ldr	r3, [pc, #16]	@ (800cda4 <HAL_PCD_SuspendCallback+0x48>)
 800cd92:	691b      	ldr	r3, [r3, #16]
 800cd94:	4a03      	ldr	r2, [pc, #12]	@ (800cda4 <HAL_PCD_SuspendCallback+0x48>)
 800cd96:	f043 0306 	orr.w	r3, r3, #6
 800cd9a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800cd9c:	bf00      	nop
 800cd9e:	3708      	adds	r7, #8
 800cda0:	46bd      	mov	sp, r7
 800cda2:	bd80      	pop	{r7, pc}
 800cda4:	e000ed00 	.word	0xe000ed00

0800cda8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cda8:	b580      	push	{r7, lr}
 800cdaa:	b082      	sub	sp, #8
 800cdac:	af00      	add	r7, sp, #0
 800cdae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	f7fe fcf9 	bl	800b7ae <USBD_LL_Resume>
}
 800cdbc:	bf00      	nop
 800cdbe:	3708      	adds	r7, #8
 800cdc0:	46bd      	mov	sp, r7
 800cdc2:	bd80      	pop	{r7, pc}

0800cdc4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cdc4:	b580      	push	{r7, lr}
 800cdc6:	b082      	sub	sp, #8
 800cdc8:	af00      	add	r7, sp, #0
 800cdca:	6078      	str	r0, [r7, #4]
 800cdcc:	460b      	mov	r3, r1
 800cdce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cdd6:	78fa      	ldrb	r2, [r7, #3]
 800cdd8:	4611      	mov	r1, r2
 800cdda:	4618      	mov	r0, r3
 800cddc:	f7fe fd51 	bl	800b882 <USBD_LL_IsoOUTIncomplete>
}
 800cde0:	bf00      	nop
 800cde2:	3708      	adds	r7, #8
 800cde4:	46bd      	mov	sp, r7
 800cde6:	bd80      	pop	{r7, pc}

0800cde8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cde8:	b580      	push	{r7, lr}
 800cdea:	b082      	sub	sp, #8
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	6078      	str	r0, [r7, #4]
 800cdf0:	460b      	mov	r3, r1
 800cdf2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cdfa:	78fa      	ldrb	r2, [r7, #3]
 800cdfc:	4611      	mov	r1, r2
 800cdfe:	4618      	mov	r0, r3
 800ce00:	f7fe fd0d 	bl	800b81e <USBD_LL_IsoINIncomplete>
}
 800ce04:	bf00      	nop
 800ce06:	3708      	adds	r7, #8
 800ce08:	46bd      	mov	sp, r7
 800ce0a:	bd80      	pop	{r7, pc}

0800ce0c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce0c:	b580      	push	{r7, lr}
 800ce0e:	b082      	sub	sp, #8
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ce1a:	4618      	mov	r0, r3
 800ce1c:	f7fe fd63 	bl	800b8e6 <USBD_LL_DevConnected>
}
 800ce20:	bf00      	nop
 800ce22:	3708      	adds	r7, #8
 800ce24:	46bd      	mov	sp, r7
 800ce26:	bd80      	pop	{r7, pc}

0800ce28 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce28:	b580      	push	{r7, lr}
 800ce2a:	b082      	sub	sp, #8
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ce36:	4618      	mov	r0, r3
 800ce38:	f7fe fd60 	bl	800b8fc <USBD_LL_DevDisconnected>
}
 800ce3c:	bf00      	nop
 800ce3e:	3708      	adds	r7, #8
 800ce40:	46bd      	mov	sp, r7
 800ce42:	bd80      	pop	{r7, pc}

0800ce44 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ce44:	b580      	push	{r7, lr}
 800ce46:	b082      	sub	sp, #8
 800ce48:	af00      	add	r7, sp, #0
 800ce4a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	781b      	ldrb	r3, [r3, #0]
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d13c      	bne.n	800cece <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ce54:	4a20      	ldr	r2, [pc, #128]	@ (800ced8 <USBD_LL_Init+0x94>)
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	4a1e      	ldr	r2, [pc, #120]	@ (800ced8 <USBD_LL_Init+0x94>)
 800ce60:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ce64:	4b1c      	ldr	r3, [pc, #112]	@ (800ced8 <USBD_LL_Init+0x94>)
 800ce66:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800ce6a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800ce6c:	4b1a      	ldr	r3, [pc, #104]	@ (800ced8 <USBD_LL_Init+0x94>)
 800ce6e:	2204      	movs	r2, #4
 800ce70:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ce72:	4b19      	ldr	r3, [pc, #100]	@ (800ced8 <USBD_LL_Init+0x94>)
 800ce74:	2202      	movs	r2, #2
 800ce76:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ce78:	4b17      	ldr	r3, [pc, #92]	@ (800ced8 <USBD_LL_Init+0x94>)
 800ce7a:	2200      	movs	r2, #0
 800ce7c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ce7e:	4b16      	ldr	r3, [pc, #88]	@ (800ced8 <USBD_LL_Init+0x94>)
 800ce80:	2202      	movs	r2, #2
 800ce82:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ce84:	4b14      	ldr	r3, [pc, #80]	@ (800ced8 <USBD_LL_Init+0x94>)
 800ce86:	2200      	movs	r2, #0
 800ce88:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ce8a:	4b13      	ldr	r3, [pc, #76]	@ (800ced8 <USBD_LL_Init+0x94>)
 800ce8c:	2200      	movs	r2, #0
 800ce8e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ce90:	4b11      	ldr	r3, [pc, #68]	@ (800ced8 <USBD_LL_Init+0x94>)
 800ce92:	2200      	movs	r2, #0
 800ce94:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800ce96:	4b10      	ldr	r3, [pc, #64]	@ (800ced8 <USBD_LL_Init+0x94>)
 800ce98:	2201      	movs	r2, #1
 800ce9a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ce9c:	4b0e      	ldr	r3, [pc, #56]	@ (800ced8 <USBD_LL_Init+0x94>)
 800ce9e:	2200      	movs	r2, #0
 800cea0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800cea2:	480d      	ldr	r0, [pc, #52]	@ (800ced8 <USBD_LL_Init+0x94>)
 800cea4:	f7f8 ff7a 	bl	8005d9c <HAL_PCD_Init>
 800cea8:	4603      	mov	r3, r0
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d001      	beq.n	800ceb2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800ceae:	f7f4 fe5b 	bl	8001b68 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ceb2:	2180      	movs	r1, #128	@ 0x80
 800ceb4:	4808      	ldr	r0, [pc, #32]	@ (800ced8 <USBD_LL_Init+0x94>)
 800ceb6:	f7fa f9a6 	bl	8007206 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ceba:	2240      	movs	r2, #64	@ 0x40
 800cebc:	2100      	movs	r1, #0
 800cebe:	4806      	ldr	r0, [pc, #24]	@ (800ced8 <USBD_LL_Init+0x94>)
 800cec0:	f7fa f95a 	bl	8007178 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800cec4:	2280      	movs	r2, #128	@ 0x80
 800cec6:	2101      	movs	r1, #1
 800cec8:	4803      	ldr	r0, [pc, #12]	@ (800ced8 <USBD_LL_Init+0x94>)
 800ceca:	f7fa f955 	bl	8007178 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800cece:	2300      	movs	r3, #0
}
 800ced0:	4618      	mov	r0, r3
 800ced2:	3708      	adds	r7, #8
 800ced4:	46bd      	mov	sp, r7
 800ced6:	bd80      	pop	{r7, pc}
 800ced8:	20001c98 	.word	0x20001c98

0800cedc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800cedc:	b580      	push	{r7, lr}
 800cede:	b084      	sub	sp, #16
 800cee0:	af00      	add	r7, sp, #0
 800cee2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cee4:	2300      	movs	r3, #0
 800cee6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cee8:	2300      	movs	r3, #0
 800ceea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cef2:	4618      	mov	r0, r3
 800cef4:	f7f9 f861 	bl	8005fba <HAL_PCD_Start>
 800cef8:	4603      	mov	r3, r0
 800cefa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cefc:	7bfb      	ldrb	r3, [r7, #15]
 800cefe:	4618      	mov	r0, r3
 800cf00:	f000 f942 	bl	800d188 <USBD_Get_USB_Status>
 800cf04:	4603      	mov	r3, r0
 800cf06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cf08:	7bbb      	ldrb	r3, [r7, #14]
}
 800cf0a:	4618      	mov	r0, r3
 800cf0c:	3710      	adds	r7, #16
 800cf0e:	46bd      	mov	sp, r7
 800cf10:	bd80      	pop	{r7, pc}

0800cf12 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800cf12:	b580      	push	{r7, lr}
 800cf14:	b084      	sub	sp, #16
 800cf16:	af00      	add	r7, sp, #0
 800cf18:	6078      	str	r0, [r7, #4]
 800cf1a:	4608      	mov	r0, r1
 800cf1c:	4611      	mov	r1, r2
 800cf1e:	461a      	mov	r2, r3
 800cf20:	4603      	mov	r3, r0
 800cf22:	70fb      	strb	r3, [r7, #3]
 800cf24:	460b      	mov	r3, r1
 800cf26:	70bb      	strb	r3, [r7, #2]
 800cf28:	4613      	mov	r3, r2
 800cf2a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf2c:	2300      	movs	r3, #0
 800cf2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf30:	2300      	movs	r3, #0
 800cf32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800cf3a:	78bb      	ldrb	r3, [r7, #2]
 800cf3c:	883a      	ldrh	r2, [r7, #0]
 800cf3e:	78f9      	ldrb	r1, [r7, #3]
 800cf40:	f7f9 fd35 	bl	80069ae <HAL_PCD_EP_Open>
 800cf44:	4603      	mov	r3, r0
 800cf46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cf48:	7bfb      	ldrb	r3, [r7, #15]
 800cf4a:	4618      	mov	r0, r3
 800cf4c:	f000 f91c 	bl	800d188 <USBD_Get_USB_Status>
 800cf50:	4603      	mov	r3, r0
 800cf52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cf54:	7bbb      	ldrb	r3, [r7, #14]
}
 800cf56:	4618      	mov	r0, r3
 800cf58:	3710      	adds	r7, #16
 800cf5a:	46bd      	mov	sp, r7
 800cf5c:	bd80      	pop	{r7, pc}

0800cf5e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cf5e:	b580      	push	{r7, lr}
 800cf60:	b084      	sub	sp, #16
 800cf62:	af00      	add	r7, sp, #0
 800cf64:	6078      	str	r0, [r7, #4]
 800cf66:	460b      	mov	r3, r1
 800cf68:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf6a:	2300      	movs	r3, #0
 800cf6c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf6e:	2300      	movs	r3, #0
 800cf70:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cf78:	78fa      	ldrb	r2, [r7, #3]
 800cf7a:	4611      	mov	r1, r2
 800cf7c:	4618      	mov	r0, r3
 800cf7e:	f7f9 fd80 	bl	8006a82 <HAL_PCD_EP_Close>
 800cf82:	4603      	mov	r3, r0
 800cf84:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cf86:	7bfb      	ldrb	r3, [r7, #15]
 800cf88:	4618      	mov	r0, r3
 800cf8a:	f000 f8fd 	bl	800d188 <USBD_Get_USB_Status>
 800cf8e:	4603      	mov	r3, r0
 800cf90:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cf92:	7bbb      	ldrb	r3, [r7, #14]
}
 800cf94:	4618      	mov	r0, r3
 800cf96:	3710      	adds	r7, #16
 800cf98:	46bd      	mov	sp, r7
 800cf9a:	bd80      	pop	{r7, pc}

0800cf9c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cf9c:	b580      	push	{r7, lr}
 800cf9e:	b084      	sub	sp, #16
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	6078      	str	r0, [r7, #4]
 800cfa4:	460b      	mov	r3, r1
 800cfa6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cfa8:	2300      	movs	r3, #0
 800cfaa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cfac:	2300      	movs	r3, #0
 800cfae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cfb6:	78fa      	ldrb	r2, [r7, #3]
 800cfb8:	4611      	mov	r1, r2
 800cfba:	4618      	mov	r0, r3
 800cfbc:	f7f9 fe38 	bl	8006c30 <HAL_PCD_EP_SetStall>
 800cfc0:	4603      	mov	r3, r0
 800cfc2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cfc4:	7bfb      	ldrb	r3, [r7, #15]
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	f000 f8de 	bl	800d188 <USBD_Get_USB_Status>
 800cfcc:	4603      	mov	r3, r0
 800cfce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cfd0:	7bbb      	ldrb	r3, [r7, #14]
}
 800cfd2:	4618      	mov	r0, r3
 800cfd4:	3710      	adds	r7, #16
 800cfd6:	46bd      	mov	sp, r7
 800cfd8:	bd80      	pop	{r7, pc}

0800cfda <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cfda:	b580      	push	{r7, lr}
 800cfdc:	b084      	sub	sp, #16
 800cfde:	af00      	add	r7, sp, #0
 800cfe0:	6078      	str	r0, [r7, #4]
 800cfe2:	460b      	mov	r3, r1
 800cfe4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cfea:	2300      	movs	r3, #0
 800cfec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cff4:	78fa      	ldrb	r2, [r7, #3]
 800cff6:	4611      	mov	r1, r2
 800cff8:	4618      	mov	r0, r3
 800cffa:	f7f9 fe7c 	bl	8006cf6 <HAL_PCD_EP_ClrStall>
 800cffe:	4603      	mov	r3, r0
 800d000:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d002:	7bfb      	ldrb	r3, [r7, #15]
 800d004:	4618      	mov	r0, r3
 800d006:	f000 f8bf 	bl	800d188 <USBD_Get_USB_Status>
 800d00a:	4603      	mov	r3, r0
 800d00c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d00e:	7bbb      	ldrb	r3, [r7, #14]
}
 800d010:	4618      	mov	r0, r3
 800d012:	3710      	adds	r7, #16
 800d014:	46bd      	mov	sp, r7
 800d016:	bd80      	pop	{r7, pc}

0800d018 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d018:	b480      	push	{r7}
 800d01a:	b085      	sub	sp, #20
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	6078      	str	r0, [r7, #4]
 800d020:	460b      	mov	r3, r1
 800d022:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d02a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d02c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d030:	2b00      	cmp	r3, #0
 800d032:	da0b      	bge.n	800d04c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d034:	78fb      	ldrb	r3, [r7, #3]
 800d036:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d03a:	68f9      	ldr	r1, [r7, #12]
 800d03c:	4613      	mov	r3, r2
 800d03e:	00db      	lsls	r3, r3, #3
 800d040:	4413      	add	r3, r2
 800d042:	009b      	lsls	r3, r3, #2
 800d044:	440b      	add	r3, r1
 800d046:	3316      	adds	r3, #22
 800d048:	781b      	ldrb	r3, [r3, #0]
 800d04a:	e00b      	b.n	800d064 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d04c:	78fb      	ldrb	r3, [r7, #3]
 800d04e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d052:	68f9      	ldr	r1, [r7, #12]
 800d054:	4613      	mov	r3, r2
 800d056:	00db      	lsls	r3, r3, #3
 800d058:	4413      	add	r3, r2
 800d05a:	009b      	lsls	r3, r3, #2
 800d05c:	440b      	add	r3, r1
 800d05e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800d062:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d064:	4618      	mov	r0, r3
 800d066:	3714      	adds	r7, #20
 800d068:	46bd      	mov	sp, r7
 800d06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d06e:	4770      	bx	lr

0800d070 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d070:	b580      	push	{r7, lr}
 800d072:	b084      	sub	sp, #16
 800d074:	af00      	add	r7, sp, #0
 800d076:	6078      	str	r0, [r7, #4]
 800d078:	460b      	mov	r3, r1
 800d07a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d07c:	2300      	movs	r3, #0
 800d07e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d080:	2300      	movs	r3, #0
 800d082:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d08a:	78fa      	ldrb	r2, [r7, #3]
 800d08c:	4611      	mov	r1, r2
 800d08e:	4618      	mov	r0, r3
 800d090:	f7f9 fc69 	bl	8006966 <HAL_PCD_SetAddress>
 800d094:	4603      	mov	r3, r0
 800d096:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d098:	7bfb      	ldrb	r3, [r7, #15]
 800d09a:	4618      	mov	r0, r3
 800d09c:	f000 f874 	bl	800d188 <USBD_Get_USB_Status>
 800d0a0:	4603      	mov	r3, r0
 800d0a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d0a4:	7bbb      	ldrb	r3, [r7, #14]
}
 800d0a6:	4618      	mov	r0, r3
 800d0a8:	3710      	adds	r7, #16
 800d0aa:	46bd      	mov	sp, r7
 800d0ac:	bd80      	pop	{r7, pc}

0800d0ae <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d0ae:	b580      	push	{r7, lr}
 800d0b0:	b086      	sub	sp, #24
 800d0b2:	af00      	add	r7, sp, #0
 800d0b4:	60f8      	str	r0, [r7, #12]
 800d0b6:	607a      	str	r2, [r7, #4]
 800d0b8:	603b      	str	r3, [r7, #0]
 800d0ba:	460b      	mov	r3, r1
 800d0bc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d0be:	2300      	movs	r3, #0
 800d0c0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d0c2:	2300      	movs	r3, #0
 800d0c4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d0cc:	7af9      	ldrb	r1, [r7, #11]
 800d0ce:	683b      	ldr	r3, [r7, #0]
 800d0d0:	687a      	ldr	r2, [r7, #4]
 800d0d2:	f7f9 fd73 	bl	8006bbc <HAL_PCD_EP_Transmit>
 800d0d6:	4603      	mov	r3, r0
 800d0d8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d0da:	7dfb      	ldrb	r3, [r7, #23]
 800d0dc:	4618      	mov	r0, r3
 800d0de:	f000 f853 	bl	800d188 <USBD_Get_USB_Status>
 800d0e2:	4603      	mov	r3, r0
 800d0e4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d0e6:	7dbb      	ldrb	r3, [r7, #22]
}
 800d0e8:	4618      	mov	r0, r3
 800d0ea:	3718      	adds	r7, #24
 800d0ec:	46bd      	mov	sp, r7
 800d0ee:	bd80      	pop	{r7, pc}

0800d0f0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d0f0:	b580      	push	{r7, lr}
 800d0f2:	b086      	sub	sp, #24
 800d0f4:	af00      	add	r7, sp, #0
 800d0f6:	60f8      	str	r0, [r7, #12]
 800d0f8:	607a      	str	r2, [r7, #4]
 800d0fa:	603b      	str	r3, [r7, #0]
 800d0fc:	460b      	mov	r3, r1
 800d0fe:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d100:	2300      	movs	r3, #0
 800d102:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d104:	2300      	movs	r3, #0
 800d106:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d10e:	7af9      	ldrb	r1, [r7, #11]
 800d110:	683b      	ldr	r3, [r7, #0]
 800d112:	687a      	ldr	r2, [r7, #4]
 800d114:	f7f9 fcff 	bl	8006b16 <HAL_PCD_EP_Receive>
 800d118:	4603      	mov	r3, r0
 800d11a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d11c:	7dfb      	ldrb	r3, [r7, #23]
 800d11e:	4618      	mov	r0, r3
 800d120:	f000 f832 	bl	800d188 <USBD_Get_USB_Status>
 800d124:	4603      	mov	r3, r0
 800d126:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d128:	7dbb      	ldrb	r3, [r7, #22]
}
 800d12a:	4618      	mov	r0, r3
 800d12c:	3718      	adds	r7, #24
 800d12e:	46bd      	mov	sp, r7
 800d130:	bd80      	pop	{r7, pc}

0800d132 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d132:	b580      	push	{r7, lr}
 800d134:	b082      	sub	sp, #8
 800d136:	af00      	add	r7, sp, #0
 800d138:	6078      	str	r0, [r7, #4]
 800d13a:	460b      	mov	r3, r1
 800d13c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d144:	78fa      	ldrb	r2, [r7, #3]
 800d146:	4611      	mov	r1, r2
 800d148:	4618      	mov	r0, r3
 800d14a:	f7f9 fd1f 	bl	8006b8c <HAL_PCD_EP_GetRxCount>
 800d14e:	4603      	mov	r3, r0
}
 800d150:	4618      	mov	r0, r3
 800d152:	3708      	adds	r7, #8
 800d154:	46bd      	mov	sp, r7
 800d156:	bd80      	pop	{r7, pc}

0800d158 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d158:	b480      	push	{r7}
 800d15a:	b083      	sub	sp, #12
 800d15c:	af00      	add	r7, sp, #0
 800d15e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d160:	4b03      	ldr	r3, [pc, #12]	@ (800d170 <USBD_static_malloc+0x18>)
}
 800d162:	4618      	mov	r0, r3
 800d164:	370c      	adds	r7, #12
 800d166:	46bd      	mov	sp, r7
 800d168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d16c:	4770      	bx	lr
 800d16e:	bf00      	nop
 800d170:	2000217c 	.word	0x2000217c

0800d174 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d174:	b480      	push	{r7}
 800d176:	b083      	sub	sp, #12
 800d178:	af00      	add	r7, sp, #0
 800d17a:	6078      	str	r0, [r7, #4]

}
 800d17c:	bf00      	nop
 800d17e:	370c      	adds	r7, #12
 800d180:	46bd      	mov	sp, r7
 800d182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d186:	4770      	bx	lr

0800d188 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d188:	b480      	push	{r7}
 800d18a:	b085      	sub	sp, #20
 800d18c:	af00      	add	r7, sp, #0
 800d18e:	4603      	mov	r3, r0
 800d190:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d192:	2300      	movs	r3, #0
 800d194:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d196:	79fb      	ldrb	r3, [r7, #7]
 800d198:	2b03      	cmp	r3, #3
 800d19a:	d817      	bhi.n	800d1cc <USBD_Get_USB_Status+0x44>
 800d19c:	a201      	add	r2, pc, #4	@ (adr r2, 800d1a4 <USBD_Get_USB_Status+0x1c>)
 800d19e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1a2:	bf00      	nop
 800d1a4:	0800d1b5 	.word	0x0800d1b5
 800d1a8:	0800d1bb 	.word	0x0800d1bb
 800d1ac:	0800d1c1 	.word	0x0800d1c1
 800d1b0:	0800d1c7 	.word	0x0800d1c7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d1b4:	2300      	movs	r3, #0
 800d1b6:	73fb      	strb	r3, [r7, #15]
    break;
 800d1b8:	e00b      	b.n	800d1d2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d1ba:	2303      	movs	r3, #3
 800d1bc:	73fb      	strb	r3, [r7, #15]
    break;
 800d1be:	e008      	b.n	800d1d2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d1c0:	2301      	movs	r3, #1
 800d1c2:	73fb      	strb	r3, [r7, #15]
    break;
 800d1c4:	e005      	b.n	800d1d2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d1c6:	2303      	movs	r3, #3
 800d1c8:	73fb      	strb	r3, [r7, #15]
    break;
 800d1ca:	e002      	b.n	800d1d2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d1cc:	2303      	movs	r3, #3
 800d1ce:	73fb      	strb	r3, [r7, #15]
    break;
 800d1d0:	bf00      	nop
  }
  return usb_status;
 800d1d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1d4:	4618      	mov	r0, r3
 800d1d6:	3714      	adds	r7, #20
 800d1d8:	46bd      	mov	sp, r7
 800d1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1de:	4770      	bx	lr

0800d1e0 <swapfunc>:
 800d1e0:	2b02      	cmp	r3, #2
 800d1e2:	b510      	push	{r4, lr}
 800d1e4:	d00a      	beq.n	800d1fc <swapfunc+0x1c>
 800d1e6:	0892      	lsrs	r2, r2, #2
 800d1e8:	3a01      	subs	r2, #1
 800d1ea:	6803      	ldr	r3, [r0, #0]
 800d1ec:	680c      	ldr	r4, [r1, #0]
 800d1ee:	f840 4b04 	str.w	r4, [r0], #4
 800d1f2:	2a00      	cmp	r2, #0
 800d1f4:	f841 3b04 	str.w	r3, [r1], #4
 800d1f8:	dcf6      	bgt.n	800d1e8 <swapfunc+0x8>
 800d1fa:	bd10      	pop	{r4, pc}
 800d1fc:	4402      	add	r2, r0
 800d1fe:	780c      	ldrb	r4, [r1, #0]
 800d200:	7803      	ldrb	r3, [r0, #0]
 800d202:	f800 4b01 	strb.w	r4, [r0], #1
 800d206:	f801 3b01 	strb.w	r3, [r1], #1
 800d20a:	1a13      	subs	r3, r2, r0
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	dcf6      	bgt.n	800d1fe <swapfunc+0x1e>
 800d210:	e7f3      	b.n	800d1fa <swapfunc+0x1a>

0800d212 <med3.constprop.0>:
 800d212:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d214:	460f      	mov	r7, r1
 800d216:	4616      	mov	r6, r2
 800d218:	4604      	mov	r4, r0
 800d21a:	461d      	mov	r5, r3
 800d21c:	4798      	blx	r3
 800d21e:	2800      	cmp	r0, #0
 800d220:	4631      	mov	r1, r6
 800d222:	4638      	mov	r0, r7
 800d224:	da0c      	bge.n	800d240 <med3.constprop.0+0x2e>
 800d226:	47a8      	blx	r5
 800d228:	2800      	cmp	r0, #0
 800d22a:	da02      	bge.n	800d232 <med3.constprop.0+0x20>
 800d22c:	463c      	mov	r4, r7
 800d22e:	4620      	mov	r0, r4
 800d230:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d232:	4631      	mov	r1, r6
 800d234:	4620      	mov	r0, r4
 800d236:	47a8      	blx	r5
 800d238:	2800      	cmp	r0, #0
 800d23a:	daf8      	bge.n	800d22e <med3.constprop.0+0x1c>
 800d23c:	4634      	mov	r4, r6
 800d23e:	e7f6      	b.n	800d22e <med3.constprop.0+0x1c>
 800d240:	47a8      	blx	r5
 800d242:	2800      	cmp	r0, #0
 800d244:	dcf2      	bgt.n	800d22c <med3.constprop.0+0x1a>
 800d246:	4631      	mov	r1, r6
 800d248:	4620      	mov	r0, r4
 800d24a:	47a8      	blx	r5
 800d24c:	2800      	cmp	r0, #0
 800d24e:	daf5      	bge.n	800d23c <med3.constprop.0+0x2a>
 800d250:	e7ed      	b.n	800d22e <med3.constprop.0+0x1c>

0800d252 <qsort>:
 800d252:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d256:	b095      	sub	sp, #84	@ 0x54
 800d258:	4606      	mov	r6, r0
 800d25a:	9300      	str	r3, [sp, #0]
 800d25c:	ea40 0302 	orr.w	r3, r0, r2
 800d260:	079b      	lsls	r3, r3, #30
 800d262:	4614      	mov	r4, r2
 800d264:	d118      	bne.n	800d298 <qsort+0x46>
 800d266:	f1b2 0804 	subs.w	r8, r2, #4
 800d26a:	bf18      	it	ne
 800d26c:	f04f 0801 	movne.w	r8, #1
 800d270:	2300      	movs	r3, #0
 800d272:	9301      	str	r3, [sp, #4]
 800d274:	fb04 f701 	mul.w	r7, r4, r1
 800d278:	19f3      	adds	r3, r6, r7
 800d27a:	2906      	cmp	r1, #6
 800d27c:	eb06 0b04 	add.w	fp, r6, r4
 800d280:	9302      	str	r3, [sp, #8]
 800d282:	d828      	bhi.n	800d2d6 <qsort+0x84>
 800d284:	9b02      	ldr	r3, [sp, #8]
 800d286:	459b      	cmp	fp, r3
 800d288:	d310      	bcc.n	800d2ac <qsort+0x5a>
 800d28a:	9b01      	ldr	r3, [sp, #4]
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	f040 8117 	bne.w	800d4c0 <qsort+0x26e>
 800d292:	b015      	add	sp, #84	@ 0x54
 800d294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d298:	f04f 0802 	mov.w	r8, #2
 800d29c:	e7e8      	b.n	800d270 <qsort+0x1e>
 800d29e:	4643      	mov	r3, r8
 800d2a0:	4622      	mov	r2, r4
 800d2a2:	4639      	mov	r1, r7
 800d2a4:	4628      	mov	r0, r5
 800d2a6:	f7ff ff9b 	bl	800d1e0 <swapfunc>
 800d2aa:	e00f      	b.n	800d2cc <qsort+0x7a>
 800d2ac:	465d      	mov	r5, fp
 800d2ae:	e00e      	b.n	800d2ce <qsort+0x7c>
 800d2b0:	1b2f      	subs	r7, r5, r4
 800d2b2:	9b00      	ldr	r3, [sp, #0]
 800d2b4:	4629      	mov	r1, r5
 800d2b6:	4638      	mov	r0, r7
 800d2b8:	4798      	blx	r3
 800d2ba:	2800      	cmp	r0, #0
 800d2bc:	dd09      	ble.n	800d2d2 <qsort+0x80>
 800d2be:	f1b8 0f00 	cmp.w	r8, #0
 800d2c2:	d1ec      	bne.n	800d29e <qsort+0x4c>
 800d2c4:	682b      	ldr	r3, [r5, #0]
 800d2c6:	683a      	ldr	r2, [r7, #0]
 800d2c8:	602a      	str	r2, [r5, #0]
 800d2ca:	603b      	str	r3, [r7, #0]
 800d2cc:	463d      	mov	r5, r7
 800d2ce:	42ae      	cmp	r6, r5
 800d2d0:	d3ee      	bcc.n	800d2b0 <qsort+0x5e>
 800d2d2:	44a3      	add	fp, r4
 800d2d4:	e7d6      	b.n	800d284 <qsort+0x32>
 800d2d6:	ea4f 0951 	mov.w	r9, r1, lsr #1
 800d2da:	1b3f      	subs	r7, r7, r4
 800d2dc:	2907      	cmp	r1, #7
 800d2de:	fb04 6909 	mla	r9, r4, r9, r6
 800d2e2:	4437      	add	r7, r6
 800d2e4:	d021      	beq.n	800d32a <qsort+0xd8>
 800d2e6:	2928      	cmp	r1, #40	@ 0x28
 800d2e8:	d944      	bls.n	800d374 <qsort+0x122>
 800d2ea:	08cd      	lsrs	r5, r1, #3
 800d2ec:	4365      	muls	r5, r4
 800d2ee:	9b00      	ldr	r3, [sp, #0]
 800d2f0:	eb06 0245 	add.w	r2, r6, r5, lsl #1
 800d2f4:	1971      	adds	r1, r6, r5
 800d2f6:	4630      	mov	r0, r6
 800d2f8:	f7ff ff8b 	bl	800d212 <med3.constprop.0>
 800d2fc:	4649      	mov	r1, r9
 800d2fe:	eb09 0205 	add.w	r2, r9, r5
 800d302:	9b00      	ldr	r3, [sp, #0]
 800d304:	4682      	mov	sl, r0
 800d306:	1b48      	subs	r0, r1, r5
 800d308:	f7ff ff83 	bl	800d212 <med3.constprop.0>
 800d30c:	463a      	mov	r2, r7
 800d30e:	9b00      	ldr	r3, [sp, #0]
 800d310:	4681      	mov	r9, r0
 800d312:	1b79      	subs	r1, r7, r5
 800d314:	eba7 0045 	sub.w	r0, r7, r5, lsl #1
 800d318:	f7ff ff7b 	bl	800d212 <med3.constprop.0>
 800d31c:	4602      	mov	r2, r0
 800d31e:	4649      	mov	r1, r9
 800d320:	9b00      	ldr	r3, [sp, #0]
 800d322:	4650      	mov	r0, sl
 800d324:	f7ff ff75 	bl	800d212 <med3.constprop.0>
 800d328:	4681      	mov	r9, r0
 800d32a:	f1b8 0f00 	cmp.w	r8, #0
 800d32e:	d124      	bne.n	800d37a <qsort+0x128>
 800d330:	6833      	ldr	r3, [r6, #0]
 800d332:	f8d9 2000 	ldr.w	r2, [r9]
 800d336:	6032      	str	r2, [r6, #0]
 800d338:	f8c9 3000 	str.w	r3, [r9]
 800d33c:	46d9      	mov	r9, fp
 800d33e:	46ba      	mov	sl, r7
 800d340:	465d      	mov	r5, fp
 800d342:	2300      	movs	r3, #0
 800d344:	45b9      	cmp	r9, r7
 800d346:	d857      	bhi.n	800d3f8 <qsort+0x1a6>
 800d348:	9303      	str	r3, [sp, #12]
 800d34a:	4631      	mov	r1, r6
 800d34c:	9b00      	ldr	r3, [sp, #0]
 800d34e:	4648      	mov	r0, r9
 800d350:	4798      	blx	r3
 800d352:	2800      	cmp	r0, #0
 800d354:	9b03      	ldr	r3, [sp, #12]
 800d356:	dc2c      	bgt.n	800d3b2 <qsort+0x160>
 800d358:	d10a      	bne.n	800d370 <qsort+0x11e>
 800d35a:	f1b8 0f00 	cmp.w	r8, #0
 800d35e:	d113      	bne.n	800d388 <qsort+0x136>
 800d360:	682b      	ldr	r3, [r5, #0]
 800d362:	f8d9 2000 	ldr.w	r2, [r9]
 800d366:	602a      	str	r2, [r5, #0]
 800d368:	f8c9 3000 	str.w	r3, [r9]
 800d36c:	4425      	add	r5, r4
 800d36e:	2301      	movs	r3, #1
 800d370:	44a1      	add	r9, r4
 800d372:	e7e7      	b.n	800d344 <qsort+0xf2>
 800d374:	463a      	mov	r2, r7
 800d376:	46b2      	mov	sl, r6
 800d378:	e7d1      	b.n	800d31e <qsort+0xcc>
 800d37a:	4643      	mov	r3, r8
 800d37c:	4622      	mov	r2, r4
 800d37e:	4649      	mov	r1, r9
 800d380:	4630      	mov	r0, r6
 800d382:	f7ff ff2d 	bl	800d1e0 <swapfunc>
 800d386:	e7d9      	b.n	800d33c <qsort+0xea>
 800d388:	4643      	mov	r3, r8
 800d38a:	4622      	mov	r2, r4
 800d38c:	4649      	mov	r1, r9
 800d38e:	4628      	mov	r0, r5
 800d390:	f7ff ff26 	bl	800d1e0 <swapfunc>
 800d394:	e7ea      	b.n	800d36c <qsort+0x11a>
 800d396:	d10b      	bne.n	800d3b0 <qsort+0x15e>
 800d398:	f1b8 0f00 	cmp.w	r8, #0
 800d39c:	d11e      	bne.n	800d3dc <qsort+0x18a>
 800d39e:	683b      	ldr	r3, [r7, #0]
 800d3a0:	f8da 2000 	ldr.w	r2, [sl]
 800d3a4:	603a      	str	r2, [r7, #0]
 800d3a6:	f8ca 3000 	str.w	r3, [sl]
 800d3aa:	ebaa 0a04 	sub.w	sl, sl, r4
 800d3ae:	2301      	movs	r3, #1
 800d3b0:	1b3f      	subs	r7, r7, r4
 800d3b2:	45b9      	cmp	r9, r7
 800d3b4:	d820      	bhi.n	800d3f8 <qsort+0x1a6>
 800d3b6:	9303      	str	r3, [sp, #12]
 800d3b8:	4631      	mov	r1, r6
 800d3ba:	9b00      	ldr	r3, [sp, #0]
 800d3bc:	4638      	mov	r0, r7
 800d3be:	4798      	blx	r3
 800d3c0:	2800      	cmp	r0, #0
 800d3c2:	9b03      	ldr	r3, [sp, #12]
 800d3c4:	dae7      	bge.n	800d396 <qsort+0x144>
 800d3c6:	f1b8 0f00 	cmp.w	r8, #0
 800d3ca:	d10e      	bne.n	800d3ea <qsort+0x198>
 800d3cc:	f8d9 3000 	ldr.w	r3, [r9]
 800d3d0:	683a      	ldr	r2, [r7, #0]
 800d3d2:	f8c9 2000 	str.w	r2, [r9]
 800d3d6:	603b      	str	r3, [r7, #0]
 800d3d8:	1b3f      	subs	r7, r7, r4
 800d3da:	e7c8      	b.n	800d36e <qsort+0x11c>
 800d3dc:	4643      	mov	r3, r8
 800d3de:	4622      	mov	r2, r4
 800d3e0:	4651      	mov	r1, sl
 800d3e2:	4638      	mov	r0, r7
 800d3e4:	f7ff fefc 	bl	800d1e0 <swapfunc>
 800d3e8:	e7df      	b.n	800d3aa <qsort+0x158>
 800d3ea:	4643      	mov	r3, r8
 800d3ec:	4622      	mov	r2, r4
 800d3ee:	4639      	mov	r1, r7
 800d3f0:	4648      	mov	r0, r9
 800d3f2:	f7ff fef5 	bl	800d1e0 <swapfunc>
 800d3f6:	e7ef      	b.n	800d3d8 <qsort+0x186>
 800d3f8:	b9fb      	cbnz	r3, 800d43a <qsort+0x1e8>
 800d3fa:	9b02      	ldr	r3, [sp, #8]
 800d3fc:	459b      	cmp	fp, r3
 800d3fe:	f4bf af44 	bcs.w	800d28a <qsort+0x38>
 800d402:	465d      	mov	r5, fp
 800d404:	e015      	b.n	800d432 <qsort+0x1e0>
 800d406:	4643      	mov	r3, r8
 800d408:	4622      	mov	r2, r4
 800d40a:	4639      	mov	r1, r7
 800d40c:	4628      	mov	r0, r5
 800d40e:	f7ff fee7 	bl	800d1e0 <swapfunc>
 800d412:	e00d      	b.n	800d430 <qsort+0x1de>
 800d414:	1b2f      	subs	r7, r5, r4
 800d416:	9b00      	ldr	r3, [sp, #0]
 800d418:	4629      	mov	r1, r5
 800d41a:	4638      	mov	r0, r7
 800d41c:	4798      	blx	r3
 800d41e:	2800      	cmp	r0, #0
 800d420:	dd09      	ble.n	800d436 <qsort+0x1e4>
 800d422:	f1b8 0f00 	cmp.w	r8, #0
 800d426:	d1ee      	bne.n	800d406 <qsort+0x1b4>
 800d428:	682b      	ldr	r3, [r5, #0]
 800d42a:	683a      	ldr	r2, [r7, #0]
 800d42c:	602a      	str	r2, [r5, #0]
 800d42e:	603b      	str	r3, [r7, #0]
 800d430:	463d      	mov	r5, r7
 800d432:	42ae      	cmp	r6, r5
 800d434:	d3ee      	bcc.n	800d414 <qsort+0x1c2>
 800d436:	44a3      	add	fp, r4
 800d438:	e7df      	b.n	800d3fa <qsort+0x1a8>
 800d43a:	eba9 0b05 	sub.w	fp, r9, r5
 800d43e:	1baa      	subs	r2, r5, r6
 800d440:	455a      	cmp	r2, fp
 800d442:	bfa8      	it	ge
 800d444:	465a      	movge	r2, fp
 800d446:	b12a      	cbz	r2, 800d454 <qsort+0x202>
 800d448:	4643      	mov	r3, r8
 800d44a:	eba9 0102 	sub.w	r1, r9, r2
 800d44e:	4630      	mov	r0, r6
 800d450:	f7ff fec6 	bl	800d1e0 <swapfunc>
 800d454:	9b02      	ldr	r3, [sp, #8]
 800d456:	eba3 020a 	sub.w	r2, r3, sl
 800d45a:	ebaa 0507 	sub.w	r5, sl, r7
 800d45e:	1b12      	subs	r2, r2, r4
 800d460:	42aa      	cmp	r2, r5
 800d462:	bf28      	it	cs
 800d464:	462a      	movcs	r2, r5
 800d466:	b12a      	cbz	r2, 800d474 <qsort+0x222>
 800d468:	9902      	ldr	r1, [sp, #8]
 800d46a:	4643      	mov	r3, r8
 800d46c:	1a89      	subs	r1, r1, r2
 800d46e:	4648      	mov	r0, r9
 800d470:	f7ff feb6 	bl	800d1e0 <swapfunc>
 800d474:	9b02      	ldr	r3, [sp, #8]
 800d476:	455d      	cmp	r5, fp
 800d478:	465f      	mov	r7, fp
 800d47a:	eba3 0005 	sub.w	r0, r3, r5
 800d47e:	d904      	bls.n	800d48a <qsort+0x238>
 800d480:	4633      	mov	r3, r6
 800d482:	462f      	mov	r7, r5
 800d484:	4606      	mov	r6, r0
 800d486:	465d      	mov	r5, fp
 800d488:	4618      	mov	r0, r3
 800d48a:	42a5      	cmp	r5, r4
 800d48c:	d921      	bls.n	800d4d2 <qsort+0x280>
 800d48e:	fbb5 f1f4 	udiv	r1, r5, r4
 800d492:	9b01      	ldr	r3, [sp, #4]
 800d494:	2b07      	cmp	r3, #7
 800d496:	d80d      	bhi.n	800d4b4 <qsort+0x262>
 800d498:	fbb7 f7f4 	udiv	r7, r7, r4
 800d49c:	aa14      	add	r2, sp, #80	@ 0x50
 800d49e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d4a2:	f843 6c40 	str.w	r6, [r3, #-64]
 800d4a6:	f843 7c3c 	str.w	r7, [r3, #-60]
 800d4aa:	9b01      	ldr	r3, [sp, #4]
 800d4ac:	3301      	adds	r3, #1
 800d4ae:	9301      	str	r3, [sp, #4]
 800d4b0:	4606      	mov	r6, r0
 800d4b2:	e6df      	b.n	800d274 <qsort+0x22>
 800d4b4:	9b00      	ldr	r3, [sp, #0]
 800d4b6:	4622      	mov	r2, r4
 800d4b8:	f7ff fecb 	bl	800d252 <qsort>
 800d4bc:	42a7      	cmp	r7, r4
 800d4be:	d80b      	bhi.n	800d4d8 <qsort+0x286>
 800d4c0:	9b01      	ldr	r3, [sp, #4]
 800d4c2:	aa14      	add	r2, sp, #80	@ 0x50
 800d4c4:	3b01      	subs	r3, #1
 800d4c6:	9301      	str	r3, [sp, #4]
 800d4c8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d4cc:	e953 0110 	ldrd	r0, r1, [r3, #-64]	@ 0x40
 800d4d0:	e7ee      	b.n	800d4b0 <qsort+0x25e>
 800d4d2:	42a7      	cmp	r7, r4
 800d4d4:	f67f aed9 	bls.w	800d28a <qsort+0x38>
 800d4d8:	fbb7 f1f4 	udiv	r1, r7, r4
 800d4dc:	4630      	mov	r0, r6
 800d4de:	e7e7      	b.n	800d4b0 <qsort+0x25e>

0800d4e0 <__cvt>:
 800d4e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d4e4:	ec57 6b10 	vmov	r6, r7, d0
 800d4e8:	2f00      	cmp	r7, #0
 800d4ea:	460c      	mov	r4, r1
 800d4ec:	4619      	mov	r1, r3
 800d4ee:	463b      	mov	r3, r7
 800d4f0:	bfbb      	ittet	lt
 800d4f2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800d4f6:	461f      	movlt	r7, r3
 800d4f8:	2300      	movge	r3, #0
 800d4fa:	232d      	movlt	r3, #45	@ 0x2d
 800d4fc:	700b      	strb	r3, [r1, #0]
 800d4fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d500:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800d504:	4691      	mov	r9, r2
 800d506:	f023 0820 	bic.w	r8, r3, #32
 800d50a:	bfbc      	itt	lt
 800d50c:	4632      	movlt	r2, r6
 800d50e:	4616      	movlt	r6, r2
 800d510:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d514:	d005      	beq.n	800d522 <__cvt+0x42>
 800d516:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800d51a:	d100      	bne.n	800d51e <__cvt+0x3e>
 800d51c:	3401      	adds	r4, #1
 800d51e:	2102      	movs	r1, #2
 800d520:	e000      	b.n	800d524 <__cvt+0x44>
 800d522:	2103      	movs	r1, #3
 800d524:	ab03      	add	r3, sp, #12
 800d526:	9301      	str	r3, [sp, #4]
 800d528:	ab02      	add	r3, sp, #8
 800d52a:	9300      	str	r3, [sp, #0]
 800d52c:	ec47 6b10 	vmov	d0, r6, r7
 800d530:	4653      	mov	r3, sl
 800d532:	4622      	mov	r2, r4
 800d534:	f000 fe3c 	bl	800e1b0 <_dtoa_r>
 800d538:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800d53c:	4605      	mov	r5, r0
 800d53e:	d119      	bne.n	800d574 <__cvt+0x94>
 800d540:	f019 0f01 	tst.w	r9, #1
 800d544:	d00e      	beq.n	800d564 <__cvt+0x84>
 800d546:	eb00 0904 	add.w	r9, r0, r4
 800d54a:	2200      	movs	r2, #0
 800d54c:	2300      	movs	r3, #0
 800d54e:	4630      	mov	r0, r6
 800d550:	4639      	mov	r1, r7
 800d552:	f7f3 fab9 	bl	8000ac8 <__aeabi_dcmpeq>
 800d556:	b108      	cbz	r0, 800d55c <__cvt+0x7c>
 800d558:	f8cd 900c 	str.w	r9, [sp, #12]
 800d55c:	2230      	movs	r2, #48	@ 0x30
 800d55e:	9b03      	ldr	r3, [sp, #12]
 800d560:	454b      	cmp	r3, r9
 800d562:	d31e      	bcc.n	800d5a2 <__cvt+0xc2>
 800d564:	9b03      	ldr	r3, [sp, #12]
 800d566:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d568:	1b5b      	subs	r3, r3, r5
 800d56a:	4628      	mov	r0, r5
 800d56c:	6013      	str	r3, [r2, #0]
 800d56e:	b004      	add	sp, #16
 800d570:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d574:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d578:	eb00 0904 	add.w	r9, r0, r4
 800d57c:	d1e5      	bne.n	800d54a <__cvt+0x6a>
 800d57e:	7803      	ldrb	r3, [r0, #0]
 800d580:	2b30      	cmp	r3, #48	@ 0x30
 800d582:	d10a      	bne.n	800d59a <__cvt+0xba>
 800d584:	2200      	movs	r2, #0
 800d586:	2300      	movs	r3, #0
 800d588:	4630      	mov	r0, r6
 800d58a:	4639      	mov	r1, r7
 800d58c:	f7f3 fa9c 	bl	8000ac8 <__aeabi_dcmpeq>
 800d590:	b918      	cbnz	r0, 800d59a <__cvt+0xba>
 800d592:	f1c4 0401 	rsb	r4, r4, #1
 800d596:	f8ca 4000 	str.w	r4, [sl]
 800d59a:	f8da 3000 	ldr.w	r3, [sl]
 800d59e:	4499      	add	r9, r3
 800d5a0:	e7d3      	b.n	800d54a <__cvt+0x6a>
 800d5a2:	1c59      	adds	r1, r3, #1
 800d5a4:	9103      	str	r1, [sp, #12]
 800d5a6:	701a      	strb	r2, [r3, #0]
 800d5a8:	e7d9      	b.n	800d55e <__cvt+0x7e>

0800d5aa <__exponent>:
 800d5aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d5ac:	2900      	cmp	r1, #0
 800d5ae:	bfba      	itte	lt
 800d5b0:	4249      	neglt	r1, r1
 800d5b2:	232d      	movlt	r3, #45	@ 0x2d
 800d5b4:	232b      	movge	r3, #43	@ 0x2b
 800d5b6:	2909      	cmp	r1, #9
 800d5b8:	7002      	strb	r2, [r0, #0]
 800d5ba:	7043      	strb	r3, [r0, #1]
 800d5bc:	dd29      	ble.n	800d612 <__exponent+0x68>
 800d5be:	f10d 0307 	add.w	r3, sp, #7
 800d5c2:	461d      	mov	r5, r3
 800d5c4:	270a      	movs	r7, #10
 800d5c6:	461a      	mov	r2, r3
 800d5c8:	fbb1 f6f7 	udiv	r6, r1, r7
 800d5cc:	fb07 1416 	mls	r4, r7, r6, r1
 800d5d0:	3430      	adds	r4, #48	@ 0x30
 800d5d2:	f802 4c01 	strb.w	r4, [r2, #-1]
 800d5d6:	460c      	mov	r4, r1
 800d5d8:	2c63      	cmp	r4, #99	@ 0x63
 800d5da:	f103 33ff 	add.w	r3, r3, #4294967295
 800d5de:	4631      	mov	r1, r6
 800d5e0:	dcf1      	bgt.n	800d5c6 <__exponent+0x1c>
 800d5e2:	3130      	adds	r1, #48	@ 0x30
 800d5e4:	1e94      	subs	r4, r2, #2
 800d5e6:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d5ea:	1c41      	adds	r1, r0, #1
 800d5ec:	4623      	mov	r3, r4
 800d5ee:	42ab      	cmp	r3, r5
 800d5f0:	d30a      	bcc.n	800d608 <__exponent+0x5e>
 800d5f2:	f10d 0309 	add.w	r3, sp, #9
 800d5f6:	1a9b      	subs	r3, r3, r2
 800d5f8:	42ac      	cmp	r4, r5
 800d5fa:	bf88      	it	hi
 800d5fc:	2300      	movhi	r3, #0
 800d5fe:	3302      	adds	r3, #2
 800d600:	4403      	add	r3, r0
 800d602:	1a18      	subs	r0, r3, r0
 800d604:	b003      	add	sp, #12
 800d606:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d608:	f813 6b01 	ldrb.w	r6, [r3], #1
 800d60c:	f801 6f01 	strb.w	r6, [r1, #1]!
 800d610:	e7ed      	b.n	800d5ee <__exponent+0x44>
 800d612:	2330      	movs	r3, #48	@ 0x30
 800d614:	3130      	adds	r1, #48	@ 0x30
 800d616:	7083      	strb	r3, [r0, #2]
 800d618:	70c1      	strb	r1, [r0, #3]
 800d61a:	1d03      	adds	r3, r0, #4
 800d61c:	e7f1      	b.n	800d602 <__exponent+0x58>
	...

0800d620 <_printf_float>:
 800d620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d624:	b08d      	sub	sp, #52	@ 0x34
 800d626:	460c      	mov	r4, r1
 800d628:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800d62c:	4616      	mov	r6, r2
 800d62e:	461f      	mov	r7, r3
 800d630:	4605      	mov	r5, r0
 800d632:	f000 fcbb 	bl	800dfac <_localeconv_r>
 800d636:	6803      	ldr	r3, [r0, #0]
 800d638:	9304      	str	r3, [sp, #16]
 800d63a:	4618      	mov	r0, r3
 800d63c:	f7f2 fe18 	bl	8000270 <strlen>
 800d640:	2300      	movs	r3, #0
 800d642:	930a      	str	r3, [sp, #40]	@ 0x28
 800d644:	f8d8 3000 	ldr.w	r3, [r8]
 800d648:	9005      	str	r0, [sp, #20]
 800d64a:	3307      	adds	r3, #7
 800d64c:	f023 0307 	bic.w	r3, r3, #7
 800d650:	f103 0208 	add.w	r2, r3, #8
 800d654:	f894 a018 	ldrb.w	sl, [r4, #24]
 800d658:	f8d4 b000 	ldr.w	fp, [r4]
 800d65c:	f8c8 2000 	str.w	r2, [r8]
 800d660:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d664:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800d668:	9307      	str	r3, [sp, #28]
 800d66a:	f8cd 8018 	str.w	r8, [sp, #24]
 800d66e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800d672:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d676:	4b9c      	ldr	r3, [pc, #624]	@ (800d8e8 <_printf_float+0x2c8>)
 800d678:	f04f 32ff 	mov.w	r2, #4294967295
 800d67c:	f7f3 fa56 	bl	8000b2c <__aeabi_dcmpun>
 800d680:	bb70      	cbnz	r0, 800d6e0 <_printf_float+0xc0>
 800d682:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d686:	4b98      	ldr	r3, [pc, #608]	@ (800d8e8 <_printf_float+0x2c8>)
 800d688:	f04f 32ff 	mov.w	r2, #4294967295
 800d68c:	f7f3 fa30 	bl	8000af0 <__aeabi_dcmple>
 800d690:	bb30      	cbnz	r0, 800d6e0 <_printf_float+0xc0>
 800d692:	2200      	movs	r2, #0
 800d694:	2300      	movs	r3, #0
 800d696:	4640      	mov	r0, r8
 800d698:	4649      	mov	r1, r9
 800d69a:	f7f3 fa1f 	bl	8000adc <__aeabi_dcmplt>
 800d69e:	b110      	cbz	r0, 800d6a6 <_printf_float+0x86>
 800d6a0:	232d      	movs	r3, #45	@ 0x2d
 800d6a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d6a6:	4a91      	ldr	r2, [pc, #580]	@ (800d8ec <_printf_float+0x2cc>)
 800d6a8:	4b91      	ldr	r3, [pc, #580]	@ (800d8f0 <_printf_float+0x2d0>)
 800d6aa:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800d6ae:	bf94      	ite	ls
 800d6b0:	4690      	movls	r8, r2
 800d6b2:	4698      	movhi	r8, r3
 800d6b4:	2303      	movs	r3, #3
 800d6b6:	6123      	str	r3, [r4, #16]
 800d6b8:	f02b 0304 	bic.w	r3, fp, #4
 800d6bc:	6023      	str	r3, [r4, #0]
 800d6be:	f04f 0900 	mov.w	r9, #0
 800d6c2:	9700      	str	r7, [sp, #0]
 800d6c4:	4633      	mov	r3, r6
 800d6c6:	aa0b      	add	r2, sp, #44	@ 0x2c
 800d6c8:	4621      	mov	r1, r4
 800d6ca:	4628      	mov	r0, r5
 800d6cc:	f000 f9d2 	bl	800da74 <_printf_common>
 800d6d0:	3001      	adds	r0, #1
 800d6d2:	f040 808d 	bne.w	800d7f0 <_printf_float+0x1d0>
 800d6d6:	f04f 30ff 	mov.w	r0, #4294967295
 800d6da:	b00d      	add	sp, #52	@ 0x34
 800d6dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6e0:	4642      	mov	r2, r8
 800d6e2:	464b      	mov	r3, r9
 800d6e4:	4640      	mov	r0, r8
 800d6e6:	4649      	mov	r1, r9
 800d6e8:	f7f3 fa20 	bl	8000b2c <__aeabi_dcmpun>
 800d6ec:	b140      	cbz	r0, 800d700 <_printf_float+0xe0>
 800d6ee:	464b      	mov	r3, r9
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	bfbc      	itt	lt
 800d6f4:	232d      	movlt	r3, #45	@ 0x2d
 800d6f6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800d6fa:	4a7e      	ldr	r2, [pc, #504]	@ (800d8f4 <_printf_float+0x2d4>)
 800d6fc:	4b7e      	ldr	r3, [pc, #504]	@ (800d8f8 <_printf_float+0x2d8>)
 800d6fe:	e7d4      	b.n	800d6aa <_printf_float+0x8a>
 800d700:	6863      	ldr	r3, [r4, #4]
 800d702:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800d706:	9206      	str	r2, [sp, #24]
 800d708:	1c5a      	adds	r2, r3, #1
 800d70a:	d13b      	bne.n	800d784 <_printf_float+0x164>
 800d70c:	2306      	movs	r3, #6
 800d70e:	6063      	str	r3, [r4, #4]
 800d710:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800d714:	2300      	movs	r3, #0
 800d716:	6022      	str	r2, [r4, #0]
 800d718:	9303      	str	r3, [sp, #12]
 800d71a:	ab0a      	add	r3, sp, #40	@ 0x28
 800d71c:	e9cd a301 	strd	sl, r3, [sp, #4]
 800d720:	ab09      	add	r3, sp, #36	@ 0x24
 800d722:	9300      	str	r3, [sp, #0]
 800d724:	6861      	ldr	r1, [r4, #4]
 800d726:	ec49 8b10 	vmov	d0, r8, r9
 800d72a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800d72e:	4628      	mov	r0, r5
 800d730:	f7ff fed6 	bl	800d4e0 <__cvt>
 800d734:	9b06      	ldr	r3, [sp, #24]
 800d736:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d738:	2b47      	cmp	r3, #71	@ 0x47
 800d73a:	4680      	mov	r8, r0
 800d73c:	d129      	bne.n	800d792 <_printf_float+0x172>
 800d73e:	1cc8      	adds	r0, r1, #3
 800d740:	db02      	blt.n	800d748 <_printf_float+0x128>
 800d742:	6863      	ldr	r3, [r4, #4]
 800d744:	4299      	cmp	r1, r3
 800d746:	dd41      	ble.n	800d7cc <_printf_float+0x1ac>
 800d748:	f1aa 0a02 	sub.w	sl, sl, #2
 800d74c:	fa5f fa8a 	uxtb.w	sl, sl
 800d750:	3901      	subs	r1, #1
 800d752:	4652      	mov	r2, sl
 800d754:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800d758:	9109      	str	r1, [sp, #36]	@ 0x24
 800d75a:	f7ff ff26 	bl	800d5aa <__exponent>
 800d75e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d760:	1813      	adds	r3, r2, r0
 800d762:	2a01      	cmp	r2, #1
 800d764:	4681      	mov	r9, r0
 800d766:	6123      	str	r3, [r4, #16]
 800d768:	dc02      	bgt.n	800d770 <_printf_float+0x150>
 800d76a:	6822      	ldr	r2, [r4, #0]
 800d76c:	07d2      	lsls	r2, r2, #31
 800d76e:	d501      	bpl.n	800d774 <_printf_float+0x154>
 800d770:	3301      	adds	r3, #1
 800d772:	6123      	str	r3, [r4, #16]
 800d774:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d0a2      	beq.n	800d6c2 <_printf_float+0xa2>
 800d77c:	232d      	movs	r3, #45	@ 0x2d
 800d77e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d782:	e79e      	b.n	800d6c2 <_printf_float+0xa2>
 800d784:	9a06      	ldr	r2, [sp, #24]
 800d786:	2a47      	cmp	r2, #71	@ 0x47
 800d788:	d1c2      	bne.n	800d710 <_printf_float+0xf0>
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d1c0      	bne.n	800d710 <_printf_float+0xf0>
 800d78e:	2301      	movs	r3, #1
 800d790:	e7bd      	b.n	800d70e <_printf_float+0xee>
 800d792:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d796:	d9db      	bls.n	800d750 <_printf_float+0x130>
 800d798:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800d79c:	d118      	bne.n	800d7d0 <_printf_float+0x1b0>
 800d79e:	2900      	cmp	r1, #0
 800d7a0:	6863      	ldr	r3, [r4, #4]
 800d7a2:	dd0b      	ble.n	800d7bc <_printf_float+0x19c>
 800d7a4:	6121      	str	r1, [r4, #16]
 800d7a6:	b913      	cbnz	r3, 800d7ae <_printf_float+0x18e>
 800d7a8:	6822      	ldr	r2, [r4, #0]
 800d7aa:	07d0      	lsls	r0, r2, #31
 800d7ac:	d502      	bpl.n	800d7b4 <_printf_float+0x194>
 800d7ae:	3301      	adds	r3, #1
 800d7b0:	440b      	add	r3, r1
 800d7b2:	6123      	str	r3, [r4, #16]
 800d7b4:	65a1      	str	r1, [r4, #88]	@ 0x58
 800d7b6:	f04f 0900 	mov.w	r9, #0
 800d7ba:	e7db      	b.n	800d774 <_printf_float+0x154>
 800d7bc:	b913      	cbnz	r3, 800d7c4 <_printf_float+0x1a4>
 800d7be:	6822      	ldr	r2, [r4, #0]
 800d7c0:	07d2      	lsls	r2, r2, #31
 800d7c2:	d501      	bpl.n	800d7c8 <_printf_float+0x1a8>
 800d7c4:	3302      	adds	r3, #2
 800d7c6:	e7f4      	b.n	800d7b2 <_printf_float+0x192>
 800d7c8:	2301      	movs	r3, #1
 800d7ca:	e7f2      	b.n	800d7b2 <_printf_float+0x192>
 800d7cc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800d7d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d7d2:	4299      	cmp	r1, r3
 800d7d4:	db05      	blt.n	800d7e2 <_printf_float+0x1c2>
 800d7d6:	6823      	ldr	r3, [r4, #0]
 800d7d8:	6121      	str	r1, [r4, #16]
 800d7da:	07d8      	lsls	r0, r3, #31
 800d7dc:	d5ea      	bpl.n	800d7b4 <_printf_float+0x194>
 800d7de:	1c4b      	adds	r3, r1, #1
 800d7e0:	e7e7      	b.n	800d7b2 <_printf_float+0x192>
 800d7e2:	2900      	cmp	r1, #0
 800d7e4:	bfd4      	ite	le
 800d7e6:	f1c1 0202 	rsble	r2, r1, #2
 800d7ea:	2201      	movgt	r2, #1
 800d7ec:	4413      	add	r3, r2
 800d7ee:	e7e0      	b.n	800d7b2 <_printf_float+0x192>
 800d7f0:	6823      	ldr	r3, [r4, #0]
 800d7f2:	055a      	lsls	r2, r3, #21
 800d7f4:	d407      	bmi.n	800d806 <_printf_float+0x1e6>
 800d7f6:	6923      	ldr	r3, [r4, #16]
 800d7f8:	4642      	mov	r2, r8
 800d7fa:	4631      	mov	r1, r6
 800d7fc:	4628      	mov	r0, r5
 800d7fe:	47b8      	blx	r7
 800d800:	3001      	adds	r0, #1
 800d802:	d12b      	bne.n	800d85c <_printf_float+0x23c>
 800d804:	e767      	b.n	800d6d6 <_printf_float+0xb6>
 800d806:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d80a:	f240 80dd 	bls.w	800d9c8 <_printf_float+0x3a8>
 800d80e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d812:	2200      	movs	r2, #0
 800d814:	2300      	movs	r3, #0
 800d816:	f7f3 f957 	bl	8000ac8 <__aeabi_dcmpeq>
 800d81a:	2800      	cmp	r0, #0
 800d81c:	d033      	beq.n	800d886 <_printf_float+0x266>
 800d81e:	4a37      	ldr	r2, [pc, #220]	@ (800d8fc <_printf_float+0x2dc>)
 800d820:	2301      	movs	r3, #1
 800d822:	4631      	mov	r1, r6
 800d824:	4628      	mov	r0, r5
 800d826:	47b8      	blx	r7
 800d828:	3001      	adds	r0, #1
 800d82a:	f43f af54 	beq.w	800d6d6 <_printf_float+0xb6>
 800d82e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800d832:	4543      	cmp	r3, r8
 800d834:	db02      	blt.n	800d83c <_printf_float+0x21c>
 800d836:	6823      	ldr	r3, [r4, #0]
 800d838:	07d8      	lsls	r0, r3, #31
 800d83a:	d50f      	bpl.n	800d85c <_printf_float+0x23c>
 800d83c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d840:	4631      	mov	r1, r6
 800d842:	4628      	mov	r0, r5
 800d844:	47b8      	blx	r7
 800d846:	3001      	adds	r0, #1
 800d848:	f43f af45 	beq.w	800d6d6 <_printf_float+0xb6>
 800d84c:	f04f 0900 	mov.w	r9, #0
 800d850:	f108 38ff 	add.w	r8, r8, #4294967295
 800d854:	f104 0a1a 	add.w	sl, r4, #26
 800d858:	45c8      	cmp	r8, r9
 800d85a:	dc09      	bgt.n	800d870 <_printf_float+0x250>
 800d85c:	6823      	ldr	r3, [r4, #0]
 800d85e:	079b      	lsls	r3, r3, #30
 800d860:	f100 8103 	bmi.w	800da6a <_printf_float+0x44a>
 800d864:	68e0      	ldr	r0, [r4, #12]
 800d866:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d868:	4298      	cmp	r0, r3
 800d86a:	bfb8      	it	lt
 800d86c:	4618      	movlt	r0, r3
 800d86e:	e734      	b.n	800d6da <_printf_float+0xba>
 800d870:	2301      	movs	r3, #1
 800d872:	4652      	mov	r2, sl
 800d874:	4631      	mov	r1, r6
 800d876:	4628      	mov	r0, r5
 800d878:	47b8      	blx	r7
 800d87a:	3001      	adds	r0, #1
 800d87c:	f43f af2b 	beq.w	800d6d6 <_printf_float+0xb6>
 800d880:	f109 0901 	add.w	r9, r9, #1
 800d884:	e7e8      	b.n	800d858 <_printf_float+0x238>
 800d886:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d888:	2b00      	cmp	r3, #0
 800d88a:	dc39      	bgt.n	800d900 <_printf_float+0x2e0>
 800d88c:	4a1b      	ldr	r2, [pc, #108]	@ (800d8fc <_printf_float+0x2dc>)
 800d88e:	2301      	movs	r3, #1
 800d890:	4631      	mov	r1, r6
 800d892:	4628      	mov	r0, r5
 800d894:	47b8      	blx	r7
 800d896:	3001      	adds	r0, #1
 800d898:	f43f af1d 	beq.w	800d6d6 <_printf_float+0xb6>
 800d89c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800d8a0:	ea59 0303 	orrs.w	r3, r9, r3
 800d8a4:	d102      	bne.n	800d8ac <_printf_float+0x28c>
 800d8a6:	6823      	ldr	r3, [r4, #0]
 800d8a8:	07d9      	lsls	r1, r3, #31
 800d8aa:	d5d7      	bpl.n	800d85c <_printf_float+0x23c>
 800d8ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d8b0:	4631      	mov	r1, r6
 800d8b2:	4628      	mov	r0, r5
 800d8b4:	47b8      	blx	r7
 800d8b6:	3001      	adds	r0, #1
 800d8b8:	f43f af0d 	beq.w	800d6d6 <_printf_float+0xb6>
 800d8bc:	f04f 0a00 	mov.w	sl, #0
 800d8c0:	f104 0b1a 	add.w	fp, r4, #26
 800d8c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d8c6:	425b      	negs	r3, r3
 800d8c8:	4553      	cmp	r3, sl
 800d8ca:	dc01      	bgt.n	800d8d0 <_printf_float+0x2b0>
 800d8cc:	464b      	mov	r3, r9
 800d8ce:	e793      	b.n	800d7f8 <_printf_float+0x1d8>
 800d8d0:	2301      	movs	r3, #1
 800d8d2:	465a      	mov	r2, fp
 800d8d4:	4631      	mov	r1, r6
 800d8d6:	4628      	mov	r0, r5
 800d8d8:	47b8      	blx	r7
 800d8da:	3001      	adds	r0, #1
 800d8dc:	f43f aefb 	beq.w	800d6d6 <_printf_float+0xb6>
 800d8e0:	f10a 0a01 	add.w	sl, sl, #1
 800d8e4:	e7ee      	b.n	800d8c4 <_printf_float+0x2a4>
 800d8e6:	bf00      	nop
 800d8e8:	7fefffff 	.word	0x7fefffff
 800d8ec:	08010470 	.word	0x08010470
 800d8f0:	08010474 	.word	0x08010474
 800d8f4:	08010478 	.word	0x08010478
 800d8f8:	0801047c 	.word	0x0801047c
 800d8fc:	08010480 	.word	0x08010480
 800d900:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d902:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d906:	4553      	cmp	r3, sl
 800d908:	bfa8      	it	ge
 800d90a:	4653      	movge	r3, sl
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	4699      	mov	r9, r3
 800d910:	dc36      	bgt.n	800d980 <_printf_float+0x360>
 800d912:	f04f 0b00 	mov.w	fp, #0
 800d916:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d91a:	f104 021a 	add.w	r2, r4, #26
 800d91e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d920:	9306      	str	r3, [sp, #24]
 800d922:	eba3 0309 	sub.w	r3, r3, r9
 800d926:	455b      	cmp	r3, fp
 800d928:	dc31      	bgt.n	800d98e <_printf_float+0x36e>
 800d92a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d92c:	459a      	cmp	sl, r3
 800d92e:	dc3a      	bgt.n	800d9a6 <_printf_float+0x386>
 800d930:	6823      	ldr	r3, [r4, #0]
 800d932:	07da      	lsls	r2, r3, #31
 800d934:	d437      	bmi.n	800d9a6 <_printf_float+0x386>
 800d936:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d938:	ebaa 0903 	sub.w	r9, sl, r3
 800d93c:	9b06      	ldr	r3, [sp, #24]
 800d93e:	ebaa 0303 	sub.w	r3, sl, r3
 800d942:	4599      	cmp	r9, r3
 800d944:	bfa8      	it	ge
 800d946:	4699      	movge	r9, r3
 800d948:	f1b9 0f00 	cmp.w	r9, #0
 800d94c:	dc33      	bgt.n	800d9b6 <_printf_float+0x396>
 800d94e:	f04f 0800 	mov.w	r8, #0
 800d952:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d956:	f104 0b1a 	add.w	fp, r4, #26
 800d95a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d95c:	ebaa 0303 	sub.w	r3, sl, r3
 800d960:	eba3 0309 	sub.w	r3, r3, r9
 800d964:	4543      	cmp	r3, r8
 800d966:	f77f af79 	ble.w	800d85c <_printf_float+0x23c>
 800d96a:	2301      	movs	r3, #1
 800d96c:	465a      	mov	r2, fp
 800d96e:	4631      	mov	r1, r6
 800d970:	4628      	mov	r0, r5
 800d972:	47b8      	blx	r7
 800d974:	3001      	adds	r0, #1
 800d976:	f43f aeae 	beq.w	800d6d6 <_printf_float+0xb6>
 800d97a:	f108 0801 	add.w	r8, r8, #1
 800d97e:	e7ec      	b.n	800d95a <_printf_float+0x33a>
 800d980:	4642      	mov	r2, r8
 800d982:	4631      	mov	r1, r6
 800d984:	4628      	mov	r0, r5
 800d986:	47b8      	blx	r7
 800d988:	3001      	adds	r0, #1
 800d98a:	d1c2      	bne.n	800d912 <_printf_float+0x2f2>
 800d98c:	e6a3      	b.n	800d6d6 <_printf_float+0xb6>
 800d98e:	2301      	movs	r3, #1
 800d990:	4631      	mov	r1, r6
 800d992:	4628      	mov	r0, r5
 800d994:	9206      	str	r2, [sp, #24]
 800d996:	47b8      	blx	r7
 800d998:	3001      	adds	r0, #1
 800d99a:	f43f ae9c 	beq.w	800d6d6 <_printf_float+0xb6>
 800d99e:	9a06      	ldr	r2, [sp, #24]
 800d9a0:	f10b 0b01 	add.w	fp, fp, #1
 800d9a4:	e7bb      	b.n	800d91e <_printf_float+0x2fe>
 800d9a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d9aa:	4631      	mov	r1, r6
 800d9ac:	4628      	mov	r0, r5
 800d9ae:	47b8      	blx	r7
 800d9b0:	3001      	adds	r0, #1
 800d9b2:	d1c0      	bne.n	800d936 <_printf_float+0x316>
 800d9b4:	e68f      	b.n	800d6d6 <_printf_float+0xb6>
 800d9b6:	9a06      	ldr	r2, [sp, #24]
 800d9b8:	464b      	mov	r3, r9
 800d9ba:	4442      	add	r2, r8
 800d9bc:	4631      	mov	r1, r6
 800d9be:	4628      	mov	r0, r5
 800d9c0:	47b8      	blx	r7
 800d9c2:	3001      	adds	r0, #1
 800d9c4:	d1c3      	bne.n	800d94e <_printf_float+0x32e>
 800d9c6:	e686      	b.n	800d6d6 <_printf_float+0xb6>
 800d9c8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d9cc:	f1ba 0f01 	cmp.w	sl, #1
 800d9d0:	dc01      	bgt.n	800d9d6 <_printf_float+0x3b6>
 800d9d2:	07db      	lsls	r3, r3, #31
 800d9d4:	d536      	bpl.n	800da44 <_printf_float+0x424>
 800d9d6:	2301      	movs	r3, #1
 800d9d8:	4642      	mov	r2, r8
 800d9da:	4631      	mov	r1, r6
 800d9dc:	4628      	mov	r0, r5
 800d9de:	47b8      	blx	r7
 800d9e0:	3001      	adds	r0, #1
 800d9e2:	f43f ae78 	beq.w	800d6d6 <_printf_float+0xb6>
 800d9e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d9ea:	4631      	mov	r1, r6
 800d9ec:	4628      	mov	r0, r5
 800d9ee:	47b8      	blx	r7
 800d9f0:	3001      	adds	r0, #1
 800d9f2:	f43f ae70 	beq.w	800d6d6 <_printf_float+0xb6>
 800d9f6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d9fa:	2200      	movs	r2, #0
 800d9fc:	2300      	movs	r3, #0
 800d9fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 800da02:	f7f3 f861 	bl	8000ac8 <__aeabi_dcmpeq>
 800da06:	b9c0      	cbnz	r0, 800da3a <_printf_float+0x41a>
 800da08:	4653      	mov	r3, sl
 800da0a:	f108 0201 	add.w	r2, r8, #1
 800da0e:	4631      	mov	r1, r6
 800da10:	4628      	mov	r0, r5
 800da12:	47b8      	blx	r7
 800da14:	3001      	adds	r0, #1
 800da16:	d10c      	bne.n	800da32 <_printf_float+0x412>
 800da18:	e65d      	b.n	800d6d6 <_printf_float+0xb6>
 800da1a:	2301      	movs	r3, #1
 800da1c:	465a      	mov	r2, fp
 800da1e:	4631      	mov	r1, r6
 800da20:	4628      	mov	r0, r5
 800da22:	47b8      	blx	r7
 800da24:	3001      	adds	r0, #1
 800da26:	f43f ae56 	beq.w	800d6d6 <_printf_float+0xb6>
 800da2a:	f108 0801 	add.w	r8, r8, #1
 800da2e:	45d0      	cmp	r8, sl
 800da30:	dbf3      	blt.n	800da1a <_printf_float+0x3fa>
 800da32:	464b      	mov	r3, r9
 800da34:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800da38:	e6df      	b.n	800d7fa <_printf_float+0x1da>
 800da3a:	f04f 0800 	mov.w	r8, #0
 800da3e:	f104 0b1a 	add.w	fp, r4, #26
 800da42:	e7f4      	b.n	800da2e <_printf_float+0x40e>
 800da44:	2301      	movs	r3, #1
 800da46:	4642      	mov	r2, r8
 800da48:	e7e1      	b.n	800da0e <_printf_float+0x3ee>
 800da4a:	2301      	movs	r3, #1
 800da4c:	464a      	mov	r2, r9
 800da4e:	4631      	mov	r1, r6
 800da50:	4628      	mov	r0, r5
 800da52:	47b8      	blx	r7
 800da54:	3001      	adds	r0, #1
 800da56:	f43f ae3e 	beq.w	800d6d6 <_printf_float+0xb6>
 800da5a:	f108 0801 	add.w	r8, r8, #1
 800da5e:	68e3      	ldr	r3, [r4, #12]
 800da60:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800da62:	1a5b      	subs	r3, r3, r1
 800da64:	4543      	cmp	r3, r8
 800da66:	dcf0      	bgt.n	800da4a <_printf_float+0x42a>
 800da68:	e6fc      	b.n	800d864 <_printf_float+0x244>
 800da6a:	f04f 0800 	mov.w	r8, #0
 800da6e:	f104 0919 	add.w	r9, r4, #25
 800da72:	e7f4      	b.n	800da5e <_printf_float+0x43e>

0800da74 <_printf_common>:
 800da74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da78:	4616      	mov	r6, r2
 800da7a:	4698      	mov	r8, r3
 800da7c:	688a      	ldr	r2, [r1, #8]
 800da7e:	690b      	ldr	r3, [r1, #16]
 800da80:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800da84:	4293      	cmp	r3, r2
 800da86:	bfb8      	it	lt
 800da88:	4613      	movlt	r3, r2
 800da8a:	6033      	str	r3, [r6, #0]
 800da8c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800da90:	4607      	mov	r7, r0
 800da92:	460c      	mov	r4, r1
 800da94:	b10a      	cbz	r2, 800da9a <_printf_common+0x26>
 800da96:	3301      	adds	r3, #1
 800da98:	6033      	str	r3, [r6, #0]
 800da9a:	6823      	ldr	r3, [r4, #0]
 800da9c:	0699      	lsls	r1, r3, #26
 800da9e:	bf42      	ittt	mi
 800daa0:	6833      	ldrmi	r3, [r6, #0]
 800daa2:	3302      	addmi	r3, #2
 800daa4:	6033      	strmi	r3, [r6, #0]
 800daa6:	6825      	ldr	r5, [r4, #0]
 800daa8:	f015 0506 	ands.w	r5, r5, #6
 800daac:	d106      	bne.n	800dabc <_printf_common+0x48>
 800daae:	f104 0a19 	add.w	sl, r4, #25
 800dab2:	68e3      	ldr	r3, [r4, #12]
 800dab4:	6832      	ldr	r2, [r6, #0]
 800dab6:	1a9b      	subs	r3, r3, r2
 800dab8:	42ab      	cmp	r3, r5
 800daba:	dc26      	bgt.n	800db0a <_printf_common+0x96>
 800dabc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800dac0:	6822      	ldr	r2, [r4, #0]
 800dac2:	3b00      	subs	r3, #0
 800dac4:	bf18      	it	ne
 800dac6:	2301      	movne	r3, #1
 800dac8:	0692      	lsls	r2, r2, #26
 800daca:	d42b      	bmi.n	800db24 <_printf_common+0xb0>
 800dacc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800dad0:	4641      	mov	r1, r8
 800dad2:	4638      	mov	r0, r7
 800dad4:	47c8      	blx	r9
 800dad6:	3001      	adds	r0, #1
 800dad8:	d01e      	beq.n	800db18 <_printf_common+0xa4>
 800dada:	6823      	ldr	r3, [r4, #0]
 800dadc:	6922      	ldr	r2, [r4, #16]
 800dade:	f003 0306 	and.w	r3, r3, #6
 800dae2:	2b04      	cmp	r3, #4
 800dae4:	bf02      	ittt	eq
 800dae6:	68e5      	ldreq	r5, [r4, #12]
 800dae8:	6833      	ldreq	r3, [r6, #0]
 800daea:	1aed      	subeq	r5, r5, r3
 800daec:	68a3      	ldr	r3, [r4, #8]
 800daee:	bf0c      	ite	eq
 800daf0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800daf4:	2500      	movne	r5, #0
 800daf6:	4293      	cmp	r3, r2
 800daf8:	bfc4      	itt	gt
 800dafa:	1a9b      	subgt	r3, r3, r2
 800dafc:	18ed      	addgt	r5, r5, r3
 800dafe:	2600      	movs	r6, #0
 800db00:	341a      	adds	r4, #26
 800db02:	42b5      	cmp	r5, r6
 800db04:	d11a      	bne.n	800db3c <_printf_common+0xc8>
 800db06:	2000      	movs	r0, #0
 800db08:	e008      	b.n	800db1c <_printf_common+0xa8>
 800db0a:	2301      	movs	r3, #1
 800db0c:	4652      	mov	r2, sl
 800db0e:	4641      	mov	r1, r8
 800db10:	4638      	mov	r0, r7
 800db12:	47c8      	blx	r9
 800db14:	3001      	adds	r0, #1
 800db16:	d103      	bne.n	800db20 <_printf_common+0xac>
 800db18:	f04f 30ff 	mov.w	r0, #4294967295
 800db1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db20:	3501      	adds	r5, #1
 800db22:	e7c6      	b.n	800dab2 <_printf_common+0x3e>
 800db24:	18e1      	adds	r1, r4, r3
 800db26:	1c5a      	adds	r2, r3, #1
 800db28:	2030      	movs	r0, #48	@ 0x30
 800db2a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800db2e:	4422      	add	r2, r4
 800db30:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800db34:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800db38:	3302      	adds	r3, #2
 800db3a:	e7c7      	b.n	800dacc <_printf_common+0x58>
 800db3c:	2301      	movs	r3, #1
 800db3e:	4622      	mov	r2, r4
 800db40:	4641      	mov	r1, r8
 800db42:	4638      	mov	r0, r7
 800db44:	47c8      	blx	r9
 800db46:	3001      	adds	r0, #1
 800db48:	d0e6      	beq.n	800db18 <_printf_common+0xa4>
 800db4a:	3601      	adds	r6, #1
 800db4c:	e7d9      	b.n	800db02 <_printf_common+0x8e>
	...

0800db50 <_printf_i>:
 800db50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800db54:	7e0f      	ldrb	r7, [r1, #24]
 800db56:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800db58:	2f78      	cmp	r7, #120	@ 0x78
 800db5a:	4691      	mov	r9, r2
 800db5c:	4680      	mov	r8, r0
 800db5e:	460c      	mov	r4, r1
 800db60:	469a      	mov	sl, r3
 800db62:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800db66:	d807      	bhi.n	800db78 <_printf_i+0x28>
 800db68:	2f62      	cmp	r7, #98	@ 0x62
 800db6a:	d80a      	bhi.n	800db82 <_printf_i+0x32>
 800db6c:	2f00      	cmp	r7, #0
 800db6e:	f000 80d2 	beq.w	800dd16 <_printf_i+0x1c6>
 800db72:	2f58      	cmp	r7, #88	@ 0x58
 800db74:	f000 80b9 	beq.w	800dcea <_printf_i+0x19a>
 800db78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800db7c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800db80:	e03a      	b.n	800dbf8 <_printf_i+0xa8>
 800db82:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800db86:	2b15      	cmp	r3, #21
 800db88:	d8f6      	bhi.n	800db78 <_printf_i+0x28>
 800db8a:	a101      	add	r1, pc, #4	@ (adr r1, 800db90 <_printf_i+0x40>)
 800db8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800db90:	0800dbe9 	.word	0x0800dbe9
 800db94:	0800dbfd 	.word	0x0800dbfd
 800db98:	0800db79 	.word	0x0800db79
 800db9c:	0800db79 	.word	0x0800db79
 800dba0:	0800db79 	.word	0x0800db79
 800dba4:	0800db79 	.word	0x0800db79
 800dba8:	0800dbfd 	.word	0x0800dbfd
 800dbac:	0800db79 	.word	0x0800db79
 800dbb0:	0800db79 	.word	0x0800db79
 800dbb4:	0800db79 	.word	0x0800db79
 800dbb8:	0800db79 	.word	0x0800db79
 800dbbc:	0800dcfd 	.word	0x0800dcfd
 800dbc0:	0800dc27 	.word	0x0800dc27
 800dbc4:	0800dcb7 	.word	0x0800dcb7
 800dbc8:	0800db79 	.word	0x0800db79
 800dbcc:	0800db79 	.word	0x0800db79
 800dbd0:	0800dd1f 	.word	0x0800dd1f
 800dbd4:	0800db79 	.word	0x0800db79
 800dbd8:	0800dc27 	.word	0x0800dc27
 800dbdc:	0800db79 	.word	0x0800db79
 800dbe0:	0800db79 	.word	0x0800db79
 800dbe4:	0800dcbf 	.word	0x0800dcbf
 800dbe8:	6833      	ldr	r3, [r6, #0]
 800dbea:	1d1a      	adds	r2, r3, #4
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	6032      	str	r2, [r6, #0]
 800dbf0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dbf4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800dbf8:	2301      	movs	r3, #1
 800dbfa:	e09d      	b.n	800dd38 <_printf_i+0x1e8>
 800dbfc:	6833      	ldr	r3, [r6, #0]
 800dbfe:	6820      	ldr	r0, [r4, #0]
 800dc00:	1d19      	adds	r1, r3, #4
 800dc02:	6031      	str	r1, [r6, #0]
 800dc04:	0606      	lsls	r6, r0, #24
 800dc06:	d501      	bpl.n	800dc0c <_printf_i+0xbc>
 800dc08:	681d      	ldr	r5, [r3, #0]
 800dc0a:	e003      	b.n	800dc14 <_printf_i+0xc4>
 800dc0c:	0645      	lsls	r5, r0, #25
 800dc0e:	d5fb      	bpl.n	800dc08 <_printf_i+0xb8>
 800dc10:	f9b3 5000 	ldrsh.w	r5, [r3]
 800dc14:	2d00      	cmp	r5, #0
 800dc16:	da03      	bge.n	800dc20 <_printf_i+0xd0>
 800dc18:	232d      	movs	r3, #45	@ 0x2d
 800dc1a:	426d      	negs	r5, r5
 800dc1c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dc20:	4859      	ldr	r0, [pc, #356]	@ (800dd88 <_printf_i+0x238>)
 800dc22:	230a      	movs	r3, #10
 800dc24:	e011      	b.n	800dc4a <_printf_i+0xfa>
 800dc26:	6821      	ldr	r1, [r4, #0]
 800dc28:	6833      	ldr	r3, [r6, #0]
 800dc2a:	0608      	lsls	r0, r1, #24
 800dc2c:	f853 5b04 	ldr.w	r5, [r3], #4
 800dc30:	d402      	bmi.n	800dc38 <_printf_i+0xe8>
 800dc32:	0649      	lsls	r1, r1, #25
 800dc34:	bf48      	it	mi
 800dc36:	b2ad      	uxthmi	r5, r5
 800dc38:	2f6f      	cmp	r7, #111	@ 0x6f
 800dc3a:	4853      	ldr	r0, [pc, #332]	@ (800dd88 <_printf_i+0x238>)
 800dc3c:	6033      	str	r3, [r6, #0]
 800dc3e:	bf14      	ite	ne
 800dc40:	230a      	movne	r3, #10
 800dc42:	2308      	moveq	r3, #8
 800dc44:	2100      	movs	r1, #0
 800dc46:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800dc4a:	6866      	ldr	r6, [r4, #4]
 800dc4c:	60a6      	str	r6, [r4, #8]
 800dc4e:	2e00      	cmp	r6, #0
 800dc50:	bfa2      	ittt	ge
 800dc52:	6821      	ldrge	r1, [r4, #0]
 800dc54:	f021 0104 	bicge.w	r1, r1, #4
 800dc58:	6021      	strge	r1, [r4, #0]
 800dc5a:	b90d      	cbnz	r5, 800dc60 <_printf_i+0x110>
 800dc5c:	2e00      	cmp	r6, #0
 800dc5e:	d04b      	beq.n	800dcf8 <_printf_i+0x1a8>
 800dc60:	4616      	mov	r6, r2
 800dc62:	fbb5 f1f3 	udiv	r1, r5, r3
 800dc66:	fb03 5711 	mls	r7, r3, r1, r5
 800dc6a:	5dc7      	ldrb	r7, [r0, r7]
 800dc6c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800dc70:	462f      	mov	r7, r5
 800dc72:	42bb      	cmp	r3, r7
 800dc74:	460d      	mov	r5, r1
 800dc76:	d9f4      	bls.n	800dc62 <_printf_i+0x112>
 800dc78:	2b08      	cmp	r3, #8
 800dc7a:	d10b      	bne.n	800dc94 <_printf_i+0x144>
 800dc7c:	6823      	ldr	r3, [r4, #0]
 800dc7e:	07df      	lsls	r7, r3, #31
 800dc80:	d508      	bpl.n	800dc94 <_printf_i+0x144>
 800dc82:	6923      	ldr	r3, [r4, #16]
 800dc84:	6861      	ldr	r1, [r4, #4]
 800dc86:	4299      	cmp	r1, r3
 800dc88:	bfde      	ittt	le
 800dc8a:	2330      	movle	r3, #48	@ 0x30
 800dc8c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800dc90:	f106 36ff 	addle.w	r6, r6, #4294967295
 800dc94:	1b92      	subs	r2, r2, r6
 800dc96:	6122      	str	r2, [r4, #16]
 800dc98:	f8cd a000 	str.w	sl, [sp]
 800dc9c:	464b      	mov	r3, r9
 800dc9e:	aa03      	add	r2, sp, #12
 800dca0:	4621      	mov	r1, r4
 800dca2:	4640      	mov	r0, r8
 800dca4:	f7ff fee6 	bl	800da74 <_printf_common>
 800dca8:	3001      	adds	r0, #1
 800dcaa:	d14a      	bne.n	800dd42 <_printf_i+0x1f2>
 800dcac:	f04f 30ff 	mov.w	r0, #4294967295
 800dcb0:	b004      	add	sp, #16
 800dcb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dcb6:	6823      	ldr	r3, [r4, #0]
 800dcb8:	f043 0320 	orr.w	r3, r3, #32
 800dcbc:	6023      	str	r3, [r4, #0]
 800dcbe:	4833      	ldr	r0, [pc, #204]	@ (800dd8c <_printf_i+0x23c>)
 800dcc0:	2778      	movs	r7, #120	@ 0x78
 800dcc2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800dcc6:	6823      	ldr	r3, [r4, #0]
 800dcc8:	6831      	ldr	r1, [r6, #0]
 800dcca:	061f      	lsls	r7, r3, #24
 800dccc:	f851 5b04 	ldr.w	r5, [r1], #4
 800dcd0:	d402      	bmi.n	800dcd8 <_printf_i+0x188>
 800dcd2:	065f      	lsls	r7, r3, #25
 800dcd4:	bf48      	it	mi
 800dcd6:	b2ad      	uxthmi	r5, r5
 800dcd8:	6031      	str	r1, [r6, #0]
 800dcda:	07d9      	lsls	r1, r3, #31
 800dcdc:	bf44      	itt	mi
 800dcde:	f043 0320 	orrmi.w	r3, r3, #32
 800dce2:	6023      	strmi	r3, [r4, #0]
 800dce4:	b11d      	cbz	r5, 800dcee <_printf_i+0x19e>
 800dce6:	2310      	movs	r3, #16
 800dce8:	e7ac      	b.n	800dc44 <_printf_i+0xf4>
 800dcea:	4827      	ldr	r0, [pc, #156]	@ (800dd88 <_printf_i+0x238>)
 800dcec:	e7e9      	b.n	800dcc2 <_printf_i+0x172>
 800dcee:	6823      	ldr	r3, [r4, #0]
 800dcf0:	f023 0320 	bic.w	r3, r3, #32
 800dcf4:	6023      	str	r3, [r4, #0]
 800dcf6:	e7f6      	b.n	800dce6 <_printf_i+0x196>
 800dcf8:	4616      	mov	r6, r2
 800dcfa:	e7bd      	b.n	800dc78 <_printf_i+0x128>
 800dcfc:	6833      	ldr	r3, [r6, #0]
 800dcfe:	6825      	ldr	r5, [r4, #0]
 800dd00:	6961      	ldr	r1, [r4, #20]
 800dd02:	1d18      	adds	r0, r3, #4
 800dd04:	6030      	str	r0, [r6, #0]
 800dd06:	062e      	lsls	r6, r5, #24
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	d501      	bpl.n	800dd10 <_printf_i+0x1c0>
 800dd0c:	6019      	str	r1, [r3, #0]
 800dd0e:	e002      	b.n	800dd16 <_printf_i+0x1c6>
 800dd10:	0668      	lsls	r0, r5, #25
 800dd12:	d5fb      	bpl.n	800dd0c <_printf_i+0x1bc>
 800dd14:	8019      	strh	r1, [r3, #0]
 800dd16:	2300      	movs	r3, #0
 800dd18:	6123      	str	r3, [r4, #16]
 800dd1a:	4616      	mov	r6, r2
 800dd1c:	e7bc      	b.n	800dc98 <_printf_i+0x148>
 800dd1e:	6833      	ldr	r3, [r6, #0]
 800dd20:	1d1a      	adds	r2, r3, #4
 800dd22:	6032      	str	r2, [r6, #0]
 800dd24:	681e      	ldr	r6, [r3, #0]
 800dd26:	6862      	ldr	r2, [r4, #4]
 800dd28:	2100      	movs	r1, #0
 800dd2a:	4630      	mov	r0, r6
 800dd2c:	f7f2 fa50 	bl	80001d0 <memchr>
 800dd30:	b108      	cbz	r0, 800dd36 <_printf_i+0x1e6>
 800dd32:	1b80      	subs	r0, r0, r6
 800dd34:	6060      	str	r0, [r4, #4]
 800dd36:	6863      	ldr	r3, [r4, #4]
 800dd38:	6123      	str	r3, [r4, #16]
 800dd3a:	2300      	movs	r3, #0
 800dd3c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dd40:	e7aa      	b.n	800dc98 <_printf_i+0x148>
 800dd42:	6923      	ldr	r3, [r4, #16]
 800dd44:	4632      	mov	r2, r6
 800dd46:	4649      	mov	r1, r9
 800dd48:	4640      	mov	r0, r8
 800dd4a:	47d0      	blx	sl
 800dd4c:	3001      	adds	r0, #1
 800dd4e:	d0ad      	beq.n	800dcac <_printf_i+0x15c>
 800dd50:	6823      	ldr	r3, [r4, #0]
 800dd52:	079b      	lsls	r3, r3, #30
 800dd54:	d413      	bmi.n	800dd7e <_printf_i+0x22e>
 800dd56:	68e0      	ldr	r0, [r4, #12]
 800dd58:	9b03      	ldr	r3, [sp, #12]
 800dd5a:	4298      	cmp	r0, r3
 800dd5c:	bfb8      	it	lt
 800dd5e:	4618      	movlt	r0, r3
 800dd60:	e7a6      	b.n	800dcb0 <_printf_i+0x160>
 800dd62:	2301      	movs	r3, #1
 800dd64:	4632      	mov	r2, r6
 800dd66:	4649      	mov	r1, r9
 800dd68:	4640      	mov	r0, r8
 800dd6a:	47d0      	blx	sl
 800dd6c:	3001      	adds	r0, #1
 800dd6e:	d09d      	beq.n	800dcac <_printf_i+0x15c>
 800dd70:	3501      	adds	r5, #1
 800dd72:	68e3      	ldr	r3, [r4, #12]
 800dd74:	9903      	ldr	r1, [sp, #12]
 800dd76:	1a5b      	subs	r3, r3, r1
 800dd78:	42ab      	cmp	r3, r5
 800dd7a:	dcf2      	bgt.n	800dd62 <_printf_i+0x212>
 800dd7c:	e7eb      	b.n	800dd56 <_printf_i+0x206>
 800dd7e:	2500      	movs	r5, #0
 800dd80:	f104 0619 	add.w	r6, r4, #25
 800dd84:	e7f5      	b.n	800dd72 <_printf_i+0x222>
 800dd86:	bf00      	nop
 800dd88:	08010482 	.word	0x08010482
 800dd8c:	08010493 	.word	0x08010493

0800dd90 <std>:
 800dd90:	2300      	movs	r3, #0
 800dd92:	b510      	push	{r4, lr}
 800dd94:	4604      	mov	r4, r0
 800dd96:	e9c0 3300 	strd	r3, r3, [r0]
 800dd9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dd9e:	6083      	str	r3, [r0, #8]
 800dda0:	8181      	strh	r1, [r0, #12]
 800dda2:	6643      	str	r3, [r0, #100]	@ 0x64
 800dda4:	81c2      	strh	r2, [r0, #14]
 800dda6:	6183      	str	r3, [r0, #24]
 800dda8:	4619      	mov	r1, r3
 800ddaa:	2208      	movs	r2, #8
 800ddac:	305c      	adds	r0, #92	@ 0x5c
 800ddae:	f000 f8f4 	bl	800df9a <memset>
 800ddb2:	4b0d      	ldr	r3, [pc, #52]	@ (800dde8 <std+0x58>)
 800ddb4:	6263      	str	r3, [r4, #36]	@ 0x24
 800ddb6:	4b0d      	ldr	r3, [pc, #52]	@ (800ddec <std+0x5c>)
 800ddb8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ddba:	4b0d      	ldr	r3, [pc, #52]	@ (800ddf0 <std+0x60>)
 800ddbc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ddbe:	4b0d      	ldr	r3, [pc, #52]	@ (800ddf4 <std+0x64>)
 800ddc0:	6323      	str	r3, [r4, #48]	@ 0x30
 800ddc2:	4b0d      	ldr	r3, [pc, #52]	@ (800ddf8 <std+0x68>)
 800ddc4:	6224      	str	r4, [r4, #32]
 800ddc6:	429c      	cmp	r4, r3
 800ddc8:	d006      	beq.n	800ddd8 <std+0x48>
 800ddca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ddce:	4294      	cmp	r4, r2
 800ddd0:	d002      	beq.n	800ddd8 <std+0x48>
 800ddd2:	33d0      	adds	r3, #208	@ 0xd0
 800ddd4:	429c      	cmp	r4, r3
 800ddd6:	d105      	bne.n	800dde4 <std+0x54>
 800ddd8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800dddc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dde0:	f000 b958 	b.w	800e094 <__retarget_lock_init_recursive>
 800dde4:	bd10      	pop	{r4, pc}
 800dde6:	bf00      	nop
 800dde8:	0800df15 	.word	0x0800df15
 800ddec:	0800df37 	.word	0x0800df37
 800ddf0:	0800df6f 	.word	0x0800df6f
 800ddf4:	0800df93 	.word	0x0800df93
 800ddf8:	2000239c 	.word	0x2000239c

0800ddfc <stdio_exit_handler>:
 800ddfc:	4a02      	ldr	r2, [pc, #8]	@ (800de08 <stdio_exit_handler+0xc>)
 800ddfe:	4903      	ldr	r1, [pc, #12]	@ (800de0c <stdio_exit_handler+0x10>)
 800de00:	4803      	ldr	r0, [pc, #12]	@ (800de10 <stdio_exit_handler+0x14>)
 800de02:	f000 b869 	b.w	800ded8 <_fwalk_sglue>
 800de06:	bf00      	nop
 800de08:	20000100 	.word	0x20000100
 800de0c:	0800f745 	.word	0x0800f745
 800de10:	20000110 	.word	0x20000110

0800de14 <cleanup_stdio>:
 800de14:	6841      	ldr	r1, [r0, #4]
 800de16:	4b0c      	ldr	r3, [pc, #48]	@ (800de48 <cleanup_stdio+0x34>)
 800de18:	4299      	cmp	r1, r3
 800de1a:	b510      	push	{r4, lr}
 800de1c:	4604      	mov	r4, r0
 800de1e:	d001      	beq.n	800de24 <cleanup_stdio+0x10>
 800de20:	f001 fc90 	bl	800f744 <_fflush_r>
 800de24:	68a1      	ldr	r1, [r4, #8]
 800de26:	4b09      	ldr	r3, [pc, #36]	@ (800de4c <cleanup_stdio+0x38>)
 800de28:	4299      	cmp	r1, r3
 800de2a:	d002      	beq.n	800de32 <cleanup_stdio+0x1e>
 800de2c:	4620      	mov	r0, r4
 800de2e:	f001 fc89 	bl	800f744 <_fflush_r>
 800de32:	68e1      	ldr	r1, [r4, #12]
 800de34:	4b06      	ldr	r3, [pc, #24]	@ (800de50 <cleanup_stdio+0x3c>)
 800de36:	4299      	cmp	r1, r3
 800de38:	d004      	beq.n	800de44 <cleanup_stdio+0x30>
 800de3a:	4620      	mov	r0, r4
 800de3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800de40:	f001 bc80 	b.w	800f744 <_fflush_r>
 800de44:	bd10      	pop	{r4, pc}
 800de46:	bf00      	nop
 800de48:	2000239c 	.word	0x2000239c
 800de4c:	20002404 	.word	0x20002404
 800de50:	2000246c 	.word	0x2000246c

0800de54 <global_stdio_init.part.0>:
 800de54:	b510      	push	{r4, lr}
 800de56:	4b0b      	ldr	r3, [pc, #44]	@ (800de84 <global_stdio_init.part.0+0x30>)
 800de58:	4c0b      	ldr	r4, [pc, #44]	@ (800de88 <global_stdio_init.part.0+0x34>)
 800de5a:	4a0c      	ldr	r2, [pc, #48]	@ (800de8c <global_stdio_init.part.0+0x38>)
 800de5c:	601a      	str	r2, [r3, #0]
 800de5e:	4620      	mov	r0, r4
 800de60:	2200      	movs	r2, #0
 800de62:	2104      	movs	r1, #4
 800de64:	f7ff ff94 	bl	800dd90 <std>
 800de68:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800de6c:	2201      	movs	r2, #1
 800de6e:	2109      	movs	r1, #9
 800de70:	f7ff ff8e 	bl	800dd90 <std>
 800de74:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800de78:	2202      	movs	r2, #2
 800de7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800de7e:	2112      	movs	r1, #18
 800de80:	f7ff bf86 	b.w	800dd90 <std>
 800de84:	200024d4 	.word	0x200024d4
 800de88:	2000239c 	.word	0x2000239c
 800de8c:	0800ddfd 	.word	0x0800ddfd

0800de90 <__sfp_lock_acquire>:
 800de90:	4801      	ldr	r0, [pc, #4]	@ (800de98 <__sfp_lock_acquire+0x8>)
 800de92:	f000 b900 	b.w	800e096 <__retarget_lock_acquire_recursive>
 800de96:	bf00      	nop
 800de98:	200024dd 	.word	0x200024dd

0800de9c <__sfp_lock_release>:
 800de9c:	4801      	ldr	r0, [pc, #4]	@ (800dea4 <__sfp_lock_release+0x8>)
 800de9e:	f000 b8fb 	b.w	800e098 <__retarget_lock_release_recursive>
 800dea2:	bf00      	nop
 800dea4:	200024dd 	.word	0x200024dd

0800dea8 <__sinit>:
 800dea8:	b510      	push	{r4, lr}
 800deaa:	4604      	mov	r4, r0
 800deac:	f7ff fff0 	bl	800de90 <__sfp_lock_acquire>
 800deb0:	6a23      	ldr	r3, [r4, #32]
 800deb2:	b11b      	cbz	r3, 800debc <__sinit+0x14>
 800deb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800deb8:	f7ff bff0 	b.w	800de9c <__sfp_lock_release>
 800debc:	4b04      	ldr	r3, [pc, #16]	@ (800ded0 <__sinit+0x28>)
 800debe:	6223      	str	r3, [r4, #32]
 800dec0:	4b04      	ldr	r3, [pc, #16]	@ (800ded4 <__sinit+0x2c>)
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d1f5      	bne.n	800deb4 <__sinit+0xc>
 800dec8:	f7ff ffc4 	bl	800de54 <global_stdio_init.part.0>
 800decc:	e7f2      	b.n	800deb4 <__sinit+0xc>
 800dece:	bf00      	nop
 800ded0:	0800de15 	.word	0x0800de15
 800ded4:	200024d4 	.word	0x200024d4

0800ded8 <_fwalk_sglue>:
 800ded8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dedc:	4607      	mov	r7, r0
 800dede:	4688      	mov	r8, r1
 800dee0:	4614      	mov	r4, r2
 800dee2:	2600      	movs	r6, #0
 800dee4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800dee8:	f1b9 0901 	subs.w	r9, r9, #1
 800deec:	d505      	bpl.n	800defa <_fwalk_sglue+0x22>
 800deee:	6824      	ldr	r4, [r4, #0]
 800def0:	2c00      	cmp	r4, #0
 800def2:	d1f7      	bne.n	800dee4 <_fwalk_sglue+0xc>
 800def4:	4630      	mov	r0, r6
 800def6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800defa:	89ab      	ldrh	r3, [r5, #12]
 800defc:	2b01      	cmp	r3, #1
 800defe:	d907      	bls.n	800df10 <_fwalk_sglue+0x38>
 800df00:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800df04:	3301      	adds	r3, #1
 800df06:	d003      	beq.n	800df10 <_fwalk_sglue+0x38>
 800df08:	4629      	mov	r1, r5
 800df0a:	4638      	mov	r0, r7
 800df0c:	47c0      	blx	r8
 800df0e:	4306      	orrs	r6, r0
 800df10:	3568      	adds	r5, #104	@ 0x68
 800df12:	e7e9      	b.n	800dee8 <_fwalk_sglue+0x10>

0800df14 <__sread>:
 800df14:	b510      	push	{r4, lr}
 800df16:	460c      	mov	r4, r1
 800df18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df1c:	f000 f86c 	bl	800dff8 <_read_r>
 800df20:	2800      	cmp	r0, #0
 800df22:	bfab      	itete	ge
 800df24:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800df26:	89a3      	ldrhlt	r3, [r4, #12]
 800df28:	181b      	addge	r3, r3, r0
 800df2a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800df2e:	bfac      	ite	ge
 800df30:	6563      	strge	r3, [r4, #84]	@ 0x54
 800df32:	81a3      	strhlt	r3, [r4, #12]
 800df34:	bd10      	pop	{r4, pc}

0800df36 <__swrite>:
 800df36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df3a:	461f      	mov	r7, r3
 800df3c:	898b      	ldrh	r3, [r1, #12]
 800df3e:	05db      	lsls	r3, r3, #23
 800df40:	4605      	mov	r5, r0
 800df42:	460c      	mov	r4, r1
 800df44:	4616      	mov	r6, r2
 800df46:	d505      	bpl.n	800df54 <__swrite+0x1e>
 800df48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df4c:	2302      	movs	r3, #2
 800df4e:	2200      	movs	r2, #0
 800df50:	f000 f840 	bl	800dfd4 <_lseek_r>
 800df54:	89a3      	ldrh	r3, [r4, #12]
 800df56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800df5a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800df5e:	81a3      	strh	r3, [r4, #12]
 800df60:	4632      	mov	r2, r6
 800df62:	463b      	mov	r3, r7
 800df64:	4628      	mov	r0, r5
 800df66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800df6a:	f000 b857 	b.w	800e01c <_write_r>

0800df6e <__sseek>:
 800df6e:	b510      	push	{r4, lr}
 800df70:	460c      	mov	r4, r1
 800df72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df76:	f000 f82d 	bl	800dfd4 <_lseek_r>
 800df7a:	1c43      	adds	r3, r0, #1
 800df7c:	89a3      	ldrh	r3, [r4, #12]
 800df7e:	bf15      	itete	ne
 800df80:	6560      	strne	r0, [r4, #84]	@ 0x54
 800df82:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800df86:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800df8a:	81a3      	strheq	r3, [r4, #12]
 800df8c:	bf18      	it	ne
 800df8e:	81a3      	strhne	r3, [r4, #12]
 800df90:	bd10      	pop	{r4, pc}

0800df92 <__sclose>:
 800df92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df96:	f000 b80d 	b.w	800dfb4 <_close_r>

0800df9a <memset>:
 800df9a:	4402      	add	r2, r0
 800df9c:	4603      	mov	r3, r0
 800df9e:	4293      	cmp	r3, r2
 800dfa0:	d100      	bne.n	800dfa4 <memset+0xa>
 800dfa2:	4770      	bx	lr
 800dfa4:	f803 1b01 	strb.w	r1, [r3], #1
 800dfa8:	e7f9      	b.n	800df9e <memset+0x4>
	...

0800dfac <_localeconv_r>:
 800dfac:	4800      	ldr	r0, [pc, #0]	@ (800dfb0 <_localeconv_r+0x4>)
 800dfae:	4770      	bx	lr
 800dfb0:	2000024c 	.word	0x2000024c

0800dfb4 <_close_r>:
 800dfb4:	b538      	push	{r3, r4, r5, lr}
 800dfb6:	4d06      	ldr	r5, [pc, #24]	@ (800dfd0 <_close_r+0x1c>)
 800dfb8:	2300      	movs	r3, #0
 800dfba:	4604      	mov	r4, r0
 800dfbc:	4608      	mov	r0, r1
 800dfbe:	602b      	str	r3, [r5, #0]
 800dfc0:	f7f4 fd2a 	bl	8002a18 <_close>
 800dfc4:	1c43      	adds	r3, r0, #1
 800dfc6:	d102      	bne.n	800dfce <_close_r+0x1a>
 800dfc8:	682b      	ldr	r3, [r5, #0]
 800dfca:	b103      	cbz	r3, 800dfce <_close_r+0x1a>
 800dfcc:	6023      	str	r3, [r4, #0]
 800dfce:	bd38      	pop	{r3, r4, r5, pc}
 800dfd0:	200024d8 	.word	0x200024d8

0800dfd4 <_lseek_r>:
 800dfd4:	b538      	push	{r3, r4, r5, lr}
 800dfd6:	4d07      	ldr	r5, [pc, #28]	@ (800dff4 <_lseek_r+0x20>)
 800dfd8:	4604      	mov	r4, r0
 800dfda:	4608      	mov	r0, r1
 800dfdc:	4611      	mov	r1, r2
 800dfde:	2200      	movs	r2, #0
 800dfe0:	602a      	str	r2, [r5, #0]
 800dfe2:	461a      	mov	r2, r3
 800dfe4:	f7f4 fd3f 	bl	8002a66 <_lseek>
 800dfe8:	1c43      	adds	r3, r0, #1
 800dfea:	d102      	bne.n	800dff2 <_lseek_r+0x1e>
 800dfec:	682b      	ldr	r3, [r5, #0]
 800dfee:	b103      	cbz	r3, 800dff2 <_lseek_r+0x1e>
 800dff0:	6023      	str	r3, [r4, #0]
 800dff2:	bd38      	pop	{r3, r4, r5, pc}
 800dff4:	200024d8 	.word	0x200024d8

0800dff8 <_read_r>:
 800dff8:	b538      	push	{r3, r4, r5, lr}
 800dffa:	4d07      	ldr	r5, [pc, #28]	@ (800e018 <_read_r+0x20>)
 800dffc:	4604      	mov	r4, r0
 800dffe:	4608      	mov	r0, r1
 800e000:	4611      	mov	r1, r2
 800e002:	2200      	movs	r2, #0
 800e004:	602a      	str	r2, [r5, #0]
 800e006:	461a      	mov	r2, r3
 800e008:	f7f4 fccd 	bl	80029a6 <_read>
 800e00c:	1c43      	adds	r3, r0, #1
 800e00e:	d102      	bne.n	800e016 <_read_r+0x1e>
 800e010:	682b      	ldr	r3, [r5, #0]
 800e012:	b103      	cbz	r3, 800e016 <_read_r+0x1e>
 800e014:	6023      	str	r3, [r4, #0]
 800e016:	bd38      	pop	{r3, r4, r5, pc}
 800e018:	200024d8 	.word	0x200024d8

0800e01c <_write_r>:
 800e01c:	b538      	push	{r3, r4, r5, lr}
 800e01e:	4d07      	ldr	r5, [pc, #28]	@ (800e03c <_write_r+0x20>)
 800e020:	4604      	mov	r4, r0
 800e022:	4608      	mov	r0, r1
 800e024:	4611      	mov	r1, r2
 800e026:	2200      	movs	r2, #0
 800e028:	602a      	str	r2, [r5, #0]
 800e02a:	461a      	mov	r2, r3
 800e02c:	f7f4 fcd8 	bl	80029e0 <_write>
 800e030:	1c43      	adds	r3, r0, #1
 800e032:	d102      	bne.n	800e03a <_write_r+0x1e>
 800e034:	682b      	ldr	r3, [r5, #0]
 800e036:	b103      	cbz	r3, 800e03a <_write_r+0x1e>
 800e038:	6023      	str	r3, [r4, #0]
 800e03a:	bd38      	pop	{r3, r4, r5, pc}
 800e03c:	200024d8 	.word	0x200024d8

0800e040 <__errno>:
 800e040:	4b01      	ldr	r3, [pc, #4]	@ (800e048 <__errno+0x8>)
 800e042:	6818      	ldr	r0, [r3, #0]
 800e044:	4770      	bx	lr
 800e046:	bf00      	nop
 800e048:	2000010c 	.word	0x2000010c

0800e04c <__libc_init_array>:
 800e04c:	b570      	push	{r4, r5, r6, lr}
 800e04e:	4d0d      	ldr	r5, [pc, #52]	@ (800e084 <__libc_init_array+0x38>)
 800e050:	4c0d      	ldr	r4, [pc, #52]	@ (800e088 <__libc_init_array+0x3c>)
 800e052:	1b64      	subs	r4, r4, r5
 800e054:	10a4      	asrs	r4, r4, #2
 800e056:	2600      	movs	r6, #0
 800e058:	42a6      	cmp	r6, r4
 800e05a:	d109      	bne.n	800e070 <__libc_init_array+0x24>
 800e05c:	4d0b      	ldr	r5, [pc, #44]	@ (800e08c <__libc_init_array+0x40>)
 800e05e:	4c0c      	ldr	r4, [pc, #48]	@ (800e090 <__libc_init_array+0x44>)
 800e060:	f002 f9c4 	bl	80103ec <_init>
 800e064:	1b64      	subs	r4, r4, r5
 800e066:	10a4      	asrs	r4, r4, #2
 800e068:	2600      	movs	r6, #0
 800e06a:	42a6      	cmp	r6, r4
 800e06c:	d105      	bne.n	800e07a <__libc_init_array+0x2e>
 800e06e:	bd70      	pop	{r4, r5, r6, pc}
 800e070:	f855 3b04 	ldr.w	r3, [r5], #4
 800e074:	4798      	blx	r3
 800e076:	3601      	adds	r6, #1
 800e078:	e7ee      	b.n	800e058 <__libc_init_array+0xc>
 800e07a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e07e:	4798      	blx	r3
 800e080:	3601      	adds	r6, #1
 800e082:	e7f2      	b.n	800e06a <__libc_init_array+0x1e>
 800e084:	080107e8 	.word	0x080107e8
 800e088:	080107e8 	.word	0x080107e8
 800e08c:	080107e8 	.word	0x080107e8
 800e090:	080107ec 	.word	0x080107ec

0800e094 <__retarget_lock_init_recursive>:
 800e094:	4770      	bx	lr

0800e096 <__retarget_lock_acquire_recursive>:
 800e096:	4770      	bx	lr

0800e098 <__retarget_lock_release_recursive>:
 800e098:	4770      	bx	lr

0800e09a <quorem>:
 800e09a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e09e:	6903      	ldr	r3, [r0, #16]
 800e0a0:	690c      	ldr	r4, [r1, #16]
 800e0a2:	42a3      	cmp	r3, r4
 800e0a4:	4607      	mov	r7, r0
 800e0a6:	db7e      	blt.n	800e1a6 <quorem+0x10c>
 800e0a8:	3c01      	subs	r4, #1
 800e0aa:	f101 0814 	add.w	r8, r1, #20
 800e0ae:	00a3      	lsls	r3, r4, #2
 800e0b0:	f100 0514 	add.w	r5, r0, #20
 800e0b4:	9300      	str	r3, [sp, #0]
 800e0b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e0ba:	9301      	str	r3, [sp, #4]
 800e0bc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e0c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e0c4:	3301      	adds	r3, #1
 800e0c6:	429a      	cmp	r2, r3
 800e0c8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e0cc:	fbb2 f6f3 	udiv	r6, r2, r3
 800e0d0:	d32e      	bcc.n	800e130 <quorem+0x96>
 800e0d2:	f04f 0a00 	mov.w	sl, #0
 800e0d6:	46c4      	mov	ip, r8
 800e0d8:	46ae      	mov	lr, r5
 800e0da:	46d3      	mov	fp, sl
 800e0dc:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e0e0:	b298      	uxth	r0, r3
 800e0e2:	fb06 a000 	mla	r0, r6, r0, sl
 800e0e6:	0c02      	lsrs	r2, r0, #16
 800e0e8:	0c1b      	lsrs	r3, r3, #16
 800e0ea:	fb06 2303 	mla	r3, r6, r3, r2
 800e0ee:	f8de 2000 	ldr.w	r2, [lr]
 800e0f2:	b280      	uxth	r0, r0
 800e0f4:	b292      	uxth	r2, r2
 800e0f6:	1a12      	subs	r2, r2, r0
 800e0f8:	445a      	add	r2, fp
 800e0fa:	f8de 0000 	ldr.w	r0, [lr]
 800e0fe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e102:	b29b      	uxth	r3, r3
 800e104:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800e108:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800e10c:	b292      	uxth	r2, r2
 800e10e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800e112:	45e1      	cmp	r9, ip
 800e114:	f84e 2b04 	str.w	r2, [lr], #4
 800e118:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800e11c:	d2de      	bcs.n	800e0dc <quorem+0x42>
 800e11e:	9b00      	ldr	r3, [sp, #0]
 800e120:	58eb      	ldr	r3, [r5, r3]
 800e122:	b92b      	cbnz	r3, 800e130 <quorem+0x96>
 800e124:	9b01      	ldr	r3, [sp, #4]
 800e126:	3b04      	subs	r3, #4
 800e128:	429d      	cmp	r5, r3
 800e12a:	461a      	mov	r2, r3
 800e12c:	d32f      	bcc.n	800e18e <quorem+0xf4>
 800e12e:	613c      	str	r4, [r7, #16]
 800e130:	4638      	mov	r0, r7
 800e132:	f001 f97b 	bl	800f42c <__mcmp>
 800e136:	2800      	cmp	r0, #0
 800e138:	db25      	blt.n	800e186 <quorem+0xec>
 800e13a:	4629      	mov	r1, r5
 800e13c:	2000      	movs	r0, #0
 800e13e:	f858 2b04 	ldr.w	r2, [r8], #4
 800e142:	f8d1 c000 	ldr.w	ip, [r1]
 800e146:	fa1f fe82 	uxth.w	lr, r2
 800e14a:	fa1f f38c 	uxth.w	r3, ip
 800e14e:	eba3 030e 	sub.w	r3, r3, lr
 800e152:	4403      	add	r3, r0
 800e154:	0c12      	lsrs	r2, r2, #16
 800e156:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800e15a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800e15e:	b29b      	uxth	r3, r3
 800e160:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e164:	45c1      	cmp	r9, r8
 800e166:	f841 3b04 	str.w	r3, [r1], #4
 800e16a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e16e:	d2e6      	bcs.n	800e13e <quorem+0xa4>
 800e170:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e174:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e178:	b922      	cbnz	r2, 800e184 <quorem+0xea>
 800e17a:	3b04      	subs	r3, #4
 800e17c:	429d      	cmp	r5, r3
 800e17e:	461a      	mov	r2, r3
 800e180:	d30b      	bcc.n	800e19a <quorem+0x100>
 800e182:	613c      	str	r4, [r7, #16]
 800e184:	3601      	adds	r6, #1
 800e186:	4630      	mov	r0, r6
 800e188:	b003      	add	sp, #12
 800e18a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e18e:	6812      	ldr	r2, [r2, #0]
 800e190:	3b04      	subs	r3, #4
 800e192:	2a00      	cmp	r2, #0
 800e194:	d1cb      	bne.n	800e12e <quorem+0x94>
 800e196:	3c01      	subs	r4, #1
 800e198:	e7c6      	b.n	800e128 <quorem+0x8e>
 800e19a:	6812      	ldr	r2, [r2, #0]
 800e19c:	3b04      	subs	r3, #4
 800e19e:	2a00      	cmp	r2, #0
 800e1a0:	d1ef      	bne.n	800e182 <quorem+0xe8>
 800e1a2:	3c01      	subs	r4, #1
 800e1a4:	e7ea      	b.n	800e17c <quorem+0xe2>
 800e1a6:	2000      	movs	r0, #0
 800e1a8:	e7ee      	b.n	800e188 <quorem+0xee>
 800e1aa:	0000      	movs	r0, r0
 800e1ac:	0000      	movs	r0, r0
	...

0800e1b0 <_dtoa_r>:
 800e1b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1b4:	69c7      	ldr	r7, [r0, #28]
 800e1b6:	b099      	sub	sp, #100	@ 0x64
 800e1b8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e1bc:	ec55 4b10 	vmov	r4, r5, d0
 800e1c0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800e1c2:	9109      	str	r1, [sp, #36]	@ 0x24
 800e1c4:	4683      	mov	fp, r0
 800e1c6:	920e      	str	r2, [sp, #56]	@ 0x38
 800e1c8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e1ca:	b97f      	cbnz	r7, 800e1ec <_dtoa_r+0x3c>
 800e1cc:	2010      	movs	r0, #16
 800e1ce:	f000 fdfd 	bl	800edcc <malloc>
 800e1d2:	4602      	mov	r2, r0
 800e1d4:	f8cb 001c 	str.w	r0, [fp, #28]
 800e1d8:	b920      	cbnz	r0, 800e1e4 <_dtoa_r+0x34>
 800e1da:	4ba7      	ldr	r3, [pc, #668]	@ (800e478 <_dtoa_r+0x2c8>)
 800e1dc:	21ef      	movs	r1, #239	@ 0xef
 800e1de:	48a7      	ldr	r0, [pc, #668]	@ (800e47c <_dtoa_r+0x2cc>)
 800e1e0:	f001 faf6 	bl	800f7d0 <__assert_func>
 800e1e4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800e1e8:	6007      	str	r7, [r0, #0]
 800e1ea:	60c7      	str	r7, [r0, #12]
 800e1ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e1f0:	6819      	ldr	r1, [r3, #0]
 800e1f2:	b159      	cbz	r1, 800e20c <_dtoa_r+0x5c>
 800e1f4:	685a      	ldr	r2, [r3, #4]
 800e1f6:	604a      	str	r2, [r1, #4]
 800e1f8:	2301      	movs	r3, #1
 800e1fa:	4093      	lsls	r3, r2
 800e1fc:	608b      	str	r3, [r1, #8]
 800e1fe:	4658      	mov	r0, fp
 800e200:	f000 feda 	bl	800efb8 <_Bfree>
 800e204:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e208:	2200      	movs	r2, #0
 800e20a:	601a      	str	r2, [r3, #0]
 800e20c:	1e2b      	subs	r3, r5, #0
 800e20e:	bfb9      	ittee	lt
 800e210:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800e214:	9303      	strlt	r3, [sp, #12]
 800e216:	2300      	movge	r3, #0
 800e218:	6033      	strge	r3, [r6, #0]
 800e21a:	9f03      	ldr	r7, [sp, #12]
 800e21c:	4b98      	ldr	r3, [pc, #608]	@ (800e480 <_dtoa_r+0x2d0>)
 800e21e:	bfbc      	itt	lt
 800e220:	2201      	movlt	r2, #1
 800e222:	6032      	strlt	r2, [r6, #0]
 800e224:	43bb      	bics	r3, r7
 800e226:	d112      	bne.n	800e24e <_dtoa_r+0x9e>
 800e228:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e22a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800e22e:	6013      	str	r3, [r2, #0]
 800e230:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e234:	4323      	orrs	r3, r4
 800e236:	f000 854d 	beq.w	800ecd4 <_dtoa_r+0xb24>
 800e23a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e23c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800e494 <_dtoa_r+0x2e4>
 800e240:	2b00      	cmp	r3, #0
 800e242:	f000 854f 	beq.w	800ece4 <_dtoa_r+0xb34>
 800e246:	f10a 0303 	add.w	r3, sl, #3
 800e24a:	f000 bd49 	b.w	800ece0 <_dtoa_r+0xb30>
 800e24e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e252:	2200      	movs	r2, #0
 800e254:	ec51 0b17 	vmov	r0, r1, d7
 800e258:	2300      	movs	r3, #0
 800e25a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800e25e:	f7f2 fc33 	bl	8000ac8 <__aeabi_dcmpeq>
 800e262:	4680      	mov	r8, r0
 800e264:	b158      	cbz	r0, 800e27e <_dtoa_r+0xce>
 800e266:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e268:	2301      	movs	r3, #1
 800e26a:	6013      	str	r3, [r2, #0]
 800e26c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e26e:	b113      	cbz	r3, 800e276 <_dtoa_r+0xc6>
 800e270:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800e272:	4b84      	ldr	r3, [pc, #528]	@ (800e484 <_dtoa_r+0x2d4>)
 800e274:	6013      	str	r3, [r2, #0]
 800e276:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800e498 <_dtoa_r+0x2e8>
 800e27a:	f000 bd33 	b.w	800ece4 <_dtoa_r+0xb34>
 800e27e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800e282:	aa16      	add	r2, sp, #88	@ 0x58
 800e284:	a917      	add	r1, sp, #92	@ 0x5c
 800e286:	4658      	mov	r0, fp
 800e288:	f001 f980 	bl	800f58c <__d2b>
 800e28c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800e290:	4681      	mov	r9, r0
 800e292:	2e00      	cmp	r6, #0
 800e294:	d077      	beq.n	800e386 <_dtoa_r+0x1d6>
 800e296:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e298:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800e29c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e2a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e2a4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800e2a8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800e2ac:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800e2b0:	4619      	mov	r1, r3
 800e2b2:	2200      	movs	r2, #0
 800e2b4:	4b74      	ldr	r3, [pc, #464]	@ (800e488 <_dtoa_r+0x2d8>)
 800e2b6:	f7f1 ffe7 	bl	8000288 <__aeabi_dsub>
 800e2ba:	a369      	add	r3, pc, #420	@ (adr r3, 800e460 <_dtoa_r+0x2b0>)
 800e2bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2c0:	f7f2 f99a 	bl	80005f8 <__aeabi_dmul>
 800e2c4:	a368      	add	r3, pc, #416	@ (adr r3, 800e468 <_dtoa_r+0x2b8>)
 800e2c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2ca:	f7f1 ffdf 	bl	800028c <__adddf3>
 800e2ce:	4604      	mov	r4, r0
 800e2d0:	4630      	mov	r0, r6
 800e2d2:	460d      	mov	r5, r1
 800e2d4:	f7f2 f926 	bl	8000524 <__aeabi_i2d>
 800e2d8:	a365      	add	r3, pc, #404	@ (adr r3, 800e470 <_dtoa_r+0x2c0>)
 800e2da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2de:	f7f2 f98b 	bl	80005f8 <__aeabi_dmul>
 800e2e2:	4602      	mov	r2, r0
 800e2e4:	460b      	mov	r3, r1
 800e2e6:	4620      	mov	r0, r4
 800e2e8:	4629      	mov	r1, r5
 800e2ea:	f7f1 ffcf 	bl	800028c <__adddf3>
 800e2ee:	4604      	mov	r4, r0
 800e2f0:	460d      	mov	r5, r1
 800e2f2:	f7f2 fc31 	bl	8000b58 <__aeabi_d2iz>
 800e2f6:	2200      	movs	r2, #0
 800e2f8:	4607      	mov	r7, r0
 800e2fa:	2300      	movs	r3, #0
 800e2fc:	4620      	mov	r0, r4
 800e2fe:	4629      	mov	r1, r5
 800e300:	f7f2 fbec 	bl	8000adc <__aeabi_dcmplt>
 800e304:	b140      	cbz	r0, 800e318 <_dtoa_r+0x168>
 800e306:	4638      	mov	r0, r7
 800e308:	f7f2 f90c 	bl	8000524 <__aeabi_i2d>
 800e30c:	4622      	mov	r2, r4
 800e30e:	462b      	mov	r3, r5
 800e310:	f7f2 fbda 	bl	8000ac8 <__aeabi_dcmpeq>
 800e314:	b900      	cbnz	r0, 800e318 <_dtoa_r+0x168>
 800e316:	3f01      	subs	r7, #1
 800e318:	2f16      	cmp	r7, #22
 800e31a:	d851      	bhi.n	800e3c0 <_dtoa_r+0x210>
 800e31c:	4b5b      	ldr	r3, [pc, #364]	@ (800e48c <_dtoa_r+0x2dc>)
 800e31e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e322:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e326:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e32a:	f7f2 fbd7 	bl	8000adc <__aeabi_dcmplt>
 800e32e:	2800      	cmp	r0, #0
 800e330:	d048      	beq.n	800e3c4 <_dtoa_r+0x214>
 800e332:	3f01      	subs	r7, #1
 800e334:	2300      	movs	r3, #0
 800e336:	9312      	str	r3, [sp, #72]	@ 0x48
 800e338:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e33a:	1b9b      	subs	r3, r3, r6
 800e33c:	1e5a      	subs	r2, r3, #1
 800e33e:	bf44      	itt	mi
 800e340:	f1c3 0801 	rsbmi	r8, r3, #1
 800e344:	2300      	movmi	r3, #0
 800e346:	9208      	str	r2, [sp, #32]
 800e348:	bf54      	ite	pl
 800e34a:	f04f 0800 	movpl.w	r8, #0
 800e34e:	9308      	strmi	r3, [sp, #32]
 800e350:	2f00      	cmp	r7, #0
 800e352:	db39      	blt.n	800e3c8 <_dtoa_r+0x218>
 800e354:	9b08      	ldr	r3, [sp, #32]
 800e356:	970f      	str	r7, [sp, #60]	@ 0x3c
 800e358:	443b      	add	r3, r7
 800e35a:	9308      	str	r3, [sp, #32]
 800e35c:	2300      	movs	r3, #0
 800e35e:	930a      	str	r3, [sp, #40]	@ 0x28
 800e360:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e362:	2b09      	cmp	r3, #9
 800e364:	d864      	bhi.n	800e430 <_dtoa_r+0x280>
 800e366:	2b05      	cmp	r3, #5
 800e368:	bfc4      	itt	gt
 800e36a:	3b04      	subgt	r3, #4
 800e36c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800e36e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e370:	f1a3 0302 	sub.w	r3, r3, #2
 800e374:	bfcc      	ite	gt
 800e376:	2400      	movgt	r4, #0
 800e378:	2401      	movle	r4, #1
 800e37a:	2b03      	cmp	r3, #3
 800e37c:	d863      	bhi.n	800e446 <_dtoa_r+0x296>
 800e37e:	e8df f003 	tbb	[pc, r3]
 800e382:	372a      	.short	0x372a
 800e384:	5535      	.short	0x5535
 800e386:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800e38a:	441e      	add	r6, r3
 800e38c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800e390:	2b20      	cmp	r3, #32
 800e392:	bfc1      	itttt	gt
 800e394:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800e398:	409f      	lslgt	r7, r3
 800e39a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800e39e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800e3a2:	bfd6      	itet	le
 800e3a4:	f1c3 0320 	rsble	r3, r3, #32
 800e3a8:	ea47 0003 	orrgt.w	r0, r7, r3
 800e3ac:	fa04 f003 	lslle.w	r0, r4, r3
 800e3b0:	f7f2 f8a8 	bl	8000504 <__aeabi_ui2d>
 800e3b4:	2201      	movs	r2, #1
 800e3b6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800e3ba:	3e01      	subs	r6, #1
 800e3bc:	9214      	str	r2, [sp, #80]	@ 0x50
 800e3be:	e777      	b.n	800e2b0 <_dtoa_r+0x100>
 800e3c0:	2301      	movs	r3, #1
 800e3c2:	e7b8      	b.n	800e336 <_dtoa_r+0x186>
 800e3c4:	9012      	str	r0, [sp, #72]	@ 0x48
 800e3c6:	e7b7      	b.n	800e338 <_dtoa_r+0x188>
 800e3c8:	427b      	negs	r3, r7
 800e3ca:	930a      	str	r3, [sp, #40]	@ 0x28
 800e3cc:	2300      	movs	r3, #0
 800e3ce:	eba8 0807 	sub.w	r8, r8, r7
 800e3d2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e3d4:	e7c4      	b.n	800e360 <_dtoa_r+0x1b0>
 800e3d6:	2300      	movs	r3, #0
 800e3d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e3da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	dc35      	bgt.n	800e44c <_dtoa_r+0x29c>
 800e3e0:	2301      	movs	r3, #1
 800e3e2:	9300      	str	r3, [sp, #0]
 800e3e4:	9307      	str	r3, [sp, #28]
 800e3e6:	461a      	mov	r2, r3
 800e3e8:	920e      	str	r2, [sp, #56]	@ 0x38
 800e3ea:	e00b      	b.n	800e404 <_dtoa_r+0x254>
 800e3ec:	2301      	movs	r3, #1
 800e3ee:	e7f3      	b.n	800e3d8 <_dtoa_r+0x228>
 800e3f0:	2300      	movs	r3, #0
 800e3f2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e3f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e3f6:	18fb      	adds	r3, r7, r3
 800e3f8:	9300      	str	r3, [sp, #0]
 800e3fa:	3301      	adds	r3, #1
 800e3fc:	2b01      	cmp	r3, #1
 800e3fe:	9307      	str	r3, [sp, #28]
 800e400:	bfb8      	it	lt
 800e402:	2301      	movlt	r3, #1
 800e404:	f8db 001c 	ldr.w	r0, [fp, #28]
 800e408:	2100      	movs	r1, #0
 800e40a:	2204      	movs	r2, #4
 800e40c:	f102 0514 	add.w	r5, r2, #20
 800e410:	429d      	cmp	r5, r3
 800e412:	d91f      	bls.n	800e454 <_dtoa_r+0x2a4>
 800e414:	6041      	str	r1, [r0, #4]
 800e416:	4658      	mov	r0, fp
 800e418:	f000 fd8e 	bl	800ef38 <_Balloc>
 800e41c:	4682      	mov	sl, r0
 800e41e:	2800      	cmp	r0, #0
 800e420:	d13c      	bne.n	800e49c <_dtoa_r+0x2ec>
 800e422:	4b1b      	ldr	r3, [pc, #108]	@ (800e490 <_dtoa_r+0x2e0>)
 800e424:	4602      	mov	r2, r0
 800e426:	f240 11af 	movw	r1, #431	@ 0x1af
 800e42a:	e6d8      	b.n	800e1de <_dtoa_r+0x2e>
 800e42c:	2301      	movs	r3, #1
 800e42e:	e7e0      	b.n	800e3f2 <_dtoa_r+0x242>
 800e430:	2401      	movs	r4, #1
 800e432:	2300      	movs	r3, #0
 800e434:	9309      	str	r3, [sp, #36]	@ 0x24
 800e436:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e438:	f04f 33ff 	mov.w	r3, #4294967295
 800e43c:	9300      	str	r3, [sp, #0]
 800e43e:	9307      	str	r3, [sp, #28]
 800e440:	2200      	movs	r2, #0
 800e442:	2312      	movs	r3, #18
 800e444:	e7d0      	b.n	800e3e8 <_dtoa_r+0x238>
 800e446:	2301      	movs	r3, #1
 800e448:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e44a:	e7f5      	b.n	800e438 <_dtoa_r+0x288>
 800e44c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e44e:	9300      	str	r3, [sp, #0]
 800e450:	9307      	str	r3, [sp, #28]
 800e452:	e7d7      	b.n	800e404 <_dtoa_r+0x254>
 800e454:	3101      	adds	r1, #1
 800e456:	0052      	lsls	r2, r2, #1
 800e458:	e7d8      	b.n	800e40c <_dtoa_r+0x25c>
 800e45a:	bf00      	nop
 800e45c:	f3af 8000 	nop.w
 800e460:	636f4361 	.word	0x636f4361
 800e464:	3fd287a7 	.word	0x3fd287a7
 800e468:	8b60c8b3 	.word	0x8b60c8b3
 800e46c:	3fc68a28 	.word	0x3fc68a28
 800e470:	509f79fb 	.word	0x509f79fb
 800e474:	3fd34413 	.word	0x3fd34413
 800e478:	080104b1 	.word	0x080104b1
 800e47c:	080104c8 	.word	0x080104c8
 800e480:	7ff00000 	.word	0x7ff00000
 800e484:	08010481 	.word	0x08010481
 800e488:	3ff80000 	.word	0x3ff80000
 800e48c:	080105c0 	.word	0x080105c0
 800e490:	08010520 	.word	0x08010520
 800e494:	080104ad 	.word	0x080104ad
 800e498:	08010480 	.word	0x08010480
 800e49c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e4a0:	6018      	str	r0, [r3, #0]
 800e4a2:	9b07      	ldr	r3, [sp, #28]
 800e4a4:	2b0e      	cmp	r3, #14
 800e4a6:	f200 80a4 	bhi.w	800e5f2 <_dtoa_r+0x442>
 800e4aa:	2c00      	cmp	r4, #0
 800e4ac:	f000 80a1 	beq.w	800e5f2 <_dtoa_r+0x442>
 800e4b0:	2f00      	cmp	r7, #0
 800e4b2:	dd33      	ble.n	800e51c <_dtoa_r+0x36c>
 800e4b4:	4bad      	ldr	r3, [pc, #692]	@ (800e76c <_dtoa_r+0x5bc>)
 800e4b6:	f007 020f 	and.w	r2, r7, #15
 800e4ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e4be:	ed93 7b00 	vldr	d7, [r3]
 800e4c2:	05f8      	lsls	r0, r7, #23
 800e4c4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e4c8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800e4cc:	d516      	bpl.n	800e4fc <_dtoa_r+0x34c>
 800e4ce:	4ba8      	ldr	r3, [pc, #672]	@ (800e770 <_dtoa_r+0x5c0>)
 800e4d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e4d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e4d8:	f7f2 f9b8 	bl	800084c <__aeabi_ddiv>
 800e4dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e4e0:	f004 040f 	and.w	r4, r4, #15
 800e4e4:	2603      	movs	r6, #3
 800e4e6:	4da2      	ldr	r5, [pc, #648]	@ (800e770 <_dtoa_r+0x5c0>)
 800e4e8:	b954      	cbnz	r4, 800e500 <_dtoa_r+0x350>
 800e4ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e4ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e4f2:	f7f2 f9ab 	bl	800084c <__aeabi_ddiv>
 800e4f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e4fa:	e028      	b.n	800e54e <_dtoa_r+0x39e>
 800e4fc:	2602      	movs	r6, #2
 800e4fe:	e7f2      	b.n	800e4e6 <_dtoa_r+0x336>
 800e500:	07e1      	lsls	r1, r4, #31
 800e502:	d508      	bpl.n	800e516 <_dtoa_r+0x366>
 800e504:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e508:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e50c:	f7f2 f874 	bl	80005f8 <__aeabi_dmul>
 800e510:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e514:	3601      	adds	r6, #1
 800e516:	1064      	asrs	r4, r4, #1
 800e518:	3508      	adds	r5, #8
 800e51a:	e7e5      	b.n	800e4e8 <_dtoa_r+0x338>
 800e51c:	f000 80d2 	beq.w	800e6c4 <_dtoa_r+0x514>
 800e520:	427c      	negs	r4, r7
 800e522:	4b92      	ldr	r3, [pc, #584]	@ (800e76c <_dtoa_r+0x5bc>)
 800e524:	4d92      	ldr	r5, [pc, #584]	@ (800e770 <_dtoa_r+0x5c0>)
 800e526:	f004 020f 	and.w	r2, r4, #15
 800e52a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e52e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e532:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e536:	f7f2 f85f 	bl	80005f8 <__aeabi_dmul>
 800e53a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e53e:	1124      	asrs	r4, r4, #4
 800e540:	2300      	movs	r3, #0
 800e542:	2602      	movs	r6, #2
 800e544:	2c00      	cmp	r4, #0
 800e546:	f040 80b2 	bne.w	800e6ae <_dtoa_r+0x4fe>
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d1d3      	bne.n	800e4f6 <_dtoa_r+0x346>
 800e54e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e550:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e554:	2b00      	cmp	r3, #0
 800e556:	f000 80b7 	beq.w	800e6c8 <_dtoa_r+0x518>
 800e55a:	4b86      	ldr	r3, [pc, #536]	@ (800e774 <_dtoa_r+0x5c4>)
 800e55c:	2200      	movs	r2, #0
 800e55e:	4620      	mov	r0, r4
 800e560:	4629      	mov	r1, r5
 800e562:	f7f2 fabb 	bl	8000adc <__aeabi_dcmplt>
 800e566:	2800      	cmp	r0, #0
 800e568:	f000 80ae 	beq.w	800e6c8 <_dtoa_r+0x518>
 800e56c:	9b07      	ldr	r3, [sp, #28]
 800e56e:	2b00      	cmp	r3, #0
 800e570:	f000 80aa 	beq.w	800e6c8 <_dtoa_r+0x518>
 800e574:	9b00      	ldr	r3, [sp, #0]
 800e576:	2b00      	cmp	r3, #0
 800e578:	dd37      	ble.n	800e5ea <_dtoa_r+0x43a>
 800e57a:	1e7b      	subs	r3, r7, #1
 800e57c:	9304      	str	r3, [sp, #16]
 800e57e:	4620      	mov	r0, r4
 800e580:	4b7d      	ldr	r3, [pc, #500]	@ (800e778 <_dtoa_r+0x5c8>)
 800e582:	2200      	movs	r2, #0
 800e584:	4629      	mov	r1, r5
 800e586:	f7f2 f837 	bl	80005f8 <__aeabi_dmul>
 800e58a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e58e:	9c00      	ldr	r4, [sp, #0]
 800e590:	3601      	adds	r6, #1
 800e592:	4630      	mov	r0, r6
 800e594:	f7f1 ffc6 	bl	8000524 <__aeabi_i2d>
 800e598:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e59c:	f7f2 f82c 	bl	80005f8 <__aeabi_dmul>
 800e5a0:	4b76      	ldr	r3, [pc, #472]	@ (800e77c <_dtoa_r+0x5cc>)
 800e5a2:	2200      	movs	r2, #0
 800e5a4:	f7f1 fe72 	bl	800028c <__adddf3>
 800e5a8:	4605      	mov	r5, r0
 800e5aa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e5ae:	2c00      	cmp	r4, #0
 800e5b0:	f040 808d 	bne.w	800e6ce <_dtoa_r+0x51e>
 800e5b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e5b8:	4b71      	ldr	r3, [pc, #452]	@ (800e780 <_dtoa_r+0x5d0>)
 800e5ba:	2200      	movs	r2, #0
 800e5bc:	f7f1 fe64 	bl	8000288 <__aeabi_dsub>
 800e5c0:	4602      	mov	r2, r0
 800e5c2:	460b      	mov	r3, r1
 800e5c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e5c8:	462a      	mov	r2, r5
 800e5ca:	4633      	mov	r3, r6
 800e5cc:	f7f2 faa4 	bl	8000b18 <__aeabi_dcmpgt>
 800e5d0:	2800      	cmp	r0, #0
 800e5d2:	f040 828b 	bne.w	800eaec <_dtoa_r+0x93c>
 800e5d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e5da:	462a      	mov	r2, r5
 800e5dc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e5e0:	f7f2 fa7c 	bl	8000adc <__aeabi_dcmplt>
 800e5e4:	2800      	cmp	r0, #0
 800e5e6:	f040 8128 	bne.w	800e83a <_dtoa_r+0x68a>
 800e5ea:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800e5ee:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800e5f2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	f2c0 815a 	blt.w	800e8ae <_dtoa_r+0x6fe>
 800e5fa:	2f0e      	cmp	r7, #14
 800e5fc:	f300 8157 	bgt.w	800e8ae <_dtoa_r+0x6fe>
 800e600:	4b5a      	ldr	r3, [pc, #360]	@ (800e76c <_dtoa_r+0x5bc>)
 800e602:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e606:	ed93 7b00 	vldr	d7, [r3]
 800e60a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	ed8d 7b00 	vstr	d7, [sp]
 800e612:	da03      	bge.n	800e61c <_dtoa_r+0x46c>
 800e614:	9b07      	ldr	r3, [sp, #28]
 800e616:	2b00      	cmp	r3, #0
 800e618:	f340 8101 	ble.w	800e81e <_dtoa_r+0x66e>
 800e61c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e620:	4656      	mov	r6, sl
 800e622:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e626:	4620      	mov	r0, r4
 800e628:	4629      	mov	r1, r5
 800e62a:	f7f2 f90f 	bl	800084c <__aeabi_ddiv>
 800e62e:	f7f2 fa93 	bl	8000b58 <__aeabi_d2iz>
 800e632:	4680      	mov	r8, r0
 800e634:	f7f1 ff76 	bl	8000524 <__aeabi_i2d>
 800e638:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e63c:	f7f1 ffdc 	bl	80005f8 <__aeabi_dmul>
 800e640:	4602      	mov	r2, r0
 800e642:	460b      	mov	r3, r1
 800e644:	4620      	mov	r0, r4
 800e646:	4629      	mov	r1, r5
 800e648:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800e64c:	f7f1 fe1c 	bl	8000288 <__aeabi_dsub>
 800e650:	f806 4b01 	strb.w	r4, [r6], #1
 800e654:	9d07      	ldr	r5, [sp, #28]
 800e656:	eba6 040a 	sub.w	r4, r6, sl
 800e65a:	42a5      	cmp	r5, r4
 800e65c:	4602      	mov	r2, r0
 800e65e:	460b      	mov	r3, r1
 800e660:	f040 8117 	bne.w	800e892 <_dtoa_r+0x6e2>
 800e664:	f7f1 fe12 	bl	800028c <__adddf3>
 800e668:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e66c:	4604      	mov	r4, r0
 800e66e:	460d      	mov	r5, r1
 800e670:	f7f2 fa52 	bl	8000b18 <__aeabi_dcmpgt>
 800e674:	2800      	cmp	r0, #0
 800e676:	f040 80f9 	bne.w	800e86c <_dtoa_r+0x6bc>
 800e67a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e67e:	4620      	mov	r0, r4
 800e680:	4629      	mov	r1, r5
 800e682:	f7f2 fa21 	bl	8000ac8 <__aeabi_dcmpeq>
 800e686:	b118      	cbz	r0, 800e690 <_dtoa_r+0x4e0>
 800e688:	f018 0f01 	tst.w	r8, #1
 800e68c:	f040 80ee 	bne.w	800e86c <_dtoa_r+0x6bc>
 800e690:	4649      	mov	r1, r9
 800e692:	4658      	mov	r0, fp
 800e694:	f000 fc90 	bl	800efb8 <_Bfree>
 800e698:	2300      	movs	r3, #0
 800e69a:	7033      	strb	r3, [r6, #0]
 800e69c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e69e:	3701      	adds	r7, #1
 800e6a0:	601f      	str	r7, [r3, #0]
 800e6a2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	f000 831d 	beq.w	800ece4 <_dtoa_r+0xb34>
 800e6aa:	601e      	str	r6, [r3, #0]
 800e6ac:	e31a      	b.n	800ece4 <_dtoa_r+0xb34>
 800e6ae:	07e2      	lsls	r2, r4, #31
 800e6b0:	d505      	bpl.n	800e6be <_dtoa_r+0x50e>
 800e6b2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e6b6:	f7f1 ff9f 	bl	80005f8 <__aeabi_dmul>
 800e6ba:	3601      	adds	r6, #1
 800e6bc:	2301      	movs	r3, #1
 800e6be:	1064      	asrs	r4, r4, #1
 800e6c0:	3508      	adds	r5, #8
 800e6c2:	e73f      	b.n	800e544 <_dtoa_r+0x394>
 800e6c4:	2602      	movs	r6, #2
 800e6c6:	e742      	b.n	800e54e <_dtoa_r+0x39e>
 800e6c8:	9c07      	ldr	r4, [sp, #28]
 800e6ca:	9704      	str	r7, [sp, #16]
 800e6cc:	e761      	b.n	800e592 <_dtoa_r+0x3e2>
 800e6ce:	4b27      	ldr	r3, [pc, #156]	@ (800e76c <_dtoa_r+0x5bc>)
 800e6d0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e6d2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e6d6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e6da:	4454      	add	r4, sl
 800e6dc:	2900      	cmp	r1, #0
 800e6de:	d053      	beq.n	800e788 <_dtoa_r+0x5d8>
 800e6e0:	4928      	ldr	r1, [pc, #160]	@ (800e784 <_dtoa_r+0x5d4>)
 800e6e2:	2000      	movs	r0, #0
 800e6e4:	f7f2 f8b2 	bl	800084c <__aeabi_ddiv>
 800e6e8:	4633      	mov	r3, r6
 800e6ea:	462a      	mov	r2, r5
 800e6ec:	f7f1 fdcc 	bl	8000288 <__aeabi_dsub>
 800e6f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e6f4:	4656      	mov	r6, sl
 800e6f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e6fa:	f7f2 fa2d 	bl	8000b58 <__aeabi_d2iz>
 800e6fe:	4605      	mov	r5, r0
 800e700:	f7f1 ff10 	bl	8000524 <__aeabi_i2d>
 800e704:	4602      	mov	r2, r0
 800e706:	460b      	mov	r3, r1
 800e708:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e70c:	f7f1 fdbc 	bl	8000288 <__aeabi_dsub>
 800e710:	3530      	adds	r5, #48	@ 0x30
 800e712:	4602      	mov	r2, r0
 800e714:	460b      	mov	r3, r1
 800e716:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e71a:	f806 5b01 	strb.w	r5, [r6], #1
 800e71e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e722:	f7f2 f9db 	bl	8000adc <__aeabi_dcmplt>
 800e726:	2800      	cmp	r0, #0
 800e728:	d171      	bne.n	800e80e <_dtoa_r+0x65e>
 800e72a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e72e:	4911      	ldr	r1, [pc, #68]	@ (800e774 <_dtoa_r+0x5c4>)
 800e730:	2000      	movs	r0, #0
 800e732:	f7f1 fda9 	bl	8000288 <__aeabi_dsub>
 800e736:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e73a:	f7f2 f9cf 	bl	8000adc <__aeabi_dcmplt>
 800e73e:	2800      	cmp	r0, #0
 800e740:	f040 8095 	bne.w	800e86e <_dtoa_r+0x6be>
 800e744:	42a6      	cmp	r6, r4
 800e746:	f43f af50 	beq.w	800e5ea <_dtoa_r+0x43a>
 800e74a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e74e:	4b0a      	ldr	r3, [pc, #40]	@ (800e778 <_dtoa_r+0x5c8>)
 800e750:	2200      	movs	r2, #0
 800e752:	f7f1 ff51 	bl	80005f8 <__aeabi_dmul>
 800e756:	4b08      	ldr	r3, [pc, #32]	@ (800e778 <_dtoa_r+0x5c8>)
 800e758:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e75c:	2200      	movs	r2, #0
 800e75e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e762:	f7f1 ff49 	bl	80005f8 <__aeabi_dmul>
 800e766:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e76a:	e7c4      	b.n	800e6f6 <_dtoa_r+0x546>
 800e76c:	080105c0 	.word	0x080105c0
 800e770:	08010598 	.word	0x08010598
 800e774:	3ff00000 	.word	0x3ff00000
 800e778:	40240000 	.word	0x40240000
 800e77c:	401c0000 	.word	0x401c0000
 800e780:	40140000 	.word	0x40140000
 800e784:	3fe00000 	.word	0x3fe00000
 800e788:	4631      	mov	r1, r6
 800e78a:	4628      	mov	r0, r5
 800e78c:	f7f1 ff34 	bl	80005f8 <__aeabi_dmul>
 800e790:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e794:	9415      	str	r4, [sp, #84]	@ 0x54
 800e796:	4656      	mov	r6, sl
 800e798:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e79c:	f7f2 f9dc 	bl	8000b58 <__aeabi_d2iz>
 800e7a0:	4605      	mov	r5, r0
 800e7a2:	f7f1 febf 	bl	8000524 <__aeabi_i2d>
 800e7a6:	4602      	mov	r2, r0
 800e7a8:	460b      	mov	r3, r1
 800e7aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e7ae:	f7f1 fd6b 	bl	8000288 <__aeabi_dsub>
 800e7b2:	3530      	adds	r5, #48	@ 0x30
 800e7b4:	f806 5b01 	strb.w	r5, [r6], #1
 800e7b8:	4602      	mov	r2, r0
 800e7ba:	460b      	mov	r3, r1
 800e7bc:	42a6      	cmp	r6, r4
 800e7be:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e7c2:	f04f 0200 	mov.w	r2, #0
 800e7c6:	d124      	bne.n	800e812 <_dtoa_r+0x662>
 800e7c8:	4bac      	ldr	r3, [pc, #688]	@ (800ea7c <_dtoa_r+0x8cc>)
 800e7ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e7ce:	f7f1 fd5d 	bl	800028c <__adddf3>
 800e7d2:	4602      	mov	r2, r0
 800e7d4:	460b      	mov	r3, r1
 800e7d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e7da:	f7f2 f99d 	bl	8000b18 <__aeabi_dcmpgt>
 800e7de:	2800      	cmp	r0, #0
 800e7e0:	d145      	bne.n	800e86e <_dtoa_r+0x6be>
 800e7e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e7e6:	49a5      	ldr	r1, [pc, #660]	@ (800ea7c <_dtoa_r+0x8cc>)
 800e7e8:	2000      	movs	r0, #0
 800e7ea:	f7f1 fd4d 	bl	8000288 <__aeabi_dsub>
 800e7ee:	4602      	mov	r2, r0
 800e7f0:	460b      	mov	r3, r1
 800e7f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e7f6:	f7f2 f971 	bl	8000adc <__aeabi_dcmplt>
 800e7fa:	2800      	cmp	r0, #0
 800e7fc:	f43f aef5 	beq.w	800e5ea <_dtoa_r+0x43a>
 800e800:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800e802:	1e73      	subs	r3, r6, #1
 800e804:	9315      	str	r3, [sp, #84]	@ 0x54
 800e806:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e80a:	2b30      	cmp	r3, #48	@ 0x30
 800e80c:	d0f8      	beq.n	800e800 <_dtoa_r+0x650>
 800e80e:	9f04      	ldr	r7, [sp, #16]
 800e810:	e73e      	b.n	800e690 <_dtoa_r+0x4e0>
 800e812:	4b9b      	ldr	r3, [pc, #620]	@ (800ea80 <_dtoa_r+0x8d0>)
 800e814:	f7f1 fef0 	bl	80005f8 <__aeabi_dmul>
 800e818:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e81c:	e7bc      	b.n	800e798 <_dtoa_r+0x5e8>
 800e81e:	d10c      	bne.n	800e83a <_dtoa_r+0x68a>
 800e820:	4b98      	ldr	r3, [pc, #608]	@ (800ea84 <_dtoa_r+0x8d4>)
 800e822:	2200      	movs	r2, #0
 800e824:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e828:	f7f1 fee6 	bl	80005f8 <__aeabi_dmul>
 800e82c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e830:	f7f2 f968 	bl	8000b04 <__aeabi_dcmpge>
 800e834:	2800      	cmp	r0, #0
 800e836:	f000 8157 	beq.w	800eae8 <_dtoa_r+0x938>
 800e83a:	2400      	movs	r4, #0
 800e83c:	4625      	mov	r5, r4
 800e83e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e840:	43db      	mvns	r3, r3
 800e842:	9304      	str	r3, [sp, #16]
 800e844:	4656      	mov	r6, sl
 800e846:	2700      	movs	r7, #0
 800e848:	4621      	mov	r1, r4
 800e84a:	4658      	mov	r0, fp
 800e84c:	f000 fbb4 	bl	800efb8 <_Bfree>
 800e850:	2d00      	cmp	r5, #0
 800e852:	d0dc      	beq.n	800e80e <_dtoa_r+0x65e>
 800e854:	b12f      	cbz	r7, 800e862 <_dtoa_r+0x6b2>
 800e856:	42af      	cmp	r7, r5
 800e858:	d003      	beq.n	800e862 <_dtoa_r+0x6b2>
 800e85a:	4639      	mov	r1, r7
 800e85c:	4658      	mov	r0, fp
 800e85e:	f000 fbab 	bl	800efb8 <_Bfree>
 800e862:	4629      	mov	r1, r5
 800e864:	4658      	mov	r0, fp
 800e866:	f000 fba7 	bl	800efb8 <_Bfree>
 800e86a:	e7d0      	b.n	800e80e <_dtoa_r+0x65e>
 800e86c:	9704      	str	r7, [sp, #16]
 800e86e:	4633      	mov	r3, r6
 800e870:	461e      	mov	r6, r3
 800e872:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e876:	2a39      	cmp	r2, #57	@ 0x39
 800e878:	d107      	bne.n	800e88a <_dtoa_r+0x6da>
 800e87a:	459a      	cmp	sl, r3
 800e87c:	d1f8      	bne.n	800e870 <_dtoa_r+0x6c0>
 800e87e:	9a04      	ldr	r2, [sp, #16]
 800e880:	3201      	adds	r2, #1
 800e882:	9204      	str	r2, [sp, #16]
 800e884:	2230      	movs	r2, #48	@ 0x30
 800e886:	f88a 2000 	strb.w	r2, [sl]
 800e88a:	781a      	ldrb	r2, [r3, #0]
 800e88c:	3201      	adds	r2, #1
 800e88e:	701a      	strb	r2, [r3, #0]
 800e890:	e7bd      	b.n	800e80e <_dtoa_r+0x65e>
 800e892:	4b7b      	ldr	r3, [pc, #492]	@ (800ea80 <_dtoa_r+0x8d0>)
 800e894:	2200      	movs	r2, #0
 800e896:	f7f1 feaf 	bl	80005f8 <__aeabi_dmul>
 800e89a:	2200      	movs	r2, #0
 800e89c:	2300      	movs	r3, #0
 800e89e:	4604      	mov	r4, r0
 800e8a0:	460d      	mov	r5, r1
 800e8a2:	f7f2 f911 	bl	8000ac8 <__aeabi_dcmpeq>
 800e8a6:	2800      	cmp	r0, #0
 800e8a8:	f43f aebb 	beq.w	800e622 <_dtoa_r+0x472>
 800e8ac:	e6f0      	b.n	800e690 <_dtoa_r+0x4e0>
 800e8ae:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e8b0:	2a00      	cmp	r2, #0
 800e8b2:	f000 80db 	beq.w	800ea6c <_dtoa_r+0x8bc>
 800e8b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e8b8:	2a01      	cmp	r2, #1
 800e8ba:	f300 80bf 	bgt.w	800ea3c <_dtoa_r+0x88c>
 800e8be:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800e8c0:	2a00      	cmp	r2, #0
 800e8c2:	f000 80b7 	beq.w	800ea34 <_dtoa_r+0x884>
 800e8c6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800e8ca:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e8cc:	4646      	mov	r6, r8
 800e8ce:	9a08      	ldr	r2, [sp, #32]
 800e8d0:	2101      	movs	r1, #1
 800e8d2:	441a      	add	r2, r3
 800e8d4:	4658      	mov	r0, fp
 800e8d6:	4498      	add	r8, r3
 800e8d8:	9208      	str	r2, [sp, #32]
 800e8da:	f000 fc21 	bl	800f120 <__i2b>
 800e8de:	4605      	mov	r5, r0
 800e8e0:	b15e      	cbz	r6, 800e8fa <_dtoa_r+0x74a>
 800e8e2:	9b08      	ldr	r3, [sp, #32]
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	dd08      	ble.n	800e8fa <_dtoa_r+0x74a>
 800e8e8:	42b3      	cmp	r3, r6
 800e8ea:	9a08      	ldr	r2, [sp, #32]
 800e8ec:	bfa8      	it	ge
 800e8ee:	4633      	movge	r3, r6
 800e8f0:	eba8 0803 	sub.w	r8, r8, r3
 800e8f4:	1af6      	subs	r6, r6, r3
 800e8f6:	1ad3      	subs	r3, r2, r3
 800e8f8:	9308      	str	r3, [sp, #32]
 800e8fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e8fc:	b1f3      	cbz	r3, 800e93c <_dtoa_r+0x78c>
 800e8fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e900:	2b00      	cmp	r3, #0
 800e902:	f000 80b7 	beq.w	800ea74 <_dtoa_r+0x8c4>
 800e906:	b18c      	cbz	r4, 800e92c <_dtoa_r+0x77c>
 800e908:	4629      	mov	r1, r5
 800e90a:	4622      	mov	r2, r4
 800e90c:	4658      	mov	r0, fp
 800e90e:	f000 fcc7 	bl	800f2a0 <__pow5mult>
 800e912:	464a      	mov	r2, r9
 800e914:	4601      	mov	r1, r0
 800e916:	4605      	mov	r5, r0
 800e918:	4658      	mov	r0, fp
 800e91a:	f000 fc17 	bl	800f14c <__multiply>
 800e91e:	4649      	mov	r1, r9
 800e920:	9004      	str	r0, [sp, #16]
 800e922:	4658      	mov	r0, fp
 800e924:	f000 fb48 	bl	800efb8 <_Bfree>
 800e928:	9b04      	ldr	r3, [sp, #16]
 800e92a:	4699      	mov	r9, r3
 800e92c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e92e:	1b1a      	subs	r2, r3, r4
 800e930:	d004      	beq.n	800e93c <_dtoa_r+0x78c>
 800e932:	4649      	mov	r1, r9
 800e934:	4658      	mov	r0, fp
 800e936:	f000 fcb3 	bl	800f2a0 <__pow5mult>
 800e93a:	4681      	mov	r9, r0
 800e93c:	2101      	movs	r1, #1
 800e93e:	4658      	mov	r0, fp
 800e940:	f000 fbee 	bl	800f120 <__i2b>
 800e944:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e946:	4604      	mov	r4, r0
 800e948:	2b00      	cmp	r3, #0
 800e94a:	f000 81cf 	beq.w	800ecec <_dtoa_r+0xb3c>
 800e94e:	461a      	mov	r2, r3
 800e950:	4601      	mov	r1, r0
 800e952:	4658      	mov	r0, fp
 800e954:	f000 fca4 	bl	800f2a0 <__pow5mult>
 800e958:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e95a:	2b01      	cmp	r3, #1
 800e95c:	4604      	mov	r4, r0
 800e95e:	f300 8095 	bgt.w	800ea8c <_dtoa_r+0x8dc>
 800e962:	9b02      	ldr	r3, [sp, #8]
 800e964:	2b00      	cmp	r3, #0
 800e966:	f040 8087 	bne.w	800ea78 <_dtoa_r+0x8c8>
 800e96a:	9b03      	ldr	r3, [sp, #12]
 800e96c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e970:	2b00      	cmp	r3, #0
 800e972:	f040 8089 	bne.w	800ea88 <_dtoa_r+0x8d8>
 800e976:	9b03      	ldr	r3, [sp, #12]
 800e978:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e97c:	0d1b      	lsrs	r3, r3, #20
 800e97e:	051b      	lsls	r3, r3, #20
 800e980:	b12b      	cbz	r3, 800e98e <_dtoa_r+0x7de>
 800e982:	9b08      	ldr	r3, [sp, #32]
 800e984:	3301      	adds	r3, #1
 800e986:	9308      	str	r3, [sp, #32]
 800e988:	f108 0801 	add.w	r8, r8, #1
 800e98c:	2301      	movs	r3, #1
 800e98e:	930a      	str	r3, [sp, #40]	@ 0x28
 800e990:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e992:	2b00      	cmp	r3, #0
 800e994:	f000 81b0 	beq.w	800ecf8 <_dtoa_r+0xb48>
 800e998:	6923      	ldr	r3, [r4, #16]
 800e99a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e99e:	6918      	ldr	r0, [r3, #16]
 800e9a0:	f000 fb72 	bl	800f088 <__hi0bits>
 800e9a4:	f1c0 0020 	rsb	r0, r0, #32
 800e9a8:	9b08      	ldr	r3, [sp, #32]
 800e9aa:	4418      	add	r0, r3
 800e9ac:	f010 001f 	ands.w	r0, r0, #31
 800e9b0:	d077      	beq.n	800eaa2 <_dtoa_r+0x8f2>
 800e9b2:	f1c0 0320 	rsb	r3, r0, #32
 800e9b6:	2b04      	cmp	r3, #4
 800e9b8:	dd6b      	ble.n	800ea92 <_dtoa_r+0x8e2>
 800e9ba:	9b08      	ldr	r3, [sp, #32]
 800e9bc:	f1c0 001c 	rsb	r0, r0, #28
 800e9c0:	4403      	add	r3, r0
 800e9c2:	4480      	add	r8, r0
 800e9c4:	4406      	add	r6, r0
 800e9c6:	9308      	str	r3, [sp, #32]
 800e9c8:	f1b8 0f00 	cmp.w	r8, #0
 800e9cc:	dd05      	ble.n	800e9da <_dtoa_r+0x82a>
 800e9ce:	4649      	mov	r1, r9
 800e9d0:	4642      	mov	r2, r8
 800e9d2:	4658      	mov	r0, fp
 800e9d4:	f000 fcbe 	bl	800f354 <__lshift>
 800e9d8:	4681      	mov	r9, r0
 800e9da:	9b08      	ldr	r3, [sp, #32]
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	dd05      	ble.n	800e9ec <_dtoa_r+0x83c>
 800e9e0:	4621      	mov	r1, r4
 800e9e2:	461a      	mov	r2, r3
 800e9e4:	4658      	mov	r0, fp
 800e9e6:	f000 fcb5 	bl	800f354 <__lshift>
 800e9ea:	4604      	mov	r4, r0
 800e9ec:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d059      	beq.n	800eaa6 <_dtoa_r+0x8f6>
 800e9f2:	4621      	mov	r1, r4
 800e9f4:	4648      	mov	r0, r9
 800e9f6:	f000 fd19 	bl	800f42c <__mcmp>
 800e9fa:	2800      	cmp	r0, #0
 800e9fc:	da53      	bge.n	800eaa6 <_dtoa_r+0x8f6>
 800e9fe:	1e7b      	subs	r3, r7, #1
 800ea00:	9304      	str	r3, [sp, #16]
 800ea02:	4649      	mov	r1, r9
 800ea04:	2300      	movs	r3, #0
 800ea06:	220a      	movs	r2, #10
 800ea08:	4658      	mov	r0, fp
 800ea0a:	f000 faf7 	bl	800effc <__multadd>
 800ea0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ea10:	4681      	mov	r9, r0
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	f000 8172 	beq.w	800ecfc <_dtoa_r+0xb4c>
 800ea18:	2300      	movs	r3, #0
 800ea1a:	4629      	mov	r1, r5
 800ea1c:	220a      	movs	r2, #10
 800ea1e:	4658      	mov	r0, fp
 800ea20:	f000 faec 	bl	800effc <__multadd>
 800ea24:	9b00      	ldr	r3, [sp, #0]
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	4605      	mov	r5, r0
 800ea2a:	dc67      	bgt.n	800eafc <_dtoa_r+0x94c>
 800ea2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea2e:	2b02      	cmp	r3, #2
 800ea30:	dc41      	bgt.n	800eab6 <_dtoa_r+0x906>
 800ea32:	e063      	b.n	800eafc <_dtoa_r+0x94c>
 800ea34:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ea36:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ea3a:	e746      	b.n	800e8ca <_dtoa_r+0x71a>
 800ea3c:	9b07      	ldr	r3, [sp, #28]
 800ea3e:	1e5c      	subs	r4, r3, #1
 800ea40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ea42:	42a3      	cmp	r3, r4
 800ea44:	bfbf      	itttt	lt
 800ea46:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800ea48:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800ea4a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800ea4c:	1ae3      	sublt	r3, r4, r3
 800ea4e:	bfb4      	ite	lt
 800ea50:	18d2      	addlt	r2, r2, r3
 800ea52:	1b1c      	subge	r4, r3, r4
 800ea54:	9b07      	ldr	r3, [sp, #28]
 800ea56:	bfbc      	itt	lt
 800ea58:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800ea5a:	2400      	movlt	r4, #0
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	bfb5      	itete	lt
 800ea60:	eba8 0603 	sublt.w	r6, r8, r3
 800ea64:	9b07      	ldrge	r3, [sp, #28]
 800ea66:	2300      	movlt	r3, #0
 800ea68:	4646      	movge	r6, r8
 800ea6a:	e730      	b.n	800e8ce <_dtoa_r+0x71e>
 800ea6c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ea6e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800ea70:	4646      	mov	r6, r8
 800ea72:	e735      	b.n	800e8e0 <_dtoa_r+0x730>
 800ea74:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ea76:	e75c      	b.n	800e932 <_dtoa_r+0x782>
 800ea78:	2300      	movs	r3, #0
 800ea7a:	e788      	b.n	800e98e <_dtoa_r+0x7de>
 800ea7c:	3fe00000 	.word	0x3fe00000
 800ea80:	40240000 	.word	0x40240000
 800ea84:	40140000 	.word	0x40140000
 800ea88:	9b02      	ldr	r3, [sp, #8]
 800ea8a:	e780      	b.n	800e98e <_dtoa_r+0x7de>
 800ea8c:	2300      	movs	r3, #0
 800ea8e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ea90:	e782      	b.n	800e998 <_dtoa_r+0x7e8>
 800ea92:	d099      	beq.n	800e9c8 <_dtoa_r+0x818>
 800ea94:	9a08      	ldr	r2, [sp, #32]
 800ea96:	331c      	adds	r3, #28
 800ea98:	441a      	add	r2, r3
 800ea9a:	4498      	add	r8, r3
 800ea9c:	441e      	add	r6, r3
 800ea9e:	9208      	str	r2, [sp, #32]
 800eaa0:	e792      	b.n	800e9c8 <_dtoa_r+0x818>
 800eaa2:	4603      	mov	r3, r0
 800eaa4:	e7f6      	b.n	800ea94 <_dtoa_r+0x8e4>
 800eaa6:	9b07      	ldr	r3, [sp, #28]
 800eaa8:	9704      	str	r7, [sp, #16]
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	dc20      	bgt.n	800eaf0 <_dtoa_r+0x940>
 800eaae:	9300      	str	r3, [sp, #0]
 800eab0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eab2:	2b02      	cmp	r3, #2
 800eab4:	dd1e      	ble.n	800eaf4 <_dtoa_r+0x944>
 800eab6:	9b00      	ldr	r3, [sp, #0]
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	f47f aec0 	bne.w	800e83e <_dtoa_r+0x68e>
 800eabe:	4621      	mov	r1, r4
 800eac0:	2205      	movs	r2, #5
 800eac2:	4658      	mov	r0, fp
 800eac4:	f000 fa9a 	bl	800effc <__multadd>
 800eac8:	4601      	mov	r1, r0
 800eaca:	4604      	mov	r4, r0
 800eacc:	4648      	mov	r0, r9
 800eace:	f000 fcad 	bl	800f42c <__mcmp>
 800ead2:	2800      	cmp	r0, #0
 800ead4:	f77f aeb3 	ble.w	800e83e <_dtoa_r+0x68e>
 800ead8:	4656      	mov	r6, sl
 800eada:	2331      	movs	r3, #49	@ 0x31
 800eadc:	f806 3b01 	strb.w	r3, [r6], #1
 800eae0:	9b04      	ldr	r3, [sp, #16]
 800eae2:	3301      	adds	r3, #1
 800eae4:	9304      	str	r3, [sp, #16]
 800eae6:	e6ae      	b.n	800e846 <_dtoa_r+0x696>
 800eae8:	9c07      	ldr	r4, [sp, #28]
 800eaea:	9704      	str	r7, [sp, #16]
 800eaec:	4625      	mov	r5, r4
 800eaee:	e7f3      	b.n	800ead8 <_dtoa_r+0x928>
 800eaf0:	9b07      	ldr	r3, [sp, #28]
 800eaf2:	9300      	str	r3, [sp, #0]
 800eaf4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	f000 8104 	beq.w	800ed04 <_dtoa_r+0xb54>
 800eafc:	2e00      	cmp	r6, #0
 800eafe:	dd05      	ble.n	800eb0c <_dtoa_r+0x95c>
 800eb00:	4629      	mov	r1, r5
 800eb02:	4632      	mov	r2, r6
 800eb04:	4658      	mov	r0, fp
 800eb06:	f000 fc25 	bl	800f354 <__lshift>
 800eb0a:	4605      	mov	r5, r0
 800eb0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d05a      	beq.n	800ebc8 <_dtoa_r+0xa18>
 800eb12:	6869      	ldr	r1, [r5, #4]
 800eb14:	4658      	mov	r0, fp
 800eb16:	f000 fa0f 	bl	800ef38 <_Balloc>
 800eb1a:	4606      	mov	r6, r0
 800eb1c:	b928      	cbnz	r0, 800eb2a <_dtoa_r+0x97a>
 800eb1e:	4b84      	ldr	r3, [pc, #528]	@ (800ed30 <_dtoa_r+0xb80>)
 800eb20:	4602      	mov	r2, r0
 800eb22:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800eb26:	f7ff bb5a 	b.w	800e1de <_dtoa_r+0x2e>
 800eb2a:	692a      	ldr	r2, [r5, #16]
 800eb2c:	3202      	adds	r2, #2
 800eb2e:	0092      	lsls	r2, r2, #2
 800eb30:	f105 010c 	add.w	r1, r5, #12
 800eb34:	300c      	adds	r0, #12
 800eb36:	f000 fe3d 	bl	800f7b4 <memcpy>
 800eb3a:	2201      	movs	r2, #1
 800eb3c:	4631      	mov	r1, r6
 800eb3e:	4658      	mov	r0, fp
 800eb40:	f000 fc08 	bl	800f354 <__lshift>
 800eb44:	f10a 0301 	add.w	r3, sl, #1
 800eb48:	9307      	str	r3, [sp, #28]
 800eb4a:	9b00      	ldr	r3, [sp, #0]
 800eb4c:	4453      	add	r3, sl
 800eb4e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800eb50:	9b02      	ldr	r3, [sp, #8]
 800eb52:	f003 0301 	and.w	r3, r3, #1
 800eb56:	462f      	mov	r7, r5
 800eb58:	930a      	str	r3, [sp, #40]	@ 0x28
 800eb5a:	4605      	mov	r5, r0
 800eb5c:	9b07      	ldr	r3, [sp, #28]
 800eb5e:	4621      	mov	r1, r4
 800eb60:	3b01      	subs	r3, #1
 800eb62:	4648      	mov	r0, r9
 800eb64:	9300      	str	r3, [sp, #0]
 800eb66:	f7ff fa98 	bl	800e09a <quorem>
 800eb6a:	4639      	mov	r1, r7
 800eb6c:	9002      	str	r0, [sp, #8]
 800eb6e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800eb72:	4648      	mov	r0, r9
 800eb74:	f000 fc5a 	bl	800f42c <__mcmp>
 800eb78:	462a      	mov	r2, r5
 800eb7a:	9008      	str	r0, [sp, #32]
 800eb7c:	4621      	mov	r1, r4
 800eb7e:	4658      	mov	r0, fp
 800eb80:	f000 fc70 	bl	800f464 <__mdiff>
 800eb84:	68c2      	ldr	r2, [r0, #12]
 800eb86:	4606      	mov	r6, r0
 800eb88:	bb02      	cbnz	r2, 800ebcc <_dtoa_r+0xa1c>
 800eb8a:	4601      	mov	r1, r0
 800eb8c:	4648      	mov	r0, r9
 800eb8e:	f000 fc4d 	bl	800f42c <__mcmp>
 800eb92:	4602      	mov	r2, r0
 800eb94:	4631      	mov	r1, r6
 800eb96:	4658      	mov	r0, fp
 800eb98:	920e      	str	r2, [sp, #56]	@ 0x38
 800eb9a:	f000 fa0d 	bl	800efb8 <_Bfree>
 800eb9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eba0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800eba2:	9e07      	ldr	r6, [sp, #28]
 800eba4:	ea43 0102 	orr.w	r1, r3, r2
 800eba8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ebaa:	4319      	orrs	r1, r3
 800ebac:	d110      	bne.n	800ebd0 <_dtoa_r+0xa20>
 800ebae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ebb2:	d029      	beq.n	800ec08 <_dtoa_r+0xa58>
 800ebb4:	9b08      	ldr	r3, [sp, #32]
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	dd02      	ble.n	800ebc0 <_dtoa_r+0xa10>
 800ebba:	9b02      	ldr	r3, [sp, #8]
 800ebbc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800ebc0:	9b00      	ldr	r3, [sp, #0]
 800ebc2:	f883 8000 	strb.w	r8, [r3]
 800ebc6:	e63f      	b.n	800e848 <_dtoa_r+0x698>
 800ebc8:	4628      	mov	r0, r5
 800ebca:	e7bb      	b.n	800eb44 <_dtoa_r+0x994>
 800ebcc:	2201      	movs	r2, #1
 800ebce:	e7e1      	b.n	800eb94 <_dtoa_r+0x9e4>
 800ebd0:	9b08      	ldr	r3, [sp, #32]
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	db04      	blt.n	800ebe0 <_dtoa_r+0xa30>
 800ebd6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ebd8:	430b      	orrs	r3, r1
 800ebda:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ebdc:	430b      	orrs	r3, r1
 800ebde:	d120      	bne.n	800ec22 <_dtoa_r+0xa72>
 800ebe0:	2a00      	cmp	r2, #0
 800ebe2:	dded      	ble.n	800ebc0 <_dtoa_r+0xa10>
 800ebe4:	4649      	mov	r1, r9
 800ebe6:	2201      	movs	r2, #1
 800ebe8:	4658      	mov	r0, fp
 800ebea:	f000 fbb3 	bl	800f354 <__lshift>
 800ebee:	4621      	mov	r1, r4
 800ebf0:	4681      	mov	r9, r0
 800ebf2:	f000 fc1b 	bl	800f42c <__mcmp>
 800ebf6:	2800      	cmp	r0, #0
 800ebf8:	dc03      	bgt.n	800ec02 <_dtoa_r+0xa52>
 800ebfa:	d1e1      	bne.n	800ebc0 <_dtoa_r+0xa10>
 800ebfc:	f018 0f01 	tst.w	r8, #1
 800ec00:	d0de      	beq.n	800ebc0 <_dtoa_r+0xa10>
 800ec02:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ec06:	d1d8      	bne.n	800ebba <_dtoa_r+0xa0a>
 800ec08:	9a00      	ldr	r2, [sp, #0]
 800ec0a:	2339      	movs	r3, #57	@ 0x39
 800ec0c:	7013      	strb	r3, [r2, #0]
 800ec0e:	4633      	mov	r3, r6
 800ec10:	461e      	mov	r6, r3
 800ec12:	3b01      	subs	r3, #1
 800ec14:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ec18:	2a39      	cmp	r2, #57	@ 0x39
 800ec1a:	d052      	beq.n	800ecc2 <_dtoa_r+0xb12>
 800ec1c:	3201      	adds	r2, #1
 800ec1e:	701a      	strb	r2, [r3, #0]
 800ec20:	e612      	b.n	800e848 <_dtoa_r+0x698>
 800ec22:	2a00      	cmp	r2, #0
 800ec24:	dd07      	ble.n	800ec36 <_dtoa_r+0xa86>
 800ec26:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ec2a:	d0ed      	beq.n	800ec08 <_dtoa_r+0xa58>
 800ec2c:	9a00      	ldr	r2, [sp, #0]
 800ec2e:	f108 0301 	add.w	r3, r8, #1
 800ec32:	7013      	strb	r3, [r2, #0]
 800ec34:	e608      	b.n	800e848 <_dtoa_r+0x698>
 800ec36:	9b07      	ldr	r3, [sp, #28]
 800ec38:	9a07      	ldr	r2, [sp, #28]
 800ec3a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800ec3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ec40:	4293      	cmp	r3, r2
 800ec42:	d028      	beq.n	800ec96 <_dtoa_r+0xae6>
 800ec44:	4649      	mov	r1, r9
 800ec46:	2300      	movs	r3, #0
 800ec48:	220a      	movs	r2, #10
 800ec4a:	4658      	mov	r0, fp
 800ec4c:	f000 f9d6 	bl	800effc <__multadd>
 800ec50:	42af      	cmp	r7, r5
 800ec52:	4681      	mov	r9, r0
 800ec54:	f04f 0300 	mov.w	r3, #0
 800ec58:	f04f 020a 	mov.w	r2, #10
 800ec5c:	4639      	mov	r1, r7
 800ec5e:	4658      	mov	r0, fp
 800ec60:	d107      	bne.n	800ec72 <_dtoa_r+0xac2>
 800ec62:	f000 f9cb 	bl	800effc <__multadd>
 800ec66:	4607      	mov	r7, r0
 800ec68:	4605      	mov	r5, r0
 800ec6a:	9b07      	ldr	r3, [sp, #28]
 800ec6c:	3301      	adds	r3, #1
 800ec6e:	9307      	str	r3, [sp, #28]
 800ec70:	e774      	b.n	800eb5c <_dtoa_r+0x9ac>
 800ec72:	f000 f9c3 	bl	800effc <__multadd>
 800ec76:	4629      	mov	r1, r5
 800ec78:	4607      	mov	r7, r0
 800ec7a:	2300      	movs	r3, #0
 800ec7c:	220a      	movs	r2, #10
 800ec7e:	4658      	mov	r0, fp
 800ec80:	f000 f9bc 	bl	800effc <__multadd>
 800ec84:	4605      	mov	r5, r0
 800ec86:	e7f0      	b.n	800ec6a <_dtoa_r+0xaba>
 800ec88:	9b00      	ldr	r3, [sp, #0]
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	bfcc      	ite	gt
 800ec8e:	461e      	movgt	r6, r3
 800ec90:	2601      	movle	r6, #1
 800ec92:	4456      	add	r6, sl
 800ec94:	2700      	movs	r7, #0
 800ec96:	4649      	mov	r1, r9
 800ec98:	2201      	movs	r2, #1
 800ec9a:	4658      	mov	r0, fp
 800ec9c:	f000 fb5a 	bl	800f354 <__lshift>
 800eca0:	4621      	mov	r1, r4
 800eca2:	4681      	mov	r9, r0
 800eca4:	f000 fbc2 	bl	800f42c <__mcmp>
 800eca8:	2800      	cmp	r0, #0
 800ecaa:	dcb0      	bgt.n	800ec0e <_dtoa_r+0xa5e>
 800ecac:	d102      	bne.n	800ecb4 <_dtoa_r+0xb04>
 800ecae:	f018 0f01 	tst.w	r8, #1
 800ecb2:	d1ac      	bne.n	800ec0e <_dtoa_r+0xa5e>
 800ecb4:	4633      	mov	r3, r6
 800ecb6:	461e      	mov	r6, r3
 800ecb8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ecbc:	2a30      	cmp	r2, #48	@ 0x30
 800ecbe:	d0fa      	beq.n	800ecb6 <_dtoa_r+0xb06>
 800ecc0:	e5c2      	b.n	800e848 <_dtoa_r+0x698>
 800ecc2:	459a      	cmp	sl, r3
 800ecc4:	d1a4      	bne.n	800ec10 <_dtoa_r+0xa60>
 800ecc6:	9b04      	ldr	r3, [sp, #16]
 800ecc8:	3301      	adds	r3, #1
 800ecca:	9304      	str	r3, [sp, #16]
 800eccc:	2331      	movs	r3, #49	@ 0x31
 800ecce:	f88a 3000 	strb.w	r3, [sl]
 800ecd2:	e5b9      	b.n	800e848 <_dtoa_r+0x698>
 800ecd4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ecd6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800ed34 <_dtoa_r+0xb84>
 800ecda:	b11b      	cbz	r3, 800ece4 <_dtoa_r+0xb34>
 800ecdc:	f10a 0308 	add.w	r3, sl, #8
 800ece0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ece2:	6013      	str	r3, [r2, #0]
 800ece4:	4650      	mov	r0, sl
 800ece6:	b019      	add	sp, #100	@ 0x64
 800ece8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ecec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ecee:	2b01      	cmp	r3, #1
 800ecf0:	f77f ae37 	ble.w	800e962 <_dtoa_r+0x7b2>
 800ecf4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ecf6:	930a      	str	r3, [sp, #40]	@ 0x28
 800ecf8:	2001      	movs	r0, #1
 800ecfa:	e655      	b.n	800e9a8 <_dtoa_r+0x7f8>
 800ecfc:	9b00      	ldr	r3, [sp, #0]
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	f77f aed6 	ble.w	800eab0 <_dtoa_r+0x900>
 800ed04:	4656      	mov	r6, sl
 800ed06:	4621      	mov	r1, r4
 800ed08:	4648      	mov	r0, r9
 800ed0a:	f7ff f9c6 	bl	800e09a <quorem>
 800ed0e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ed12:	f806 8b01 	strb.w	r8, [r6], #1
 800ed16:	9b00      	ldr	r3, [sp, #0]
 800ed18:	eba6 020a 	sub.w	r2, r6, sl
 800ed1c:	4293      	cmp	r3, r2
 800ed1e:	ddb3      	ble.n	800ec88 <_dtoa_r+0xad8>
 800ed20:	4649      	mov	r1, r9
 800ed22:	2300      	movs	r3, #0
 800ed24:	220a      	movs	r2, #10
 800ed26:	4658      	mov	r0, fp
 800ed28:	f000 f968 	bl	800effc <__multadd>
 800ed2c:	4681      	mov	r9, r0
 800ed2e:	e7ea      	b.n	800ed06 <_dtoa_r+0xb56>
 800ed30:	08010520 	.word	0x08010520
 800ed34:	080104a4 	.word	0x080104a4

0800ed38 <_free_r>:
 800ed38:	b538      	push	{r3, r4, r5, lr}
 800ed3a:	4605      	mov	r5, r0
 800ed3c:	2900      	cmp	r1, #0
 800ed3e:	d041      	beq.n	800edc4 <_free_r+0x8c>
 800ed40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ed44:	1f0c      	subs	r4, r1, #4
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	bfb8      	it	lt
 800ed4a:	18e4      	addlt	r4, r4, r3
 800ed4c:	f000 f8e8 	bl	800ef20 <__malloc_lock>
 800ed50:	4a1d      	ldr	r2, [pc, #116]	@ (800edc8 <_free_r+0x90>)
 800ed52:	6813      	ldr	r3, [r2, #0]
 800ed54:	b933      	cbnz	r3, 800ed64 <_free_r+0x2c>
 800ed56:	6063      	str	r3, [r4, #4]
 800ed58:	6014      	str	r4, [r2, #0]
 800ed5a:	4628      	mov	r0, r5
 800ed5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ed60:	f000 b8e4 	b.w	800ef2c <__malloc_unlock>
 800ed64:	42a3      	cmp	r3, r4
 800ed66:	d908      	bls.n	800ed7a <_free_r+0x42>
 800ed68:	6820      	ldr	r0, [r4, #0]
 800ed6a:	1821      	adds	r1, r4, r0
 800ed6c:	428b      	cmp	r3, r1
 800ed6e:	bf01      	itttt	eq
 800ed70:	6819      	ldreq	r1, [r3, #0]
 800ed72:	685b      	ldreq	r3, [r3, #4]
 800ed74:	1809      	addeq	r1, r1, r0
 800ed76:	6021      	streq	r1, [r4, #0]
 800ed78:	e7ed      	b.n	800ed56 <_free_r+0x1e>
 800ed7a:	461a      	mov	r2, r3
 800ed7c:	685b      	ldr	r3, [r3, #4]
 800ed7e:	b10b      	cbz	r3, 800ed84 <_free_r+0x4c>
 800ed80:	42a3      	cmp	r3, r4
 800ed82:	d9fa      	bls.n	800ed7a <_free_r+0x42>
 800ed84:	6811      	ldr	r1, [r2, #0]
 800ed86:	1850      	adds	r0, r2, r1
 800ed88:	42a0      	cmp	r0, r4
 800ed8a:	d10b      	bne.n	800eda4 <_free_r+0x6c>
 800ed8c:	6820      	ldr	r0, [r4, #0]
 800ed8e:	4401      	add	r1, r0
 800ed90:	1850      	adds	r0, r2, r1
 800ed92:	4283      	cmp	r3, r0
 800ed94:	6011      	str	r1, [r2, #0]
 800ed96:	d1e0      	bne.n	800ed5a <_free_r+0x22>
 800ed98:	6818      	ldr	r0, [r3, #0]
 800ed9a:	685b      	ldr	r3, [r3, #4]
 800ed9c:	6053      	str	r3, [r2, #4]
 800ed9e:	4408      	add	r0, r1
 800eda0:	6010      	str	r0, [r2, #0]
 800eda2:	e7da      	b.n	800ed5a <_free_r+0x22>
 800eda4:	d902      	bls.n	800edac <_free_r+0x74>
 800eda6:	230c      	movs	r3, #12
 800eda8:	602b      	str	r3, [r5, #0]
 800edaa:	e7d6      	b.n	800ed5a <_free_r+0x22>
 800edac:	6820      	ldr	r0, [r4, #0]
 800edae:	1821      	adds	r1, r4, r0
 800edb0:	428b      	cmp	r3, r1
 800edb2:	bf04      	itt	eq
 800edb4:	6819      	ldreq	r1, [r3, #0]
 800edb6:	685b      	ldreq	r3, [r3, #4]
 800edb8:	6063      	str	r3, [r4, #4]
 800edba:	bf04      	itt	eq
 800edbc:	1809      	addeq	r1, r1, r0
 800edbe:	6021      	streq	r1, [r4, #0]
 800edc0:	6054      	str	r4, [r2, #4]
 800edc2:	e7ca      	b.n	800ed5a <_free_r+0x22>
 800edc4:	bd38      	pop	{r3, r4, r5, pc}
 800edc6:	bf00      	nop
 800edc8:	200024e4 	.word	0x200024e4

0800edcc <malloc>:
 800edcc:	4b02      	ldr	r3, [pc, #8]	@ (800edd8 <malloc+0xc>)
 800edce:	4601      	mov	r1, r0
 800edd0:	6818      	ldr	r0, [r3, #0]
 800edd2:	f000 b825 	b.w	800ee20 <_malloc_r>
 800edd6:	bf00      	nop
 800edd8:	2000010c 	.word	0x2000010c

0800eddc <sbrk_aligned>:
 800eddc:	b570      	push	{r4, r5, r6, lr}
 800edde:	4e0f      	ldr	r6, [pc, #60]	@ (800ee1c <sbrk_aligned+0x40>)
 800ede0:	460c      	mov	r4, r1
 800ede2:	6831      	ldr	r1, [r6, #0]
 800ede4:	4605      	mov	r5, r0
 800ede6:	b911      	cbnz	r1, 800edee <sbrk_aligned+0x12>
 800ede8:	f000 fcd4 	bl	800f794 <_sbrk_r>
 800edec:	6030      	str	r0, [r6, #0]
 800edee:	4621      	mov	r1, r4
 800edf0:	4628      	mov	r0, r5
 800edf2:	f000 fccf 	bl	800f794 <_sbrk_r>
 800edf6:	1c43      	adds	r3, r0, #1
 800edf8:	d103      	bne.n	800ee02 <sbrk_aligned+0x26>
 800edfa:	f04f 34ff 	mov.w	r4, #4294967295
 800edfe:	4620      	mov	r0, r4
 800ee00:	bd70      	pop	{r4, r5, r6, pc}
 800ee02:	1cc4      	adds	r4, r0, #3
 800ee04:	f024 0403 	bic.w	r4, r4, #3
 800ee08:	42a0      	cmp	r0, r4
 800ee0a:	d0f8      	beq.n	800edfe <sbrk_aligned+0x22>
 800ee0c:	1a21      	subs	r1, r4, r0
 800ee0e:	4628      	mov	r0, r5
 800ee10:	f000 fcc0 	bl	800f794 <_sbrk_r>
 800ee14:	3001      	adds	r0, #1
 800ee16:	d1f2      	bne.n	800edfe <sbrk_aligned+0x22>
 800ee18:	e7ef      	b.n	800edfa <sbrk_aligned+0x1e>
 800ee1a:	bf00      	nop
 800ee1c:	200024e0 	.word	0x200024e0

0800ee20 <_malloc_r>:
 800ee20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ee24:	1ccd      	adds	r5, r1, #3
 800ee26:	f025 0503 	bic.w	r5, r5, #3
 800ee2a:	3508      	adds	r5, #8
 800ee2c:	2d0c      	cmp	r5, #12
 800ee2e:	bf38      	it	cc
 800ee30:	250c      	movcc	r5, #12
 800ee32:	2d00      	cmp	r5, #0
 800ee34:	4606      	mov	r6, r0
 800ee36:	db01      	blt.n	800ee3c <_malloc_r+0x1c>
 800ee38:	42a9      	cmp	r1, r5
 800ee3a:	d904      	bls.n	800ee46 <_malloc_r+0x26>
 800ee3c:	230c      	movs	r3, #12
 800ee3e:	6033      	str	r3, [r6, #0]
 800ee40:	2000      	movs	r0, #0
 800ee42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ee46:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ef1c <_malloc_r+0xfc>
 800ee4a:	f000 f869 	bl	800ef20 <__malloc_lock>
 800ee4e:	f8d8 3000 	ldr.w	r3, [r8]
 800ee52:	461c      	mov	r4, r3
 800ee54:	bb44      	cbnz	r4, 800eea8 <_malloc_r+0x88>
 800ee56:	4629      	mov	r1, r5
 800ee58:	4630      	mov	r0, r6
 800ee5a:	f7ff ffbf 	bl	800eddc <sbrk_aligned>
 800ee5e:	1c43      	adds	r3, r0, #1
 800ee60:	4604      	mov	r4, r0
 800ee62:	d158      	bne.n	800ef16 <_malloc_r+0xf6>
 800ee64:	f8d8 4000 	ldr.w	r4, [r8]
 800ee68:	4627      	mov	r7, r4
 800ee6a:	2f00      	cmp	r7, #0
 800ee6c:	d143      	bne.n	800eef6 <_malloc_r+0xd6>
 800ee6e:	2c00      	cmp	r4, #0
 800ee70:	d04b      	beq.n	800ef0a <_malloc_r+0xea>
 800ee72:	6823      	ldr	r3, [r4, #0]
 800ee74:	4639      	mov	r1, r7
 800ee76:	4630      	mov	r0, r6
 800ee78:	eb04 0903 	add.w	r9, r4, r3
 800ee7c:	f000 fc8a 	bl	800f794 <_sbrk_r>
 800ee80:	4581      	cmp	r9, r0
 800ee82:	d142      	bne.n	800ef0a <_malloc_r+0xea>
 800ee84:	6821      	ldr	r1, [r4, #0]
 800ee86:	1a6d      	subs	r5, r5, r1
 800ee88:	4629      	mov	r1, r5
 800ee8a:	4630      	mov	r0, r6
 800ee8c:	f7ff ffa6 	bl	800eddc <sbrk_aligned>
 800ee90:	3001      	adds	r0, #1
 800ee92:	d03a      	beq.n	800ef0a <_malloc_r+0xea>
 800ee94:	6823      	ldr	r3, [r4, #0]
 800ee96:	442b      	add	r3, r5
 800ee98:	6023      	str	r3, [r4, #0]
 800ee9a:	f8d8 3000 	ldr.w	r3, [r8]
 800ee9e:	685a      	ldr	r2, [r3, #4]
 800eea0:	bb62      	cbnz	r2, 800eefc <_malloc_r+0xdc>
 800eea2:	f8c8 7000 	str.w	r7, [r8]
 800eea6:	e00f      	b.n	800eec8 <_malloc_r+0xa8>
 800eea8:	6822      	ldr	r2, [r4, #0]
 800eeaa:	1b52      	subs	r2, r2, r5
 800eeac:	d420      	bmi.n	800eef0 <_malloc_r+0xd0>
 800eeae:	2a0b      	cmp	r2, #11
 800eeb0:	d917      	bls.n	800eee2 <_malloc_r+0xc2>
 800eeb2:	1961      	adds	r1, r4, r5
 800eeb4:	42a3      	cmp	r3, r4
 800eeb6:	6025      	str	r5, [r4, #0]
 800eeb8:	bf18      	it	ne
 800eeba:	6059      	strne	r1, [r3, #4]
 800eebc:	6863      	ldr	r3, [r4, #4]
 800eebe:	bf08      	it	eq
 800eec0:	f8c8 1000 	streq.w	r1, [r8]
 800eec4:	5162      	str	r2, [r4, r5]
 800eec6:	604b      	str	r3, [r1, #4]
 800eec8:	4630      	mov	r0, r6
 800eeca:	f000 f82f 	bl	800ef2c <__malloc_unlock>
 800eece:	f104 000b 	add.w	r0, r4, #11
 800eed2:	1d23      	adds	r3, r4, #4
 800eed4:	f020 0007 	bic.w	r0, r0, #7
 800eed8:	1ac2      	subs	r2, r0, r3
 800eeda:	bf1c      	itt	ne
 800eedc:	1a1b      	subne	r3, r3, r0
 800eede:	50a3      	strne	r3, [r4, r2]
 800eee0:	e7af      	b.n	800ee42 <_malloc_r+0x22>
 800eee2:	6862      	ldr	r2, [r4, #4]
 800eee4:	42a3      	cmp	r3, r4
 800eee6:	bf0c      	ite	eq
 800eee8:	f8c8 2000 	streq.w	r2, [r8]
 800eeec:	605a      	strne	r2, [r3, #4]
 800eeee:	e7eb      	b.n	800eec8 <_malloc_r+0xa8>
 800eef0:	4623      	mov	r3, r4
 800eef2:	6864      	ldr	r4, [r4, #4]
 800eef4:	e7ae      	b.n	800ee54 <_malloc_r+0x34>
 800eef6:	463c      	mov	r4, r7
 800eef8:	687f      	ldr	r7, [r7, #4]
 800eefa:	e7b6      	b.n	800ee6a <_malloc_r+0x4a>
 800eefc:	461a      	mov	r2, r3
 800eefe:	685b      	ldr	r3, [r3, #4]
 800ef00:	42a3      	cmp	r3, r4
 800ef02:	d1fb      	bne.n	800eefc <_malloc_r+0xdc>
 800ef04:	2300      	movs	r3, #0
 800ef06:	6053      	str	r3, [r2, #4]
 800ef08:	e7de      	b.n	800eec8 <_malloc_r+0xa8>
 800ef0a:	230c      	movs	r3, #12
 800ef0c:	6033      	str	r3, [r6, #0]
 800ef0e:	4630      	mov	r0, r6
 800ef10:	f000 f80c 	bl	800ef2c <__malloc_unlock>
 800ef14:	e794      	b.n	800ee40 <_malloc_r+0x20>
 800ef16:	6005      	str	r5, [r0, #0]
 800ef18:	e7d6      	b.n	800eec8 <_malloc_r+0xa8>
 800ef1a:	bf00      	nop
 800ef1c:	200024e4 	.word	0x200024e4

0800ef20 <__malloc_lock>:
 800ef20:	4801      	ldr	r0, [pc, #4]	@ (800ef28 <__malloc_lock+0x8>)
 800ef22:	f7ff b8b8 	b.w	800e096 <__retarget_lock_acquire_recursive>
 800ef26:	bf00      	nop
 800ef28:	200024dc 	.word	0x200024dc

0800ef2c <__malloc_unlock>:
 800ef2c:	4801      	ldr	r0, [pc, #4]	@ (800ef34 <__malloc_unlock+0x8>)
 800ef2e:	f7ff b8b3 	b.w	800e098 <__retarget_lock_release_recursive>
 800ef32:	bf00      	nop
 800ef34:	200024dc 	.word	0x200024dc

0800ef38 <_Balloc>:
 800ef38:	b570      	push	{r4, r5, r6, lr}
 800ef3a:	69c6      	ldr	r6, [r0, #28]
 800ef3c:	4604      	mov	r4, r0
 800ef3e:	460d      	mov	r5, r1
 800ef40:	b976      	cbnz	r6, 800ef60 <_Balloc+0x28>
 800ef42:	2010      	movs	r0, #16
 800ef44:	f7ff ff42 	bl	800edcc <malloc>
 800ef48:	4602      	mov	r2, r0
 800ef4a:	61e0      	str	r0, [r4, #28]
 800ef4c:	b920      	cbnz	r0, 800ef58 <_Balloc+0x20>
 800ef4e:	4b18      	ldr	r3, [pc, #96]	@ (800efb0 <_Balloc+0x78>)
 800ef50:	4818      	ldr	r0, [pc, #96]	@ (800efb4 <_Balloc+0x7c>)
 800ef52:	216b      	movs	r1, #107	@ 0x6b
 800ef54:	f000 fc3c 	bl	800f7d0 <__assert_func>
 800ef58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ef5c:	6006      	str	r6, [r0, #0]
 800ef5e:	60c6      	str	r6, [r0, #12]
 800ef60:	69e6      	ldr	r6, [r4, #28]
 800ef62:	68f3      	ldr	r3, [r6, #12]
 800ef64:	b183      	cbz	r3, 800ef88 <_Balloc+0x50>
 800ef66:	69e3      	ldr	r3, [r4, #28]
 800ef68:	68db      	ldr	r3, [r3, #12]
 800ef6a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ef6e:	b9b8      	cbnz	r0, 800efa0 <_Balloc+0x68>
 800ef70:	2101      	movs	r1, #1
 800ef72:	fa01 f605 	lsl.w	r6, r1, r5
 800ef76:	1d72      	adds	r2, r6, #5
 800ef78:	0092      	lsls	r2, r2, #2
 800ef7a:	4620      	mov	r0, r4
 800ef7c:	f000 fc46 	bl	800f80c <_calloc_r>
 800ef80:	b160      	cbz	r0, 800ef9c <_Balloc+0x64>
 800ef82:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ef86:	e00e      	b.n	800efa6 <_Balloc+0x6e>
 800ef88:	2221      	movs	r2, #33	@ 0x21
 800ef8a:	2104      	movs	r1, #4
 800ef8c:	4620      	mov	r0, r4
 800ef8e:	f000 fc3d 	bl	800f80c <_calloc_r>
 800ef92:	69e3      	ldr	r3, [r4, #28]
 800ef94:	60f0      	str	r0, [r6, #12]
 800ef96:	68db      	ldr	r3, [r3, #12]
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d1e4      	bne.n	800ef66 <_Balloc+0x2e>
 800ef9c:	2000      	movs	r0, #0
 800ef9e:	bd70      	pop	{r4, r5, r6, pc}
 800efa0:	6802      	ldr	r2, [r0, #0]
 800efa2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800efa6:	2300      	movs	r3, #0
 800efa8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800efac:	e7f7      	b.n	800ef9e <_Balloc+0x66>
 800efae:	bf00      	nop
 800efb0:	080104b1 	.word	0x080104b1
 800efb4:	08010531 	.word	0x08010531

0800efb8 <_Bfree>:
 800efb8:	b570      	push	{r4, r5, r6, lr}
 800efba:	69c6      	ldr	r6, [r0, #28]
 800efbc:	4605      	mov	r5, r0
 800efbe:	460c      	mov	r4, r1
 800efc0:	b976      	cbnz	r6, 800efe0 <_Bfree+0x28>
 800efc2:	2010      	movs	r0, #16
 800efc4:	f7ff ff02 	bl	800edcc <malloc>
 800efc8:	4602      	mov	r2, r0
 800efca:	61e8      	str	r0, [r5, #28]
 800efcc:	b920      	cbnz	r0, 800efd8 <_Bfree+0x20>
 800efce:	4b09      	ldr	r3, [pc, #36]	@ (800eff4 <_Bfree+0x3c>)
 800efd0:	4809      	ldr	r0, [pc, #36]	@ (800eff8 <_Bfree+0x40>)
 800efd2:	218f      	movs	r1, #143	@ 0x8f
 800efd4:	f000 fbfc 	bl	800f7d0 <__assert_func>
 800efd8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800efdc:	6006      	str	r6, [r0, #0]
 800efde:	60c6      	str	r6, [r0, #12]
 800efe0:	b13c      	cbz	r4, 800eff2 <_Bfree+0x3a>
 800efe2:	69eb      	ldr	r3, [r5, #28]
 800efe4:	6862      	ldr	r2, [r4, #4]
 800efe6:	68db      	ldr	r3, [r3, #12]
 800efe8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800efec:	6021      	str	r1, [r4, #0]
 800efee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800eff2:	bd70      	pop	{r4, r5, r6, pc}
 800eff4:	080104b1 	.word	0x080104b1
 800eff8:	08010531 	.word	0x08010531

0800effc <__multadd>:
 800effc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f000:	690d      	ldr	r5, [r1, #16]
 800f002:	4607      	mov	r7, r0
 800f004:	460c      	mov	r4, r1
 800f006:	461e      	mov	r6, r3
 800f008:	f101 0c14 	add.w	ip, r1, #20
 800f00c:	2000      	movs	r0, #0
 800f00e:	f8dc 3000 	ldr.w	r3, [ip]
 800f012:	b299      	uxth	r1, r3
 800f014:	fb02 6101 	mla	r1, r2, r1, r6
 800f018:	0c1e      	lsrs	r6, r3, #16
 800f01a:	0c0b      	lsrs	r3, r1, #16
 800f01c:	fb02 3306 	mla	r3, r2, r6, r3
 800f020:	b289      	uxth	r1, r1
 800f022:	3001      	adds	r0, #1
 800f024:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f028:	4285      	cmp	r5, r0
 800f02a:	f84c 1b04 	str.w	r1, [ip], #4
 800f02e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f032:	dcec      	bgt.n	800f00e <__multadd+0x12>
 800f034:	b30e      	cbz	r6, 800f07a <__multadd+0x7e>
 800f036:	68a3      	ldr	r3, [r4, #8]
 800f038:	42ab      	cmp	r3, r5
 800f03a:	dc19      	bgt.n	800f070 <__multadd+0x74>
 800f03c:	6861      	ldr	r1, [r4, #4]
 800f03e:	4638      	mov	r0, r7
 800f040:	3101      	adds	r1, #1
 800f042:	f7ff ff79 	bl	800ef38 <_Balloc>
 800f046:	4680      	mov	r8, r0
 800f048:	b928      	cbnz	r0, 800f056 <__multadd+0x5a>
 800f04a:	4602      	mov	r2, r0
 800f04c:	4b0c      	ldr	r3, [pc, #48]	@ (800f080 <__multadd+0x84>)
 800f04e:	480d      	ldr	r0, [pc, #52]	@ (800f084 <__multadd+0x88>)
 800f050:	21ba      	movs	r1, #186	@ 0xba
 800f052:	f000 fbbd 	bl	800f7d0 <__assert_func>
 800f056:	6922      	ldr	r2, [r4, #16]
 800f058:	3202      	adds	r2, #2
 800f05a:	f104 010c 	add.w	r1, r4, #12
 800f05e:	0092      	lsls	r2, r2, #2
 800f060:	300c      	adds	r0, #12
 800f062:	f000 fba7 	bl	800f7b4 <memcpy>
 800f066:	4621      	mov	r1, r4
 800f068:	4638      	mov	r0, r7
 800f06a:	f7ff ffa5 	bl	800efb8 <_Bfree>
 800f06e:	4644      	mov	r4, r8
 800f070:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f074:	3501      	adds	r5, #1
 800f076:	615e      	str	r6, [r3, #20]
 800f078:	6125      	str	r5, [r4, #16]
 800f07a:	4620      	mov	r0, r4
 800f07c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f080:	08010520 	.word	0x08010520
 800f084:	08010531 	.word	0x08010531

0800f088 <__hi0bits>:
 800f088:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800f08c:	4603      	mov	r3, r0
 800f08e:	bf36      	itet	cc
 800f090:	0403      	lslcc	r3, r0, #16
 800f092:	2000      	movcs	r0, #0
 800f094:	2010      	movcc	r0, #16
 800f096:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f09a:	bf3c      	itt	cc
 800f09c:	021b      	lslcc	r3, r3, #8
 800f09e:	3008      	addcc	r0, #8
 800f0a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f0a4:	bf3c      	itt	cc
 800f0a6:	011b      	lslcc	r3, r3, #4
 800f0a8:	3004      	addcc	r0, #4
 800f0aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f0ae:	bf3c      	itt	cc
 800f0b0:	009b      	lslcc	r3, r3, #2
 800f0b2:	3002      	addcc	r0, #2
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	db05      	blt.n	800f0c4 <__hi0bits+0x3c>
 800f0b8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800f0bc:	f100 0001 	add.w	r0, r0, #1
 800f0c0:	bf08      	it	eq
 800f0c2:	2020      	moveq	r0, #32
 800f0c4:	4770      	bx	lr

0800f0c6 <__lo0bits>:
 800f0c6:	6803      	ldr	r3, [r0, #0]
 800f0c8:	4602      	mov	r2, r0
 800f0ca:	f013 0007 	ands.w	r0, r3, #7
 800f0ce:	d00b      	beq.n	800f0e8 <__lo0bits+0x22>
 800f0d0:	07d9      	lsls	r1, r3, #31
 800f0d2:	d421      	bmi.n	800f118 <__lo0bits+0x52>
 800f0d4:	0798      	lsls	r0, r3, #30
 800f0d6:	bf49      	itett	mi
 800f0d8:	085b      	lsrmi	r3, r3, #1
 800f0da:	089b      	lsrpl	r3, r3, #2
 800f0dc:	2001      	movmi	r0, #1
 800f0de:	6013      	strmi	r3, [r2, #0]
 800f0e0:	bf5c      	itt	pl
 800f0e2:	6013      	strpl	r3, [r2, #0]
 800f0e4:	2002      	movpl	r0, #2
 800f0e6:	4770      	bx	lr
 800f0e8:	b299      	uxth	r1, r3
 800f0ea:	b909      	cbnz	r1, 800f0f0 <__lo0bits+0x2a>
 800f0ec:	0c1b      	lsrs	r3, r3, #16
 800f0ee:	2010      	movs	r0, #16
 800f0f0:	b2d9      	uxtb	r1, r3
 800f0f2:	b909      	cbnz	r1, 800f0f8 <__lo0bits+0x32>
 800f0f4:	3008      	adds	r0, #8
 800f0f6:	0a1b      	lsrs	r3, r3, #8
 800f0f8:	0719      	lsls	r1, r3, #28
 800f0fa:	bf04      	itt	eq
 800f0fc:	091b      	lsreq	r3, r3, #4
 800f0fe:	3004      	addeq	r0, #4
 800f100:	0799      	lsls	r1, r3, #30
 800f102:	bf04      	itt	eq
 800f104:	089b      	lsreq	r3, r3, #2
 800f106:	3002      	addeq	r0, #2
 800f108:	07d9      	lsls	r1, r3, #31
 800f10a:	d403      	bmi.n	800f114 <__lo0bits+0x4e>
 800f10c:	085b      	lsrs	r3, r3, #1
 800f10e:	f100 0001 	add.w	r0, r0, #1
 800f112:	d003      	beq.n	800f11c <__lo0bits+0x56>
 800f114:	6013      	str	r3, [r2, #0]
 800f116:	4770      	bx	lr
 800f118:	2000      	movs	r0, #0
 800f11a:	4770      	bx	lr
 800f11c:	2020      	movs	r0, #32
 800f11e:	4770      	bx	lr

0800f120 <__i2b>:
 800f120:	b510      	push	{r4, lr}
 800f122:	460c      	mov	r4, r1
 800f124:	2101      	movs	r1, #1
 800f126:	f7ff ff07 	bl	800ef38 <_Balloc>
 800f12a:	4602      	mov	r2, r0
 800f12c:	b928      	cbnz	r0, 800f13a <__i2b+0x1a>
 800f12e:	4b05      	ldr	r3, [pc, #20]	@ (800f144 <__i2b+0x24>)
 800f130:	4805      	ldr	r0, [pc, #20]	@ (800f148 <__i2b+0x28>)
 800f132:	f240 1145 	movw	r1, #325	@ 0x145
 800f136:	f000 fb4b 	bl	800f7d0 <__assert_func>
 800f13a:	2301      	movs	r3, #1
 800f13c:	6144      	str	r4, [r0, #20]
 800f13e:	6103      	str	r3, [r0, #16]
 800f140:	bd10      	pop	{r4, pc}
 800f142:	bf00      	nop
 800f144:	08010520 	.word	0x08010520
 800f148:	08010531 	.word	0x08010531

0800f14c <__multiply>:
 800f14c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f150:	4614      	mov	r4, r2
 800f152:	690a      	ldr	r2, [r1, #16]
 800f154:	6923      	ldr	r3, [r4, #16]
 800f156:	429a      	cmp	r2, r3
 800f158:	bfa8      	it	ge
 800f15a:	4623      	movge	r3, r4
 800f15c:	460f      	mov	r7, r1
 800f15e:	bfa4      	itt	ge
 800f160:	460c      	movge	r4, r1
 800f162:	461f      	movge	r7, r3
 800f164:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800f168:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800f16c:	68a3      	ldr	r3, [r4, #8]
 800f16e:	6861      	ldr	r1, [r4, #4]
 800f170:	eb0a 0609 	add.w	r6, sl, r9
 800f174:	42b3      	cmp	r3, r6
 800f176:	b085      	sub	sp, #20
 800f178:	bfb8      	it	lt
 800f17a:	3101      	addlt	r1, #1
 800f17c:	f7ff fedc 	bl	800ef38 <_Balloc>
 800f180:	b930      	cbnz	r0, 800f190 <__multiply+0x44>
 800f182:	4602      	mov	r2, r0
 800f184:	4b44      	ldr	r3, [pc, #272]	@ (800f298 <__multiply+0x14c>)
 800f186:	4845      	ldr	r0, [pc, #276]	@ (800f29c <__multiply+0x150>)
 800f188:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800f18c:	f000 fb20 	bl	800f7d0 <__assert_func>
 800f190:	f100 0514 	add.w	r5, r0, #20
 800f194:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f198:	462b      	mov	r3, r5
 800f19a:	2200      	movs	r2, #0
 800f19c:	4543      	cmp	r3, r8
 800f19e:	d321      	bcc.n	800f1e4 <__multiply+0x98>
 800f1a0:	f107 0114 	add.w	r1, r7, #20
 800f1a4:	f104 0214 	add.w	r2, r4, #20
 800f1a8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800f1ac:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800f1b0:	9302      	str	r3, [sp, #8]
 800f1b2:	1b13      	subs	r3, r2, r4
 800f1b4:	3b15      	subs	r3, #21
 800f1b6:	f023 0303 	bic.w	r3, r3, #3
 800f1ba:	3304      	adds	r3, #4
 800f1bc:	f104 0715 	add.w	r7, r4, #21
 800f1c0:	42ba      	cmp	r2, r7
 800f1c2:	bf38      	it	cc
 800f1c4:	2304      	movcc	r3, #4
 800f1c6:	9301      	str	r3, [sp, #4]
 800f1c8:	9b02      	ldr	r3, [sp, #8]
 800f1ca:	9103      	str	r1, [sp, #12]
 800f1cc:	428b      	cmp	r3, r1
 800f1ce:	d80c      	bhi.n	800f1ea <__multiply+0x9e>
 800f1d0:	2e00      	cmp	r6, #0
 800f1d2:	dd03      	ble.n	800f1dc <__multiply+0x90>
 800f1d4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d05b      	beq.n	800f294 <__multiply+0x148>
 800f1dc:	6106      	str	r6, [r0, #16]
 800f1de:	b005      	add	sp, #20
 800f1e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1e4:	f843 2b04 	str.w	r2, [r3], #4
 800f1e8:	e7d8      	b.n	800f19c <__multiply+0x50>
 800f1ea:	f8b1 a000 	ldrh.w	sl, [r1]
 800f1ee:	f1ba 0f00 	cmp.w	sl, #0
 800f1f2:	d024      	beq.n	800f23e <__multiply+0xf2>
 800f1f4:	f104 0e14 	add.w	lr, r4, #20
 800f1f8:	46a9      	mov	r9, r5
 800f1fa:	f04f 0c00 	mov.w	ip, #0
 800f1fe:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f202:	f8d9 3000 	ldr.w	r3, [r9]
 800f206:	fa1f fb87 	uxth.w	fp, r7
 800f20a:	b29b      	uxth	r3, r3
 800f20c:	fb0a 330b 	mla	r3, sl, fp, r3
 800f210:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800f214:	f8d9 7000 	ldr.w	r7, [r9]
 800f218:	4463      	add	r3, ip
 800f21a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800f21e:	fb0a c70b 	mla	r7, sl, fp, ip
 800f222:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800f226:	b29b      	uxth	r3, r3
 800f228:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800f22c:	4572      	cmp	r2, lr
 800f22e:	f849 3b04 	str.w	r3, [r9], #4
 800f232:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800f236:	d8e2      	bhi.n	800f1fe <__multiply+0xb2>
 800f238:	9b01      	ldr	r3, [sp, #4]
 800f23a:	f845 c003 	str.w	ip, [r5, r3]
 800f23e:	9b03      	ldr	r3, [sp, #12]
 800f240:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800f244:	3104      	adds	r1, #4
 800f246:	f1b9 0f00 	cmp.w	r9, #0
 800f24a:	d021      	beq.n	800f290 <__multiply+0x144>
 800f24c:	682b      	ldr	r3, [r5, #0]
 800f24e:	f104 0c14 	add.w	ip, r4, #20
 800f252:	46ae      	mov	lr, r5
 800f254:	f04f 0a00 	mov.w	sl, #0
 800f258:	f8bc b000 	ldrh.w	fp, [ip]
 800f25c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800f260:	fb09 770b 	mla	r7, r9, fp, r7
 800f264:	4457      	add	r7, sl
 800f266:	b29b      	uxth	r3, r3
 800f268:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800f26c:	f84e 3b04 	str.w	r3, [lr], #4
 800f270:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f274:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f278:	f8be 3000 	ldrh.w	r3, [lr]
 800f27c:	fb09 330a 	mla	r3, r9, sl, r3
 800f280:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800f284:	4562      	cmp	r2, ip
 800f286:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f28a:	d8e5      	bhi.n	800f258 <__multiply+0x10c>
 800f28c:	9f01      	ldr	r7, [sp, #4]
 800f28e:	51eb      	str	r3, [r5, r7]
 800f290:	3504      	adds	r5, #4
 800f292:	e799      	b.n	800f1c8 <__multiply+0x7c>
 800f294:	3e01      	subs	r6, #1
 800f296:	e79b      	b.n	800f1d0 <__multiply+0x84>
 800f298:	08010520 	.word	0x08010520
 800f29c:	08010531 	.word	0x08010531

0800f2a0 <__pow5mult>:
 800f2a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f2a4:	4615      	mov	r5, r2
 800f2a6:	f012 0203 	ands.w	r2, r2, #3
 800f2aa:	4607      	mov	r7, r0
 800f2ac:	460e      	mov	r6, r1
 800f2ae:	d007      	beq.n	800f2c0 <__pow5mult+0x20>
 800f2b0:	4c25      	ldr	r4, [pc, #148]	@ (800f348 <__pow5mult+0xa8>)
 800f2b2:	3a01      	subs	r2, #1
 800f2b4:	2300      	movs	r3, #0
 800f2b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f2ba:	f7ff fe9f 	bl	800effc <__multadd>
 800f2be:	4606      	mov	r6, r0
 800f2c0:	10ad      	asrs	r5, r5, #2
 800f2c2:	d03d      	beq.n	800f340 <__pow5mult+0xa0>
 800f2c4:	69fc      	ldr	r4, [r7, #28]
 800f2c6:	b97c      	cbnz	r4, 800f2e8 <__pow5mult+0x48>
 800f2c8:	2010      	movs	r0, #16
 800f2ca:	f7ff fd7f 	bl	800edcc <malloc>
 800f2ce:	4602      	mov	r2, r0
 800f2d0:	61f8      	str	r0, [r7, #28]
 800f2d2:	b928      	cbnz	r0, 800f2e0 <__pow5mult+0x40>
 800f2d4:	4b1d      	ldr	r3, [pc, #116]	@ (800f34c <__pow5mult+0xac>)
 800f2d6:	481e      	ldr	r0, [pc, #120]	@ (800f350 <__pow5mult+0xb0>)
 800f2d8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800f2dc:	f000 fa78 	bl	800f7d0 <__assert_func>
 800f2e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f2e4:	6004      	str	r4, [r0, #0]
 800f2e6:	60c4      	str	r4, [r0, #12]
 800f2e8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800f2ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f2f0:	b94c      	cbnz	r4, 800f306 <__pow5mult+0x66>
 800f2f2:	f240 2171 	movw	r1, #625	@ 0x271
 800f2f6:	4638      	mov	r0, r7
 800f2f8:	f7ff ff12 	bl	800f120 <__i2b>
 800f2fc:	2300      	movs	r3, #0
 800f2fe:	f8c8 0008 	str.w	r0, [r8, #8]
 800f302:	4604      	mov	r4, r0
 800f304:	6003      	str	r3, [r0, #0]
 800f306:	f04f 0900 	mov.w	r9, #0
 800f30a:	07eb      	lsls	r3, r5, #31
 800f30c:	d50a      	bpl.n	800f324 <__pow5mult+0x84>
 800f30e:	4631      	mov	r1, r6
 800f310:	4622      	mov	r2, r4
 800f312:	4638      	mov	r0, r7
 800f314:	f7ff ff1a 	bl	800f14c <__multiply>
 800f318:	4631      	mov	r1, r6
 800f31a:	4680      	mov	r8, r0
 800f31c:	4638      	mov	r0, r7
 800f31e:	f7ff fe4b 	bl	800efb8 <_Bfree>
 800f322:	4646      	mov	r6, r8
 800f324:	106d      	asrs	r5, r5, #1
 800f326:	d00b      	beq.n	800f340 <__pow5mult+0xa0>
 800f328:	6820      	ldr	r0, [r4, #0]
 800f32a:	b938      	cbnz	r0, 800f33c <__pow5mult+0x9c>
 800f32c:	4622      	mov	r2, r4
 800f32e:	4621      	mov	r1, r4
 800f330:	4638      	mov	r0, r7
 800f332:	f7ff ff0b 	bl	800f14c <__multiply>
 800f336:	6020      	str	r0, [r4, #0]
 800f338:	f8c0 9000 	str.w	r9, [r0]
 800f33c:	4604      	mov	r4, r0
 800f33e:	e7e4      	b.n	800f30a <__pow5mult+0x6a>
 800f340:	4630      	mov	r0, r6
 800f342:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f346:	bf00      	nop
 800f348:	0801058c 	.word	0x0801058c
 800f34c:	080104b1 	.word	0x080104b1
 800f350:	08010531 	.word	0x08010531

0800f354 <__lshift>:
 800f354:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f358:	460c      	mov	r4, r1
 800f35a:	6849      	ldr	r1, [r1, #4]
 800f35c:	6923      	ldr	r3, [r4, #16]
 800f35e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f362:	68a3      	ldr	r3, [r4, #8]
 800f364:	4607      	mov	r7, r0
 800f366:	4691      	mov	r9, r2
 800f368:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f36c:	f108 0601 	add.w	r6, r8, #1
 800f370:	42b3      	cmp	r3, r6
 800f372:	db0b      	blt.n	800f38c <__lshift+0x38>
 800f374:	4638      	mov	r0, r7
 800f376:	f7ff fddf 	bl	800ef38 <_Balloc>
 800f37a:	4605      	mov	r5, r0
 800f37c:	b948      	cbnz	r0, 800f392 <__lshift+0x3e>
 800f37e:	4602      	mov	r2, r0
 800f380:	4b28      	ldr	r3, [pc, #160]	@ (800f424 <__lshift+0xd0>)
 800f382:	4829      	ldr	r0, [pc, #164]	@ (800f428 <__lshift+0xd4>)
 800f384:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800f388:	f000 fa22 	bl	800f7d0 <__assert_func>
 800f38c:	3101      	adds	r1, #1
 800f38e:	005b      	lsls	r3, r3, #1
 800f390:	e7ee      	b.n	800f370 <__lshift+0x1c>
 800f392:	2300      	movs	r3, #0
 800f394:	f100 0114 	add.w	r1, r0, #20
 800f398:	f100 0210 	add.w	r2, r0, #16
 800f39c:	4618      	mov	r0, r3
 800f39e:	4553      	cmp	r3, sl
 800f3a0:	db33      	blt.n	800f40a <__lshift+0xb6>
 800f3a2:	6920      	ldr	r0, [r4, #16]
 800f3a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f3a8:	f104 0314 	add.w	r3, r4, #20
 800f3ac:	f019 091f 	ands.w	r9, r9, #31
 800f3b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f3b4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f3b8:	d02b      	beq.n	800f412 <__lshift+0xbe>
 800f3ba:	f1c9 0e20 	rsb	lr, r9, #32
 800f3be:	468a      	mov	sl, r1
 800f3c0:	2200      	movs	r2, #0
 800f3c2:	6818      	ldr	r0, [r3, #0]
 800f3c4:	fa00 f009 	lsl.w	r0, r0, r9
 800f3c8:	4310      	orrs	r0, r2
 800f3ca:	f84a 0b04 	str.w	r0, [sl], #4
 800f3ce:	f853 2b04 	ldr.w	r2, [r3], #4
 800f3d2:	459c      	cmp	ip, r3
 800f3d4:	fa22 f20e 	lsr.w	r2, r2, lr
 800f3d8:	d8f3      	bhi.n	800f3c2 <__lshift+0x6e>
 800f3da:	ebac 0304 	sub.w	r3, ip, r4
 800f3de:	3b15      	subs	r3, #21
 800f3e0:	f023 0303 	bic.w	r3, r3, #3
 800f3e4:	3304      	adds	r3, #4
 800f3e6:	f104 0015 	add.w	r0, r4, #21
 800f3ea:	4584      	cmp	ip, r0
 800f3ec:	bf38      	it	cc
 800f3ee:	2304      	movcc	r3, #4
 800f3f0:	50ca      	str	r2, [r1, r3]
 800f3f2:	b10a      	cbz	r2, 800f3f8 <__lshift+0xa4>
 800f3f4:	f108 0602 	add.w	r6, r8, #2
 800f3f8:	3e01      	subs	r6, #1
 800f3fa:	4638      	mov	r0, r7
 800f3fc:	612e      	str	r6, [r5, #16]
 800f3fe:	4621      	mov	r1, r4
 800f400:	f7ff fdda 	bl	800efb8 <_Bfree>
 800f404:	4628      	mov	r0, r5
 800f406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f40a:	f842 0f04 	str.w	r0, [r2, #4]!
 800f40e:	3301      	adds	r3, #1
 800f410:	e7c5      	b.n	800f39e <__lshift+0x4a>
 800f412:	3904      	subs	r1, #4
 800f414:	f853 2b04 	ldr.w	r2, [r3], #4
 800f418:	f841 2f04 	str.w	r2, [r1, #4]!
 800f41c:	459c      	cmp	ip, r3
 800f41e:	d8f9      	bhi.n	800f414 <__lshift+0xc0>
 800f420:	e7ea      	b.n	800f3f8 <__lshift+0xa4>
 800f422:	bf00      	nop
 800f424:	08010520 	.word	0x08010520
 800f428:	08010531 	.word	0x08010531

0800f42c <__mcmp>:
 800f42c:	690a      	ldr	r2, [r1, #16]
 800f42e:	4603      	mov	r3, r0
 800f430:	6900      	ldr	r0, [r0, #16]
 800f432:	1a80      	subs	r0, r0, r2
 800f434:	b530      	push	{r4, r5, lr}
 800f436:	d10e      	bne.n	800f456 <__mcmp+0x2a>
 800f438:	3314      	adds	r3, #20
 800f43a:	3114      	adds	r1, #20
 800f43c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800f440:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f444:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f448:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f44c:	4295      	cmp	r5, r2
 800f44e:	d003      	beq.n	800f458 <__mcmp+0x2c>
 800f450:	d205      	bcs.n	800f45e <__mcmp+0x32>
 800f452:	f04f 30ff 	mov.w	r0, #4294967295
 800f456:	bd30      	pop	{r4, r5, pc}
 800f458:	42a3      	cmp	r3, r4
 800f45a:	d3f3      	bcc.n	800f444 <__mcmp+0x18>
 800f45c:	e7fb      	b.n	800f456 <__mcmp+0x2a>
 800f45e:	2001      	movs	r0, #1
 800f460:	e7f9      	b.n	800f456 <__mcmp+0x2a>
	...

0800f464 <__mdiff>:
 800f464:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f468:	4689      	mov	r9, r1
 800f46a:	4606      	mov	r6, r0
 800f46c:	4611      	mov	r1, r2
 800f46e:	4648      	mov	r0, r9
 800f470:	4614      	mov	r4, r2
 800f472:	f7ff ffdb 	bl	800f42c <__mcmp>
 800f476:	1e05      	subs	r5, r0, #0
 800f478:	d112      	bne.n	800f4a0 <__mdiff+0x3c>
 800f47a:	4629      	mov	r1, r5
 800f47c:	4630      	mov	r0, r6
 800f47e:	f7ff fd5b 	bl	800ef38 <_Balloc>
 800f482:	4602      	mov	r2, r0
 800f484:	b928      	cbnz	r0, 800f492 <__mdiff+0x2e>
 800f486:	4b3f      	ldr	r3, [pc, #252]	@ (800f584 <__mdiff+0x120>)
 800f488:	f240 2137 	movw	r1, #567	@ 0x237
 800f48c:	483e      	ldr	r0, [pc, #248]	@ (800f588 <__mdiff+0x124>)
 800f48e:	f000 f99f 	bl	800f7d0 <__assert_func>
 800f492:	2301      	movs	r3, #1
 800f494:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f498:	4610      	mov	r0, r2
 800f49a:	b003      	add	sp, #12
 800f49c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4a0:	bfbc      	itt	lt
 800f4a2:	464b      	movlt	r3, r9
 800f4a4:	46a1      	movlt	r9, r4
 800f4a6:	4630      	mov	r0, r6
 800f4a8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800f4ac:	bfba      	itte	lt
 800f4ae:	461c      	movlt	r4, r3
 800f4b0:	2501      	movlt	r5, #1
 800f4b2:	2500      	movge	r5, #0
 800f4b4:	f7ff fd40 	bl	800ef38 <_Balloc>
 800f4b8:	4602      	mov	r2, r0
 800f4ba:	b918      	cbnz	r0, 800f4c4 <__mdiff+0x60>
 800f4bc:	4b31      	ldr	r3, [pc, #196]	@ (800f584 <__mdiff+0x120>)
 800f4be:	f240 2145 	movw	r1, #581	@ 0x245
 800f4c2:	e7e3      	b.n	800f48c <__mdiff+0x28>
 800f4c4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800f4c8:	6926      	ldr	r6, [r4, #16]
 800f4ca:	60c5      	str	r5, [r0, #12]
 800f4cc:	f109 0310 	add.w	r3, r9, #16
 800f4d0:	f109 0514 	add.w	r5, r9, #20
 800f4d4:	f104 0e14 	add.w	lr, r4, #20
 800f4d8:	f100 0b14 	add.w	fp, r0, #20
 800f4dc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800f4e0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800f4e4:	9301      	str	r3, [sp, #4]
 800f4e6:	46d9      	mov	r9, fp
 800f4e8:	f04f 0c00 	mov.w	ip, #0
 800f4ec:	9b01      	ldr	r3, [sp, #4]
 800f4ee:	f85e 0b04 	ldr.w	r0, [lr], #4
 800f4f2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800f4f6:	9301      	str	r3, [sp, #4]
 800f4f8:	fa1f f38a 	uxth.w	r3, sl
 800f4fc:	4619      	mov	r1, r3
 800f4fe:	b283      	uxth	r3, r0
 800f500:	1acb      	subs	r3, r1, r3
 800f502:	0c00      	lsrs	r0, r0, #16
 800f504:	4463      	add	r3, ip
 800f506:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800f50a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800f50e:	b29b      	uxth	r3, r3
 800f510:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800f514:	4576      	cmp	r6, lr
 800f516:	f849 3b04 	str.w	r3, [r9], #4
 800f51a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f51e:	d8e5      	bhi.n	800f4ec <__mdiff+0x88>
 800f520:	1b33      	subs	r3, r6, r4
 800f522:	3b15      	subs	r3, #21
 800f524:	f023 0303 	bic.w	r3, r3, #3
 800f528:	3415      	adds	r4, #21
 800f52a:	3304      	adds	r3, #4
 800f52c:	42a6      	cmp	r6, r4
 800f52e:	bf38      	it	cc
 800f530:	2304      	movcc	r3, #4
 800f532:	441d      	add	r5, r3
 800f534:	445b      	add	r3, fp
 800f536:	461e      	mov	r6, r3
 800f538:	462c      	mov	r4, r5
 800f53a:	4544      	cmp	r4, r8
 800f53c:	d30e      	bcc.n	800f55c <__mdiff+0xf8>
 800f53e:	f108 0103 	add.w	r1, r8, #3
 800f542:	1b49      	subs	r1, r1, r5
 800f544:	f021 0103 	bic.w	r1, r1, #3
 800f548:	3d03      	subs	r5, #3
 800f54a:	45a8      	cmp	r8, r5
 800f54c:	bf38      	it	cc
 800f54e:	2100      	movcc	r1, #0
 800f550:	440b      	add	r3, r1
 800f552:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f556:	b191      	cbz	r1, 800f57e <__mdiff+0x11a>
 800f558:	6117      	str	r7, [r2, #16]
 800f55a:	e79d      	b.n	800f498 <__mdiff+0x34>
 800f55c:	f854 1b04 	ldr.w	r1, [r4], #4
 800f560:	46e6      	mov	lr, ip
 800f562:	0c08      	lsrs	r0, r1, #16
 800f564:	fa1c fc81 	uxtah	ip, ip, r1
 800f568:	4471      	add	r1, lr
 800f56a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800f56e:	b289      	uxth	r1, r1
 800f570:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800f574:	f846 1b04 	str.w	r1, [r6], #4
 800f578:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f57c:	e7dd      	b.n	800f53a <__mdiff+0xd6>
 800f57e:	3f01      	subs	r7, #1
 800f580:	e7e7      	b.n	800f552 <__mdiff+0xee>
 800f582:	bf00      	nop
 800f584:	08010520 	.word	0x08010520
 800f588:	08010531 	.word	0x08010531

0800f58c <__d2b>:
 800f58c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f590:	460f      	mov	r7, r1
 800f592:	2101      	movs	r1, #1
 800f594:	ec59 8b10 	vmov	r8, r9, d0
 800f598:	4616      	mov	r6, r2
 800f59a:	f7ff fccd 	bl	800ef38 <_Balloc>
 800f59e:	4604      	mov	r4, r0
 800f5a0:	b930      	cbnz	r0, 800f5b0 <__d2b+0x24>
 800f5a2:	4602      	mov	r2, r0
 800f5a4:	4b23      	ldr	r3, [pc, #140]	@ (800f634 <__d2b+0xa8>)
 800f5a6:	4824      	ldr	r0, [pc, #144]	@ (800f638 <__d2b+0xac>)
 800f5a8:	f240 310f 	movw	r1, #783	@ 0x30f
 800f5ac:	f000 f910 	bl	800f7d0 <__assert_func>
 800f5b0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f5b4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f5b8:	b10d      	cbz	r5, 800f5be <__d2b+0x32>
 800f5ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f5be:	9301      	str	r3, [sp, #4]
 800f5c0:	f1b8 0300 	subs.w	r3, r8, #0
 800f5c4:	d023      	beq.n	800f60e <__d2b+0x82>
 800f5c6:	4668      	mov	r0, sp
 800f5c8:	9300      	str	r3, [sp, #0]
 800f5ca:	f7ff fd7c 	bl	800f0c6 <__lo0bits>
 800f5ce:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f5d2:	b1d0      	cbz	r0, 800f60a <__d2b+0x7e>
 800f5d4:	f1c0 0320 	rsb	r3, r0, #32
 800f5d8:	fa02 f303 	lsl.w	r3, r2, r3
 800f5dc:	430b      	orrs	r3, r1
 800f5de:	40c2      	lsrs	r2, r0
 800f5e0:	6163      	str	r3, [r4, #20]
 800f5e2:	9201      	str	r2, [sp, #4]
 800f5e4:	9b01      	ldr	r3, [sp, #4]
 800f5e6:	61a3      	str	r3, [r4, #24]
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	bf0c      	ite	eq
 800f5ec:	2201      	moveq	r2, #1
 800f5ee:	2202      	movne	r2, #2
 800f5f0:	6122      	str	r2, [r4, #16]
 800f5f2:	b1a5      	cbz	r5, 800f61e <__d2b+0x92>
 800f5f4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800f5f8:	4405      	add	r5, r0
 800f5fa:	603d      	str	r5, [r7, #0]
 800f5fc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800f600:	6030      	str	r0, [r6, #0]
 800f602:	4620      	mov	r0, r4
 800f604:	b003      	add	sp, #12
 800f606:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f60a:	6161      	str	r1, [r4, #20]
 800f60c:	e7ea      	b.n	800f5e4 <__d2b+0x58>
 800f60e:	a801      	add	r0, sp, #4
 800f610:	f7ff fd59 	bl	800f0c6 <__lo0bits>
 800f614:	9b01      	ldr	r3, [sp, #4]
 800f616:	6163      	str	r3, [r4, #20]
 800f618:	3020      	adds	r0, #32
 800f61a:	2201      	movs	r2, #1
 800f61c:	e7e8      	b.n	800f5f0 <__d2b+0x64>
 800f61e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f622:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800f626:	6038      	str	r0, [r7, #0]
 800f628:	6918      	ldr	r0, [r3, #16]
 800f62a:	f7ff fd2d 	bl	800f088 <__hi0bits>
 800f62e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f632:	e7e5      	b.n	800f600 <__d2b+0x74>
 800f634:	08010520 	.word	0x08010520
 800f638:	08010531 	.word	0x08010531

0800f63c <__sflush_r>:
 800f63c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f644:	0716      	lsls	r6, r2, #28
 800f646:	4605      	mov	r5, r0
 800f648:	460c      	mov	r4, r1
 800f64a:	d454      	bmi.n	800f6f6 <__sflush_r+0xba>
 800f64c:	684b      	ldr	r3, [r1, #4]
 800f64e:	2b00      	cmp	r3, #0
 800f650:	dc02      	bgt.n	800f658 <__sflush_r+0x1c>
 800f652:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f654:	2b00      	cmp	r3, #0
 800f656:	dd48      	ble.n	800f6ea <__sflush_r+0xae>
 800f658:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f65a:	2e00      	cmp	r6, #0
 800f65c:	d045      	beq.n	800f6ea <__sflush_r+0xae>
 800f65e:	2300      	movs	r3, #0
 800f660:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f664:	682f      	ldr	r7, [r5, #0]
 800f666:	6a21      	ldr	r1, [r4, #32]
 800f668:	602b      	str	r3, [r5, #0]
 800f66a:	d030      	beq.n	800f6ce <__sflush_r+0x92>
 800f66c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f66e:	89a3      	ldrh	r3, [r4, #12]
 800f670:	0759      	lsls	r1, r3, #29
 800f672:	d505      	bpl.n	800f680 <__sflush_r+0x44>
 800f674:	6863      	ldr	r3, [r4, #4]
 800f676:	1ad2      	subs	r2, r2, r3
 800f678:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f67a:	b10b      	cbz	r3, 800f680 <__sflush_r+0x44>
 800f67c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f67e:	1ad2      	subs	r2, r2, r3
 800f680:	2300      	movs	r3, #0
 800f682:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f684:	6a21      	ldr	r1, [r4, #32]
 800f686:	4628      	mov	r0, r5
 800f688:	47b0      	blx	r6
 800f68a:	1c43      	adds	r3, r0, #1
 800f68c:	89a3      	ldrh	r3, [r4, #12]
 800f68e:	d106      	bne.n	800f69e <__sflush_r+0x62>
 800f690:	6829      	ldr	r1, [r5, #0]
 800f692:	291d      	cmp	r1, #29
 800f694:	d82b      	bhi.n	800f6ee <__sflush_r+0xb2>
 800f696:	4a2a      	ldr	r2, [pc, #168]	@ (800f740 <__sflush_r+0x104>)
 800f698:	410a      	asrs	r2, r1
 800f69a:	07d6      	lsls	r6, r2, #31
 800f69c:	d427      	bmi.n	800f6ee <__sflush_r+0xb2>
 800f69e:	2200      	movs	r2, #0
 800f6a0:	6062      	str	r2, [r4, #4]
 800f6a2:	04d9      	lsls	r1, r3, #19
 800f6a4:	6922      	ldr	r2, [r4, #16]
 800f6a6:	6022      	str	r2, [r4, #0]
 800f6a8:	d504      	bpl.n	800f6b4 <__sflush_r+0x78>
 800f6aa:	1c42      	adds	r2, r0, #1
 800f6ac:	d101      	bne.n	800f6b2 <__sflush_r+0x76>
 800f6ae:	682b      	ldr	r3, [r5, #0]
 800f6b0:	b903      	cbnz	r3, 800f6b4 <__sflush_r+0x78>
 800f6b2:	6560      	str	r0, [r4, #84]	@ 0x54
 800f6b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f6b6:	602f      	str	r7, [r5, #0]
 800f6b8:	b1b9      	cbz	r1, 800f6ea <__sflush_r+0xae>
 800f6ba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f6be:	4299      	cmp	r1, r3
 800f6c0:	d002      	beq.n	800f6c8 <__sflush_r+0x8c>
 800f6c2:	4628      	mov	r0, r5
 800f6c4:	f7ff fb38 	bl	800ed38 <_free_r>
 800f6c8:	2300      	movs	r3, #0
 800f6ca:	6363      	str	r3, [r4, #52]	@ 0x34
 800f6cc:	e00d      	b.n	800f6ea <__sflush_r+0xae>
 800f6ce:	2301      	movs	r3, #1
 800f6d0:	4628      	mov	r0, r5
 800f6d2:	47b0      	blx	r6
 800f6d4:	4602      	mov	r2, r0
 800f6d6:	1c50      	adds	r0, r2, #1
 800f6d8:	d1c9      	bne.n	800f66e <__sflush_r+0x32>
 800f6da:	682b      	ldr	r3, [r5, #0]
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d0c6      	beq.n	800f66e <__sflush_r+0x32>
 800f6e0:	2b1d      	cmp	r3, #29
 800f6e2:	d001      	beq.n	800f6e8 <__sflush_r+0xac>
 800f6e4:	2b16      	cmp	r3, #22
 800f6e6:	d11e      	bne.n	800f726 <__sflush_r+0xea>
 800f6e8:	602f      	str	r7, [r5, #0]
 800f6ea:	2000      	movs	r0, #0
 800f6ec:	e022      	b.n	800f734 <__sflush_r+0xf8>
 800f6ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f6f2:	b21b      	sxth	r3, r3
 800f6f4:	e01b      	b.n	800f72e <__sflush_r+0xf2>
 800f6f6:	690f      	ldr	r7, [r1, #16]
 800f6f8:	2f00      	cmp	r7, #0
 800f6fa:	d0f6      	beq.n	800f6ea <__sflush_r+0xae>
 800f6fc:	0793      	lsls	r3, r2, #30
 800f6fe:	680e      	ldr	r6, [r1, #0]
 800f700:	bf08      	it	eq
 800f702:	694b      	ldreq	r3, [r1, #20]
 800f704:	600f      	str	r7, [r1, #0]
 800f706:	bf18      	it	ne
 800f708:	2300      	movne	r3, #0
 800f70a:	eba6 0807 	sub.w	r8, r6, r7
 800f70e:	608b      	str	r3, [r1, #8]
 800f710:	f1b8 0f00 	cmp.w	r8, #0
 800f714:	dde9      	ble.n	800f6ea <__sflush_r+0xae>
 800f716:	6a21      	ldr	r1, [r4, #32]
 800f718:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f71a:	4643      	mov	r3, r8
 800f71c:	463a      	mov	r2, r7
 800f71e:	4628      	mov	r0, r5
 800f720:	47b0      	blx	r6
 800f722:	2800      	cmp	r0, #0
 800f724:	dc08      	bgt.n	800f738 <__sflush_r+0xfc>
 800f726:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f72a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f72e:	81a3      	strh	r3, [r4, #12]
 800f730:	f04f 30ff 	mov.w	r0, #4294967295
 800f734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f738:	4407      	add	r7, r0
 800f73a:	eba8 0800 	sub.w	r8, r8, r0
 800f73e:	e7e7      	b.n	800f710 <__sflush_r+0xd4>
 800f740:	dfbffffe 	.word	0xdfbffffe

0800f744 <_fflush_r>:
 800f744:	b538      	push	{r3, r4, r5, lr}
 800f746:	690b      	ldr	r3, [r1, #16]
 800f748:	4605      	mov	r5, r0
 800f74a:	460c      	mov	r4, r1
 800f74c:	b913      	cbnz	r3, 800f754 <_fflush_r+0x10>
 800f74e:	2500      	movs	r5, #0
 800f750:	4628      	mov	r0, r5
 800f752:	bd38      	pop	{r3, r4, r5, pc}
 800f754:	b118      	cbz	r0, 800f75e <_fflush_r+0x1a>
 800f756:	6a03      	ldr	r3, [r0, #32]
 800f758:	b90b      	cbnz	r3, 800f75e <_fflush_r+0x1a>
 800f75a:	f7fe fba5 	bl	800dea8 <__sinit>
 800f75e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f762:	2b00      	cmp	r3, #0
 800f764:	d0f3      	beq.n	800f74e <_fflush_r+0xa>
 800f766:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f768:	07d0      	lsls	r0, r2, #31
 800f76a:	d404      	bmi.n	800f776 <_fflush_r+0x32>
 800f76c:	0599      	lsls	r1, r3, #22
 800f76e:	d402      	bmi.n	800f776 <_fflush_r+0x32>
 800f770:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f772:	f7fe fc90 	bl	800e096 <__retarget_lock_acquire_recursive>
 800f776:	4628      	mov	r0, r5
 800f778:	4621      	mov	r1, r4
 800f77a:	f7ff ff5f 	bl	800f63c <__sflush_r>
 800f77e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f780:	07da      	lsls	r2, r3, #31
 800f782:	4605      	mov	r5, r0
 800f784:	d4e4      	bmi.n	800f750 <_fflush_r+0xc>
 800f786:	89a3      	ldrh	r3, [r4, #12]
 800f788:	059b      	lsls	r3, r3, #22
 800f78a:	d4e1      	bmi.n	800f750 <_fflush_r+0xc>
 800f78c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f78e:	f7fe fc83 	bl	800e098 <__retarget_lock_release_recursive>
 800f792:	e7dd      	b.n	800f750 <_fflush_r+0xc>

0800f794 <_sbrk_r>:
 800f794:	b538      	push	{r3, r4, r5, lr}
 800f796:	4d06      	ldr	r5, [pc, #24]	@ (800f7b0 <_sbrk_r+0x1c>)
 800f798:	2300      	movs	r3, #0
 800f79a:	4604      	mov	r4, r0
 800f79c:	4608      	mov	r0, r1
 800f79e:	602b      	str	r3, [r5, #0]
 800f7a0:	f7f3 f96e 	bl	8002a80 <_sbrk>
 800f7a4:	1c43      	adds	r3, r0, #1
 800f7a6:	d102      	bne.n	800f7ae <_sbrk_r+0x1a>
 800f7a8:	682b      	ldr	r3, [r5, #0]
 800f7aa:	b103      	cbz	r3, 800f7ae <_sbrk_r+0x1a>
 800f7ac:	6023      	str	r3, [r4, #0]
 800f7ae:	bd38      	pop	{r3, r4, r5, pc}
 800f7b0:	200024d8 	.word	0x200024d8

0800f7b4 <memcpy>:
 800f7b4:	440a      	add	r2, r1
 800f7b6:	4291      	cmp	r1, r2
 800f7b8:	f100 33ff 	add.w	r3, r0, #4294967295
 800f7bc:	d100      	bne.n	800f7c0 <memcpy+0xc>
 800f7be:	4770      	bx	lr
 800f7c0:	b510      	push	{r4, lr}
 800f7c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f7c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f7ca:	4291      	cmp	r1, r2
 800f7cc:	d1f9      	bne.n	800f7c2 <memcpy+0xe>
 800f7ce:	bd10      	pop	{r4, pc}

0800f7d0 <__assert_func>:
 800f7d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f7d2:	4614      	mov	r4, r2
 800f7d4:	461a      	mov	r2, r3
 800f7d6:	4b09      	ldr	r3, [pc, #36]	@ (800f7fc <__assert_func+0x2c>)
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	4605      	mov	r5, r0
 800f7dc:	68d8      	ldr	r0, [r3, #12]
 800f7de:	b954      	cbnz	r4, 800f7f6 <__assert_func+0x26>
 800f7e0:	4b07      	ldr	r3, [pc, #28]	@ (800f800 <__assert_func+0x30>)
 800f7e2:	461c      	mov	r4, r3
 800f7e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f7e8:	9100      	str	r1, [sp, #0]
 800f7ea:	462b      	mov	r3, r5
 800f7ec:	4905      	ldr	r1, [pc, #20]	@ (800f804 <__assert_func+0x34>)
 800f7ee:	f000 f841 	bl	800f874 <fiprintf>
 800f7f2:	f000 f851 	bl	800f898 <abort>
 800f7f6:	4b04      	ldr	r3, [pc, #16]	@ (800f808 <__assert_func+0x38>)
 800f7f8:	e7f4      	b.n	800f7e4 <__assert_func+0x14>
 800f7fa:	bf00      	nop
 800f7fc:	2000010c 	.word	0x2000010c
 800f800:	080106cd 	.word	0x080106cd
 800f804:	0801069f 	.word	0x0801069f
 800f808:	08010692 	.word	0x08010692

0800f80c <_calloc_r>:
 800f80c:	b570      	push	{r4, r5, r6, lr}
 800f80e:	fba1 5402 	umull	r5, r4, r1, r2
 800f812:	b93c      	cbnz	r4, 800f824 <_calloc_r+0x18>
 800f814:	4629      	mov	r1, r5
 800f816:	f7ff fb03 	bl	800ee20 <_malloc_r>
 800f81a:	4606      	mov	r6, r0
 800f81c:	b928      	cbnz	r0, 800f82a <_calloc_r+0x1e>
 800f81e:	2600      	movs	r6, #0
 800f820:	4630      	mov	r0, r6
 800f822:	bd70      	pop	{r4, r5, r6, pc}
 800f824:	220c      	movs	r2, #12
 800f826:	6002      	str	r2, [r0, #0]
 800f828:	e7f9      	b.n	800f81e <_calloc_r+0x12>
 800f82a:	462a      	mov	r2, r5
 800f82c:	4621      	mov	r1, r4
 800f82e:	f7fe fbb4 	bl	800df9a <memset>
 800f832:	e7f5      	b.n	800f820 <_calloc_r+0x14>

0800f834 <__ascii_mbtowc>:
 800f834:	b082      	sub	sp, #8
 800f836:	b901      	cbnz	r1, 800f83a <__ascii_mbtowc+0x6>
 800f838:	a901      	add	r1, sp, #4
 800f83a:	b142      	cbz	r2, 800f84e <__ascii_mbtowc+0x1a>
 800f83c:	b14b      	cbz	r3, 800f852 <__ascii_mbtowc+0x1e>
 800f83e:	7813      	ldrb	r3, [r2, #0]
 800f840:	600b      	str	r3, [r1, #0]
 800f842:	7812      	ldrb	r2, [r2, #0]
 800f844:	1e10      	subs	r0, r2, #0
 800f846:	bf18      	it	ne
 800f848:	2001      	movne	r0, #1
 800f84a:	b002      	add	sp, #8
 800f84c:	4770      	bx	lr
 800f84e:	4610      	mov	r0, r2
 800f850:	e7fb      	b.n	800f84a <__ascii_mbtowc+0x16>
 800f852:	f06f 0001 	mvn.w	r0, #1
 800f856:	e7f8      	b.n	800f84a <__ascii_mbtowc+0x16>

0800f858 <__ascii_wctomb>:
 800f858:	4603      	mov	r3, r0
 800f85a:	4608      	mov	r0, r1
 800f85c:	b141      	cbz	r1, 800f870 <__ascii_wctomb+0x18>
 800f85e:	2aff      	cmp	r2, #255	@ 0xff
 800f860:	d904      	bls.n	800f86c <__ascii_wctomb+0x14>
 800f862:	228a      	movs	r2, #138	@ 0x8a
 800f864:	601a      	str	r2, [r3, #0]
 800f866:	f04f 30ff 	mov.w	r0, #4294967295
 800f86a:	4770      	bx	lr
 800f86c:	700a      	strb	r2, [r1, #0]
 800f86e:	2001      	movs	r0, #1
 800f870:	4770      	bx	lr
	...

0800f874 <fiprintf>:
 800f874:	b40e      	push	{r1, r2, r3}
 800f876:	b503      	push	{r0, r1, lr}
 800f878:	4601      	mov	r1, r0
 800f87a:	ab03      	add	r3, sp, #12
 800f87c:	4805      	ldr	r0, [pc, #20]	@ (800f894 <fiprintf+0x20>)
 800f87e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f882:	6800      	ldr	r0, [r0, #0]
 800f884:	9301      	str	r3, [sp, #4]
 800f886:	f000 f837 	bl	800f8f8 <_vfiprintf_r>
 800f88a:	b002      	add	sp, #8
 800f88c:	f85d eb04 	ldr.w	lr, [sp], #4
 800f890:	b003      	add	sp, #12
 800f892:	4770      	bx	lr
 800f894:	2000010c 	.word	0x2000010c

0800f898 <abort>:
 800f898:	b508      	push	{r3, lr}
 800f89a:	2006      	movs	r0, #6
 800f89c:	f000 fa00 	bl	800fca0 <raise>
 800f8a0:	2001      	movs	r0, #1
 800f8a2:	f7f3 f875 	bl	8002990 <_exit>

0800f8a6 <__sfputc_r>:
 800f8a6:	6893      	ldr	r3, [r2, #8]
 800f8a8:	3b01      	subs	r3, #1
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	b410      	push	{r4}
 800f8ae:	6093      	str	r3, [r2, #8]
 800f8b0:	da08      	bge.n	800f8c4 <__sfputc_r+0x1e>
 800f8b2:	6994      	ldr	r4, [r2, #24]
 800f8b4:	42a3      	cmp	r3, r4
 800f8b6:	db01      	blt.n	800f8bc <__sfputc_r+0x16>
 800f8b8:	290a      	cmp	r1, #10
 800f8ba:	d103      	bne.n	800f8c4 <__sfputc_r+0x1e>
 800f8bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f8c0:	f000 b932 	b.w	800fb28 <__swbuf_r>
 800f8c4:	6813      	ldr	r3, [r2, #0]
 800f8c6:	1c58      	adds	r0, r3, #1
 800f8c8:	6010      	str	r0, [r2, #0]
 800f8ca:	7019      	strb	r1, [r3, #0]
 800f8cc:	4608      	mov	r0, r1
 800f8ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f8d2:	4770      	bx	lr

0800f8d4 <__sfputs_r>:
 800f8d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8d6:	4606      	mov	r6, r0
 800f8d8:	460f      	mov	r7, r1
 800f8da:	4614      	mov	r4, r2
 800f8dc:	18d5      	adds	r5, r2, r3
 800f8de:	42ac      	cmp	r4, r5
 800f8e0:	d101      	bne.n	800f8e6 <__sfputs_r+0x12>
 800f8e2:	2000      	movs	r0, #0
 800f8e4:	e007      	b.n	800f8f6 <__sfputs_r+0x22>
 800f8e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f8ea:	463a      	mov	r2, r7
 800f8ec:	4630      	mov	r0, r6
 800f8ee:	f7ff ffda 	bl	800f8a6 <__sfputc_r>
 800f8f2:	1c43      	adds	r3, r0, #1
 800f8f4:	d1f3      	bne.n	800f8de <__sfputs_r+0xa>
 800f8f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f8f8 <_vfiprintf_r>:
 800f8f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8fc:	460d      	mov	r5, r1
 800f8fe:	b09d      	sub	sp, #116	@ 0x74
 800f900:	4614      	mov	r4, r2
 800f902:	4698      	mov	r8, r3
 800f904:	4606      	mov	r6, r0
 800f906:	b118      	cbz	r0, 800f910 <_vfiprintf_r+0x18>
 800f908:	6a03      	ldr	r3, [r0, #32]
 800f90a:	b90b      	cbnz	r3, 800f910 <_vfiprintf_r+0x18>
 800f90c:	f7fe facc 	bl	800dea8 <__sinit>
 800f910:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f912:	07d9      	lsls	r1, r3, #31
 800f914:	d405      	bmi.n	800f922 <_vfiprintf_r+0x2a>
 800f916:	89ab      	ldrh	r3, [r5, #12]
 800f918:	059a      	lsls	r2, r3, #22
 800f91a:	d402      	bmi.n	800f922 <_vfiprintf_r+0x2a>
 800f91c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f91e:	f7fe fbba 	bl	800e096 <__retarget_lock_acquire_recursive>
 800f922:	89ab      	ldrh	r3, [r5, #12]
 800f924:	071b      	lsls	r3, r3, #28
 800f926:	d501      	bpl.n	800f92c <_vfiprintf_r+0x34>
 800f928:	692b      	ldr	r3, [r5, #16]
 800f92a:	b99b      	cbnz	r3, 800f954 <_vfiprintf_r+0x5c>
 800f92c:	4629      	mov	r1, r5
 800f92e:	4630      	mov	r0, r6
 800f930:	f000 f938 	bl	800fba4 <__swsetup_r>
 800f934:	b170      	cbz	r0, 800f954 <_vfiprintf_r+0x5c>
 800f936:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f938:	07dc      	lsls	r4, r3, #31
 800f93a:	d504      	bpl.n	800f946 <_vfiprintf_r+0x4e>
 800f93c:	f04f 30ff 	mov.w	r0, #4294967295
 800f940:	b01d      	add	sp, #116	@ 0x74
 800f942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f946:	89ab      	ldrh	r3, [r5, #12]
 800f948:	0598      	lsls	r0, r3, #22
 800f94a:	d4f7      	bmi.n	800f93c <_vfiprintf_r+0x44>
 800f94c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f94e:	f7fe fba3 	bl	800e098 <__retarget_lock_release_recursive>
 800f952:	e7f3      	b.n	800f93c <_vfiprintf_r+0x44>
 800f954:	2300      	movs	r3, #0
 800f956:	9309      	str	r3, [sp, #36]	@ 0x24
 800f958:	2320      	movs	r3, #32
 800f95a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f95e:	f8cd 800c 	str.w	r8, [sp, #12]
 800f962:	2330      	movs	r3, #48	@ 0x30
 800f964:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800fb14 <_vfiprintf_r+0x21c>
 800f968:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f96c:	f04f 0901 	mov.w	r9, #1
 800f970:	4623      	mov	r3, r4
 800f972:	469a      	mov	sl, r3
 800f974:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f978:	b10a      	cbz	r2, 800f97e <_vfiprintf_r+0x86>
 800f97a:	2a25      	cmp	r2, #37	@ 0x25
 800f97c:	d1f9      	bne.n	800f972 <_vfiprintf_r+0x7a>
 800f97e:	ebba 0b04 	subs.w	fp, sl, r4
 800f982:	d00b      	beq.n	800f99c <_vfiprintf_r+0xa4>
 800f984:	465b      	mov	r3, fp
 800f986:	4622      	mov	r2, r4
 800f988:	4629      	mov	r1, r5
 800f98a:	4630      	mov	r0, r6
 800f98c:	f7ff ffa2 	bl	800f8d4 <__sfputs_r>
 800f990:	3001      	adds	r0, #1
 800f992:	f000 80a7 	beq.w	800fae4 <_vfiprintf_r+0x1ec>
 800f996:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f998:	445a      	add	r2, fp
 800f99a:	9209      	str	r2, [sp, #36]	@ 0x24
 800f99c:	f89a 3000 	ldrb.w	r3, [sl]
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	f000 809f 	beq.w	800fae4 <_vfiprintf_r+0x1ec>
 800f9a6:	2300      	movs	r3, #0
 800f9a8:	f04f 32ff 	mov.w	r2, #4294967295
 800f9ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f9b0:	f10a 0a01 	add.w	sl, sl, #1
 800f9b4:	9304      	str	r3, [sp, #16]
 800f9b6:	9307      	str	r3, [sp, #28]
 800f9b8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f9bc:	931a      	str	r3, [sp, #104]	@ 0x68
 800f9be:	4654      	mov	r4, sl
 800f9c0:	2205      	movs	r2, #5
 800f9c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f9c6:	4853      	ldr	r0, [pc, #332]	@ (800fb14 <_vfiprintf_r+0x21c>)
 800f9c8:	f7f0 fc02 	bl	80001d0 <memchr>
 800f9cc:	9a04      	ldr	r2, [sp, #16]
 800f9ce:	b9d8      	cbnz	r0, 800fa08 <_vfiprintf_r+0x110>
 800f9d0:	06d1      	lsls	r1, r2, #27
 800f9d2:	bf44      	itt	mi
 800f9d4:	2320      	movmi	r3, #32
 800f9d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f9da:	0713      	lsls	r3, r2, #28
 800f9dc:	bf44      	itt	mi
 800f9de:	232b      	movmi	r3, #43	@ 0x2b
 800f9e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f9e4:	f89a 3000 	ldrb.w	r3, [sl]
 800f9e8:	2b2a      	cmp	r3, #42	@ 0x2a
 800f9ea:	d015      	beq.n	800fa18 <_vfiprintf_r+0x120>
 800f9ec:	9a07      	ldr	r2, [sp, #28]
 800f9ee:	4654      	mov	r4, sl
 800f9f0:	2000      	movs	r0, #0
 800f9f2:	f04f 0c0a 	mov.w	ip, #10
 800f9f6:	4621      	mov	r1, r4
 800f9f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f9fc:	3b30      	subs	r3, #48	@ 0x30
 800f9fe:	2b09      	cmp	r3, #9
 800fa00:	d94b      	bls.n	800fa9a <_vfiprintf_r+0x1a2>
 800fa02:	b1b0      	cbz	r0, 800fa32 <_vfiprintf_r+0x13a>
 800fa04:	9207      	str	r2, [sp, #28]
 800fa06:	e014      	b.n	800fa32 <_vfiprintf_r+0x13a>
 800fa08:	eba0 0308 	sub.w	r3, r0, r8
 800fa0c:	fa09 f303 	lsl.w	r3, r9, r3
 800fa10:	4313      	orrs	r3, r2
 800fa12:	9304      	str	r3, [sp, #16]
 800fa14:	46a2      	mov	sl, r4
 800fa16:	e7d2      	b.n	800f9be <_vfiprintf_r+0xc6>
 800fa18:	9b03      	ldr	r3, [sp, #12]
 800fa1a:	1d19      	adds	r1, r3, #4
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	9103      	str	r1, [sp, #12]
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	bfbb      	ittet	lt
 800fa24:	425b      	neglt	r3, r3
 800fa26:	f042 0202 	orrlt.w	r2, r2, #2
 800fa2a:	9307      	strge	r3, [sp, #28]
 800fa2c:	9307      	strlt	r3, [sp, #28]
 800fa2e:	bfb8      	it	lt
 800fa30:	9204      	strlt	r2, [sp, #16]
 800fa32:	7823      	ldrb	r3, [r4, #0]
 800fa34:	2b2e      	cmp	r3, #46	@ 0x2e
 800fa36:	d10a      	bne.n	800fa4e <_vfiprintf_r+0x156>
 800fa38:	7863      	ldrb	r3, [r4, #1]
 800fa3a:	2b2a      	cmp	r3, #42	@ 0x2a
 800fa3c:	d132      	bne.n	800faa4 <_vfiprintf_r+0x1ac>
 800fa3e:	9b03      	ldr	r3, [sp, #12]
 800fa40:	1d1a      	adds	r2, r3, #4
 800fa42:	681b      	ldr	r3, [r3, #0]
 800fa44:	9203      	str	r2, [sp, #12]
 800fa46:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800fa4a:	3402      	adds	r4, #2
 800fa4c:	9305      	str	r3, [sp, #20]
 800fa4e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800fb24 <_vfiprintf_r+0x22c>
 800fa52:	7821      	ldrb	r1, [r4, #0]
 800fa54:	2203      	movs	r2, #3
 800fa56:	4650      	mov	r0, sl
 800fa58:	f7f0 fbba 	bl	80001d0 <memchr>
 800fa5c:	b138      	cbz	r0, 800fa6e <_vfiprintf_r+0x176>
 800fa5e:	9b04      	ldr	r3, [sp, #16]
 800fa60:	eba0 000a 	sub.w	r0, r0, sl
 800fa64:	2240      	movs	r2, #64	@ 0x40
 800fa66:	4082      	lsls	r2, r0
 800fa68:	4313      	orrs	r3, r2
 800fa6a:	3401      	adds	r4, #1
 800fa6c:	9304      	str	r3, [sp, #16]
 800fa6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa72:	4829      	ldr	r0, [pc, #164]	@ (800fb18 <_vfiprintf_r+0x220>)
 800fa74:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fa78:	2206      	movs	r2, #6
 800fa7a:	f7f0 fba9 	bl	80001d0 <memchr>
 800fa7e:	2800      	cmp	r0, #0
 800fa80:	d03f      	beq.n	800fb02 <_vfiprintf_r+0x20a>
 800fa82:	4b26      	ldr	r3, [pc, #152]	@ (800fb1c <_vfiprintf_r+0x224>)
 800fa84:	bb1b      	cbnz	r3, 800face <_vfiprintf_r+0x1d6>
 800fa86:	9b03      	ldr	r3, [sp, #12]
 800fa88:	3307      	adds	r3, #7
 800fa8a:	f023 0307 	bic.w	r3, r3, #7
 800fa8e:	3308      	adds	r3, #8
 800fa90:	9303      	str	r3, [sp, #12]
 800fa92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fa94:	443b      	add	r3, r7
 800fa96:	9309      	str	r3, [sp, #36]	@ 0x24
 800fa98:	e76a      	b.n	800f970 <_vfiprintf_r+0x78>
 800fa9a:	fb0c 3202 	mla	r2, ip, r2, r3
 800fa9e:	460c      	mov	r4, r1
 800faa0:	2001      	movs	r0, #1
 800faa2:	e7a8      	b.n	800f9f6 <_vfiprintf_r+0xfe>
 800faa4:	2300      	movs	r3, #0
 800faa6:	3401      	adds	r4, #1
 800faa8:	9305      	str	r3, [sp, #20]
 800faaa:	4619      	mov	r1, r3
 800faac:	f04f 0c0a 	mov.w	ip, #10
 800fab0:	4620      	mov	r0, r4
 800fab2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fab6:	3a30      	subs	r2, #48	@ 0x30
 800fab8:	2a09      	cmp	r2, #9
 800faba:	d903      	bls.n	800fac4 <_vfiprintf_r+0x1cc>
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d0c6      	beq.n	800fa4e <_vfiprintf_r+0x156>
 800fac0:	9105      	str	r1, [sp, #20]
 800fac2:	e7c4      	b.n	800fa4e <_vfiprintf_r+0x156>
 800fac4:	fb0c 2101 	mla	r1, ip, r1, r2
 800fac8:	4604      	mov	r4, r0
 800faca:	2301      	movs	r3, #1
 800facc:	e7f0      	b.n	800fab0 <_vfiprintf_r+0x1b8>
 800face:	ab03      	add	r3, sp, #12
 800fad0:	9300      	str	r3, [sp, #0]
 800fad2:	462a      	mov	r2, r5
 800fad4:	4b12      	ldr	r3, [pc, #72]	@ (800fb20 <_vfiprintf_r+0x228>)
 800fad6:	a904      	add	r1, sp, #16
 800fad8:	4630      	mov	r0, r6
 800fada:	f7fd fda1 	bl	800d620 <_printf_float>
 800fade:	4607      	mov	r7, r0
 800fae0:	1c78      	adds	r0, r7, #1
 800fae2:	d1d6      	bne.n	800fa92 <_vfiprintf_r+0x19a>
 800fae4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fae6:	07d9      	lsls	r1, r3, #31
 800fae8:	d405      	bmi.n	800faf6 <_vfiprintf_r+0x1fe>
 800faea:	89ab      	ldrh	r3, [r5, #12]
 800faec:	059a      	lsls	r2, r3, #22
 800faee:	d402      	bmi.n	800faf6 <_vfiprintf_r+0x1fe>
 800faf0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800faf2:	f7fe fad1 	bl	800e098 <__retarget_lock_release_recursive>
 800faf6:	89ab      	ldrh	r3, [r5, #12]
 800faf8:	065b      	lsls	r3, r3, #25
 800fafa:	f53f af1f 	bmi.w	800f93c <_vfiprintf_r+0x44>
 800fafe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fb00:	e71e      	b.n	800f940 <_vfiprintf_r+0x48>
 800fb02:	ab03      	add	r3, sp, #12
 800fb04:	9300      	str	r3, [sp, #0]
 800fb06:	462a      	mov	r2, r5
 800fb08:	4b05      	ldr	r3, [pc, #20]	@ (800fb20 <_vfiprintf_r+0x228>)
 800fb0a:	a904      	add	r1, sp, #16
 800fb0c:	4630      	mov	r0, r6
 800fb0e:	f7fe f81f 	bl	800db50 <_printf_i>
 800fb12:	e7e4      	b.n	800fade <_vfiprintf_r+0x1e6>
 800fb14:	080107cf 	.word	0x080107cf
 800fb18:	080107d9 	.word	0x080107d9
 800fb1c:	0800d621 	.word	0x0800d621
 800fb20:	0800f8d5 	.word	0x0800f8d5
 800fb24:	080107d5 	.word	0x080107d5

0800fb28 <__swbuf_r>:
 800fb28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb2a:	460e      	mov	r6, r1
 800fb2c:	4614      	mov	r4, r2
 800fb2e:	4605      	mov	r5, r0
 800fb30:	b118      	cbz	r0, 800fb3a <__swbuf_r+0x12>
 800fb32:	6a03      	ldr	r3, [r0, #32]
 800fb34:	b90b      	cbnz	r3, 800fb3a <__swbuf_r+0x12>
 800fb36:	f7fe f9b7 	bl	800dea8 <__sinit>
 800fb3a:	69a3      	ldr	r3, [r4, #24]
 800fb3c:	60a3      	str	r3, [r4, #8]
 800fb3e:	89a3      	ldrh	r3, [r4, #12]
 800fb40:	071a      	lsls	r2, r3, #28
 800fb42:	d501      	bpl.n	800fb48 <__swbuf_r+0x20>
 800fb44:	6923      	ldr	r3, [r4, #16]
 800fb46:	b943      	cbnz	r3, 800fb5a <__swbuf_r+0x32>
 800fb48:	4621      	mov	r1, r4
 800fb4a:	4628      	mov	r0, r5
 800fb4c:	f000 f82a 	bl	800fba4 <__swsetup_r>
 800fb50:	b118      	cbz	r0, 800fb5a <__swbuf_r+0x32>
 800fb52:	f04f 37ff 	mov.w	r7, #4294967295
 800fb56:	4638      	mov	r0, r7
 800fb58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fb5a:	6823      	ldr	r3, [r4, #0]
 800fb5c:	6922      	ldr	r2, [r4, #16]
 800fb5e:	1a98      	subs	r0, r3, r2
 800fb60:	6963      	ldr	r3, [r4, #20]
 800fb62:	b2f6      	uxtb	r6, r6
 800fb64:	4283      	cmp	r3, r0
 800fb66:	4637      	mov	r7, r6
 800fb68:	dc05      	bgt.n	800fb76 <__swbuf_r+0x4e>
 800fb6a:	4621      	mov	r1, r4
 800fb6c:	4628      	mov	r0, r5
 800fb6e:	f7ff fde9 	bl	800f744 <_fflush_r>
 800fb72:	2800      	cmp	r0, #0
 800fb74:	d1ed      	bne.n	800fb52 <__swbuf_r+0x2a>
 800fb76:	68a3      	ldr	r3, [r4, #8]
 800fb78:	3b01      	subs	r3, #1
 800fb7a:	60a3      	str	r3, [r4, #8]
 800fb7c:	6823      	ldr	r3, [r4, #0]
 800fb7e:	1c5a      	adds	r2, r3, #1
 800fb80:	6022      	str	r2, [r4, #0]
 800fb82:	701e      	strb	r6, [r3, #0]
 800fb84:	6962      	ldr	r2, [r4, #20]
 800fb86:	1c43      	adds	r3, r0, #1
 800fb88:	429a      	cmp	r2, r3
 800fb8a:	d004      	beq.n	800fb96 <__swbuf_r+0x6e>
 800fb8c:	89a3      	ldrh	r3, [r4, #12]
 800fb8e:	07db      	lsls	r3, r3, #31
 800fb90:	d5e1      	bpl.n	800fb56 <__swbuf_r+0x2e>
 800fb92:	2e0a      	cmp	r6, #10
 800fb94:	d1df      	bne.n	800fb56 <__swbuf_r+0x2e>
 800fb96:	4621      	mov	r1, r4
 800fb98:	4628      	mov	r0, r5
 800fb9a:	f7ff fdd3 	bl	800f744 <_fflush_r>
 800fb9e:	2800      	cmp	r0, #0
 800fba0:	d0d9      	beq.n	800fb56 <__swbuf_r+0x2e>
 800fba2:	e7d6      	b.n	800fb52 <__swbuf_r+0x2a>

0800fba4 <__swsetup_r>:
 800fba4:	b538      	push	{r3, r4, r5, lr}
 800fba6:	4b29      	ldr	r3, [pc, #164]	@ (800fc4c <__swsetup_r+0xa8>)
 800fba8:	4605      	mov	r5, r0
 800fbaa:	6818      	ldr	r0, [r3, #0]
 800fbac:	460c      	mov	r4, r1
 800fbae:	b118      	cbz	r0, 800fbb8 <__swsetup_r+0x14>
 800fbb0:	6a03      	ldr	r3, [r0, #32]
 800fbb2:	b90b      	cbnz	r3, 800fbb8 <__swsetup_r+0x14>
 800fbb4:	f7fe f978 	bl	800dea8 <__sinit>
 800fbb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fbbc:	0719      	lsls	r1, r3, #28
 800fbbe:	d422      	bmi.n	800fc06 <__swsetup_r+0x62>
 800fbc0:	06da      	lsls	r2, r3, #27
 800fbc2:	d407      	bmi.n	800fbd4 <__swsetup_r+0x30>
 800fbc4:	2209      	movs	r2, #9
 800fbc6:	602a      	str	r2, [r5, #0]
 800fbc8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fbcc:	81a3      	strh	r3, [r4, #12]
 800fbce:	f04f 30ff 	mov.w	r0, #4294967295
 800fbd2:	e033      	b.n	800fc3c <__swsetup_r+0x98>
 800fbd4:	0758      	lsls	r0, r3, #29
 800fbd6:	d512      	bpl.n	800fbfe <__swsetup_r+0x5a>
 800fbd8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fbda:	b141      	cbz	r1, 800fbee <__swsetup_r+0x4a>
 800fbdc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fbe0:	4299      	cmp	r1, r3
 800fbe2:	d002      	beq.n	800fbea <__swsetup_r+0x46>
 800fbe4:	4628      	mov	r0, r5
 800fbe6:	f7ff f8a7 	bl	800ed38 <_free_r>
 800fbea:	2300      	movs	r3, #0
 800fbec:	6363      	str	r3, [r4, #52]	@ 0x34
 800fbee:	89a3      	ldrh	r3, [r4, #12]
 800fbf0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800fbf4:	81a3      	strh	r3, [r4, #12]
 800fbf6:	2300      	movs	r3, #0
 800fbf8:	6063      	str	r3, [r4, #4]
 800fbfa:	6923      	ldr	r3, [r4, #16]
 800fbfc:	6023      	str	r3, [r4, #0]
 800fbfe:	89a3      	ldrh	r3, [r4, #12]
 800fc00:	f043 0308 	orr.w	r3, r3, #8
 800fc04:	81a3      	strh	r3, [r4, #12]
 800fc06:	6923      	ldr	r3, [r4, #16]
 800fc08:	b94b      	cbnz	r3, 800fc1e <__swsetup_r+0x7a>
 800fc0a:	89a3      	ldrh	r3, [r4, #12]
 800fc0c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800fc10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fc14:	d003      	beq.n	800fc1e <__swsetup_r+0x7a>
 800fc16:	4621      	mov	r1, r4
 800fc18:	4628      	mov	r0, r5
 800fc1a:	f000 f883 	bl	800fd24 <__smakebuf_r>
 800fc1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fc22:	f013 0201 	ands.w	r2, r3, #1
 800fc26:	d00a      	beq.n	800fc3e <__swsetup_r+0x9a>
 800fc28:	2200      	movs	r2, #0
 800fc2a:	60a2      	str	r2, [r4, #8]
 800fc2c:	6962      	ldr	r2, [r4, #20]
 800fc2e:	4252      	negs	r2, r2
 800fc30:	61a2      	str	r2, [r4, #24]
 800fc32:	6922      	ldr	r2, [r4, #16]
 800fc34:	b942      	cbnz	r2, 800fc48 <__swsetup_r+0xa4>
 800fc36:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800fc3a:	d1c5      	bne.n	800fbc8 <__swsetup_r+0x24>
 800fc3c:	bd38      	pop	{r3, r4, r5, pc}
 800fc3e:	0799      	lsls	r1, r3, #30
 800fc40:	bf58      	it	pl
 800fc42:	6962      	ldrpl	r2, [r4, #20]
 800fc44:	60a2      	str	r2, [r4, #8]
 800fc46:	e7f4      	b.n	800fc32 <__swsetup_r+0x8e>
 800fc48:	2000      	movs	r0, #0
 800fc4a:	e7f7      	b.n	800fc3c <__swsetup_r+0x98>
 800fc4c:	2000010c 	.word	0x2000010c

0800fc50 <_raise_r>:
 800fc50:	291f      	cmp	r1, #31
 800fc52:	b538      	push	{r3, r4, r5, lr}
 800fc54:	4605      	mov	r5, r0
 800fc56:	460c      	mov	r4, r1
 800fc58:	d904      	bls.n	800fc64 <_raise_r+0x14>
 800fc5a:	2316      	movs	r3, #22
 800fc5c:	6003      	str	r3, [r0, #0]
 800fc5e:	f04f 30ff 	mov.w	r0, #4294967295
 800fc62:	bd38      	pop	{r3, r4, r5, pc}
 800fc64:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800fc66:	b112      	cbz	r2, 800fc6e <_raise_r+0x1e>
 800fc68:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fc6c:	b94b      	cbnz	r3, 800fc82 <_raise_r+0x32>
 800fc6e:	4628      	mov	r0, r5
 800fc70:	f000 f830 	bl	800fcd4 <_getpid_r>
 800fc74:	4622      	mov	r2, r4
 800fc76:	4601      	mov	r1, r0
 800fc78:	4628      	mov	r0, r5
 800fc7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fc7e:	f000 b817 	b.w	800fcb0 <_kill_r>
 800fc82:	2b01      	cmp	r3, #1
 800fc84:	d00a      	beq.n	800fc9c <_raise_r+0x4c>
 800fc86:	1c59      	adds	r1, r3, #1
 800fc88:	d103      	bne.n	800fc92 <_raise_r+0x42>
 800fc8a:	2316      	movs	r3, #22
 800fc8c:	6003      	str	r3, [r0, #0]
 800fc8e:	2001      	movs	r0, #1
 800fc90:	e7e7      	b.n	800fc62 <_raise_r+0x12>
 800fc92:	2100      	movs	r1, #0
 800fc94:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800fc98:	4620      	mov	r0, r4
 800fc9a:	4798      	blx	r3
 800fc9c:	2000      	movs	r0, #0
 800fc9e:	e7e0      	b.n	800fc62 <_raise_r+0x12>

0800fca0 <raise>:
 800fca0:	4b02      	ldr	r3, [pc, #8]	@ (800fcac <raise+0xc>)
 800fca2:	4601      	mov	r1, r0
 800fca4:	6818      	ldr	r0, [r3, #0]
 800fca6:	f7ff bfd3 	b.w	800fc50 <_raise_r>
 800fcaa:	bf00      	nop
 800fcac:	2000010c 	.word	0x2000010c

0800fcb0 <_kill_r>:
 800fcb0:	b538      	push	{r3, r4, r5, lr}
 800fcb2:	4d07      	ldr	r5, [pc, #28]	@ (800fcd0 <_kill_r+0x20>)
 800fcb4:	2300      	movs	r3, #0
 800fcb6:	4604      	mov	r4, r0
 800fcb8:	4608      	mov	r0, r1
 800fcba:	4611      	mov	r1, r2
 800fcbc:	602b      	str	r3, [r5, #0]
 800fcbe:	f7f2 fe57 	bl	8002970 <_kill>
 800fcc2:	1c43      	adds	r3, r0, #1
 800fcc4:	d102      	bne.n	800fccc <_kill_r+0x1c>
 800fcc6:	682b      	ldr	r3, [r5, #0]
 800fcc8:	b103      	cbz	r3, 800fccc <_kill_r+0x1c>
 800fcca:	6023      	str	r3, [r4, #0]
 800fccc:	bd38      	pop	{r3, r4, r5, pc}
 800fcce:	bf00      	nop
 800fcd0:	200024d8 	.word	0x200024d8

0800fcd4 <_getpid_r>:
 800fcd4:	f7f2 be44 	b.w	8002960 <_getpid>

0800fcd8 <__swhatbuf_r>:
 800fcd8:	b570      	push	{r4, r5, r6, lr}
 800fcda:	460c      	mov	r4, r1
 800fcdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fce0:	2900      	cmp	r1, #0
 800fce2:	b096      	sub	sp, #88	@ 0x58
 800fce4:	4615      	mov	r5, r2
 800fce6:	461e      	mov	r6, r3
 800fce8:	da0d      	bge.n	800fd06 <__swhatbuf_r+0x2e>
 800fcea:	89a3      	ldrh	r3, [r4, #12]
 800fcec:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800fcf0:	f04f 0100 	mov.w	r1, #0
 800fcf4:	bf14      	ite	ne
 800fcf6:	2340      	movne	r3, #64	@ 0x40
 800fcf8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800fcfc:	2000      	movs	r0, #0
 800fcfe:	6031      	str	r1, [r6, #0]
 800fd00:	602b      	str	r3, [r5, #0]
 800fd02:	b016      	add	sp, #88	@ 0x58
 800fd04:	bd70      	pop	{r4, r5, r6, pc}
 800fd06:	466a      	mov	r2, sp
 800fd08:	f000 f848 	bl	800fd9c <_fstat_r>
 800fd0c:	2800      	cmp	r0, #0
 800fd0e:	dbec      	blt.n	800fcea <__swhatbuf_r+0x12>
 800fd10:	9901      	ldr	r1, [sp, #4]
 800fd12:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800fd16:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800fd1a:	4259      	negs	r1, r3
 800fd1c:	4159      	adcs	r1, r3
 800fd1e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fd22:	e7eb      	b.n	800fcfc <__swhatbuf_r+0x24>

0800fd24 <__smakebuf_r>:
 800fd24:	898b      	ldrh	r3, [r1, #12]
 800fd26:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fd28:	079d      	lsls	r5, r3, #30
 800fd2a:	4606      	mov	r6, r0
 800fd2c:	460c      	mov	r4, r1
 800fd2e:	d507      	bpl.n	800fd40 <__smakebuf_r+0x1c>
 800fd30:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800fd34:	6023      	str	r3, [r4, #0]
 800fd36:	6123      	str	r3, [r4, #16]
 800fd38:	2301      	movs	r3, #1
 800fd3a:	6163      	str	r3, [r4, #20]
 800fd3c:	b003      	add	sp, #12
 800fd3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd40:	ab01      	add	r3, sp, #4
 800fd42:	466a      	mov	r2, sp
 800fd44:	f7ff ffc8 	bl	800fcd8 <__swhatbuf_r>
 800fd48:	9f00      	ldr	r7, [sp, #0]
 800fd4a:	4605      	mov	r5, r0
 800fd4c:	4639      	mov	r1, r7
 800fd4e:	4630      	mov	r0, r6
 800fd50:	f7ff f866 	bl	800ee20 <_malloc_r>
 800fd54:	b948      	cbnz	r0, 800fd6a <__smakebuf_r+0x46>
 800fd56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fd5a:	059a      	lsls	r2, r3, #22
 800fd5c:	d4ee      	bmi.n	800fd3c <__smakebuf_r+0x18>
 800fd5e:	f023 0303 	bic.w	r3, r3, #3
 800fd62:	f043 0302 	orr.w	r3, r3, #2
 800fd66:	81a3      	strh	r3, [r4, #12]
 800fd68:	e7e2      	b.n	800fd30 <__smakebuf_r+0xc>
 800fd6a:	89a3      	ldrh	r3, [r4, #12]
 800fd6c:	6020      	str	r0, [r4, #0]
 800fd6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fd72:	81a3      	strh	r3, [r4, #12]
 800fd74:	9b01      	ldr	r3, [sp, #4]
 800fd76:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800fd7a:	b15b      	cbz	r3, 800fd94 <__smakebuf_r+0x70>
 800fd7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fd80:	4630      	mov	r0, r6
 800fd82:	f000 f81d 	bl	800fdc0 <_isatty_r>
 800fd86:	b128      	cbz	r0, 800fd94 <__smakebuf_r+0x70>
 800fd88:	89a3      	ldrh	r3, [r4, #12]
 800fd8a:	f023 0303 	bic.w	r3, r3, #3
 800fd8e:	f043 0301 	orr.w	r3, r3, #1
 800fd92:	81a3      	strh	r3, [r4, #12]
 800fd94:	89a3      	ldrh	r3, [r4, #12]
 800fd96:	431d      	orrs	r5, r3
 800fd98:	81a5      	strh	r5, [r4, #12]
 800fd9a:	e7cf      	b.n	800fd3c <__smakebuf_r+0x18>

0800fd9c <_fstat_r>:
 800fd9c:	b538      	push	{r3, r4, r5, lr}
 800fd9e:	4d07      	ldr	r5, [pc, #28]	@ (800fdbc <_fstat_r+0x20>)
 800fda0:	2300      	movs	r3, #0
 800fda2:	4604      	mov	r4, r0
 800fda4:	4608      	mov	r0, r1
 800fda6:	4611      	mov	r1, r2
 800fda8:	602b      	str	r3, [r5, #0]
 800fdaa:	f7f2 fe41 	bl	8002a30 <_fstat>
 800fdae:	1c43      	adds	r3, r0, #1
 800fdb0:	d102      	bne.n	800fdb8 <_fstat_r+0x1c>
 800fdb2:	682b      	ldr	r3, [r5, #0]
 800fdb4:	b103      	cbz	r3, 800fdb8 <_fstat_r+0x1c>
 800fdb6:	6023      	str	r3, [r4, #0]
 800fdb8:	bd38      	pop	{r3, r4, r5, pc}
 800fdba:	bf00      	nop
 800fdbc:	200024d8 	.word	0x200024d8

0800fdc0 <_isatty_r>:
 800fdc0:	b538      	push	{r3, r4, r5, lr}
 800fdc2:	4d06      	ldr	r5, [pc, #24]	@ (800fddc <_isatty_r+0x1c>)
 800fdc4:	2300      	movs	r3, #0
 800fdc6:	4604      	mov	r4, r0
 800fdc8:	4608      	mov	r0, r1
 800fdca:	602b      	str	r3, [r5, #0]
 800fdcc:	f7f2 fe40 	bl	8002a50 <_isatty>
 800fdd0:	1c43      	adds	r3, r0, #1
 800fdd2:	d102      	bne.n	800fdda <_isatty_r+0x1a>
 800fdd4:	682b      	ldr	r3, [r5, #0]
 800fdd6:	b103      	cbz	r3, 800fdda <_isatty_r+0x1a>
 800fdd8:	6023      	str	r3, [r4, #0]
 800fdda:	bd38      	pop	{r3, r4, r5, pc}
 800fddc:	200024d8 	.word	0x200024d8

0800fde0 <log>:
 800fde0:	b538      	push	{r3, r4, r5, lr}
 800fde2:	ed2d 8b02 	vpush	{d8}
 800fde6:	ec55 4b10 	vmov	r4, r5, d0
 800fdea:	f000 f949 	bl	8010080 <__ieee754_log>
 800fdee:	4622      	mov	r2, r4
 800fdf0:	462b      	mov	r3, r5
 800fdf2:	4620      	mov	r0, r4
 800fdf4:	4629      	mov	r1, r5
 800fdf6:	eeb0 8a40 	vmov.f32	s16, s0
 800fdfa:	eef0 8a60 	vmov.f32	s17, s1
 800fdfe:	f7f0 fe95 	bl	8000b2c <__aeabi_dcmpun>
 800fe02:	b998      	cbnz	r0, 800fe2c <log+0x4c>
 800fe04:	2200      	movs	r2, #0
 800fe06:	2300      	movs	r3, #0
 800fe08:	4620      	mov	r0, r4
 800fe0a:	4629      	mov	r1, r5
 800fe0c:	f7f0 fe84 	bl	8000b18 <__aeabi_dcmpgt>
 800fe10:	b960      	cbnz	r0, 800fe2c <log+0x4c>
 800fe12:	2200      	movs	r2, #0
 800fe14:	2300      	movs	r3, #0
 800fe16:	4620      	mov	r0, r4
 800fe18:	4629      	mov	r1, r5
 800fe1a:	f7f0 fe55 	bl	8000ac8 <__aeabi_dcmpeq>
 800fe1e:	b160      	cbz	r0, 800fe3a <log+0x5a>
 800fe20:	f7fe f90e 	bl	800e040 <__errno>
 800fe24:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 800fe50 <log+0x70>
 800fe28:	2322      	movs	r3, #34	@ 0x22
 800fe2a:	6003      	str	r3, [r0, #0]
 800fe2c:	eeb0 0a48 	vmov.f32	s0, s16
 800fe30:	eef0 0a68 	vmov.f32	s1, s17
 800fe34:	ecbd 8b02 	vpop	{d8}
 800fe38:	bd38      	pop	{r3, r4, r5, pc}
 800fe3a:	f7fe f901 	bl	800e040 <__errno>
 800fe3e:	ecbd 8b02 	vpop	{d8}
 800fe42:	2321      	movs	r3, #33	@ 0x21
 800fe44:	6003      	str	r3, [r0, #0]
 800fe46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fe4a:	4803      	ldr	r0, [pc, #12]	@ (800fe58 <log+0x78>)
 800fe4c:	f000 b834 	b.w	800feb8 <nan>
 800fe50:	00000000 	.word	0x00000000
 800fe54:	fff00000 	.word	0xfff00000
 800fe58:	080106cd 	.word	0x080106cd

0800fe5c <sqrt>:
 800fe5c:	b538      	push	{r3, r4, r5, lr}
 800fe5e:	ed2d 8b02 	vpush	{d8}
 800fe62:	ec55 4b10 	vmov	r4, r5, d0
 800fe66:	f000 f82f 	bl	800fec8 <__ieee754_sqrt>
 800fe6a:	4622      	mov	r2, r4
 800fe6c:	462b      	mov	r3, r5
 800fe6e:	4620      	mov	r0, r4
 800fe70:	4629      	mov	r1, r5
 800fe72:	eeb0 8a40 	vmov.f32	s16, s0
 800fe76:	eef0 8a60 	vmov.f32	s17, s1
 800fe7a:	f7f0 fe57 	bl	8000b2c <__aeabi_dcmpun>
 800fe7e:	b990      	cbnz	r0, 800fea6 <sqrt+0x4a>
 800fe80:	2200      	movs	r2, #0
 800fe82:	2300      	movs	r3, #0
 800fe84:	4620      	mov	r0, r4
 800fe86:	4629      	mov	r1, r5
 800fe88:	f7f0 fe28 	bl	8000adc <__aeabi_dcmplt>
 800fe8c:	b158      	cbz	r0, 800fea6 <sqrt+0x4a>
 800fe8e:	f7fe f8d7 	bl	800e040 <__errno>
 800fe92:	2321      	movs	r3, #33	@ 0x21
 800fe94:	6003      	str	r3, [r0, #0]
 800fe96:	2200      	movs	r2, #0
 800fe98:	2300      	movs	r3, #0
 800fe9a:	4610      	mov	r0, r2
 800fe9c:	4619      	mov	r1, r3
 800fe9e:	f7f0 fcd5 	bl	800084c <__aeabi_ddiv>
 800fea2:	ec41 0b18 	vmov	d8, r0, r1
 800fea6:	eeb0 0a48 	vmov.f32	s0, s16
 800feaa:	eef0 0a68 	vmov.f32	s1, s17
 800feae:	ecbd 8b02 	vpop	{d8}
 800feb2:	bd38      	pop	{r3, r4, r5, pc}
 800feb4:	0000      	movs	r0, r0
	...

0800feb8 <nan>:
 800feb8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800fec0 <nan+0x8>
 800febc:	4770      	bx	lr
 800febe:	bf00      	nop
 800fec0:	00000000 	.word	0x00000000
 800fec4:	7ff80000 	.word	0x7ff80000

0800fec8 <__ieee754_sqrt>:
 800fec8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fecc:	4a68      	ldr	r2, [pc, #416]	@ (8010070 <__ieee754_sqrt+0x1a8>)
 800fece:	ec55 4b10 	vmov	r4, r5, d0
 800fed2:	43aa      	bics	r2, r5
 800fed4:	462b      	mov	r3, r5
 800fed6:	4621      	mov	r1, r4
 800fed8:	d110      	bne.n	800fefc <__ieee754_sqrt+0x34>
 800feda:	4622      	mov	r2, r4
 800fedc:	4620      	mov	r0, r4
 800fede:	4629      	mov	r1, r5
 800fee0:	f7f0 fb8a 	bl	80005f8 <__aeabi_dmul>
 800fee4:	4602      	mov	r2, r0
 800fee6:	460b      	mov	r3, r1
 800fee8:	4620      	mov	r0, r4
 800feea:	4629      	mov	r1, r5
 800feec:	f7f0 f9ce 	bl	800028c <__adddf3>
 800fef0:	4604      	mov	r4, r0
 800fef2:	460d      	mov	r5, r1
 800fef4:	ec45 4b10 	vmov	d0, r4, r5
 800fef8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fefc:	2d00      	cmp	r5, #0
 800fefe:	dc0e      	bgt.n	800ff1e <__ieee754_sqrt+0x56>
 800ff00:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800ff04:	4322      	orrs	r2, r4
 800ff06:	d0f5      	beq.n	800fef4 <__ieee754_sqrt+0x2c>
 800ff08:	b19d      	cbz	r5, 800ff32 <__ieee754_sqrt+0x6a>
 800ff0a:	4622      	mov	r2, r4
 800ff0c:	4620      	mov	r0, r4
 800ff0e:	4629      	mov	r1, r5
 800ff10:	f7f0 f9ba 	bl	8000288 <__aeabi_dsub>
 800ff14:	4602      	mov	r2, r0
 800ff16:	460b      	mov	r3, r1
 800ff18:	f7f0 fc98 	bl	800084c <__aeabi_ddiv>
 800ff1c:	e7e8      	b.n	800fef0 <__ieee754_sqrt+0x28>
 800ff1e:	152a      	asrs	r2, r5, #20
 800ff20:	d115      	bne.n	800ff4e <__ieee754_sqrt+0x86>
 800ff22:	2000      	movs	r0, #0
 800ff24:	e009      	b.n	800ff3a <__ieee754_sqrt+0x72>
 800ff26:	0acb      	lsrs	r3, r1, #11
 800ff28:	3a15      	subs	r2, #21
 800ff2a:	0549      	lsls	r1, r1, #21
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d0fa      	beq.n	800ff26 <__ieee754_sqrt+0x5e>
 800ff30:	e7f7      	b.n	800ff22 <__ieee754_sqrt+0x5a>
 800ff32:	462a      	mov	r2, r5
 800ff34:	e7fa      	b.n	800ff2c <__ieee754_sqrt+0x64>
 800ff36:	005b      	lsls	r3, r3, #1
 800ff38:	3001      	adds	r0, #1
 800ff3a:	02dc      	lsls	r4, r3, #11
 800ff3c:	d5fb      	bpl.n	800ff36 <__ieee754_sqrt+0x6e>
 800ff3e:	1e44      	subs	r4, r0, #1
 800ff40:	1b12      	subs	r2, r2, r4
 800ff42:	f1c0 0420 	rsb	r4, r0, #32
 800ff46:	fa21 f404 	lsr.w	r4, r1, r4
 800ff4a:	4323      	orrs	r3, r4
 800ff4c:	4081      	lsls	r1, r0
 800ff4e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ff52:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800ff56:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ff5a:	07d2      	lsls	r2, r2, #31
 800ff5c:	bf5c      	itt	pl
 800ff5e:	005b      	lslpl	r3, r3, #1
 800ff60:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800ff64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ff68:	bf58      	it	pl
 800ff6a:	0049      	lslpl	r1, r1, #1
 800ff6c:	2600      	movs	r6, #0
 800ff6e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800ff72:	106d      	asrs	r5, r5, #1
 800ff74:	0049      	lsls	r1, r1, #1
 800ff76:	2016      	movs	r0, #22
 800ff78:	4632      	mov	r2, r6
 800ff7a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800ff7e:	1917      	adds	r7, r2, r4
 800ff80:	429f      	cmp	r7, r3
 800ff82:	bfde      	ittt	le
 800ff84:	193a      	addle	r2, r7, r4
 800ff86:	1bdb      	suble	r3, r3, r7
 800ff88:	1936      	addle	r6, r6, r4
 800ff8a:	0fcf      	lsrs	r7, r1, #31
 800ff8c:	3801      	subs	r0, #1
 800ff8e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800ff92:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800ff96:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800ff9a:	d1f0      	bne.n	800ff7e <__ieee754_sqrt+0xb6>
 800ff9c:	4604      	mov	r4, r0
 800ff9e:	2720      	movs	r7, #32
 800ffa0:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800ffa4:	429a      	cmp	r2, r3
 800ffa6:	eb00 0e0c 	add.w	lr, r0, ip
 800ffaa:	db02      	blt.n	800ffb2 <__ieee754_sqrt+0xea>
 800ffac:	d113      	bne.n	800ffd6 <__ieee754_sqrt+0x10e>
 800ffae:	458e      	cmp	lr, r1
 800ffb0:	d811      	bhi.n	800ffd6 <__ieee754_sqrt+0x10e>
 800ffb2:	f1be 0f00 	cmp.w	lr, #0
 800ffb6:	eb0e 000c 	add.w	r0, lr, ip
 800ffba:	da42      	bge.n	8010042 <__ieee754_sqrt+0x17a>
 800ffbc:	2800      	cmp	r0, #0
 800ffbe:	db40      	blt.n	8010042 <__ieee754_sqrt+0x17a>
 800ffc0:	f102 0801 	add.w	r8, r2, #1
 800ffc4:	1a9b      	subs	r3, r3, r2
 800ffc6:	458e      	cmp	lr, r1
 800ffc8:	bf88      	it	hi
 800ffca:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800ffce:	eba1 010e 	sub.w	r1, r1, lr
 800ffd2:	4464      	add	r4, ip
 800ffd4:	4642      	mov	r2, r8
 800ffd6:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800ffda:	3f01      	subs	r7, #1
 800ffdc:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800ffe0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800ffe4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800ffe8:	d1dc      	bne.n	800ffa4 <__ieee754_sqrt+0xdc>
 800ffea:	4319      	orrs	r1, r3
 800ffec:	d01b      	beq.n	8010026 <__ieee754_sqrt+0x15e>
 800ffee:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8010074 <__ieee754_sqrt+0x1ac>
 800fff2:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8010078 <__ieee754_sqrt+0x1b0>
 800fff6:	e9da 0100 	ldrd	r0, r1, [sl]
 800fffa:	e9db 2300 	ldrd	r2, r3, [fp]
 800fffe:	f7f0 f943 	bl	8000288 <__aeabi_dsub>
 8010002:	e9da 8900 	ldrd	r8, r9, [sl]
 8010006:	4602      	mov	r2, r0
 8010008:	460b      	mov	r3, r1
 801000a:	4640      	mov	r0, r8
 801000c:	4649      	mov	r1, r9
 801000e:	f7f0 fd6f 	bl	8000af0 <__aeabi_dcmple>
 8010012:	b140      	cbz	r0, 8010026 <__ieee754_sqrt+0x15e>
 8010014:	f1b4 3fff 	cmp.w	r4, #4294967295
 8010018:	e9da 0100 	ldrd	r0, r1, [sl]
 801001c:	e9db 2300 	ldrd	r2, r3, [fp]
 8010020:	d111      	bne.n	8010046 <__ieee754_sqrt+0x17e>
 8010022:	3601      	adds	r6, #1
 8010024:	463c      	mov	r4, r7
 8010026:	1072      	asrs	r2, r6, #1
 8010028:	0863      	lsrs	r3, r4, #1
 801002a:	07f1      	lsls	r1, r6, #31
 801002c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8010030:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8010034:	bf48      	it	mi
 8010036:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 801003a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 801003e:	4618      	mov	r0, r3
 8010040:	e756      	b.n	800fef0 <__ieee754_sqrt+0x28>
 8010042:	4690      	mov	r8, r2
 8010044:	e7be      	b.n	800ffc4 <__ieee754_sqrt+0xfc>
 8010046:	f7f0 f921 	bl	800028c <__adddf3>
 801004a:	e9da 8900 	ldrd	r8, r9, [sl]
 801004e:	4602      	mov	r2, r0
 8010050:	460b      	mov	r3, r1
 8010052:	4640      	mov	r0, r8
 8010054:	4649      	mov	r1, r9
 8010056:	f7f0 fd41 	bl	8000adc <__aeabi_dcmplt>
 801005a:	b120      	cbz	r0, 8010066 <__ieee754_sqrt+0x19e>
 801005c:	1ca0      	adds	r0, r4, #2
 801005e:	bf08      	it	eq
 8010060:	3601      	addeq	r6, #1
 8010062:	3402      	adds	r4, #2
 8010064:	e7df      	b.n	8010026 <__ieee754_sqrt+0x15e>
 8010066:	1c63      	adds	r3, r4, #1
 8010068:	f023 0401 	bic.w	r4, r3, #1
 801006c:	e7db      	b.n	8010026 <__ieee754_sqrt+0x15e>
 801006e:	bf00      	nop
 8010070:	7ff00000 	.word	0x7ff00000
 8010074:	200002d0 	.word	0x200002d0
 8010078:	200002c8 	.word	0x200002c8
 801007c:	00000000 	.word	0x00000000

08010080 <__ieee754_log>:
 8010080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010084:	ec51 0b10 	vmov	r0, r1, d0
 8010088:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 801008c:	b087      	sub	sp, #28
 801008e:	460d      	mov	r5, r1
 8010090:	da26      	bge.n	80100e0 <__ieee754_log+0x60>
 8010092:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8010096:	4303      	orrs	r3, r0
 8010098:	4602      	mov	r2, r0
 801009a:	d10a      	bne.n	80100b2 <__ieee754_log+0x32>
 801009c:	49ce      	ldr	r1, [pc, #824]	@ (80103d8 <__ieee754_log+0x358>)
 801009e:	2200      	movs	r2, #0
 80100a0:	2300      	movs	r3, #0
 80100a2:	2000      	movs	r0, #0
 80100a4:	f7f0 fbd2 	bl	800084c <__aeabi_ddiv>
 80100a8:	ec41 0b10 	vmov	d0, r0, r1
 80100ac:	b007      	add	sp, #28
 80100ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100b2:	2900      	cmp	r1, #0
 80100b4:	da05      	bge.n	80100c2 <__ieee754_log+0x42>
 80100b6:	460b      	mov	r3, r1
 80100b8:	f7f0 f8e6 	bl	8000288 <__aeabi_dsub>
 80100bc:	2200      	movs	r2, #0
 80100be:	2300      	movs	r3, #0
 80100c0:	e7f0      	b.n	80100a4 <__ieee754_log+0x24>
 80100c2:	4bc6      	ldr	r3, [pc, #792]	@ (80103dc <__ieee754_log+0x35c>)
 80100c4:	2200      	movs	r2, #0
 80100c6:	f7f0 fa97 	bl	80005f8 <__aeabi_dmul>
 80100ca:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 80100ce:	460d      	mov	r5, r1
 80100d0:	4ac3      	ldr	r2, [pc, #780]	@ (80103e0 <__ieee754_log+0x360>)
 80100d2:	4295      	cmp	r5, r2
 80100d4:	dd06      	ble.n	80100e4 <__ieee754_log+0x64>
 80100d6:	4602      	mov	r2, r0
 80100d8:	460b      	mov	r3, r1
 80100da:	f7f0 f8d7 	bl	800028c <__adddf3>
 80100de:	e7e3      	b.n	80100a8 <__ieee754_log+0x28>
 80100e0:	2300      	movs	r3, #0
 80100e2:	e7f5      	b.n	80100d0 <__ieee754_log+0x50>
 80100e4:	152c      	asrs	r4, r5, #20
 80100e6:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 80100ea:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80100ee:	441c      	add	r4, r3
 80100f0:	f505 2315 	add.w	r3, r5, #610304	@ 0x95000
 80100f4:	f603 7364 	addw	r3, r3, #3940	@ 0xf64
 80100f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80100fc:	f083 527f 	eor.w	r2, r3, #1069547520	@ 0x3fc00000
 8010100:	f482 1240 	eor.w	r2, r2, #3145728	@ 0x300000
 8010104:	ea42 0105 	orr.w	r1, r2, r5
 8010108:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 801010c:	2200      	movs	r2, #0
 801010e:	4bb5      	ldr	r3, [pc, #724]	@ (80103e4 <__ieee754_log+0x364>)
 8010110:	f7f0 f8ba 	bl	8000288 <__aeabi_dsub>
 8010114:	1cab      	adds	r3, r5, #2
 8010116:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801011a:	2b02      	cmp	r3, #2
 801011c:	4682      	mov	sl, r0
 801011e:	468b      	mov	fp, r1
 8010120:	f04f 0200 	mov.w	r2, #0
 8010124:	dc53      	bgt.n	80101ce <__ieee754_log+0x14e>
 8010126:	2300      	movs	r3, #0
 8010128:	f7f0 fcce 	bl	8000ac8 <__aeabi_dcmpeq>
 801012c:	b1d0      	cbz	r0, 8010164 <__ieee754_log+0xe4>
 801012e:	2c00      	cmp	r4, #0
 8010130:	f000 8120 	beq.w	8010374 <__ieee754_log+0x2f4>
 8010134:	4620      	mov	r0, r4
 8010136:	f7f0 f9f5 	bl	8000524 <__aeabi_i2d>
 801013a:	a391      	add	r3, pc, #580	@ (adr r3, 8010380 <__ieee754_log+0x300>)
 801013c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010140:	4606      	mov	r6, r0
 8010142:	460f      	mov	r7, r1
 8010144:	f7f0 fa58 	bl	80005f8 <__aeabi_dmul>
 8010148:	a38f      	add	r3, pc, #572	@ (adr r3, 8010388 <__ieee754_log+0x308>)
 801014a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801014e:	4604      	mov	r4, r0
 8010150:	460d      	mov	r5, r1
 8010152:	4630      	mov	r0, r6
 8010154:	4639      	mov	r1, r7
 8010156:	f7f0 fa4f 	bl	80005f8 <__aeabi_dmul>
 801015a:	4602      	mov	r2, r0
 801015c:	460b      	mov	r3, r1
 801015e:	4620      	mov	r0, r4
 8010160:	4629      	mov	r1, r5
 8010162:	e7ba      	b.n	80100da <__ieee754_log+0x5a>
 8010164:	a38a      	add	r3, pc, #552	@ (adr r3, 8010390 <__ieee754_log+0x310>)
 8010166:	e9d3 2300 	ldrd	r2, r3, [r3]
 801016a:	4650      	mov	r0, sl
 801016c:	4659      	mov	r1, fp
 801016e:	f7f0 fa43 	bl	80005f8 <__aeabi_dmul>
 8010172:	4602      	mov	r2, r0
 8010174:	460b      	mov	r3, r1
 8010176:	2000      	movs	r0, #0
 8010178:	499b      	ldr	r1, [pc, #620]	@ (80103e8 <__ieee754_log+0x368>)
 801017a:	f7f0 f885 	bl	8000288 <__aeabi_dsub>
 801017e:	4652      	mov	r2, sl
 8010180:	4606      	mov	r6, r0
 8010182:	460f      	mov	r7, r1
 8010184:	465b      	mov	r3, fp
 8010186:	4650      	mov	r0, sl
 8010188:	4659      	mov	r1, fp
 801018a:	f7f0 fa35 	bl	80005f8 <__aeabi_dmul>
 801018e:	4602      	mov	r2, r0
 8010190:	460b      	mov	r3, r1
 8010192:	4630      	mov	r0, r6
 8010194:	4639      	mov	r1, r7
 8010196:	f7f0 fa2f 	bl	80005f8 <__aeabi_dmul>
 801019a:	4606      	mov	r6, r0
 801019c:	460f      	mov	r7, r1
 801019e:	b914      	cbnz	r4, 80101a6 <__ieee754_log+0x126>
 80101a0:	4632      	mov	r2, r6
 80101a2:	463b      	mov	r3, r7
 80101a4:	e0a0      	b.n	80102e8 <__ieee754_log+0x268>
 80101a6:	4620      	mov	r0, r4
 80101a8:	f7f0 f9bc 	bl	8000524 <__aeabi_i2d>
 80101ac:	a374      	add	r3, pc, #464	@ (adr r3, 8010380 <__ieee754_log+0x300>)
 80101ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101b2:	4680      	mov	r8, r0
 80101b4:	4689      	mov	r9, r1
 80101b6:	f7f0 fa1f 	bl	80005f8 <__aeabi_dmul>
 80101ba:	a373      	add	r3, pc, #460	@ (adr r3, 8010388 <__ieee754_log+0x308>)
 80101bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101c0:	4604      	mov	r4, r0
 80101c2:	460d      	mov	r5, r1
 80101c4:	4640      	mov	r0, r8
 80101c6:	4649      	mov	r1, r9
 80101c8:	f7f0 fa16 	bl	80005f8 <__aeabi_dmul>
 80101cc:	e0a5      	b.n	801031a <__ieee754_log+0x29a>
 80101ce:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80101d2:	f7f0 f85b 	bl	800028c <__adddf3>
 80101d6:	4602      	mov	r2, r0
 80101d8:	460b      	mov	r3, r1
 80101da:	4650      	mov	r0, sl
 80101dc:	4659      	mov	r1, fp
 80101de:	f7f0 fb35 	bl	800084c <__aeabi_ddiv>
 80101e2:	e9cd 0100 	strd	r0, r1, [sp]
 80101e6:	4620      	mov	r0, r4
 80101e8:	f7f0 f99c 	bl	8000524 <__aeabi_i2d>
 80101ec:	e9dd 2300 	ldrd	r2, r3, [sp]
 80101f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80101f4:	4610      	mov	r0, r2
 80101f6:	4619      	mov	r1, r3
 80101f8:	f7f0 f9fe 	bl	80005f8 <__aeabi_dmul>
 80101fc:	4602      	mov	r2, r0
 80101fe:	460b      	mov	r3, r1
 8010200:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010204:	f7f0 f9f8 	bl	80005f8 <__aeabi_dmul>
 8010208:	a363      	add	r3, pc, #396	@ (adr r3, 8010398 <__ieee754_log+0x318>)
 801020a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801020e:	4680      	mov	r8, r0
 8010210:	4689      	mov	r9, r1
 8010212:	f7f0 f9f1 	bl	80005f8 <__aeabi_dmul>
 8010216:	a362      	add	r3, pc, #392	@ (adr r3, 80103a0 <__ieee754_log+0x320>)
 8010218:	e9d3 2300 	ldrd	r2, r3, [r3]
 801021c:	f7f0 f836 	bl	800028c <__adddf3>
 8010220:	4642      	mov	r2, r8
 8010222:	464b      	mov	r3, r9
 8010224:	f7f0 f9e8 	bl	80005f8 <__aeabi_dmul>
 8010228:	a35f      	add	r3, pc, #380	@ (adr r3, 80103a8 <__ieee754_log+0x328>)
 801022a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801022e:	f7f0 f82d 	bl	800028c <__adddf3>
 8010232:	4642      	mov	r2, r8
 8010234:	464b      	mov	r3, r9
 8010236:	f7f0 f9df 	bl	80005f8 <__aeabi_dmul>
 801023a:	a35d      	add	r3, pc, #372	@ (adr r3, 80103b0 <__ieee754_log+0x330>)
 801023c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010240:	f7f0 f824 	bl	800028c <__adddf3>
 8010244:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010248:	f7f0 f9d6 	bl	80005f8 <__aeabi_dmul>
 801024c:	a35a      	add	r3, pc, #360	@ (adr r3, 80103b8 <__ieee754_log+0x338>)
 801024e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010252:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010256:	4640      	mov	r0, r8
 8010258:	4649      	mov	r1, r9
 801025a:	f7f0 f9cd 	bl	80005f8 <__aeabi_dmul>
 801025e:	a358      	add	r3, pc, #352	@ (adr r3, 80103c0 <__ieee754_log+0x340>)
 8010260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010264:	f7f0 f812 	bl	800028c <__adddf3>
 8010268:	4642      	mov	r2, r8
 801026a:	464b      	mov	r3, r9
 801026c:	f7f0 f9c4 	bl	80005f8 <__aeabi_dmul>
 8010270:	a355      	add	r3, pc, #340	@ (adr r3, 80103c8 <__ieee754_log+0x348>)
 8010272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010276:	f7f0 f809 	bl	800028c <__adddf3>
 801027a:	4642      	mov	r2, r8
 801027c:	464b      	mov	r3, r9
 801027e:	f7f0 f9bb 	bl	80005f8 <__aeabi_dmul>
 8010282:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 8010286:	4602      	mov	r2, r0
 8010288:	460b      	mov	r3, r1
 801028a:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 801028e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010292:	f7ef fffb 	bl	800028c <__adddf3>
 8010296:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 801029a:	3551      	adds	r5, #81	@ 0x51
 801029c:	4335      	orrs	r5, r6
 801029e:	2d00      	cmp	r5, #0
 80102a0:	4680      	mov	r8, r0
 80102a2:	4689      	mov	r9, r1
 80102a4:	dd48      	ble.n	8010338 <__ieee754_log+0x2b8>
 80102a6:	4b50      	ldr	r3, [pc, #320]	@ (80103e8 <__ieee754_log+0x368>)
 80102a8:	2200      	movs	r2, #0
 80102aa:	4650      	mov	r0, sl
 80102ac:	4659      	mov	r1, fp
 80102ae:	f7f0 f9a3 	bl	80005f8 <__aeabi_dmul>
 80102b2:	4652      	mov	r2, sl
 80102b4:	465b      	mov	r3, fp
 80102b6:	f7f0 f99f 	bl	80005f8 <__aeabi_dmul>
 80102ba:	4602      	mov	r2, r0
 80102bc:	460b      	mov	r3, r1
 80102be:	4606      	mov	r6, r0
 80102c0:	460f      	mov	r7, r1
 80102c2:	4640      	mov	r0, r8
 80102c4:	4649      	mov	r1, r9
 80102c6:	f7ef ffe1 	bl	800028c <__adddf3>
 80102ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 80102ce:	f7f0 f993 	bl	80005f8 <__aeabi_dmul>
 80102d2:	4680      	mov	r8, r0
 80102d4:	4689      	mov	r9, r1
 80102d6:	b964      	cbnz	r4, 80102f2 <__ieee754_log+0x272>
 80102d8:	4602      	mov	r2, r0
 80102da:	460b      	mov	r3, r1
 80102dc:	4630      	mov	r0, r6
 80102de:	4639      	mov	r1, r7
 80102e0:	f7ef ffd2 	bl	8000288 <__aeabi_dsub>
 80102e4:	4602      	mov	r2, r0
 80102e6:	460b      	mov	r3, r1
 80102e8:	4650      	mov	r0, sl
 80102ea:	4659      	mov	r1, fp
 80102ec:	f7ef ffcc 	bl	8000288 <__aeabi_dsub>
 80102f0:	e6da      	b.n	80100a8 <__ieee754_log+0x28>
 80102f2:	a323      	add	r3, pc, #140	@ (adr r3, 8010380 <__ieee754_log+0x300>)
 80102f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80102fc:	f7f0 f97c 	bl	80005f8 <__aeabi_dmul>
 8010300:	a321      	add	r3, pc, #132	@ (adr r3, 8010388 <__ieee754_log+0x308>)
 8010302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010306:	4604      	mov	r4, r0
 8010308:	460d      	mov	r5, r1
 801030a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801030e:	f7f0 f973 	bl	80005f8 <__aeabi_dmul>
 8010312:	4642      	mov	r2, r8
 8010314:	464b      	mov	r3, r9
 8010316:	f7ef ffb9 	bl	800028c <__adddf3>
 801031a:	4602      	mov	r2, r0
 801031c:	460b      	mov	r3, r1
 801031e:	4630      	mov	r0, r6
 8010320:	4639      	mov	r1, r7
 8010322:	f7ef ffb1 	bl	8000288 <__aeabi_dsub>
 8010326:	4652      	mov	r2, sl
 8010328:	465b      	mov	r3, fp
 801032a:	f7ef ffad 	bl	8000288 <__aeabi_dsub>
 801032e:	4602      	mov	r2, r0
 8010330:	460b      	mov	r3, r1
 8010332:	4620      	mov	r0, r4
 8010334:	4629      	mov	r1, r5
 8010336:	e7d9      	b.n	80102ec <__ieee754_log+0x26c>
 8010338:	4602      	mov	r2, r0
 801033a:	460b      	mov	r3, r1
 801033c:	4650      	mov	r0, sl
 801033e:	4659      	mov	r1, fp
 8010340:	f7ef ffa2 	bl	8000288 <__aeabi_dsub>
 8010344:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010348:	f7f0 f956 	bl	80005f8 <__aeabi_dmul>
 801034c:	4606      	mov	r6, r0
 801034e:	460f      	mov	r7, r1
 8010350:	2c00      	cmp	r4, #0
 8010352:	f43f af25 	beq.w	80101a0 <__ieee754_log+0x120>
 8010356:	a30a      	add	r3, pc, #40	@ (adr r3, 8010380 <__ieee754_log+0x300>)
 8010358:	e9d3 2300 	ldrd	r2, r3, [r3]
 801035c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010360:	f7f0 f94a 	bl	80005f8 <__aeabi_dmul>
 8010364:	a308      	add	r3, pc, #32	@ (adr r3, 8010388 <__ieee754_log+0x308>)
 8010366:	e9d3 2300 	ldrd	r2, r3, [r3]
 801036a:	4604      	mov	r4, r0
 801036c:	460d      	mov	r5, r1
 801036e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010372:	e729      	b.n	80101c8 <__ieee754_log+0x148>
 8010374:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 80103d0 <__ieee754_log+0x350>
 8010378:	e698      	b.n	80100ac <__ieee754_log+0x2c>
 801037a:	bf00      	nop
 801037c:	f3af 8000 	nop.w
 8010380:	fee00000 	.word	0xfee00000
 8010384:	3fe62e42 	.word	0x3fe62e42
 8010388:	35793c76 	.word	0x35793c76
 801038c:	3dea39ef 	.word	0x3dea39ef
 8010390:	55555555 	.word	0x55555555
 8010394:	3fd55555 	.word	0x3fd55555
 8010398:	df3e5244 	.word	0xdf3e5244
 801039c:	3fc2f112 	.word	0x3fc2f112
 80103a0:	96cb03de 	.word	0x96cb03de
 80103a4:	3fc74664 	.word	0x3fc74664
 80103a8:	94229359 	.word	0x94229359
 80103ac:	3fd24924 	.word	0x3fd24924
 80103b0:	55555593 	.word	0x55555593
 80103b4:	3fe55555 	.word	0x3fe55555
 80103b8:	d078c69f 	.word	0xd078c69f
 80103bc:	3fc39a09 	.word	0x3fc39a09
 80103c0:	1d8e78af 	.word	0x1d8e78af
 80103c4:	3fcc71c5 	.word	0x3fcc71c5
 80103c8:	9997fa04 	.word	0x9997fa04
 80103cc:	3fd99999 	.word	0x3fd99999
	...
 80103d8:	c3500000 	.word	0xc3500000
 80103dc:	43500000 	.word	0x43500000
 80103e0:	7fefffff 	.word	0x7fefffff
 80103e4:	3ff00000 	.word	0x3ff00000
 80103e8:	3fe00000 	.word	0x3fe00000

080103ec <_init>:
 80103ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103ee:	bf00      	nop
 80103f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80103f2:	bc08      	pop	{r3}
 80103f4:	469e      	mov	lr, r3
 80103f6:	4770      	bx	lr

080103f8 <_fini>:
 80103f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103fa:	bf00      	nop
 80103fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80103fe:	bc08      	pop	{r3}
 8010400:	469e      	mov	lr, r3
 8010402:	4770      	bx	lr
