
STM32_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cfd8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000728  0800d168  0800d168  0000e168  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d890  0800d890  0000f2c4  2**0
                  CONTENTS
  4 .ARM          00000008  0800d890  0800d890  0000e890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d898  0800d898  0000f2c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d898  0800d898  0000e898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d89c  0800d89c  0000e89c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002c4  20000000  0800d8a0  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f2c4  2**0
                  CONTENTS
 10 .bss          000021e8  200002c4  200002c4  0000f2c4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200024ac  200024ac  0000f2c4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f2c4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018e3c  00000000  00000000  0000f2f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f9d  00000000  00000000  00028130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001578  00000000  00000000  0002c0d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001075  00000000  00000000  0002d648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00006f13  00000000  00000000  0002e6bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001dc4f  00000000  00000000  000355d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cf5bf  00000000  00000000  0005321f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001227de  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006a50  00000000  00000000  00122824  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000048  00000000  00000000  00129274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002c4 	.word	0x200002c4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d150 	.word	0x0800d150

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002c8 	.word	0x200002c8
 80001cc:	0800d150 	.word	0x0800d150

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <MAX30102_ReadFIFO>:
HAL_StatusTypeDef MAX30102_ReadRegister(uint8_t reg, uint8_t *value) {
    return HAL_I2C_Mem_Read(&hi2c1, (MAX30102_ADDRESS << 1), reg, I2C_MEMADD_SIZE_8BIT, value, 1, 100);
}

// Read FIFO data
uint8_t MAX30102_ReadFIFO(uint8_t *buffer, uint8_t length) {
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b086      	sub	sp, #24
 8000e9c:	af04      	add	r7, sp, #16
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	460b      	mov	r3, r1
 8000ea2:	70fb      	strb	r3, [r7, #3]
    return HAL_I2C_Mem_Read(&hi2c1, (MAX30102_ADDRESS << 1), REG_FIFO_DATA, I2C_MEMADD_SIZE_8BIT, buffer, length, 100);
 8000ea4:	78fb      	ldrb	r3, [r7, #3]
 8000ea6:	b29b      	uxth	r3, r3
 8000ea8:	2264      	movs	r2, #100	@ 0x64
 8000eaa:	9202      	str	r2, [sp, #8]
 8000eac:	9301      	str	r3, [sp, #4]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	9300      	str	r3, [sp, #0]
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	2207      	movs	r2, #7
 8000eb6:	21ae      	movs	r1, #174	@ 0xae
 8000eb8:	4803      	ldr	r0, [pc, #12]	@ (8000ec8 <MAX30102_ReadFIFO+0x30>)
 8000eba:	f001 fcd5 	bl	8002868 <HAL_I2C_Mem_Read>
 8000ebe:	4603      	mov	r3, r0
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3708      	adds	r7, #8
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	200002e0 	.word	0x200002e0

08000ecc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ed2:	f000 fef7 	bl	8001cc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ed6:	f000 f8b9 	bl	800104c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eda:	f000 f9df 	bl	800129c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000ede:	f000 f91f 	bl	8001120 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000ee2:	f000 f94b 	bl	800117c <MX_I2S3_Init>
  MX_SPI1_Init();
 8000ee6:	f000 f979 	bl	80011dc <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000eea:	f000 f9ad 	bl	8001248 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8000eee:	f008 fdc1 	bl	8009a74 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

	//uint8_t message[] = "Hello PC! STM32 is sending data...\r\n";

	OLED_Init();                // Initialize the OLED display
 8000ef2:	f000 fb0d 	bl	8001510 <OLED_Init>
	OLED_Clear();               // Clear the OLED screen
 8000ef6:	f000 fb7e 	bl	80015f6 <OLED_Clear>
	OLED_ShowString(0, 0, "Hello, World!");  // Display "Hello, World!" at position (0, 0)
 8000efa:	4a49      	ldr	r2, [pc, #292]	@ (8001020 <main+0x154>)
 8000efc:	2100      	movs	r1, #0
 8000efe:	2000      	movs	r0, #0
 8000f00:	f000 fbee 	bl	80016e0 <OLED_ShowString>
	OLED_ShowString(0, 3, "STM32 OLED Demo"); // Display "STM32 OLED Demo" at position (0, 3)
 8000f04:	4a47      	ldr	r2, [pc, #284]	@ (8001024 <main+0x158>)
 8000f06:	2103      	movs	r1, #3
 8000f08:	2000      	movs	r0, #0
 8000f0a:	f000 fbe9 	bl	80016e0 <OLED_ShowString>

	long currentMillis = 0;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	607b      	str	r3, [r7, #4]
	long lastMillis = 0;
 8000f12:	2300      	movs	r3, #0
 8000f14:	60fb      	str	r3, [r7, #12]
	// SPO2 - Both IR & Red Led active
	// MULTI_LED - Both led's active (timing can be configured; see DataSheet)
	pulseOximeter_setMeasurementMode(SPO2);
	*/

	currentMillis = millis();
 8000f16:	f000 fe91 	bl	8001c3c <millis>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	607b      	str	r3, [r7, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		if( pulseOximiterIntFlag && !heartrate_data_full)
 8000f1e:	4b42      	ldr	r3, [pc, #264]	@ (8001028 <main+0x15c>)
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d055      	beq.n	8000fd4 <main+0x108>
 8000f28:	4b40      	ldr	r3, [pc, #256]	@ (800102c <main+0x160>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d151      	bne.n	8000fd4 <main+0x108>
		{
			if (MAX30102_ReadFIFO(max30102_sensor_data, 6 * MAX30102_SAMPLES_PER_BURST) == HAL_OK) {
 8000f30:	21b4      	movs	r1, #180	@ 0xb4
 8000f32:	483f      	ldr	r0, [pc, #252]	@ (8001030 <main+0x164>)
 8000f34:	f7ff ffb0 	bl	8000e98 <MAX30102_ReadFIFO>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d14a      	bne.n	8000fd4 <main+0x108>

				pulseOximiterIntFlag = 0;
 8000f3e:	4b3a      	ldr	r3, [pc, #232]	@ (8001028 <main+0x15c>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	701a      	strb	r2, [r3, #0]

				for (int i = 0 ; i < MAX30102_SAMPLES_PER_BURST; i++) {
 8000f44:	2300      	movs	r3, #0
 8000f46:	60bb      	str	r3, [r7, #8]
 8000f48:	e022      	b.n	8000f90 <main+0xc4>
					// check that the pointer location is valid
					if (heardrate_led_wr_ptr >= BPM_SAMPLES_TO_KEEP) {
 8000f4a:	4b3a      	ldr	r3, [pc, #232]	@ (8001034 <main+0x168>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	2b95      	cmp	r3, #149	@ 0x95
 8000f50:	d906      	bls.n	8000f60 <main+0x94>
						// if its not then break from this loop and say that we have full data.
						heartrate_data_full = TRUE;
 8000f52:	4b36      	ldr	r3, [pc, #216]	@ (800102c <main+0x160>)
 8000f54:	2201      	movs	r2, #1
 8000f56:	701a      	strb	r2, [r3, #0]
						heardrate_led_wr_ptr = 0;
 8000f58:	4b36      	ldr	r3, [pc, #216]	@ (8001034 <main+0x168>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	601a      	str	r2, [r3, #0]

						break;
 8000f5e:	e01a      	b.n	8000f96 <main+0xca>
					// led2 is IR
					// the first values we see are the oldest, so write them behind where we left off on the old data

					// heart rate mode only needs red, so only save red data initially long term

					heartrate_led_data[heardrate_led_wr_ptr] = (max30102_sensor_data[0] << 16) | (max30102_sensor_data[1] << 8) | max30102_sensor_data[2];
 8000f60:	4b33      	ldr	r3, [pc, #204]	@ (8001030 <main+0x164>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	041a      	lsls	r2, r3, #16
 8000f66:	4b32      	ldr	r3, [pc, #200]	@ (8001030 <main+0x164>)
 8000f68:	785b      	ldrb	r3, [r3, #1]
 8000f6a:	021b      	lsls	r3, r3, #8
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	4a30      	ldr	r2, [pc, #192]	@ (8001030 <main+0x164>)
 8000f70:	7892      	ldrb	r2, [r2, #2]
 8000f72:	431a      	orrs	r2, r3
 8000f74:	4b2f      	ldr	r3, [pc, #188]	@ (8001034 <main+0x168>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4611      	mov	r1, r2
 8000f7a:	4a2f      	ldr	r2, [pc, #188]	@ (8001038 <main+0x16c>)
 8000f7c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					heardrate_led_wr_ptr++;
 8000f80:	4b2c      	ldr	r3, [pc, #176]	@ (8001034 <main+0x168>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	3301      	adds	r3, #1
 8000f86:	4a2b      	ldr	r2, [pc, #172]	@ (8001034 <main+0x168>)
 8000f88:	6013      	str	r3, [r2, #0]
				for (int i = 0 ; i < MAX30102_SAMPLES_PER_BURST; i++) {
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	60bb      	str	r3, [r7, #8]
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	2b1d      	cmp	r3, #29
 8000f94:	ddd9      	ble.n	8000f4a <main+0x7e>
				}
				uint32_t ir_value  = (max30102_sensor_data[3] << 16) | (max30102_sensor_data[4] << 8) | max30102_sensor_data[5];
 8000f96:	4b26      	ldr	r3, [pc, #152]	@ (8001030 <main+0x164>)
 8000f98:	78db      	ldrb	r3, [r3, #3]
 8000f9a:	041a      	lsls	r2, r3, #16
 8000f9c:	4b24      	ldr	r3, [pc, #144]	@ (8001030 <main+0x164>)
 8000f9e:	791b      	ldrb	r3, [r3, #4]
 8000fa0:	021b      	lsls	r3, r3, #8
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	4a22      	ldr	r2, [pc, #136]	@ (8001030 <main+0x164>)
 8000fa6:	7952      	ldrb	r2, [r2, #5]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	603b      	str	r3, [r7, #0]

				sprintf(message, "red: %d   IR: %d", (int)heartrate_led_data[heardrate_led_wr_ptr], (int)ir_value);
 8000fac:	4b21      	ldr	r3, [pc, #132]	@ (8001034 <main+0x168>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a21      	ldr	r2, [pc, #132]	@ (8001038 <main+0x16c>)
 8000fb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	4920      	ldr	r1, [pc, #128]	@ (800103c <main+0x170>)
 8000fbc:	4820      	ldr	r0, [pc, #128]	@ (8001040 <main+0x174>)
 8000fbe:	f009 ff9b 	bl	800aef8 <siprintf>
				CDC_Transmit_FS((uint8_t *)message, strlen(message));
 8000fc2:	481f      	ldr	r0, [pc, #124]	@ (8001040 <main+0x174>)
 8000fc4:	f7ff f954 	bl	8000270 <strlen>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	b29b      	uxth	r3, r3
 8000fcc:	4619      	mov	r1, r3
 8000fce:	481c      	ldr	r0, [pc, #112]	@ (8001040 <main+0x174>)
 8000fd0:	f008 fe0e 	bl	8009bf0 <CDC_Transmit_FS>

		}


		// Display the data over the built in USB every second
		currentMillis = millis();
 8000fd4:	f000 fe32 	bl	8001c3c <millis>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	607b      	str	r3, [r7, #4]
		if( currentMillis - lastMillis > 1000 )
 8000fdc:	687a      	ldr	r2, [r7, #4]
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000fe6:	dd9a      	ble.n	8000f1e <main+0x52>
		{
			if (heartrate_data_full) {
 8000fe8:	4b10      	ldr	r3, [pc, #64]	@ (800102c <main+0x160>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d00f      	beq.n	8001010 <main+0x144>
				sprintf(message, "the HR data has been fully captured");
 8000ff0:	4914      	ldr	r1, [pc, #80]	@ (8001044 <main+0x178>)
 8000ff2:	4813      	ldr	r0, [pc, #76]	@ (8001040 <main+0x174>)
 8000ff4:	f009 ff80 	bl	800aef8 <siprintf>
				CDC_Transmit_FS((uint8_t *)message, strlen(message));
 8000ff8:	4811      	ldr	r0, [pc, #68]	@ (8001040 <main+0x174>)
 8000ffa:	f7ff f939 	bl	8000270 <strlen>
 8000ffe:	4603      	mov	r3, r0
 8001000:	b29b      	uxth	r3, r3
 8001002:	4619      	mov	r1, r3
 8001004:	480e      	ldr	r0, [pc, #56]	@ (8001040 <main+0x174>)
 8001006:	f008 fdf3 	bl	8009bf0 <CDC_Transmit_FS>
				heartrate_data_full = FALSE;
 800100a:	4b08      	ldr	r3, [pc, #32]	@ (800102c <main+0x160>)
 800100c:	2200      	movs	r2, #0
 800100e:	701a      	strb	r2, [r3, #0]
			}

			HAL_GPIO_TogglePin(GPIOD, LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin);		//LED blinking
 8001010:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8001014:	480c      	ldr	r0, [pc, #48]	@ (8001048 <main+0x17c>)
 8001016:	f001 f9b2 	bl	800237e <HAL_GPIO_TogglePin>

			lastMillis = currentMillis;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	60fb      	str	r3, [r7, #12]
		if( pulseOximiterIntFlag && !heartrate_data_full)
 800101e:	e77e      	b.n	8000f1e <main+0x52>
 8001020:	0800d168 	.word	0x0800d168
 8001024:	0800d178 	.word	0x0800d178
 8001028:	2000045c 	.word	0x2000045c
 800102c:	20000770 	.word	0x20000770
 8001030:	20000460 	.word	0x20000460
 8001034:	2000076c 	.word	0x2000076c
 8001038:	20000514 	.word	0x20000514
 800103c:	0800d188 	.word	0x0800d188
 8001040:	2000041c 	.word	0x2000041c
 8001044:	0800d19c 	.word	0x0800d19c
 8001048:	40020c00 	.word	0x40020c00

0800104c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b094      	sub	sp, #80	@ 0x50
 8001050:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001052:	f107 0320 	add.w	r3, r7, #32
 8001056:	2230      	movs	r2, #48	@ 0x30
 8001058:	2100      	movs	r1, #0
 800105a:	4618      	mov	r0, r3
 800105c:	f009 ffaf 	bl	800afbe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001060:	f107 030c 	add.w	r3, r7, #12
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	60da      	str	r2, [r3, #12]
 800106e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001070:	2300      	movs	r3, #0
 8001072:	60bb      	str	r3, [r7, #8]
 8001074:	4b28      	ldr	r3, [pc, #160]	@ (8001118 <SystemClock_Config+0xcc>)
 8001076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001078:	4a27      	ldr	r2, [pc, #156]	@ (8001118 <SystemClock_Config+0xcc>)
 800107a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800107e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001080:	4b25      	ldr	r3, [pc, #148]	@ (8001118 <SystemClock_Config+0xcc>)
 8001082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001084:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001088:	60bb      	str	r3, [r7, #8]
 800108a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800108c:	2300      	movs	r3, #0
 800108e:	607b      	str	r3, [r7, #4]
 8001090:	4b22      	ldr	r3, [pc, #136]	@ (800111c <SystemClock_Config+0xd0>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a21      	ldr	r2, [pc, #132]	@ (800111c <SystemClock_Config+0xd0>)
 8001096:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800109a:	6013      	str	r3, [r2, #0]
 800109c:	4b1f      	ldr	r3, [pc, #124]	@ (800111c <SystemClock_Config+0xd0>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010a4:	607b      	str	r3, [r7, #4]
 80010a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010a8:	2301      	movs	r3, #1
 80010aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010ac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010b0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010b2:	2302      	movs	r3, #2
 80010b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010b6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80010ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80010bc:	2308      	movs	r3, #8
 80010be:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80010c0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80010c4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010c6:	2302      	movs	r3, #2
 80010c8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80010ca:	2307      	movs	r3, #7
 80010cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ce:	f107 0320 	add.w	r3, r7, #32
 80010d2:	4618      	mov	r0, r3
 80010d4:	f004 f88c 	bl	80051f0 <HAL_RCC_OscConfig>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80010de:	f000 f9f5 	bl	80014cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010e2:	230f      	movs	r3, #15
 80010e4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010e6:	2302      	movs	r3, #2
 80010e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010ea:	2300      	movs	r3, #0
 80010ec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010ee:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80010f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010f8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010fa:	f107 030c 	add.w	r3, r7, #12
 80010fe:	2105      	movs	r1, #5
 8001100:	4618      	mov	r0, r3
 8001102:	f004 faed 	bl	80056e0 <HAL_RCC_ClockConfig>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800110c:	f000 f9de 	bl	80014cc <Error_Handler>
  }
}
 8001110:	bf00      	nop
 8001112:	3750      	adds	r7, #80	@ 0x50
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	40023800 	.word	0x40023800
 800111c:	40007000 	.word	0x40007000

08001120 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001124:	4b12      	ldr	r3, [pc, #72]	@ (8001170 <MX_I2C1_Init+0x50>)
 8001126:	4a13      	ldr	r2, [pc, #76]	@ (8001174 <MX_I2C1_Init+0x54>)
 8001128:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800112a:	4b11      	ldr	r3, [pc, #68]	@ (8001170 <MX_I2C1_Init+0x50>)
 800112c:	4a12      	ldr	r2, [pc, #72]	@ (8001178 <MX_I2C1_Init+0x58>)
 800112e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001130:	4b0f      	ldr	r3, [pc, #60]	@ (8001170 <MX_I2C1_Init+0x50>)
 8001132:	2200      	movs	r2, #0
 8001134:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001136:	4b0e      	ldr	r3, [pc, #56]	@ (8001170 <MX_I2C1_Init+0x50>)
 8001138:	2200      	movs	r2, #0
 800113a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800113c:	4b0c      	ldr	r3, [pc, #48]	@ (8001170 <MX_I2C1_Init+0x50>)
 800113e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001142:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001144:	4b0a      	ldr	r3, [pc, #40]	@ (8001170 <MX_I2C1_Init+0x50>)
 8001146:	2200      	movs	r2, #0
 8001148:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800114a:	4b09      	ldr	r3, [pc, #36]	@ (8001170 <MX_I2C1_Init+0x50>)
 800114c:	2200      	movs	r2, #0
 800114e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001150:	4b07      	ldr	r3, [pc, #28]	@ (8001170 <MX_I2C1_Init+0x50>)
 8001152:	2200      	movs	r2, #0
 8001154:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001156:	4b06      	ldr	r3, [pc, #24]	@ (8001170 <MX_I2C1_Init+0x50>)
 8001158:	2200      	movs	r2, #0
 800115a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800115c:	4804      	ldr	r0, [pc, #16]	@ (8001170 <MX_I2C1_Init+0x50>)
 800115e:	f001 f941 	bl	80023e4 <HAL_I2C_Init>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001168:	f000 f9b0 	bl	80014cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800116c:	bf00      	nop
 800116e:	bd80      	pop	{r7, pc}
 8001170:	200002e0 	.word	0x200002e0
 8001174:	40005400 	.word	0x40005400
 8001178:	000186a0 	.word	0x000186a0

0800117c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001180:	4b13      	ldr	r3, [pc, #76]	@ (80011d0 <MX_I2S3_Init+0x54>)
 8001182:	4a14      	ldr	r2, [pc, #80]	@ (80011d4 <MX_I2S3_Init+0x58>)
 8001184:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001186:	4b12      	ldr	r3, [pc, #72]	@ (80011d0 <MX_I2S3_Init+0x54>)
 8001188:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800118c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800118e:	4b10      	ldr	r3, [pc, #64]	@ (80011d0 <MX_I2S3_Init+0x54>)
 8001190:	2200      	movs	r2, #0
 8001192:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001194:	4b0e      	ldr	r3, [pc, #56]	@ (80011d0 <MX_I2S3_Init+0x54>)
 8001196:	2200      	movs	r2, #0
 8001198:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800119a:	4b0d      	ldr	r3, [pc, #52]	@ (80011d0 <MX_I2S3_Init+0x54>)
 800119c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011a0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80011a2:	4b0b      	ldr	r3, [pc, #44]	@ (80011d0 <MX_I2S3_Init+0x54>)
 80011a4:	4a0c      	ldr	r2, [pc, #48]	@ (80011d8 <MX_I2S3_Init+0x5c>)
 80011a6:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80011a8:	4b09      	ldr	r3, [pc, #36]	@ (80011d0 <MX_I2S3_Init+0x54>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80011ae:	4b08      	ldr	r3, [pc, #32]	@ (80011d0 <MX_I2S3_Init+0x54>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80011b4:	4b06      	ldr	r3, [pc, #24]	@ (80011d0 <MX_I2S3_Init+0x54>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80011ba:	4805      	ldr	r0, [pc, #20]	@ (80011d0 <MX_I2S3_Init+0x54>)
 80011bc:	f002 f926 	bl	800340c <HAL_I2S_Init>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80011c6:	f000 f981 	bl	80014cc <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80011ca:	bf00      	nop
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	20000334 	.word	0x20000334
 80011d4:	40003c00 	.word	0x40003c00
 80011d8:	00017700 	.word	0x00017700

080011dc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011e0:	4b17      	ldr	r3, [pc, #92]	@ (8001240 <MX_SPI1_Init+0x64>)
 80011e2:	4a18      	ldr	r2, [pc, #96]	@ (8001244 <MX_SPI1_Init+0x68>)
 80011e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011e6:	4b16      	ldr	r3, [pc, #88]	@ (8001240 <MX_SPI1_Init+0x64>)
 80011e8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80011ec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011ee:	4b14      	ldr	r3, [pc, #80]	@ (8001240 <MX_SPI1_Init+0x64>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011f4:	4b12      	ldr	r3, [pc, #72]	@ (8001240 <MX_SPI1_Init+0x64>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011fa:	4b11      	ldr	r3, [pc, #68]	@ (8001240 <MX_SPI1_Init+0x64>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001200:	4b0f      	ldr	r3, [pc, #60]	@ (8001240 <MX_SPI1_Init+0x64>)
 8001202:	2200      	movs	r2, #0
 8001204:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001206:	4b0e      	ldr	r3, [pc, #56]	@ (8001240 <MX_SPI1_Init+0x64>)
 8001208:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800120c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800120e:	4b0c      	ldr	r3, [pc, #48]	@ (8001240 <MX_SPI1_Init+0x64>)
 8001210:	2200      	movs	r2, #0
 8001212:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001214:	4b0a      	ldr	r3, [pc, #40]	@ (8001240 <MX_SPI1_Init+0x64>)
 8001216:	2200      	movs	r2, #0
 8001218:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800121a:	4b09      	ldr	r3, [pc, #36]	@ (8001240 <MX_SPI1_Init+0x64>)
 800121c:	2200      	movs	r2, #0
 800121e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001220:	4b07      	ldr	r3, [pc, #28]	@ (8001240 <MX_SPI1_Init+0x64>)
 8001222:	2200      	movs	r2, #0
 8001224:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001226:	4b06      	ldr	r3, [pc, #24]	@ (8001240 <MX_SPI1_Init+0x64>)
 8001228:	220a      	movs	r2, #10
 800122a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800122c:	4804      	ldr	r0, [pc, #16]	@ (8001240 <MX_SPI1_Init+0x64>)
 800122e:	f004 fdb9 	bl	8005da4 <HAL_SPI_Init>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001238:	f000 f948 	bl	80014cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800123c:	bf00      	nop
 800123e:	bd80      	pop	{r7, pc}
 8001240:	2000037c 	.word	0x2000037c
 8001244:	40013000 	.word	0x40013000

08001248 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800124c:	4b11      	ldr	r3, [pc, #68]	@ (8001294 <MX_USART2_UART_Init+0x4c>)
 800124e:	4a12      	ldr	r2, [pc, #72]	@ (8001298 <MX_USART2_UART_Init+0x50>)
 8001250:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001252:	4b10      	ldr	r3, [pc, #64]	@ (8001294 <MX_USART2_UART_Init+0x4c>)
 8001254:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001258:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800125a:	4b0e      	ldr	r3, [pc, #56]	@ (8001294 <MX_USART2_UART_Init+0x4c>)
 800125c:	2200      	movs	r2, #0
 800125e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001260:	4b0c      	ldr	r3, [pc, #48]	@ (8001294 <MX_USART2_UART_Init+0x4c>)
 8001262:	2200      	movs	r2, #0
 8001264:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001266:	4b0b      	ldr	r3, [pc, #44]	@ (8001294 <MX_USART2_UART_Init+0x4c>)
 8001268:	2200      	movs	r2, #0
 800126a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800126c:	4b09      	ldr	r3, [pc, #36]	@ (8001294 <MX_USART2_UART_Init+0x4c>)
 800126e:	220c      	movs	r2, #12
 8001270:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001272:	4b08      	ldr	r3, [pc, #32]	@ (8001294 <MX_USART2_UART_Init+0x4c>)
 8001274:	2200      	movs	r2, #0
 8001276:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001278:	4b06      	ldr	r3, [pc, #24]	@ (8001294 <MX_USART2_UART_Init+0x4c>)
 800127a:	2200      	movs	r2, #0
 800127c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800127e:	4805      	ldr	r0, [pc, #20]	@ (8001294 <MX_USART2_UART_Init+0x4c>)
 8001280:	f004 fe19 	bl	8005eb6 <HAL_UART_Init>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800128a:	f000 f91f 	bl	80014cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800128e:	bf00      	nop
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	200003d4 	.word	0x200003d4
 8001298:	40004400 	.word	0x40004400

0800129c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b08c      	sub	sp, #48	@ 0x30
 80012a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a2:	f107 031c 	add.w	r3, r7, #28
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]
 80012aa:	605a      	str	r2, [r3, #4]
 80012ac:	609a      	str	r2, [r3, #8]
 80012ae:	60da      	str	r2, [r3, #12]
 80012b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	61bb      	str	r3, [r7, #24]
 80012b6:	4b76      	ldr	r3, [pc, #472]	@ (8001490 <MX_GPIO_Init+0x1f4>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ba:	4a75      	ldr	r2, [pc, #468]	@ (8001490 <MX_GPIO_Init+0x1f4>)
 80012bc:	f043 0310 	orr.w	r3, r3, #16
 80012c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012c2:	4b73      	ldr	r3, [pc, #460]	@ (8001490 <MX_GPIO_Init+0x1f4>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c6:	f003 0310 	and.w	r3, r3, #16
 80012ca:	61bb      	str	r3, [r7, #24]
 80012cc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	617b      	str	r3, [r7, #20]
 80012d2:	4b6f      	ldr	r3, [pc, #444]	@ (8001490 <MX_GPIO_Init+0x1f4>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d6:	4a6e      	ldr	r2, [pc, #440]	@ (8001490 <MX_GPIO_Init+0x1f4>)
 80012d8:	f043 0304 	orr.w	r3, r3, #4
 80012dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80012de:	4b6c      	ldr	r3, [pc, #432]	@ (8001490 <MX_GPIO_Init+0x1f4>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e2:	f003 0304 	and.w	r3, r3, #4
 80012e6:	617b      	str	r3, [r7, #20]
 80012e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012ea:	2300      	movs	r3, #0
 80012ec:	613b      	str	r3, [r7, #16]
 80012ee:	4b68      	ldr	r3, [pc, #416]	@ (8001490 <MX_GPIO_Init+0x1f4>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f2:	4a67      	ldr	r2, [pc, #412]	@ (8001490 <MX_GPIO_Init+0x1f4>)
 80012f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012fa:	4b65      	ldr	r3, [pc, #404]	@ (8001490 <MX_GPIO_Init+0x1f4>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001302:	613b      	str	r3, [r7, #16]
 8001304:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	60fb      	str	r3, [r7, #12]
 800130a:	4b61      	ldr	r3, [pc, #388]	@ (8001490 <MX_GPIO_Init+0x1f4>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130e:	4a60      	ldr	r2, [pc, #384]	@ (8001490 <MX_GPIO_Init+0x1f4>)
 8001310:	f043 0301 	orr.w	r3, r3, #1
 8001314:	6313      	str	r3, [r2, #48]	@ 0x30
 8001316:	4b5e      	ldr	r3, [pc, #376]	@ (8001490 <MX_GPIO_Init+0x1f4>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131a:	f003 0301 	and.w	r3, r3, #1
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	60bb      	str	r3, [r7, #8]
 8001326:	4b5a      	ldr	r3, [pc, #360]	@ (8001490 <MX_GPIO_Init+0x1f4>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800132a:	4a59      	ldr	r2, [pc, #356]	@ (8001490 <MX_GPIO_Init+0x1f4>)
 800132c:	f043 0302 	orr.w	r3, r3, #2
 8001330:	6313      	str	r3, [r2, #48]	@ 0x30
 8001332:	4b57      	ldr	r3, [pc, #348]	@ (8001490 <MX_GPIO_Init+0x1f4>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001336:	f003 0302 	and.w	r3, r3, #2
 800133a:	60bb      	str	r3, [r7, #8]
 800133c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	607b      	str	r3, [r7, #4]
 8001342:	4b53      	ldr	r3, [pc, #332]	@ (8001490 <MX_GPIO_Init+0x1f4>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001346:	4a52      	ldr	r2, [pc, #328]	@ (8001490 <MX_GPIO_Init+0x1f4>)
 8001348:	f043 0308 	orr.w	r3, r3, #8
 800134c:	6313      	str	r3, [r2, #48]	@ 0x30
 800134e:	4b50      	ldr	r3, [pc, #320]	@ (8001490 <MX_GPIO_Init+0x1f4>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001352:	f003 0308 	and.w	r3, r3, #8
 8001356:	607b      	str	r3, [r7, #4]
 8001358:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800135a:	2200      	movs	r2, #0
 800135c:	2108      	movs	r1, #8
 800135e:	484d      	ldr	r0, [pc, #308]	@ (8001494 <MX_GPIO_Init+0x1f8>)
 8001360:	f000 fff4 	bl	800234c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001364:	2201      	movs	r2, #1
 8001366:	2101      	movs	r1, #1
 8001368:	484b      	ldr	r0, [pc, #300]	@ (8001498 <MX_GPIO_Init+0x1fc>)
 800136a:	f000 ffef 	bl	800234c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800136e:	2200      	movs	r2, #0
 8001370:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8001374:	4849      	ldr	r0, [pc, #292]	@ (800149c <MX_GPIO_Init+0x200>)
 8001376:	f000 ffe9 	bl	800234c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800137a:	2308      	movs	r3, #8
 800137c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800137e:	2301      	movs	r3, #1
 8001380:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001382:	2300      	movs	r3, #0
 8001384:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001386:	2300      	movs	r3, #0
 8001388:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800138a:	f107 031c 	add.w	r3, r7, #28
 800138e:	4619      	mov	r1, r3
 8001390:	4840      	ldr	r0, [pc, #256]	@ (8001494 <MX_GPIO_Init+0x1f8>)
 8001392:	f000 fe3f 	bl	8002014 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001396:	2301      	movs	r3, #1
 8001398:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800139a:	2301      	movs	r3, #1
 800139c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139e:	2300      	movs	r3, #0
 80013a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a2:	2300      	movs	r3, #0
 80013a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80013a6:	f107 031c 	add.w	r3, r7, #28
 80013aa:	4619      	mov	r1, r3
 80013ac:	483a      	ldr	r0, [pc, #232]	@ (8001498 <MX_GPIO_Init+0x1fc>)
 80013ae:	f000 fe31 	bl	8002014 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80013b2:	2308      	movs	r3, #8
 80013b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b6:	2302      	movs	r3, #2
 80013b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ba:	2300      	movs	r3, #0
 80013bc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013be:	2300      	movs	r3, #0
 80013c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80013c2:	2305      	movs	r3, #5
 80013c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80013c6:	f107 031c 	add.w	r3, r7, #28
 80013ca:	4619      	mov	r1, r3
 80013cc:	4832      	ldr	r0, [pc, #200]	@ (8001498 <MX_GPIO_Init+0x1fc>)
 80013ce:	f000 fe21 	bl	8002014 <HAL_GPIO_Init>

  /*Configure GPIO pin : Pulse_Oximeter_Int_Pin */
  GPIO_InitStruct.Pin = Pulse_Oximeter_Int_Pin;
 80013d2:	2301      	movs	r3, #1
 80013d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013d6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80013da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013dc:	2301      	movs	r3, #1
 80013de:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(Pulse_Oximeter_Int_GPIO_Port, &GPIO_InitStruct);
 80013e0:	f107 031c 	add.w	r3, r7, #28
 80013e4:	4619      	mov	r1, r3
 80013e6:	482e      	ldr	r0, [pc, #184]	@ (80014a0 <MX_GPIO_Init+0x204>)
 80013e8:	f000 fe14 	bl	8002014 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80013ec:	2304      	movs	r3, #4
 80013ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013f0:	2300      	movs	r3, #0
 80013f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f4:	2300      	movs	r3, #0
 80013f6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80013f8:	f107 031c 	add.w	r3, r7, #28
 80013fc:	4619      	mov	r1, r3
 80013fe:	4828      	ldr	r0, [pc, #160]	@ (80014a0 <MX_GPIO_Init+0x204>)
 8001400:	f000 fe08 	bl	8002014 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001404:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001408:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140a:	2302      	movs	r3, #2
 800140c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140e:	2300      	movs	r3, #0
 8001410:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001412:	2300      	movs	r3, #0
 8001414:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001416:	2305      	movs	r3, #5
 8001418:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800141a:	f107 031c 	add.w	r3, r7, #28
 800141e:	4619      	mov	r1, r3
 8001420:	481f      	ldr	r0, [pc, #124]	@ (80014a0 <MX_GPIO_Init+0x204>)
 8001422:	f000 fdf7 	bl	8002014 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001426:	f24f 0310 	movw	r3, #61456	@ 0xf010
 800142a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800142c:	2301      	movs	r3, #1
 800142e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001430:	2300      	movs	r3, #0
 8001432:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001434:	2300      	movs	r3, #0
 8001436:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001438:	f107 031c 	add.w	r3, r7, #28
 800143c:	4619      	mov	r1, r3
 800143e:	4817      	ldr	r0, [pc, #92]	@ (800149c <MX_GPIO_Init+0x200>)
 8001440:	f000 fde8 	bl	8002014 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001444:	2320      	movs	r3, #32
 8001446:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001448:	2300      	movs	r3, #0
 800144a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144c:	2300      	movs	r3, #0
 800144e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001450:	f107 031c 	add.w	r3, r7, #28
 8001454:	4619      	mov	r1, r3
 8001456:	4811      	ldr	r0, [pc, #68]	@ (800149c <MX_GPIO_Init+0x200>)
 8001458:	f000 fddc 	bl	8002014 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800145c:	2302      	movs	r3, #2
 800145e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001460:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001464:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001466:	2300      	movs	r3, #0
 8001468:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800146a:	f107 031c 	add.w	r3, r7, #28
 800146e:	4619      	mov	r1, r3
 8001470:	4808      	ldr	r0, [pc, #32]	@ (8001494 <MX_GPIO_Init+0x1f8>)
 8001472:	f000 fdcf 	bl	8002014 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001476:	2200      	movs	r2, #0
 8001478:	2100      	movs	r1, #0
 800147a:	2006      	movs	r0, #6
 800147c:	f000 fd93 	bl	8001fa6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001480:	2006      	movs	r0, #6
 8001482:	f000 fdac 	bl	8001fde <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001486:	bf00      	nop
 8001488:	3730      	adds	r7, #48	@ 0x30
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	40023800 	.word	0x40023800
 8001494:	40021000 	.word	0x40021000
 8001498:	40020800 	.word	0x40020800
 800149c:	40020c00 	.word	0x40020c00
 80014a0:	40020400 	.word	0x40020400

080014a4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4603      	mov	r3, r0
 80014ac:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == Pulse_Oximeter_Int_Pin)
 80014ae:	88fb      	ldrh	r3, [r7, #6]
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d102      	bne.n	80014ba <HAL_GPIO_EXTI_Callback+0x16>
	{
		pulseOximiterIntFlag = 1;
 80014b4:	4b04      	ldr	r3, [pc, #16]	@ (80014c8 <HAL_GPIO_EXTI_Callback+0x24>)
 80014b6:	2201      	movs	r2, #1
 80014b8:	701a      	strb	r2, [r3, #0]

		//spO2_registerDump();
	}
}
 80014ba:	bf00      	nop
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	2000045c 	.word	0x2000045c

080014cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014d0:	b672      	cpsid	i
}
 80014d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80014d4:	bf00      	nop
 80014d6:	e7fd      	b.n	80014d4 <Error_Handler+0x8>

080014d8 <OLED_Write>:
/**
 * @brief Send a command or data to the OLED
 * @param mode OLED_CMD indicates command mode, OLED_DATA indicates data mode
 * @param data The byte to be sent
 */
void OLED_Write(uint8_t mode, uint8_t data) {
 80014d8:	b580      	push	{r7, lr}
 80014da:	b086      	sub	sp, #24
 80014dc:	af02      	add	r7, sp, #8
 80014de:	4603      	mov	r3, r0
 80014e0:	460a      	mov	r2, r1
 80014e2:	71fb      	strb	r3, [r7, #7]
 80014e4:	4613      	mov	r3, r2
 80014e6:	71bb      	strb	r3, [r7, #6]
    uint8_t buffer[2];
    buffer[0] = mode;  // Control byte
 80014e8:	79fb      	ldrb	r3, [r7, #7]
 80014ea:	733b      	strb	r3, [r7, #12]
    buffer[1] = data;  // Data
 80014ec:	79bb      	ldrb	r3, [r7, #6]
 80014ee:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS, buffer, 2, HAL_MAX_DELAY);
 80014f0:	f107 020c 	add.w	r2, r7, #12
 80014f4:	f04f 33ff 	mov.w	r3, #4294967295
 80014f8:	9300      	str	r3, [sp, #0]
 80014fa:	2302      	movs	r3, #2
 80014fc:	2178      	movs	r1, #120	@ 0x78
 80014fe:	4803      	ldr	r0, [pc, #12]	@ (800150c <OLED_Write+0x34>)
 8001500:	f001 f8b4 	bl	800266c <HAL_I2C_Master_Transmit>
}
 8001504:	bf00      	nop
 8001506:	3710      	adds	r7, #16
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	200002e0 	.word	0x200002e0

08001510 <OLED_Init>:

/**
 * @brief Initialize the OLED
 */
void OLED_Init(void) {
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
    HAL_Delay(100); // Wait for the screen to power up and stabilize
 8001514:	2064      	movs	r0, #100	@ 0x64
 8001516:	f000 fc47 	bl	8001da8 <HAL_Delay>

    // Initialization commands (based on the SSD1306 datasheet)
    OLED_Write(OLED_CMD, 0xAE); // Turn off display
 800151a:	21ae      	movs	r1, #174	@ 0xae
 800151c:	2000      	movs	r0, #0
 800151e:	f7ff ffdb 	bl	80014d8 <OLED_Write>
    OLED_Write(OLED_CMD, 0x20); // Set memory addressing mode
 8001522:	2120      	movs	r1, #32
 8001524:	2000      	movs	r0, #0
 8001526:	f7ff ffd7 	bl	80014d8 <OLED_Write>
    OLED_Write(OLED_CMD, 0x10); // Use horizontal addressing mode
 800152a:	2110      	movs	r1, #16
 800152c:	2000      	movs	r0, #0
 800152e:	f7ff ffd3 	bl	80014d8 <OLED_Write>
    OLED_Write(OLED_CMD, 0xB0); // Set page start address
 8001532:	21b0      	movs	r1, #176	@ 0xb0
 8001534:	2000      	movs	r0, #0
 8001536:	f7ff ffcf 	bl	80014d8 <OLED_Write>
    OLED_Write(OLED_CMD, 0xC8); // Set COM output scan direction (from top to bottom)
 800153a:	21c8      	movs	r1, #200	@ 0xc8
 800153c:	2000      	movs	r0, #0
 800153e:	f7ff ffcb 	bl	80014d8 <OLED_Write>
    OLED_Write(OLED_CMD, 0x00); // Set lower column address
 8001542:	2100      	movs	r1, #0
 8001544:	2000      	movs	r0, #0
 8001546:	f7ff ffc7 	bl	80014d8 <OLED_Write>
    OLED_Write(OLED_CMD, 0x10); // Set higher column address
 800154a:	2110      	movs	r1, #16
 800154c:	2000      	movs	r0, #0
 800154e:	f7ff ffc3 	bl	80014d8 <OLED_Write>
    OLED_Write(OLED_CMD, 0x40); // Set display start line
 8001552:	2140      	movs	r1, #64	@ 0x40
 8001554:	2000      	movs	r0, #0
 8001556:	f7ff ffbf 	bl	80014d8 <OLED_Write>
    OLED_Write(OLED_CMD, 0x81); // Set contrast control
 800155a:	2181      	movs	r1, #129	@ 0x81
 800155c:	2000      	movs	r0, #0
 800155e:	f7ff ffbb 	bl	80014d8 <OLED_Write>
    OLED_Write(OLED_CMD, 0xFF); // Maximum contrast
 8001562:	21ff      	movs	r1, #255	@ 0xff
 8001564:	2000      	movs	r0, #0
 8001566:	f7ff ffb7 	bl	80014d8 <OLED_Write>
    OLED_Write(OLED_CMD, 0xA1); // Set segment re-map (left to right)
 800156a:	21a1      	movs	r1, #161	@ 0xa1
 800156c:	2000      	movs	r0, #0
 800156e:	f7ff ffb3 	bl	80014d8 <OLED_Write>
    OLED_Write(OLED_CMD, 0xA6); // Set normal display mode
 8001572:	21a6      	movs	r1, #166	@ 0xa6
 8001574:	2000      	movs	r0, #0
 8001576:	f7ff ffaf 	bl	80014d8 <OLED_Write>
    OLED_Write(OLED_CMD, 0xA8); // Set multiplex ratio
 800157a:	21a8      	movs	r1, #168	@ 0xa8
 800157c:	2000      	movs	r0, #0
 800157e:	f7ff ffab 	bl	80014d8 <OLED_Write>
    OLED_Write(OLED_CMD, 0x3F); // 1/64 duty cycle
 8001582:	213f      	movs	r1, #63	@ 0x3f
 8001584:	2000      	movs	r0, #0
 8001586:	f7ff ffa7 	bl	80014d8 <OLED_Write>
    OLED_Write(OLED_CMD, 0xD3); // Set display offset
 800158a:	21d3      	movs	r1, #211	@ 0xd3
 800158c:	2000      	movs	r0, #0
 800158e:	f7ff ffa3 	bl	80014d8 <OLED_Write>
    OLED_Write(OLED_CMD, 0x00); // No offset
 8001592:	2100      	movs	r1, #0
 8001594:	2000      	movs	r0, #0
 8001596:	f7ff ff9f 	bl	80014d8 <OLED_Write>
    OLED_Write(OLED_CMD, 0xD5); // Set display clock divide ratio
 800159a:	21d5      	movs	r1, #213	@ 0xd5
 800159c:	2000      	movs	r0, #0
 800159e:	f7ff ff9b 	bl	80014d8 <OLED_Write>
    OLED_Write(OLED_CMD, 0xF0); // Set to default value
 80015a2:	21f0      	movs	r1, #240	@ 0xf0
 80015a4:	2000      	movs	r0, #0
 80015a6:	f7ff ff97 	bl	80014d8 <OLED_Write>
    OLED_Write(OLED_CMD, 0xD9); // Set pre-charge period
 80015aa:	21d9      	movs	r1, #217	@ 0xd9
 80015ac:	2000      	movs	r0, #0
 80015ae:	f7ff ff93 	bl	80014d8 <OLED_Write>
    OLED_Write(OLED_CMD, 0x22); //
 80015b2:	2122      	movs	r1, #34	@ 0x22
 80015b4:	2000      	movs	r0, #0
 80015b6:	f7ff ff8f 	bl	80014d8 <OLED_Write>
    OLED_Write(OLED_CMD, 0xDA); // Set COM hardware configuration
 80015ba:	21da      	movs	r1, #218	@ 0xda
 80015bc:	2000      	movs	r0, #0
 80015be:	f7ff ff8b 	bl	80014d8 <OLED_Write>
    OLED_Write(OLED_CMD, 0x12); //
 80015c2:	2112      	movs	r1, #18
 80015c4:	2000      	movs	r0, #0
 80015c6:	f7ff ff87 	bl	80014d8 <OLED_Write>
    OLED_Write(OLED_CMD, 0xDB); // Set VCOMH deselect level
 80015ca:	21db      	movs	r1, #219	@ 0xdb
 80015cc:	2000      	movs	r0, #0
 80015ce:	f7ff ff83 	bl	80014d8 <OLED_Write>
    OLED_Write(OLED_CMD, 0x20); // ~0.77×VCC
 80015d2:	2120      	movs	r1, #32
 80015d4:	2000      	movs	r0, #0
 80015d6:	f7ff ff7f 	bl	80014d8 <OLED_Write>
    OLED_Write(OLED_CMD, 0x8D); // Set charge pump
 80015da:	218d      	movs	r1, #141	@ 0x8d
 80015dc:	2000      	movs	r0, #0
 80015de:	f7ff ff7b 	bl	80014d8 <OLED_Write>
    OLED_Write(OLED_CMD, 0x14); // Enable charge pump
 80015e2:	2114      	movs	r1, #20
 80015e4:	2000      	movs	r0, #0
 80015e6:	f7ff ff77 	bl	80014d8 <OLED_Write>
    OLED_Write(OLED_CMD, 0xAF); // Turn on display
 80015ea:	21af      	movs	r1, #175	@ 0xaf
 80015ec:	2000      	movs	r0, #0
 80015ee:	f7ff ff73 	bl	80014d8 <OLED_Write>
}
 80015f2:	bf00      	nop
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <OLED_Clear>:

/**
 * @brief Clear the OLED display
 */
void OLED_Clear(void) {
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b082      	sub	sp, #8
 80015fa:	af00      	add	r7, sp, #0
    for (uint8_t page = 0; page < 8; page++) {
 80015fc:	2300      	movs	r3, #0
 80015fe:	71fb      	strb	r3, [r7, #7]
 8001600:	e01f      	b.n	8001642 <OLED_Clear+0x4c>
        OLED_Write(OLED_CMD, 0xB0 + page); // Set page address
 8001602:	79fb      	ldrb	r3, [r7, #7]
 8001604:	3b50      	subs	r3, #80	@ 0x50
 8001606:	b2db      	uxtb	r3, r3
 8001608:	4619      	mov	r1, r3
 800160a:	2000      	movs	r0, #0
 800160c:	f7ff ff64 	bl	80014d8 <OLED_Write>
        OLED_Write(OLED_CMD, 0x00);        // Set lower column address
 8001610:	2100      	movs	r1, #0
 8001612:	2000      	movs	r0, #0
 8001614:	f7ff ff60 	bl	80014d8 <OLED_Write>
        OLED_Write(OLED_CMD, 0x10);        // Set higher column address
 8001618:	2110      	movs	r1, #16
 800161a:	2000      	movs	r0, #0
 800161c:	f7ff ff5c 	bl	80014d8 <OLED_Write>
        for (uint8_t col = 0; col < 128; col++) {
 8001620:	2300      	movs	r3, #0
 8001622:	71bb      	strb	r3, [r7, #6]
 8001624:	e006      	b.n	8001634 <OLED_Clear+0x3e>
            OLED_Write(OLED_DATA, 0x00); // Clear display
 8001626:	2100      	movs	r1, #0
 8001628:	2040      	movs	r0, #64	@ 0x40
 800162a:	f7ff ff55 	bl	80014d8 <OLED_Write>
        for (uint8_t col = 0; col < 128; col++) {
 800162e:	79bb      	ldrb	r3, [r7, #6]
 8001630:	3301      	adds	r3, #1
 8001632:	71bb      	strb	r3, [r7, #6]
 8001634:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001638:	2b00      	cmp	r3, #0
 800163a:	daf4      	bge.n	8001626 <OLED_Clear+0x30>
    for (uint8_t page = 0; page < 8; page++) {
 800163c:	79fb      	ldrb	r3, [r7, #7]
 800163e:	3301      	adds	r3, #1
 8001640:	71fb      	strb	r3, [r7, #7]
 8001642:	79fb      	ldrb	r3, [r7, #7]
 8001644:	2b07      	cmp	r3, #7
 8001646:	d9dc      	bls.n	8001602 <OLED_Clear+0xc>
        }
    }
}
 8001648:	bf00      	nop
 800164a:	bf00      	nop
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
	...

08001654 <OLED_ShowChar>:
 * @brief Display a character at a specified position
 * @param x X-coordinate (column address, 0~127)
 * @param y Page address (row number, 0~7)
 * @param ch Character to display
 */
void OLED_ShowChar(uint8_t x, uint8_t y, char ch) {
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	4603      	mov	r3, r0
 800165c:	71fb      	strb	r3, [r7, #7]
 800165e:	460b      	mov	r3, r1
 8001660:	71bb      	strb	r3, [r7, #6]
 8001662:	4613      	mov	r3, r2
 8001664:	717b      	strb	r3, [r7, #5]
    if (ch < 32 || ch > 127) return; // Character out of range
 8001666:	797b      	ldrb	r3, [r7, #5]
 8001668:	2b1f      	cmp	r3, #31
 800166a:	d933      	bls.n	80016d4 <OLED_ShowChar+0x80>
 800166c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001670:	2b00      	cmp	r3, #0
 8001672:	db2f      	blt.n	80016d4 <OLED_ShowChar+0x80>

    OLED_Write(OLED_CMD, 0xB0 + y);         // Set page address
 8001674:	79bb      	ldrb	r3, [r7, #6]
 8001676:	3b50      	subs	r3, #80	@ 0x50
 8001678:	b2db      	uxtb	r3, r3
 800167a:	4619      	mov	r1, r3
 800167c:	2000      	movs	r0, #0
 800167e:	f7ff ff2b 	bl	80014d8 <OLED_Write>
    OLED_Write(OLED_CMD, 0x00 + (x & 0x0F)); // Set lower column address
 8001682:	79fb      	ldrb	r3, [r7, #7]
 8001684:	f003 030f 	and.w	r3, r3, #15
 8001688:	b2db      	uxtb	r3, r3
 800168a:	4619      	mov	r1, r3
 800168c:	2000      	movs	r0, #0
 800168e:	f7ff ff23 	bl	80014d8 <OLED_Write>
    OLED_Write(OLED_CMD, 0x10 + ((x >> 4) & 0x0F)); // Set higher column address
 8001692:	79fb      	ldrb	r3, [r7, #7]
 8001694:	091b      	lsrs	r3, r3, #4
 8001696:	b2db      	uxtb	r3, r3
 8001698:	3310      	adds	r3, #16
 800169a:	b2db      	uxtb	r3, r3
 800169c:	4619      	mov	r1, r3
 800169e:	2000      	movs	r0, #0
 80016a0:	f7ff ff1a 	bl	80014d8 <OLED_Write>

    const uint8_t *font_data = Font8x8[ch - 32]; // Get character dot matrix data
 80016a4:	797b      	ldrb	r3, [r7, #5]
 80016a6:	3b20      	subs	r3, #32
 80016a8:	00db      	lsls	r3, r3, #3
 80016aa:	4a0c      	ldr	r2, [pc, #48]	@ (80016dc <OLED_ShowChar+0x88>)
 80016ac:	4413      	add	r3, r2
 80016ae:	60bb      	str	r3, [r7, #8]

    for (int i = 0; i < 8; i++) {
 80016b0:	2300      	movs	r3, #0
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	e00a      	b.n	80016cc <OLED_ShowChar+0x78>
        OLED_Write(OLED_DATA, font_data[i]); // Write character dot matrix data
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	68ba      	ldr	r2, [r7, #8]
 80016ba:	4413      	add	r3, r2
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	4619      	mov	r1, r3
 80016c0:	2040      	movs	r0, #64	@ 0x40
 80016c2:	f7ff ff09 	bl	80014d8 <OLED_Write>
    for (int i = 0; i < 8; i++) {
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	3301      	adds	r3, #1
 80016ca:	60fb      	str	r3, [r7, #12]
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	2b07      	cmp	r3, #7
 80016d0:	ddf1      	ble.n	80016b6 <OLED_ShowChar+0x62>
 80016d2:	e000      	b.n	80016d6 <OLED_ShowChar+0x82>
    if (ch < 32 || ch > 127) return; // Character out of range
 80016d4:	bf00      	nop
    }
}
 80016d6:	3710      	adds	r7, #16
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	0800d208 	.word	0x0800d208

080016e0 <OLED_ShowString>:
 * @brief Display a string at a specified position
 * @param x Starting X-coordinate (column address)
 * @param y Starting page address (row number)
 * @param str String to display
 */
void OLED_ShowString(uint8_t x, uint8_t y, char* str) {
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	4603      	mov	r3, r0
 80016e8:	603a      	str	r2, [r7, #0]
 80016ea:	71fb      	strb	r3, [r7, #7]
 80016ec:	460b      	mov	r3, r1
 80016ee:	71bb      	strb	r3, [r7, #6]
    while (*str) {
 80016f0:	e014      	b.n	800171c <OLED_ShowString+0x3c>
        OLED_ShowChar(x, y, *str); // Display individual character
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	781a      	ldrb	r2, [r3, #0]
 80016f6:	79b9      	ldrb	r1, [r7, #6]
 80016f8:	79fb      	ldrb	r3, [r7, #7]
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7ff ffaa 	bl	8001654 <OLED_ShowChar>
        x += 8;                    // Each character occupies 8 columns
 8001700:	79fb      	ldrb	r3, [r7, #7]
 8001702:	3308      	adds	r3, #8
 8001704:	71fb      	strb	r3, [r7, #7]
        if (x > 120) {             // Wrap to the next line if exceeding screen width
 8001706:	79fb      	ldrb	r3, [r7, #7]
 8001708:	2b78      	cmp	r3, #120	@ 0x78
 800170a:	d904      	bls.n	8001716 <OLED_ShowString+0x36>
            x = 0;
 800170c:	2300      	movs	r3, #0
 800170e:	71fb      	strb	r3, [r7, #7]
            y++;
 8001710:	79bb      	ldrb	r3, [r7, #6]
 8001712:	3301      	adds	r3, #1
 8001714:	71bb      	strb	r3, [r7, #6]
        }
        str++;
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	3301      	adds	r3, #1
 800171a:	603b      	str	r3, [r7, #0]
    while (*str) {
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d1e6      	bne.n	80016f2 <OLED_ShowString+0x12>
    }
}
 8001724:	bf00      	nop
 8001726:	bf00      	nop
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
	...

08001730 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001736:	2300      	movs	r3, #0
 8001738:	607b      	str	r3, [r7, #4]
 800173a:	4b10      	ldr	r3, [pc, #64]	@ (800177c <HAL_MspInit+0x4c>)
 800173c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800173e:	4a0f      	ldr	r2, [pc, #60]	@ (800177c <HAL_MspInit+0x4c>)
 8001740:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001744:	6453      	str	r3, [r2, #68]	@ 0x44
 8001746:	4b0d      	ldr	r3, [pc, #52]	@ (800177c <HAL_MspInit+0x4c>)
 8001748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800174a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800174e:	607b      	str	r3, [r7, #4]
 8001750:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	603b      	str	r3, [r7, #0]
 8001756:	4b09      	ldr	r3, [pc, #36]	@ (800177c <HAL_MspInit+0x4c>)
 8001758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800175a:	4a08      	ldr	r2, [pc, #32]	@ (800177c <HAL_MspInit+0x4c>)
 800175c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001760:	6413      	str	r3, [r2, #64]	@ 0x40
 8001762:	4b06      	ldr	r3, [pc, #24]	@ (800177c <HAL_MspInit+0x4c>)
 8001764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001766:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800176a:	603b      	str	r3, [r7, #0]
 800176c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800176e:	2007      	movs	r0, #7
 8001770:	f000 fc0e 	bl	8001f90 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001774:	bf00      	nop
 8001776:	3708      	adds	r7, #8
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	40023800 	.word	0x40023800

08001780 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b08a      	sub	sp, #40	@ 0x28
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001788:	f107 0314 	add.w	r3, r7, #20
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	605a      	str	r2, [r3, #4]
 8001792:	609a      	str	r2, [r3, #8]
 8001794:	60da      	str	r2, [r3, #12]
 8001796:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a19      	ldr	r2, [pc, #100]	@ (8001804 <HAL_I2C_MspInit+0x84>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d12c      	bne.n	80017fc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017a2:	2300      	movs	r3, #0
 80017a4:	613b      	str	r3, [r7, #16]
 80017a6:	4b18      	ldr	r3, [pc, #96]	@ (8001808 <HAL_I2C_MspInit+0x88>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017aa:	4a17      	ldr	r2, [pc, #92]	@ (8001808 <HAL_I2C_MspInit+0x88>)
 80017ac:	f043 0302 	orr.w	r3, r3, #2
 80017b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017b2:	4b15      	ldr	r3, [pc, #84]	@ (8001808 <HAL_I2C_MspInit+0x88>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	613b      	str	r3, [r7, #16]
 80017bc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80017be:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80017c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017c4:	2312      	movs	r3, #18
 80017c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017c8:	2301      	movs	r3, #1
 80017ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017cc:	2300      	movs	r3, #0
 80017ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017d0:	2304      	movs	r3, #4
 80017d2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017d4:	f107 0314 	add.w	r3, r7, #20
 80017d8:	4619      	mov	r1, r3
 80017da:	480c      	ldr	r0, [pc, #48]	@ (800180c <HAL_I2C_MspInit+0x8c>)
 80017dc:	f000 fc1a 	bl	8002014 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017e0:	2300      	movs	r3, #0
 80017e2:	60fb      	str	r3, [r7, #12]
 80017e4:	4b08      	ldr	r3, [pc, #32]	@ (8001808 <HAL_I2C_MspInit+0x88>)
 80017e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017e8:	4a07      	ldr	r2, [pc, #28]	@ (8001808 <HAL_I2C_MspInit+0x88>)
 80017ea:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80017ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80017f0:	4b05      	ldr	r3, [pc, #20]	@ (8001808 <HAL_I2C_MspInit+0x88>)
 80017f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017f8:	60fb      	str	r3, [r7, #12]
 80017fa:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80017fc:	bf00      	nop
 80017fe:	3728      	adds	r7, #40	@ 0x28
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	40005400 	.word	0x40005400
 8001808:	40023800 	.word	0x40023800
 800180c:	40020400 	.word	0x40020400

08001810 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b08e      	sub	sp, #56	@ 0x38
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001818:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	605a      	str	r2, [r3, #4]
 8001822:	609a      	str	r2, [r3, #8]
 8001824:	60da      	str	r2, [r3, #12]
 8001826:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001828:	f107 0314 	add.w	r3, r7, #20
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
 8001830:	605a      	str	r2, [r3, #4]
 8001832:	609a      	str	r2, [r3, #8]
 8001834:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a31      	ldr	r2, [pc, #196]	@ (8001900 <HAL_I2S_MspInit+0xf0>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d15a      	bne.n	80018f6 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001840:	2301      	movs	r3, #1
 8001842:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001844:	23c0      	movs	r3, #192	@ 0xc0
 8001846:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001848:	2302      	movs	r3, #2
 800184a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800184c:	f107 0314 	add.w	r3, r7, #20
 8001850:	4618      	mov	r0, r3
 8001852:	f004 f965 	bl	8005b20 <HAL_RCCEx_PeriphCLKConfig>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 800185c:	f7ff fe36 	bl	80014cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001860:	2300      	movs	r3, #0
 8001862:	613b      	str	r3, [r7, #16]
 8001864:	4b27      	ldr	r3, [pc, #156]	@ (8001904 <HAL_I2S_MspInit+0xf4>)
 8001866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001868:	4a26      	ldr	r2, [pc, #152]	@ (8001904 <HAL_I2S_MspInit+0xf4>)
 800186a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800186e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001870:	4b24      	ldr	r3, [pc, #144]	@ (8001904 <HAL_I2S_MspInit+0xf4>)
 8001872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001874:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001878:	613b      	str	r3, [r7, #16]
 800187a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800187c:	2300      	movs	r3, #0
 800187e:	60fb      	str	r3, [r7, #12]
 8001880:	4b20      	ldr	r3, [pc, #128]	@ (8001904 <HAL_I2S_MspInit+0xf4>)
 8001882:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001884:	4a1f      	ldr	r2, [pc, #124]	@ (8001904 <HAL_I2S_MspInit+0xf4>)
 8001886:	f043 0301 	orr.w	r3, r3, #1
 800188a:	6313      	str	r3, [r2, #48]	@ 0x30
 800188c:	4b1d      	ldr	r3, [pc, #116]	@ (8001904 <HAL_I2S_MspInit+0xf4>)
 800188e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001890:	f003 0301 	and.w	r3, r3, #1
 8001894:	60fb      	str	r3, [r7, #12]
 8001896:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001898:	2300      	movs	r3, #0
 800189a:	60bb      	str	r3, [r7, #8]
 800189c:	4b19      	ldr	r3, [pc, #100]	@ (8001904 <HAL_I2S_MspInit+0xf4>)
 800189e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a0:	4a18      	ldr	r2, [pc, #96]	@ (8001904 <HAL_I2S_MspInit+0xf4>)
 80018a2:	f043 0304 	orr.w	r3, r3, #4
 80018a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80018a8:	4b16      	ldr	r3, [pc, #88]	@ (8001904 <HAL_I2S_MspInit+0xf4>)
 80018aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ac:	f003 0304 	and.w	r3, r3, #4
 80018b0:	60bb      	str	r3, [r7, #8]
 80018b2:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80018b4:	2310      	movs	r3, #16
 80018b6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b8:	2302      	movs	r3, #2
 80018ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018bc:	2300      	movs	r3, #0
 80018be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c0:	2300      	movs	r3, #0
 80018c2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80018c4:	2306      	movs	r3, #6
 80018c6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80018c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018cc:	4619      	mov	r1, r3
 80018ce:	480e      	ldr	r0, [pc, #56]	@ (8001908 <HAL_I2S_MspInit+0xf8>)
 80018d0:	f000 fba0 	bl	8002014 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80018d4:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 80018d8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018da:	2302      	movs	r3, #2
 80018dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018de:	2300      	movs	r3, #0
 80018e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e2:	2300      	movs	r3, #0
 80018e4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80018e6:	2306      	movs	r3, #6
 80018e8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018ee:	4619      	mov	r1, r3
 80018f0:	4806      	ldr	r0, [pc, #24]	@ (800190c <HAL_I2S_MspInit+0xfc>)
 80018f2:	f000 fb8f 	bl	8002014 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 80018f6:	bf00      	nop
 80018f8:	3738      	adds	r7, #56	@ 0x38
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	40003c00 	.word	0x40003c00
 8001904:	40023800 	.word	0x40023800
 8001908:	40020000 	.word	0x40020000
 800190c:	40020800 	.word	0x40020800

08001910 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b08a      	sub	sp, #40	@ 0x28
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001918:	f107 0314 	add.w	r3, r7, #20
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	605a      	str	r2, [r3, #4]
 8001922:	609a      	str	r2, [r3, #8]
 8001924:	60da      	str	r2, [r3, #12]
 8001926:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a19      	ldr	r2, [pc, #100]	@ (8001994 <HAL_SPI_MspInit+0x84>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d12b      	bne.n	800198a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001932:	2300      	movs	r3, #0
 8001934:	613b      	str	r3, [r7, #16]
 8001936:	4b18      	ldr	r3, [pc, #96]	@ (8001998 <HAL_SPI_MspInit+0x88>)
 8001938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800193a:	4a17      	ldr	r2, [pc, #92]	@ (8001998 <HAL_SPI_MspInit+0x88>)
 800193c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001940:	6453      	str	r3, [r2, #68]	@ 0x44
 8001942:	4b15      	ldr	r3, [pc, #84]	@ (8001998 <HAL_SPI_MspInit+0x88>)
 8001944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001946:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800194a:	613b      	str	r3, [r7, #16]
 800194c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800194e:	2300      	movs	r3, #0
 8001950:	60fb      	str	r3, [r7, #12]
 8001952:	4b11      	ldr	r3, [pc, #68]	@ (8001998 <HAL_SPI_MspInit+0x88>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001956:	4a10      	ldr	r2, [pc, #64]	@ (8001998 <HAL_SPI_MspInit+0x88>)
 8001958:	f043 0301 	orr.w	r3, r3, #1
 800195c:	6313      	str	r3, [r2, #48]	@ 0x30
 800195e:	4b0e      	ldr	r3, [pc, #56]	@ (8001998 <HAL_SPI_MspInit+0x88>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	60fb      	str	r3, [r7, #12]
 8001968:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800196a:	23e0      	movs	r3, #224	@ 0xe0
 800196c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196e:	2302      	movs	r3, #2
 8001970:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001972:	2300      	movs	r3, #0
 8001974:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001976:	2300      	movs	r3, #0
 8001978:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800197a:	2305      	movs	r3, #5
 800197c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800197e:	f107 0314 	add.w	r3, r7, #20
 8001982:	4619      	mov	r1, r3
 8001984:	4805      	ldr	r0, [pc, #20]	@ (800199c <HAL_SPI_MspInit+0x8c>)
 8001986:	f000 fb45 	bl	8002014 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800198a:	bf00      	nop
 800198c:	3728      	adds	r7, #40	@ 0x28
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	40013000 	.word	0x40013000
 8001998:	40023800 	.word	0x40023800
 800199c:	40020000 	.word	0x40020000

080019a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b08a      	sub	sp, #40	@ 0x28
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a8:	f107 0314 	add.w	r3, r7, #20
 80019ac:	2200      	movs	r2, #0
 80019ae:	601a      	str	r2, [r3, #0]
 80019b0:	605a      	str	r2, [r3, #4]
 80019b2:	609a      	str	r2, [r3, #8]
 80019b4:	60da      	str	r2, [r3, #12]
 80019b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a19      	ldr	r2, [pc, #100]	@ (8001a24 <HAL_UART_MspInit+0x84>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d12b      	bne.n	8001a1a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80019c2:	2300      	movs	r3, #0
 80019c4:	613b      	str	r3, [r7, #16]
 80019c6:	4b18      	ldr	r3, [pc, #96]	@ (8001a28 <HAL_UART_MspInit+0x88>)
 80019c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ca:	4a17      	ldr	r2, [pc, #92]	@ (8001a28 <HAL_UART_MspInit+0x88>)
 80019cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80019d2:	4b15      	ldr	r3, [pc, #84]	@ (8001a28 <HAL_UART_MspInit+0x88>)
 80019d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019da:	613b      	str	r3, [r7, #16]
 80019dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019de:	2300      	movs	r3, #0
 80019e0:	60fb      	str	r3, [r7, #12]
 80019e2:	4b11      	ldr	r3, [pc, #68]	@ (8001a28 <HAL_UART_MspInit+0x88>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e6:	4a10      	ldr	r2, [pc, #64]	@ (8001a28 <HAL_UART_MspInit+0x88>)
 80019e8:	f043 0301 	orr.w	r3, r3, #1
 80019ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80019ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001a28 <HAL_UART_MspInit+0x88>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f2:	f003 0301 	and.w	r3, r3, #1
 80019f6:	60fb      	str	r3, [r7, #12]
 80019f8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80019fa:	230c      	movs	r3, #12
 80019fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019fe:	2302      	movs	r3, #2
 8001a00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a02:	2300      	movs	r3, #0
 8001a04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a06:	2303      	movs	r3, #3
 8001a08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a0a:	2307      	movs	r3, #7
 8001a0c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a0e:	f107 0314 	add.w	r3, r7, #20
 8001a12:	4619      	mov	r1, r3
 8001a14:	4805      	ldr	r0, [pc, #20]	@ (8001a2c <HAL_UART_MspInit+0x8c>)
 8001a16:	f000 fafd 	bl	8002014 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001a1a:	bf00      	nop
 8001a1c:	3728      	adds	r7, #40	@ 0x28
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	40004400 	.word	0x40004400
 8001a28:	40023800 	.word	0x40023800
 8001a2c:	40020000 	.word	0x40020000

08001a30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a34:	bf00      	nop
 8001a36:	e7fd      	b.n	8001a34 <NMI_Handler+0x4>

08001a38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a3c:	bf00      	nop
 8001a3e:	e7fd      	b.n	8001a3c <HardFault_Handler+0x4>

08001a40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a44:	bf00      	nop
 8001a46:	e7fd      	b.n	8001a44 <MemManage_Handler+0x4>

08001a48 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a4c:	bf00      	nop
 8001a4e:	e7fd      	b.n	8001a4c <BusFault_Handler+0x4>

08001a50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a54:	bf00      	nop
 8001a56:	e7fd      	b.n	8001a54 <UsageFault_Handler+0x4>

08001a58 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a5c:	bf00      	nop
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr

08001a66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a66:	b480      	push	{r7}
 8001a68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a6a:	bf00      	nop
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a78:	bf00      	nop
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr

08001a82 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a82:	b580      	push	{r7, lr}
 8001a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a86:	f000 f96f 	bl	8001d68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a8a:	bf00      	nop
 8001a8c:	bd80      	pop	{r7, pc}

08001a8e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Pulse_Oximeter_Int_Pin);
 8001a92:	2001      	movs	r0, #1
 8001a94:	f000 fc8e 	bl	80023b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001a98:	bf00      	nop
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001aa0:	4802      	ldr	r0, [pc, #8]	@ (8001aac <OTG_FS_IRQHandler+0x10>)
 8001aa2:	f002 fa97 	bl	8003fd4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001aa6:	bf00      	nop
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	20001c5c 	.word	0x20001c5c

08001ab0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  return 1;
 8001ab4:	2301      	movs	r3, #1
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <_kill>:

int _kill(int pid, int sig)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001aca:	f009 facb 	bl	800b064 <__errno>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2216      	movs	r2, #22
 8001ad2:	601a      	str	r2, [r3, #0]
  return -1;
 8001ad4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3708      	adds	r7, #8
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}

08001ae0 <_exit>:

void _exit (int status)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ae8:	f04f 31ff 	mov.w	r1, #4294967295
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f7ff ffe7 	bl	8001ac0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001af2:	bf00      	nop
 8001af4:	e7fd      	b.n	8001af2 <_exit+0x12>

08001af6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001af6:	b580      	push	{r7, lr}
 8001af8:	b086      	sub	sp, #24
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	60f8      	str	r0, [r7, #12]
 8001afe:	60b9      	str	r1, [r7, #8]
 8001b00:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b02:	2300      	movs	r3, #0
 8001b04:	617b      	str	r3, [r7, #20]
 8001b06:	e00a      	b.n	8001b1e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b08:	f3af 8000 	nop.w
 8001b0c:	4601      	mov	r1, r0
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	1c5a      	adds	r2, r3, #1
 8001b12:	60ba      	str	r2, [r7, #8]
 8001b14:	b2ca      	uxtb	r2, r1
 8001b16:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	617b      	str	r3, [r7, #20]
 8001b1e:	697a      	ldr	r2, [r7, #20]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	429a      	cmp	r2, r3
 8001b24:	dbf0      	blt.n	8001b08 <_read+0x12>
  }

  return len;
 8001b26:	687b      	ldr	r3, [r7, #4]
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3718      	adds	r7, #24
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	60b9      	str	r1, [r7, #8]
 8001b3a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	617b      	str	r3, [r7, #20]
 8001b40:	e009      	b.n	8001b56 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	1c5a      	adds	r2, r3, #1
 8001b46:	60ba      	str	r2, [r7, #8]
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	3301      	adds	r3, #1
 8001b54:	617b      	str	r3, [r7, #20]
 8001b56:	697a      	ldr	r2, [r7, #20]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	dbf1      	blt.n	8001b42 <_write+0x12>
  }
  return len;
 8001b5e:	687b      	ldr	r3, [r7, #4]
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3718      	adds	r7, #24
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <_close>:

int _close(int file)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr

08001b80 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b90:	605a      	str	r2, [r3, #4]
  return 0;
 8001b92:	2300      	movs	r3, #0
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <_isatty>:

int _isatty(int file)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ba8:	2301      	movs	r3, #1
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr

08001bb6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	b085      	sub	sp, #20
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	60f8      	str	r0, [r7, #12]
 8001bbe:	60b9      	str	r1, [r7, #8]
 8001bc0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001bc2:	2300      	movs	r3, #0
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3714      	adds	r7, #20
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b086      	sub	sp, #24
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bd8:	4a14      	ldr	r2, [pc, #80]	@ (8001c2c <_sbrk+0x5c>)
 8001bda:	4b15      	ldr	r3, [pc, #84]	@ (8001c30 <_sbrk+0x60>)
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001be4:	4b13      	ldr	r3, [pc, #76]	@ (8001c34 <_sbrk+0x64>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d102      	bne.n	8001bf2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bec:	4b11      	ldr	r3, [pc, #68]	@ (8001c34 <_sbrk+0x64>)
 8001bee:	4a12      	ldr	r2, [pc, #72]	@ (8001c38 <_sbrk+0x68>)
 8001bf0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bf2:	4b10      	ldr	r3, [pc, #64]	@ (8001c34 <_sbrk+0x64>)
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4413      	add	r3, r2
 8001bfa:	693a      	ldr	r2, [r7, #16]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d207      	bcs.n	8001c10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c00:	f009 fa30 	bl	800b064 <__errno>
 8001c04:	4603      	mov	r3, r0
 8001c06:	220c      	movs	r2, #12
 8001c08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c0e:	e009      	b.n	8001c24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c10:	4b08      	ldr	r3, [pc, #32]	@ (8001c34 <_sbrk+0x64>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c16:	4b07      	ldr	r3, [pc, #28]	@ (8001c34 <_sbrk+0x64>)
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4413      	add	r3, r2
 8001c1e:	4a05      	ldr	r2, [pc, #20]	@ (8001c34 <_sbrk+0x64>)
 8001c20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c22:	68fb      	ldr	r3, [r7, #12]
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3718      	adds	r7, #24
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	20020000 	.word	0x20020000
 8001c30:	00000400 	.word	0x00000400
 8001c34:	20000774 	.word	0x20000774
 8001c38:	200024b0 	.word	0x200024b0

08001c3c <millis>:
  }
}

// Get number of elapsed milliseconds
uint32_t millis(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8001c40:	f000 f8a6 	bl	8001d90 <HAL_GetTick>
 8001c44:	4603      	mov	r3, r0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	bd80      	pop	{r7, pc}
	...

08001c4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c50:	4b06      	ldr	r3, [pc, #24]	@ (8001c6c <SystemInit+0x20>)
 8001c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c56:	4a05      	ldr	r2, [pc, #20]	@ (8001c6c <SystemInit+0x20>)
 8001c58:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c5c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c60:	bf00      	nop
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	e000ed00 	.word	0xe000ed00

08001c70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001c70:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ca8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001c74:	f7ff ffea 	bl	8001c4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c78:	480c      	ldr	r0, [pc, #48]	@ (8001cac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c7a:	490d      	ldr	r1, [pc, #52]	@ (8001cb0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c7c:	4a0d      	ldr	r2, [pc, #52]	@ (8001cb4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c80:	e002      	b.n	8001c88 <LoopCopyDataInit>

08001c82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c86:	3304      	adds	r3, #4

08001c88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c8c:	d3f9      	bcc.n	8001c82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c8e:	4a0a      	ldr	r2, [pc, #40]	@ (8001cb8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c90:	4c0a      	ldr	r4, [pc, #40]	@ (8001cbc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c94:	e001      	b.n	8001c9a <LoopFillZerobss>

08001c96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c98:	3204      	adds	r2, #4

08001c9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c9c:	d3fb      	bcc.n	8001c96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c9e:	f009 f9e7 	bl	800b070 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ca2:	f7ff f913 	bl	8000ecc <main>
  bx  lr    
 8001ca6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001ca8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001cac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cb0:	200002c4 	.word	0x200002c4
  ldr r2, =_sidata
 8001cb4:	0800d8a0 	.word	0x0800d8a0
  ldr r2, =_sbss
 8001cb8:	200002c4 	.word	0x200002c4
  ldr r4, =_ebss
 8001cbc:	200024ac 	.word	0x200024ac

08001cc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cc0:	e7fe      	b.n	8001cc0 <ADC_IRQHandler>
	...

08001cc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001cc8:	4b0e      	ldr	r3, [pc, #56]	@ (8001d04 <HAL_Init+0x40>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a0d      	ldr	r2, [pc, #52]	@ (8001d04 <HAL_Init+0x40>)
 8001cce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001cd2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001cd4:	4b0b      	ldr	r3, [pc, #44]	@ (8001d04 <HAL_Init+0x40>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a0a      	ldr	r2, [pc, #40]	@ (8001d04 <HAL_Init+0x40>)
 8001cda:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001cde:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ce0:	4b08      	ldr	r3, [pc, #32]	@ (8001d04 <HAL_Init+0x40>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a07      	ldr	r2, [pc, #28]	@ (8001d04 <HAL_Init+0x40>)
 8001ce6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cec:	2003      	movs	r0, #3
 8001cee:	f000 f94f 	bl	8001f90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cf2:	2000      	movs	r0, #0
 8001cf4:	f000 f808 	bl	8001d08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cf8:	f7ff fd1a 	bl	8001730 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	40023c00 	.word	0x40023c00

08001d08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d10:	4b12      	ldr	r3, [pc, #72]	@ (8001d5c <HAL_InitTick+0x54>)
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	4b12      	ldr	r3, [pc, #72]	@ (8001d60 <HAL_InitTick+0x58>)
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	4619      	mov	r1, r3
 8001d1a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d26:	4618      	mov	r0, r3
 8001d28:	f000 f967 	bl	8001ffa <HAL_SYSTICK_Config>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e00e      	b.n	8001d54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2b0f      	cmp	r3, #15
 8001d3a:	d80a      	bhi.n	8001d52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	6879      	ldr	r1, [r7, #4]
 8001d40:	f04f 30ff 	mov.w	r0, #4294967295
 8001d44:	f000 f92f 	bl	8001fa6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d48:	4a06      	ldr	r2, [pc, #24]	@ (8001d64 <HAL_InitTick+0x5c>)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	e000      	b.n	8001d54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3708      	adds	r7, #8
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	20000000 	.word	0x20000000
 8001d60:	20000008 	.word	0x20000008
 8001d64:	20000004 	.word	0x20000004

08001d68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d6c:	4b06      	ldr	r3, [pc, #24]	@ (8001d88 <HAL_IncTick+0x20>)
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	461a      	mov	r2, r3
 8001d72:	4b06      	ldr	r3, [pc, #24]	@ (8001d8c <HAL_IncTick+0x24>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4413      	add	r3, r2
 8001d78:	4a04      	ldr	r2, [pc, #16]	@ (8001d8c <HAL_IncTick+0x24>)
 8001d7a:	6013      	str	r3, [r2, #0]
}
 8001d7c:	bf00      	nop
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	20000008 	.word	0x20000008
 8001d8c:	20000778 	.word	0x20000778

08001d90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  return uwTick;
 8001d94:	4b03      	ldr	r3, [pc, #12]	@ (8001da4 <HAL_GetTick+0x14>)
 8001d96:	681b      	ldr	r3, [r3, #0]
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	20000778 	.word	0x20000778

08001da8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b084      	sub	sp, #16
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001db0:	f7ff ffee 	bl	8001d90 <HAL_GetTick>
 8001db4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dc0:	d005      	beq.n	8001dce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dc2:	4b0a      	ldr	r3, [pc, #40]	@ (8001dec <HAL_Delay+0x44>)
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	4413      	add	r3, r2
 8001dcc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001dce:	bf00      	nop
 8001dd0:	f7ff ffde 	bl	8001d90 <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	68fa      	ldr	r2, [r7, #12]
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d8f7      	bhi.n	8001dd0 <HAL_Delay+0x28>
  {
  }
}
 8001de0:	bf00      	nop
 8001de2:	bf00      	nop
 8001de4:	3710      	adds	r7, #16
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	20000008 	.word	0x20000008

08001df0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b085      	sub	sp, #20
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f003 0307 	and.w	r3, r3, #7
 8001dfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e00:	4b0c      	ldr	r3, [pc, #48]	@ (8001e34 <__NVIC_SetPriorityGrouping+0x44>)
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e06:	68ba      	ldr	r2, [r7, #8]
 8001e08:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e18:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e22:	4a04      	ldr	r2, [pc, #16]	@ (8001e34 <__NVIC_SetPriorityGrouping+0x44>)
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	60d3      	str	r3, [r2, #12]
}
 8001e28:	bf00      	nop
 8001e2a:	3714      	adds	r7, #20
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr
 8001e34:	e000ed00 	.word	0xe000ed00

08001e38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e3c:	4b04      	ldr	r3, [pc, #16]	@ (8001e50 <__NVIC_GetPriorityGrouping+0x18>)
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	0a1b      	lsrs	r3, r3, #8
 8001e42:	f003 0307 	and.w	r3, r3, #7
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr
 8001e50:	e000ed00 	.word	0xe000ed00

08001e54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	db0b      	blt.n	8001e7e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e66:	79fb      	ldrb	r3, [r7, #7]
 8001e68:	f003 021f 	and.w	r2, r3, #31
 8001e6c:	4907      	ldr	r1, [pc, #28]	@ (8001e8c <__NVIC_EnableIRQ+0x38>)
 8001e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e72:	095b      	lsrs	r3, r3, #5
 8001e74:	2001      	movs	r0, #1
 8001e76:	fa00 f202 	lsl.w	r2, r0, r2
 8001e7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e7e:	bf00      	nop
 8001e80:	370c      	adds	r7, #12
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	e000e100 	.word	0xe000e100

08001e90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	4603      	mov	r3, r0
 8001e98:	6039      	str	r1, [r7, #0]
 8001e9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	db0a      	blt.n	8001eba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	b2da      	uxtb	r2, r3
 8001ea8:	490c      	ldr	r1, [pc, #48]	@ (8001edc <__NVIC_SetPriority+0x4c>)
 8001eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eae:	0112      	lsls	r2, r2, #4
 8001eb0:	b2d2      	uxtb	r2, r2
 8001eb2:	440b      	add	r3, r1
 8001eb4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001eb8:	e00a      	b.n	8001ed0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	b2da      	uxtb	r2, r3
 8001ebe:	4908      	ldr	r1, [pc, #32]	@ (8001ee0 <__NVIC_SetPriority+0x50>)
 8001ec0:	79fb      	ldrb	r3, [r7, #7]
 8001ec2:	f003 030f 	and.w	r3, r3, #15
 8001ec6:	3b04      	subs	r3, #4
 8001ec8:	0112      	lsls	r2, r2, #4
 8001eca:	b2d2      	uxtb	r2, r2
 8001ecc:	440b      	add	r3, r1
 8001ece:	761a      	strb	r2, [r3, #24]
}
 8001ed0:	bf00      	nop
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr
 8001edc:	e000e100 	.word	0xe000e100
 8001ee0:	e000ed00 	.word	0xe000ed00

08001ee4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b089      	sub	sp, #36	@ 0x24
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	60f8      	str	r0, [r7, #12]
 8001eec:	60b9      	str	r1, [r7, #8]
 8001eee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	f003 0307 	and.w	r3, r3, #7
 8001ef6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	f1c3 0307 	rsb	r3, r3, #7
 8001efe:	2b04      	cmp	r3, #4
 8001f00:	bf28      	it	cs
 8001f02:	2304      	movcs	r3, #4
 8001f04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	3304      	adds	r3, #4
 8001f0a:	2b06      	cmp	r3, #6
 8001f0c:	d902      	bls.n	8001f14 <NVIC_EncodePriority+0x30>
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	3b03      	subs	r3, #3
 8001f12:	e000      	b.n	8001f16 <NVIC_EncodePriority+0x32>
 8001f14:	2300      	movs	r3, #0
 8001f16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f18:	f04f 32ff 	mov.w	r2, #4294967295
 8001f1c:	69bb      	ldr	r3, [r7, #24]
 8001f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f22:	43da      	mvns	r2, r3
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	401a      	ands	r2, r3
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	fa01 f303 	lsl.w	r3, r1, r3
 8001f36:	43d9      	mvns	r1, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f3c:	4313      	orrs	r3, r2
         );
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3724      	adds	r7, #36	@ 0x24
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
	...

08001f4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	3b01      	subs	r3, #1
 8001f58:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f5c:	d301      	bcc.n	8001f62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e00f      	b.n	8001f82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f62:	4a0a      	ldr	r2, [pc, #40]	@ (8001f8c <SysTick_Config+0x40>)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	3b01      	subs	r3, #1
 8001f68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f6a:	210f      	movs	r1, #15
 8001f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f70:	f7ff ff8e 	bl	8001e90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f74:	4b05      	ldr	r3, [pc, #20]	@ (8001f8c <SysTick_Config+0x40>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f7a:	4b04      	ldr	r3, [pc, #16]	@ (8001f8c <SysTick_Config+0x40>)
 8001f7c:	2207      	movs	r2, #7
 8001f7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	e000e010 	.word	0xe000e010

08001f90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f7ff ff29 	bl	8001df0 <__NVIC_SetPriorityGrouping>
}
 8001f9e:	bf00      	nop
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b086      	sub	sp, #24
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	4603      	mov	r3, r0
 8001fae:	60b9      	str	r1, [r7, #8]
 8001fb0:	607a      	str	r2, [r7, #4]
 8001fb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fb8:	f7ff ff3e 	bl	8001e38 <__NVIC_GetPriorityGrouping>
 8001fbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	68b9      	ldr	r1, [r7, #8]
 8001fc2:	6978      	ldr	r0, [r7, #20]
 8001fc4:	f7ff ff8e 	bl	8001ee4 <NVIC_EncodePriority>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fce:	4611      	mov	r1, r2
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7ff ff5d 	bl	8001e90 <__NVIC_SetPriority>
}
 8001fd6:	bf00      	nop
 8001fd8:	3718      	adds	r7, #24
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b082      	sub	sp, #8
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7ff ff31 	bl	8001e54 <__NVIC_EnableIRQ>
}
 8001ff2:	bf00      	nop
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b082      	sub	sp, #8
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f7ff ffa2 	bl	8001f4c <SysTick_Config>
 8002008:	4603      	mov	r3, r0
}
 800200a:	4618      	mov	r0, r3
 800200c:	3708      	adds	r7, #8
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
	...

08002014 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002014:	b480      	push	{r7}
 8002016:	b089      	sub	sp, #36	@ 0x24
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800201e:	2300      	movs	r3, #0
 8002020:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002022:	2300      	movs	r3, #0
 8002024:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002026:	2300      	movs	r3, #0
 8002028:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800202a:	2300      	movs	r3, #0
 800202c:	61fb      	str	r3, [r7, #28]
 800202e:	e16b      	b.n	8002308 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002030:	2201      	movs	r2, #1
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	697a      	ldr	r2, [r7, #20]
 8002040:	4013      	ands	r3, r2
 8002042:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002044:	693a      	ldr	r2, [r7, #16]
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	429a      	cmp	r2, r3
 800204a:	f040 815a 	bne.w	8002302 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f003 0303 	and.w	r3, r3, #3
 8002056:	2b01      	cmp	r3, #1
 8002058:	d005      	beq.n	8002066 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002062:	2b02      	cmp	r3, #2
 8002064:	d130      	bne.n	80020c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	005b      	lsls	r3, r3, #1
 8002070:	2203      	movs	r2, #3
 8002072:	fa02 f303 	lsl.w	r3, r2, r3
 8002076:	43db      	mvns	r3, r3
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	4013      	ands	r3, r2
 800207c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	68da      	ldr	r2, [r3, #12]
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	fa02 f303 	lsl.w	r3, r2, r3
 800208a:	69ba      	ldr	r2, [r7, #24]
 800208c:	4313      	orrs	r3, r2
 800208e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	69ba      	ldr	r2, [r7, #24]
 8002094:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800209c:	2201      	movs	r2, #1
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	fa02 f303 	lsl.w	r3, r2, r3
 80020a4:	43db      	mvns	r3, r3
 80020a6:	69ba      	ldr	r2, [r7, #24]
 80020a8:	4013      	ands	r3, r2
 80020aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	091b      	lsrs	r3, r3, #4
 80020b2:	f003 0201 	and.w	r2, r3, #1
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	4313      	orrs	r3, r2
 80020c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f003 0303 	and.w	r3, r3, #3
 80020d0:	2b03      	cmp	r3, #3
 80020d2:	d017      	beq.n	8002104 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	2203      	movs	r2, #3
 80020e0:	fa02 f303 	lsl.w	r3, r2, r3
 80020e4:	43db      	mvns	r3, r3
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	4013      	ands	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	689a      	ldr	r2, [r3, #8]
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	005b      	lsls	r3, r3, #1
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f003 0303 	and.w	r3, r3, #3
 800210c:	2b02      	cmp	r3, #2
 800210e:	d123      	bne.n	8002158 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	08da      	lsrs	r2, r3, #3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	3208      	adds	r2, #8
 8002118:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800211c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	f003 0307 	and.w	r3, r3, #7
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	220f      	movs	r2, #15
 8002128:	fa02 f303 	lsl.w	r3, r2, r3
 800212c:	43db      	mvns	r3, r3
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	4013      	ands	r3, r2
 8002132:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	691a      	ldr	r2, [r3, #16]
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	f003 0307 	and.w	r3, r3, #7
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	fa02 f303 	lsl.w	r3, r2, r3
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	4313      	orrs	r3, r2
 8002148:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	08da      	lsrs	r2, r3, #3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	3208      	adds	r2, #8
 8002152:	69b9      	ldr	r1, [r7, #24]
 8002154:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	005b      	lsls	r3, r3, #1
 8002162:	2203      	movs	r2, #3
 8002164:	fa02 f303 	lsl.w	r3, r2, r3
 8002168:	43db      	mvns	r3, r3
 800216a:	69ba      	ldr	r2, [r7, #24]
 800216c:	4013      	ands	r3, r2
 800216e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f003 0203 	and.w	r2, r3, #3
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	005b      	lsls	r3, r3, #1
 800217c:	fa02 f303 	lsl.w	r3, r2, r3
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	4313      	orrs	r3, r2
 8002184:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	69ba      	ldr	r2, [r7, #24]
 800218a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002194:	2b00      	cmp	r3, #0
 8002196:	f000 80b4 	beq.w	8002302 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800219a:	2300      	movs	r3, #0
 800219c:	60fb      	str	r3, [r7, #12]
 800219e:	4b60      	ldr	r3, [pc, #384]	@ (8002320 <HAL_GPIO_Init+0x30c>)
 80021a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021a2:	4a5f      	ldr	r2, [pc, #380]	@ (8002320 <HAL_GPIO_Init+0x30c>)
 80021a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80021aa:	4b5d      	ldr	r3, [pc, #372]	@ (8002320 <HAL_GPIO_Init+0x30c>)
 80021ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021b2:	60fb      	str	r3, [r7, #12]
 80021b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021b6:	4a5b      	ldr	r2, [pc, #364]	@ (8002324 <HAL_GPIO_Init+0x310>)
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	089b      	lsrs	r3, r3, #2
 80021bc:	3302      	adds	r3, #2
 80021be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	f003 0303 	and.w	r3, r3, #3
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	220f      	movs	r2, #15
 80021ce:	fa02 f303 	lsl.w	r3, r2, r3
 80021d2:	43db      	mvns	r3, r3
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	4013      	ands	r3, r2
 80021d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a52      	ldr	r2, [pc, #328]	@ (8002328 <HAL_GPIO_Init+0x314>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d02b      	beq.n	800223a <HAL_GPIO_Init+0x226>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a51      	ldr	r2, [pc, #324]	@ (800232c <HAL_GPIO_Init+0x318>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d025      	beq.n	8002236 <HAL_GPIO_Init+0x222>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a50      	ldr	r2, [pc, #320]	@ (8002330 <HAL_GPIO_Init+0x31c>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d01f      	beq.n	8002232 <HAL_GPIO_Init+0x21e>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a4f      	ldr	r2, [pc, #316]	@ (8002334 <HAL_GPIO_Init+0x320>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d019      	beq.n	800222e <HAL_GPIO_Init+0x21a>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a4e      	ldr	r2, [pc, #312]	@ (8002338 <HAL_GPIO_Init+0x324>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d013      	beq.n	800222a <HAL_GPIO_Init+0x216>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a4d      	ldr	r2, [pc, #308]	@ (800233c <HAL_GPIO_Init+0x328>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d00d      	beq.n	8002226 <HAL_GPIO_Init+0x212>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a4c      	ldr	r2, [pc, #304]	@ (8002340 <HAL_GPIO_Init+0x32c>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d007      	beq.n	8002222 <HAL_GPIO_Init+0x20e>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a4b      	ldr	r2, [pc, #300]	@ (8002344 <HAL_GPIO_Init+0x330>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d101      	bne.n	800221e <HAL_GPIO_Init+0x20a>
 800221a:	2307      	movs	r3, #7
 800221c:	e00e      	b.n	800223c <HAL_GPIO_Init+0x228>
 800221e:	2308      	movs	r3, #8
 8002220:	e00c      	b.n	800223c <HAL_GPIO_Init+0x228>
 8002222:	2306      	movs	r3, #6
 8002224:	e00a      	b.n	800223c <HAL_GPIO_Init+0x228>
 8002226:	2305      	movs	r3, #5
 8002228:	e008      	b.n	800223c <HAL_GPIO_Init+0x228>
 800222a:	2304      	movs	r3, #4
 800222c:	e006      	b.n	800223c <HAL_GPIO_Init+0x228>
 800222e:	2303      	movs	r3, #3
 8002230:	e004      	b.n	800223c <HAL_GPIO_Init+0x228>
 8002232:	2302      	movs	r3, #2
 8002234:	e002      	b.n	800223c <HAL_GPIO_Init+0x228>
 8002236:	2301      	movs	r3, #1
 8002238:	e000      	b.n	800223c <HAL_GPIO_Init+0x228>
 800223a:	2300      	movs	r3, #0
 800223c:	69fa      	ldr	r2, [r7, #28]
 800223e:	f002 0203 	and.w	r2, r2, #3
 8002242:	0092      	lsls	r2, r2, #2
 8002244:	4093      	lsls	r3, r2
 8002246:	69ba      	ldr	r2, [r7, #24]
 8002248:	4313      	orrs	r3, r2
 800224a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800224c:	4935      	ldr	r1, [pc, #212]	@ (8002324 <HAL_GPIO_Init+0x310>)
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	089b      	lsrs	r3, r3, #2
 8002252:	3302      	adds	r3, #2
 8002254:	69ba      	ldr	r2, [r7, #24]
 8002256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800225a:	4b3b      	ldr	r3, [pc, #236]	@ (8002348 <HAL_GPIO_Init+0x334>)
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	43db      	mvns	r3, r3
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	4013      	ands	r3, r2
 8002268:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d003      	beq.n	800227e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002276:	69ba      	ldr	r2, [r7, #24]
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	4313      	orrs	r3, r2
 800227c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800227e:	4a32      	ldr	r2, [pc, #200]	@ (8002348 <HAL_GPIO_Init+0x334>)
 8002280:	69bb      	ldr	r3, [r7, #24]
 8002282:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002284:	4b30      	ldr	r3, [pc, #192]	@ (8002348 <HAL_GPIO_Init+0x334>)
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	43db      	mvns	r3, r3
 800228e:	69ba      	ldr	r2, [r7, #24]
 8002290:	4013      	ands	r3, r2
 8002292:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800229c:	2b00      	cmp	r3, #0
 800229e:	d003      	beq.n	80022a8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022a8:	4a27      	ldr	r2, [pc, #156]	@ (8002348 <HAL_GPIO_Init+0x334>)
 80022aa:	69bb      	ldr	r3, [r7, #24]
 80022ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022ae:	4b26      	ldr	r3, [pc, #152]	@ (8002348 <HAL_GPIO_Init+0x334>)
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	43db      	mvns	r3, r3
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	4013      	ands	r3, r2
 80022bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d003      	beq.n	80022d2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80022ca:	69ba      	ldr	r2, [r7, #24]
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022d2:	4a1d      	ldr	r2, [pc, #116]	@ (8002348 <HAL_GPIO_Init+0x334>)
 80022d4:	69bb      	ldr	r3, [r7, #24]
 80022d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022d8:	4b1b      	ldr	r3, [pc, #108]	@ (8002348 <HAL_GPIO_Init+0x334>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	43db      	mvns	r3, r3
 80022e2:	69ba      	ldr	r2, [r7, #24]
 80022e4:	4013      	ands	r3, r2
 80022e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d003      	beq.n	80022fc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022fc:	4a12      	ldr	r2, [pc, #72]	@ (8002348 <HAL_GPIO_Init+0x334>)
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	3301      	adds	r3, #1
 8002306:	61fb      	str	r3, [r7, #28]
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	2b0f      	cmp	r3, #15
 800230c:	f67f ae90 	bls.w	8002030 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002310:	bf00      	nop
 8002312:	bf00      	nop
 8002314:	3724      	adds	r7, #36	@ 0x24
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	40023800 	.word	0x40023800
 8002324:	40013800 	.word	0x40013800
 8002328:	40020000 	.word	0x40020000
 800232c:	40020400 	.word	0x40020400
 8002330:	40020800 	.word	0x40020800
 8002334:	40020c00 	.word	0x40020c00
 8002338:	40021000 	.word	0x40021000
 800233c:	40021400 	.word	0x40021400
 8002340:	40021800 	.word	0x40021800
 8002344:	40021c00 	.word	0x40021c00
 8002348:	40013c00 	.word	0x40013c00

0800234c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	460b      	mov	r3, r1
 8002356:	807b      	strh	r3, [r7, #2]
 8002358:	4613      	mov	r3, r2
 800235a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800235c:	787b      	ldrb	r3, [r7, #1]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d003      	beq.n	800236a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002362:	887a      	ldrh	r2, [r7, #2]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002368:	e003      	b.n	8002372 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800236a:	887b      	ldrh	r3, [r7, #2]
 800236c:	041a      	lsls	r2, r3, #16
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	619a      	str	r2, [r3, #24]
}
 8002372:	bf00      	nop
 8002374:	370c      	adds	r7, #12
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr

0800237e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800237e:	b480      	push	{r7}
 8002380:	b085      	sub	sp, #20
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]
 8002386:	460b      	mov	r3, r1
 8002388:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	695b      	ldr	r3, [r3, #20]
 800238e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002390:	887a      	ldrh	r2, [r7, #2]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	4013      	ands	r3, r2
 8002396:	041a      	lsls	r2, r3, #16
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	43d9      	mvns	r1, r3
 800239c:	887b      	ldrh	r3, [r7, #2]
 800239e:	400b      	ands	r3, r1
 80023a0:	431a      	orrs	r2, r3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	619a      	str	r2, [r3, #24]
}
 80023a6:	bf00      	nop
 80023a8:	3714      	adds	r7, #20
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
	...

080023b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	4603      	mov	r3, r0
 80023bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80023be:	4b08      	ldr	r3, [pc, #32]	@ (80023e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023c0:	695a      	ldr	r2, [r3, #20]
 80023c2:	88fb      	ldrh	r3, [r7, #6]
 80023c4:	4013      	ands	r3, r2
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d006      	beq.n	80023d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80023ca:	4a05      	ldr	r2, [pc, #20]	@ (80023e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023cc:	88fb      	ldrh	r3, [r7, #6]
 80023ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80023d0:	88fb      	ldrh	r3, [r7, #6]
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7ff f866 	bl	80014a4 <HAL_GPIO_EXTI_Callback>
  }
}
 80023d8:	bf00      	nop
 80023da:	3708      	adds	r7, #8
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	40013c00 	.word	0x40013c00

080023e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d101      	bne.n	80023f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e12b      	b.n	800264e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d106      	bne.n	8002410 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f7ff f9b8 	bl	8001780 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2224      	movs	r2, #36	@ 0x24
 8002414:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f022 0201 	bic.w	r2, r2, #1
 8002426:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002436:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002446:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002448:	f003 fb42 	bl	8005ad0 <HAL_RCC_GetPCLK1Freq>
 800244c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	4a81      	ldr	r2, [pc, #516]	@ (8002658 <HAL_I2C_Init+0x274>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d807      	bhi.n	8002468 <HAL_I2C_Init+0x84>
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	4a80      	ldr	r2, [pc, #512]	@ (800265c <HAL_I2C_Init+0x278>)
 800245c:	4293      	cmp	r3, r2
 800245e:	bf94      	ite	ls
 8002460:	2301      	movls	r3, #1
 8002462:	2300      	movhi	r3, #0
 8002464:	b2db      	uxtb	r3, r3
 8002466:	e006      	b.n	8002476 <HAL_I2C_Init+0x92>
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	4a7d      	ldr	r2, [pc, #500]	@ (8002660 <HAL_I2C_Init+0x27c>)
 800246c:	4293      	cmp	r3, r2
 800246e:	bf94      	ite	ls
 8002470:	2301      	movls	r3, #1
 8002472:	2300      	movhi	r3, #0
 8002474:	b2db      	uxtb	r3, r3
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e0e7      	b.n	800264e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	4a78      	ldr	r2, [pc, #480]	@ (8002664 <HAL_I2C_Init+0x280>)
 8002482:	fba2 2303 	umull	r2, r3, r2, r3
 8002486:	0c9b      	lsrs	r3, r3, #18
 8002488:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	68ba      	ldr	r2, [r7, #8]
 800249a:	430a      	orrs	r2, r1
 800249c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	6a1b      	ldr	r3, [r3, #32]
 80024a4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	4a6a      	ldr	r2, [pc, #424]	@ (8002658 <HAL_I2C_Init+0x274>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d802      	bhi.n	80024b8 <HAL_I2C_Init+0xd4>
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	3301      	adds	r3, #1
 80024b6:	e009      	b.n	80024cc <HAL_I2C_Init+0xe8>
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80024be:	fb02 f303 	mul.w	r3, r2, r3
 80024c2:	4a69      	ldr	r2, [pc, #420]	@ (8002668 <HAL_I2C_Init+0x284>)
 80024c4:	fba2 2303 	umull	r2, r3, r2, r3
 80024c8:	099b      	lsrs	r3, r3, #6
 80024ca:	3301      	adds	r3, #1
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	6812      	ldr	r2, [r2, #0]
 80024d0:	430b      	orrs	r3, r1
 80024d2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	69db      	ldr	r3, [r3, #28]
 80024da:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80024de:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	495c      	ldr	r1, [pc, #368]	@ (8002658 <HAL_I2C_Init+0x274>)
 80024e8:	428b      	cmp	r3, r1
 80024ea:	d819      	bhi.n	8002520 <HAL_I2C_Init+0x13c>
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	1e59      	subs	r1, r3, #1
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	005b      	lsls	r3, r3, #1
 80024f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80024fa:	1c59      	adds	r1, r3, #1
 80024fc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002500:	400b      	ands	r3, r1
 8002502:	2b00      	cmp	r3, #0
 8002504:	d00a      	beq.n	800251c <HAL_I2C_Init+0x138>
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	1e59      	subs	r1, r3, #1
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	005b      	lsls	r3, r3, #1
 8002510:	fbb1 f3f3 	udiv	r3, r1, r3
 8002514:	3301      	adds	r3, #1
 8002516:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800251a:	e051      	b.n	80025c0 <HAL_I2C_Init+0x1dc>
 800251c:	2304      	movs	r3, #4
 800251e:	e04f      	b.n	80025c0 <HAL_I2C_Init+0x1dc>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d111      	bne.n	800254c <HAL_I2C_Init+0x168>
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	1e58      	subs	r0, r3, #1
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6859      	ldr	r1, [r3, #4]
 8002530:	460b      	mov	r3, r1
 8002532:	005b      	lsls	r3, r3, #1
 8002534:	440b      	add	r3, r1
 8002536:	fbb0 f3f3 	udiv	r3, r0, r3
 800253a:	3301      	adds	r3, #1
 800253c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002540:	2b00      	cmp	r3, #0
 8002542:	bf0c      	ite	eq
 8002544:	2301      	moveq	r3, #1
 8002546:	2300      	movne	r3, #0
 8002548:	b2db      	uxtb	r3, r3
 800254a:	e012      	b.n	8002572 <HAL_I2C_Init+0x18e>
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	1e58      	subs	r0, r3, #1
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6859      	ldr	r1, [r3, #4]
 8002554:	460b      	mov	r3, r1
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	440b      	add	r3, r1
 800255a:	0099      	lsls	r1, r3, #2
 800255c:	440b      	add	r3, r1
 800255e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002562:	3301      	adds	r3, #1
 8002564:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002568:	2b00      	cmp	r3, #0
 800256a:	bf0c      	ite	eq
 800256c:	2301      	moveq	r3, #1
 800256e:	2300      	movne	r3, #0
 8002570:	b2db      	uxtb	r3, r3
 8002572:	2b00      	cmp	r3, #0
 8002574:	d001      	beq.n	800257a <HAL_I2C_Init+0x196>
 8002576:	2301      	movs	r3, #1
 8002578:	e022      	b.n	80025c0 <HAL_I2C_Init+0x1dc>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d10e      	bne.n	80025a0 <HAL_I2C_Init+0x1bc>
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	1e58      	subs	r0, r3, #1
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6859      	ldr	r1, [r3, #4]
 800258a:	460b      	mov	r3, r1
 800258c:	005b      	lsls	r3, r3, #1
 800258e:	440b      	add	r3, r1
 8002590:	fbb0 f3f3 	udiv	r3, r0, r3
 8002594:	3301      	adds	r3, #1
 8002596:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800259a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800259e:	e00f      	b.n	80025c0 <HAL_I2C_Init+0x1dc>
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	1e58      	subs	r0, r3, #1
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6859      	ldr	r1, [r3, #4]
 80025a8:	460b      	mov	r3, r1
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	440b      	add	r3, r1
 80025ae:	0099      	lsls	r1, r3, #2
 80025b0:	440b      	add	r3, r1
 80025b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80025b6:	3301      	adds	r3, #1
 80025b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025bc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80025c0:	6879      	ldr	r1, [r7, #4]
 80025c2:	6809      	ldr	r1, [r1, #0]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	69da      	ldr	r2, [r3, #28]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6a1b      	ldr	r3, [r3, #32]
 80025da:	431a      	orrs	r2, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	430a      	orrs	r2, r1
 80025e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80025ee:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	6911      	ldr	r1, [r2, #16]
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	68d2      	ldr	r2, [r2, #12]
 80025fa:	4311      	orrs	r1, r2
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	6812      	ldr	r2, [r2, #0]
 8002600:	430b      	orrs	r3, r1
 8002602:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	695a      	ldr	r2, [r3, #20]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	699b      	ldr	r3, [r3, #24]
 8002616:	431a      	orrs	r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	430a      	orrs	r2, r1
 800261e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f042 0201 	orr.w	r2, r2, #1
 800262e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2200      	movs	r2, #0
 8002634:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2220      	movs	r2, #32
 800263a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800264c:	2300      	movs	r3, #0
}
 800264e:	4618      	mov	r0, r3
 8002650:	3710      	adds	r7, #16
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	000186a0 	.word	0x000186a0
 800265c:	001e847f 	.word	0x001e847f
 8002660:	003d08ff 	.word	0x003d08ff
 8002664:	431bde83 	.word	0x431bde83
 8002668:	10624dd3 	.word	0x10624dd3

0800266c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b088      	sub	sp, #32
 8002670:	af02      	add	r7, sp, #8
 8002672:	60f8      	str	r0, [r7, #12]
 8002674:	607a      	str	r2, [r7, #4]
 8002676:	461a      	mov	r2, r3
 8002678:	460b      	mov	r3, r1
 800267a:	817b      	strh	r3, [r7, #10]
 800267c:	4613      	mov	r3, r2
 800267e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002680:	f7ff fb86 	bl	8001d90 <HAL_GetTick>
 8002684:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800268c:	b2db      	uxtb	r3, r3
 800268e:	2b20      	cmp	r3, #32
 8002690:	f040 80e0 	bne.w	8002854 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	9300      	str	r3, [sp, #0]
 8002698:	2319      	movs	r3, #25
 800269a:	2201      	movs	r2, #1
 800269c:	4970      	ldr	r1, [pc, #448]	@ (8002860 <HAL_I2C_Master_Transmit+0x1f4>)
 800269e:	68f8      	ldr	r0, [r7, #12]
 80026a0:	f000 fc7e 	bl	8002fa0 <I2C_WaitOnFlagUntilTimeout>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80026aa:	2302      	movs	r3, #2
 80026ac:	e0d3      	b.n	8002856 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d101      	bne.n	80026bc <HAL_I2C_Master_Transmit+0x50>
 80026b8:	2302      	movs	r3, #2
 80026ba:	e0cc      	b.n	8002856 <HAL_I2C_Master_Transmit+0x1ea>
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2201      	movs	r2, #1
 80026c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0301 	and.w	r3, r3, #1
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d007      	beq.n	80026e2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f042 0201 	orr.w	r2, r2, #1
 80026e0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80026f0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2221      	movs	r2, #33	@ 0x21
 80026f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2210      	movs	r2, #16
 80026fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2200      	movs	r2, #0
 8002706:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	893a      	ldrh	r2, [r7, #8]
 8002712:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002718:	b29a      	uxth	r2, r3
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	4a50      	ldr	r2, [pc, #320]	@ (8002864 <HAL_I2C_Master_Transmit+0x1f8>)
 8002722:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002724:	8979      	ldrh	r1, [r7, #10]
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	6a3a      	ldr	r2, [r7, #32]
 800272a:	68f8      	ldr	r0, [r7, #12]
 800272c:	f000 face 	bl	8002ccc <I2C_MasterRequestWrite>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d001      	beq.n	800273a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e08d      	b.n	8002856 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800273a:	2300      	movs	r3, #0
 800273c:	613b      	str	r3, [r7, #16]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	695b      	ldr	r3, [r3, #20]
 8002744:	613b      	str	r3, [r7, #16]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	699b      	ldr	r3, [r3, #24]
 800274c:	613b      	str	r3, [r7, #16]
 800274e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002750:	e066      	b.n	8002820 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002752:	697a      	ldr	r2, [r7, #20]
 8002754:	6a39      	ldr	r1, [r7, #32]
 8002756:	68f8      	ldr	r0, [r7, #12]
 8002758:	f000 fd3c 	bl	80031d4 <I2C_WaitOnTXEFlagUntilTimeout>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d00d      	beq.n	800277e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002766:	2b04      	cmp	r3, #4
 8002768:	d107      	bne.n	800277a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002778:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e06b      	b.n	8002856 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002782:	781a      	ldrb	r2, [r3, #0]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800278e:	1c5a      	adds	r2, r3, #1
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002798:	b29b      	uxth	r3, r3
 800279a:	3b01      	subs	r3, #1
 800279c:	b29a      	uxth	r2, r3
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027a6:	3b01      	subs	r3, #1
 80027a8:	b29a      	uxth	r2, r3
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	695b      	ldr	r3, [r3, #20]
 80027b4:	f003 0304 	and.w	r3, r3, #4
 80027b8:	2b04      	cmp	r3, #4
 80027ba:	d11b      	bne.n	80027f4 <HAL_I2C_Master_Transmit+0x188>
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d017      	beq.n	80027f4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c8:	781a      	ldrb	r2, [r3, #0]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027d4:	1c5a      	adds	r2, r3, #1
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027de:	b29b      	uxth	r3, r3
 80027e0:	3b01      	subs	r3, #1
 80027e2:	b29a      	uxth	r2, r3
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027ec:	3b01      	subs	r3, #1
 80027ee:	b29a      	uxth	r2, r3
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027f4:	697a      	ldr	r2, [r7, #20]
 80027f6:	6a39      	ldr	r1, [r7, #32]
 80027f8:	68f8      	ldr	r0, [r7, #12]
 80027fa:	f000 fd33 	bl	8003264 <I2C_WaitOnBTFFlagUntilTimeout>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d00d      	beq.n	8002820 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002808:	2b04      	cmp	r3, #4
 800280a:	d107      	bne.n	800281c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800281a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e01a      	b.n	8002856 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002824:	2b00      	cmp	r3, #0
 8002826:	d194      	bne.n	8002752 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002836:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2220      	movs	r2, #32
 800283c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2200      	movs	r2, #0
 8002844:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2200      	movs	r2, #0
 800284c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002850:	2300      	movs	r3, #0
 8002852:	e000      	b.n	8002856 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002854:	2302      	movs	r3, #2
  }
}
 8002856:	4618      	mov	r0, r3
 8002858:	3718      	adds	r7, #24
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	00100002 	.word	0x00100002
 8002864:	ffff0000 	.word	0xffff0000

08002868 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b08c      	sub	sp, #48	@ 0x30
 800286c:	af02      	add	r7, sp, #8
 800286e:	60f8      	str	r0, [r7, #12]
 8002870:	4608      	mov	r0, r1
 8002872:	4611      	mov	r1, r2
 8002874:	461a      	mov	r2, r3
 8002876:	4603      	mov	r3, r0
 8002878:	817b      	strh	r3, [r7, #10]
 800287a:	460b      	mov	r3, r1
 800287c:	813b      	strh	r3, [r7, #8]
 800287e:	4613      	mov	r3, r2
 8002880:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002882:	f7ff fa85 	bl	8001d90 <HAL_GetTick>
 8002886:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800288e:	b2db      	uxtb	r3, r3
 8002890:	2b20      	cmp	r3, #32
 8002892:	f040 8214 	bne.w	8002cbe <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002898:	9300      	str	r3, [sp, #0]
 800289a:	2319      	movs	r3, #25
 800289c:	2201      	movs	r2, #1
 800289e:	497b      	ldr	r1, [pc, #492]	@ (8002a8c <HAL_I2C_Mem_Read+0x224>)
 80028a0:	68f8      	ldr	r0, [r7, #12]
 80028a2:	f000 fb7d 	bl	8002fa0 <I2C_WaitOnFlagUntilTimeout>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d001      	beq.n	80028b0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80028ac:	2302      	movs	r3, #2
 80028ae:	e207      	b.n	8002cc0 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d101      	bne.n	80028be <HAL_I2C_Mem_Read+0x56>
 80028ba:	2302      	movs	r3, #2
 80028bc:	e200      	b.n	8002cc0 <HAL_I2C_Mem_Read+0x458>
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2201      	movs	r2, #1
 80028c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0301 	and.w	r3, r3, #1
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d007      	beq.n	80028e4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f042 0201 	orr.w	r2, r2, #1
 80028e2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028f2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2222      	movs	r2, #34	@ 0x22
 80028f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2240      	movs	r2, #64	@ 0x40
 8002900:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2200      	movs	r2, #0
 8002908:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800290e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002914:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800291a:	b29a      	uxth	r2, r3
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	4a5b      	ldr	r2, [pc, #364]	@ (8002a90 <HAL_I2C_Mem_Read+0x228>)
 8002924:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002926:	88f8      	ldrh	r0, [r7, #6]
 8002928:	893a      	ldrh	r2, [r7, #8]
 800292a:	8979      	ldrh	r1, [r7, #10]
 800292c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800292e:	9301      	str	r3, [sp, #4]
 8002930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002932:	9300      	str	r3, [sp, #0]
 8002934:	4603      	mov	r3, r0
 8002936:	68f8      	ldr	r0, [r7, #12]
 8002938:	f000 fa4a 	bl	8002dd0 <I2C_RequestMemoryRead>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d001      	beq.n	8002946 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e1bc      	b.n	8002cc0 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800294a:	2b00      	cmp	r3, #0
 800294c:	d113      	bne.n	8002976 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800294e:	2300      	movs	r3, #0
 8002950:	623b      	str	r3, [r7, #32]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	695b      	ldr	r3, [r3, #20]
 8002958:	623b      	str	r3, [r7, #32]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	699b      	ldr	r3, [r3, #24]
 8002960:	623b      	str	r3, [r7, #32]
 8002962:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002972:	601a      	str	r2, [r3, #0]
 8002974:	e190      	b.n	8002c98 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800297a:	2b01      	cmp	r3, #1
 800297c:	d11b      	bne.n	80029b6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800298c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800298e:	2300      	movs	r3, #0
 8002990:	61fb      	str	r3, [r7, #28]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	695b      	ldr	r3, [r3, #20]
 8002998:	61fb      	str	r3, [r7, #28]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	699b      	ldr	r3, [r3, #24]
 80029a0:	61fb      	str	r3, [r7, #28]
 80029a2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029b2:	601a      	str	r2, [r3, #0]
 80029b4:	e170      	b.n	8002c98 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d11b      	bne.n	80029f6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80029cc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80029dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029de:	2300      	movs	r3, #0
 80029e0:	61bb      	str	r3, [r7, #24]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	695b      	ldr	r3, [r3, #20]
 80029e8:	61bb      	str	r3, [r7, #24]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	699b      	ldr	r3, [r3, #24]
 80029f0:	61bb      	str	r3, [r7, #24]
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	e150      	b.n	8002c98 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029f6:	2300      	movs	r3, #0
 80029f8:	617b      	str	r3, [r7, #20]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	695b      	ldr	r3, [r3, #20]
 8002a00:	617b      	str	r3, [r7, #20]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	699b      	ldr	r3, [r3, #24]
 8002a08:	617b      	str	r3, [r7, #20]
 8002a0a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002a0c:	e144      	b.n	8002c98 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a12:	2b03      	cmp	r3, #3
 8002a14:	f200 80f1 	bhi.w	8002bfa <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d123      	bne.n	8002a68 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a22:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002a24:	68f8      	ldr	r0, [r7, #12]
 8002a26:	f000 fc65 	bl	80032f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d001      	beq.n	8002a34 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e145      	b.n	8002cc0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	691a      	ldr	r2, [r3, #16]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a3e:	b2d2      	uxtb	r2, r2
 8002a40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a46:	1c5a      	adds	r2, r3, #1
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a50:	3b01      	subs	r3, #1
 8002a52:	b29a      	uxth	r2, r3
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	3b01      	subs	r3, #1
 8002a60:	b29a      	uxth	r2, r3
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002a66:	e117      	b.n	8002c98 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d14e      	bne.n	8002b0e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a72:	9300      	str	r3, [sp, #0]
 8002a74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a76:	2200      	movs	r2, #0
 8002a78:	4906      	ldr	r1, [pc, #24]	@ (8002a94 <HAL_I2C_Mem_Read+0x22c>)
 8002a7a:	68f8      	ldr	r0, [r7, #12]
 8002a7c:	f000 fa90 	bl	8002fa0 <I2C_WaitOnFlagUntilTimeout>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d008      	beq.n	8002a98 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e11a      	b.n	8002cc0 <HAL_I2C_Mem_Read+0x458>
 8002a8a:	bf00      	nop
 8002a8c:	00100002 	.word	0x00100002
 8002a90:	ffff0000 	.word	0xffff0000
 8002a94:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002aa6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	691a      	ldr	r2, [r3, #16]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ab2:	b2d2      	uxtb	r2, r2
 8002ab4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aba:	1c5a      	adds	r2, r3, #1
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ac4:	3b01      	subs	r3, #1
 8002ac6:	b29a      	uxth	r2, r3
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	3b01      	subs	r3, #1
 8002ad4:	b29a      	uxth	r2, r3
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	691a      	ldr	r2, [r3, #16]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ae4:	b2d2      	uxtb	r2, r2
 8002ae6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aec:	1c5a      	adds	r2, r3, #1
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002af6:	3b01      	subs	r3, #1
 8002af8:	b29a      	uxth	r2, r3
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	3b01      	subs	r3, #1
 8002b06:	b29a      	uxth	r2, r3
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002b0c:	e0c4      	b.n	8002c98 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b10:	9300      	str	r3, [sp, #0]
 8002b12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b14:	2200      	movs	r2, #0
 8002b16:	496c      	ldr	r1, [pc, #432]	@ (8002cc8 <HAL_I2C_Mem_Read+0x460>)
 8002b18:	68f8      	ldr	r0, [r7, #12]
 8002b1a:	f000 fa41 	bl	8002fa0 <I2C_WaitOnFlagUntilTimeout>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d001      	beq.n	8002b28 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e0cb      	b.n	8002cc0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b36:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	691a      	ldr	r2, [r3, #16]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b42:	b2d2      	uxtb	r2, r2
 8002b44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b4a:	1c5a      	adds	r2, r3, #1
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b54:	3b01      	subs	r3, #1
 8002b56:	b29a      	uxth	r2, r3
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	3b01      	subs	r3, #1
 8002b64:	b29a      	uxth	r2, r3
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b6c:	9300      	str	r3, [sp, #0]
 8002b6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b70:	2200      	movs	r2, #0
 8002b72:	4955      	ldr	r1, [pc, #340]	@ (8002cc8 <HAL_I2C_Mem_Read+0x460>)
 8002b74:	68f8      	ldr	r0, [r7, #12]
 8002b76:	f000 fa13 	bl	8002fa0 <I2C_WaitOnFlagUntilTimeout>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d001      	beq.n	8002b84 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e09d      	b.n	8002cc0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b92:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	691a      	ldr	r2, [r3, #16]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b9e:	b2d2      	uxtb	r2, r2
 8002ba0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba6:	1c5a      	adds	r2, r3, #1
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bb0:	3b01      	subs	r3, #1
 8002bb2:	b29a      	uxth	r2, r3
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	b29a      	uxth	r2, r3
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	691a      	ldr	r2, [r3, #16]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd0:	b2d2      	uxtb	r2, r2
 8002bd2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd8:	1c5a      	adds	r2, r3, #1
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002be2:	3b01      	subs	r3, #1
 8002be4:	b29a      	uxth	r2, r3
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	3b01      	subs	r3, #1
 8002bf2:	b29a      	uxth	r2, r3
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002bf8:	e04e      	b.n	8002c98 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bfa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bfc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002bfe:	68f8      	ldr	r0, [r7, #12]
 8002c00:	f000 fb78 	bl	80032f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d001      	beq.n	8002c0e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e058      	b.n	8002cc0 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	691a      	ldr	r2, [r3, #16]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c18:	b2d2      	uxtb	r2, r2
 8002c1a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c20:	1c5a      	adds	r2, r3, #1
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c2a:	3b01      	subs	r3, #1
 8002c2c:	b29a      	uxth	r2, r3
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	3b01      	subs	r3, #1
 8002c3a:	b29a      	uxth	r2, r3
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	695b      	ldr	r3, [r3, #20]
 8002c46:	f003 0304 	and.w	r3, r3, #4
 8002c4a:	2b04      	cmp	r3, #4
 8002c4c:	d124      	bne.n	8002c98 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c52:	2b03      	cmp	r3, #3
 8002c54:	d107      	bne.n	8002c66 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c64:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	691a      	ldr	r2, [r3, #16]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c70:	b2d2      	uxtb	r2, r2
 8002c72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c78:	1c5a      	adds	r2, r3, #1
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c82:	3b01      	subs	r3, #1
 8002c84:	b29a      	uxth	r2, r3
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	3b01      	subs	r3, #1
 8002c92:	b29a      	uxth	r2, r3
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	f47f aeb6 	bne.w	8002a0e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2220      	movs	r2, #32
 8002ca6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	e000      	b.n	8002cc0 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002cbe:	2302      	movs	r3, #2
  }
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3728      	adds	r7, #40	@ 0x28
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	00010004 	.word	0x00010004

08002ccc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b088      	sub	sp, #32
 8002cd0:	af02      	add	r7, sp, #8
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	607a      	str	r2, [r7, #4]
 8002cd6:	603b      	str	r3, [r7, #0]
 8002cd8:	460b      	mov	r3, r1
 8002cda:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ce0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	2b08      	cmp	r3, #8
 8002ce6:	d006      	beq.n	8002cf6 <I2C_MasterRequestWrite+0x2a>
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d003      	beq.n	8002cf6 <I2C_MasterRequestWrite+0x2a>
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002cf4:	d108      	bne.n	8002d08 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d04:	601a      	str	r2, [r3, #0]
 8002d06:	e00b      	b.n	8002d20 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d0c:	2b12      	cmp	r3, #18
 8002d0e:	d107      	bne.n	8002d20 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d1e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	9300      	str	r3, [sp, #0]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2200      	movs	r2, #0
 8002d28:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002d2c:	68f8      	ldr	r0, [r7, #12]
 8002d2e:	f000 f937 	bl	8002fa0 <I2C_WaitOnFlagUntilTimeout>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d00d      	beq.n	8002d54 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d46:	d103      	bne.n	8002d50 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d4e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002d50:	2303      	movs	r3, #3
 8002d52:	e035      	b.n	8002dc0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	691b      	ldr	r3, [r3, #16]
 8002d58:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002d5c:	d108      	bne.n	8002d70 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d5e:	897b      	ldrh	r3, [r7, #10]
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	461a      	mov	r2, r3
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002d6c:	611a      	str	r2, [r3, #16]
 8002d6e:	e01b      	b.n	8002da8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002d70:	897b      	ldrh	r3, [r7, #10]
 8002d72:	11db      	asrs	r3, r3, #7
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	f003 0306 	and.w	r3, r3, #6
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	f063 030f 	orn	r3, r3, #15
 8002d80:	b2da      	uxtb	r2, r3
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	490e      	ldr	r1, [pc, #56]	@ (8002dc8 <I2C_MasterRequestWrite+0xfc>)
 8002d8e:	68f8      	ldr	r0, [r7, #12]
 8002d90:	f000 f980 	bl	8003094 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d001      	beq.n	8002d9e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e010      	b.n	8002dc0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002d9e:	897b      	ldrh	r3, [r7, #10]
 8002da0:	b2da      	uxtb	r2, r3
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	4907      	ldr	r1, [pc, #28]	@ (8002dcc <I2C_MasterRequestWrite+0x100>)
 8002dae:	68f8      	ldr	r0, [r7, #12]
 8002db0:	f000 f970 	bl	8003094 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d001      	beq.n	8002dbe <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e000      	b.n	8002dc0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002dbe:	2300      	movs	r3, #0
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3718      	adds	r7, #24
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	00010008 	.word	0x00010008
 8002dcc:	00010002 	.word	0x00010002

08002dd0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b088      	sub	sp, #32
 8002dd4:	af02      	add	r7, sp, #8
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	4608      	mov	r0, r1
 8002dda:	4611      	mov	r1, r2
 8002ddc:	461a      	mov	r2, r3
 8002dde:	4603      	mov	r3, r0
 8002de0:	817b      	strh	r3, [r7, #10]
 8002de2:	460b      	mov	r3, r1
 8002de4:	813b      	strh	r3, [r7, #8]
 8002de6:	4613      	mov	r3, r2
 8002de8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002df8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e08:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e0c:	9300      	str	r3, [sp, #0]
 8002e0e:	6a3b      	ldr	r3, [r7, #32]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002e16:	68f8      	ldr	r0, [r7, #12]
 8002e18:	f000 f8c2 	bl	8002fa0 <I2C_WaitOnFlagUntilTimeout>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d00d      	beq.n	8002e3e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e30:	d103      	bne.n	8002e3a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e38:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e0aa      	b.n	8002f94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e3e:	897b      	ldrh	r3, [r7, #10]
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	461a      	mov	r2, r3
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002e4c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e50:	6a3a      	ldr	r2, [r7, #32]
 8002e52:	4952      	ldr	r1, [pc, #328]	@ (8002f9c <I2C_RequestMemoryRead+0x1cc>)
 8002e54:	68f8      	ldr	r0, [r7, #12]
 8002e56:	f000 f91d 	bl	8003094 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d001      	beq.n	8002e64 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e097      	b.n	8002f94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e64:	2300      	movs	r3, #0
 8002e66:	617b      	str	r3, [r7, #20]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	695b      	ldr	r3, [r3, #20]
 8002e6e:	617b      	str	r3, [r7, #20]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	699b      	ldr	r3, [r3, #24]
 8002e76:	617b      	str	r3, [r7, #20]
 8002e78:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e7c:	6a39      	ldr	r1, [r7, #32]
 8002e7e:	68f8      	ldr	r0, [r7, #12]
 8002e80:	f000 f9a8 	bl	80031d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d00d      	beq.n	8002ea6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e8e:	2b04      	cmp	r3, #4
 8002e90:	d107      	bne.n	8002ea2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ea0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e076      	b.n	8002f94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ea6:	88fb      	ldrh	r3, [r7, #6]
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d105      	bne.n	8002eb8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002eac:	893b      	ldrh	r3, [r7, #8]
 8002eae:	b2da      	uxtb	r2, r3
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	611a      	str	r2, [r3, #16]
 8002eb6:	e021      	b.n	8002efc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002eb8:	893b      	ldrh	r3, [r7, #8]
 8002eba:	0a1b      	lsrs	r3, r3, #8
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	b2da      	uxtb	r2, r3
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ec6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ec8:	6a39      	ldr	r1, [r7, #32]
 8002eca:	68f8      	ldr	r0, [r7, #12]
 8002ecc:	f000 f982 	bl	80031d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d00d      	beq.n	8002ef2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eda:	2b04      	cmp	r3, #4
 8002edc:	d107      	bne.n	8002eee <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002eec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e050      	b.n	8002f94 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ef2:	893b      	ldrh	r3, [r7, #8]
 8002ef4:	b2da      	uxtb	r2, r3
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002efc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002efe:	6a39      	ldr	r1, [r7, #32]
 8002f00:	68f8      	ldr	r0, [r7, #12]
 8002f02:	f000 f967 	bl	80031d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d00d      	beq.n	8002f28 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f10:	2b04      	cmp	r3, #4
 8002f12:	d107      	bne.n	8002f24 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f22:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e035      	b.n	8002f94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f36:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f3a:	9300      	str	r3, [sp, #0]
 8002f3c:	6a3b      	ldr	r3, [r7, #32]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002f44:	68f8      	ldr	r0, [r7, #12]
 8002f46:	f000 f82b 	bl	8002fa0 <I2C_WaitOnFlagUntilTimeout>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d00d      	beq.n	8002f6c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f5e:	d103      	bne.n	8002f68 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f66:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002f68:	2303      	movs	r3, #3
 8002f6a:	e013      	b.n	8002f94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002f6c:	897b      	ldrh	r3, [r7, #10]
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	f043 0301 	orr.w	r3, r3, #1
 8002f74:	b2da      	uxtb	r2, r3
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f7e:	6a3a      	ldr	r2, [r7, #32]
 8002f80:	4906      	ldr	r1, [pc, #24]	@ (8002f9c <I2C_RequestMemoryRead+0x1cc>)
 8002f82:	68f8      	ldr	r0, [r7, #12]
 8002f84:	f000 f886 	bl	8003094 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d001      	beq.n	8002f92 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e000      	b.n	8002f94 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002f92:	2300      	movs	r3, #0
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3718      	adds	r7, #24
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	00010002 	.word	0x00010002

08002fa0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	60f8      	str	r0, [r7, #12]
 8002fa8:	60b9      	str	r1, [r7, #8]
 8002faa:	603b      	str	r3, [r7, #0]
 8002fac:	4613      	mov	r3, r2
 8002fae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fb0:	e048      	b.n	8003044 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fb8:	d044      	beq.n	8003044 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fba:	f7fe fee9 	bl	8001d90 <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	69bb      	ldr	r3, [r7, #24]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	683a      	ldr	r2, [r7, #0]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d302      	bcc.n	8002fd0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d139      	bne.n	8003044 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	0c1b      	lsrs	r3, r3, #16
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d10d      	bne.n	8002ff6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	695b      	ldr	r3, [r3, #20]
 8002fe0:	43da      	mvns	r2, r3
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	bf0c      	ite	eq
 8002fec:	2301      	moveq	r3, #1
 8002fee:	2300      	movne	r3, #0
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	e00c      	b.n	8003010 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	699b      	ldr	r3, [r3, #24]
 8002ffc:	43da      	mvns	r2, r3
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	4013      	ands	r3, r2
 8003002:	b29b      	uxth	r3, r3
 8003004:	2b00      	cmp	r3, #0
 8003006:	bf0c      	ite	eq
 8003008:	2301      	moveq	r3, #1
 800300a:	2300      	movne	r3, #0
 800300c:	b2db      	uxtb	r3, r3
 800300e:	461a      	mov	r2, r3
 8003010:	79fb      	ldrb	r3, [r7, #7]
 8003012:	429a      	cmp	r2, r3
 8003014:	d116      	bne.n	8003044 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2200      	movs	r2, #0
 800301a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2220      	movs	r2, #32
 8003020:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2200      	movs	r2, #0
 8003028:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003030:	f043 0220 	orr.w	r2, r3, #32
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2200      	movs	r2, #0
 800303c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e023      	b.n	800308c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	0c1b      	lsrs	r3, r3, #16
 8003048:	b2db      	uxtb	r3, r3
 800304a:	2b01      	cmp	r3, #1
 800304c:	d10d      	bne.n	800306a <I2C_WaitOnFlagUntilTimeout+0xca>
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	695b      	ldr	r3, [r3, #20]
 8003054:	43da      	mvns	r2, r3
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	4013      	ands	r3, r2
 800305a:	b29b      	uxth	r3, r3
 800305c:	2b00      	cmp	r3, #0
 800305e:	bf0c      	ite	eq
 8003060:	2301      	moveq	r3, #1
 8003062:	2300      	movne	r3, #0
 8003064:	b2db      	uxtb	r3, r3
 8003066:	461a      	mov	r2, r3
 8003068:	e00c      	b.n	8003084 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	699b      	ldr	r3, [r3, #24]
 8003070:	43da      	mvns	r2, r3
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	4013      	ands	r3, r2
 8003076:	b29b      	uxth	r3, r3
 8003078:	2b00      	cmp	r3, #0
 800307a:	bf0c      	ite	eq
 800307c:	2301      	moveq	r3, #1
 800307e:	2300      	movne	r3, #0
 8003080:	b2db      	uxtb	r3, r3
 8003082:	461a      	mov	r2, r3
 8003084:	79fb      	ldrb	r3, [r7, #7]
 8003086:	429a      	cmp	r2, r3
 8003088:	d093      	beq.n	8002fb2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800308a:	2300      	movs	r3, #0
}
 800308c:	4618      	mov	r0, r3
 800308e:	3710      	adds	r7, #16
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}

08003094 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	60f8      	str	r0, [r7, #12]
 800309c:	60b9      	str	r1, [r7, #8]
 800309e:	607a      	str	r2, [r7, #4]
 80030a0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80030a2:	e071      	b.n	8003188 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	695b      	ldr	r3, [r3, #20]
 80030aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030b2:	d123      	bne.n	80030fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030c2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80030cc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2200      	movs	r2, #0
 80030d2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2220      	movs	r2, #32
 80030d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2200      	movs	r2, #0
 80030e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e8:	f043 0204 	orr.w	r2, r3, #4
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e067      	b.n	80031cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003102:	d041      	beq.n	8003188 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003104:	f7fe fe44 	bl	8001d90 <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	429a      	cmp	r2, r3
 8003112:	d302      	bcc.n	800311a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d136      	bne.n	8003188 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	0c1b      	lsrs	r3, r3, #16
 800311e:	b2db      	uxtb	r3, r3
 8003120:	2b01      	cmp	r3, #1
 8003122:	d10c      	bne.n	800313e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	695b      	ldr	r3, [r3, #20]
 800312a:	43da      	mvns	r2, r3
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	4013      	ands	r3, r2
 8003130:	b29b      	uxth	r3, r3
 8003132:	2b00      	cmp	r3, #0
 8003134:	bf14      	ite	ne
 8003136:	2301      	movne	r3, #1
 8003138:	2300      	moveq	r3, #0
 800313a:	b2db      	uxtb	r3, r3
 800313c:	e00b      	b.n	8003156 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	699b      	ldr	r3, [r3, #24]
 8003144:	43da      	mvns	r2, r3
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	4013      	ands	r3, r2
 800314a:	b29b      	uxth	r3, r3
 800314c:	2b00      	cmp	r3, #0
 800314e:	bf14      	ite	ne
 8003150:	2301      	movne	r3, #1
 8003152:	2300      	moveq	r3, #0
 8003154:	b2db      	uxtb	r3, r3
 8003156:	2b00      	cmp	r3, #0
 8003158:	d016      	beq.n	8003188 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2200      	movs	r2, #0
 800315e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2220      	movs	r2, #32
 8003164:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003174:	f043 0220 	orr.w	r2, r3, #32
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2200      	movs	r2, #0
 8003180:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e021      	b.n	80031cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	0c1b      	lsrs	r3, r3, #16
 800318c:	b2db      	uxtb	r3, r3
 800318e:	2b01      	cmp	r3, #1
 8003190:	d10c      	bne.n	80031ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	695b      	ldr	r3, [r3, #20]
 8003198:	43da      	mvns	r2, r3
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	4013      	ands	r3, r2
 800319e:	b29b      	uxth	r3, r3
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	bf14      	ite	ne
 80031a4:	2301      	movne	r3, #1
 80031a6:	2300      	moveq	r3, #0
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	e00b      	b.n	80031c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	699b      	ldr	r3, [r3, #24]
 80031b2:	43da      	mvns	r2, r3
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	4013      	ands	r3, r2
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	bf14      	ite	ne
 80031be:	2301      	movne	r3, #1
 80031c0:	2300      	moveq	r3, #0
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	f47f af6d 	bne.w	80030a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80031ca:	2300      	movs	r3, #0
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3710      	adds	r7, #16
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b084      	sub	sp, #16
 80031d8:	af00      	add	r7, sp, #0
 80031da:	60f8      	str	r0, [r7, #12]
 80031dc:	60b9      	str	r1, [r7, #8]
 80031de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031e0:	e034      	b.n	800324c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80031e2:	68f8      	ldr	r0, [r7, #12]
 80031e4:	f000 f8e3 	bl	80033ae <I2C_IsAcknowledgeFailed>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d001      	beq.n	80031f2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e034      	b.n	800325c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031f8:	d028      	beq.n	800324c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031fa:	f7fe fdc9 	bl	8001d90 <HAL_GetTick>
 80031fe:	4602      	mov	r2, r0
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	68ba      	ldr	r2, [r7, #8]
 8003206:	429a      	cmp	r2, r3
 8003208:	d302      	bcc.n	8003210 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d11d      	bne.n	800324c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	695b      	ldr	r3, [r3, #20]
 8003216:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800321a:	2b80      	cmp	r3, #128	@ 0x80
 800321c:	d016      	beq.n	800324c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2200      	movs	r2, #0
 8003222:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2220      	movs	r2, #32
 8003228:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2200      	movs	r2, #0
 8003230:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003238:	f043 0220 	orr.w	r2, r3, #32
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2200      	movs	r2, #0
 8003244:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e007      	b.n	800325c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	695b      	ldr	r3, [r3, #20]
 8003252:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003256:	2b80      	cmp	r3, #128	@ 0x80
 8003258:	d1c3      	bne.n	80031e2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800325a:	2300      	movs	r3, #0
}
 800325c:	4618      	mov	r0, r3
 800325e:	3710      	adds	r7, #16
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}

08003264 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	60f8      	str	r0, [r7, #12]
 800326c:	60b9      	str	r1, [r7, #8]
 800326e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003270:	e034      	b.n	80032dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003272:	68f8      	ldr	r0, [r7, #12]
 8003274:	f000 f89b 	bl	80033ae <I2C_IsAcknowledgeFailed>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d001      	beq.n	8003282 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e034      	b.n	80032ec <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003288:	d028      	beq.n	80032dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800328a:	f7fe fd81 	bl	8001d90 <HAL_GetTick>
 800328e:	4602      	mov	r2, r0
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	68ba      	ldr	r2, [r7, #8]
 8003296:	429a      	cmp	r2, r3
 8003298:	d302      	bcc.n	80032a0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d11d      	bne.n	80032dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	695b      	ldr	r3, [r3, #20]
 80032a6:	f003 0304 	and.w	r3, r3, #4
 80032aa:	2b04      	cmp	r3, #4
 80032ac:	d016      	beq.n	80032dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2200      	movs	r2, #0
 80032b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2220      	movs	r2, #32
 80032b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2200      	movs	r2, #0
 80032c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c8:	f043 0220 	orr.w	r2, r3, #32
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e007      	b.n	80032ec <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	695b      	ldr	r3, [r3, #20]
 80032e2:	f003 0304 	and.w	r3, r3, #4
 80032e6:	2b04      	cmp	r3, #4
 80032e8:	d1c3      	bne.n	8003272 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80032ea:	2300      	movs	r3, #0
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3710      	adds	r7, #16
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b084      	sub	sp, #16
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	60b9      	str	r1, [r7, #8]
 80032fe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003300:	e049      	b.n	8003396 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	695b      	ldr	r3, [r3, #20]
 8003308:	f003 0310 	and.w	r3, r3, #16
 800330c:	2b10      	cmp	r3, #16
 800330e:	d119      	bne.n	8003344 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f06f 0210 	mvn.w	r2, #16
 8003318:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2200      	movs	r2, #0
 800331e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2220      	movs	r2, #32
 8003324:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2200      	movs	r2, #0
 800332c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2200      	movs	r2, #0
 800333c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e030      	b.n	80033a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003344:	f7fe fd24 	bl	8001d90 <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	68ba      	ldr	r2, [r7, #8]
 8003350:	429a      	cmp	r2, r3
 8003352:	d302      	bcc.n	800335a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d11d      	bne.n	8003396 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	695b      	ldr	r3, [r3, #20]
 8003360:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003364:	2b40      	cmp	r3, #64	@ 0x40
 8003366:	d016      	beq.n	8003396 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2200      	movs	r2, #0
 800336c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2220      	movs	r2, #32
 8003372:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2200      	movs	r2, #0
 800337a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003382:	f043 0220 	orr.w	r2, r3, #32
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2200      	movs	r2, #0
 800338e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e007      	b.n	80033a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	695b      	ldr	r3, [r3, #20]
 800339c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033a0:	2b40      	cmp	r3, #64	@ 0x40
 80033a2:	d1ae      	bne.n	8003302 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80033a4:	2300      	movs	r3, #0
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3710      	adds	r7, #16
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}

080033ae <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80033ae:	b480      	push	{r7}
 80033b0:	b083      	sub	sp, #12
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	695b      	ldr	r3, [r3, #20]
 80033bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033c4:	d11b      	bne.n	80033fe <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80033ce:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2220      	movs	r2, #32
 80033da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ea:	f043 0204 	orr.w	r2, r3, #4
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e000      	b.n	8003400 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80033fe:	2300      	movs	r3, #0
}
 8003400:	4618      	mov	r0, r3
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr

0800340c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b088      	sub	sp, #32
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d101      	bne.n	800341e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e128      	b.n	8003670 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003424:	b2db      	uxtb	r3, r3
 8003426:	2b00      	cmp	r3, #0
 8003428:	d109      	bne.n	800343e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a90      	ldr	r2, [pc, #576]	@ (8003678 <HAL_I2S_Init+0x26c>)
 8003436:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f7fe f9e9 	bl	8001810 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2202      	movs	r2, #2
 8003442:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	69db      	ldr	r3, [r3, #28]
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	6812      	ldr	r2, [r2, #0]
 8003450:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003454:	f023 030f 	bic.w	r3, r3, #15
 8003458:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	2202      	movs	r2, #2
 8003460:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	695b      	ldr	r3, [r3, #20]
 8003466:	2b02      	cmp	r3, #2
 8003468:	d060      	beq.n	800352c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d102      	bne.n	8003478 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003472:	2310      	movs	r3, #16
 8003474:	617b      	str	r3, [r7, #20]
 8003476:	e001      	b.n	800347c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003478:	2320      	movs	r3, #32
 800347a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	2b20      	cmp	r3, #32
 8003482:	d802      	bhi.n	800348a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	005b      	lsls	r3, r3, #1
 8003488:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800348a:	2001      	movs	r0, #1
 800348c:	f002 fc2a 	bl	8005ce4 <HAL_RCCEx_GetPeriphCLKFreq>
 8003490:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	691b      	ldr	r3, [r3, #16]
 8003496:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800349a:	d125      	bne.n	80034e8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d010      	beq.n	80034c6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	68fa      	ldr	r2, [r7, #12]
 80034aa:	fbb2 f2f3 	udiv	r2, r2, r3
 80034ae:	4613      	mov	r3, r2
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	4413      	add	r3, r2
 80034b4:	005b      	lsls	r3, r3, #1
 80034b6:	461a      	mov	r2, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	695b      	ldr	r3, [r3, #20]
 80034bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80034c0:	3305      	adds	r3, #5
 80034c2:	613b      	str	r3, [r7, #16]
 80034c4:	e01f      	b.n	8003506 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	00db      	lsls	r3, r3, #3
 80034ca:	68fa      	ldr	r2, [r7, #12]
 80034cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80034d0:	4613      	mov	r3, r2
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	4413      	add	r3, r2
 80034d6:	005b      	lsls	r3, r3, #1
 80034d8:	461a      	mov	r2, r3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	695b      	ldr	r3, [r3, #20]
 80034de:	fbb2 f3f3 	udiv	r3, r2, r3
 80034e2:	3305      	adds	r3, #5
 80034e4:	613b      	str	r3, [r7, #16]
 80034e6:	e00e      	b.n	8003506 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80034e8:	68fa      	ldr	r2, [r7, #12]
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80034f0:	4613      	mov	r3, r2
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	4413      	add	r3, r2
 80034f6:	005b      	lsls	r3, r3, #1
 80034f8:	461a      	mov	r2, r3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	695b      	ldr	r3, [r3, #20]
 80034fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003502:	3305      	adds	r3, #5
 8003504:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	4a5c      	ldr	r2, [pc, #368]	@ (800367c <HAL_I2S_Init+0x270>)
 800350a:	fba2 2303 	umull	r2, r3, r2, r3
 800350e:	08db      	lsrs	r3, r3, #3
 8003510:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	f003 0301 	and.w	r3, r3, #1
 8003518:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800351a:	693a      	ldr	r2, [r7, #16]
 800351c:	69bb      	ldr	r3, [r7, #24]
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	085b      	lsrs	r3, r3, #1
 8003522:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	021b      	lsls	r3, r3, #8
 8003528:	61bb      	str	r3, [r7, #24]
 800352a:	e003      	b.n	8003534 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800352c:	2302      	movs	r3, #2
 800352e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003530:	2300      	movs	r3, #0
 8003532:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	2b01      	cmp	r3, #1
 8003538:	d902      	bls.n	8003540 <HAL_I2S_Init+0x134>
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	2bff      	cmp	r3, #255	@ 0xff
 800353e:	d907      	bls.n	8003550 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003544:	f043 0210 	orr.w	r2, r3, #16
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e08f      	b.n	8003670 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	691a      	ldr	r2, [r3, #16]
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	ea42 0103 	orr.w	r1, r2, r3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	69fa      	ldr	r2, [r7, #28]
 8003560:	430a      	orrs	r2, r1
 8003562:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	69db      	ldr	r3, [r3, #28]
 800356a:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800356e:	f023 030f 	bic.w	r3, r3, #15
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	6851      	ldr	r1, [r2, #4]
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	6892      	ldr	r2, [r2, #8]
 800357a:	4311      	orrs	r1, r2
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	68d2      	ldr	r2, [r2, #12]
 8003580:	4311      	orrs	r1, r2
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	6992      	ldr	r2, [r2, #24]
 8003586:	430a      	orrs	r2, r1
 8003588:	431a      	orrs	r2, r3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003592:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6a1b      	ldr	r3, [r3, #32]
 8003598:	2b01      	cmp	r3, #1
 800359a:	d161      	bne.n	8003660 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4a38      	ldr	r2, [pc, #224]	@ (8003680 <HAL_I2S_Init+0x274>)
 80035a0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a37      	ldr	r2, [pc, #220]	@ (8003684 <HAL_I2S_Init+0x278>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d101      	bne.n	80035b0 <HAL_I2S_Init+0x1a4>
 80035ac:	4b36      	ldr	r3, [pc, #216]	@ (8003688 <HAL_I2S_Init+0x27c>)
 80035ae:	e001      	b.n	80035b4 <HAL_I2S_Init+0x1a8>
 80035b0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80035b4:	69db      	ldr	r3, [r3, #28]
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	6812      	ldr	r2, [r2, #0]
 80035ba:	4932      	ldr	r1, [pc, #200]	@ (8003684 <HAL_I2S_Init+0x278>)
 80035bc:	428a      	cmp	r2, r1
 80035be:	d101      	bne.n	80035c4 <HAL_I2S_Init+0x1b8>
 80035c0:	4a31      	ldr	r2, [pc, #196]	@ (8003688 <HAL_I2S_Init+0x27c>)
 80035c2:	e001      	b.n	80035c8 <HAL_I2S_Init+0x1bc>
 80035c4:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80035c8:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80035cc:	f023 030f 	bic.w	r3, r3, #15
 80035d0:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a2b      	ldr	r2, [pc, #172]	@ (8003684 <HAL_I2S_Init+0x278>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d101      	bne.n	80035e0 <HAL_I2S_Init+0x1d4>
 80035dc:	4b2a      	ldr	r3, [pc, #168]	@ (8003688 <HAL_I2S_Init+0x27c>)
 80035de:	e001      	b.n	80035e4 <HAL_I2S_Init+0x1d8>
 80035e0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80035e4:	2202      	movs	r2, #2
 80035e6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a25      	ldr	r2, [pc, #148]	@ (8003684 <HAL_I2S_Init+0x278>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d101      	bne.n	80035f6 <HAL_I2S_Init+0x1ea>
 80035f2:	4b25      	ldr	r3, [pc, #148]	@ (8003688 <HAL_I2S_Init+0x27c>)
 80035f4:	e001      	b.n	80035fa <HAL_I2S_Init+0x1ee>
 80035f6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80035fa:	69db      	ldr	r3, [r3, #28]
 80035fc:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003606:	d003      	beq.n	8003610 <HAL_I2S_Init+0x204>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d103      	bne.n	8003618 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003610:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003614:	613b      	str	r3, [r7, #16]
 8003616:	e001      	b.n	800361c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003618:	2300      	movs	r3, #0
 800361a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003626:	4313      	orrs	r3, r2
 8003628:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003630:	4313      	orrs	r3, r2
 8003632:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	699b      	ldr	r3, [r3, #24]
 8003638:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800363a:	4313      	orrs	r3, r2
 800363c:	b29a      	uxth	r2, r3
 800363e:	897b      	ldrh	r3, [r7, #10]
 8003640:	4313      	orrs	r3, r2
 8003642:	b29b      	uxth	r3, r3
 8003644:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003648:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a0d      	ldr	r2, [pc, #52]	@ (8003684 <HAL_I2S_Init+0x278>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d101      	bne.n	8003658 <HAL_I2S_Init+0x24c>
 8003654:	4b0c      	ldr	r3, [pc, #48]	@ (8003688 <HAL_I2S_Init+0x27c>)
 8003656:	e001      	b.n	800365c <HAL_I2S_Init+0x250>
 8003658:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800365c:	897a      	ldrh	r2, [r7, #10]
 800365e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2201      	movs	r2, #1
 800366a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 800366e:	2300      	movs	r3, #0
}
 8003670:	4618      	mov	r0, r3
 8003672:	3720      	adds	r7, #32
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}
 8003678:	08003783 	.word	0x08003783
 800367c:	cccccccd 	.word	0xcccccccd
 8003680:	08003899 	.word	0x08003899
 8003684:	40003800 	.word	0x40003800
 8003688:	40003400 	.word	0x40003400

0800368c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800368c:	b480      	push	{r7}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003694:	bf00      	nop
 8003696:	370c      	adds	r7, #12
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr

080036a0 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80036a8:	bf00      	nop
 80036aa:	370c      	adds	r7, #12
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr

080036b4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80036bc:	bf00      	nop
 80036be:	370c      	adds	r7, #12
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b082      	sub	sp, #8
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036d4:	881a      	ldrh	r2, [r3, #0]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036e0:	1c9a      	adds	r2, r3, #2
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	3b01      	subs	r3, #1
 80036ee:	b29a      	uxth	r2, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036f8:	b29b      	uxth	r3, r3
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d10e      	bne.n	800371c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	685a      	ldr	r2, [r3, #4]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800370c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2201      	movs	r2, #1
 8003712:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f7ff ffb8 	bl	800368c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800371c:	bf00      	nop
 800371e:	3708      	adds	r7, #8
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}

08003724 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	68da      	ldr	r2, [r3, #12]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003736:	b292      	uxth	r2, r2
 8003738:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800373e:	1c9a      	adds	r2, r3, #2
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003748:	b29b      	uxth	r3, r3
 800374a:	3b01      	subs	r3, #1
 800374c:	b29a      	uxth	r2, r3
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003756:	b29b      	uxth	r3, r3
 8003758:	2b00      	cmp	r3, #0
 800375a:	d10e      	bne.n	800377a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	685a      	ldr	r2, [r3, #4]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800376a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f7ff ff93 	bl	80036a0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800377a:	bf00      	nop
 800377c:	3708      	adds	r7, #8
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}

08003782 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003782:	b580      	push	{r7, lr}
 8003784:	b086      	sub	sp, #24
 8003786:	af00      	add	r7, sp, #0
 8003788:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003798:	b2db      	uxtb	r3, r3
 800379a:	2b04      	cmp	r3, #4
 800379c:	d13a      	bne.n	8003814 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	f003 0301 	and.w	r3, r3, #1
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d109      	bne.n	80037bc <I2S_IRQHandler+0x3a>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037b2:	2b40      	cmp	r3, #64	@ 0x40
 80037b4:	d102      	bne.n	80037bc <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f7ff ffb4 	bl	8003724 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037c2:	2b40      	cmp	r3, #64	@ 0x40
 80037c4:	d126      	bne.n	8003814 <I2S_IRQHandler+0x92>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f003 0320 	and.w	r3, r3, #32
 80037d0:	2b20      	cmp	r3, #32
 80037d2:	d11f      	bne.n	8003814 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	685a      	ldr	r2, [r3, #4]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80037e2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80037e4:	2300      	movs	r3, #0
 80037e6:	613b      	str	r3, [r7, #16]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	613b      	str	r3, [r7, #16]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	613b      	str	r3, [r7, #16]
 80037f8:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2201      	movs	r2, #1
 80037fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003806:	f043 0202 	orr.w	r2, r3, #2
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f7ff ff50 	bl	80036b4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800381a:	b2db      	uxtb	r3, r3
 800381c:	2b03      	cmp	r3, #3
 800381e:	d136      	bne.n	800388e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	f003 0302 	and.w	r3, r3, #2
 8003826:	2b02      	cmp	r3, #2
 8003828:	d109      	bne.n	800383e <I2S_IRQHandler+0xbc>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003834:	2b80      	cmp	r3, #128	@ 0x80
 8003836:	d102      	bne.n	800383e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f7ff ff45 	bl	80036c8 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	f003 0308 	and.w	r3, r3, #8
 8003844:	2b08      	cmp	r3, #8
 8003846:	d122      	bne.n	800388e <I2S_IRQHandler+0x10c>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	f003 0320 	and.w	r3, r3, #32
 8003852:	2b20      	cmp	r3, #32
 8003854:	d11b      	bne.n	800388e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	685a      	ldr	r2, [r3, #4]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003864:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003866:	2300      	movs	r3, #0
 8003868:	60fb      	str	r3, [r7, #12]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	60fb      	str	r3, [r7, #12]
 8003872:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003880:	f043 0204 	orr.w	r2, r3, #4
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f7ff ff13 	bl	80036b4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800388e:	bf00      	nop
 8003890:	3718      	adds	r7, #24
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
	...

08003898 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b088      	sub	sp, #32
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a92      	ldr	r2, [pc, #584]	@ (8003af8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d101      	bne.n	80038b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80038b2:	4b92      	ldr	r3, [pc, #584]	@ (8003afc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80038b4:	e001      	b.n	80038ba <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80038b6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a8b      	ldr	r2, [pc, #556]	@ (8003af8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d101      	bne.n	80038d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80038d0:	4b8a      	ldr	r3, [pc, #552]	@ (8003afc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80038d2:	e001      	b.n	80038d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80038d4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038e4:	d004      	beq.n	80038f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	f040 8099 	bne.w	8003a22 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	f003 0302 	and.w	r3, r3, #2
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d107      	bne.n	800390a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003900:	2b00      	cmp	r3, #0
 8003902:	d002      	beq.n	800390a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f000 f925 	bl	8003b54 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	f003 0301 	and.w	r3, r3, #1
 8003910:	2b01      	cmp	r3, #1
 8003912:	d107      	bne.n	8003924 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800391a:	2b00      	cmp	r3, #0
 800391c:	d002      	beq.n	8003924 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f000 f9c8 	bl	8003cb4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003924:	69bb      	ldr	r3, [r7, #24]
 8003926:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800392a:	2b40      	cmp	r3, #64	@ 0x40
 800392c:	d13a      	bne.n	80039a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	f003 0320 	and.w	r3, r3, #32
 8003934:	2b00      	cmp	r3, #0
 8003936:	d035      	beq.n	80039a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a6e      	ldr	r2, [pc, #440]	@ (8003af8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d101      	bne.n	8003946 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003942:	4b6e      	ldr	r3, [pc, #440]	@ (8003afc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003944:	e001      	b.n	800394a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003946:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800394a:	685a      	ldr	r2, [r3, #4]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4969      	ldr	r1, [pc, #420]	@ (8003af8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003952:	428b      	cmp	r3, r1
 8003954:	d101      	bne.n	800395a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003956:	4b69      	ldr	r3, [pc, #420]	@ (8003afc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003958:	e001      	b.n	800395e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800395a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800395e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003962:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	685a      	ldr	r2, [r3, #4]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003972:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003974:	2300      	movs	r3, #0
 8003976:	60fb      	str	r3, [r7, #12]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	60fb      	str	r3, [r7, #12]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	60fb      	str	r3, [r7, #12]
 8003988:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2201      	movs	r2, #1
 800398e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003996:	f043 0202 	orr.w	r2, r3, #2
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f7ff fe88 	bl	80036b4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	f003 0308 	and.w	r3, r3, #8
 80039aa:	2b08      	cmp	r3, #8
 80039ac:	f040 80c3 	bne.w	8003b36 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	f003 0320 	and.w	r3, r3, #32
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	f000 80bd 	beq.w	8003b36 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	685a      	ldr	r2, [r3, #4]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80039ca:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a49      	ldr	r2, [pc, #292]	@ (8003af8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d101      	bne.n	80039da <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80039d6:	4b49      	ldr	r3, [pc, #292]	@ (8003afc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80039d8:	e001      	b.n	80039de <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80039da:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80039de:	685a      	ldr	r2, [r3, #4]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4944      	ldr	r1, [pc, #272]	@ (8003af8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80039e6:	428b      	cmp	r3, r1
 80039e8:	d101      	bne.n	80039ee <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80039ea:	4b44      	ldr	r3, [pc, #272]	@ (8003afc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80039ec:	e001      	b.n	80039f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80039ee:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80039f2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80039f6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80039f8:	2300      	movs	r3, #0
 80039fa:	60bb      	str	r3, [r7, #8]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	60bb      	str	r3, [r7, #8]
 8003a04:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2201      	movs	r2, #1
 8003a0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a12:	f043 0204 	orr.w	r2, r3, #4
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f7ff fe4a 	bl	80036b4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003a20:	e089      	b.n	8003b36 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003a22:	69bb      	ldr	r3, [r7, #24]
 8003a24:	f003 0302 	and.w	r3, r3, #2
 8003a28:	2b02      	cmp	r3, #2
 8003a2a:	d107      	bne.n	8003a3c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d002      	beq.n	8003a3c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f000 f8be 	bl	8003bb8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	f003 0301 	and.w	r3, r3, #1
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d107      	bne.n	8003a56 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d002      	beq.n	8003a56 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f000 f8fd 	bl	8003c50 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a5c:	2b40      	cmp	r3, #64	@ 0x40
 8003a5e:	d12f      	bne.n	8003ac0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	f003 0320 	and.w	r3, r3, #32
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d02a      	beq.n	8003ac0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	685a      	ldr	r2, [r3, #4]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003a78:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a1e      	ldr	r2, [pc, #120]	@ (8003af8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d101      	bne.n	8003a88 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003a84:	4b1d      	ldr	r3, [pc, #116]	@ (8003afc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003a86:	e001      	b.n	8003a8c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003a88:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003a8c:	685a      	ldr	r2, [r3, #4]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4919      	ldr	r1, [pc, #100]	@ (8003af8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003a94:	428b      	cmp	r3, r1
 8003a96:	d101      	bne.n	8003a9c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003a98:	4b18      	ldr	r3, [pc, #96]	@ (8003afc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003a9a:	e001      	b.n	8003aa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003a9c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003aa0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003aa4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ab2:	f043 0202 	orr.w	r2, r3, #2
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f7ff fdfa 	bl	80036b4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003ac0:	69bb      	ldr	r3, [r7, #24]
 8003ac2:	f003 0308 	and.w	r3, r3, #8
 8003ac6:	2b08      	cmp	r3, #8
 8003ac8:	d136      	bne.n	8003b38 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	f003 0320 	and.w	r3, r3, #32
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d031      	beq.n	8003b38 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a07      	ldr	r2, [pc, #28]	@ (8003af8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d101      	bne.n	8003ae2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003ade:	4b07      	ldr	r3, [pc, #28]	@ (8003afc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ae0:	e001      	b.n	8003ae6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003ae2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ae6:	685a      	ldr	r2, [r3, #4]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4902      	ldr	r1, [pc, #8]	@ (8003af8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003aee:	428b      	cmp	r3, r1
 8003af0:	d106      	bne.n	8003b00 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003af2:	4b02      	ldr	r3, [pc, #8]	@ (8003afc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003af4:	e006      	b.n	8003b04 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003af6:	bf00      	nop
 8003af8:	40003800 	.word	0x40003800
 8003afc:	40003400 	.word	0x40003400
 8003b00:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003b04:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003b08:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	685a      	ldr	r2, [r3, #4]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003b18:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b26:	f043 0204 	orr.w	r2, r3, #4
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f7ff fdc0 	bl	80036b4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b34:	e000      	b.n	8003b38 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003b36:	bf00      	nop
}
 8003b38:	bf00      	nop
 8003b3a:	3720      	adds	r7, #32
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003b48:	bf00      	nop
 8003b4a:	370c      	adds	r7, #12
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr

08003b54 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b082      	sub	sp, #8
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b60:	1c99      	adds	r1, r3, #2
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	6251      	str	r1, [r2, #36]	@ 0x24
 8003b66:	881a      	ldrh	r2, [r3, #0]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	3b01      	subs	r3, #1
 8003b76:	b29a      	uxth	r2, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d113      	bne.n	8003bae <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	685a      	ldr	r2, [r3, #4]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003b94:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d106      	bne.n	8003bae <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f7ff ffc9 	bl	8003b40 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003bae:	bf00      	nop
 8003bb0:	3708      	adds	r7, #8
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
	...

08003bb8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b082      	sub	sp, #8
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bc4:	1c99      	adds	r1, r3, #2
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	6251      	str	r1, [r2, #36]	@ 0x24
 8003bca:	8819      	ldrh	r1, [r3, #0]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a1d      	ldr	r2, [pc, #116]	@ (8003c48 <I2SEx_TxISR_I2SExt+0x90>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d101      	bne.n	8003bda <I2SEx_TxISR_I2SExt+0x22>
 8003bd6:	4b1d      	ldr	r3, [pc, #116]	@ (8003c4c <I2SEx_TxISR_I2SExt+0x94>)
 8003bd8:	e001      	b.n	8003bde <I2SEx_TxISR_I2SExt+0x26>
 8003bda:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003bde:	460a      	mov	r2, r1
 8003be0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	3b01      	subs	r3, #1
 8003bea:	b29a      	uxth	r2, r3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d121      	bne.n	8003c3e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a12      	ldr	r2, [pc, #72]	@ (8003c48 <I2SEx_TxISR_I2SExt+0x90>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d101      	bne.n	8003c08 <I2SEx_TxISR_I2SExt+0x50>
 8003c04:	4b11      	ldr	r3, [pc, #68]	@ (8003c4c <I2SEx_TxISR_I2SExt+0x94>)
 8003c06:	e001      	b.n	8003c0c <I2SEx_TxISR_I2SExt+0x54>
 8003c08:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003c0c:	685a      	ldr	r2, [r3, #4]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	490d      	ldr	r1, [pc, #52]	@ (8003c48 <I2SEx_TxISR_I2SExt+0x90>)
 8003c14:	428b      	cmp	r3, r1
 8003c16:	d101      	bne.n	8003c1c <I2SEx_TxISR_I2SExt+0x64>
 8003c18:	4b0c      	ldr	r3, [pc, #48]	@ (8003c4c <I2SEx_TxISR_I2SExt+0x94>)
 8003c1a:	e001      	b.n	8003c20 <I2SEx_TxISR_I2SExt+0x68>
 8003c1c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003c20:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003c24:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d106      	bne.n	8003c3e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f7ff ff81 	bl	8003b40 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003c3e:	bf00      	nop
 8003c40:	3708      	adds	r7, #8
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	40003800 	.word	0x40003800
 8003c4c:	40003400 	.word	0x40003400

08003c50 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b082      	sub	sp, #8
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	68d8      	ldr	r0, [r3, #12]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c62:	1c99      	adds	r1, r3, #2
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8003c68:	b282      	uxth	r2, r0
 8003c6a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	3b01      	subs	r3, #1
 8003c74:	b29a      	uxth	r2, r3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d113      	bne.n	8003cac <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	685a      	ldr	r2, [r3, #4]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003c92:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d106      	bne.n	8003cac <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f7ff ff4a 	bl	8003b40 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003cac:	bf00      	nop
 8003cae:	3708      	adds	r7, #8
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a20      	ldr	r2, [pc, #128]	@ (8003d44 <I2SEx_RxISR_I2SExt+0x90>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d101      	bne.n	8003cca <I2SEx_RxISR_I2SExt+0x16>
 8003cc6:	4b20      	ldr	r3, [pc, #128]	@ (8003d48 <I2SEx_RxISR_I2SExt+0x94>)
 8003cc8:	e001      	b.n	8003cce <I2SEx_RxISR_I2SExt+0x1a>
 8003cca:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003cce:	68d8      	ldr	r0, [r3, #12]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cd4:	1c99      	adds	r1, r3, #2
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8003cda:	b282      	uxth	r2, r0
 8003cdc:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	3b01      	subs	r3, #1
 8003ce6:	b29a      	uxth	r2, r3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d121      	bne.n	8003d3a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a12      	ldr	r2, [pc, #72]	@ (8003d44 <I2SEx_RxISR_I2SExt+0x90>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d101      	bne.n	8003d04 <I2SEx_RxISR_I2SExt+0x50>
 8003d00:	4b11      	ldr	r3, [pc, #68]	@ (8003d48 <I2SEx_RxISR_I2SExt+0x94>)
 8003d02:	e001      	b.n	8003d08 <I2SEx_RxISR_I2SExt+0x54>
 8003d04:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003d08:	685a      	ldr	r2, [r3, #4]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	490d      	ldr	r1, [pc, #52]	@ (8003d44 <I2SEx_RxISR_I2SExt+0x90>)
 8003d10:	428b      	cmp	r3, r1
 8003d12:	d101      	bne.n	8003d18 <I2SEx_RxISR_I2SExt+0x64>
 8003d14:	4b0c      	ldr	r3, [pc, #48]	@ (8003d48 <I2SEx_RxISR_I2SExt+0x94>)
 8003d16:	e001      	b.n	8003d1c <I2SEx_RxISR_I2SExt+0x68>
 8003d18:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003d1c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003d20:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d106      	bne.n	8003d3a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	f7ff ff03 	bl	8003b40 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003d3a:	bf00      	nop
 8003d3c:	3708      	adds	r7, #8
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	bf00      	nop
 8003d44:	40003800 	.word	0x40003800
 8003d48:	40003400 	.word	0x40003400

08003d4c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b086      	sub	sp, #24
 8003d50:	af02      	add	r7, sp, #8
 8003d52:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d101      	bne.n	8003d5e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e101      	b.n	8003f62 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d106      	bne.n	8003d7e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2200      	movs	r2, #0
 8003d74:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f006 f881 	bl	8009e80 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2203      	movs	r2, #3
 8003d82:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003d8c:	d102      	bne.n	8003d94 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f002 fc68 	bl	800666e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6818      	ldr	r0, [r3, #0]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	7c1a      	ldrb	r2, [r3, #16]
 8003da6:	f88d 2000 	strb.w	r2, [sp]
 8003daa:	3304      	adds	r3, #4
 8003dac:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003dae:	f002 fb47 	bl	8006440 <USB_CoreInit>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d005      	beq.n	8003dc4 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2202      	movs	r2, #2
 8003dbc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e0ce      	b.n	8003f62 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2100      	movs	r1, #0
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f002 fc60 	bl	8006690 <USB_SetCurrentMode>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d005      	beq.n	8003de2 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2202      	movs	r2, #2
 8003dda:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e0bf      	b.n	8003f62 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003de2:	2300      	movs	r3, #0
 8003de4:	73fb      	strb	r3, [r7, #15]
 8003de6:	e04a      	b.n	8003e7e <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003de8:	7bfa      	ldrb	r2, [r7, #15]
 8003dea:	6879      	ldr	r1, [r7, #4]
 8003dec:	4613      	mov	r3, r2
 8003dee:	00db      	lsls	r3, r3, #3
 8003df0:	4413      	add	r3, r2
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	440b      	add	r3, r1
 8003df6:	3315      	adds	r3, #21
 8003df8:	2201      	movs	r2, #1
 8003dfa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003dfc:	7bfa      	ldrb	r2, [r7, #15]
 8003dfe:	6879      	ldr	r1, [r7, #4]
 8003e00:	4613      	mov	r3, r2
 8003e02:	00db      	lsls	r3, r3, #3
 8003e04:	4413      	add	r3, r2
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	440b      	add	r3, r1
 8003e0a:	3314      	adds	r3, #20
 8003e0c:	7bfa      	ldrb	r2, [r7, #15]
 8003e0e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003e10:	7bfa      	ldrb	r2, [r7, #15]
 8003e12:	7bfb      	ldrb	r3, [r7, #15]
 8003e14:	b298      	uxth	r0, r3
 8003e16:	6879      	ldr	r1, [r7, #4]
 8003e18:	4613      	mov	r3, r2
 8003e1a:	00db      	lsls	r3, r3, #3
 8003e1c:	4413      	add	r3, r2
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	440b      	add	r3, r1
 8003e22:	332e      	adds	r3, #46	@ 0x2e
 8003e24:	4602      	mov	r2, r0
 8003e26:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003e28:	7bfa      	ldrb	r2, [r7, #15]
 8003e2a:	6879      	ldr	r1, [r7, #4]
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	00db      	lsls	r3, r3, #3
 8003e30:	4413      	add	r3, r2
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	440b      	add	r3, r1
 8003e36:	3318      	adds	r3, #24
 8003e38:	2200      	movs	r2, #0
 8003e3a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003e3c:	7bfa      	ldrb	r2, [r7, #15]
 8003e3e:	6879      	ldr	r1, [r7, #4]
 8003e40:	4613      	mov	r3, r2
 8003e42:	00db      	lsls	r3, r3, #3
 8003e44:	4413      	add	r3, r2
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	440b      	add	r3, r1
 8003e4a:	331c      	adds	r3, #28
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003e50:	7bfa      	ldrb	r2, [r7, #15]
 8003e52:	6879      	ldr	r1, [r7, #4]
 8003e54:	4613      	mov	r3, r2
 8003e56:	00db      	lsls	r3, r3, #3
 8003e58:	4413      	add	r3, r2
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	440b      	add	r3, r1
 8003e5e:	3320      	adds	r3, #32
 8003e60:	2200      	movs	r2, #0
 8003e62:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003e64:	7bfa      	ldrb	r2, [r7, #15]
 8003e66:	6879      	ldr	r1, [r7, #4]
 8003e68:	4613      	mov	r3, r2
 8003e6a:	00db      	lsls	r3, r3, #3
 8003e6c:	4413      	add	r3, r2
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	440b      	add	r3, r1
 8003e72:	3324      	adds	r3, #36	@ 0x24
 8003e74:	2200      	movs	r2, #0
 8003e76:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e78:	7bfb      	ldrb	r3, [r7, #15]
 8003e7a:	3301      	adds	r3, #1
 8003e7c:	73fb      	strb	r3, [r7, #15]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	791b      	ldrb	r3, [r3, #4]
 8003e82:	7bfa      	ldrb	r2, [r7, #15]
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d3af      	bcc.n	8003de8 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e88:	2300      	movs	r3, #0
 8003e8a:	73fb      	strb	r3, [r7, #15]
 8003e8c:	e044      	b.n	8003f18 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003e8e:	7bfa      	ldrb	r2, [r7, #15]
 8003e90:	6879      	ldr	r1, [r7, #4]
 8003e92:	4613      	mov	r3, r2
 8003e94:	00db      	lsls	r3, r3, #3
 8003e96:	4413      	add	r3, r2
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	440b      	add	r3, r1
 8003e9c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003ea4:	7bfa      	ldrb	r2, [r7, #15]
 8003ea6:	6879      	ldr	r1, [r7, #4]
 8003ea8:	4613      	mov	r3, r2
 8003eaa:	00db      	lsls	r3, r3, #3
 8003eac:	4413      	add	r3, r2
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	440b      	add	r3, r1
 8003eb2:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003eb6:	7bfa      	ldrb	r2, [r7, #15]
 8003eb8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003eba:	7bfa      	ldrb	r2, [r7, #15]
 8003ebc:	6879      	ldr	r1, [r7, #4]
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	00db      	lsls	r3, r3, #3
 8003ec2:	4413      	add	r3, r2
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	440b      	add	r3, r1
 8003ec8:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003ecc:	2200      	movs	r2, #0
 8003ece:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003ed0:	7bfa      	ldrb	r2, [r7, #15]
 8003ed2:	6879      	ldr	r1, [r7, #4]
 8003ed4:	4613      	mov	r3, r2
 8003ed6:	00db      	lsls	r3, r3, #3
 8003ed8:	4413      	add	r3, r2
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	440b      	add	r3, r1
 8003ede:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003ee6:	7bfa      	ldrb	r2, [r7, #15]
 8003ee8:	6879      	ldr	r1, [r7, #4]
 8003eea:	4613      	mov	r3, r2
 8003eec:	00db      	lsls	r3, r3, #3
 8003eee:	4413      	add	r3, r2
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	440b      	add	r3, r1
 8003ef4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003ef8:	2200      	movs	r2, #0
 8003efa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003efc:	7bfa      	ldrb	r2, [r7, #15]
 8003efe:	6879      	ldr	r1, [r7, #4]
 8003f00:	4613      	mov	r3, r2
 8003f02:	00db      	lsls	r3, r3, #3
 8003f04:	4413      	add	r3, r2
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	440b      	add	r3, r1
 8003f0a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003f0e:	2200      	movs	r2, #0
 8003f10:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f12:	7bfb      	ldrb	r3, [r7, #15]
 8003f14:	3301      	adds	r3, #1
 8003f16:	73fb      	strb	r3, [r7, #15]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	791b      	ldrb	r3, [r3, #4]
 8003f1c:	7bfa      	ldrb	r2, [r7, #15]
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d3b5      	bcc.n	8003e8e <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6818      	ldr	r0, [r3, #0]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	7c1a      	ldrb	r2, [r3, #16]
 8003f2a:	f88d 2000 	strb.w	r2, [sp]
 8003f2e:	3304      	adds	r3, #4
 8003f30:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f32:	f002 fbf9 	bl	8006728 <USB_DevInit>
 8003f36:	4603      	mov	r3, r0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d005      	beq.n	8003f48 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2202      	movs	r2, #2
 8003f40:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	e00c      	b.n	8003f62 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2201      	movs	r2, #1
 8003f52:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f003 fc43 	bl	80077e6 <USB_DevDisconnect>

  return HAL_OK;
 8003f60:	2300      	movs	r3, #0
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3710      	adds	r7, #16
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}

08003f6a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003f6a:	b580      	push	{r7, lr}
 8003f6c:	b084      	sub	sp, #16
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d101      	bne.n	8003f86 <HAL_PCD_Start+0x1c>
 8003f82:	2302      	movs	r3, #2
 8003f84:	e022      	b.n	8003fcc <HAL_PCD_Start+0x62>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2201      	movs	r2, #1
 8003f8a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d009      	beq.n	8003fae <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d105      	bne.n	8003fae <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fa6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f002 fb4a 	bl	800664c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f003 fbf1 	bl	80077a4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003fca:	2300      	movs	r3, #0
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3710      	adds	r7, #16
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}

08003fd4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003fd4:	b590      	push	{r4, r7, lr}
 8003fd6:	b08d      	sub	sp, #52	@ 0x34
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fe2:	6a3b      	ldr	r3, [r7, #32]
 8003fe4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f003 fcaf 	bl	800794e <USB_GetMode>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	f040 848c 	bne.w	8004910 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f003 fc13 	bl	8007828 <USB_ReadInterrupts>
 8004002:	4603      	mov	r3, r0
 8004004:	2b00      	cmp	r3, #0
 8004006:	f000 8482 	beq.w	800490e <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	0a1b      	lsrs	r3, r3, #8
 8004014:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4618      	mov	r0, r3
 8004024:	f003 fc00 	bl	8007828 <USB_ReadInterrupts>
 8004028:	4603      	mov	r3, r0
 800402a:	f003 0302 	and.w	r3, r3, #2
 800402e:	2b02      	cmp	r3, #2
 8004030:	d107      	bne.n	8004042 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	695a      	ldr	r2, [r3, #20]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f002 0202 	and.w	r2, r2, #2
 8004040:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4618      	mov	r0, r3
 8004048:	f003 fbee 	bl	8007828 <USB_ReadInterrupts>
 800404c:	4603      	mov	r3, r0
 800404e:	f003 0310 	and.w	r3, r3, #16
 8004052:	2b10      	cmp	r3, #16
 8004054:	d161      	bne.n	800411a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	699a      	ldr	r2, [r3, #24]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f022 0210 	bic.w	r2, r2, #16
 8004064:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004066:	6a3b      	ldr	r3, [r7, #32]
 8004068:	6a1b      	ldr	r3, [r3, #32]
 800406a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800406c:	69bb      	ldr	r3, [r7, #24]
 800406e:	f003 020f 	and.w	r2, r3, #15
 8004072:	4613      	mov	r3, r2
 8004074:	00db      	lsls	r3, r3, #3
 8004076:	4413      	add	r3, r2
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	4413      	add	r3, r2
 8004082:	3304      	adds	r3, #4
 8004084:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004086:	69bb      	ldr	r3, [r7, #24]
 8004088:	0c5b      	lsrs	r3, r3, #17
 800408a:	f003 030f 	and.w	r3, r3, #15
 800408e:	2b02      	cmp	r3, #2
 8004090:	d124      	bne.n	80040dc <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004092:	69ba      	ldr	r2, [r7, #24]
 8004094:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8004098:	4013      	ands	r3, r2
 800409a:	2b00      	cmp	r3, #0
 800409c:	d035      	beq.n	800410a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80040a2:	69bb      	ldr	r3, [r7, #24]
 80040a4:	091b      	lsrs	r3, r3, #4
 80040a6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80040a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80040ac:	b29b      	uxth	r3, r3
 80040ae:	461a      	mov	r2, r3
 80040b0:	6a38      	ldr	r0, [r7, #32]
 80040b2:	f003 fa25 	bl	8007500 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	68da      	ldr	r2, [r3, #12]
 80040ba:	69bb      	ldr	r3, [r7, #24]
 80040bc:	091b      	lsrs	r3, r3, #4
 80040be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80040c2:	441a      	add	r2, r3
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	695a      	ldr	r2, [r3, #20]
 80040cc:	69bb      	ldr	r3, [r7, #24]
 80040ce:	091b      	lsrs	r3, r3, #4
 80040d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80040d4:	441a      	add	r2, r3
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	615a      	str	r2, [r3, #20]
 80040da:	e016      	b.n	800410a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	0c5b      	lsrs	r3, r3, #17
 80040e0:	f003 030f 	and.w	r3, r3, #15
 80040e4:	2b06      	cmp	r3, #6
 80040e6:	d110      	bne.n	800410a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80040ee:	2208      	movs	r2, #8
 80040f0:	4619      	mov	r1, r3
 80040f2:	6a38      	ldr	r0, [r7, #32]
 80040f4:	f003 fa04 	bl	8007500 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	695a      	ldr	r2, [r3, #20]
 80040fc:	69bb      	ldr	r3, [r7, #24]
 80040fe:	091b      	lsrs	r3, r3, #4
 8004100:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004104:	441a      	add	r2, r3
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	699a      	ldr	r2, [r3, #24]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f042 0210 	orr.w	r2, r2, #16
 8004118:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4618      	mov	r0, r3
 8004120:	f003 fb82 	bl	8007828 <USB_ReadInterrupts>
 8004124:	4603      	mov	r3, r0
 8004126:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800412a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800412e:	f040 80a7 	bne.w	8004280 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004132:	2300      	movs	r3, #0
 8004134:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4618      	mov	r0, r3
 800413c:	f003 fb87 	bl	800784e <USB_ReadDevAllOutEpInterrupt>
 8004140:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8004142:	e099      	b.n	8004278 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004146:	f003 0301 	and.w	r3, r3, #1
 800414a:	2b00      	cmp	r3, #0
 800414c:	f000 808e 	beq.w	800426c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004156:	b2d2      	uxtb	r2, r2
 8004158:	4611      	mov	r1, r2
 800415a:	4618      	mov	r0, r3
 800415c:	f003 fbab 	bl	80078b6 <USB_ReadDevOutEPInterrupt>
 8004160:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	f003 0301 	and.w	r3, r3, #1
 8004168:	2b00      	cmp	r3, #0
 800416a:	d00c      	beq.n	8004186 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800416c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800416e:	015a      	lsls	r2, r3, #5
 8004170:	69fb      	ldr	r3, [r7, #28]
 8004172:	4413      	add	r3, r2
 8004174:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004178:	461a      	mov	r2, r3
 800417a:	2301      	movs	r3, #1
 800417c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800417e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f000 fea3 	bl	8004ecc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	f003 0308 	and.w	r3, r3, #8
 800418c:	2b00      	cmp	r3, #0
 800418e:	d00c      	beq.n	80041aa <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004192:	015a      	lsls	r2, r3, #5
 8004194:	69fb      	ldr	r3, [r7, #28]
 8004196:	4413      	add	r3, r2
 8004198:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800419c:	461a      	mov	r2, r3
 800419e:	2308      	movs	r3, #8
 80041a0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80041a2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f000 ff79 	bl	800509c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	f003 0310 	and.w	r3, r3, #16
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d008      	beq.n	80041c6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80041b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041b6:	015a      	lsls	r2, r3, #5
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	4413      	add	r3, r2
 80041bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041c0:	461a      	mov	r2, r3
 80041c2:	2310      	movs	r3, #16
 80041c4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	f003 0302 	and.w	r3, r3, #2
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d030      	beq.n	8004232 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80041d0:	6a3b      	ldr	r3, [r7, #32]
 80041d2:	695b      	ldr	r3, [r3, #20]
 80041d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041d8:	2b80      	cmp	r3, #128	@ 0x80
 80041da:	d109      	bne.n	80041f0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80041dc:	69fb      	ldr	r3, [r7, #28]
 80041de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	69fa      	ldr	r2, [r7, #28]
 80041e6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80041ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80041ee:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80041f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041f2:	4613      	mov	r3, r2
 80041f4:	00db      	lsls	r3, r3, #3
 80041f6:	4413      	add	r3, r2
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	4413      	add	r3, r2
 8004202:	3304      	adds	r3, #4
 8004204:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	78db      	ldrb	r3, [r3, #3]
 800420a:	2b01      	cmp	r3, #1
 800420c:	d108      	bne.n	8004220 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	2200      	movs	r2, #0
 8004212:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004216:	b2db      	uxtb	r3, r3
 8004218:	4619      	mov	r1, r3
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f005 ff44 	bl	800a0a8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004222:	015a      	lsls	r2, r3, #5
 8004224:	69fb      	ldr	r3, [r7, #28]
 8004226:	4413      	add	r3, r2
 8004228:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800422c:	461a      	mov	r2, r3
 800422e:	2302      	movs	r3, #2
 8004230:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	f003 0320 	and.w	r3, r3, #32
 8004238:	2b00      	cmp	r3, #0
 800423a:	d008      	beq.n	800424e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800423c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800423e:	015a      	lsls	r2, r3, #5
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	4413      	add	r3, r2
 8004244:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004248:	461a      	mov	r2, r3
 800424a:	2320      	movs	r3, #32
 800424c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004254:	2b00      	cmp	r3, #0
 8004256:	d009      	beq.n	800426c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800425a:	015a      	lsls	r2, r3, #5
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	4413      	add	r3, r2
 8004260:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004264:	461a      	mov	r2, r3
 8004266:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800426a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800426c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800426e:	3301      	adds	r3, #1
 8004270:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004274:	085b      	lsrs	r3, r3, #1
 8004276:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800427a:	2b00      	cmp	r3, #0
 800427c:	f47f af62 	bne.w	8004144 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4618      	mov	r0, r3
 8004286:	f003 facf 	bl	8007828 <USB_ReadInterrupts>
 800428a:	4603      	mov	r3, r0
 800428c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004290:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004294:	f040 80db 	bne.w	800444e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4618      	mov	r0, r3
 800429e:	f003 faf0 	bl	8007882 <USB_ReadDevAllInEpInterrupt>
 80042a2:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80042a4:	2300      	movs	r3, #0
 80042a6:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80042a8:	e0cd      	b.n	8004446 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80042aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042ac:	f003 0301 	and.w	r3, r3, #1
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	f000 80c2 	beq.w	800443a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042bc:	b2d2      	uxtb	r2, r2
 80042be:	4611      	mov	r1, r2
 80042c0:	4618      	mov	r0, r3
 80042c2:	f003 fb16 	bl	80078f2 <USB_ReadDevInEPInterrupt>
 80042c6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	f003 0301 	and.w	r3, r3, #1
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d057      	beq.n	8004382 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80042d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042d4:	f003 030f 	and.w	r3, r3, #15
 80042d8:	2201      	movs	r2, #1
 80042da:	fa02 f303 	lsl.w	r3, r2, r3
 80042de:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80042e0:	69fb      	ldr	r3, [r7, #28]
 80042e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	43db      	mvns	r3, r3
 80042ec:	69f9      	ldr	r1, [r7, #28]
 80042ee:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80042f2:	4013      	ands	r3, r2
 80042f4:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80042f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f8:	015a      	lsls	r2, r3, #5
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	4413      	add	r3, r2
 80042fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004302:	461a      	mov	r2, r3
 8004304:	2301      	movs	r3, #1
 8004306:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	799b      	ldrb	r3, [r3, #6]
 800430c:	2b01      	cmp	r3, #1
 800430e:	d132      	bne.n	8004376 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004310:	6879      	ldr	r1, [r7, #4]
 8004312:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004314:	4613      	mov	r3, r2
 8004316:	00db      	lsls	r3, r3, #3
 8004318:	4413      	add	r3, r2
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	440b      	add	r3, r1
 800431e:	3320      	adds	r3, #32
 8004320:	6819      	ldr	r1, [r3, #0]
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004326:	4613      	mov	r3, r2
 8004328:	00db      	lsls	r3, r3, #3
 800432a:	4413      	add	r3, r2
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	4403      	add	r3, r0
 8004330:	331c      	adds	r3, #28
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4419      	add	r1, r3
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800433a:	4613      	mov	r3, r2
 800433c:	00db      	lsls	r3, r3, #3
 800433e:	4413      	add	r3, r2
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	4403      	add	r3, r0
 8004344:	3320      	adds	r3, #32
 8004346:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800434a:	2b00      	cmp	r3, #0
 800434c:	d113      	bne.n	8004376 <HAL_PCD_IRQHandler+0x3a2>
 800434e:	6879      	ldr	r1, [r7, #4]
 8004350:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004352:	4613      	mov	r3, r2
 8004354:	00db      	lsls	r3, r3, #3
 8004356:	4413      	add	r3, r2
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	440b      	add	r3, r1
 800435c:	3324      	adds	r3, #36	@ 0x24
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d108      	bne.n	8004376 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6818      	ldr	r0, [r3, #0]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800436e:	461a      	mov	r2, r3
 8004370:	2101      	movs	r1, #1
 8004372:	f003 fb1d 	bl	80079b0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004378:	b2db      	uxtb	r3, r3
 800437a:	4619      	mov	r1, r3
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f005 fe0e 	bl	8009f9e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	f003 0308 	and.w	r3, r3, #8
 8004388:	2b00      	cmp	r3, #0
 800438a:	d008      	beq.n	800439e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800438c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800438e:	015a      	lsls	r2, r3, #5
 8004390:	69fb      	ldr	r3, [r7, #28]
 8004392:	4413      	add	r3, r2
 8004394:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004398:	461a      	mov	r2, r3
 800439a:	2308      	movs	r3, #8
 800439c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	f003 0310 	and.w	r3, r3, #16
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d008      	beq.n	80043ba <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80043a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043aa:	015a      	lsls	r2, r3, #5
 80043ac:	69fb      	ldr	r3, [r7, #28]
 80043ae:	4413      	add	r3, r2
 80043b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043b4:	461a      	mov	r2, r3
 80043b6:	2310      	movs	r3, #16
 80043b8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d008      	beq.n	80043d6 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80043c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043c6:	015a      	lsls	r2, r3, #5
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	4413      	add	r3, r2
 80043cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043d0:	461a      	mov	r2, r3
 80043d2:	2340      	movs	r3, #64	@ 0x40
 80043d4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	f003 0302 	and.w	r3, r3, #2
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d023      	beq.n	8004428 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80043e0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80043e2:	6a38      	ldr	r0, [r7, #32]
 80043e4:	f002 fb04 	bl	80069f0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80043e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043ea:	4613      	mov	r3, r2
 80043ec:	00db      	lsls	r3, r3, #3
 80043ee:	4413      	add	r3, r2
 80043f0:	009b      	lsls	r3, r3, #2
 80043f2:	3310      	adds	r3, #16
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	4413      	add	r3, r2
 80043f8:	3304      	adds	r3, #4
 80043fa:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	78db      	ldrb	r3, [r3, #3]
 8004400:	2b01      	cmp	r3, #1
 8004402:	d108      	bne.n	8004416 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	2200      	movs	r2, #0
 8004408:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800440a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800440c:	b2db      	uxtb	r3, r3
 800440e:	4619      	mov	r1, r3
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f005 fe5b 	bl	800a0cc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004418:	015a      	lsls	r2, r3, #5
 800441a:	69fb      	ldr	r3, [r7, #28]
 800441c:	4413      	add	r3, r2
 800441e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004422:	461a      	mov	r2, r3
 8004424:	2302      	movs	r3, #2
 8004426:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800442e:	2b00      	cmp	r3, #0
 8004430:	d003      	beq.n	800443a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004432:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f000 fcbd 	bl	8004db4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800443a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800443c:	3301      	adds	r3, #1
 800443e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004440:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004442:	085b      	lsrs	r3, r3, #1
 8004444:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004448:	2b00      	cmp	r3, #0
 800444a:	f47f af2e 	bne.w	80042aa <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4618      	mov	r0, r3
 8004454:	f003 f9e8 	bl	8007828 <USB_ReadInterrupts>
 8004458:	4603      	mov	r3, r0
 800445a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800445e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004462:	d122      	bne.n	80044aa <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	69fa      	ldr	r2, [r7, #28]
 800446e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004472:	f023 0301 	bic.w	r3, r3, #1
 8004476:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800447e:	2b01      	cmp	r3, #1
 8004480:	d108      	bne.n	8004494 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800448a:	2100      	movs	r1, #0
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f000 fea3 	bl	80051d8 <HAL_PCDEx_LPM_Callback>
 8004492:	e002      	b.n	800449a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f005 fdf9 	bl	800a08c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	695a      	ldr	r2, [r3, #20]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80044a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4618      	mov	r0, r3
 80044b0:	f003 f9ba 	bl	8007828 <USB_ReadInterrupts>
 80044b4:	4603      	mov	r3, r0
 80044b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80044ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80044be:	d112      	bne.n	80044e6 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80044c0:	69fb      	ldr	r3, [r7, #28]
 80044c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	f003 0301 	and.w	r3, r3, #1
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d102      	bne.n	80044d6 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f005 fdb5 	bl	800a040 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	695a      	ldr	r2, [r3, #20]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80044e4:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4618      	mov	r0, r3
 80044ec:	f003 f99c 	bl	8007828 <USB_ReadInterrupts>
 80044f0:	4603      	mov	r3, r0
 80044f2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80044f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044fa:	f040 80b7 	bne.w	800466c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80044fe:	69fb      	ldr	r3, [r7, #28]
 8004500:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	69fa      	ldr	r2, [r7, #28]
 8004508:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800450c:	f023 0301 	bic.w	r3, r3, #1
 8004510:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	2110      	movs	r1, #16
 8004518:	4618      	mov	r0, r3
 800451a:	f002 fa69 	bl	80069f0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800451e:	2300      	movs	r3, #0
 8004520:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004522:	e046      	b.n	80045b2 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004524:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004526:	015a      	lsls	r2, r3, #5
 8004528:	69fb      	ldr	r3, [r7, #28]
 800452a:	4413      	add	r3, r2
 800452c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004530:	461a      	mov	r2, r3
 8004532:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004536:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004538:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800453a:	015a      	lsls	r2, r3, #5
 800453c:	69fb      	ldr	r3, [r7, #28]
 800453e:	4413      	add	r3, r2
 8004540:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004548:	0151      	lsls	r1, r2, #5
 800454a:	69fa      	ldr	r2, [r7, #28]
 800454c:	440a      	add	r2, r1
 800454e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004552:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004556:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004558:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800455a:	015a      	lsls	r2, r3, #5
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	4413      	add	r3, r2
 8004560:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004564:	461a      	mov	r2, r3
 8004566:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800456a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800456c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800456e:	015a      	lsls	r2, r3, #5
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	4413      	add	r3, r2
 8004574:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800457c:	0151      	lsls	r1, r2, #5
 800457e:	69fa      	ldr	r2, [r7, #28]
 8004580:	440a      	add	r2, r1
 8004582:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004586:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800458a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800458c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800458e:	015a      	lsls	r2, r3, #5
 8004590:	69fb      	ldr	r3, [r7, #28]
 8004592:	4413      	add	r3, r2
 8004594:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800459c:	0151      	lsls	r1, r2, #5
 800459e:	69fa      	ldr	r2, [r7, #28]
 80045a0:	440a      	add	r2, r1
 80045a2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80045a6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80045aa:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045ae:	3301      	adds	r3, #1
 80045b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	791b      	ldrb	r3, [r3, #4]
 80045b6:	461a      	mov	r2, r3
 80045b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d3b2      	bcc.n	8004524 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045c4:	69db      	ldr	r3, [r3, #28]
 80045c6:	69fa      	ldr	r2, [r7, #28]
 80045c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80045cc:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80045d0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	7bdb      	ldrb	r3, [r3, #15]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d016      	beq.n	8004608 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045e4:	69fa      	ldr	r2, [r7, #28]
 80045e6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80045ea:	f043 030b 	orr.w	r3, r3, #11
 80045ee:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045fa:	69fa      	ldr	r2, [r7, #28]
 80045fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004600:	f043 030b 	orr.w	r3, r3, #11
 8004604:	6453      	str	r3, [r2, #68]	@ 0x44
 8004606:	e015      	b.n	8004634 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800460e:	695b      	ldr	r3, [r3, #20]
 8004610:	69fa      	ldr	r2, [r7, #28]
 8004612:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004616:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800461a:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800461e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004626:	691b      	ldr	r3, [r3, #16]
 8004628:	69fa      	ldr	r2, [r7, #28]
 800462a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800462e:	f043 030b 	orr.w	r3, r3, #11
 8004632:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	69fa      	ldr	r2, [r7, #28]
 800463e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004642:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004646:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6818      	ldr	r0, [r3, #0]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004656:	461a      	mov	r2, r3
 8004658:	f003 f9aa 	bl	80079b0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	695a      	ldr	r2, [r3, #20]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800466a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4618      	mov	r0, r3
 8004672:	f003 f8d9 	bl	8007828 <USB_ReadInterrupts>
 8004676:	4603      	mov	r3, r0
 8004678:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800467c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004680:	d123      	bne.n	80046ca <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4618      	mov	r0, r3
 8004688:	f003 f96f 	bl	800796a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4618      	mov	r0, r3
 8004692:	f002 fa26 	bl	8006ae2 <USB_GetDevSpeed>
 8004696:	4603      	mov	r3, r0
 8004698:	461a      	mov	r2, r3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681c      	ldr	r4, [r3, #0]
 80046a2:	f001 fa09 	bl	8005ab8 <HAL_RCC_GetHCLKFreq>
 80046a6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80046ac:	461a      	mov	r2, r3
 80046ae:	4620      	mov	r0, r4
 80046b0:	f001 ff2a 	bl	8006508 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f005 fc9a 	bl	8009fee <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	695a      	ldr	r2, [r3, #20]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80046c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4618      	mov	r0, r3
 80046d0:	f003 f8aa 	bl	8007828 <USB_ReadInterrupts>
 80046d4:	4603      	mov	r3, r0
 80046d6:	f003 0308 	and.w	r3, r3, #8
 80046da:	2b08      	cmp	r3, #8
 80046dc:	d10a      	bne.n	80046f4 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f005 fc77 	bl	8009fd2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	695a      	ldr	r2, [r3, #20]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f002 0208 	and.w	r2, r2, #8
 80046f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4618      	mov	r0, r3
 80046fa:	f003 f895 	bl	8007828 <USB_ReadInterrupts>
 80046fe:	4603      	mov	r3, r0
 8004700:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004704:	2b80      	cmp	r3, #128	@ 0x80
 8004706:	d123      	bne.n	8004750 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004708:	6a3b      	ldr	r3, [r7, #32]
 800470a:	699b      	ldr	r3, [r3, #24]
 800470c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004710:	6a3b      	ldr	r3, [r7, #32]
 8004712:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004714:	2301      	movs	r3, #1
 8004716:	627b      	str	r3, [r7, #36]	@ 0x24
 8004718:	e014      	b.n	8004744 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800471a:	6879      	ldr	r1, [r7, #4]
 800471c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800471e:	4613      	mov	r3, r2
 8004720:	00db      	lsls	r3, r3, #3
 8004722:	4413      	add	r3, r2
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	440b      	add	r3, r1
 8004728:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800472c:	781b      	ldrb	r3, [r3, #0]
 800472e:	2b01      	cmp	r3, #1
 8004730:	d105      	bne.n	800473e <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004734:	b2db      	uxtb	r3, r3
 8004736:	4619      	mov	r1, r3
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f000 fb0a 	bl	8004d52 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800473e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004740:	3301      	adds	r3, #1
 8004742:	627b      	str	r3, [r7, #36]	@ 0x24
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	791b      	ldrb	r3, [r3, #4]
 8004748:	461a      	mov	r2, r3
 800474a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800474c:	4293      	cmp	r3, r2
 800474e:	d3e4      	bcc.n	800471a <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4618      	mov	r0, r3
 8004756:	f003 f867 	bl	8007828 <USB_ReadInterrupts>
 800475a:	4603      	mov	r3, r0
 800475c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004760:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004764:	d13c      	bne.n	80047e0 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004766:	2301      	movs	r3, #1
 8004768:	627b      	str	r3, [r7, #36]	@ 0x24
 800476a:	e02b      	b.n	80047c4 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800476c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800476e:	015a      	lsls	r2, r3, #5
 8004770:	69fb      	ldr	r3, [r7, #28]
 8004772:	4413      	add	r3, r2
 8004774:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800477c:	6879      	ldr	r1, [r7, #4]
 800477e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004780:	4613      	mov	r3, r2
 8004782:	00db      	lsls	r3, r3, #3
 8004784:	4413      	add	r3, r2
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	440b      	add	r3, r1
 800478a:	3318      	adds	r3, #24
 800478c:	781b      	ldrb	r3, [r3, #0]
 800478e:	2b01      	cmp	r3, #1
 8004790:	d115      	bne.n	80047be <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004792:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004794:	2b00      	cmp	r3, #0
 8004796:	da12      	bge.n	80047be <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004798:	6879      	ldr	r1, [r7, #4]
 800479a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800479c:	4613      	mov	r3, r2
 800479e:	00db      	lsls	r3, r3, #3
 80047a0:	4413      	add	r3, r2
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	440b      	add	r3, r1
 80047a6:	3317      	adds	r3, #23
 80047a8:	2201      	movs	r2, #1
 80047aa:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80047ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	4619      	mov	r1, r3
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f000 faca 	bl	8004d52 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80047be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047c0:	3301      	adds	r3, #1
 80047c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	791b      	ldrb	r3, [r3, #4]
 80047c8:	461a      	mov	r2, r3
 80047ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d3cd      	bcc.n	800476c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	695a      	ldr	r2, [r3, #20]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80047de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4618      	mov	r0, r3
 80047e6:	f003 f81f 	bl	8007828 <USB_ReadInterrupts>
 80047ea:	4603      	mov	r3, r0
 80047ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80047f0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80047f4:	d156      	bne.n	80048a4 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80047f6:	2301      	movs	r3, #1
 80047f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80047fa:	e045      	b.n	8004888 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80047fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047fe:	015a      	lsls	r2, r3, #5
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	4413      	add	r3, r2
 8004804:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800480c:	6879      	ldr	r1, [r7, #4]
 800480e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004810:	4613      	mov	r3, r2
 8004812:	00db      	lsls	r3, r3, #3
 8004814:	4413      	add	r3, r2
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	440b      	add	r3, r1
 800481a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800481e:	781b      	ldrb	r3, [r3, #0]
 8004820:	2b01      	cmp	r3, #1
 8004822:	d12e      	bne.n	8004882 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004824:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004826:	2b00      	cmp	r3, #0
 8004828:	da2b      	bge.n	8004882 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800482a:	69bb      	ldr	r3, [r7, #24]
 800482c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8004836:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800483a:	429a      	cmp	r2, r3
 800483c:	d121      	bne.n	8004882 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800483e:	6879      	ldr	r1, [r7, #4]
 8004840:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004842:	4613      	mov	r3, r2
 8004844:	00db      	lsls	r3, r3, #3
 8004846:	4413      	add	r3, r2
 8004848:	009b      	lsls	r3, r3, #2
 800484a:	440b      	add	r3, r1
 800484c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004850:	2201      	movs	r2, #1
 8004852:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004854:	6a3b      	ldr	r3, [r7, #32]
 8004856:	699b      	ldr	r3, [r3, #24]
 8004858:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800485c:	6a3b      	ldr	r3, [r7, #32]
 800485e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004860:	6a3b      	ldr	r3, [r7, #32]
 8004862:	695b      	ldr	r3, [r3, #20]
 8004864:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004868:	2b00      	cmp	r3, #0
 800486a:	d10a      	bne.n	8004882 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800486c:	69fb      	ldr	r3, [r7, #28]
 800486e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	69fa      	ldr	r2, [r7, #28]
 8004876:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800487a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800487e:	6053      	str	r3, [r2, #4]
            break;
 8004880:	e008      	b.n	8004894 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004884:	3301      	adds	r3, #1
 8004886:	627b      	str	r3, [r7, #36]	@ 0x24
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	791b      	ldrb	r3, [r3, #4]
 800488c:	461a      	mov	r2, r3
 800488e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004890:	4293      	cmp	r3, r2
 8004892:	d3b3      	bcc.n	80047fc <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	695a      	ldr	r2, [r3, #20]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80048a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4618      	mov	r0, r3
 80048aa:	f002 ffbd 	bl	8007828 <USB_ReadInterrupts>
 80048ae:	4603      	mov	r3, r0
 80048b0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80048b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048b8:	d10a      	bne.n	80048d0 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f005 fc18 	bl	800a0f0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	695a      	ldr	r2, [r3, #20]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80048ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4618      	mov	r0, r3
 80048d6:	f002 ffa7 	bl	8007828 <USB_ReadInterrupts>
 80048da:	4603      	mov	r3, r0
 80048dc:	f003 0304 	and.w	r3, r3, #4
 80048e0:	2b04      	cmp	r3, #4
 80048e2:	d115      	bne.n	8004910 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80048ec:	69bb      	ldr	r3, [r7, #24]
 80048ee:	f003 0304 	and.w	r3, r3, #4
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d002      	beq.n	80048fc <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f005 fc08 	bl	800a10c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	6859      	ldr	r1, [r3, #4]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	69ba      	ldr	r2, [r7, #24]
 8004908:	430a      	orrs	r2, r1
 800490a:	605a      	str	r2, [r3, #4]
 800490c:	e000      	b.n	8004910 <HAL_PCD_IRQHandler+0x93c>
      return;
 800490e:	bf00      	nop
    }
  }
}
 8004910:	3734      	adds	r7, #52	@ 0x34
 8004912:	46bd      	mov	sp, r7
 8004914:	bd90      	pop	{r4, r7, pc}

08004916 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004916:	b580      	push	{r7, lr}
 8004918:	b082      	sub	sp, #8
 800491a:	af00      	add	r7, sp, #0
 800491c:	6078      	str	r0, [r7, #4]
 800491e:	460b      	mov	r3, r1
 8004920:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004928:	2b01      	cmp	r3, #1
 800492a:	d101      	bne.n	8004930 <HAL_PCD_SetAddress+0x1a>
 800492c:	2302      	movs	r3, #2
 800492e:	e012      	b.n	8004956 <HAL_PCD_SetAddress+0x40>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	78fa      	ldrb	r2, [r7, #3]
 800493c:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	78fa      	ldrb	r2, [r7, #3]
 8004944:	4611      	mov	r1, r2
 8004946:	4618      	mov	r0, r3
 8004948:	f002 ff06 	bl	8007758 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2200      	movs	r2, #0
 8004950:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004954:	2300      	movs	r3, #0
}
 8004956:	4618      	mov	r0, r3
 8004958:	3708      	adds	r7, #8
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}

0800495e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800495e:	b580      	push	{r7, lr}
 8004960:	b084      	sub	sp, #16
 8004962:	af00      	add	r7, sp, #0
 8004964:	6078      	str	r0, [r7, #4]
 8004966:	4608      	mov	r0, r1
 8004968:	4611      	mov	r1, r2
 800496a:	461a      	mov	r2, r3
 800496c:	4603      	mov	r3, r0
 800496e:	70fb      	strb	r3, [r7, #3]
 8004970:	460b      	mov	r3, r1
 8004972:	803b      	strh	r3, [r7, #0]
 8004974:	4613      	mov	r3, r2
 8004976:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8004978:	2300      	movs	r3, #0
 800497a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800497c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004980:	2b00      	cmp	r3, #0
 8004982:	da0f      	bge.n	80049a4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004984:	78fb      	ldrb	r3, [r7, #3]
 8004986:	f003 020f 	and.w	r2, r3, #15
 800498a:	4613      	mov	r3, r2
 800498c:	00db      	lsls	r3, r3, #3
 800498e:	4413      	add	r3, r2
 8004990:	009b      	lsls	r3, r3, #2
 8004992:	3310      	adds	r3, #16
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	4413      	add	r3, r2
 8004998:	3304      	adds	r3, #4
 800499a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2201      	movs	r2, #1
 80049a0:	705a      	strb	r2, [r3, #1]
 80049a2:	e00f      	b.n	80049c4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80049a4:	78fb      	ldrb	r3, [r7, #3]
 80049a6:	f003 020f 	and.w	r2, r3, #15
 80049aa:	4613      	mov	r3, r2
 80049ac:	00db      	lsls	r3, r3, #3
 80049ae:	4413      	add	r3, r2
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	4413      	add	r3, r2
 80049ba:	3304      	adds	r3, #4
 80049bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2200      	movs	r2, #0
 80049c2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80049c4:	78fb      	ldrb	r3, [r7, #3]
 80049c6:	f003 030f 	and.w	r3, r3, #15
 80049ca:	b2da      	uxtb	r2, r3
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80049d0:	883b      	ldrh	r3, [r7, #0]
 80049d2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	78ba      	ldrb	r2, [r7, #2]
 80049de:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	785b      	ldrb	r3, [r3, #1]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d004      	beq.n	80049f2 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	781b      	ldrb	r3, [r3, #0]
 80049ec:	461a      	mov	r2, r3
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80049f2:	78bb      	ldrb	r3, [r7, #2]
 80049f4:	2b02      	cmp	r3, #2
 80049f6:	d102      	bne.n	80049fe <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2200      	movs	r2, #0
 80049fc:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d101      	bne.n	8004a0c <HAL_PCD_EP_Open+0xae>
 8004a08:	2302      	movs	r3, #2
 8004a0a:	e00e      	b.n	8004a2a <HAL_PCD_EP_Open+0xcc>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	68f9      	ldr	r1, [r7, #12]
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f002 f886 	bl	8006b2c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2200      	movs	r2, #0
 8004a24:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8004a28:	7afb      	ldrb	r3, [r7, #11]
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3710      	adds	r7, #16
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}

08004a32 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a32:	b580      	push	{r7, lr}
 8004a34:	b084      	sub	sp, #16
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	6078      	str	r0, [r7, #4]
 8004a3a:	460b      	mov	r3, r1
 8004a3c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004a3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	da0f      	bge.n	8004a66 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a46:	78fb      	ldrb	r3, [r7, #3]
 8004a48:	f003 020f 	and.w	r2, r3, #15
 8004a4c:	4613      	mov	r3, r2
 8004a4e:	00db      	lsls	r3, r3, #3
 8004a50:	4413      	add	r3, r2
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	3310      	adds	r3, #16
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	4413      	add	r3, r2
 8004a5a:	3304      	adds	r3, #4
 8004a5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2201      	movs	r2, #1
 8004a62:	705a      	strb	r2, [r3, #1]
 8004a64:	e00f      	b.n	8004a86 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a66:	78fb      	ldrb	r3, [r7, #3]
 8004a68:	f003 020f 	and.w	r2, r3, #15
 8004a6c:	4613      	mov	r3, r2
 8004a6e:	00db      	lsls	r3, r3, #3
 8004a70:	4413      	add	r3, r2
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	4413      	add	r3, r2
 8004a7c:	3304      	adds	r3, #4
 8004a7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2200      	movs	r2, #0
 8004a84:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a86:	78fb      	ldrb	r3, [r7, #3]
 8004a88:	f003 030f 	and.w	r3, r3, #15
 8004a8c:	b2da      	uxtb	r2, r3
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d101      	bne.n	8004aa0 <HAL_PCD_EP_Close+0x6e>
 8004a9c:	2302      	movs	r3, #2
 8004a9e:	e00e      	b.n	8004abe <HAL_PCD_EP_Close+0x8c>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	68f9      	ldr	r1, [r7, #12]
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f002 f8c4 	bl	8006c3c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8004abc:	2300      	movs	r3, #0
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3710      	adds	r7, #16
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}

08004ac6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004ac6:	b580      	push	{r7, lr}
 8004ac8:	b086      	sub	sp, #24
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	60f8      	str	r0, [r7, #12]
 8004ace:	607a      	str	r2, [r7, #4]
 8004ad0:	603b      	str	r3, [r7, #0]
 8004ad2:	460b      	mov	r3, r1
 8004ad4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004ad6:	7afb      	ldrb	r3, [r7, #11]
 8004ad8:	f003 020f 	and.w	r2, r3, #15
 8004adc:	4613      	mov	r3, r2
 8004ade:	00db      	lsls	r3, r3, #3
 8004ae0:	4413      	add	r3, r2
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004ae8:	68fa      	ldr	r2, [r7, #12]
 8004aea:	4413      	add	r3, r2
 8004aec:	3304      	adds	r3, #4
 8004aee:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	683a      	ldr	r2, [r7, #0]
 8004afa:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	2200      	movs	r2, #0
 8004b00:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	2200      	movs	r2, #0
 8004b06:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b08:	7afb      	ldrb	r3, [r7, #11]
 8004b0a:	f003 030f 	and.w	r3, r3, #15
 8004b0e:	b2da      	uxtb	r2, r3
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	799b      	ldrb	r3, [r3, #6]
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d102      	bne.n	8004b22 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	6818      	ldr	r0, [r3, #0]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	799b      	ldrb	r3, [r3, #6]
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	6979      	ldr	r1, [r7, #20]
 8004b2e:	f002 f961 	bl	8006df4 <USB_EPStartXfer>

  return HAL_OK;
 8004b32:	2300      	movs	r3, #0
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3718      	adds	r7, #24
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}

08004b3c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b083      	sub	sp, #12
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	460b      	mov	r3, r1
 8004b46:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004b48:	78fb      	ldrb	r3, [r7, #3]
 8004b4a:	f003 020f 	and.w	r2, r3, #15
 8004b4e:	6879      	ldr	r1, [r7, #4]
 8004b50:	4613      	mov	r3, r2
 8004b52:	00db      	lsls	r3, r3, #3
 8004b54:	4413      	add	r3, r2
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	440b      	add	r3, r1
 8004b5a:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8004b5e:	681b      	ldr	r3, [r3, #0]
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	370c      	adds	r7, #12
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr

08004b6c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b086      	sub	sp, #24
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	60f8      	str	r0, [r7, #12]
 8004b74:	607a      	str	r2, [r7, #4]
 8004b76:	603b      	str	r3, [r7, #0]
 8004b78:	460b      	mov	r3, r1
 8004b7a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b7c:	7afb      	ldrb	r3, [r7, #11]
 8004b7e:	f003 020f 	and.w	r2, r3, #15
 8004b82:	4613      	mov	r3, r2
 8004b84:	00db      	lsls	r3, r3, #3
 8004b86:	4413      	add	r3, r2
 8004b88:	009b      	lsls	r3, r3, #2
 8004b8a:	3310      	adds	r3, #16
 8004b8c:	68fa      	ldr	r2, [r7, #12]
 8004b8e:	4413      	add	r3, r2
 8004b90:	3304      	adds	r3, #4
 8004b92:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	683a      	ldr	r2, [r7, #0]
 8004b9e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	2201      	movs	r2, #1
 8004baa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004bac:	7afb      	ldrb	r3, [r7, #11]
 8004bae:	f003 030f 	and.w	r3, r3, #15
 8004bb2:	b2da      	uxtb	r2, r3
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	799b      	ldrb	r3, [r3, #6]
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d102      	bne.n	8004bc6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	6818      	ldr	r0, [r3, #0]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	799b      	ldrb	r3, [r3, #6]
 8004bce:	461a      	mov	r2, r3
 8004bd0:	6979      	ldr	r1, [r7, #20]
 8004bd2:	f002 f90f 	bl	8006df4 <USB_EPStartXfer>

  return HAL_OK;
 8004bd6:	2300      	movs	r3, #0
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3718      	adds	r7, #24
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}

08004be0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b084      	sub	sp, #16
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	460b      	mov	r3, r1
 8004bea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004bec:	78fb      	ldrb	r3, [r7, #3]
 8004bee:	f003 030f 	and.w	r3, r3, #15
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	7912      	ldrb	r2, [r2, #4]
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d901      	bls.n	8004bfe <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e04f      	b.n	8004c9e <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004bfe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	da0f      	bge.n	8004c26 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c06:	78fb      	ldrb	r3, [r7, #3]
 8004c08:	f003 020f 	and.w	r2, r3, #15
 8004c0c:	4613      	mov	r3, r2
 8004c0e:	00db      	lsls	r3, r3, #3
 8004c10:	4413      	add	r3, r2
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	3310      	adds	r3, #16
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	4413      	add	r3, r2
 8004c1a:	3304      	adds	r3, #4
 8004c1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2201      	movs	r2, #1
 8004c22:	705a      	strb	r2, [r3, #1]
 8004c24:	e00d      	b.n	8004c42 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004c26:	78fa      	ldrb	r2, [r7, #3]
 8004c28:	4613      	mov	r3, r2
 8004c2a:	00db      	lsls	r3, r3, #3
 8004c2c:	4413      	add	r3, r2
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	4413      	add	r3, r2
 8004c38:	3304      	adds	r3, #4
 8004c3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2201      	movs	r2, #1
 8004c46:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c48:	78fb      	ldrb	r3, [r7, #3]
 8004c4a:	f003 030f 	and.w	r3, r3, #15
 8004c4e:	b2da      	uxtb	r2, r3
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	d101      	bne.n	8004c62 <HAL_PCD_EP_SetStall+0x82>
 8004c5e:	2302      	movs	r3, #2
 8004c60:	e01d      	b.n	8004c9e <HAL_PCD_EP_SetStall+0xbe>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2201      	movs	r2, #1
 8004c66:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	68f9      	ldr	r1, [r7, #12]
 8004c70:	4618      	mov	r0, r3
 8004c72:	f002 fc9d 	bl	80075b0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004c76:	78fb      	ldrb	r3, [r7, #3]
 8004c78:	f003 030f 	and.w	r3, r3, #15
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d109      	bne.n	8004c94 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6818      	ldr	r0, [r3, #0]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	7999      	ldrb	r1, [r3, #6]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004c8e:	461a      	mov	r2, r3
 8004c90:	f002 fe8e 	bl	80079b0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2200      	movs	r2, #0
 8004c98:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004c9c:	2300      	movs	r3, #0
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3710      	adds	r7, #16
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}

08004ca6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ca6:	b580      	push	{r7, lr}
 8004ca8:	b084      	sub	sp, #16
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	6078      	str	r0, [r7, #4]
 8004cae:	460b      	mov	r3, r1
 8004cb0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004cb2:	78fb      	ldrb	r3, [r7, #3]
 8004cb4:	f003 030f 	and.w	r3, r3, #15
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	7912      	ldrb	r2, [r2, #4]
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d901      	bls.n	8004cc4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e042      	b.n	8004d4a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004cc4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	da0f      	bge.n	8004cec <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ccc:	78fb      	ldrb	r3, [r7, #3]
 8004cce:	f003 020f 	and.w	r2, r3, #15
 8004cd2:	4613      	mov	r3, r2
 8004cd4:	00db      	lsls	r3, r3, #3
 8004cd6:	4413      	add	r3, r2
 8004cd8:	009b      	lsls	r3, r3, #2
 8004cda:	3310      	adds	r3, #16
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	4413      	add	r3, r2
 8004ce0:	3304      	adds	r3, #4
 8004ce2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	705a      	strb	r2, [r3, #1]
 8004cea:	e00f      	b.n	8004d0c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004cec:	78fb      	ldrb	r3, [r7, #3]
 8004cee:	f003 020f 	and.w	r2, r3, #15
 8004cf2:	4613      	mov	r3, r2
 8004cf4:	00db      	lsls	r3, r3, #3
 8004cf6:	4413      	add	r3, r2
 8004cf8:	009b      	lsls	r3, r3, #2
 8004cfa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	4413      	add	r3, r2
 8004d02:	3304      	adds	r3, #4
 8004d04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d12:	78fb      	ldrb	r3, [r7, #3]
 8004d14:	f003 030f 	and.w	r3, r3, #15
 8004d18:	b2da      	uxtb	r2, r3
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d101      	bne.n	8004d2c <HAL_PCD_EP_ClrStall+0x86>
 8004d28:	2302      	movs	r3, #2
 8004d2a:	e00e      	b.n	8004d4a <HAL_PCD_EP_ClrStall+0xa4>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	68f9      	ldr	r1, [r7, #12]
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f002 fca6 	bl	800768c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2200      	movs	r2, #0
 8004d44:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004d48:	2300      	movs	r3, #0
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3710      	adds	r7, #16
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}

08004d52 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004d52:	b580      	push	{r7, lr}
 8004d54:	b084      	sub	sp, #16
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	6078      	str	r0, [r7, #4]
 8004d5a:	460b      	mov	r3, r1
 8004d5c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004d5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	da0c      	bge.n	8004d80 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d66:	78fb      	ldrb	r3, [r7, #3]
 8004d68:	f003 020f 	and.w	r2, r3, #15
 8004d6c:	4613      	mov	r3, r2
 8004d6e:	00db      	lsls	r3, r3, #3
 8004d70:	4413      	add	r3, r2
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	3310      	adds	r3, #16
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	4413      	add	r3, r2
 8004d7a:	3304      	adds	r3, #4
 8004d7c:	60fb      	str	r3, [r7, #12]
 8004d7e:	e00c      	b.n	8004d9a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004d80:	78fb      	ldrb	r3, [r7, #3]
 8004d82:	f003 020f 	and.w	r2, r3, #15
 8004d86:	4613      	mov	r3, r2
 8004d88:	00db      	lsls	r3, r3, #3
 8004d8a:	4413      	add	r3, r2
 8004d8c:	009b      	lsls	r3, r3, #2
 8004d8e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	4413      	add	r3, r2
 8004d96:	3304      	adds	r3, #4
 8004d98:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	68f9      	ldr	r1, [r7, #12]
 8004da0:	4618      	mov	r0, r3
 8004da2:	f002 fac5 	bl	8007330 <USB_EPStopXfer>
 8004da6:	4603      	mov	r3, r0
 8004da8:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004daa:	7afb      	ldrb	r3, [r7, #11]
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3710      	adds	r7, #16
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}

08004db4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b08a      	sub	sp, #40	@ 0x28
 8004db8:	af02      	add	r7, sp, #8
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004dc8:	683a      	ldr	r2, [r7, #0]
 8004dca:	4613      	mov	r3, r2
 8004dcc:	00db      	lsls	r3, r3, #3
 8004dce:	4413      	add	r3, r2
 8004dd0:	009b      	lsls	r3, r3, #2
 8004dd2:	3310      	adds	r3, #16
 8004dd4:	687a      	ldr	r2, [r7, #4]
 8004dd6:	4413      	add	r3, r2
 8004dd8:	3304      	adds	r3, #4
 8004dda:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	695a      	ldr	r2, [r3, #20]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	691b      	ldr	r3, [r3, #16]
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d901      	bls.n	8004dec <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	e06b      	b.n	8004ec4 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	691a      	ldr	r2, [r3, #16]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	695b      	ldr	r3, [r3, #20]
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	69fa      	ldr	r2, [r7, #28]
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d902      	bls.n	8004e08 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004e08:	69fb      	ldr	r3, [r7, #28]
 8004e0a:	3303      	adds	r3, #3
 8004e0c:	089b      	lsrs	r3, r3, #2
 8004e0e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004e10:	e02a      	b.n	8004e68 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	691a      	ldr	r2, [r3, #16]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	695b      	ldr	r3, [r3, #20]
 8004e1a:	1ad3      	subs	r3, r2, r3
 8004e1c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	69fa      	ldr	r2, [r7, #28]
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d902      	bls.n	8004e2e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004e2e:	69fb      	ldr	r3, [r7, #28]
 8004e30:	3303      	adds	r3, #3
 8004e32:	089b      	lsrs	r3, r3, #2
 8004e34:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	68d9      	ldr	r1, [r3, #12]
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	b2da      	uxtb	r2, r3
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004e46:	9300      	str	r3, [sp, #0]
 8004e48:	4603      	mov	r3, r0
 8004e4a:	6978      	ldr	r0, [r7, #20]
 8004e4c:	f002 fb1a 	bl	8007484 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	68da      	ldr	r2, [r3, #12]
 8004e54:	69fb      	ldr	r3, [r7, #28]
 8004e56:	441a      	add	r2, r3
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	695a      	ldr	r2, [r3, #20]
 8004e60:	69fb      	ldr	r3, [r7, #28]
 8004e62:	441a      	add	r2, r3
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	015a      	lsls	r2, r3, #5
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	4413      	add	r3, r2
 8004e70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e74:	699b      	ldr	r3, [r3, #24]
 8004e76:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004e78:	69ba      	ldr	r2, [r7, #24]
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d809      	bhi.n	8004e92 <PCD_WriteEmptyTxFifo+0xde>
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	695a      	ldr	r2, [r3, #20]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d203      	bcs.n	8004e92 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	691b      	ldr	r3, [r3, #16]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d1bf      	bne.n	8004e12 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	691a      	ldr	r2, [r3, #16]
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	695b      	ldr	r3, [r3, #20]
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d811      	bhi.n	8004ec2 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	f003 030f 	and.w	r3, r3, #15
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eaa:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004eb2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	43db      	mvns	r3, r3
 8004eb8:	6939      	ldr	r1, [r7, #16]
 8004eba:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004ebe:	4013      	ands	r3, r2
 8004ec0:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004ec2:	2300      	movs	r3, #0
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3720      	adds	r7, #32
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}

08004ecc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b088      	sub	sp, #32
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004edc:	69fb      	ldr	r3, [r7, #28]
 8004ede:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004ee0:	69fb      	ldr	r3, [r7, #28]
 8004ee2:	333c      	adds	r3, #60	@ 0x3c
 8004ee4:	3304      	adds	r3, #4
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	015a      	lsls	r2, r3, #5
 8004eee:	69bb      	ldr	r3, [r7, #24]
 8004ef0:	4413      	add	r3, r2
 8004ef2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	799b      	ldrb	r3, [r3, #6]
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d17b      	bne.n	8004ffa <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	f003 0308 	and.w	r3, r3, #8
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d015      	beq.n	8004f38 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	4a61      	ldr	r2, [pc, #388]	@ (8005094 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	f240 80b9 	bls.w	8005088 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	f000 80b3 	beq.w	8005088 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	015a      	lsls	r2, r3, #5
 8004f26:	69bb      	ldr	r3, [r7, #24]
 8004f28:	4413      	add	r3, r2
 8004f2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f2e:	461a      	mov	r2, r3
 8004f30:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f34:	6093      	str	r3, [r2, #8]
 8004f36:	e0a7      	b.n	8005088 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	f003 0320 	and.w	r3, r3, #32
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d009      	beq.n	8004f56 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	015a      	lsls	r2, r3, #5
 8004f46:	69bb      	ldr	r3, [r7, #24]
 8004f48:	4413      	add	r3, r2
 8004f4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f4e:	461a      	mov	r2, r3
 8004f50:	2320      	movs	r3, #32
 8004f52:	6093      	str	r3, [r2, #8]
 8004f54:	e098      	b.n	8005088 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	f040 8093 	bne.w	8005088 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	4a4b      	ldr	r2, [pc, #300]	@ (8005094 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d90f      	bls.n	8004f8a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d00a      	beq.n	8004f8a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	015a      	lsls	r2, r3, #5
 8004f78:	69bb      	ldr	r3, [r7, #24]
 8004f7a:	4413      	add	r3, r2
 8004f7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f80:	461a      	mov	r2, r3
 8004f82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f86:	6093      	str	r3, [r2, #8]
 8004f88:	e07e      	b.n	8005088 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004f8a:	683a      	ldr	r2, [r7, #0]
 8004f8c:	4613      	mov	r3, r2
 8004f8e:	00db      	lsls	r3, r3, #3
 8004f90:	4413      	add	r3, r2
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004f98:	687a      	ldr	r2, [r7, #4]
 8004f9a:	4413      	add	r3, r2
 8004f9c:	3304      	adds	r3, #4
 8004f9e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6a1a      	ldr	r2, [r3, #32]
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	0159      	lsls	r1, r3, #5
 8004fa8:	69bb      	ldr	r3, [r7, #24]
 8004faa:	440b      	add	r3, r1
 8004fac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fb0:	691b      	ldr	r3, [r3, #16]
 8004fb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fb6:	1ad2      	subs	r2, r2, r3
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d114      	bne.n	8004fec <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	691b      	ldr	r3, [r3, #16]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d109      	bne.n	8004fde <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6818      	ldr	r0, [r3, #0]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004fd4:	461a      	mov	r2, r3
 8004fd6:	2101      	movs	r1, #1
 8004fd8:	f002 fcea 	bl	80079b0 <USB_EP0_OutStart>
 8004fdc:	e006      	b.n	8004fec <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	68da      	ldr	r2, [r3, #12]
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	695b      	ldr	r3, [r3, #20]
 8004fe6:	441a      	add	r2, r3
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	4619      	mov	r1, r3
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f004 ffb8 	bl	8009f68 <HAL_PCD_DataOutStageCallback>
 8004ff8:	e046      	b.n	8005088 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	4a26      	ldr	r2, [pc, #152]	@ (8005098 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d124      	bne.n	800504c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005008:	2b00      	cmp	r3, #0
 800500a:	d00a      	beq.n	8005022 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	015a      	lsls	r2, r3, #5
 8005010:	69bb      	ldr	r3, [r7, #24]
 8005012:	4413      	add	r3, r2
 8005014:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005018:	461a      	mov	r2, r3
 800501a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800501e:	6093      	str	r3, [r2, #8]
 8005020:	e032      	b.n	8005088 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	f003 0320 	and.w	r3, r3, #32
 8005028:	2b00      	cmp	r3, #0
 800502a:	d008      	beq.n	800503e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	015a      	lsls	r2, r3, #5
 8005030:	69bb      	ldr	r3, [r7, #24]
 8005032:	4413      	add	r3, r2
 8005034:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005038:	461a      	mov	r2, r3
 800503a:	2320      	movs	r3, #32
 800503c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	b2db      	uxtb	r3, r3
 8005042:	4619      	mov	r1, r3
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f004 ff8f 	bl	8009f68 <HAL_PCD_DataOutStageCallback>
 800504a:	e01d      	b.n	8005088 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d114      	bne.n	800507c <PCD_EP_OutXfrComplete_int+0x1b0>
 8005052:	6879      	ldr	r1, [r7, #4]
 8005054:	683a      	ldr	r2, [r7, #0]
 8005056:	4613      	mov	r3, r2
 8005058:	00db      	lsls	r3, r3, #3
 800505a:	4413      	add	r3, r2
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	440b      	add	r3, r1
 8005060:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d108      	bne.n	800507c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6818      	ldr	r0, [r3, #0]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005074:	461a      	mov	r2, r3
 8005076:	2100      	movs	r1, #0
 8005078:	f002 fc9a 	bl	80079b0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	b2db      	uxtb	r3, r3
 8005080:	4619      	mov	r1, r3
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f004 ff70 	bl	8009f68 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005088:	2300      	movs	r3, #0
}
 800508a:	4618      	mov	r0, r3
 800508c:	3720      	adds	r7, #32
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}
 8005092:	bf00      	nop
 8005094:	4f54300a 	.word	0x4f54300a
 8005098:	4f54310a 	.word	0x4f54310a

0800509c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b086      	sub	sp, #24
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	333c      	adds	r3, #60	@ 0x3c
 80050b4:	3304      	adds	r3, #4
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	015a      	lsls	r2, r3, #5
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	4413      	add	r3, r2
 80050c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	4a15      	ldr	r2, [pc, #84]	@ (8005124 <PCD_EP_OutSetupPacket_int+0x88>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d90e      	bls.n	80050f0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d009      	beq.n	80050f0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	015a      	lsls	r2, r3, #5
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	4413      	add	r3, r2
 80050e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050e8:	461a      	mov	r2, r3
 80050ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80050ee:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	f004 ff27 	bl	8009f44 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	4a0a      	ldr	r2, [pc, #40]	@ (8005124 <PCD_EP_OutSetupPacket_int+0x88>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d90c      	bls.n	8005118 <PCD_EP_OutSetupPacket_int+0x7c>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	799b      	ldrb	r3, [r3, #6]
 8005102:	2b01      	cmp	r3, #1
 8005104:	d108      	bne.n	8005118 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6818      	ldr	r0, [r3, #0]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005110:	461a      	mov	r2, r3
 8005112:	2101      	movs	r1, #1
 8005114:	f002 fc4c 	bl	80079b0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005118:	2300      	movs	r3, #0
}
 800511a:	4618      	mov	r0, r3
 800511c:	3718      	adds	r7, #24
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}
 8005122:	bf00      	nop
 8005124:	4f54300a 	.word	0x4f54300a

08005128 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005128:	b480      	push	{r7}
 800512a:	b085      	sub	sp, #20
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	460b      	mov	r3, r1
 8005132:	70fb      	strb	r3, [r7, #3]
 8005134:	4613      	mov	r3, r2
 8005136:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800513e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005140:	78fb      	ldrb	r3, [r7, #3]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d107      	bne.n	8005156 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005146:	883b      	ldrh	r3, [r7, #0]
 8005148:	0419      	lsls	r1, r3, #16
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	68ba      	ldr	r2, [r7, #8]
 8005150:	430a      	orrs	r2, r1
 8005152:	629a      	str	r2, [r3, #40]	@ 0x28
 8005154:	e028      	b.n	80051a8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800515c:	0c1b      	lsrs	r3, r3, #16
 800515e:	68ba      	ldr	r2, [r7, #8]
 8005160:	4413      	add	r3, r2
 8005162:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005164:	2300      	movs	r3, #0
 8005166:	73fb      	strb	r3, [r7, #15]
 8005168:	e00d      	b.n	8005186 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	7bfb      	ldrb	r3, [r7, #15]
 8005170:	3340      	adds	r3, #64	@ 0x40
 8005172:	009b      	lsls	r3, r3, #2
 8005174:	4413      	add	r3, r2
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	0c1b      	lsrs	r3, r3, #16
 800517a:	68ba      	ldr	r2, [r7, #8]
 800517c:	4413      	add	r3, r2
 800517e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005180:	7bfb      	ldrb	r3, [r7, #15]
 8005182:	3301      	adds	r3, #1
 8005184:	73fb      	strb	r3, [r7, #15]
 8005186:	7bfa      	ldrb	r2, [r7, #15]
 8005188:	78fb      	ldrb	r3, [r7, #3]
 800518a:	3b01      	subs	r3, #1
 800518c:	429a      	cmp	r2, r3
 800518e:	d3ec      	bcc.n	800516a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005190:	883b      	ldrh	r3, [r7, #0]
 8005192:	0418      	lsls	r0, r3, #16
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6819      	ldr	r1, [r3, #0]
 8005198:	78fb      	ldrb	r3, [r7, #3]
 800519a:	3b01      	subs	r3, #1
 800519c:	68ba      	ldr	r2, [r7, #8]
 800519e:	4302      	orrs	r2, r0
 80051a0:	3340      	adds	r3, #64	@ 0x40
 80051a2:	009b      	lsls	r3, r3, #2
 80051a4:	440b      	add	r3, r1
 80051a6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80051a8:	2300      	movs	r3, #0
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3714      	adds	r7, #20
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr

080051b6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80051b6:	b480      	push	{r7}
 80051b8:	b083      	sub	sp, #12
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	6078      	str	r0, [r7, #4]
 80051be:	460b      	mov	r3, r1
 80051c0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	887a      	ldrh	r2, [r7, #2]
 80051c8:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80051ca:	2300      	movs	r3, #0
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	370c      	adds	r7, #12
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr

080051d8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80051d8:	b480      	push	{r7}
 80051da:	b083      	sub	sp, #12
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	460b      	mov	r3, r1
 80051e2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80051e4:	bf00      	nop
 80051e6:	370c      	adds	r7, #12
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr

080051f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b086      	sub	sp, #24
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d101      	bne.n	8005202 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e267      	b.n	80056d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f003 0301 	and.w	r3, r3, #1
 800520a:	2b00      	cmp	r3, #0
 800520c:	d075      	beq.n	80052fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800520e:	4b88      	ldr	r3, [pc, #544]	@ (8005430 <HAL_RCC_OscConfig+0x240>)
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	f003 030c 	and.w	r3, r3, #12
 8005216:	2b04      	cmp	r3, #4
 8005218:	d00c      	beq.n	8005234 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800521a:	4b85      	ldr	r3, [pc, #532]	@ (8005430 <HAL_RCC_OscConfig+0x240>)
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005222:	2b08      	cmp	r3, #8
 8005224:	d112      	bne.n	800524c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005226:	4b82      	ldr	r3, [pc, #520]	@ (8005430 <HAL_RCC_OscConfig+0x240>)
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800522e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005232:	d10b      	bne.n	800524c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005234:	4b7e      	ldr	r3, [pc, #504]	@ (8005430 <HAL_RCC_OscConfig+0x240>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800523c:	2b00      	cmp	r3, #0
 800523e:	d05b      	beq.n	80052f8 <HAL_RCC_OscConfig+0x108>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d157      	bne.n	80052f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	e242      	b.n	80056d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005254:	d106      	bne.n	8005264 <HAL_RCC_OscConfig+0x74>
 8005256:	4b76      	ldr	r3, [pc, #472]	@ (8005430 <HAL_RCC_OscConfig+0x240>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a75      	ldr	r2, [pc, #468]	@ (8005430 <HAL_RCC_OscConfig+0x240>)
 800525c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005260:	6013      	str	r3, [r2, #0]
 8005262:	e01d      	b.n	80052a0 <HAL_RCC_OscConfig+0xb0>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800526c:	d10c      	bne.n	8005288 <HAL_RCC_OscConfig+0x98>
 800526e:	4b70      	ldr	r3, [pc, #448]	@ (8005430 <HAL_RCC_OscConfig+0x240>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a6f      	ldr	r2, [pc, #444]	@ (8005430 <HAL_RCC_OscConfig+0x240>)
 8005274:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005278:	6013      	str	r3, [r2, #0]
 800527a:	4b6d      	ldr	r3, [pc, #436]	@ (8005430 <HAL_RCC_OscConfig+0x240>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a6c      	ldr	r2, [pc, #432]	@ (8005430 <HAL_RCC_OscConfig+0x240>)
 8005280:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005284:	6013      	str	r3, [r2, #0]
 8005286:	e00b      	b.n	80052a0 <HAL_RCC_OscConfig+0xb0>
 8005288:	4b69      	ldr	r3, [pc, #420]	@ (8005430 <HAL_RCC_OscConfig+0x240>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a68      	ldr	r2, [pc, #416]	@ (8005430 <HAL_RCC_OscConfig+0x240>)
 800528e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005292:	6013      	str	r3, [r2, #0]
 8005294:	4b66      	ldr	r3, [pc, #408]	@ (8005430 <HAL_RCC_OscConfig+0x240>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a65      	ldr	r2, [pc, #404]	@ (8005430 <HAL_RCC_OscConfig+0x240>)
 800529a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800529e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d013      	beq.n	80052d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052a8:	f7fc fd72 	bl	8001d90 <HAL_GetTick>
 80052ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052ae:	e008      	b.n	80052c2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052b0:	f7fc fd6e 	bl	8001d90 <HAL_GetTick>
 80052b4:	4602      	mov	r2, r0
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	1ad3      	subs	r3, r2, r3
 80052ba:	2b64      	cmp	r3, #100	@ 0x64
 80052bc:	d901      	bls.n	80052c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80052be:	2303      	movs	r3, #3
 80052c0:	e207      	b.n	80056d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052c2:	4b5b      	ldr	r3, [pc, #364]	@ (8005430 <HAL_RCC_OscConfig+0x240>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d0f0      	beq.n	80052b0 <HAL_RCC_OscConfig+0xc0>
 80052ce:	e014      	b.n	80052fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052d0:	f7fc fd5e 	bl	8001d90 <HAL_GetTick>
 80052d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052d6:	e008      	b.n	80052ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052d8:	f7fc fd5a 	bl	8001d90 <HAL_GetTick>
 80052dc:	4602      	mov	r2, r0
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	1ad3      	subs	r3, r2, r3
 80052e2:	2b64      	cmp	r3, #100	@ 0x64
 80052e4:	d901      	bls.n	80052ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80052e6:	2303      	movs	r3, #3
 80052e8:	e1f3      	b.n	80056d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052ea:	4b51      	ldr	r3, [pc, #324]	@ (8005430 <HAL_RCC_OscConfig+0x240>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d1f0      	bne.n	80052d8 <HAL_RCC_OscConfig+0xe8>
 80052f6:	e000      	b.n	80052fa <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 0302 	and.w	r3, r3, #2
 8005302:	2b00      	cmp	r3, #0
 8005304:	d063      	beq.n	80053ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005306:	4b4a      	ldr	r3, [pc, #296]	@ (8005430 <HAL_RCC_OscConfig+0x240>)
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	f003 030c 	and.w	r3, r3, #12
 800530e:	2b00      	cmp	r3, #0
 8005310:	d00b      	beq.n	800532a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005312:	4b47      	ldr	r3, [pc, #284]	@ (8005430 <HAL_RCC_OscConfig+0x240>)
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800531a:	2b08      	cmp	r3, #8
 800531c:	d11c      	bne.n	8005358 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800531e:	4b44      	ldr	r3, [pc, #272]	@ (8005430 <HAL_RCC_OscConfig+0x240>)
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005326:	2b00      	cmp	r3, #0
 8005328:	d116      	bne.n	8005358 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800532a:	4b41      	ldr	r3, [pc, #260]	@ (8005430 <HAL_RCC_OscConfig+0x240>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f003 0302 	and.w	r3, r3, #2
 8005332:	2b00      	cmp	r3, #0
 8005334:	d005      	beq.n	8005342 <HAL_RCC_OscConfig+0x152>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	68db      	ldr	r3, [r3, #12]
 800533a:	2b01      	cmp	r3, #1
 800533c:	d001      	beq.n	8005342 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	e1c7      	b.n	80056d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005342:	4b3b      	ldr	r3, [pc, #236]	@ (8005430 <HAL_RCC_OscConfig+0x240>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	691b      	ldr	r3, [r3, #16]
 800534e:	00db      	lsls	r3, r3, #3
 8005350:	4937      	ldr	r1, [pc, #220]	@ (8005430 <HAL_RCC_OscConfig+0x240>)
 8005352:	4313      	orrs	r3, r2
 8005354:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005356:	e03a      	b.n	80053ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d020      	beq.n	80053a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005360:	4b34      	ldr	r3, [pc, #208]	@ (8005434 <HAL_RCC_OscConfig+0x244>)
 8005362:	2201      	movs	r2, #1
 8005364:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005366:	f7fc fd13 	bl	8001d90 <HAL_GetTick>
 800536a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800536c:	e008      	b.n	8005380 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800536e:	f7fc fd0f 	bl	8001d90 <HAL_GetTick>
 8005372:	4602      	mov	r2, r0
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	1ad3      	subs	r3, r2, r3
 8005378:	2b02      	cmp	r3, #2
 800537a:	d901      	bls.n	8005380 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800537c:	2303      	movs	r3, #3
 800537e:	e1a8      	b.n	80056d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005380:	4b2b      	ldr	r3, [pc, #172]	@ (8005430 <HAL_RCC_OscConfig+0x240>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f003 0302 	and.w	r3, r3, #2
 8005388:	2b00      	cmp	r3, #0
 800538a:	d0f0      	beq.n	800536e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800538c:	4b28      	ldr	r3, [pc, #160]	@ (8005430 <HAL_RCC_OscConfig+0x240>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	691b      	ldr	r3, [r3, #16]
 8005398:	00db      	lsls	r3, r3, #3
 800539a:	4925      	ldr	r1, [pc, #148]	@ (8005430 <HAL_RCC_OscConfig+0x240>)
 800539c:	4313      	orrs	r3, r2
 800539e:	600b      	str	r3, [r1, #0]
 80053a0:	e015      	b.n	80053ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80053a2:	4b24      	ldr	r3, [pc, #144]	@ (8005434 <HAL_RCC_OscConfig+0x244>)
 80053a4:	2200      	movs	r2, #0
 80053a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053a8:	f7fc fcf2 	bl	8001d90 <HAL_GetTick>
 80053ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053ae:	e008      	b.n	80053c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053b0:	f7fc fcee 	bl	8001d90 <HAL_GetTick>
 80053b4:	4602      	mov	r2, r0
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	1ad3      	subs	r3, r2, r3
 80053ba:	2b02      	cmp	r3, #2
 80053bc:	d901      	bls.n	80053c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80053be:	2303      	movs	r3, #3
 80053c0:	e187      	b.n	80056d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053c2:	4b1b      	ldr	r3, [pc, #108]	@ (8005430 <HAL_RCC_OscConfig+0x240>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f003 0302 	and.w	r3, r3, #2
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d1f0      	bne.n	80053b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 0308 	and.w	r3, r3, #8
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d036      	beq.n	8005448 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	695b      	ldr	r3, [r3, #20]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d016      	beq.n	8005410 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80053e2:	4b15      	ldr	r3, [pc, #84]	@ (8005438 <HAL_RCC_OscConfig+0x248>)
 80053e4:	2201      	movs	r2, #1
 80053e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053e8:	f7fc fcd2 	bl	8001d90 <HAL_GetTick>
 80053ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053ee:	e008      	b.n	8005402 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053f0:	f7fc fcce 	bl	8001d90 <HAL_GetTick>
 80053f4:	4602      	mov	r2, r0
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	1ad3      	subs	r3, r2, r3
 80053fa:	2b02      	cmp	r3, #2
 80053fc:	d901      	bls.n	8005402 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80053fe:	2303      	movs	r3, #3
 8005400:	e167      	b.n	80056d2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005402:	4b0b      	ldr	r3, [pc, #44]	@ (8005430 <HAL_RCC_OscConfig+0x240>)
 8005404:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005406:	f003 0302 	and.w	r3, r3, #2
 800540a:	2b00      	cmp	r3, #0
 800540c:	d0f0      	beq.n	80053f0 <HAL_RCC_OscConfig+0x200>
 800540e:	e01b      	b.n	8005448 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005410:	4b09      	ldr	r3, [pc, #36]	@ (8005438 <HAL_RCC_OscConfig+0x248>)
 8005412:	2200      	movs	r2, #0
 8005414:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005416:	f7fc fcbb 	bl	8001d90 <HAL_GetTick>
 800541a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800541c:	e00e      	b.n	800543c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800541e:	f7fc fcb7 	bl	8001d90 <HAL_GetTick>
 8005422:	4602      	mov	r2, r0
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	1ad3      	subs	r3, r2, r3
 8005428:	2b02      	cmp	r3, #2
 800542a:	d907      	bls.n	800543c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800542c:	2303      	movs	r3, #3
 800542e:	e150      	b.n	80056d2 <HAL_RCC_OscConfig+0x4e2>
 8005430:	40023800 	.word	0x40023800
 8005434:	42470000 	.word	0x42470000
 8005438:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800543c:	4b88      	ldr	r3, [pc, #544]	@ (8005660 <HAL_RCC_OscConfig+0x470>)
 800543e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005440:	f003 0302 	and.w	r3, r3, #2
 8005444:	2b00      	cmp	r3, #0
 8005446:	d1ea      	bne.n	800541e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f003 0304 	and.w	r3, r3, #4
 8005450:	2b00      	cmp	r3, #0
 8005452:	f000 8097 	beq.w	8005584 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005456:	2300      	movs	r3, #0
 8005458:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800545a:	4b81      	ldr	r3, [pc, #516]	@ (8005660 <HAL_RCC_OscConfig+0x470>)
 800545c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800545e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005462:	2b00      	cmp	r3, #0
 8005464:	d10f      	bne.n	8005486 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005466:	2300      	movs	r3, #0
 8005468:	60bb      	str	r3, [r7, #8]
 800546a:	4b7d      	ldr	r3, [pc, #500]	@ (8005660 <HAL_RCC_OscConfig+0x470>)
 800546c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800546e:	4a7c      	ldr	r2, [pc, #496]	@ (8005660 <HAL_RCC_OscConfig+0x470>)
 8005470:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005474:	6413      	str	r3, [r2, #64]	@ 0x40
 8005476:	4b7a      	ldr	r3, [pc, #488]	@ (8005660 <HAL_RCC_OscConfig+0x470>)
 8005478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800547a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800547e:	60bb      	str	r3, [r7, #8]
 8005480:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005482:	2301      	movs	r3, #1
 8005484:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005486:	4b77      	ldr	r3, [pc, #476]	@ (8005664 <HAL_RCC_OscConfig+0x474>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800548e:	2b00      	cmp	r3, #0
 8005490:	d118      	bne.n	80054c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005492:	4b74      	ldr	r3, [pc, #464]	@ (8005664 <HAL_RCC_OscConfig+0x474>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a73      	ldr	r2, [pc, #460]	@ (8005664 <HAL_RCC_OscConfig+0x474>)
 8005498:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800549c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800549e:	f7fc fc77 	bl	8001d90 <HAL_GetTick>
 80054a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054a4:	e008      	b.n	80054b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054a6:	f7fc fc73 	bl	8001d90 <HAL_GetTick>
 80054aa:	4602      	mov	r2, r0
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	1ad3      	subs	r3, r2, r3
 80054b0:	2b02      	cmp	r3, #2
 80054b2:	d901      	bls.n	80054b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80054b4:	2303      	movs	r3, #3
 80054b6:	e10c      	b.n	80056d2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054b8:	4b6a      	ldr	r3, [pc, #424]	@ (8005664 <HAL_RCC_OscConfig+0x474>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d0f0      	beq.n	80054a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d106      	bne.n	80054da <HAL_RCC_OscConfig+0x2ea>
 80054cc:	4b64      	ldr	r3, [pc, #400]	@ (8005660 <HAL_RCC_OscConfig+0x470>)
 80054ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054d0:	4a63      	ldr	r2, [pc, #396]	@ (8005660 <HAL_RCC_OscConfig+0x470>)
 80054d2:	f043 0301 	orr.w	r3, r3, #1
 80054d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80054d8:	e01c      	b.n	8005514 <HAL_RCC_OscConfig+0x324>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	2b05      	cmp	r3, #5
 80054e0:	d10c      	bne.n	80054fc <HAL_RCC_OscConfig+0x30c>
 80054e2:	4b5f      	ldr	r3, [pc, #380]	@ (8005660 <HAL_RCC_OscConfig+0x470>)
 80054e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054e6:	4a5e      	ldr	r2, [pc, #376]	@ (8005660 <HAL_RCC_OscConfig+0x470>)
 80054e8:	f043 0304 	orr.w	r3, r3, #4
 80054ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80054ee:	4b5c      	ldr	r3, [pc, #368]	@ (8005660 <HAL_RCC_OscConfig+0x470>)
 80054f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054f2:	4a5b      	ldr	r2, [pc, #364]	@ (8005660 <HAL_RCC_OscConfig+0x470>)
 80054f4:	f043 0301 	orr.w	r3, r3, #1
 80054f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80054fa:	e00b      	b.n	8005514 <HAL_RCC_OscConfig+0x324>
 80054fc:	4b58      	ldr	r3, [pc, #352]	@ (8005660 <HAL_RCC_OscConfig+0x470>)
 80054fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005500:	4a57      	ldr	r2, [pc, #348]	@ (8005660 <HAL_RCC_OscConfig+0x470>)
 8005502:	f023 0301 	bic.w	r3, r3, #1
 8005506:	6713      	str	r3, [r2, #112]	@ 0x70
 8005508:	4b55      	ldr	r3, [pc, #340]	@ (8005660 <HAL_RCC_OscConfig+0x470>)
 800550a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800550c:	4a54      	ldr	r2, [pc, #336]	@ (8005660 <HAL_RCC_OscConfig+0x470>)
 800550e:	f023 0304 	bic.w	r3, r3, #4
 8005512:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d015      	beq.n	8005548 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800551c:	f7fc fc38 	bl	8001d90 <HAL_GetTick>
 8005520:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005522:	e00a      	b.n	800553a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005524:	f7fc fc34 	bl	8001d90 <HAL_GetTick>
 8005528:	4602      	mov	r2, r0
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	1ad3      	subs	r3, r2, r3
 800552e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005532:	4293      	cmp	r3, r2
 8005534:	d901      	bls.n	800553a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005536:	2303      	movs	r3, #3
 8005538:	e0cb      	b.n	80056d2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800553a:	4b49      	ldr	r3, [pc, #292]	@ (8005660 <HAL_RCC_OscConfig+0x470>)
 800553c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800553e:	f003 0302 	and.w	r3, r3, #2
 8005542:	2b00      	cmp	r3, #0
 8005544:	d0ee      	beq.n	8005524 <HAL_RCC_OscConfig+0x334>
 8005546:	e014      	b.n	8005572 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005548:	f7fc fc22 	bl	8001d90 <HAL_GetTick>
 800554c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800554e:	e00a      	b.n	8005566 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005550:	f7fc fc1e 	bl	8001d90 <HAL_GetTick>
 8005554:	4602      	mov	r2, r0
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	1ad3      	subs	r3, r2, r3
 800555a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800555e:	4293      	cmp	r3, r2
 8005560:	d901      	bls.n	8005566 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005562:	2303      	movs	r3, #3
 8005564:	e0b5      	b.n	80056d2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005566:	4b3e      	ldr	r3, [pc, #248]	@ (8005660 <HAL_RCC_OscConfig+0x470>)
 8005568:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800556a:	f003 0302 	and.w	r3, r3, #2
 800556e:	2b00      	cmp	r3, #0
 8005570:	d1ee      	bne.n	8005550 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005572:	7dfb      	ldrb	r3, [r7, #23]
 8005574:	2b01      	cmp	r3, #1
 8005576:	d105      	bne.n	8005584 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005578:	4b39      	ldr	r3, [pc, #228]	@ (8005660 <HAL_RCC_OscConfig+0x470>)
 800557a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800557c:	4a38      	ldr	r2, [pc, #224]	@ (8005660 <HAL_RCC_OscConfig+0x470>)
 800557e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005582:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	699b      	ldr	r3, [r3, #24]
 8005588:	2b00      	cmp	r3, #0
 800558a:	f000 80a1 	beq.w	80056d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800558e:	4b34      	ldr	r3, [pc, #208]	@ (8005660 <HAL_RCC_OscConfig+0x470>)
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	f003 030c 	and.w	r3, r3, #12
 8005596:	2b08      	cmp	r3, #8
 8005598:	d05c      	beq.n	8005654 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	699b      	ldr	r3, [r3, #24]
 800559e:	2b02      	cmp	r3, #2
 80055a0:	d141      	bne.n	8005626 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055a2:	4b31      	ldr	r3, [pc, #196]	@ (8005668 <HAL_RCC_OscConfig+0x478>)
 80055a4:	2200      	movs	r2, #0
 80055a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055a8:	f7fc fbf2 	bl	8001d90 <HAL_GetTick>
 80055ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055ae:	e008      	b.n	80055c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055b0:	f7fc fbee 	bl	8001d90 <HAL_GetTick>
 80055b4:	4602      	mov	r2, r0
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	1ad3      	subs	r3, r2, r3
 80055ba:	2b02      	cmp	r3, #2
 80055bc:	d901      	bls.n	80055c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80055be:	2303      	movs	r3, #3
 80055c0:	e087      	b.n	80056d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055c2:	4b27      	ldr	r3, [pc, #156]	@ (8005660 <HAL_RCC_OscConfig+0x470>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d1f0      	bne.n	80055b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	69da      	ldr	r2, [r3, #28]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6a1b      	ldr	r3, [r3, #32]
 80055d6:	431a      	orrs	r2, r3
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055dc:	019b      	lsls	r3, r3, #6
 80055de:	431a      	orrs	r2, r3
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055e4:	085b      	lsrs	r3, r3, #1
 80055e6:	3b01      	subs	r3, #1
 80055e8:	041b      	lsls	r3, r3, #16
 80055ea:	431a      	orrs	r2, r3
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055f0:	061b      	lsls	r3, r3, #24
 80055f2:	491b      	ldr	r1, [pc, #108]	@ (8005660 <HAL_RCC_OscConfig+0x470>)
 80055f4:	4313      	orrs	r3, r2
 80055f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80055f8:	4b1b      	ldr	r3, [pc, #108]	@ (8005668 <HAL_RCC_OscConfig+0x478>)
 80055fa:	2201      	movs	r2, #1
 80055fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055fe:	f7fc fbc7 	bl	8001d90 <HAL_GetTick>
 8005602:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005604:	e008      	b.n	8005618 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005606:	f7fc fbc3 	bl	8001d90 <HAL_GetTick>
 800560a:	4602      	mov	r2, r0
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	1ad3      	subs	r3, r2, r3
 8005610:	2b02      	cmp	r3, #2
 8005612:	d901      	bls.n	8005618 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005614:	2303      	movs	r3, #3
 8005616:	e05c      	b.n	80056d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005618:	4b11      	ldr	r3, [pc, #68]	@ (8005660 <HAL_RCC_OscConfig+0x470>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005620:	2b00      	cmp	r3, #0
 8005622:	d0f0      	beq.n	8005606 <HAL_RCC_OscConfig+0x416>
 8005624:	e054      	b.n	80056d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005626:	4b10      	ldr	r3, [pc, #64]	@ (8005668 <HAL_RCC_OscConfig+0x478>)
 8005628:	2200      	movs	r2, #0
 800562a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800562c:	f7fc fbb0 	bl	8001d90 <HAL_GetTick>
 8005630:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005632:	e008      	b.n	8005646 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005634:	f7fc fbac 	bl	8001d90 <HAL_GetTick>
 8005638:	4602      	mov	r2, r0
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	1ad3      	subs	r3, r2, r3
 800563e:	2b02      	cmp	r3, #2
 8005640:	d901      	bls.n	8005646 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005642:	2303      	movs	r3, #3
 8005644:	e045      	b.n	80056d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005646:	4b06      	ldr	r3, [pc, #24]	@ (8005660 <HAL_RCC_OscConfig+0x470>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800564e:	2b00      	cmp	r3, #0
 8005650:	d1f0      	bne.n	8005634 <HAL_RCC_OscConfig+0x444>
 8005652:	e03d      	b.n	80056d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	699b      	ldr	r3, [r3, #24]
 8005658:	2b01      	cmp	r3, #1
 800565a:	d107      	bne.n	800566c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	e038      	b.n	80056d2 <HAL_RCC_OscConfig+0x4e2>
 8005660:	40023800 	.word	0x40023800
 8005664:	40007000 	.word	0x40007000
 8005668:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800566c:	4b1b      	ldr	r3, [pc, #108]	@ (80056dc <HAL_RCC_OscConfig+0x4ec>)
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	699b      	ldr	r3, [r3, #24]
 8005676:	2b01      	cmp	r3, #1
 8005678:	d028      	beq.n	80056cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005684:	429a      	cmp	r2, r3
 8005686:	d121      	bne.n	80056cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005692:	429a      	cmp	r2, r3
 8005694:	d11a      	bne.n	80056cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005696:	68fa      	ldr	r2, [r7, #12]
 8005698:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800569c:	4013      	ands	r3, r2
 800569e:	687a      	ldr	r2, [r7, #4]
 80056a0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80056a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d111      	bne.n	80056cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056b2:	085b      	lsrs	r3, r3, #1
 80056b4:	3b01      	subs	r3, #1
 80056b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80056b8:	429a      	cmp	r2, r3
 80056ba:	d107      	bne.n	80056cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d001      	beq.n	80056d0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	e000      	b.n	80056d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80056d0:	2300      	movs	r3, #0
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3718      	adds	r7, #24
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}
 80056da:	bf00      	nop
 80056dc:	40023800 	.word	0x40023800

080056e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b084      	sub	sp, #16
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
 80056e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d101      	bne.n	80056f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80056f0:	2301      	movs	r3, #1
 80056f2:	e0cc      	b.n	800588e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80056f4:	4b68      	ldr	r3, [pc, #416]	@ (8005898 <HAL_RCC_ClockConfig+0x1b8>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f003 0307 	and.w	r3, r3, #7
 80056fc:	683a      	ldr	r2, [r7, #0]
 80056fe:	429a      	cmp	r2, r3
 8005700:	d90c      	bls.n	800571c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005702:	4b65      	ldr	r3, [pc, #404]	@ (8005898 <HAL_RCC_ClockConfig+0x1b8>)
 8005704:	683a      	ldr	r2, [r7, #0]
 8005706:	b2d2      	uxtb	r2, r2
 8005708:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800570a:	4b63      	ldr	r3, [pc, #396]	@ (8005898 <HAL_RCC_ClockConfig+0x1b8>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f003 0307 	and.w	r3, r3, #7
 8005712:	683a      	ldr	r2, [r7, #0]
 8005714:	429a      	cmp	r2, r3
 8005716:	d001      	beq.n	800571c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005718:	2301      	movs	r3, #1
 800571a:	e0b8      	b.n	800588e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f003 0302 	and.w	r3, r3, #2
 8005724:	2b00      	cmp	r3, #0
 8005726:	d020      	beq.n	800576a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f003 0304 	and.w	r3, r3, #4
 8005730:	2b00      	cmp	r3, #0
 8005732:	d005      	beq.n	8005740 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005734:	4b59      	ldr	r3, [pc, #356]	@ (800589c <HAL_RCC_ClockConfig+0x1bc>)
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	4a58      	ldr	r2, [pc, #352]	@ (800589c <HAL_RCC_ClockConfig+0x1bc>)
 800573a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800573e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f003 0308 	and.w	r3, r3, #8
 8005748:	2b00      	cmp	r3, #0
 800574a:	d005      	beq.n	8005758 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800574c:	4b53      	ldr	r3, [pc, #332]	@ (800589c <HAL_RCC_ClockConfig+0x1bc>)
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	4a52      	ldr	r2, [pc, #328]	@ (800589c <HAL_RCC_ClockConfig+0x1bc>)
 8005752:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005756:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005758:	4b50      	ldr	r3, [pc, #320]	@ (800589c <HAL_RCC_ClockConfig+0x1bc>)
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	494d      	ldr	r1, [pc, #308]	@ (800589c <HAL_RCC_ClockConfig+0x1bc>)
 8005766:	4313      	orrs	r3, r2
 8005768:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f003 0301 	and.w	r3, r3, #1
 8005772:	2b00      	cmp	r3, #0
 8005774:	d044      	beq.n	8005800 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	2b01      	cmp	r3, #1
 800577c:	d107      	bne.n	800578e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800577e:	4b47      	ldr	r3, [pc, #284]	@ (800589c <HAL_RCC_ClockConfig+0x1bc>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005786:	2b00      	cmp	r3, #0
 8005788:	d119      	bne.n	80057be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	e07f      	b.n	800588e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	2b02      	cmp	r3, #2
 8005794:	d003      	beq.n	800579e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800579a:	2b03      	cmp	r3, #3
 800579c:	d107      	bne.n	80057ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800579e:	4b3f      	ldr	r3, [pc, #252]	@ (800589c <HAL_RCC_ClockConfig+0x1bc>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d109      	bne.n	80057be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	e06f      	b.n	800588e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057ae:	4b3b      	ldr	r3, [pc, #236]	@ (800589c <HAL_RCC_ClockConfig+0x1bc>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f003 0302 	and.w	r3, r3, #2
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d101      	bne.n	80057be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	e067      	b.n	800588e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80057be:	4b37      	ldr	r3, [pc, #220]	@ (800589c <HAL_RCC_ClockConfig+0x1bc>)
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	f023 0203 	bic.w	r2, r3, #3
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	4934      	ldr	r1, [pc, #208]	@ (800589c <HAL_RCC_ClockConfig+0x1bc>)
 80057cc:	4313      	orrs	r3, r2
 80057ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80057d0:	f7fc fade 	bl	8001d90 <HAL_GetTick>
 80057d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057d6:	e00a      	b.n	80057ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057d8:	f7fc fada 	bl	8001d90 <HAL_GetTick>
 80057dc:	4602      	mov	r2, r0
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	1ad3      	subs	r3, r2, r3
 80057e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d901      	bls.n	80057ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80057ea:	2303      	movs	r3, #3
 80057ec:	e04f      	b.n	800588e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057ee:	4b2b      	ldr	r3, [pc, #172]	@ (800589c <HAL_RCC_ClockConfig+0x1bc>)
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	f003 020c 	and.w	r2, r3, #12
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	009b      	lsls	r3, r3, #2
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d1eb      	bne.n	80057d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005800:	4b25      	ldr	r3, [pc, #148]	@ (8005898 <HAL_RCC_ClockConfig+0x1b8>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f003 0307 	and.w	r3, r3, #7
 8005808:	683a      	ldr	r2, [r7, #0]
 800580a:	429a      	cmp	r2, r3
 800580c:	d20c      	bcs.n	8005828 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800580e:	4b22      	ldr	r3, [pc, #136]	@ (8005898 <HAL_RCC_ClockConfig+0x1b8>)
 8005810:	683a      	ldr	r2, [r7, #0]
 8005812:	b2d2      	uxtb	r2, r2
 8005814:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005816:	4b20      	ldr	r3, [pc, #128]	@ (8005898 <HAL_RCC_ClockConfig+0x1b8>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f003 0307 	and.w	r3, r3, #7
 800581e:	683a      	ldr	r2, [r7, #0]
 8005820:	429a      	cmp	r2, r3
 8005822:	d001      	beq.n	8005828 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005824:	2301      	movs	r3, #1
 8005826:	e032      	b.n	800588e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f003 0304 	and.w	r3, r3, #4
 8005830:	2b00      	cmp	r3, #0
 8005832:	d008      	beq.n	8005846 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005834:	4b19      	ldr	r3, [pc, #100]	@ (800589c <HAL_RCC_ClockConfig+0x1bc>)
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	68db      	ldr	r3, [r3, #12]
 8005840:	4916      	ldr	r1, [pc, #88]	@ (800589c <HAL_RCC_ClockConfig+0x1bc>)
 8005842:	4313      	orrs	r3, r2
 8005844:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f003 0308 	and.w	r3, r3, #8
 800584e:	2b00      	cmp	r3, #0
 8005850:	d009      	beq.n	8005866 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005852:	4b12      	ldr	r3, [pc, #72]	@ (800589c <HAL_RCC_ClockConfig+0x1bc>)
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	691b      	ldr	r3, [r3, #16]
 800585e:	00db      	lsls	r3, r3, #3
 8005860:	490e      	ldr	r1, [pc, #56]	@ (800589c <HAL_RCC_ClockConfig+0x1bc>)
 8005862:	4313      	orrs	r3, r2
 8005864:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005866:	f000 f821 	bl	80058ac <HAL_RCC_GetSysClockFreq>
 800586a:	4602      	mov	r2, r0
 800586c:	4b0b      	ldr	r3, [pc, #44]	@ (800589c <HAL_RCC_ClockConfig+0x1bc>)
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	091b      	lsrs	r3, r3, #4
 8005872:	f003 030f 	and.w	r3, r3, #15
 8005876:	490a      	ldr	r1, [pc, #40]	@ (80058a0 <HAL_RCC_ClockConfig+0x1c0>)
 8005878:	5ccb      	ldrb	r3, [r1, r3]
 800587a:	fa22 f303 	lsr.w	r3, r2, r3
 800587e:	4a09      	ldr	r2, [pc, #36]	@ (80058a4 <HAL_RCC_ClockConfig+0x1c4>)
 8005880:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005882:	4b09      	ldr	r3, [pc, #36]	@ (80058a8 <HAL_RCC_ClockConfig+0x1c8>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4618      	mov	r0, r3
 8005888:	f7fc fa3e 	bl	8001d08 <HAL_InitTick>

  return HAL_OK;
 800588c:	2300      	movs	r3, #0
}
 800588e:	4618      	mov	r0, r3
 8005890:	3710      	adds	r7, #16
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}
 8005896:	bf00      	nop
 8005898:	40023c00 	.word	0x40023c00
 800589c:	40023800 	.word	0x40023800
 80058a0:	0800d508 	.word	0x0800d508
 80058a4:	20000000 	.word	0x20000000
 80058a8:	20000004 	.word	0x20000004

080058ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058b0:	b094      	sub	sp, #80	@ 0x50
 80058b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80058b4:	2300      	movs	r3, #0
 80058b6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80058b8:	2300      	movs	r3, #0
 80058ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80058bc:	2300      	movs	r3, #0
 80058be:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80058c0:	2300      	movs	r3, #0
 80058c2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80058c4:	4b79      	ldr	r3, [pc, #484]	@ (8005aac <HAL_RCC_GetSysClockFreq+0x200>)
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	f003 030c 	and.w	r3, r3, #12
 80058cc:	2b08      	cmp	r3, #8
 80058ce:	d00d      	beq.n	80058ec <HAL_RCC_GetSysClockFreq+0x40>
 80058d0:	2b08      	cmp	r3, #8
 80058d2:	f200 80e1 	bhi.w	8005a98 <HAL_RCC_GetSysClockFreq+0x1ec>
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d002      	beq.n	80058e0 <HAL_RCC_GetSysClockFreq+0x34>
 80058da:	2b04      	cmp	r3, #4
 80058dc:	d003      	beq.n	80058e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80058de:	e0db      	b.n	8005a98 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80058e0:	4b73      	ldr	r3, [pc, #460]	@ (8005ab0 <HAL_RCC_GetSysClockFreq+0x204>)
 80058e2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80058e4:	e0db      	b.n	8005a9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80058e6:	4b73      	ldr	r3, [pc, #460]	@ (8005ab4 <HAL_RCC_GetSysClockFreq+0x208>)
 80058e8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80058ea:	e0d8      	b.n	8005a9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80058ec:	4b6f      	ldr	r3, [pc, #444]	@ (8005aac <HAL_RCC_GetSysClockFreq+0x200>)
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80058f4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80058f6:	4b6d      	ldr	r3, [pc, #436]	@ (8005aac <HAL_RCC_GetSysClockFreq+0x200>)
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d063      	beq.n	80059ca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005902:	4b6a      	ldr	r3, [pc, #424]	@ (8005aac <HAL_RCC_GetSysClockFreq+0x200>)
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	099b      	lsrs	r3, r3, #6
 8005908:	2200      	movs	r2, #0
 800590a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800590c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800590e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005910:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005914:	633b      	str	r3, [r7, #48]	@ 0x30
 8005916:	2300      	movs	r3, #0
 8005918:	637b      	str	r3, [r7, #52]	@ 0x34
 800591a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800591e:	4622      	mov	r2, r4
 8005920:	462b      	mov	r3, r5
 8005922:	f04f 0000 	mov.w	r0, #0
 8005926:	f04f 0100 	mov.w	r1, #0
 800592a:	0159      	lsls	r1, r3, #5
 800592c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005930:	0150      	lsls	r0, r2, #5
 8005932:	4602      	mov	r2, r0
 8005934:	460b      	mov	r3, r1
 8005936:	4621      	mov	r1, r4
 8005938:	1a51      	subs	r1, r2, r1
 800593a:	6139      	str	r1, [r7, #16]
 800593c:	4629      	mov	r1, r5
 800593e:	eb63 0301 	sbc.w	r3, r3, r1
 8005942:	617b      	str	r3, [r7, #20]
 8005944:	f04f 0200 	mov.w	r2, #0
 8005948:	f04f 0300 	mov.w	r3, #0
 800594c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005950:	4659      	mov	r1, fp
 8005952:	018b      	lsls	r3, r1, #6
 8005954:	4651      	mov	r1, sl
 8005956:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800595a:	4651      	mov	r1, sl
 800595c:	018a      	lsls	r2, r1, #6
 800595e:	4651      	mov	r1, sl
 8005960:	ebb2 0801 	subs.w	r8, r2, r1
 8005964:	4659      	mov	r1, fp
 8005966:	eb63 0901 	sbc.w	r9, r3, r1
 800596a:	f04f 0200 	mov.w	r2, #0
 800596e:	f04f 0300 	mov.w	r3, #0
 8005972:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005976:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800597a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800597e:	4690      	mov	r8, r2
 8005980:	4699      	mov	r9, r3
 8005982:	4623      	mov	r3, r4
 8005984:	eb18 0303 	adds.w	r3, r8, r3
 8005988:	60bb      	str	r3, [r7, #8]
 800598a:	462b      	mov	r3, r5
 800598c:	eb49 0303 	adc.w	r3, r9, r3
 8005990:	60fb      	str	r3, [r7, #12]
 8005992:	f04f 0200 	mov.w	r2, #0
 8005996:	f04f 0300 	mov.w	r3, #0
 800599a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800599e:	4629      	mov	r1, r5
 80059a0:	024b      	lsls	r3, r1, #9
 80059a2:	4621      	mov	r1, r4
 80059a4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80059a8:	4621      	mov	r1, r4
 80059aa:	024a      	lsls	r2, r1, #9
 80059ac:	4610      	mov	r0, r2
 80059ae:	4619      	mov	r1, r3
 80059b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80059b2:	2200      	movs	r2, #0
 80059b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80059b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80059b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80059bc:	f7fb f8f4 	bl	8000ba8 <__aeabi_uldivmod>
 80059c0:	4602      	mov	r2, r0
 80059c2:	460b      	mov	r3, r1
 80059c4:	4613      	mov	r3, r2
 80059c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80059c8:	e058      	b.n	8005a7c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059ca:	4b38      	ldr	r3, [pc, #224]	@ (8005aac <HAL_RCC_GetSysClockFreq+0x200>)
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	099b      	lsrs	r3, r3, #6
 80059d0:	2200      	movs	r2, #0
 80059d2:	4618      	mov	r0, r3
 80059d4:	4611      	mov	r1, r2
 80059d6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80059da:	623b      	str	r3, [r7, #32]
 80059dc:	2300      	movs	r3, #0
 80059de:	627b      	str	r3, [r7, #36]	@ 0x24
 80059e0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80059e4:	4642      	mov	r2, r8
 80059e6:	464b      	mov	r3, r9
 80059e8:	f04f 0000 	mov.w	r0, #0
 80059ec:	f04f 0100 	mov.w	r1, #0
 80059f0:	0159      	lsls	r1, r3, #5
 80059f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80059f6:	0150      	lsls	r0, r2, #5
 80059f8:	4602      	mov	r2, r0
 80059fa:	460b      	mov	r3, r1
 80059fc:	4641      	mov	r1, r8
 80059fe:	ebb2 0a01 	subs.w	sl, r2, r1
 8005a02:	4649      	mov	r1, r9
 8005a04:	eb63 0b01 	sbc.w	fp, r3, r1
 8005a08:	f04f 0200 	mov.w	r2, #0
 8005a0c:	f04f 0300 	mov.w	r3, #0
 8005a10:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005a14:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005a18:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005a1c:	ebb2 040a 	subs.w	r4, r2, sl
 8005a20:	eb63 050b 	sbc.w	r5, r3, fp
 8005a24:	f04f 0200 	mov.w	r2, #0
 8005a28:	f04f 0300 	mov.w	r3, #0
 8005a2c:	00eb      	lsls	r3, r5, #3
 8005a2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a32:	00e2      	lsls	r2, r4, #3
 8005a34:	4614      	mov	r4, r2
 8005a36:	461d      	mov	r5, r3
 8005a38:	4643      	mov	r3, r8
 8005a3a:	18e3      	adds	r3, r4, r3
 8005a3c:	603b      	str	r3, [r7, #0]
 8005a3e:	464b      	mov	r3, r9
 8005a40:	eb45 0303 	adc.w	r3, r5, r3
 8005a44:	607b      	str	r3, [r7, #4]
 8005a46:	f04f 0200 	mov.w	r2, #0
 8005a4a:	f04f 0300 	mov.w	r3, #0
 8005a4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005a52:	4629      	mov	r1, r5
 8005a54:	028b      	lsls	r3, r1, #10
 8005a56:	4621      	mov	r1, r4
 8005a58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005a5c:	4621      	mov	r1, r4
 8005a5e:	028a      	lsls	r2, r1, #10
 8005a60:	4610      	mov	r0, r2
 8005a62:	4619      	mov	r1, r3
 8005a64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a66:	2200      	movs	r2, #0
 8005a68:	61bb      	str	r3, [r7, #24]
 8005a6a:	61fa      	str	r2, [r7, #28]
 8005a6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a70:	f7fb f89a 	bl	8000ba8 <__aeabi_uldivmod>
 8005a74:	4602      	mov	r2, r0
 8005a76:	460b      	mov	r3, r1
 8005a78:	4613      	mov	r3, r2
 8005a7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005a7c:	4b0b      	ldr	r3, [pc, #44]	@ (8005aac <HAL_RCC_GetSysClockFreq+0x200>)
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	0c1b      	lsrs	r3, r3, #16
 8005a82:	f003 0303 	and.w	r3, r3, #3
 8005a86:	3301      	adds	r3, #1
 8005a88:	005b      	lsls	r3, r3, #1
 8005a8a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005a8c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005a8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a94:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005a96:	e002      	b.n	8005a9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005a98:	4b05      	ldr	r3, [pc, #20]	@ (8005ab0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005a9a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005a9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	3750      	adds	r7, #80	@ 0x50
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005aaa:	bf00      	nop
 8005aac:	40023800 	.word	0x40023800
 8005ab0:	00f42400 	.word	0x00f42400
 8005ab4:	007a1200 	.word	0x007a1200

08005ab8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005abc:	4b03      	ldr	r3, [pc, #12]	@ (8005acc <HAL_RCC_GetHCLKFreq+0x14>)
 8005abe:	681b      	ldr	r3, [r3, #0]
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac8:	4770      	bx	lr
 8005aca:	bf00      	nop
 8005acc:	20000000 	.word	0x20000000

08005ad0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005ad4:	f7ff fff0 	bl	8005ab8 <HAL_RCC_GetHCLKFreq>
 8005ad8:	4602      	mov	r2, r0
 8005ada:	4b05      	ldr	r3, [pc, #20]	@ (8005af0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	0a9b      	lsrs	r3, r3, #10
 8005ae0:	f003 0307 	and.w	r3, r3, #7
 8005ae4:	4903      	ldr	r1, [pc, #12]	@ (8005af4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ae6:	5ccb      	ldrb	r3, [r1, r3]
 8005ae8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	bd80      	pop	{r7, pc}
 8005af0:	40023800 	.word	0x40023800
 8005af4:	0800d518 	.word	0x0800d518

08005af8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005afc:	f7ff ffdc 	bl	8005ab8 <HAL_RCC_GetHCLKFreq>
 8005b00:	4602      	mov	r2, r0
 8005b02:	4b05      	ldr	r3, [pc, #20]	@ (8005b18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	0b5b      	lsrs	r3, r3, #13
 8005b08:	f003 0307 	and.w	r3, r3, #7
 8005b0c:	4903      	ldr	r1, [pc, #12]	@ (8005b1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b0e:	5ccb      	ldrb	r3, [r1, r3]
 8005b10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	bd80      	pop	{r7, pc}
 8005b18:	40023800 	.word	0x40023800
 8005b1c:	0800d518 	.word	0x0800d518

08005b20 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b086      	sub	sp, #24
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f003 0301 	and.w	r3, r3, #1
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d105      	bne.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d035      	beq.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005b48:	4b62      	ldr	r3, [pc, #392]	@ (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005b4e:	f7fc f91f 	bl	8001d90 <HAL_GetTick>
 8005b52:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005b54:	e008      	b.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005b56:	f7fc f91b 	bl	8001d90 <HAL_GetTick>
 8005b5a:	4602      	mov	r2, r0
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	1ad3      	subs	r3, r2, r3
 8005b60:	2b02      	cmp	r3, #2
 8005b62:	d901      	bls.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b64:	2303      	movs	r3, #3
 8005b66:	e0b0      	b.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005b68:	4b5b      	ldr	r3, [pc, #364]	@ (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d1f0      	bne.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	019a      	lsls	r2, r3, #6
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	071b      	lsls	r3, r3, #28
 8005b80:	4955      	ldr	r1, [pc, #340]	@ (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b82:	4313      	orrs	r3, r2
 8005b84:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005b88:	4b52      	ldr	r3, [pc, #328]	@ (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005b8e:	f7fc f8ff 	bl	8001d90 <HAL_GetTick>
 8005b92:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005b94:	e008      	b.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005b96:	f7fc f8fb 	bl	8001d90 <HAL_GetTick>
 8005b9a:	4602      	mov	r2, r0
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	1ad3      	subs	r3, r2, r3
 8005ba0:	2b02      	cmp	r3, #2
 8005ba2:	d901      	bls.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ba4:	2303      	movs	r3, #3
 8005ba6:	e090      	b.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005ba8:	4b4b      	ldr	r3, [pc, #300]	@ (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d0f0      	beq.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f003 0302 	and.w	r3, r3, #2
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	f000 8083 	beq.w	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	60fb      	str	r3, [r7, #12]
 8005bc6:	4b44      	ldr	r3, [pc, #272]	@ (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bca:	4a43      	ldr	r2, [pc, #268]	@ (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005bcc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005bd0:	6413      	str	r3, [r2, #64]	@ 0x40
 8005bd2:	4b41      	ldr	r3, [pc, #260]	@ (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005bda:	60fb      	str	r3, [r7, #12]
 8005bdc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005bde:	4b3f      	ldr	r3, [pc, #252]	@ (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a3e      	ldr	r2, [pc, #248]	@ (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005be4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005be8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005bea:	f7fc f8d1 	bl	8001d90 <HAL_GetTick>
 8005bee:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005bf0:	e008      	b.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bf2:	f7fc f8cd 	bl	8001d90 <HAL_GetTick>
 8005bf6:	4602      	mov	r2, r0
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	1ad3      	subs	r3, r2, r3
 8005bfc:	2b02      	cmp	r3, #2
 8005bfe:	d901      	bls.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005c00:	2303      	movs	r3, #3
 8005c02:	e062      	b.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005c04:	4b35      	ldr	r3, [pc, #212]	@ (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d0f0      	beq.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005c10:	4b31      	ldr	r3, [pc, #196]	@ (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005c12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c14:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c18:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d02f      	beq.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	68db      	ldr	r3, [r3, #12]
 8005c24:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c28:	693a      	ldr	r2, [r7, #16]
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d028      	beq.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005c2e:	4b2a      	ldr	r3, [pc, #168]	@ (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005c30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c36:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005c38:	4b29      	ldr	r3, [pc, #164]	@ (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005c3e:	4b28      	ldr	r3, [pc, #160]	@ (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005c40:	2200      	movs	r2, #0
 8005c42:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005c44:	4a24      	ldr	r2, [pc, #144]	@ (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005c4a:	4b23      	ldr	r3, [pc, #140]	@ (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005c4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c4e:	f003 0301 	and.w	r3, r3, #1
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d114      	bne.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005c56:	f7fc f89b 	bl	8001d90 <HAL_GetTick>
 8005c5a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c5c:	e00a      	b.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c5e:	f7fc f897 	bl	8001d90 <HAL_GetTick>
 8005c62:	4602      	mov	r2, r0
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	1ad3      	subs	r3, r2, r3
 8005c68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d901      	bls.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005c70:	2303      	movs	r3, #3
 8005c72:	e02a      	b.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c74:	4b18      	ldr	r3, [pc, #96]	@ (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005c76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c78:	f003 0302 	and.w	r3, r3, #2
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d0ee      	beq.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	68db      	ldr	r3, [r3, #12]
 8005c84:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c88:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005c8c:	d10d      	bne.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005c8e:	4b12      	ldr	r3, [pc, #72]	@ (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	68db      	ldr	r3, [r3, #12]
 8005c9a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005c9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ca2:	490d      	ldr	r1, [pc, #52]	@ (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	608b      	str	r3, [r1, #8]
 8005ca8:	e005      	b.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005caa:	4b0b      	ldr	r3, [pc, #44]	@ (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	4a0a      	ldr	r2, [pc, #40]	@ (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005cb0:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005cb4:	6093      	str	r3, [r2, #8]
 8005cb6:	4b08      	ldr	r3, [pc, #32]	@ (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005cb8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	68db      	ldr	r3, [r3, #12]
 8005cbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cc2:	4905      	ldr	r1, [pc, #20]	@ (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005cc8:	2300      	movs	r3, #0
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3718      	adds	r7, #24
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}
 8005cd2:	bf00      	nop
 8005cd4:	42470068 	.word	0x42470068
 8005cd8:	40023800 	.word	0x40023800
 8005cdc:	40007000 	.word	0x40007000
 8005ce0:	42470e40 	.word	0x42470e40

08005ce4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b087      	sub	sp, #28
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005cec:	2300      	movs	r3, #0
 8005cee:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2b01      	cmp	r3, #1
 8005d00:	d13f      	bne.n	8005d82 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005d02:	4b24      	ldr	r3, [pc, #144]	@ (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005d0a:	60fb      	str	r3, [r7, #12]
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d006      	beq.n	8005d20 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005d18:	d12f      	bne.n	8005d7a <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005d1a:	4b1f      	ldr	r3, [pc, #124]	@ (8005d98 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005d1c:	617b      	str	r3, [r7, #20]
          break;
 8005d1e:	e02f      	b.n	8005d80 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005d20:	4b1c      	ldr	r3, [pc, #112]	@ (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d28:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005d2c:	d108      	bne.n	8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005d2e:	4b19      	ldr	r3, [pc, #100]	@ (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005d36:	4a19      	ldr	r2, [pc, #100]	@ (8005d9c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d3c:	613b      	str	r3, [r7, #16]
 8005d3e:	e007      	b.n	8005d50 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005d40:	4b14      	ldr	r3, [pc, #80]	@ (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005d48:	4a15      	ldr	r2, [pc, #84]	@ (8005da0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8005d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d4e:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005d50:	4b10      	ldr	r3, [pc, #64]	@ (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005d52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d56:	099b      	lsrs	r3, r3, #6
 8005d58:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	fb02 f303 	mul.w	r3, r2, r3
 8005d62:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005d64:	4b0b      	ldr	r3, [pc, #44]	@ (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005d66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d6a:	0f1b      	lsrs	r3, r3, #28
 8005d6c:	f003 0307 	and.w	r3, r3, #7
 8005d70:	68ba      	ldr	r2, [r7, #8]
 8005d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d76:	617b      	str	r3, [r7, #20]
          break;
 8005d78:	e002      	b.n	8005d80 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	617b      	str	r3, [r7, #20]
          break;
 8005d7e:	bf00      	nop
        }
      }
      break;
 8005d80:	e000      	b.n	8005d84 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8005d82:	bf00      	nop
    }
  }
  return frequency;
 8005d84:	697b      	ldr	r3, [r7, #20]
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	371c      	adds	r7, #28
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d90:	4770      	bx	lr
 8005d92:	bf00      	nop
 8005d94:	40023800 	.word	0x40023800
 8005d98:	00bb8000 	.word	0x00bb8000
 8005d9c:	007a1200 	.word	0x007a1200
 8005da0:	00f42400 	.word	0x00f42400

08005da4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b082      	sub	sp, #8
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d101      	bne.n	8005db6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005db2:	2301      	movs	r3, #1
 8005db4:	e07b      	b.n	8005eae <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d108      	bne.n	8005dd0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005dc6:	d009      	beq.n	8005ddc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	61da      	str	r2, [r3, #28]
 8005dce:	e005      	b.n	8005ddc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2200      	movs	r2, #0
 8005de0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005de8:	b2db      	uxtb	r3, r3
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d106      	bne.n	8005dfc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2200      	movs	r2, #0
 8005df2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f7fb fd8a 	bl	8001910 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2202      	movs	r2, #2
 8005e00:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	681a      	ldr	r2, [r3, #0]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005e12:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005e24:	431a      	orrs	r2, r3
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	68db      	ldr	r3, [r3, #12]
 8005e2a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005e2e:	431a      	orrs	r2, r3
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	691b      	ldr	r3, [r3, #16]
 8005e34:	f003 0302 	and.w	r3, r3, #2
 8005e38:	431a      	orrs	r2, r3
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	695b      	ldr	r3, [r3, #20]
 8005e3e:	f003 0301 	and.w	r3, r3, #1
 8005e42:	431a      	orrs	r2, r3
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	699b      	ldr	r3, [r3, #24]
 8005e48:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e4c:	431a      	orrs	r2, r3
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	69db      	ldr	r3, [r3, #28]
 8005e52:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005e56:	431a      	orrs	r2, r3
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6a1b      	ldr	r3, [r3, #32]
 8005e5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e60:	ea42 0103 	orr.w	r1, r2, r3
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e68:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	430a      	orrs	r2, r1
 8005e72:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	699b      	ldr	r3, [r3, #24]
 8005e78:	0c1b      	lsrs	r3, r3, #16
 8005e7a:	f003 0104 	and.w	r1, r3, #4
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e82:	f003 0210 	and.w	r2, r3, #16
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	430a      	orrs	r2, r1
 8005e8c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	69da      	ldr	r2, [r3, #28]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005e9c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005eac:	2300      	movs	r3, #0
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3708      	adds	r7, #8
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}

08005eb6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005eb6:	b580      	push	{r7, lr}
 8005eb8:	b082      	sub	sp, #8
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d101      	bne.n	8005ec8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	e042      	b.n	8005f4e <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ece:	b2db      	uxtb	r3, r3
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d106      	bne.n	8005ee2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f7fb fd5f 	bl	80019a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2224      	movs	r2, #36	@ 0x24
 8005ee6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	68da      	ldr	r2, [r3, #12]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005ef8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f000 f82c 	bl	8005f58 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	691a      	ldr	r2, [r3, #16]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005f0e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	695a      	ldr	r2, [r3, #20]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005f1e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	68da      	ldr	r2, [r3, #12]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005f2e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2200      	movs	r2, #0
 8005f34:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2220      	movs	r2, #32
 8005f3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2220      	movs	r2, #32
 8005f42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005f4c:	2300      	movs	r3, #0
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3708      	adds	r7, #8
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}
	...

08005f58 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f5c:	b0c0      	sub	sp, #256	@ 0x100
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	691b      	ldr	r3, [r3, #16]
 8005f6c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f74:	68d9      	ldr	r1, [r3, #12]
 8005f76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f7a:	681a      	ldr	r2, [r3, #0]
 8005f7c:	ea40 0301 	orr.w	r3, r0, r1
 8005f80:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005f82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f86:	689a      	ldr	r2, [r3, #8]
 8005f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f8c:	691b      	ldr	r3, [r3, #16]
 8005f8e:	431a      	orrs	r2, r3
 8005f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f94:	695b      	ldr	r3, [r3, #20]
 8005f96:	431a      	orrs	r2, r3
 8005f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f9c:	69db      	ldr	r3, [r3, #28]
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	68db      	ldr	r3, [r3, #12]
 8005fac:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005fb0:	f021 010c 	bic.w	r1, r1, #12
 8005fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005fbe:	430b      	orrs	r3, r1
 8005fc0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005fc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	695b      	ldr	r3, [r3, #20]
 8005fca:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005fce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fd2:	6999      	ldr	r1, [r3, #24]
 8005fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fd8:	681a      	ldr	r2, [r3, #0]
 8005fda:	ea40 0301 	orr.w	r3, r0, r1
 8005fde:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	4b8f      	ldr	r3, [pc, #572]	@ (8006224 <UART_SetConfig+0x2cc>)
 8005fe8:	429a      	cmp	r2, r3
 8005fea:	d005      	beq.n	8005ff8 <UART_SetConfig+0xa0>
 8005fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	4b8d      	ldr	r3, [pc, #564]	@ (8006228 <UART_SetConfig+0x2d0>)
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d104      	bne.n	8006002 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005ff8:	f7ff fd7e 	bl	8005af8 <HAL_RCC_GetPCLK2Freq>
 8005ffc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006000:	e003      	b.n	800600a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006002:	f7ff fd65 	bl	8005ad0 <HAL_RCC_GetPCLK1Freq>
 8006006:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800600a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800600e:	69db      	ldr	r3, [r3, #28]
 8006010:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006014:	f040 810c 	bne.w	8006230 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006018:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800601c:	2200      	movs	r2, #0
 800601e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006022:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006026:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800602a:	4622      	mov	r2, r4
 800602c:	462b      	mov	r3, r5
 800602e:	1891      	adds	r1, r2, r2
 8006030:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006032:	415b      	adcs	r3, r3
 8006034:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006036:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800603a:	4621      	mov	r1, r4
 800603c:	eb12 0801 	adds.w	r8, r2, r1
 8006040:	4629      	mov	r1, r5
 8006042:	eb43 0901 	adc.w	r9, r3, r1
 8006046:	f04f 0200 	mov.w	r2, #0
 800604a:	f04f 0300 	mov.w	r3, #0
 800604e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006052:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006056:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800605a:	4690      	mov	r8, r2
 800605c:	4699      	mov	r9, r3
 800605e:	4623      	mov	r3, r4
 8006060:	eb18 0303 	adds.w	r3, r8, r3
 8006064:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006068:	462b      	mov	r3, r5
 800606a:	eb49 0303 	adc.w	r3, r9, r3
 800606e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	2200      	movs	r2, #0
 800607a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800607e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006082:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006086:	460b      	mov	r3, r1
 8006088:	18db      	adds	r3, r3, r3
 800608a:	653b      	str	r3, [r7, #80]	@ 0x50
 800608c:	4613      	mov	r3, r2
 800608e:	eb42 0303 	adc.w	r3, r2, r3
 8006092:	657b      	str	r3, [r7, #84]	@ 0x54
 8006094:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006098:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800609c:	f7fa fd84 	bl	8000ba8 <__aeabi_uldivmod>
 80060a0:	4602      	mov	r2, r0
 80060a2:	460b      	mov	r3, r1
 80060a4:	4b61      	ldr	r3, [pc, #388]	@ (800622c <UART_SetConfig+0x2d4>)
 80060a6:	fba3 2302 	umull	r2, r3, r3, r2
 80060aa:	095b      	lsrs	r3, r3, #5
 80060ac:	011c      	lsls	r4, r3, #4
 80060ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80060b2:	2200      	movs	r2, #0
 80060b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80060b8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80060bc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80060c0:	4642      	mov	r2, r8
 80060c2:	464b      	mov	r3, r9
 80060c4:	1891      	adds	r1, r2, r2
 80060c6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80060c8:	415b      	adcs	r3, r3
 80060ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80060cc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80060d0:	4641      	mov	r1, r8
 80060d2:	eb12 0a01 	adds.w	sl, r2, r1
 80060d6:	4649      	mov	r1, r9
 80060d8:	eb43 0b01 	adc.w	fp, r3, r1
 80060dc:	f04f 0200 	mov.w	r2, #0
 80060e0:	f04f 0300 	mov.w	r3, #0
 80060e4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80060e8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80060ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80060f0:	4692      	mov	sl, r2
 80060f2:	469b      	mov	fp, r3
 80060f4:	4643      	mov	r3, r8
 80060f6:	eb1a 0303 	adds.w	r3, sl, r3
 80060fa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80060fe:	464b      	mov	r3, r9
 8006100:	eb4b 0303 	adc.w	r3, fp, r3
 8006104:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	2200      	movs	r2, #0
 8006110:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006114:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006118:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800611c:	460b      	mov	r3, r1
 800611e:	18db      	adds	r3, r3, r3
 8006120:	643b      	str	r3, [r7, #64]	@ 0x40
 8006122:	4613      	mov	r3, r2
 8006124:	eb42 0303 	adc.w	r3, r2, r3
 8006128:	647b      	str	r3, [r7, #68]	@ 0x44
 800612a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800612e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006132:	f7fa fd39 	bl	8000ba8 <__aeabi_uldivmod>
 8006136:	4602      	mov	r2, r0
 8006138:	460b      	mov	r3, r1
 800613a:	4611      	mov	r1, r2
 800613c:	4b3b      	ldr	r3, [pc, #236]	@ (800622c <UART_SetConfig+0x2d4>)
 800613e:	fba3 2301 	umull	r2, r3, r3, r1
 8006142:	095b      	lsrs	r3, r3, #5
 8006144:	2264      	movs	r2, #100	@ 0x64
 8006146:	fb02 f303 	mul.w	r3, r2, r3
 800614a:	1acb      	subs	r3, r1, r3
 800614c:	00db      	lsls	r3, r3, #3
 800614e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006152:	4b36      	ldr	r3, [pc, #216]	@ (800622c <UART_SetConfig+0x2d4>)
 8006154:	fba3 2302 	umull	r2, r3, r3, r2
 8006158:	095b      	lsrs	r3, r3, #5
 800615a:	005b      	lsls	r3, r3, #1
 800615c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006160:	441c      	add	r4, r3
 8006162:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006166:	2200      	movs	r2, #0
 8006168:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800616c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006170:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006174:	4642      	mov	r2, r8
 8006176:	464b      	mov	r3, r9
 8006178:	1891      	adds	r1, r2, r2
 800617a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800617c:	415b      	adcs	r3, r3
 800617e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006180:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006184:	4641      	mov	r1, r8
 8006186:	1851      	adds	r1, r2, r1
 8006188:	6339      	str	r1, [r7, #48]	@ 0x30
 800618a:	4649      	mov	r1, r9
 800618c:	414b      	adcs	r3, r1
 800618e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006190:	f04f 0200 	mov.w	r2, #0
 8006194:	f04f 0300 	mov.w	r3, #0
 8006198:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800619c:	4659      	mov	r1, fp
 800619e:	00cb      	lsls	r3, r1, #3
 80061a0:	4651      	mov	r1, sl
 80061a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80061a6:	4651      	mov	r1, sl
 80061a8:	00ca      	lsls	r2, r1, #3
 80061aa:	4610      	mov	r0, r2
 80061ac:	4619      	mov	r1, r3
 80061ae:	4603      	mov	r3, r0
 80061b0:	4642      	mov	r2, r8
 80061b2:	189b      	adds	r3, r3, r2
 80061b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80061b8:	464b      	mov	r3, r9
 80061ba:	460a      	mov	r2, r1
 80061bc:	eb42 0303 	adc.w	r3, r2, r3
 80061c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80061c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	2200      	movs	r2, #0
 80061cc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80061d0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80061d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80061d8:	460b      	mov	r3, r1
 80061da:	18db      	adds	r3, r3, r3
 80061dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80061de:	4613      	mov	r3, r2
 80061e0:	eb42 0303 	adc.w	r3, r2, r3
 80061e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80061e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80061ea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80061ee:	f7fa fcdb 	bl	8000ba8 <__aeabi_uldivmod>
 80061f2:	4602      	mov	r2, r0
 80061f4:	460b      	mov	r3, r1
 80061f6:	4b0d      	ldr	r3, [pc, #52]	@ (800622c <UART_SetConfig+0x2d4>)
 80061f8:	fba3 1302 	umull	r1, r3, r3, r2
 80061fc:	095b      	lsrs	r3, r3, #5
 80061fe:	2164      	movs	r1, #100	@ 0x64
 8006200:	fb01 f303 	mul.w	r3, r1, r3
 8006204:	1ad3      	subs	r3, r2, r3
 8006206:	00db      	lsls	r3, r3, #3
 8006208:	3332      	adds	r3, #50	@ 0x32
 800620a:	4a08      	ldr	r2, [pc, #32]	@ (800622c <UART_SetConfig+0x2d4>)
 800620c:	fba2 2303 	umull	r2, r3, r2, r3
 8006210:	095b      	lsrs	r3, r3, #5
 8006212:	f003 0207 	and.w	r2, r3, #7
 8006216:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4422      	add	r2, r4
 800621e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006220:	e106      	b.n	8006430 <UART_SetConfig+0x4d8>
 8006222:	bf00      	nop
 8006224:	40011000 	.word	0x40011000
 8006228:	40011400 	.word	0x40011400
 800622c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006230:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006234:	2200      	movs	r2, #0
 8006236:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800623a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800623e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006242:	4642      	mov	r2, r8
 8006244:	464b      	mov	r3, r9
 8006246:	1891      	adds	r1, r2, r2
 8006248:	6239      	str	r1, [r7, #32]
 800624a:	415b      	adcs	r3, r3
 800624c:	627b      	str	r3, [r7, #36]	@ 0x24
 800624e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006252:	4641      	mov	r1, r8
 8006254:	1854      	adds	r4, r2, r1
 8006256:	4649      	mov	r1, r9
 8006258:	eb43 0501 	adc.w	r5, r3, r1
 800625c:	f04f 0200 	mov.w	r2, #0
 8006260:	f04f 0300 	mov.w	r3, #0
 8006264:	00eb      	lsls	r3, r5, #3
 8006266:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800626a:	00e2      	lsls	r2, r4, #3
 800626c:	4614      	mov	r4, r2
 800626e:	461d      	mov	r5, r3
 8006270:	4643      	mov	r3, r8
 8006272:	18e3      	adds	r3, r4, r3
 8006274:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006278:	464b      	mov	r3, r9
 800627a:	eb45 0303 	adc.w	r3, r5, r3
 800627e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	2200      	movs	r2, #0
 800628a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800628e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006292:	f04f 0200 	mov.w	r2, #0
 8006296:	f04f 0300 	mov.w	r3, #0
 800629a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800629e:	4629      	mov	r1, r5
 80062a0:	008b      	lsls	r3, r1, #2
 80062a2:	4621      	mov	r1, r4
 80062a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80062a8:	4621      	mov	r1, r4
 80062aa:	008a      	lsls	r2, r1, #2
 80062ac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80062b0:	f7fa fc7a 	bl	8000ba8 <__aeabi_uldivmod>
 80062b4:	4602      	mov	r2, r0
 80062b6:	460b      	mov	r3, r1
 80062b8:	4b60      	ldr	r3, [pc, #384]	@ (800643c <UART_SetConfig+0x4e4>)
 80062ba:	fba3 2302 	umull	r2, r3, r3, r2
 80062be:	095b      	lsrs	r3, r3, #5
 80062c0:	011c      	lsls	r4, r3, #4
 80062c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80062c6:	2200      	movs	r2, #0
 80062c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80062cc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80062d0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80062d4:	4642      	mov	r2, r8
 80062d6:	464b      	mov	r3, r9
 80062d8:	1891      	adds	r1, r2, r2
 80062da:	61b9      	str	r1, [r7, #24]
 80062dc:	415b      	adcs	r3, r3
 80062de:	61fb      	str	r3, [r7, #28]
 80062e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80062e4:	4641      	mov	r1, r8
 80062e6:	1851      	adds	r1, r2, r1
 80062e8:	6139      	str	r1, [r7, #16]
 80062ea:	4649      	mov	r1, r9
 80062ec:	414b      	adcs	r3, r1
 80062ee:	617b      	str	r3, [r7, #20]
 80062f0:	f04f 0200 	mov.w	r2, #0
 80062f4:	f04f 0300 	mov.w	r3, #0
 80062f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80062fc:	4659      	mov	r1, fp
 80062fe:	00cb      	lsls	r3, r1, #3
 8006300:	4651      	mov	r1, sl
 8006302:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006306:	4651      	mov	r1, sl
 8006308:	00ca      	lsls	r2, r1, #3
 800630a:	4610      	mov	r0, r2
 800630c:	4619      	mov	r1, r3
 800630e:	4603      	mov	r3, r0
 8006310:	4642      	mov	r2, r8
 8006312:	189b      	adds	r3, r3, r2
 8006314:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006318:	464b      	mov	r3, r9
 800631a:	460a      	mov	r2, r1
 800631c:	eb42 0303 	adc.w	r3, r2, r3
 8006320:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	2200      	movs	r2, #0
 800632c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800632e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006330:	f04f 0200 	mov.w	r2, #0
 8006334:	f04f 0300 	mov.w	r3, #0
 8006338:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800633c:	4649      	mov	r1, r9
 800633e:	008b      	lsls	r3, r1, #2
 8006340:	4641      	mov	r1, r8
 8006342:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006346:	4641      	mov	r1, r8
 8006348:	008a      	lsls	r2, r1, #2
 800634a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800634e:	f7fa fc2b 	bl	8000ba8 <__aeabi_uldivmod>
 8006352:	4602      	mov	r2, r0
 8006354:	460b      	mov	r3, r1
 8006356:	4611      	mov	r1, r2
 8006358:	4b38      	ldr	r3, [pc, #224]	@ (800643c <UART_SetConfig+0x4e4>)
 800635a:	fba3 2301 	umull	r2, r3, r3, r1
 800635e:	095b      	lsrs	r3, r3, #5
 8006360:	2264      	movs	r2, #100	@ 0x64
 8006362:	fb02 f303 	mul.w	r3, r2, r3
 8006366:	1acb      	subs	r3, r1, r3
 8006368:	011b      	lsls	r3, r3, #4
 800636a:	3332      	adds	r3, #50	@ 0x32
 800636c:	4a33      	ldr	r2, [pc, #204]	@ (800643c <UART_SetConfig+0x4e4>)
 800636e:	fba2 2303 	umull	r2, r3, r2, r3
 8006372:	095b      	lsrs	r3, r3, #5
 8006374:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006378:	441c      	add	r4, r3
 800637a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800637e:	2200      	movs	r2, #0
 8006380:	673b      	str	r3, [r7, #112]	@ 0x70
 8006382:	677a      	str	r2, [r7, #116]	@ 0x74
 8006384:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006388:	4642      	mov	r2, r8
 800638a:	464b      	mov	r3, r9
 800638c:	1891      	adds	r1, r2, r2
 800638e:	60b9      	str	r1, [r7, #8]
 8006390:	415b      	adcs	r3, r3
 8006392:	60fb      	str	r3, [r7, #12]
 8006394:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006398:	4641      	mov	r1, r8
 800639a:	1851      	adds	r1, r2, r1
 800639c:	6039      	str	r1, [r7, #0]
 800639e:	4649      	mov	r1, r9
 80063a0:	414b      	adcs	r3, r1
 80063a2:	607b      	str	r3, [r7, #4]
 80063a4:	f04f 0200 	mov.w	r2, #0
 80063a8:	f04f 0300 	mov.w	r3, #0
 80063ac:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80063b0:	4659      	mov	r1, fp
 80063b2:	00cb      	lsls	r3, r1, #3
 80063b4:	4651      	mov	r1, sl
 80063b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80063ba:	4651      	mov	r1, sl
 80063bc:	00ca      	lsls	r2, r1, #3
 80063be:	4610      	mov	r0, r2
 80063c0:	4619      	mov	r1, r3
 80063c2:	4603      	mov	r3, r0
 80063c4:	4642      	mov	r2, r8
 80063c6:	189b      	adds	r3, r3, r2
 80063c8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80063ca:	464b      	mov	r3, r9
 80063cc:	460a      	mov	r2, r1
 80063ce:	eb42 0303 	adc.w	r3, r2, r3
 80063d2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80063d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	2200      	movs	r2, #0
 80063dc:	663b      	str	r3, [r7, #96]	@ 0x60
 80063de:	667a      	str	r2, [r7, #100]	@ 0x64
 80063e0:	f04f 0200 	mov.w	r2, #0
 80063e4:	f04f 0300 	mov.w	r3, #0
 80063e8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80063ec:	4649      	mov	r1, r9
 80063ee:	008b      	lsls	r3, r1, #2
 80063f0:	4641      	mov	r1, r8
 80063f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80063f6:	4641      	mov	r1, r8
 80063f8:	008a      	lsls	r2, r1, #2
 80063fa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80063fe:	f7fa fbd3 	bl	8000ba8 <__aeabi_uldivmod>
 8006402:	4602      	mov	r2, r0
 8006404:	460b      	mov	r3, r1
 8006406:	4b0d      	ldr	r3, [pc, #52]	@ (800643c <UART_SetConfig+0x4e4>)
 8006408:	fba3 1302 	umull	r1, r3, r3, r2
 800640c:	095b      	lsrs	r3, r3, #5
 800640e:	2164      	movs	r1, #100	@ 0x64
 8006410:	fb01 f303 	mul.w	r3, r1, r3
 8006414:	1ad3      	subs	r3, r2, r3
 8006416:	011b      	lsls	r3, r3, #4
 8006418:	3332      	adds	r3, #50	@ 0x32
 800641a:	4a08      	ldr	r2, [pc, #32]	@ (800643c <UART_SetConfig+0x4e4>)
 800641c:	fba2 2303 	umull	r2, r3, r2, r3
 8006420:	095b      	lsrs	r3, r3, #5
 8006422:	f003 020f 	and.w	r2, r3, #15
 8006426:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4422      	add	r2, r4
 800642e:	609a      	str	r2, [r3, #8]
}
 8006430:	bf00      	nop
 8006432:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006436:	46bd      	mov	sp, r7
 8006438:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800643c:	51eb851f 	.word	0x51eb851f

08006440 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006440:	b084      	sub	sp, #16
 8006442:	b580      	push	{r7, lr}
 8006444:	b084      	sub	sp, #16
 8006446:	af00      	add	r7, sp, #0
 8006448:	6078      	str	r0, [r7, #4]
 800644a:	f107 001c 	add.w	r0, r7, #28
 800644e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006452:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006456:	2b01      	cmp	r3, #1
 8006458:	d123      	bne.n	80064a2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800645e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	68db      	ldr	r3, [r3, #12]
 800646a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800646e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006472:	687a      	ldr	r2, [r7, #4]
 8006474:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	68db      	ldr	r3, [r3, #12]
 800647a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006482:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006486:	2b01      	cmp	r3, #1
 8006488:	d105      	bne.n	8006496 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	68db      	ldr	r3, [r3, #12]
 800648e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f001 fae8 	bl	8007a6c <USB_CoreReset>
 800649c:	4603      	mov	r3, r0
 800649e:	73fb      	strb	r3, [r7, #15]
 80064a0:	e01b      	b.n	80064da <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	68db      	ldr	r3, [r3, #12]
 80064a6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f001 fadc 	bl	8007a6c <USB_CoreReset>
 80064b4:	4603      	mov	r3, r0
 80064b6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80064b8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d106      	bne.n	80064ce <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064c4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	639a      	str	r2, [r3, #56]	@ 0x38
 80064cc:	e005      	b.n	80064da <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064d2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80064da:	7fbb      	ldrb	r3, [r7, #30]
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d10b      	bne.n	80064f8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	f043 0206 	orr.w	r2, r3, #6
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	689b      	ldr	r3, [r3, #8]
 80064f0:	f043 0220 	orr.w	r2, r3, #32
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80064f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3710      	adds	r7, #16
 80064fe:	46bd      	mov	sp, r7
 8006500:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006504:	b004      	add	sp, #16
 8006506:	4770      	bx	lr

08006508 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006508:	b480      	push	{r7}
 800650a:	b087      	sub	sp, #28
 800650c:	af00      	add	r7, sp, #0
 800650e:	60f8      	str	r0, [r7, #12]
 8006510:	60b9      	str	r1, [r7, #8]
 8006512:	4613      	mov	r3, r2
 8006514:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006516:	79fb      	ldrb	r3, [r7, #7]
 8006518:	2b02      	cmp	r3, #2
 800651a:	d165      	bne.n	80065e8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	4a41      	ldr	r2, [pc, #260]	@ (8006624 <USB_SetTurnaroundTime+0x11c>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d906      	bls.n	8006532 <USB_SetTurnaroundTime+0x2a>
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	4a40      	ldr	r2, [pc, #256]	@ (8006628 <USB_SetTurnaroundTime+0x120>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d202      	bcs.n	8006532 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800652c:	230f      	movs	r3, #15
 800652e:	617b      	str	r3, [r7, #20]
 8006530:	e062      	b.n	80065f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	4a3c      	ldr	r2, [pc, #240]	@ (8006628 <USB_SetTurnaroundTime+0x120>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d306      	bcc.n	8006548 <USB_SetTurnaroundTime+0x40>
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	4a3b      	ldr	r2, [pc, #236]	@ (800662c <USB_SetTurnaroundTime+0x124>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d202      	bcs.n	8006548 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006542:	230e      	movs	r3, #14
 8006544:	617b      	str	r3, [r7, #20]
 8006546:	e057      	b.n	80065f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	4a38      	ldr	r2, [pc, #224]	@ (800662c <USB_SetTurnaroundTime+0x124>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d306      	bcc.n	800655e <USB_SetTurnaroundTime+0x56>
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	4a37      	ldr	r2, [pc, #220]	@ (8006630 <USB_SetTurnaroundTime+0x128>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d202      	bcs.n	800655e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006558:	230d      	movs	r3, #13
 800655a:	617b      	str	r3, [r7, #20]
 800655c:	e04c      	b.n	80065f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	4a33      	ldr	r2, [pc, #204]	@ (8006630 <USB_SetTurnaroundTime+0x128>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d306      	bcc.n	8006574 <USB_SetTurnaroundTime+0x6c>
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	4a32      	ldr	r2, [pc, #200]	@ (8006634 <USB_SetTurnaroundTime+0x12c>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d802      	bhi.n	8006574 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800656e:	230c      	movs	r3, #12
 8006570:	617b      	str	r3, [r7, #20]
 8006572:	e041      	b.n	80065f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	4a2f      	ldr	r2, [pc, #188]	@ (8006634 <USB_SetTurnaroundTime+0x12c>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d906      	bls.n	800658a <USB_SetTurnaroundTime+0x82>
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	4a2e      	ldr	r2, [pc, #184]	@ (8006638 <USB_SetTurnaroundTime+0x130>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d802      	bhi.n	800658a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006584:	230b      	movs	r3, #11
 8006586:	617b      	str	r3, [r7, #20]
 8006588:	e036      	b.n	80065f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	4a2a      	ldr	r2, [pc, #168]	@ (8006638 <USB_SetTurnaroundTime+0x130>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d906      	bls.n	80065a0 <USB_SetTurnaroundTime+0x98>
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	4a29      	ldr	r2, [pc, #164]	@ (800663c <USB_SetTurnaroundTime+0x134>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d802      	bhi.n	80065a0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800659a:	230a      	movs	r3, #10
 800659c:	617b      	str	r3, [r7, #20]
 800659e:	e02b      	b.n	80065f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	4a26      	ldr	r2, [pc, #152]	@ (800663c <USB_SetTurnaroundTime+0x134>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d906      	bls.n	80065b6 <USB_SetTurnaroundTime+0xae>
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	4a25      	ldr	r2, [pc, #148]	@ (8006640 <USB_SetTurnaroundTime+0x138>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d202      	bcs.n	80065b6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80065b0:	2309      	movs	r3, #9
 80065b2:	617b      	str	r3, [r7, #20]
 80065b4:	e020      	b.n	80065f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	4a21      	ldr	r2, [pc, #132]	@ (8006640 <USB_SetTurnaroundTime+0x138>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d306      	bcc.n	80065cc <USB_SetTurnaroundTime+0xc4>
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	4a20      	ldr	r2, [pc, #128]	@ (8006644 <USB_SetTurnaroundTime+0x13c>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d802      	bhi.n	80065cc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80065c6:	2308      	movs	r3, #8
 80065c8:	617b      	str	r3, [r7, #20]
 80065ca:	e015      	b.n	80065f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	4a1d      	ldr	r2, [pc, #116]	@ (8006644 <USB_SetTurnaroundTime+0x13c>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d906      	bls.n	80065e2 <USB_SetTurnaroundTime+0xda>
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	4a1c      	ldr	r2, [pc, #112]	@ (8006648 <USB_SetTurnaroundTime+0x140>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d202      	bcs.n	80065e2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80065dc:	2307      	movs	r3, #7
 80065de:	617b      	str	r3, [r7, #20]
 80065e0:	e00a      	b.n	80065f8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80065e2:	2306      	movs	r3, #6
 80065e4:	617b      	str	r3, [r7, #20]
 80065e6:	e007      	b.n	80065f8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80065e8:	79fb      	ldrb	r3, [r7, #7]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d102      	bne.n	80065f4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80065ee:	2309      	movs	r3, #9
 80065f0:	617b      	str	r3, [r7, #20]
 80065f2:	e001      	b.n	80065f8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80065f4:	2309      	movs	r3, #9
 80065f6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	68db      	ldr	r3, [r3, #12]
 80065fc:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	68da      	ldr	r2, [r3, #12]
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	029b      	lsls	r3, r3, #10
 800660c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8006610:	431a      	orrs	r2, r3
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006616:	2300      	movs	r3, #0
}
 8006618:	4618      	mov	r0, r3
 800661a:	371c      	adds	r7, #28
 800661c:	46bd      	mov	sp, r7
 800661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006622:	4770      	bx	lr
 8006624:	00d8acbf 	.word	0x00d8acbf
 8006628:	00e4e1c0 	.word	0x00e4e1c0
 800662c:	00f42400 	.word	0x00f42400
 8006630:	01067380 	.word	0x01067380
 8006634:	011a499f 	.word	0x011a499f
 8006638:	01312cff 	.word	0x01312cff
 800663c:	014ca43f 	.word	0x014ca43f
 8006640:	016e3600 	.word	0x016e3600
 8006644:	01a6ab1f 	.word	0x01a6ab1f
 8006648:	01e84800 	.word	0x01e84800

0800664c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800664c:	b480      	push	{r7}
 800664e:	b083      	sub	sp, #12
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	689b      	ldr	r3, [r3, #8]
 8006658:	f043 0201 	orr.w	r2, r3, #1
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006660:	2300      	movs	r3, #0
}
 8006662:	4618      	mov	r0, r3
 8006664:	370c      	adds	r7, #12
 8006666:	46bd      	mov	sp, r7
 8006668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666c:	4770      	bx	lr

0800666e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800666e:	b480      	push	{r7}
 8006670:	b083      	sub	sp, #12
 8006672:	af00      	add	r7, sp, #0
 8006674:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	689b      	ldr	r3, [r3, #8]
 800667a:	f023 0201 	bic.w	r2, r3, #1
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006682:	2300      	movs	r3, #0
}
 8006684:	4618      	mov	r0, r3
 8006686:	370c      	adds	r7, #12
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr

08006690 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b084      	sub	sp, #16
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
 8006698:	460b      	mov	r3, r1
 800669a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800669c:	2300      	movs	r3, #0
 800669e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	68db      	ldr	r3, [r3, #12]
 80066a4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80066ac:	78fb      	ldrb	r3, [r7, #3]
 80066ae:	2b01      	cmp	r3, #1
 80066b0:	d115      	bne.n	80066de <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	68db      	ldr	r3, [r3, #12]
 80066b6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80066be:	200a      	movs	r0, #10
 80066c0:	f7fb fb72 	bl	8001da8 <HAL_Delay>
      ms += 10U;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	330a      	adds	r3, #10
 80066c8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f001 f93f 	bl	800794e <USB_GetMode>
 80066d0:	4603      	mov	r3, r0
 80066d2:	2b01      	cmp	r3, #1
 80066d4:	d01e      	beq.n	8006714 <USB_SetCurrentMode+0x84>
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	2bc7      	cmp	r3, #199	@ 0xc7
 80066da:	d9f0      	bls.n	80066be <USB_SetCurrentMode+0x2e>
 80066dc:	e01a      	b.n	8006714 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80066de:	78fb      	ldrb	r3, [r7, #3]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d115      	bne.n	8006710 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	68db      	ldr	r3, [r3, #12]
 80066e8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80066f0:	200a      	movs	r0, #10
 80066f2:	f7fb fb59 	bl	8001da8 <HAL_Delay>
      ms += 10U;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	330a      	adds	r3, #10
 80066fa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f001 f926 	bl	800794e <USB_GetMode>
 8006702:	4603      	mov	r3, r0
 8006704:	2b00      	cmp	r3, #0
 8006706:	d005      	beq.n	8006714 <USB_SetCurrentMode+0x84>
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	2bc7      	cmp	r3, #199	@ 0xc7
 800670c:	d9f0      	bls.n	80066f0 <USB_SetCurrentMode+0x60>
 800670e:	e001      	b.n	8006714 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006710:	2301      	movs	r3, #1
 8006712:	e005      	b.n	8006720 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	2bc8      	cmp	r3, #200	@ 0xc8
 8006718:	d101      	bne.n	800671e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800671a:	2301      	movs	r3, #1
 800671c:	e000      	b.n	8006720 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800671e:	2300      	movs	r3, #0
}
 8006720:	4618      	mov	r0, r3
 8006722:	3710      	adds	r7, #16
 8006724:	46bd      	mov	sp, r7
 8006726:	bd80      	pop	{r7, pc}

08006728 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006728:	b084      	sub	sp, #16
 800672a:	b580      	push	{r7, lr}
 800672c:	b086      	sub	sp, #24
 800672e:	af00      	add	r7, sp, #0
 8006730:	6078      	str	r0, [r7, #4]
 8006732:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006736:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800673a:	2300      	movs	r3, #0
 800673c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006742:	2300      	movs	r3, #0
 8006744:	613b      	str	r3, [r7, #16]
 8006746:	e009      	b.n	800675c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006748:	687a      	ldr	r2, [r7, #4]
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	3340      	adds	r3, #64	@ 0x40
 800674e:	009b      	lsls	r3, r3, #2
 8006750:	4413      	add	r3, r2
 8006752:	2200      	movs	r2, #0
 8006754:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	3301      	adds	r3, #1
 800675a:	613b      	str	r3, [r7, #16]
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	2b0e      	cmp	r3, #14
 8006760:	d9f2      	bls.n	8006748 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006762:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006766:	2b00      	cmp	r3, #0
 8006768:	d11c      	bne.n	80067a4 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	68fa      	ldr	r2, [r7, #12]
 8006774:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006778:	f043 0302 	orr.w	r3, r3, #2
 800677c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006782:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800678e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800679a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	639a      	str	r2, [r3, #56]	@ 0x38
 80067a2:	e00b      	b.n	80067bc <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067a8:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067b4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80067c2:	461a      	mov	r2, r3
 80067c4:	2300      	movs	r3, #0
 80067c6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80067c8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	d10d      	bne.n	80067ec <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80067d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d104      	bne.n	80067e2 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80067d8:	2100      	movs	r1, #0
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f000 f968 	bl	8006ab0 <USB_SetDevSpeed>
 80067e0:	e008      	b.n	80067f4 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80067e2:	2101      	movs	r1, #1
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f000 f963 	bl	8006ab0 <USB_SetDevSpeed>
 80067ea:	e003      	b.n	80067f4 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80067ec:	2103      	movs	r1, #3
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f000 f95e 	bl	8006ab0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80067f4:	2110      	movs	r1, #16
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f000 f8fa 	bl	80069f0 <USB_FlushTxFifo>
 80067fc:	4603      	mov	r3, r0
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d001      	beq.n	8006806 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8006802:	2301      	movs	r3, #1
 8006804:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f000 f924 	bl	8006a54 <USB_FlushRxFifo>
 800680c:	4603      	mov	r3, r0
 800680e:	2b00      	cmp	r3, #0
 8006810:	d001      	beq.n	8006816 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8006812:	2301      	movs	r3, #1
 8006814:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800681c:	461a      	mov	r2, r3
 800681e:	2300      	movs	r3, #0
 8006820:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006828:	461a      	mov	r2, r3
 800682a:	2300      	movs	r3, #0
 800682c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006834:	461a      	mov	r2, r3
 8006836:	2300      	movs	r3, #0
 8006838:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800683a:	2300      	movs	r3, #0
 800683c:	613b      	str	r3, [r7, #16]
 800683e:	e043      	b.n	80068c8 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	015a      	lsls	r2, r3, #5
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	4413      	add	r3, r2
 8006848:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006852:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006856:	d118      	bne.n	800688a <USB_DevInit+0x162>
    {
      if (i == 0U)
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d10a      	bne.n	8006874 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800685e:	693b      	ldr	r3, [r7, #16]
 8006860:	015a      	lsls	r2, r3, #5
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	4413      	add	r3, r2
 8006866:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800686a:	461a      	mov	r2, r3
 800686c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006870:	6013      	str	r3, [r2, #0]
 8006872:	e013      	b.n	800689c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	015a      	lsls	r2, r3, #5
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	4413      	add	r3, r2
 800687c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006880:	461a      	mov	r2, r3
 8006882:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006886:	6013      	str	r3, [r2, #0]
 8006888:	e008      	b.n	800689c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	015a      	lsls	r2, r3, #5
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	4413      	add	r3, r2
 8006892:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006896:	461a      	mov	r2, r3
 8006898:	2300      	movs	r3, #0
 800689a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	015a      	lsls	r2, r3, #5
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	4413      	add	r3, r2
 80068a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068a8:	461a      	mov	r2, r3
 80068aa:	2300      	movs	r3, #0
 80068ac:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	015a      	lsls	r2, r3, #5
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	4413      	add	r3, r2
 80068b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068ba:	461a      	mov	r2, r3
 80068bc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80068c0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	3301      	adds	r3, #1
 80068c6:	613b      	str	r3, [r7, #16]
 80068c8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80068cc:	461a      	mov	r2, r3
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d3b5      	bcc.n	8006840 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80068d4:	2300      	movs	r3, #0
 80068d6:	613b      	str	r3, [r7, #16]
 80068d8:	e043      	b.n	8006962 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	015a      	lsls	r2, r3, #5
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	4413      	add	r3, r2
 80068e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80068ec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80068f0:	d118      	bne.n	8006924 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d10a      	bne.n	800690e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	015a      	lsls	r2, r3, #5
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	4413      	add	r3, r2
 8006900:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006904:	461a      	mov	r2, r3
 8006906:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800690a:	6013      	str	r3, [r2, #0]
 800690c:	e013      	b.n	8006936 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	015a      	lsls	r2, r3, #5
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	4413      	add	r3, r2
 8006916:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800691a:	461a      	mov	r2, r3
 800691c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006920:	6013      	str	r3, [r2, #0]
 8006922:	e008      	b.n	8006936 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	015a      	lsls	r2, r3, #5
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	4413      	add	r3, r2
 800692c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006930:	461a      	mov	r2, r3
 8006932:	2300      	movs	r3, #0
 8006934:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	015a      	lsls	r2, r3, #5
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	4413      	add	r3, r2
 800693e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006942:	461a      	mov	r2, r3
 8006944:	2300      	movs	r3, #0
 8006946:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	015a      	lsls	r2, r3, #5
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	4413      	add	r3, r2
 8006950:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006954:	461a      	mov	r2, r3
 8006956:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800695a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	3301      	adds	r3, #1
 8006960:	613b      	str	r3, [r7, #16]
 8006962:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006966:	461a      	mov	r2, r3
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	4293      	cmp	r3, r2
 800696c:	d3b5      	bcc.n	80068da <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006974:	691b      	ldr	r3, [r3, #16]
 8006976:	68fa      	ldr	r2, [r7, #12]
 8006978:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800697c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006980:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2200      	movs	r2, #0
 8006986:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800698e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006990:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006994:	2b00      	cmp	r3, #0
 8006996:	d105      	bne.n	80069a4 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	699b      	ldr	r3, [r3, #24]
 800699c:	f043 0210 	orr.w	r2, r3, #16
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	699a      	ldr	r2, [r3, #24]
 80069a8:	4b10      	ldr	r3, [pc, #64]	@ (80069ec <USB_DevInit+0x2c4>)
 80069aa:	4313      	orrs	r3, r2
 80069ac:	687a      	ldr	r2, [r7, #4]
 80069ae:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80069b0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d005      	beq.n	80069c4 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	699b      	ldr	r3, [r3, #24]
 80069bc:	f043 0208 	orr.w	r2, r3, #8
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80069c4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80069c8:	2b01      	cmp	r3, #1
 80069ca:	d107      	bne.n	80069dc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	699b      	ldr	r3, [r3, #24]
 80069d0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80069d4:	f043 0304 	orr.w	r3, r3, #4
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80069dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3718      	adds	r7, #24
 80069e2:	46bd      	mov	sp, r7
 80069e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80069e8:	b004      	add	sp, #16
 80069ea:	4770      	bx	lr
 80069ec:	803c3800 	.word	0x803c3800

080069f0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b085      	sub	sp, #20
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
 80069f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80069fa:	2300      	movs	r3, #0
 80069fc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	3301      	adds	r3, #1
 8006a02:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006a0a:	d901      	bls.n	8006a10 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006a0c:	2303      	movs	r3, #3
 8006a0e:	e01b      	b.n	8006a48 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	691b      	ldr	r3, [r3, #16]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	daf2      	bge.n	80069fe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006a18:	2300      	movs	r3, #0
 8006a1a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	019b      	lsls	r3, r3, #6
 8006a20:	f043 0220 	orr.w	r2, r3, #32
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	3301      	adds	r3, #1
 8006a2c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006a34:	d901      	bls.n	8006a3a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006a36:	2303      	movs	r3, #3
 8006a38:	e006      	b.n	8006a48 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	691b      	ldr	r3, [r3, #16]
 8006a3e:	f003 0320 	and.w	r3, r3, #32
 8006a42:	2b20      	cmp	r3, #32
 8006a44:	d0f0      	beq.n	8006a28 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006a46:	2300      	movs	r3, #0
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	3714      	adds	r7, #20
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a52:	4770      	bx	lr

08006a54 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006a54:	b480      	push	{r7}
 8006a56:	b085      	sub	sp, #20
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	3301      	adds	r3, #1
 8006a64:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006a6c:	d901      	bls.n	8006a72 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006a6e:	2303      	movs	r3, #3
 8006a70:	e018      	b.n	8006aa4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	691b      	ldr	r3, [r3, #16]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	daf2      	bge.n	8006a60 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2210      	movs	r2, #16
 8006a82:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	3301      	adds	r3, #1
 8006a88:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006a90:	d901      	bls.n	8006a96 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006a92:	2303      	movs	r3, #3
 8006a94:	e006      	b.n	8006aa4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	691b      	ldr	r3, [r3, #16]
 8006a9a:	f003 0310 	and.w	r3, r3, #16
 8006a9e:	2b10      	cmp	r3, #16
 8006aa0:	d0f0      	beq.n	8006a84 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006aa2:	2300      	movs	r3, #0
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	3714      	adds	r7, #20
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aae:	4770      	bx	lr

08006ab0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b085      	sub	sp, #20
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	460b      	mov	r3, r1
 8006aba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ac6:	681a      	ldr	r2, [r3, #0]
 8006ac8:	78fb      	ldrb	r3, [r7, #3]
 8006aca:	68f9      	ldr	r1, [r7, #12]
 8006acc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006ad4:	2300      	movs	r3, #0
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3714      	adds	r7, #20
 8006ada:	46bd      	mov	sp, r7
 8006adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae0:	4770      	bx	lr

08006ae2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8006ae2:	b480      	push	{r7}
 8006ae4:	b087      	sub	sp, #28
 8006ae6:	af00      	add	r7, sp, #0
 8006ae8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006af4:	689b      	ldr	r3, [r3, #8]
 8006af6:	f003 0306 	and.w	r3, r3, #6
 8006afa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d102      	bne.n	8006b08 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006b02:	2300      	movs	r3, #0
 8006b04:	75fb      	strb	r3, [r7, #23]
 8006b06:	e00a      	b.n	8006b1e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2b02      	cmp	r3, #2
 8006b0c:	d002      	beq.n	8006b14 <USB_GetDevSpeed+0x32>
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2b06      	cmp	r3, #6
 8006b12:	d102      	bne.n	8006b1a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006b14:	2302      	movs	r3, #2
 8006b16:	75fb      	strb	r3, [r7, #23]
 8006b18:	e001      	b.n	8006b1e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006b1a:	230f      	movs	r3, #15
 8006b1c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006b1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	371c      	adds	r7, #28
 8006b24:	46bd      	mov	sp, r7
 8006b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2a:	4770      	bx	lr

08006b2c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b085      	sub	sp, #20
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
 8006b34:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	781b      	ldrb	r3, [r3, #0]
 8006b3e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	785b      	ldrb	r3, [r3, #1]
 8006b44:	2b01      	cmp	r3, #1
 8006b46:	d13a      	bne.n	8006bbe <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b4e:	69da      	ldr	r2, [r3, #28]
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	781b      	ldrb	r3, [r3, #0]
 8006b54:	f003 030f 	and.w	r3, r3, #15
 8006b58:	2101      	movs	r1, #1
 8006b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8006b5e:	b29b      	uxth	r3, r3
 8006b60:	68f9      	ldr	r1, [r7, #12]
 8006b62:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006b66:	4313      	orrs	r3, r2
 8006b68:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	015a      	lsls	r2, r3, #5
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	4413      	add	r3, r2
 8006b72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d155      	bne.n	8006c2c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	015a      	lsls	r2, r3, #5
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	4413      	add	r3, r2
 8006b88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b8c:	681a      	ldr	r2, [r3, #0]
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	689b      	ldr	r3, [r3, #8]
 8006b92:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	791b      	ldrb	r3, [r3, #4]
 8006b9a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006b9c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	059b      	lsls	r3, r3, #22
 8006ba2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	68ba      	ldr	r2, [r7, #8]
 8006ba8:	0151      	lsls	r1, r2, #5
 8006baa:	68fa      	ldr	r2, [r7, #12]
 8006bac:	440a      	add	r2, r1
 8006bae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006bb2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006bb6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006bba:	6013      	str	r3, [r2, #0]
 8006bbc:	e036      	b.n	8006c2c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006bc4:	69da      	ldr	r2, [r3, #28]
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	781b      	ldrb	r3, [r3, #0]
 8006bca:	f003 030f 	and.w	r3, r3, #15
 8006bce:	2101      	movs	r1, #1
 8006bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8006bd4:	041b      	lsls	r3, r3, #16
 8006bd6:	68f9      	ldr	r1, [r7, #12]
 8006bd8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	015a      	lsls	r2, r3, #5
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	4413      	add	r3, r2
 8006be8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d11a      	bne.n	8006c2c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	015a      	lsls	r2, r3, #5
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	4413      	add	r3, r2
 8006bfe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c02:	681a      	ldr	r2, [r3, #0]
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	689b      	ldr	r3, [r3, #8]
 8006c08:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	791b      	ldrb	r3, [r3, #4]
 8006c10:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006c12:	430b      	orrs	r3, r1
 8006c14:	4313      	orrs	r3, r2
 8006c16:	68ba      	ldr	r2, [r7, #8]
 8006c18:	0151      	lsls	r1, r2, #5
 8006c1a:	68fa      	ldr	r2, [r7, #12]
 8006c1c:	440a      	add	r2, r1
 8006c1e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c2a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006c2c:	2300      	movs	r3, #0
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3714      	adds	r7, #20
 8006c32:	46bd      	mov	sp, r7
 8006c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c38:	4770      	bx	lr
	...

08006c3c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b085      	sub	sp, #20
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
 8006c44:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	781b      	ldrb	r3, [r3, #0]
 8006c4e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	785b      	ldrb	r3, [r3, #1]
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d161      	bne.n	8006d1c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	015a      	lsls	r2, r3, #5
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	4413      	add	r3, r2
 8006c60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006c6a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006c6e:	d11f      	bne.n	8006cb0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	015a      	lsls	r2, r3, #5
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	4413      	add	r3, r2
 8006c78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	68ba      	ldr	r2, [r7, #8]
 8006c80:	0151      	lsls	r1, r2, #5
 8006c82:	68fa      	ldr	r2, [r7, #12]
 8006c84:	440a      	add	r2, r1
 8006c86:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c8a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006c8e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	015a      	lsls	r2, r3, #5
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	4413      	add	r3, r2
 8006c98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	68ba      	ldr	r2, [r7, #8]
 8006ca0:	0151      	lsls	r1, r2, #5
 8006ca2:	68fa      	ldr	r2, [r7, #12]
 8006ca4:	440a      	add	r2, r1
 8006ca6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006caa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006cae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cb6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	781b      	ldrb	r3, [r3, #0]
 8006cbc:	f003 030f 	and.w	r3, r3, #15
 8006cc0:	2101      	movs	r1, #1
 8006cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8006cc6:	b29b      	uxth	r3, r3
 8006cc8:	43db      	mvns	r3, r3
 8006cca:	68f9      	ldr	r1, [r7, #12]
 8006ccc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006cd0:	4013      	ands	r3, r2
 8006cd2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cda:	69da      	ldr	r2, [r3, #28]
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	781b      	ldrb	r3, [r3, #0]
 8006ce0:	f003 030f 	and.w	r3, r3, #15
 8006ce4:	2101      	movs	r1, #1
 8006ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8006cea:	b29b      	uxth	r3, r3
 8006cec:	43db      	mvns	r3, r3
 8006cee:	68f9      	ldr	r1, [r7, #12]
 8006cf0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006cf4:	4013      	ands	r3, r2
 8006cf6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	015a      	lsls	r2, r3, #5
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	4413      	add	r3, r2
 8006d00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d04:	681a      	ldr	r2, [r3, #0]
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	0159      	lsls	r1, r3, #5
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	440b      	add	r3, r1
 8006d0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d12:	4619      	mov	r1, r3
 8006d14:	4b35      	ldr	r3, [pc, #212]	@ (8006dec <USB_DeactivateEndpoint+0x1b0>)
 8006d16:	4013      	ands	r3, r2
 8006d18:	600b      	str	r3, [r1, #0]
 8006d1a:	e060      	b.n	8006dde <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	015a      	lsls	r2, r3, #5
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	4413      	add	r3, r2
 8006d24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006d2e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006d32:	d11f      	bne.n	8006d74 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	015a      	lsls	r2, r3, #5
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	4413      	add	r3, r2
 8006d3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	68ba      	ldr	r2, [r7, #8]
 8006d44:	0151      	lsls	r1, r2, #5
 8006d46:	68fa      	ldr	r2, [r7, #12]
 8006d48:	440a      	add	r2, r1
 8006d4a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d4e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006d52:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	015a      	lsls	r2, r3, #5
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	4413      	add	r3, r2
 8006d5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	68ba      	ldr	r2, [r7, #8]
 8006d64:	0151      	lsls	r1, r2, #5
 8006d66:	68fa      	ldr	r2, [r7, #12]
 8006d68:	440a      	add	r2, r1
 8006d6a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d6e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006d72:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d7a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	781b      	ldrb	r3, [r3, #0]
 8006d80:	f003 030f 	and.w	r3, r3, #15
 8006d84:	2101      	movs	r1, #1
 8006d86:	fa01 f303 	lsl.w	r3, r1, r3
 8006d8a:	041b      	lsls	r3, r3, #16
 8006d8c:	43db      	mvns	r3, r3
 8006d8e:	68f9      	ldr	r1, [r7, #12]
 8006d90:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006d94:	4013      	ands	r3, r2
 8006d96:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d9e:	69da      	ldr	r2, [r3, #28]
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	781b      	ldrb	r3, [r3, #0]
 8006da4:	f003 030f 	and.w	r3, r3, #15
 8006da8:	2101      	movs	r1, #1
 8006daa:	fa01 f303 	lsl.w	r3, r1, r3
 8006dae:	041b      	lsls	r3, r3, #16
 8006db0:	43db      	mvns	r3, r3
 8006db2:	68f9      	ldr	r1, [r7, #12]
 8006db4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006db8:	4013      	ands	r3, r2
 8006dba:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	015a      	lsls	r2, r3, #5
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	4413      	add	r3, r2
 8006dc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006dc8:	681a      	ldr	r2, [r3, #0]
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	0159      	lsls	r1, r3, #5
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	440b      	add	r3, r1
 8006dd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006dd6:	4619      	mov	r1, r3
 8006dd8:	4b05      	ldr	r3, [pc, #20]	@ (8006df0 <USB_DeactivateEndpoint+0x1b4>)
 8006dda:	4013      	ands	r3, r2
 8006ddc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006dde:	2300      	movs	r3, #0
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	3714      	adds	r7, #20
 8006de4:	46bd      	mov	sp, r7
 8006de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dea:	4770      	bx	lr
 8006dec:	ec337800 	.word	0xec337800
 8006df0:	eff37800 	.word	0xeff37800

08006df4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b08a      	sub	sp, #40	@ 0x28
 8006df8:	af02      	add	r7, sp, #8
 8006dfa:	60f8      	str	r0, [r7, #12]
 8006dfc:	60b9      	str	r1, [r7, #8]
 8006dfe:	4613      	mov	r3, r2
 8006e00:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	781b      	ldrb	r3, [r3, #0]
 8006e0a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	785b      	ldrb	r3, [r3, #1]
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	f040 817f 	bne.w	8007114 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	691b      	ldr	r3, [r3, #16]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d132      	bne.n	8006e84 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006e1e:	69bb      	ldr	r3, [r7, #24]
 8006e20:	015a      	lsls	r2, r3, #5
 8006e22:	69fb      	ldr	r3, [r7, #28]
 8006e24:	4413      	add	r3, r2
 8006e26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e2a:	691b      	ldr	r3, [r3, #16]
 8006e2c:	69ba      	ldr	r2, [r7, #24]
 8006e2e:	0151      	lsls	r1, r2, #5
 8006e30:	69fa      	ldr	r2, [r7, #28]
 8006e32:	440a      	add	r2, r1
 8006e34:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e38:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006e3c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006e40:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006e42:	69bb      	ldr	r3, [r7, #24]
 8006e44:	015a      	lsls	r2, r3, #5
 8006e46:	69fb      	ldr	r3, [r7, #28]
 8006e48:	4413      	add	r3, r2
 8006e4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e4e:	691b      	ldr	r3, [r3, #16]
 8006e50:	69ba      	ldr	r2, [r7, #24]
 8006e52:	0151      	lsls	r1, r2, #5
 8006e54:	69fa      	ldr	r2, [r7, #28]
 8006e56:	440a      	add	r2, r1
 8006e58:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e5c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006e60:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006e62:	69bb      	ldr	r3, [r7, #24]
 8006e64:	015a      	lsls	r2, r3, #5
 8006e66:	69fb      	ldr	r3, [r7, #28]
 8006e68:	4413      	add	r3, r2
 8006e6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e6e:	691b      	ldr	r3, [r3, #16]
 8006e70:	69ba      	ldr	r2, [r7, #24]
 8006e72:	0151      	lsls	r1, r2, #5
 8006e74:	69fa      	ldr	r2, [r7, #28]
 8006e76:	440a      	add	r2, r1
 8006e78:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e7c:	0cdb      	lsrs	r3, r3, #19
 8006e7e:	04db      	lsls	r3, r3, #19
 8006e80:	6113      	str	r3, [r2, #16]
 8006e82:	e097      	b.n	8006fb4 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006e84:	69bb      	ldr	r3, [r7, #24]
 8006e86:	015a      	lsls	r2, r3, #5
 8006e88:	69fb      	ldr	r3, [r7, #28]
 8006e8a:	4413      	add	r3, r2
 8006e8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e90:	691b      	ldr	r3, [r3, #16]
 8006e92:	69ba      	ldr	r2, [r7, #24]
 8006e94:	0151      	lsls	r1, r2, #5
 8006e96:	69fa      	ldr	r2, [r7, #28]
 8006e98:	440a      	add	r2, r1
 8006e9a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e9e:	0cdb      	lsrs	r3, r3, #19
 8006ea0:	04db      	lsls	r3, r3, #19
 8006ea2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006ea4:	69bb      	ldr	r3, [r7, #24]
 8006ea6:	015a      	lsls	r2, r3, #5
 8006ea8:	69fb      	ldr	r3, [r7, #28]
 8006eaa:	4413      	add	r3, r2
 8006eac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006eb0:	691b      	ldr	r3, [r3, #16]
 8006eb2:	69ba      	ldr	r2, [r7, #24]
 8006eb4:	0151      	lsls	r1, r2, #5
 8006eb6:	69fa      	ldr	r2, [r7, #28]
 8006eb8:	440a      	add	r2, r1
 8006eba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ebe:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006ec2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006ec6:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006ec8:	69bb      	ldr	r3, [r7, #24]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d11a      	bne.n	8006f04 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	691a      	ldr	r2, [r3, #16]
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	689b      	ldr	r3, [r3, #8]
 8006ed6:	429a      	cmp	r2, r3
 8006ed8:	d903      	bls.n	8006ee2 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	689a      	ldr	r2, [r3, #8]
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006ee2:	69bb      	ldr	r3, [r7, #24]
 8006ee4:	015a      	lsls	r2, r3, #5
 8006ee6:	69fb      	ldr	r3, [r7, #28]
 8006ee8:	4413      	add	r3, r2
 8006eea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006eee:	691b      	ldr	r3, [r3, #16]
 8006ef0:	69ba      	ldr	r2, [r7, #24]
 8006ef2:	0151      	lsls	r1, r2, #5
 8006ef4:	69fa      	ldr	r2, [r7, #28]
 8006ef6:	440a      	add	r2, r1
 8006ef8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006efc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006f00:	6113      	str	r3, [r2, #16]
 8006f02:	e044      	b.n	8006f8e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	691a      	ldr	r2, [r3, #16]
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	689b      	ldr	r3, [r3, #8]
 8006f0c:	4413      	add	r3, r2
 8006f0e:	1e5a      	subs	r2, r3, #1
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	689b      	ldr	r3, [r3, #8]
 8006f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f18:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8006f1a:	69bb      	ldr	r3, [r7, #24]
 8006f1c:	015a      	lsls	r2, r3, #5
 8006f1e:	69fb      	ldr	r3, [r7, #28]
 8006f20:	4413      	add	r3, r2
 8006f22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f26:	691a      	ldr	r2, [r3, #16]
 8006f28:	8afb      	ldrh	r3, [r7, #22]
 8006f2a:	04d9      	lsls	r1, r3, #19
 8006f2c:	4ba4      	ldr	r3, [pc, #656]	@ (80071c0 <USB_EPStartXfer+0x3cc>)
 8006f2e:	400b      	ands	r3, r1
 8006f30:	69b9      	ldr	r1, [r7, #24]
 8006f32:	0148      	lsls	r0, r1, #5
 8006f34:	69f9      	ldr	r1, [r7, #28]
 8006f36:	4401      	add	r1, r0
 8006f38:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	791b      	ldrb	r3, [r3, #4]
 8006f44:	2b01      	cmp	r3, #1
 8006f46:	d122      	bne.n	8006f8e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006f48:	69bb      	ldr	r3, [r7, #24]
 8006f4a:	015a      	lsls	r2, r3, #5
 8006f4c:	69fb      	ldr	r3, [r7, #28]
 8006f4e:	4413      	add	r3, r2
 8006f50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f54:	691b      	ldr	r3, [r3, #16]
 8006f56:	69ba      	ldr	r2, [r7, #24]
 8006f58:	0151      	lsls	r1, r2, #5
 8006f5a:	69fa      	ldr	r2, [r7, #28]
 8006f5c:	440a      	add	r2, r1
 8006f5e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f62:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8006f66:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8006f68:	69bb      	ldr	r3, [r7, #24]
 8006f6a:	015a      	lsls	r2, r3, #5
 8006f6c:	69fb      	ldr	r3, [r7, #28]
 8006f6e:	4413      	add	r3, r2
 8006f70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f74:	691a      	ldr	r2, [r3, #16]
 8006f76:	8afb      	ldrh	r3, [r7, #22]
 8006f78:	075b      	lsls	r3, r3, #29
 8006f7a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8006f7e:	69b9      	ldr	r1, [r7, #24]
 8006f80:	0148      	lsls	r0, r1, #5
 8006f82:	69f9      	ldr	r1, [r7, #28]
 8006f84:	4401      	add	r1, r0
 8006f86:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006f8e:	69bb      	ldr	r3, [r7, #24]
 8006f90:	015a      	lsls	r2, r3, #5
 8006f92:	69fb      	ldr	r3, [r7, #28]
 8006f94:	4413      	add	r3, r2
 8006f96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f9a:	691a      	ldr	r2, [r3, #16]
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	691b      	ldr	r3, [r3, #16]
 8006fa0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006fa4:	69b9      	ldr	r1, [r7, #24]
 8006fa6:	0148      	lsls	r0, r1, #5
 8006fa8:	69f9      	ldr	r1, [r7, #28]
 8006faa:	4401      	add	r1, r0
 8006fac:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006fb4:	79fb      	ldrb	r3, [r7, #7]
 8006fb6:	2b01      	cmp	r3, #1
 8006fb8:	d14b      	bne.n	8007052 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	69db      	ldr	r3, [r3, #28]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d009      	beq.n	8006fd6 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006fc2:	69bb      	ldr	r3, [r7, #24]
 8006fc4:	015a      	lsls	r2, r3, #5
 8006fc6:	69fb      	ldr	r3, [r7, #28]
 8006fc8:	4413      	add	r3, r2
 8006fca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fce:	461a      	mov	r2, r3
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	69db      	ldr	r3, [r3, #28]
 8006fd4:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	791b      	ldrb	r3, [r3, #4]
 8006fda:	2b01      	cmp	r3, #1
 8006fdc:	d128      	bne.n	8007030 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006fde:	69fb      	ldr	r3, [r7, #28]
 8006fe0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fe4:	689b      	ldr	r3, [r3, #8]
 8006fe6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d110      	bne.n	8007010 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006fee:	69bb      	ldr	r3, [r7, #24]
 8006ff0:	015a      	lsls	r2, r3, #5
 8006ff2:	69fb      	ldr	r3, [r7, #28]
 8006ff4:	4413      	add	r3, r2
 8006ff6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	69ba      	ldr	r2, [r7, #24]
 8006ffe:	0151      	lsls	r1, r2, #5
 8007000:	69fa      	ldr	r2, [r7, #28]
 8007002:	440a      	add	r2, r1
 8007004:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007008:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800700c:	6013      	str	r3, [r2, #0]
 800700e:	e00f      	b.n	8007030 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007010:	69bb      	ldr	r3, [r7, #24]
 8007012:	015a      	lsls	r2, r3, #5
 8007014:	69fb      	ldr	r3, [r7, #28]
 8007016:	4413      	add	r3, r2
 8007018:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	69ba      	ldr	r2, [r7, #24]
 8007020:	0151      	lsls	r1, r2, #5
 8007022:	69fa      	ldr	r2, [r7, #28]
 8007024:	440a      	add	r2, r1
 8007026:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800702a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800702e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007030:	69bb      	ldr	r3, [r7, #24]
 8007032:	015a      	lsls	r2, r3, #5
 8007034:	69fb      	ldr	r3, [r7, #28]
 8007036:	4413      	add	r3, r2
 8007038:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	69ba      	ldr	r2, [r7, #24]
 8007040:	0151      	lsls	r1, r2, #5
 8007042:	69fa      	ldr	r2, [r7, #28]
 8007044:	440a      	add	r2, r1
 8007046:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800704a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800704e:	6013      	str	r3, [r2, #0]
 8007050:	e166      	b.n	8007320 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007052:	69bb      	ldr	r3, [r7, #24]
 8007054:	015a      	lsls	r2, r3, #5
 8007056:	69fb      	ldr	r3, [r7, #28]
 8007058:	4413      	add	r3, r2
 800705a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	69ba      	ldr	r2, [r7, #24]
 8007062:	0151      	lsls	r1, r2, #5
 8007064:	69fa      	ldr	r2, [r7, #28]
 8007066:	440a      	add	r2, r1
 8007068:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800706c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007070:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	791b      	ldrb	r3, [r3, #4]
 8007076:	2b01      	cmp	r3, #1
 8007078:	d015      	beq.n	80070a6 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	691b      	ldr	r3, [r3, #16]
 800707e:	2b00      	cmp	r3, #0
 8007080:	f000 814e 	beq.w	8007320 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007084:	69fb      	ldr	r3, [r7, #28]
 8007086:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800708a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	781b      	ldrb	r3, [r3, #0]
 8007090:	f003 030f 	and.w	r3, r3, #15
 8007094:	2101      	movs	r1, #1
 8007096:	fa01 f303 	lsl.w	r3, r1, r3
 800709a:	69f9      	ldr	r1, [r7, #28]
 800709c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80070a0:	4313      	orrs	r3, r2
 80070a2:	634b      	str	r3, [r1, #52]	@ 0x34
 80070a4:	e13c      	b.n	8007320 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80070a6:	69fb      	ldr	r3, [r7, #28]
 80070a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070ac:	689b      	ldr	r3, [r3, #8]
 80070ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d110      	bne.n	80070d8 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80070b6:	69bb      	ldr	r3, [r7, #24]
 80070b8:	015a      	lsls	r2, r3, #5
 80070ba:	69fb      	ldr	r3, [r7, #28]
 80070bc:	4413      	add	r3, r2
 80070be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	69ba      	ldr	r2, [r7, #24]
 80070c6:	0151      	lsls	r1, r2, #5
 80070c8:	69fa      	ldr	r2, [r7, #28]
 80070ca:	440a      	add	r2, r1
 80070cc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80070d0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80070d4:	6013      	str	r3, [r2, #0]
 80070d6:	e00f      	b.n	80070f8 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80070d8:	69bb      	ldr	r3, [r7, #24]
 80070da:	015a      	lsls	r2, r3, #5
 80070dc:	69fb      	ldr	r3, [r7, #28]
 80070de:	4413      	add	r3, r2
 80070e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	69ba      	ldr	r2, [r7, #24]
 80070e8:	0151      	lsls	r1, r2, #5
 80070ea:	69fa      	ldr	r2, [r7, #28]
 80070ec:	440a      	add	r2, r1
 80070ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80070f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80070f6:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	68d9      	ldr	r1, [r3, #12]
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	781a      	ldrb	r2, [r3, #0]
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	691b      	ldr	r3, [r3, #16]
 8007104:	b298      	uxth	r0, r3
 8007106:	79fb      	ldrb	r3, [r7, #7]
 8007108:	9300      	str	r3, [sp, #0]
 800710a:	4603      	mov	r3, r0
 800710c:	68f8      	ldr	r0, [r7, #12]
 800710e:	f000 f9b9 	bl	8007484 <USB_WritePacket>
 8007112:	e105      	b.n	8007320 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007114:	69bb      	ldr	r3, [r7, #24]
 8007116:	015a      	lsls	r2, r3, #5
 8007118:	69fb      	ldr	r3, [r7, #28]
 800711a:	4413      	add	r3, r2
 800711c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007120:	691b      	ldr	r3, [r3, #16]
 8007122:	69ba      	ldr	r2, [r7, #24]
 8007124:	0151      	lsls	r1, r2, #5
 8007126:	69fa      	ldr	r2, [r7, #28]
 8007128:	440a      	add	r2, r1
 800712a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800712e:	0cdb      	lsrs	r3, r3, #19
 8007130:	04db      	lsls	r3, r3, #19
 8007132:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007134:	69bb      	ldr	r3, [r7, #24]
 8007136:	015a      	lsls	r2, r3, #5
 8007138:	69fb      	ldr	r3, [r7, #28]
 800713a:	4413      	add	r3, r2
 800713c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007140:	691b      	ldr	r3, [r3, #16]
 8007142:	69ba      	ldr	r2, [r7, #24]
 8007144:	0151      	lsls	r1, r2, #5
 8007146:	69fa      	ldr	r2, [r7, #28]
 8007148:	440a      	add	r2, r1
 800714a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800714e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007152:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007156:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8007158:	69bb      	ldr	r3, [r7, #24]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d132      	bne.n	80071c4 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	691b      	ldr	r3, [r3, #16]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d003      	beq.n	800716e <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	689a      	ldr	r2, [r3, #8]
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	689a      	ldr	r2, [r3, #8]
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007176:	69bb      	ldr	r3, [r7, #24]
 8007178:	015a      	lsls	r2, r3, #5
 800717a:	69fb      	ldr	r3, [r7, #28]
 800717c:	4413      	add	r3, r2
 800717e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007182:	691a      	ldr	r2, [r3, #16]
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	6a1b      	ldr	r3, [r3, #32]
 8007188:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800718c:	69b9      	ldr	r1, [r7, #24]
 800718e:	0148      	lsls	r0, r1, #5
 8007190:	69f9      	ldr	r1, [r7, #28]
 8007192:	4401      	add	r1, r0
 8007194:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007198:	4313      	orrs	r3, r2
 800719a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800719c:	69bb      	ldr	r3, [r7, #24]
 800719e:	015a      	lsls	r2, r3, #5
 80071a0:	69fb      	ldr	r3, [r7, #28]
 80071a2:	4413      	add	r3, r2
 80071a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071a8:	691b      	ldr	r3, [r3, #16]
 80071aa:	69ba      	ldr	r2, [r7, #24]
 80071ac:	0151      	lsls	r1, r2, #5
 80071ae:	69fa      	ldr	r2, [r7, #28]
 80071b0:	440a      	add	r2, r1
 80071b2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80071b6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80071ba:	6113      	str	r3, [r2, #16]
 80071bc:	e062      	b.n	8007284 <USB_EPStartXfer+0x490>
 80071be:	bf00      	nop
 80071c0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	691b      	ldr	r3, [r3, #16]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d123      	bne.n	8007214 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80071cc:	69bb      	ldr	r3, [r7, #24]
 80071ce:	015a      	lsls	r2, r3, #5
 80071d0:	69fb      	ldr	r3, [r7, #28]
 80071d2:	4413      	add	r3, r2
 80071d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071d8:	691a      	ldr	r2, [r3, #16]
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	689b      	ldr	r3, [r3, #8]
 80071de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071e2:	69b9      	ldr	r1, [r7, #24]
 80071e4:	0148      	lsls	r0, r1, #5
 80071e6:	69f9      	ldr	r1, [r7, #28]
 80071e8:	4401      	add	r1, r0
 80071ea:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80071ee:	4313      	orrs	r3, r2
 80071f0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80071f2:	69bb      	ldr	r3, [r7, #24]
 80071f4:	015a      	lsls	r2, r3, #5
 80071f6:	69fb      	ldr	r3, [r7, #28]
 80071f8:	4413      	add	r3, r2
 80071fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071fe:	691b      	ldr	r3, [r3, #16]
 8007200:	69ba      	ldr	r2, [r7, #24]
 8007202:	0151      	lsls	r1, r2, #5
 8007204:	69fa      	ldr	r2, [r7, #28]
 8007206:	440a      	add	r2, r1
 8007208:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800720c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007210:	6113      	str	r3, [r2, #16]
 8007212:	e037      	b.n	8007284 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	691a      	ldr	r2, [r3, #16]
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	689b      	ldr	r3, [r3, #8]
 800721c:	4413      	add	r3, r2
 800721e:	1e5a      	subs	r2, r3, #1
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	689b      	ldr	r3, [r3, #8]
 8007224:	fbb2 f3f3 	udiv	r3, r2, r3
 8007228:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	689b      	ldr	r3, [r3, #8]
 800722e:	8afa      	ldrh	r2, [r7, #22]
 8007230:	fb03 f202 	mul.w	r2, r3, r2
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007238:	69bb      	ldr	r3, [r7, #24]
 800723a:	015a      	lsls	r2, r3, #5
 800723c:	69fb      	ldr	r3, [r7, #28]
 800723e:	4413      	add	r3, r2
 8007240:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007244:	691a      	ldr	r2, [r3, #16]
 8007246:	8afb      	ldrh	r3, [r7, #22]
 8007248:	04d9      	lsls	r1, r3, #19
 800724a:	4b38      	ldr	r3, [pc, #224]	@ (800732c <USB_EPStartXfer+0x538>)
 800724c:	400b      	ands	r3, r1
 800724e:	69b9      	ldr	r1, [r7, #24]
 8007250:	0148      	lsls	r0, r1, #5
 8007252:	69f9      	ldr	r1, [r7, #28]
 8007254:	4401      	add	r1, r0
 8007256:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800725a:	4313      	orrs	r3, r2
 800725c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800725e:	69bb      	ldr	r3, [r7, #24]
 8007260:	015a      	lsls	r2, r3, #5
 8007262:	69fb      	ldr	r3, [r7, #28]
 8007264:	4413      	add	r3, r2
 8007266:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800726a:	691a      	ldr	r2, [r3, #16]
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	6a1b      	ldr	r3, [r3, #32]
 8007270:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007274:	69b9      	ldr	r1, [r7, #24]
 8007276:	0148      	lsls	r0, r1, #5
 8007278:	69f9      	ldr	r1, [r7, #28]
 800727a:	4401      	add	r1, r0
 800727c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007280:	4313      	orrs	r3, r2
 8007282:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8007284:	79fb      	ldrb	r3, [r7, #7]
 8007286:	2b01      	cmp	r3, #1
 8007288:	d10d      	bne.n	80072a6 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	68db      	ldr	r3, [r3, #12]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d009      	beq.n	80072a6 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	68d9      	ldr	r1, [r3, #12]
 8007296:	69bb      	ldr	r3, [r7, #24]
 8007298:	015a      	lsls	r2, r3, #5
 800729a:	69fb      	ldr	r3, [r7, #28]
 800729c:	4413      	add	r3, r2
 800729e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072a2:	460a      	mov	r2, r1
 80072a4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	791b      	ldrb	r3, [r3, #4]
 80072aa:	2b01      	cmp	r3, #1
 80072ac:	d128      	bne.n	8007300 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80072ae:	69fb      	ldr	r3, [r7, #28]
 80072b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072b4:	689b      	ldr	r3, [r3, #8]
 80072b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d110      	bne.n	80072e0 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80072be:	69bb      	ldr	r3, [r7, #24]
 80072c0:	015a      	lsls	r2, r3, #5
 80072c2:	69fb      	ldr	r3, [r7, #28]
 80072c4:	4413      	add	r3, r2
 80072c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	69ba      	ldr	r2, [r7, #24]
 80072ce:	0151      	lsls	r1, r2, #5
 80072d0:	69fa      	ldr	r2, [r7, #28]
 80072d2:	440a      	add	r2, r1
 80072d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80072d8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80072dc:	6013      	str	r3, [r2, #0]
 80072de:	e00f      	b.n	8007300 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80072e0:	69bb      	ldr	r3, [r7, #24]
 80072e2:	015a      	lsls	r2, r3, #5
 80072e4:	69fb      	ldr	r3, [r7, #28]
 80072e6:	4413      	add	r3, r2
 80072e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	69ba      	ldr	r2, [r7, #24]
 80072f0:	0151      	lsls	r1, r2, #5
 80072f2:	69fa      	ldr	r2, [r7, #28]
 80072f4:	440a      	add	r2, r1
 80072f6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80072fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80072fe:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007300:	69bb      	ldr	r3, [r7, #24]
 8007302:	015a      	lsls	r2, r3, #5
 8007304:	69fb      	ldr	r3, [r7, #28]
 8007306:	4413      	add	r3, r2
 8007308:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	69ba      	ldr	r2, [r7, #24]
 8007310:	0151      	lsls	r1, r2, #5
 8007312:	69fa      	ldr	r2, [r7, #28]
 8007314:	440a      	add	r2, r1
 8007316:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800731a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800731e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007320:	2300      	movs	r3, #0
}
 8007322:	4618      	mov	r0, r3
 8007324:	3720      	adds	r7, #32
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}
 800732a:	bf00      	nop
 800732c:	1ff80000 	.word	0x1ff80000

08007330 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007330:	b480      	push	{r7}
 8007332:	b087      	sub	sp, #28
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
 8007338:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800733a:	2300      	movs	r3, #0
 800733c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800733e:	2300      	movs	r3, #0
 8007340:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	785b      	ldrb	r3, [r3, #1]
 800734a:	2b01      	cmp	r3, #1
 800734c:	d14a      	bne.n	80073e4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	781b      	ldrb	r3, [r3, #0]
 8007352:	015a      	lsls	r2, r3, #5
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	4413      	add	r3, r2
 8007358:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007362:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007366:	f040 8086 	bne.w	8007476 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	781b      	ldrb	r3, [r3, #0]
 800736e:	015a      	lsls	r2, r3, #5
 8007370:	693b      	ldr	r3, [r7, #16]
 8007372:	4413      	add	r3, r2
 8007374:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	683a      	ldr	r2, [r7, #0]
 800737c:	7812      	ldrb	r2, [r2, #0]
 800737e:	0151      	lsls	r1, r2, #5
 8007380:	693a      	ldr	r2, [r7, #16]
 8007382:	440a      	add	r2, r1
 8007384:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007388:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800738c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	781b      	ldrb	r3, [r3, #0]
 8007392:	015a      	lsls	r2, r3, #5
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	4413      	add	r3, r2
 8007398:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	683a      	ldr	r2, [r7, #0]
 80073a0:	7812      	ldrb	r2, [r2, #0]
 80073a2:	0151      	lsls	r1, r2, #5
 80073a4:	693a      	ldr	r2, [r7, #16]
 80073a6:	440a      	add	r2, r1
 80073a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80073ac:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80073b0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	3301      	adds	r3, #1
 80073b6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f242 7210 	movw	r2, #10000	@ 0x2710
 80073be:	4293      	cmp	r3, r2
 80073c0:	d902      	bls.n	80073c8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80073c2:	2301      	movs	r3, #1
 80073c4:	75fb      	strb	r3, [r7, #23]
          break;
 80073c6:	e056      	b.n	8007476 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	781b      	ldrb	r3, [r3, #0]
 80073cc:	015a      	lsls	r2, r3, #5
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	4413      	add	r3, r2
 80073d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80073dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80073e0:	d0e7      	beq.n	80073b2 <USB_EPStopXfer+0x82>
 80073e2:	e048      	b.n	8007476 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	781b      	ldrb	r3, [r3, #0]
 80073e8:	015a      	lsls	r2, r3, #5
 80073ea:	693b      	ldr	r3, [r7, #16]
 80073ec:	4413      	add	r3, r2
 80073ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80073f8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80073fc:	d13b      	bne.n	8007476 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	781b      	ldrb	r3, [r3, #0]
 8007402:	015a      	lsls	r2, r3, #5
 8007404:	693b      	ldr	r3, [r7, #16]
 8007406:	4413      	add	r3, r2
 8007408:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	683a      	ldr	r2, [r7, #0]
 8007410:	7812      	ldrb	r2, [r2, #0]
 8007412:	0151      	lsls	r1, r2, #5
 8007414:	693a      	ldr	r2, [r7, #16]
 8007416:	440a      	add	r2, r1
 8007418:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800741c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007420:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	781b      	ldrb	r3, [r3, #0]
 8007426:	015a      	lsls	r2, r3, #5
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	4413      	add	r3, r2
 800742c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	683a      	ldr	r2, [r7, #0]
 8007434:	7812      	ldrb	r2, [r2, #0]
 8007436:	0151      	lsls	r1, r2, #5
 8007438:	693a      	ldr	r2, [r7, #16]
 800743a:	440a      	add	r2, r1
 800743c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007440:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007444:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	3301      	adds	r3, #1
 800744a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007452:	4293      	cmp	r3, r2
 8007454:	d902      	bls.n	800745c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007456:	2301      	movs	r3, #1
 8007458:	75fb      	strb	r3, [r7, #23]
          break;
 800745a:	e00c      	b.n	8007476 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	781b      	ldrb	r3, [r3, #0]
 8007460:	015a      	lsls	r2, r3, #5
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	4413      	add	r3, r2
 8007466:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007470:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007474:	d0e7      	beq.n	8007446 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007476:	7dfb      	ldrb	r3, [r7, #23]
}
 8007478:	4618      	mov	r0, r3
 800747a:	371c      	adds	r7, #28
 800747c:	46bd      	mov	sp, r7
 800747e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007482:	4770      	bx	lr

08007484 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007484:	b480      	push	{r7}
 8007486:	b089      	sub	sp, #36	@ 0x24
 8007488:	af00      	add	r7, sp, #0
 800748a:	60f8      	str	r0, [r7, #12]
 800748c:	60b9      	str	r1, [r7, #8]
 800748e:	4611      	mov	r1, r2
 8007490:	461a      	mov	r2, r3
 8007492:	460b      	mov	r3, r1
 8007494:	71fb      	strb	r3, [r7, #7]
 8007496:	4613      	mov	r3, r2
 8007498:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80074a2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d123      	bne.n	80074f2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80074aa:	88bb      	ldrh	r3, [r7, #4]
 80074ac:	3303      	adds	r3, #3
 80074ae:	089b      	lsrs	r3, r3, #2
 80074b0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80074b2:	2300      	movs	r3, #0
 80074b4:	61bb      	str	r3, [r7, #24]
 80074b6:	e018      	b.n	80074ea <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80074b8:	79fb      	ldrb	r3, [r7, #7]
 80074ba:	031a      	lsls	r2, r3, #12
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	4413      	add	r3, r2
 80074c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80074c4:	461a      	mov	r2, r3
 80074c6:	69fb      	ldr	r3, [r7, #28]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	6013      	str	r3, [r2, #0]
      pSrc++;
 80074cc:	69fb      	ldr	r3, [r7, #28]
 80074ce:	3301      	adds	r3, #1
 80074d0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80074d2:	69fb      	ldr	r3, [r7, #28]
 80074d4:	3301      	adds	r3, #1
 80074d6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80074d8:	69fb      	ldr	r3, [r7, #28]
 80074da:	3301      	adds	r3, #1
 80074dc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80074de:	69fb      	ldr	r3, [r7, #28]
 80074e0:	3301      	adds	r3, #1
 80074e2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80074e4:	69bb      	ldr	r3, [r7, #24]
 80074e6:	3301      	adds	r3, #1
 80074e8:	61bb      	str	r3, [r7, #24]
 80074ea:	69ba      	ldr	r2, [r7, #24]
 80074ec:	693b      	ldr	r3, [r7, #16]
 80074ee:	429a      	cmp	r2, r3
 80074f0:	d3e2      	bcc.n	80074b8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80074f2:	2300      	movs	r3, #0
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	3724      	adds	r7, #36	@ 0x24
 80074f8:	46bd      	mov	sp, r7
 80074fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fe:	4770      	bx	lr

08007500 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007500:	b480      	push	{r7}
 8007502:	b08b      	sub	sp, #44	@ 0x2c
 8007504:	af00      	add	r7, sp, #0
 8007506:	60f8      	str	r0, [r7, #12]
 8007508:	60b9      	str	r1, [r7, #8]
 800750a:	4613      	mov	r3, r2
 800750c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007516:	88fb      	ldrh	r3, [r7, #6]
 8007518:	089b      	lsrs	r3, r3, #2
 800751a:	b29b      	uxth	r3, r3
 800751c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800751e:	88fb      	ldrh	r3, [r7, #6]
 8007520:	f003 0303 	and.w	r3, r3, #3
 8007524:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007526:	2300      	movs	r3, #0
 8007528:	623b      	str	r3, [r7, #32]
 800752a:	e014      	b.n	8007556 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800752c:	69bb      	ldr	r3, [r7, #24]
 800752e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007532:	681a      	ldr	r2, [r3, #0]
 8007534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007536:	601a      	str	r2, [r3, #0]
    pDest++;
 8007538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800753a:	3301      	adds	r3, #1
 800753c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800753e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007540:	3301      	adds	r3, #1
 8007542:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007546:	3301      	adds	r3, #1
 8007548:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800754a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800754c:	3301      	adds	r3, #1
 800754e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007550:	6a3b      	ldr	r3, [r7, #32]
 8007552:	3301      	adds	r3, #1
 8007554:	623b      	str	r3, [r7, #32]
 8007556:	6a3a      	ldr	r2, [r7, #32]
 8007558:	697b      	ldr	r3, [r7, #20]
 800755a:	429a      	cmp	r2, r3
 800755c:	d3e6      	bcc.n	800752c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800755e:	8bfb      	ldrh	r3, [r7, #30]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d01e      	beq.n	80075a2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007564:	2300      	movs	r3, #0
 8007566:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007568:	69bb      	ldr	r3, [r7, #24]
 800756a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800756e:	461a      	mov	r2, r3
 8007570:	f107 0310 	add.w	r3, r7, #16
 8007574:	6812      	ldr	r2, [r2, #0]
 8007576:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007578:	693a      	ldr	r2, [r7, #16]
 800757a:	6a3b      	ldr	r3, [r7, #32]
 800757c:	b2db      	uxtb	r3, r3
 800757e:	00db      	lsls	r3, r3, #3
 8007580:	fa22 f303 	lsr.w	r3, r2, r3
 8007584:	b2da      	uxtb	r2, r3
 8007586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007588:	701a      	strb	r2, [r3, #0]
      i++;
 800758a:	6a3b      	ldr	r3, [r7, #32]
 800758c:	3301      	adds	r3, #1
 800758e:	623b      	str	r3, [r7, #32]
      pDest++;
 8007590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007592:	3301      	adds	r3, #1
 8007594:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007596:	8bfb      	ldrh	r3, [r7, #30]
 8007598:	3b01      	subs	r3, #1
 800759a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800759c:	8bfb      	ldrh	r3, [r7, #30]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d1ea      	bne.n	8007578 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80075a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	372c      	adds	r7, #44	@ 0x2c
 80075a8:	46bd      	mov	sp, r7
 80075aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ae:	4770      	bx	lr

080075b0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80075b0:	b480      	push	{r7}
 80075b2:	b085      	sub	sp, #20
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
 80075b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	781b      	ldrb	r3, [r3, #0]
 80075c2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	785b      	ldrb	r3, [r3, #1]
 80075c8:	2b01      	cmp	r3, #1
 80075ca:	d12c      	bne.n	8007626 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	015a      	lsls	r2, r3, #5
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	4413      	add	r3, r2
 80075d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	db12      	blt.n	8007604 <USB_EPSetStall+0x54>
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d00f      	beq.n	8007604 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	015a      	lsls	r2, r3, #5
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	4413      	add	r3, r2
 80075ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	68ba      	ldr	r2, [r7, #8]
 80075f4:	0151      	lsls	r1, r2, #5
 80075f6:	68fa      	ldr	r2, [r7, #12]
 80075f8:	440a      	add	r2, r1
 80075fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80075fe:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007602:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	015a      	lsls	r2, r3, #5
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	4413      	add	r3, r2
 800760c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	68ba      	ldr	r2, [r7, #8]
 8007614:	0151      	lsls	r1, r2, #5
 8007616:	68fa      	ldr	r2, [r7, #12]
 8007618:	440a      	add	r2, r1
 800761a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800761e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007622:	6013      	str	r3, [r2, #0]
 8007624:	e02b      	b.n	800767e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	015a      	lsls	r2, r3, #5
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	4413      	add	r3, r2
 800762e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	2b00      	cmp	r3, #0
 8007636:	db12      	blt.n	800765e <USB_EPSetStall+0xae>
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d00f      	beq.n	800765e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	015a      	lsls	r2, r3, #5
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	4413      	add	r3, r2
 8007646:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	68ba      	ldr	r2, [r7, #8]
 800764e:	0151      	lsls	r1, r2, #5
 8007650:	68fa      	ldr	r2, [r7, #12]
 8007652:	440a      	add	r2, r1
 8007654:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007658:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800765c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	015a      	lsls	r2, r3, #5
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	4413      	add	r3, r2
 8007666:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	68ba      	ldr	r2, [r7, #8]
 800766e:	0151      	lsls	r1, r2, #5
 8007670:	68fa      	ldr	r2, [r7, #12]
 8007672:	440a      	add	r2, r1
 8007674:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007678:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800767c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800767e:	2300      	movs	r3, #0
}
 8007680:	4618      	mov	r0, r3
 8007682:	3714      	adds	r7, #20
 8007684:	46bd      	mov	sp, r7
 8007686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768a:	4770      	bx	lr

0800768c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800768c:	b480      	push	{r7}
 800768e:	b085      	sub	sp, #20
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
 8007694:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	781b      	ldrb	r3, [r3, #0]
 800769e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	785b      	ldrb	r3, [r3, #1]
 80076a4:	2b01      	cmp	r3, #1
 80076a6:	d128      	bne.n	80076fa <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	015a      	lsls	r2, r3, #5
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	4413      	add	r3, r2
 80076b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	68ba      	ldr	r2, [r7, #8]
 80076b8:	0151      	lsls	r1, r2, #5
 80076ba:	68fa      	ldr	r2, [r7, #12]
 80076bc:	440a      	add	r2, r1
 80076be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80076c2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80076c6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	791b      	ldrb	r3, [r3, #4]
 80076cc:	2b03      	cmp	r3, #3
 80076ce:	d003      	beq.n	80076d8 <USB_EPClearStall+0x4c>
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	791b      	ldrb	r3, [r3, #4]
 80076d4:	2b02      	cmp	r3, #2
 80076d6:	d138      	bne.n	800774a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	015a      	lsls	r2, r3, #5
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	4413      	add	r3, r2
 80076e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	68ba      	ldr	r2, [r7, #8]
 80076e8:	0151      	lsls	r1, r2, #5
 80076ea:	68fa      	ldr	r2, [r7, #12]
 80076ec:	440a      	add	r2, r1
 80076ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80076f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80076f6:	6013      	str	r3, [r2, #0]
 80076f8:	e027      	b.n	800774a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	015a      	lsls	r2, r3, #5
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	4413      	add	r3, r2
 8007702:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	68ba      	ldr	r2, [r7, #8]
 800770a:	0151      	lsls	r1, r2, #5
 800770c:	68fa      	ldr	r2, [r7, #12]
 800770e:	440a      	add	r2, r1
 8007710:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007714:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007718:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	791b      	ldrb	r3, [r3, #4]
 800771e:	2b03      	cmp	r3, #3
 8007720:	d003      	beq.n	800772a <USB_EPClearStall+0x9e>
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	791b      	ldrb	r3, [r3, #4]
 8007726:	2b02      	cmp	r3, #2
 8007728:	d10f      	bne.n	800774a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	015a      	lsls	r2, r3, #5
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	4413      	add	r3, r2
 8007732:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	68ba      	ldr	r2, [r7, #8]
 800773a:	0151      	lsls	r1, r2, #5
 800773c:	68fa      	ldr	r2, [r7, #12]
 800773e:	440a      	add	r2, r1
 8007740:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007744:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007748:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800774a:	2300      	movs	r3, #0
}
 800774c:	4618      	mov	r0, r3
 800774e:	3714      	adds	r7, #20
 8007750:	46bd      	mov	sp, r7
 8007752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007756:	4770      	bx	lr

08007758 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007758:	b480      	push	{r7}
 800775a:	b085      	sub	sp, #20
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
 8007760:	460b      	mov	r3, r1
 8007762:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	68fa      	ldr	r2, [r7, #12]
 8007772:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007776:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800777a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007782:	681a      	ldr	r2, [r3, #0]
 8007784:	78fb      	ldrb	r3, [r7, #3]
 8007786:	011b      	lsls	r3, r3, #4
 8007788:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800778c:	68f9      	ldr	r1, [r7, #12]
 800778e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007792:	4313      	orrs	r3, r2
 8007794:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007796:	2300      	movs	r3, #0
}
 8007798:	4618      	mov	r0, r3
 800779a:	3714      	adds	r7, #20
 800779c:	46bd      	mov	sp, r7
 800779e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a2:	4770      	bx	lr

080077a4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80077a4:	b480      	push	{r7}
 80077a6:	b085      	sub	sp, #20
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	68fa      	ldr	r2, [r7, #12]
 80077ba:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80077be:	f023 0303 	bic.w	r3, r3, #3
 80077c2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077ca:	685b      	ldr	r3, [r3, #4]
 80077cc:	68fa      	ldr	r2, [r7, #12]
 80077ce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80077d2:	f023 0302 	bic.w	r3, r3, #2
 80077d6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80077d8:	2300      	movs	r3, #0
}
 80077da:	4618      	mov	r0, r3
 80077dc:	3714      	adds	r7, #20
 80077de:	46bd      	mov	sp, r7
 80077e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e4:	4770      	bx	lr

080077e6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80077e6:	b480      	push	{r7}
 80077e8:	b085      	sub	sp, #20
 80077ea:	af00      	add	r7, sp, #0
 80077ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	68fa      	ldr	r2, [r7, #12]
 80077fc:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007800:	f023 0303 	bic.w	r3, r3, #3
 8007804:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	68fa      	ldr	r2, [r7, #12]
 8007810:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007814:	f043 0302 	orr.w	r3, r3, #2
 8007818:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800781a:	2300      	movs	r3, #0
}
 800781c:	4618      	mov	r0, r3
 800781e:	3714      	adds	r7, #20
 8007820:	46bd      	mov	sp, r7
 8007822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007826:	4770      	bx	lr

08007828 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007828:	b480      	push	{r7}
 800782a:	b085      	sub	sp, #20
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	695b      	ldr	r3, [r3, #20]
 8007834:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	699b      	ldr	r3, [r3, #24]
 800783a:	68fa      	ldr	r2, [r7, #12]
 800783c:	4013      	ands	r3, r2
 800783e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007840:	68fb      	ldr	r3, [r7, #12]
}
 8007842:	4618      	mov	r0, r3
 8007844:	3714      	adds	r7, #20
 8007846:	46bd      	mov	sp, r7
 8007848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784c:	4770      	bx	lr

0800784e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800784e:	b480      	push	{r7}
 8007850:	b085      	sub	sp, #20
 8007852:	af00      	add	r7, sp, #0
 8007854:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007860:	699b      	ldr	r3, [r3, #24]
 8007862:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800786a:	69db      	ldr	r3, [r3, #28]
 800786c:	68ba      	ldr	r2, [r7, #8]
 800786e:	4013      	ands	r3, r2
 8007870:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	0c1b      	lsrs	r3, r3, #16
}
 8007876:	4618      	mov	r0, r3
 8007878:	3714      	adds	r7, #20
 800787a:	46bd      	mov	sp, r7
 800787c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007880:	4770      	bx	lr

08007882 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007882:	b480      	push	{r7}
 8007884:	b085      	sub	sp, #20
 8007886:	af00      	add	r7, sp, #0
 8007888:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007894:	699b      	ldr	r3, [r3, #24]
 8007896:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800789e:	69db      	ldr	r3, [r3, #28]
 80078a0:	68ba      	ldr	r2, [r7, #8]
 80078a2:	4013      	ands	r3, r2
 80078a4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	b29b      	uxth	r3, r3
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3714      	adds	r7, #20
 80078ae:	46bd      	mov	sp, r7
 80078b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b4:	4770      	bx	lr

080078b6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80078b6:	b480      	push	{r7}
 80078b8:	b085      	sub	sp, #20
 80078ba:	af00      	add	r7, sp, #0
 80078bc:	6078      	str	r0, [r7, #4]
 80078be:	460b      	mov	r3, r1
 80078c0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80078c6:	78fb      	ldrb	r3, [r7, #3]
 80078c8:	015a      	lsls	r2, r3, #5
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	4413      	add	r3, r2
 80078ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078d2:	689b      	ldr	r3, [r3, #8]
 80078d4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078dc:	695b      	ldr	r3, [r3, #20]
 80078de:	68ba      	ldr	r2, [r7, #8]
 80078e0:	4013      	ands	r3, r2
 80078e2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80078e4:	68bb      	ldr	r3, [r7, #8]
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	3714      	adds	r7, #20
 80078ea:	46bd      	mov	sp, r7
 80078ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f0:	4770      	bx	lr

080078f2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80078f2:	b480      	push	{r7}
 80078f4:	b087      	sub	sp, #28
 80078f6:	af00      	add	r7, sp, #0
 80078f8:	6078      	str	r0, [r7, #4]
 80078fa:	460b      	mov	r3, r1
 80078fc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007908:	691b      	ldr	r3, [r3, #16]
 800790a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800790c:	697b      	ldr	r3, [r7, #20]
 800790e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007912:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007914:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007916:	78fb      	ldrb	r3, [r7, #3]
 8007918:	f003 030f 	and.w	r3, r3, #15
 800791c:	68fa      	ldr	r2, [r7, #12]
 800791e:	fa22 f303 	lsr.w	r3, r2, r3
 8007922:	01db      	lsls	r3, r3, #7
 8007924:	b2db      	uxtb	r3, r3
 8007926:	693a      	ldr	r2, [r7, #16]
 8007928:	4313      	orrs	r3, r2
 800792a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800792c:	78fb      	ldrb	r3, [r7, #3]
 800792e:	015a      	lsls	r2, r3, #5
 8007930:	697b      	ldr	r3, [r7, #20]
 8007932:	4413      	add	r3, r2
 8007934:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007938:	689b      	ldr	r3, [r3, #8]
 800793a:	693a      	ldr	r2, [r7, #16]
 800793c:	4013      	ands	r3, r2
 800793e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007940:	68bb      	ldr	r3, [r7, #8]
}
 8007942:	4618      	mov	r0, r3
 8007944:	371c      	adds	r7, #28
 8007946:	46bd      	mov	sp, r7
 8007948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794c:	4770      	bx	lr

0800794e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800794e:	b480      	push	{r7}
 8007950:	b083      	sub	sp, #12
 8007952:	af00      	add	r7, sp, #0
 8007954:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	695b      	ldr	r3, [r3, #20]
 800795a:	f003 0301 	and.w	r3, r3, #1
}
 800795e:	4618      	mov	r0, r3
 8007960:	370c      	adds	r7, #12
 8007962:	46bd      	mov	sp, r7
 8007964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007968:	4770      	bx	lr

0800796a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800796a:	b480      	push	{r7}
 800796c:	b085      	sub	sp, #20
 800796e:	af00      	add	r7, sp, #0
 8007970:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	68fa      	ldr	r2, [r7, #12]
 8007980:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007984:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007988:	f023 0307 	bic.w	r3, r3, #7
 800798c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007994:	685b      	ldr	r3, [r3, #4]
 8007996:	68fa      	ldr	r2, [r7, #12]
 8007998:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800799c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80079a0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80079a2:	2300      	movs	r3, #0
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	3714      	adds	r7, #20
 80079a8:	46bd      	mov	sp, r7
 80079aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ae:	4770      	bx	lr

080079b0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80079b0:	b480      	push	{r7}
 80079b2:	b087      	sub	sp, #28
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	60f8      	str	r0, [r7, #12]
 80079b8:	460b      	mov	r3, r1
 80079ba:	607a      	str	r2, [r7, #4]
 80079bc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	333c      	adds	r3, #60	@ 0x3c
 80079c6:	3304      	adds	r3, #4
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80079cc:	693b      	ldr	r3, [r7, #16]
 80079ce:	4a26      	ldr	r2, [pc, #152]	@ (8007a68 <USB_EP0_OutStart+0xb8>)
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d90a      	bls.n	80079ea <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80079e0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80079e4:	d101      	bne.n	80079ea <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80079e6:	2300      	movs	r3, #0
 80079e8:	e037      	b.n	8007a5a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80079ea:	697b      	ldr	r3, [r7, #20]
 80079ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079f0:	461a      	mov	r2, r3
 80079f2:	2300      	movs	r3, #0
 80079f4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079fc:	691b      	ldr	r3, [r3, #16]
 80079fe:	697a      	ldr	r2, [r7, #20]
 8007a00:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a04:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007a08:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007a0a:	697b      	ldr	r3, [r7, #20]
 8007a0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a10:	691b      	ldr	r3, [r3, #16]
 8007a12:	697a      	ldr	r2, [r7, #20]
 8007a14:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a18:	f043 0318 	orr.w	r3, r3, #24
 8007a1c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a24:	691b      	ldr	r3, [r3, #16]
 8007a26:	697a      	ldr	r2, [r7, #20]
 8007a28:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a2c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8007a30:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007a32:	7afb      	ldrb	r3, [r7, #11]
 8007a34:	2b01      	cmp	r3, #1
 8007a36:	d10f      	bne.n	8007a58 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007a38:	697b      	ldr	r3, [r7, #20]
 8007a3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a3e:	461a      	mov	r2, r3
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	697a      	ldr	r2, [r7, #20]
 8007a4e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a52:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8007a56:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007a58:	2300      	movs	r3, #0
}
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	371c      	adds	r7, #28
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a64:	4770      	bx	lr
 8007a66:	bf00      	nop
 8007a68:	4f54300a 	.word	0x4f54300a

08007a6c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b085      	sub	sp, #20
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007a74:	2300      	movs	r3, #0
 8007a76:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	3301      	adds	r3, #1
 8007a7c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007a84:	d901      	bls.n	8007a8a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007a86:	2303      	movs	r3, #3
 8007a88:	e01b      	b.n	8007ac2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	691b      	ldr	r3, [r3, #16]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	daf2      	bge.n	8007a78 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007a92:	2300      	movs	r3, #0
 8007a94:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	691b      	ldr	r3, [r3, #16]
 8007a9a:	f043 0201 	orr.w	r2, r3, #1
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	3301      	adds	r3, #1
 8007aa6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007aae:	d901      	bls.n	8007ab4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007ab0:	2303      	movs	r3, #3
 8007ab2:	e006      	b.n	8007ac2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	691b      	ldr	r3, [r3, #16]
 8007ab8:	f003 0301 	and.w	r3, r3, #1
 8007abc:	2b01      	cmp	r3, #1
 8007abe:	d0f0      	beq.n	8007aa2 <USB_CoreReset+0x36>

  return HAL_OK;
 8007ac0:	2300      	movs	r3, #0
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3714      	adds	r7, #20
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007acc:	4770      	bx	lr
	...

08007ad0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b084      	sub	sp, #16
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
 8007ad8:	460b      	mov	r3, r1
 8007ada:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007adc:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8007ae0:	f002 fcac 	bl	800a43c <USBD_static_malloc>
 8007ae4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d109      	bne.n	8007b00 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	32b0      	adds	r2, #176	@ 0xb0
 8007af6:	2100      	movs	r1, #0
 8007af8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007afc:	2302      	movs	r3, #2
 8007afe:	e0d4      	b.n	8007caa <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007b00:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8007b04:	2100      	movs	r1, #0
 8007b06:	68f8      	ldr	r0, [r7, #12]
 8007b08:	f003 fa59 	bl	800afbe <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	32b0      	adds	r2, #176	@ 0xb0
 8007b16:	68f9      	ldr	r1, [r7, #12]
 8007b18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	32b0      	adds	r2, #176	@ 0xb0
 8007b26:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	7c1b      	ldrb	r3, [r3, #16]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d138      	bne.n	8007baa <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007b38:	4b5e      	ldr	r3, [pc, #376]	@ (8007cb4 <USBD_CDC_Init+0x1e4>)
 8007b3a:	7819      	ldrb	r1, [r3, #0]
 8007b3c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007b40:	2202      	movs	r2, #2
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f002 fb57 	bl	800a1f6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007b48:	4b5a      	ldr	r3, [pc, #360]	@ (8007cb4 <USBD_CDC_Init+0x1e4>)
 8007b4a:	781b      	ldrb	r3, [r3, #0]
 8007b4c:	f003 020f 	and.w	r2, r3, #15
 8007b50:	6879      	ldr	r1, [r7, #4]
 8007b52:	4613      	mov	r3, r2
 8007b54:	009b      	lsls	r3, r3, #2
 8007b56:	4413      	add	r3, r2
 8007b58:	009b      	lsls	r3, r3, #2
 8007b5a:	440b      	add	r3, r1
 8007b5c:	3324      	adds	r3, #36	@ 0x24
 8007b5e:	2201      	movs	r2, #1
 8007b60:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007b62:	4b55      	ldr	r3, [pc, #340]	@ (8007cb8 <USBD_CDC_Init+0x1e8>)
 8007b64:	7819      	ldrb	r1, [r3, #0]
 8007b66:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007b6a:	2202      	movs	r2, #2
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f002 fb42 	bl	800a1f6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007b72:	4b51      	ldr	r3, [pc, #324]	@ (8007cb8 <USBD_CDC_Init+0x1e8>)
 8007b74:	781b      	ldrb	r3, [r3, #0]
 8007b76:	f003 020f 	and.w	r2, r3, #15
 8007b7a:	6879      	ldr	r1, [r7, #4]
 8007b7c:	4613      	mov	r3, r2
 8007b7e:	009b      	lsls	r3, r3, #2
 8007b80:	4413      	add	r3, r2
 8007b82:	009b      	lsls	r3, r3, #2
 8007b84:	440b      	add	r3, r1
 8007b86:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007b8e:	4b4b      	ldr	r3, [pc, #300]	@ (8007cbc <USBD_CDC_Init+0x1ec>)
 8007b90:	781b      	ldrb	r3, [r3, #0]
 8007b92:	f003 020f 	and.w	r2, r3, #15
 8007b96:	6879      	ldr	r1, [r7, #4]
 8007b98:	4613      	mov	r3, r2
 8007b9a:	009b      	lsls	r3, r3, #2
 8007b9c:	4413      	add	r3, r2
 8007b9e:	009b      	lsls	r3, r3, #2
 8007ba0:	440b      	add	r3, r1
 8007ba2:	3326      	adds	r3, #38	@ 0x26
 8007ba4:	2210      	movs	r2, #16
 8007ba6:	801a      	strh	r2, [r3, #0]
 8007ba8:	e035      	b.n	8007c16 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007baa:	4b42      	ldr	r3, [pc, #264]	@ (8007cb4 <USBD_CDC_Init+0x1e4>)
 8007bac:	7819      	ldrb	r1, [r3, #0]
 8007bae:	2340      	movs	r3, #64	@ 0x40
 8007bb0:	2202      	movs	r2, #2
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f002 fb1f 	bl	800a1f6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007bb8:	4b3e      	ldr	r3, [pc, #248]	@ (8007cb4 <USBD_CDC_Init+0x1e4>)
 8007bba:	781b      	ldrb	r3, [r3, #0]
 8007bbc:	f003 020f 	and.w	r2, r3, #15
 8007bc0:	6879      	ldr	r1, [r7, #4]
 8007bc2:	4613      	mov	r3, r2
 8007bc4:	009b      	lsls	r3, r3, #2
 8007bc6:	4413      	add	r3, r2
 8007bc8:	009b      	lsls	r3, r3, #2
 8007bca:	440b      	add	r3, r1
 8007bcc:	3324      	adds	r3, #36	@ 0x24
 8007bce:	2201      	movs	r2, #1
 8007bd0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007bd2:	4b39      	ldr	r3, [pc, #228]	@ (8007cb8 <USBD_CDC_Init+0x1e8>)
 8007bd4:	7819      	ldrb	r1, [r3, #0]
 8007bd6:	2340      	movs	r3, #64	@ 0x40
 8007bd8:	2202      	movs	r2, #2
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f002 fb0b 	bl	800a1f6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007be0:	4b35      	ldr	r3, [pc, #212]	@ (8007cb8 <USBD_CDC_Init+0x1e8>)
 8007be2:	781b      	ldrb	r3, [r3, #0]
 8007be4:	f003 020f 	and.w	r2, r3, #15
 8007be8:	6879      	ldr	r1, [r7, #4]
 8007bea:	4613      	mov	r3, r2
 8007bec:	009b      	lsls	r3, r3, #2
 8007bee:	4413      	add	r3, r2
 8007bf0:	009b      	lsls	r3, r3, #2
 8007bf2:	440b      	add	r3, r1
 8007bf4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007bf8:	2201      	movs	r2, #1
 8007bfa:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007bfc:	4b2f      	ldr	r3, [pc, #188]	@ (8007cbc <USBD_CDC_Init+0x1ec>)
 8007bfe:	781b      	ldrb	r3, [r3, #0]
 8007c00:	f003 020f 	and.w	r2, r3, #15
 8007c04:	6879      	ldr	r1, [r7, #4]
 8007c06:	4613      	mov	r3, r2
 8007c08:	009b      	lsls	r3, r3, #2
 8007c0a:	4413      	add	r3, r2
 8007c0c:	009b      	lsls	r3, r3, #2
 8007c0e:	440b      	add	r3, r1
 8007c10:	3326      	adds	r3, #38	@ 0x26
 8007c12:	2210      	movs	r2, #16
 8007c14:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007c16:	4b29      	ldr	r3, [pc, #164]	@ (8007cbc <USBD_CDC_Init+0x1ec>)
 8007c18:	7819      	ldrb	r1, [r3, #0]
 8007c1a:	2308      	movs	r3, #8
 8007c1c:	2203      	movs	r2, #3
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f002 fae9 	bl	800a1f6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007c24:	4b25      	ldr	r3, [pc, #148]	@ (8007cbc <USBD_CDC_Init+0x1ec>)
 8007c26:	781b      	ldrb	r3, [r3, #0]
 8007c28:	f003 020f 	and.w	r2, r3, #15
 8007c2c:	6879      	ldr	r1, [r7, #4]
 8007c2e:	4613      	mov	r3, r2
 8007c30:	009b      	lsls	r3, r3, #2
 8007c32:	4413      	add	r3, r2
 8007c34:	009b      	lsls	r3, r3, #2
 8007c36:	440b      	add	r3, r1
 8007c38:	3324      	adds	r3, #36	@ 0x24
 8007c3a:	2201      	movs	r2, #1
 8007c3c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	2200      	movs	r2, #0
 8007c42:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007c4c:	687a      	ldr	r2, [r7, #4]
 8007c4e:	33b0      	adds	r3, #176	@ 0xb0
 8007c50:	009b      	lsls	r3, r3, #2
 8007c52:	4413      	add	r3, r2
 8007c54:	685b      	ldr	r3, [r3, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	2200      	movs	r2, #0
 8007c66:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d101      	bne.n	8007c78 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007c74:	2302      	movs	r3, #2
 8007c76:	e018      	b.n	8007caa <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	7c1b      	ldrb	r3, [r3, #16]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d10a      	bne.n	8007c96 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007c80:	4b0d      	ldr	r3, [pc, #52]	@ (8007cb8 <USBD_CDC_Init+0x1e8>)
 8007c82:	7819      	ldrb	r1, [r3, #0]
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007c8a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f002 fba0 	bl	800a3d4 <USBD_LL_PrepareReceive>
 8007c94:	e008      	b.n	8007ca8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007c96:	4b08      	ldr	r3, [pc, #32]	@ (8007cb8 <USBD_CDC_Init+0x1e8>)
 8007c98:	7819      	ldrb	r1, [r3, #0]
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007ca0:	2340      	movs	r3, #64	@ 0x40
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f002 fb96 	bl	800a3d4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007ca8:	2300      	movs	r3, #0
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3710      	adds	r7, #16
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}
 8007cb2:	bf00      	nop
 8007cb4:	20000093 	.word	0x20000093
 8007cb8:	20000094 	.word	0x20000094
 8007cbc:	20000095 	.word	0x20000095

08007cc0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b082      	sub	sp, #8
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
 8007cc8:	460b      	mov	r3, r1
 8007cca:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007ccc:	4b3a      	ldr	r3, [pc, #232]	@ (8007db8 <USBD_CDC_DeInit+0xf8>)
 8007cce:	781b      	ldrb	r3, [r3, #0]
 8007cd0:	4619      	mov	r1, r3
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f002 fab5 	bl	800a242 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007cd8:	4b37      	ldr	r3, [pc, #220]	@ (8007db8 <USBD_CDC_DeInit+0xf8>)
 8007cda:	781b      	ldrb	r3, [r3, #0]
 8007cdc:	f003 020f 	and.w	r2, r3, #15
 8007ce0:	6879      	ldr	r1, [r7, #4]
 8007ce2:	4613      	mov	r3, r2
 8007ce4:	009b      	lsls	r3, r3, #2
 8007ce6:	4413      	add	r3, r2
 8007ce8:	009b      	lsls	r3, r3, #2
 8007cea:	440b      	add	r3, r1
 8007cec:	3324      	adds	r3, #36	@ 0x24
 8007cee:	2200      	movs	r2, #0
 8007cf0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007cf2:	4b32      	ldr	r3, [pc, #200]	@ (8007dbc <USBD_CDC_DeInit+0xfc>)
 8007cf4:	781b      	ldrb	r3, [r3, #0]
 8007cf6:	4619      	mov	r1, r3
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f002 faa2 	bl	800a242 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007cfe:	4b2f      	ldr	r3, [pc, #188]	@ (8007dbc <USBD_CDC_DeInit+0xfc>)
 8007d00:	781b      	ldrb	r3, [r3, #0]
 8007d02:	f003 020f 	and.w	r2, r3, #15
 8007d06:	6879      	ldr	r1, [r7, #4]
 8007d08:	4613      	mov	r3, r2
 8007d0a:	009b      	lsls	r3, r3, #2
 8007d0c:	4413      	add	r3, r2
 8007d0e:	009b      	lsls	r3, r3, #2
 8007d10:	440b      	add	r3, r1
 8007d12:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007d16:	2200      	movs	r2, #0
 8007d18:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007d1a:	4b29      	ldr	r3, [pc, #164]	@ (8007dc0 <USBD_CDC_DeInit+0x100>)
 8007d1c:	781b      	ldrb	r3, [r3, #0]
 8007d1e:	4619      	mov	r1, r3
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f002 fa8e 	bl	800a242 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007d26:	4b26      	ldr	r3, [pc, #152]	@ (8007dc0 <USBD_CDC_DeInit+0x100>)
 8007d28:	781b      	ldrb	r3, [r3, #0]
 8007d2a:	f003 020f 	and.w	r2, r3, #15
 8007d2e:	6879      	ldr	r1, [r7, #4]
 8007d30:	4613      	mov	r3, r2
 8007d32:	009b      	lsls	r3, r3, #2
 8007d34:	4413      	add	r3, r2
 8007d36:	009b      	lsls	r3, r3, #2
 8007d38:	440b      	add	r3, r1
 8007d3a:	3324      	adds	r3, #36	@ 0x24
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007d40:	4b1f      	ldr	r3, [pc, #124]	@ (8007dc0 <USBD_CDC_DeInit+0x100>)
 8007d42:	781b      	ldrb	r3, [r3, #0]
 8007d44:	f003 020f 	and.w	r2, r3, #15
 8007d48:	6879      	ldr	r1, [r7, #4]
 8007d4a:	4613      	mov	r3, r2
 8007d4c:	009b      	lsls	r3, r3, #2
 8007d4e:	4413      	add	r3, r2
 8007d50:	009b      	lsls	r3, r3, #2
 8007d52:	440b      	add	r3, r1
 8007d54:	3326      	adds	r3, #38	@ 0x26
 8007d56:	2200      	movs	r2, #0
 8007d58:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	32b0      	adds	r2, #176	@ 0xb0
 8007d64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d01f      	beq.n	8007dac <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007d72:	687a      	ldr	r2, [r7, #4]
 8007d74:	33b0      	adds	r3, #176	@ 0xb0
 8007d76:	009b      	lsls	r3, r3, #2
 8007d78:	4413      	add	r3, r2
 8007d7a:	685b      	ldr	r3, [r3, #4]
 8007d7c:	685b      	ldr	r3, [r3, #4]
 8007d7e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	32b0      	adds	r2, #176	@ 0xb0
 8007d8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d8e:	4618      	mov	r0, r3
 8007d90:	f002 fb62 	bl	800a458 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	32b0      	adds	r2, #176	@ 0xb0
 8007d9e:	2100      	movs	r1, #0
 8007da0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2200      	movs	r2, #0
 8007da8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007dac:	2300      	movs	r3, #0
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	3708      	adds	r7, #8
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}
 8007db6:	bf00      	nop
 8007db8:	20000093 	.word	0x20000093
 8007dbc:	20000094 	.word	0x20000094
 8007dc0:	20000095 	.word	0x20000095

08007dc4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b086      	sub	sp, #24
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
 8007dcc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	32b0      	adds	r2, #176	@ 0xb0
 8007dd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ddc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007dde:	2300      	movs	r3, #0
 8007de0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007de2:	2300      	movs	r3, #0
 8007de4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007de6:	2300      	movs	r3, #0
 8007de8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d101      	bne.n	8007df4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007df0:	2303      	movs	r3, #3
 8007df2:	e0bf      	b.n	8007f74 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	781b      	ldrb	r3, [r3, #0]
 8007df8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d050      	beq.n	8007ea2 <USBD_CDC_Setup+0xde>
 8007e00:	2b20      	cmp	r3, #32
 8007e02:	f040 80af 	bne.w	8007f64 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	88db      	ldrh	r3, [r3, #6]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d03a      	beq.n	8007e84 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	781b      	ldrb	r3, [r3, #0]
 8007e12:	b25b      	sxtb	r3, r3
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	da1b      	bge.n	8007e50 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007e1e:	687a      	ldr	r2, [r7, #4]
 8007e20:	33b0      	adds	r3, #176	@ 0xb0
 8007e22:	009b      	lsls	r3, r3, #2
 8007e24:	4413      	add	r3, r2
 8007e26:	685b      	ldr	r3, [r3, #4]
 8007e28:	689b      	ldr	r3, [r3, #8]
 8007e2a:	683a      	ldr	r2, [r7, #0]
 8007e2c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007e2e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007e30:	683a      	ldr	r2, [r7, #0]
 8007e32:	88d2      	ldrh	r2, [r2, #6]
 8007e34:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	88db      	ldrh	r3, [r3, #6]
 8007e3a:	2b07      	cmp	r3, #7
 8007e3c:	bf28      	it	cs
 8007e3e:	2307      	movcs	r3, #7
 8007e40:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007e42:	693b      	ldr	r3, [r7, #16]
 8007e44:	89fa      	ldrh	r2, [r7, #14]
 8007e46:	4619      	mov	r1, r3
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f001 fd93 	bl	8009974 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007e4e:	e090      	b.n	8007f72 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	785a      	ldrb	r2, [r3, #1]
 8007e54:	693b      	ldr	r3, [r7, #16]
 8007e56:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	88db      	ldrh	r3, [r3, #6]
 8007e5e:	2b3f      	cmp	r3, #63	@ 0x3f
 8007e60:	d803      	bhi.n	8007e6a <USBD_CDC_Setup+0xa6>
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	88db      	ldrh	r3, [r3, #6]
 8007e66:	b2da      	uxtb	r2, r3
 8007e68:	e000      	b.n	8007e6c <USBD_CDC_Setup+0xa8>
 8007e6a:	2240      	movs	r2, #64	@ 0x40
 8007e6c:	693b      	ldr	r3, [r7, #16]
 8007e6e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007e72:	6939      	ldr	r1, [r7, #16]
 8007e74:	693b      	ldr	r3, [r7, #16]
 8007e76:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8007e7a:	461a      	mov	r2, r3
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f001 fda5 	bl	80099cc <USBD_CtlPrepareRx>
      break;
 8007e82:	e076      	b.n	8007f72 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007e8a:	687a      	ldr	r2, [r7, #4]
 8007e8c:	33b0      	adds	r3, #176	@ 0xb0
 8007e8e:	009b      	lsls	r3, r3, #2
 8007e90:	4413      	add	r3, r2
 8007e92:	685b      	ldr	r3, [r3, #4]
 8007e94:	689b      	ldr	r3, [r3, #8]
 8007e96:	683a      	ldr	r2, [r7, #0]
 8007e98:	7850      	ldrb	r0, [r2, #1]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	6839      	ldr	r1, [r7, #0]
 8007e9e:	4798      	blx	r3
      break;
 8007ea0:	e067      	b.n	8007f72 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	785b      	ldrb	r3, [r3, #1]
 8007ea6:	2b0b      	cmp	r3, #11
 8007ea8:	d851      	bhi.n	8007f4e <USBD_CDC_Setup+0x18a>
 8007eaa:	a201      	add	r2, pc, #4	@ (adr r2, 8007eb0 <USBD_CDC_Setup+0xec>)
 8007eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eb0:	08007ee1 	.word	0x08007ee1
 8007eb4:	08007f5d 	.word	0x08007f5d
 8007eb8:	08007f4f 	.word	0x08007f4f
 8007ebc:	08007f4f 	.word	0x08007f4f
 8007ec0:	08007f4f 	.word	0x08007f4f
 8007ec4:	08007f4f 	.word	0x08007f4f
 8007ec8:	08007f4f 	.word	0x08007f4f
 8007ecc:	08007f4f 	.word	0x08007f4f
 8007ed0:	08007f4f 	.word	0x08007f4f
 8007ed4:	08007f4f 	.word	0x08007f4f
 8007ed8:	08007f0b 	.word	0x08007f0b
 8007edc:	08007f35 	.word	0x08007f35
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ee6:	b2db      	uxtb	r3, r3
 8007ee8:	2b03      	cmp	r3, #3
 8007eea:	d107      	bne.n	8007efc <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007eec:	f107 030a 	add.w	r3, r7, #10
 8007ef0:	2202      	movs	r2, #2
 8007ef2:	4619      	mov	r1, r3
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	f001 fd3d 	bl	8009974 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007efa:	e032      	b.n	8007f62 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007efc:	6839      	ldr	r1, [r7, #0]
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f001 fcbb 	bl	800987a <USBD_CtlError>
            ret = USBD_FAIL;
 8007f04:	2303      	movs	r3, #3
 8007f06:	75fb      	strb	r3, [r7, #23]
          break;
 8007f08:	e02b      	b.n	8007f62 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f10:	b2db      	uxtb	r3, r3
 8007f12:	2b03      	cmp	r3, #3
 8007f14:	d107      	bne.n	8007f26 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007f16:	f107 030d 	add.w	r3, r7, #13
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	4619      	mov	r1, r3
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f001 fd28 	bl	8009974 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007f24:	e01d      	b.n	8007f62 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007f26:	6839      	ldr	r1, [r7, #0]
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f001 fca6 	bl	800987a <USBD_CtlError>
            ret = USBD_FAIL;
 8007f2e:	2303      	movs	r3, #3
 8007f30:	75fb      	strb	r3, [r7, #23]
          break;
 8007f32:	e016      	b.n	8007f62 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f3a:	b2db      	uxtb	r3, r3
 8007f3c:	2b03      	cmp	r3, #3
 8007f3e:	d00f      	beq.n	8007f60 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007f40:	6839      	ldr	r1, [r7, #0]
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f001 fc99 	bl	800987a <USBD_CtlError>
            ret = USBD_FAIL;
 8007f48:	2303      	movs	r3, #3
 8007f4a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007f4c:	e008      	b.n	8007f60 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007f4e:	6839      	ldr	r1, [r7, #0]
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f001 fc92 	bl	800987a <USBD_CtlError>
          ret = USBD_FAIL;
 8007f56:	2303      	movs	r3, #3
 8007f58:	75fb      	strb	r3, [r7, #23]
          break;
 8007f5a:	e002      	b.n	8007f62 <USBD_CDC_Setup+0x19e>
          break;
 8007f5c:	bf00      	nop
 8007f5e:	e008      	b.n	8007f72 <USBD_CDC_Setup+0x1ae>
          break;
 8007f60:	bf00      	nop
      }
      break;
 8007f62:	e006      	b.n	8007f72 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007f64:	6839      	ldr	r1, [r7, #0]
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f001 fc87 	bl	800987a <USBD_CtlError>
      ret = USBD_FAIL;
 8007f6c:	2303      	movs	r3, #3
 8007f6e:	75fb      	strb	r3, [r7, #23]
      break;
 8007f70:	bf00      	nop
  }

  return (uint8_t)ret;
 8007f72:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f74:	4618      	mov	r0, r3
 8007f76:	3718      	adds	r7, #24
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bd80      	pop	{r7, pc}

08007f7c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b084      	sub	sp, #16
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
 8007f84:	460b      	mov	r3, r1
 8007f86:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007f8e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	32b0      	adds	r2, #176	@ 0xb0
 8007f9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d101      	bne.n	8007fa6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007fa2:	2303      	movs	r3, #3
 8007fa4:	e065      	b.n	8008072 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	32b0      	adds	r2, #176	@ 0xb0
 8007fb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fb4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007fb6:	78fb      	ldrb	r3, [r7, #3]
 8007fb8:	f003 020f 	and.w	r2, r3, #15
 8007fbc:	6879      	ldr	r1, [r7, #4]
 8007fbe:	4613      	mov	r3, r2
 8007fc0:	009b      	lsls	r3, r3, #2
 8007fc2:	4413      	add	r3, r2
 8007fc4:	009b      	lsls	r3, r3, #2
 8007fc6:	440b      	add	r3, r1
 8007fc8:	3318      	adds	r3, #24
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d02f      	beq.n	8008030 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007fd0:	78fb      	ldrb	r3, [r7, #3]
 8007fd2:	f003 020f 	and.w	r2, r3, #15
 8007fd6:	6879      	ldr	r1, [r7, #4]
 8007fd8:	4613      	mov	r3, r2
 8007fda:	009b      	lsls	r3, r3, #2
 8007fdc:	4413      	add	r3, r2
 8007fde:	009b      	lsls	r3, r3, #2
 8007fe0:	440b      	add	r3, r1
 8007fe2:	3318      	adds	r3, #24
 8007fe4:	681a      	ldr	r2, [r3, #0]
 8007fe6:	78fb      	ldrb	r3, [r7, #3]
 8007fe8:	f003 010f 	and.w	r1, r3, #15
 8007fec:	68f8      	ldr	r0, [r7, #12]
 8007fee:	460b      	mov	r3, r1
 8007ff0:	00db      	lsls	r3, r3, #3
 8007ff2:	440b      	add	r3, r1
 8007ff4:	009b      	lsls	r3, r3, #2
 8007ff6:	4403      	add	r3, r0
 8007ff8:	331c      	adds	r3, #28
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	fbb2 f1f3 	udiv	r1, r2, r3
 8008000:	fb01 f303 	mul.w	r3, r1, r3
 8008004:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008006:	2b00      	cmp	r3, #0
 8008008:	d112      	bne.n	8008030 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800800a:	78fb      	ldrb	r3, [r7, #3]
 800800c:	f003 020f 	and.w	r2, r3, #15
 8008010:	6879      	ldr	r1, [r7, #4]
 8008012:	4613      	mov	r3, r2
 8008014:	009b      	lsls	r3, r3, #2
 8008016:	4413      	add	r3, r2
 8008018:	009b      	lsls	r3, r3, #2
 800801a:	440b      	add	r3, r1
 800801c:	3318      	adds	r3, #24
 800801e:	2200      	movs	r2, #0
 8008020:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008022:	78f9      	ldrb	r1, [r7, #3]
 8008024:	2300      	movs	r3, #0
 8008026:	2200      	movs	r2, #0
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	f002 f9b2 	bl	800a392 <USBD_LL_Transmit>
 800802e:	e01f      	b.n	8008070 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	2200      	movs	r2, #0
 8008034:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800803e:	687a      	ldr	r2, [r7, #4]
 8008040:	33b0      	adds	r3, #176	@ 0xb0
 8008042:	009b      	lsls	r3, r3, #2
 8008044:	4413      	add	r3, r2
 8008046:	685b      	ldr	r3, [r3, #4]
 8008048:	691b      	ldr	r3, [r3, #16]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d010      	beq.n	8008070 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008054:	687a      	ldr	r2, [r7, #4]
 8008056:	33b0      	adds	r3, #176	@ 0xb0
 8008058:	009b      	lsls	r3, r3, #2
 800805a:	4413      	add	r3, r2
 800805c:	685b      	ldr	r3, [r3, #4]
 800805e:	691b      	ldr	r3, [r3, #16]
 8008060:	68ba      	ldr	r2, [r7, #8]
 8008062:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8008066:	68ba      	ldr	r2, [r7, #8]
 8008068:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800806c:	78fa      	ldrb	r2, [r7, #3]
 800806e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008070:	2300      	movs	r3, #0
}
 8008072:	4618      	mov	r0, r3
 8008074:	3710      	adds	r7, #16
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}

0800807a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800807a:	b580      	push	{r7, lr}
 800807c:	b084      	sub	sp, #16
 800807e:	af00      	add	r7, sp, #0
 8008080:	6078      	str	r0, [r7, #4]
 8008082:	460b      	mov	r3, r1
 8008084:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	32b0      	adds	r2, #176	@ 0xb0
 8008090:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008094:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	32b0      	adds	r2, #176	@ 0xb0
 80080a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d101      	bne.n	80080ac <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80080a8:	2303      	movs	r3, #3
 80080aa:	e01a      	b.n	80080e2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80080ac:	78fb      	ldrb	r3, [r7, #3]
 80080ae:	4619      	mov	r1, r3
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f002 f9b0 	bl	800a416 <USBD_LL_GetRxDataSize>
 80080b6:	4602      	mov	r2, r0
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80080c4:	687a      	ldr	r2, [r7, #4]
 80080c6:	33b0      	adds	r3, #176	@ 0xb0
 80080c8:	009b      	lsls	r3, r3, #2
 80080ca:	4413      	add	r3, r2
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	68db      	ldr	r3, [r3, #12]
 80080d0:	68fa      	ldr	r2, [r7, #12]
 80080d2:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80080d6:	68fa      	ldr	r2, [r7, #12]
 80080d8:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80080dc:	4611      	mov	r1, r2
 80080de:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80080e0:	2300      	movs	r3, #0
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	3710      	adds	r7, #16
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}

080080ea <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80080ea:	b580      	push	{r7, lr}
 80080ec:	b084      	sub	sp, #16
 80080ee:	af00      	add	r7, sp, #0
 80080f0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	32b0      	adds	r2, #176	@ 0xb0
 80080fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008100:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d101      	bne.n	800810c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008108:	2303      	movs	r3, #3
 800810a:	e024      	b.n	8008156 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008112:	687a      	ldr	r2, [r7, #4]
 8008114:	33b0      	adds	r3, #176	@ 0xb0
 8008116:	009b      	lsls	r3, r3, #2
 8008118:	4413      	add	r3, r2
 800811a:	685b      	ldr	r3, [r3, #4]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d019      	beq.n	8008154 <USBD_CDC_EP0_RxReady+0x6a>
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008126:	2bff      	cmp	r3, #255	@ 0xff
 8008128:	d014      	beq.n	8008154 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008130:	687a      	ldr	r2, [r7, #4]
 8008132:	33b0      	adds	r3, #176	@ 0xb0
 8008134:	009b      	lsls	r3, r3, #2
 8008136:	4413      	add	r3, r2
 8008138:	685b      	ldr	r3, [r3, #4]
 800813a:	689b      	ldr	r3, [r3, #8]
 800813c:	68fa      	ldr	r2, [r7, #12]
 800813e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8008142:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008144:	68fa      	ldr	r2, [r7, #12]
 8008146:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800814a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	22ff      	movs	r2, #255	@ 0xff
 8008150:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8008154:	2300      	movs	r3, #0
}
 8008156:	4618      	mov	r0, r3
 8008158:	3710      	adds	r7, #16
 800815a:	46bd      	mov	sp, r7
 800815c:	bd80      	pop	{r7, pc}
	...

08008160 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b086      	sub	sp, #24
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008168:	2182      	movs	r1, #130	@ 0x82
 800816a:	4818      	ldr	r0, [pc, #96]	@ (80081cc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800816c:	f000 fd4f 	bl	8008c0e <USBD_GetEpDesc>
 8008170:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008172:	2101      	movs	r1, #1
 8008174:	4815      	ldr	r0, [pc, #84]	@ (80081cc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008176:	f000 fd4a 	bl	8008c0e <USBD_GetEpDesc>
 800817a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800817c:	2181      	movs	r1, #129	@ 0x81
 800817e:	4813      	ldr	r0, [pc, #76]	@ (80081cc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008180:	f000 fd45 	bl	8008c0e <USBD_GetEpDesc>
 8008184:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008186:	697b      	ldr	r3, [r7, #20]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d002      	beq.n	8008192 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800818c:	697b      	ldr	r3, [r7, #20]
 800818e:	2210      	movs	r2, #16
 8008190:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008192:	693b      	ldr	r3, [r7, #16]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d006      	beq.n	80081a6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008198:	693b      	ldr	r3, [r7, #16]
 800819a:	2200      	movs	r2, #0
 800819c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80081a0:	711a      	strb	r2, [r3, #4]
 80081a2:	2200      	movs	r2, #0
 80081a4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d006      	beq.n	80081ba <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	2200      	movs	r2, #0
 80081b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80081b4:	711a      	strb	r2, [r3, #4]
 80081b6:	2200      	movs	r2, #0
 80081b8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2243      	movs	r2, #67	@ 0x43
 80081be:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80081c0:	4b02      	ldr	r3, [pc, #8]	@ (80081cc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80081c2:	4618      	mov	r0, r3
 80081c4:	3718      	adds	r7, #24
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bd80      	pop	{r7, pc}
 80081ca:	bf00      	nop
 80081cc:	20000050 	.word	0x20000050

080081d0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b086      	sub	sp, #24
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80081d8:	2182      	movs	r1, #130	@ 0x82
 80081da:	4818      	ldr	r0, [pc, #96]	@ (800823c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80081dc:	f000 fd17 	bl	8008c0e <USBD_GetEpDesc>
 80081e0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80081e2:	2101      	movs	r1, #1
 80081e4:	4815      	ldr	r0, [pc, #84]	@ (800823c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80081e6:	f000 fd12 	bl	8008c0e <USBD_GetEpDesc>
 80081ea:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80081ec:	2181      	movs	r1, #129	@ 0x81
 80081ee:	4813      	ldr	r0, [pc, #76]	@ (800823c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80081f0:	f000 fd0d 	bl	8008c0e <USBD_GetEpDesc>
 80081f4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80081f6:	697b      	ldr	r3, [r7, #20]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d002      	beq.n	8008202 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80081fc:	697b      	ldr	r3, [r7, #20]
 80081fe:	2210      	movs	r2, #16
 8008200:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008202:	693b      	ldr	r3, [r7, #16]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d006      	beq.n	8008216 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008208:	693b      	ldr	r3, [r7, #16]
 800820a:	2200      	movs	r2, #0
 800820c:	711a      	strb	r2, [r3, #4]
 800820e:	2200      	movs	r2, #0
 8008210:	f042 0202 	orr.w	r2, r2, #2
 8008214:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d006      	beq.n	800822a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	2200      	movs	r2, #0
 8008220:	711a      	strb	r2, [r3, #4]
 8008222:	2200      	movs	r2, #0
 8008224:	f042 0202 	orr.w	r2, r2, #2
 8008228:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2243      	movs	r2, #67	@ 0x43
 800822e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008230:	4b02      	ldr	r3, [pc, #8]	@ (800823c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008232:	4618      	mov	r0, r3
 8008234:	3718      	adds	r7, #24
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}
 800823a:	bf00      	nop
 800823c:	20000050 	.word	0x20000050

08008240 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b086      	sub	sp, #24
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008248:	2182      	movs	r1, #130	@ 0x82
 800824a:	4818      	ldr	r0, [pc, #96]	@ (80082ac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800824c:	f000 fcdf 	bl	8008c0e <USBD_GetEpDesc>
 8008250:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008252:	2101      	movs	r1, #1
 8008254:	4815      	ldr	r0, [pc, #84]	@ (80082ac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008256:	f000 fcda 	bl	8008c0e <USBD_GetEpDesc>
 800825a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800825c:	2181      	movs	r1, #129	@ 0x81
 800825e:	4813      	ldr	r0, [pc, #76]	@ (80082ac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008260:	f000 fcd5 	bl	8008c0e <USBD_GetEpDesc>
 8008264:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008266:	697b      	ldr	r3, [r7, #20]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d002      	beq.n	8008272 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800826c:	697b      	ldr	r3, [r7, #20]
 800826e:	2210      	movs	r2, #16
 8008270:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008272:	693b      	ldr	r3, [r7, #16]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d006      	beq.n	8008286 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008278:	693b      	ldr	r3, [r7, #16]
 800827a:	2200      	movs	r2, #0
 800827c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008280:	711a      	strb	r2, [r3, #4]
 8008282:	2200      	movs	r2, #0
 8008284:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d006      	beq.n	800829a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	2200      	movs	r2, #0
 8008290:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008294:	711a      	strb	r2, [r3, #4]
 8008296:	2200      	movs	r2, #0
 8008298:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2243      	movs	r2, #67	@ 0x43
 800829e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80082a0:	4b02      	ldr	r3, [pc, #8]	@ (80082ac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	3718      	adds	r7, #24
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bd80      	pop	{r7, pc}
 80082aa:	bf00      	nop
 80082ac:	20000050 	.word	0x20000050

080082b0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80082b0:	b480      	push	{r7}
 80082b2:	b083      	sub	sp, #12
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	220a      	movs	r2, #10
 80082bc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80082be:	4b03      	ldr	r3, [pc, #12]	@ (80082cc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	370c      	adds	r7, #12
 80082c4:	46bd      	mov	sp, r7
 80082c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ca:	4770      	bx	lr
 80082cc:	2000000c 	.word	0x2000000c

080082d0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80082d0:	b480      	push	{r7}
 80082d2:	b083      	sub	sp, #12
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
 80082d8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d101      	bne.n	80082e4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80082e0:	2303      	movs	r3, #3
 80082e2:	e009      	b.n	80082f8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80082ea:	687a      	ldr	r2, [r7, #4]
 80082ec:	33b0      	adds	r3, #176	@ 0xb0
 80082ee:	009b      	lsls	r3, r3, #2
 80082f0:	4413      	add	r3, r2
 80082f2:	683a      	ldr	r2, [r7, #0]
 80082f4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80082f6:	2300      	movs	r3, #0
}
 80082f8:	4618      	mov	r0, r3
 80082fa:	370c      	adds	r7, #12
 80082fc:	46bd      	mov	sp, r7
 80082fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008302:	4770      	bx	lr

08008304 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008304:	b480      	push	{r7}
 8008306:	b087      	sub	sp, #28
 8008308:	af00      	add	r7, sp, #0
 800830a:	60f8      	str	r0, [r7, #12]
 800830c:	60b9      	str	r1, [r7, #8]
 800830e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	32b0      	adds	r2, #176	@ 0xb0
 800831a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800831e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008320:	697b      	ldr	r3, [r7, #20]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d101      	bne.n	800832a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008326:	2303      	movs	r3, #3
 8008328:	e008      	b.n	800833c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	68ba      	ldr	r2, [r7, #8]
 800832e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8008332:	697b      	ldr	r3, [r7, #20]
 8008334:	687a      	ldr	r2, [r7, #4]
 8008336:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800833a:	2300      	movs	r3, #0
}
 800833c:	4618      	mov	r0, r3
 800833e:	371c      	adds	r7, #28
 8008340:	46bd      	mov	sp, r7
 8008342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008346:	4770      	bx	lr

08008348 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008348:	b480      	push	{r7}
 800834a:	b085      	sub	sp, #20
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
 8008350:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	32b0      	adds	r2, #176	@ 0xb0
 800835c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008360:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d101      	bne.n	800836c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008368:	2303      	movs	r3, #3
 800836a:	e004      	b.n	8008376 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	683a      	ldr	r2, [r7, #0]
 8008370:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8008374:	2300      	movs	r3, #0
}
 8008376:	4618      	mov	r0, r3
 8008378:	3714      	adds	r7, #20
 800837a:	46bd      	mov	sp, r7
 800837c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008380:	4770      	bx	lr
	...

08008384 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b084      	sub	sp, #16
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	32b0      	adds	r2, #176	@ 0xb0
 8008396:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800839a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800839c:	2301      	movs	r3, #1
 800839e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d101      	bne.n	80083aa <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80083a6:	2303      	movs	r3, #3
 80083a8:	e025      	b.n	80083f6 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d11f      	bne.n	80083f4 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	2201      	movs	r2, #1
 80083b8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80083bc:	4b10      	ldr	r3, [pc, #64]	@ (8008400 <USBD_CDC_TransmitPacket+0x7c>)
 80083be:	781b      	ldrb	r3, [r3, #0]
 80083c0:	f003 020f 	and.w	r2, r3, #15
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	4613      	mov	r3, r2
 80083ce:	009b      	lsls	r3, r3, #2
 80083d0:	4413      	add	r3, r2
 80083d2:	009b      	lsls	r3, r3, #2
 80083d4:	4403      	add	r3, r0
 80083d6:	3318      	adds	r3, #24
 80083d8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80083da:	4b09      	ldr	r3, [pc, #36]	@ (8008400 <USBD_CDC_TransmitPacket+0x7c>)
 80083dc:	7819      	ldrb	r1, [r3, #0]
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f001 ffd1 	bl	800a392 <USBD_LL_Transmit>

    ret = USBD_OK;
 80083f0:	2300      	movs	r3, #0
 80083f2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80083f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	3710      	adds	r7, #16
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}
 80083fe:	bf00      	nop
 8008400:	20000093 	.word	0x20000093

08008404 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b084      	sub	sp, #16
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	32b0      	adds	r2, #176	@ 0xb0
 8008416:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800841a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	32b0      	adds	r2, #176	@ 0xb0
 8008426:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d101      	bne.n	8008432 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800842e:	2303      	movs	r3, #3
 8008430:	e018      	b.n	8008464 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	7c1b      	ldrb	r3, [r3, #16]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d10a      	bne.n	8008450 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800843a:	4b0c      	ldr	r3, [pc, #48]	@ (800846c <USBD_CDC_ReceivePacket+0x68>)
 800843c:	7819      	ldrb	r1, [r3, #0]
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008444:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f001 ffc3 	bl	800a3d4 <USBD_LL_PrepareReceive>
 800844e:	e008      	b.n	8008462 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008450:	4b06      	ldr	r3, [pc, #24]	@ (800846c <USBD_CDC_ReceivePacket+0x68>)
 8008452:	7819      	ldrb	r1, [r3, #0]
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800845a:	2340      	movs	r3, #64	@ 0x40
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f001 ffb9 	bl	800a3d4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008462:	2300      	movs	r3, #0
}
 8008464:	4618      	mov	r0, r3
 8008466:	3710      	adds	r7, #16
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}
 800846c:	20000094 	.word	0x20000094

08008470 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b086      	sub	sp, #24
 8008474:	af00      	add	r7, sp, #0
 8008476:	60f8      	str	r0, [r7, #12]
 8008478:	60b9      	str	r1, [r7, #8]
 800847a:	4613      	mov	r3, r2
 800847c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d101      	bne.n	8008488 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008484:	2303      	movs	r3, #3
 8008486:	e01f      	b.n	80084c8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	2200      	movs	r2, #0
 800848c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	2200      	movs	r2, #0
 8008494:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	2200      	movs	r2, #0
 800849c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d003      	beq.n	80084ae <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	68ba      	ldr	r2, [r7, #8]
 80084aa:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	2201      	movs	r2, #1
 80084b2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	79fa      	ldrb	r2, [r7, #7]
 80084ba:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80084bc:	68f8      	ldr	r0, [r7, #12]
 80084be:	f001 fe33 	bl	800a128 <USBD_LL_Init>
 80084c2:	4603      	mov	r3, r0
 80084c4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80084c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	3718      	adds	r7, #24
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd80      	pop	{r7, pc}

080084d0 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b084      	sub	sp, #16
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
 80084d8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80084da:	2300      	movs	r3, #0
 80084dc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d101      	bne.n	80084e8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80084e4:	2303      	movs	r3, #3
 80084e6:	e025      	b.n	8008534 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	683a      	ldr	r2, [r7, #0]
 80084ec:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	32ae      	adds	r2, #174	@ 0xae
 80084fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008500:	2b00      	cmp	r3, #0
 8008502:	d00f      	beq.n	8008524 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	32ae      	adds	r2, #174	@ 0xae
 800850e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008514:	f107 020e 	add.w	r2, r7, #14
 8008518:	4610      	mov	r0, r2
 800851a:	4798      	blx	r3
 800851c:	4602      	mov	r2, r0
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800852a:	1c5a      	adds	r2, r3, #1
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8008532:	2300      	movs	r3, #0
}
 8008534:	4618      	mov	r0, r3
 8008536:	3710      	adds	r7, #16
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}

0800853c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b082      	sub	sp, #8
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f001 fe3b 	bl	800a1c0 <USBD_LL_Start>
 800854a:	4603      	mov	r3, r0
}
 800854c:	4618      	mov	r0, r3
 800854e:	3708      	adds	r7, #8
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}

08008554 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008554:	b480      	push	{r7}
 8008556:	b083      	sub	sp, #12
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800855c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800855e:	4618      	mov	r0, r3
 8008560:	370c      	adds	r7, #12
 8008562:	46bd      	mov	sp, r7
 8008564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008568:	4770      	bx	lr

0800856a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800856a:	b580      	push	{r7, lr}
 800856c:	b084      	sub	sp, #16
 800856e:	af00      	add	r7, sp, #0
 8008570:	6078      	str	r0, [r7, #4]
 8008572:	460b      	mov	r3, r1
 8008574:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008576:	2300      	movs	r3, #0
 8008578:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008580:	2b00      	cmp	r3, #0
 8008582:	d009      	beq.n	8008598 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	78fa      	ldrb	r2, [r7, #3]
 800858e:	4611      	mov	r1, r2
 8008590:	6878      	ldr	r0, [r7, #4]
 8008592:	4798      	blx	r3
 8008594:	4603      	mov	r3, r0
 8008596:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008598:	7bfb      	ldrb	r3, [r7, #15]
}
 800859a:	4618      	mov	r0, r3
 800859c:	3710      	adds	r7, #16
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}

080085a2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80085a2:	b580      	push	{r7, lr}
 80085a4:	b084      	sub	sp, #16
 80085a6:	af00      	add	r7, sp, #0
 80085a8:	6078      	str	r0, [r7, #4]
 80085aa:	460b      	mov	r3, r1
 80085ac:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80085ae:	2300      	movs	r3, #0
 80085b0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80085b8:	685b      	ldr	r3, [r3, #4]
 80085ba:	78fa      	ldrb	r2, [r7, #3]
 80085bc:	4611      	mov	r1, r2
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	4798      	blx	r3
 80085c2:	4603      	mov	r3, r0
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d001      	beq.n	80085cc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80085c8:	2303      	movs	r3, #3
 80085ca:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80085cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80085ce:	4618      	mov	r0, r3
 80085d0:	3710      	adds	r7, #16
 80085d2:	46bd      	mov	sp, r7
 80085d4:	bd80      	pop	{r7, pc}

080085d6 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80085d6:	b580      	push	{r7, lr}
 80085d8:	b084      	sub	sp, #16
 80085da:	af00      	add	r7, sp, #0
 80085dc:	6078      	str	r0, [r7, #4]
 80085de:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80085e6:	6839      	ldr	r1, [r7, #0]
 80085e8:	4618      	mov	r0, r3
 80085ea:	f001 f90c 	bl	8009806 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2201      	movs	r2, #1
 80085f2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80085fc:	461a      	mov	r2, r3
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800860a:	f003 031f 	and.w	r3, r3, #31
 800860e:	2b02      	cmp	r3, #2
 8008610:	d01a      	beq.n	8008648 <USBD_LL_SetupStage+0x72>
 8008612:	2b02      	cmp	r3, #2
 8008614:	d822      	bhi.n	800865c <USBD_LL_SetupStage+0x86>
 8008616:	2b00      	cmp	r3, #0
 8008618:	d002      	beq.n	8008620 <USBD_LL_SetupStage+0x4a>
 800861a:	2b01      	cmp	r3, #1
 800861c:	d00a      	beq.n	8008634 <USBD_LL_SetupStage+0x5e>
 800861e:	e01d      	b.n	800865c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008626:	4619      	mov	r1, r3
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f000 fb63 	bl	8008cf4 <USBD_StdDevReq>
 800862e:	4603      	mov	r3, r0
 8008630:	73fb      	strb	r3, [r7, #15]
      break;
 8008632:	e020      	b.n	8008676 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800863a:	4619      	mov	r1, r3
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f000 fbcb 	bl	8008dd8 <USBD_StdItfReq>
 8008642:	4603      	mov	r3, r0
 8008644:	73fb      	strb	r3, [r7, #15]
      break;
 8008646:	e016      	b.n	8008676 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800864e:	4619      	mov	r1, r3
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f000 fc2d 	bl	8008eb0 <USBD_StdEPReq>
 8008656:	4603      	mov	r3, r0
 8008658:	73fb      	strb	r3, [r7, #15]
      break;
 800865a:	e00c      	b.n	8008676 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008662:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008666:	b2db      	uxtb	r3, r3
 8008668:	4619      	mov	r1, r3
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f001 fe08 	bl	800a280 <USBD_LL_StallEP>
 8008670:	4603      	mov	r3, r0
 8008672:	73fb      	strb	r3, [r7, #15]
      break;
 8008674:	bf00      	nop
  }

  return ret;
 8008676:	7bfb      	ldrb	r3, [r7, #15]
}
 8008678:	4618      	mov	r0, r3
 800867a:	3710      	adds	r7, #16
 800867c:	46bd      	mov	sp, r7
 800867e:	bd80      	pop	{r7, pc}

08008680 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b086      	sub	sp, #24
 8008684:	af00      	add	r7, sp, #0
 8008686:	60f8      	str	r0, [r7, #12]
 8008688:	460b      	mov	r3, r1
 800868a:	607a      	str	r2, [r7, #4]
 800868c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800868e:	2300      	movs	r3, #0
 8008690:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008692:	7afb      	ldrb	r3, [r7, #11]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d16e      	bne.n	8008776 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800869e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80086a6:	2b03      	cmp	r3, #3
 80086a8:	f040 8098 	bne.w	80087dc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80086ac:	693b      	ldr	r3, [r7, #16]
 80086ae:	689a      	ldr	r2, [r3, #8]
 80086b0:	693b      	ldr	r3, [r7, #16]
 80086b2:	68db      	ldr	r3, [r3, #12]
 80086b4:	429a      	cmp	r2, r3
 80086b6:	d913      	bls.n	80086e0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80086b8:	693b      	ldr	r3, [r7, #16]
 80086ba:	689a      	ldr	r2, [r3, #8]
 80086bc:	693b      	ldr	r3, [r7, #16]
 80086be:	68db      	ldr	r3, [r3, #12]
 80086c0:	1ad2      	subs	r2, r2, r3
 80086c2:	693b      	ldr	r3, [r7, #16]
 80086c4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80086c6:	693b      	ldr	r3, [r7, #16]
 80086c8:	68da      	ldr	r2, [r3, #12]
 80086ca:	693b      	ldr	r3, [r7, #16]
 80086cc:	689b      	ldr	r3, [r3, #8]
 80086ce:	4293      	cmp	r3, r2
 80086d0:	bf28      	it	cs
 80086d2:	4613      	movcs	r3, r2
 80086d4:	461a      	mov	r2, r3
 80086d6:	6879      	ldr	r1, [r7, #4]
 80086d8:	68f8      	ldr	r0, [r7, #12]
 80086da:	f001 f994 	bl	8009a06 <USBD_CtlContinueRx>
 80086de:	e07d      	b.n	80087dc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80086e6:	f003 031f 	and.w	r3, r3, #31
 80086ea:	2b02      	cmp	r3, #2
 80086ec:	d014      	beq.n	8008718 <USBD_LL_DataOutStage+0x98>
 80086ee:	2b02      	cmp	r3, #2
 80086f0:	d81d      	bhi.n	800872e <USBD_LL_DataOutStage+0xae>
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d002      	beq.n	80086fc <USBD_LL_DataOutStage+0x7c>
 80086f6:	2b01      	cmp	r3, #1
 80086f8:	d003      	beq.n	8008702 <USBD_LL_DataOutStage+0x82>
 80086fa:	e018      	b.n	800872e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80086fc:	2300      	movs	r3, #0
 80086fe:	75bb      	strb	r3, [r7, #22]
            break;
 8008700:	e018      	b.n	8008734 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008708:	b2db      	uxtb	r3, r3
 800870a:	4619      	mov	r1, r3
 800870c:	68f8      	ldr	r0, [r7, #12]
 800870e:	f000 fa64 	bl	8008bda <USBD_CoreFindIF>
 8008712:	4603      	mov	r3, r0
 8008714:	75bb      	strb	r3, [r7, #22]
            break;
 8008716:	e00d      	b.n	8008734 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800871e:	b2db      	uxtb	r3, r3
 8008720:	4619      	mov	r1, r3
 8008722:	68f8      	ldr	r0, [r7, #12]
 8008724:	f000 fa66 	bl	8008bf4 <USBD_CoreFindEP>
 8008728:	4603      	mov	r3, r0
 800872a:	75bb      	strb	r3, [r7, #22]
            break;
 800872c:	e002      	b.n	8008734 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800872e:	2300      	movs	r3, #0
 8008730:	75bb      	strb	r3, [r7, #22]
            break;
 8008732:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008734:	7dbb      	ldrb	r3, [r7, #22]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d119      	bne.n	800876e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008740:	b2db      	uxtb	r3, r3
 8008742:	2b03      	cmp	r3, #3
 8008744:	d113      	bne.n	800876e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008746:	7dba      	ldrb	r2, [r7, #22]
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	32ae      	adds	r2, #174	@ 0xae
 800874c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008750:	691b      	ldr	r3, [r3, #16]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d00b      	beq.n	800876e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008756:	7dba      	ldrb	r2, [r7, #22]
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800875e:	7dba      	ldrb	r2, [r7, #22]
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	32ae      	adds	r2, #174	@ 0xae
 8008764:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008768:	691b      	ldr	r3, [r3, #16]
 800876a:	68f8      	ldr	r0, [r7, #12]
 800876c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800876e:	68f8      	ldr	r0, [r7, #12]
 8008770:	f001 f95a 	bl	8009a28 <USBD_CtlSendStatus>
 8008774:	e032      	b.n	80087dc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008776:	7afb      	ldrb	r3, [r7, #11]
 8008778:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800877c:	b2db      	uxtb	r3, r3
 800877e:	4619      	mov	r1, r3
 8008780:	68f8      	ldr	r0, [r7, #12]
 8008782:	f000 fa37 	bl	8008bf4 <USBD_CoreFindEP>
 8008786:	4603      	mov	r3, r0
 8008788:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800878a:	7dbb      	ldrb	r3, [r7, #22]
 800878c:	2bff      	cmp	r3, #255	@ 0xff
 800878e:	d025      	beq.n	80087dc <USBD_LL_DataOutStage+0x15c>
 8008790:	7dbb      	ldrb	r3, [r7, #22]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d122      	bne.n	80087dc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800879c:	b2db      	uxtb	r3, r3
 800879e:	2b03      	cmp	r3, #3
 80087a0:	d117      	bne.n	80087d2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80087a2:	7dba      	ldrb	r2, [r7, #22]
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	32ae      	adds	r2, #174	@ 0xae
 80087a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087ac:	699b      	ldr	r3, [r3, #24]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d00f      	beq.n	80087d2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80087b2:	7dba      	ldrb	r2, [r7, #22]
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80087ba:	7dba      	ldrb	r2, [r7, #22]
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	32ae      	adds	r2, #174	@ 0xae
 80087c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087c4:	699b      	ldr	r3, [r3, #24]
 80087c6:	7afa      	ldrb	r2, [r7, #11]
 80087c8:	4611      	mov	r1, r2
 80087ca:	68f8      	ldr	r0, [r7, #12]
 80087cc:	4798      	blx	r3
 80087ce:	4603      	mov	r3, r0
 80087d0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80087d2:	7dfb      	ldrb	r3, [r7, #23]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d001      	beq.n	80087dc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80087d8:	7dfb      	ldrb	r3, [r7, #23]
 80087da:	e000      	b.n	80087de <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80087dc:	2300      	movs	r3, #0
}
 80087de:	4618      	mov	r0, r3
 80087e0:	3718      	adds	r7, #24
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}

080087e6 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80087e6:	b580      	push	{r7, lr}
 80087e8:	b086      	sub	sp, #24
 80087ea:	af00      	add	r7, sp, #0
 80087ec:	60f8      	str	r0, [r7, #12]
 80087ee:	460b      	mov	r3, r1
 80087f0:	607a      	str	r2, [r7, #4]
 80087f2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80087f4:	7afb      	ldrb	r3, [r7, #11]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d16f      	bne.n	80088da <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	3314      	adds	r3, #20
 80087fe:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008806:	2b02      	cmp	r3, #2
 8008808:	d15a      	bne.n	80088c0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800880a:	693b      	ldr	r3, [r7, #16]
 800880c:	689a      	ldr	r2, [r3, #8]
 800880e:	693b      	ldr	r3, [r7, #16]
 8008810:	68db      	ldr	r3, [r3, #12]
 8008812:	429a      	cmp	r2, r3
 8008814:	d914      	bls.n	8008840 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008816:	693b      	ldr	r3, [r7, #16]
 8008818:	689a      	ldr	r2, [r3, #8]
 800881a:	693b      	ldr	r3, [r7, #16]
 800881c:	68db      	ldr	r3, [r3, #12]
 800881e:	1ad2      	subs	r2, r2, r3
 8008820:	693b      	ldr	r3, [r7, #16]
 8008822:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008824:	693b      	ldr	r3, [r7, #16]
 8008826:	689b      	ldr	r3, [r3, #8]
 8008828:	461a      	mov	r2, r3
 800882a:	6879      	ldr	r1, [r7, #4]
 800882c:	68f8      	ldr	r0, [r7, #12]
 800882e:	f001 f8bc 	bl	80099aa <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008832:	2300      	movs	r3, #0
 8008834:	2200      	movs	r2, #0
 8008836:	2100      	movs	r1, #0
 8008838:	68f8      	ldr	r0, [r7, #12]
 800883a:	f001 fdcb 	bl	800a3d4 <USBD_LL_PrepareReceive>
 800883e:	e03f      	b.n	80088c0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008840:	693b      	ldr	r3, [r7, #16]
 8008842:	68da      	ldr	r2, [r3, #12]
 8008844:	693b      	ldr	r3, [r7, #16]
 8008846:	689b      	ldr	r3, [r3, #8]
 8008848:	429a      	cmp	r2, r3
 800884a:	d11c      	bne.n	8008886 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800884c:	693b      	ldr	r3, [r7, #16]
 800884e:	685a      	ldr	r2, [r3, #4]
 8008850:	693b      	ldr	r3, [r7, #16]
 8008852:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008854:	429a      	cmp	r2, r3
 8008856:	d316      	bcc.n	8008886 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008858:	693b      	ldr	r3, [r7, #16]
 800885a:	685a      	ldr	r2, [r3, #4]
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008862:	429a      	cmp	r2, r3
 8008864:	d20f      	bcs.n	8008886 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008866:	2200      	movs	r2, #0
 8008868:	2100      	movs	r1, #0
 800886a:	68f8      	ldr	r0, [r7, #12]
 800886c:	f001 f89d 	bl	80099aa <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	2200      	movs	r2, #0
 8008874:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008878:	2300      	movs	r3, #0
 800887a:	2200      	movs	r2, #0
 800887c:	2100      	movs	r1, #0
 800887e:	68f8      	ldr	r0, [r7, #12]
 8008880:	f001 fda8 	bl	800a3d4 <USBD_LL_PrepareReceive>
 8008884:	e01c      	b.n	80088c0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800888c:	b2db      	uxtb	r3, r3
 800888e:	2b03      	cmp	r3, #3
 8008890:	d10f      	bne.n	80088b2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008898:	68db      	ldr	r3, [r3, #12]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d009      	beq.n	80088b2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	2200      	movs	r2, #0
 80088a2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80088ac:	68db      	ldr	r3, [r3, #12]
 80088ae:	68f8      	ldr	r0, [r7, #12]
 80088b0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80088b2:	2180      	movs	r1, #128	@ 0x80
 80088b4:	68f8      	ldr	r0, [r7, #12]
 80088b6:	f001 fce3 	bl	800a280 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80088ba:	68f8      	ldr	r0, [r7, #12]
 80088bc:	f001 f8c7 	bl	8009a4e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d03a      	beq.n	8008940 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80088ca:	68f8      	ldr	r0, [r7, #12]
 80088cc:	f7ff fe42 	bl	8008554 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	2200      	movs	r2, #0
 80088d4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80088d8:	e032      	b.n	8008940 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80088da:	7afb      	ldrb	r3, [r7, #11]
 80088dc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80088e0:	b2db      	uxtb	r3, r3
 80088e2:	4619      	mov	r1, r3
 80088e4:	68f8      	ldr	r0, [r7, #12]
 80088e6:	f000 f985 	bl	8008bf4 <USBD_CoreFindEP>
 80088ea:	4603      	mov	r3, r0
 80088ec:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80088ee:	7dfb      	ldrb	r3, [r7, #23]
 80088f0:	2bff      	cmp	r3, #255	@ 0xff
 80088f2:	d025      	beq.n	8008940 <USBD_LL_DataInStage+0x15a>
 80088f4:	7dfb      	ldrb	r3, [r7, #23]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d122      	bne.n	8008940 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008900:	b2db      	uxtb	r3, r3
 8008902:	2b03      	cmp	r3, #3
 8008904:	d11c      	bne.n	8008940 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008906:	7dfa      	ldrb	r2, [r7, #23]
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	32ae      	adds	r2, #174	@ 0xae
 800890c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008910:	695b      	ldr	r3, [r3, #20]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d014      	beq.n	8008940 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008916:	7dfa      	ldrb	r2, [r7, #23]
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800891e:	7dfa      	ldrb	r2, [r7, #23]
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	32ae      	adds	r2, #174	@ 0xae
 8008924:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008928:	695b      	ldr	r3, [r3, #20]
 800892a:	7afa      	ldrb	r2, [r7, #11]
 800892c:	4611      	mov	r1, r2
 800892e:	68f8      	ldr	r0, [r7, #12]
 8008930:	4798      	blx	r3
 8008932:	4603      	mov	r3, r0
 8008934:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008936:	7dbb      	ldrb	r3, [r7, #22]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d001      	beq.n	8008940 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800893c:	7dbb      	ldrb	r3, [r7, #22]
 800893e:	e000      	b.n	8008942 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008940:	2300      	movs	r3, #0
}
 8008942:	4618      	mov	r0, r3
 8008944:	3718      	adds	r7, #24
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}

0800894a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800894a:	b580      	push	{r7, lr}
 800894c:	b084      	sub	sp, #16
 800894e:	af00      	add	r7, sp, #0
 8008950:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008952:	2300      	movs	r3, #0
 8008954:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2201      	movs	r2, #1
 800895a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2200      	movs	r2, #0
 8008962:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2200      	movs	r2, #0
 800896a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2200      	movs	r2, #0
 8008970:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2200      	movs	r2, #0
 8008978:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008982:	2b00      	cmp	r3, #0
 8008984:	d014      	beq.n	80089b0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800898c:	685b      	ldr	r3, [r3, #4]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d00e      	beq.n	80089b0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008998:	685b      	ldr	r3, [r3, #4]
 800899a:	687a      	ldr	r2, [r7, #4]
 800899c:	6852      	ldr	r2, [r2, #4]
 800899e:	b2d2      	uxtb	r2, r2
 80089a0:	4611      	mov	r1, r2
 80089a2:	6878      	ldr	r0, [r7, #4]
 80089a4:	4798      	blx	r3
 80089a6:	4603      	mov	r3, r0
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d001      	beq.n	80089b0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80089ac:	2303      	movs	r3, #3
 80089ae:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80089b0:	2340      	movs	r3, #64	@ 0x40
 80089b2:	2200      	movs	r2, #0
 80089b4:	2100      	movs	r1, #0
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	f001 fc1d 	bl	800a1f6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2201      	movs	r2, #1
 80089c0:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2240      	movs	r2, #64	@ 0x40
 80089c8:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80089cc:	2340      	movs	r3, #64	@ 0x40
 80089ce:	2200      	movs	r2, #0
 80089d0:	2180      	movs	r1, #128	@ 0x80
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f001 fc0f 	bl	800a1f6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2201      	movs	r2, #1
 80089dc:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2240      	movs	r2, #64	@ 0x40
 80089e2:	621a      	str	r2, [r3, #32]

  return ret;
 80089e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3710      	adds	r7, #16
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}

080089ee <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80089ee:	b480      	push	{r7}
 80089f0:	b083      	sub	sp, #12
 80089f2:	af00      	add	r7, sp, #0
 80089f4:	6078      	str	r0, [r7, #4]
 80089f6:	460b      	mov	r3, r1
 80089f8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	78fa      	ldrb	r2, [r7, #3]
 80089fe:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008a00:	2300      	movs	r3, #0
}
 8008a02:	4618      	mov	r0, r3
 8008a04:	370c      	adds	r7, #12
 8008a06:	46bd      	mov	sp, r7
 8008a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0c:	4770      	bx	lr

08008a0e <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008a0e:	b480      	push	{r7}
 8008a10:	b083      	sub	sp, #12
 8008a12:	af00      	add	r7, sp, #0
 8008a14:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a1c:	b2db      	uxtb	r3, r3
 8008a1e:	2b04      	cmp	r3, #4
 8008a20:	d006      	beq.n	8008a30 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a28:	b2da      	uxtb	r2, r3
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2204      	movs	r2, #4
 8008a34:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008a38:	2300      	movs	r3, #0
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	370c      	adds	r7, #12
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a44:	4770      	bx	lr

08008a46 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008a46:	b480      	push	{r7}
 8008a48:	b083      	sub	sp, #12
 8008a4a:	af00      	add	r7, sp, #0
 8008a4c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a54:	b2db      	uxtb	r3, r3
 8008a56:	2b04      	cmp	r3, #4
 8008a58:	d106      	bne.n	8008a68 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8008a60:	b2da      	uxtb	r2, r3
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008a68:	2300      	movs	r3, #0
}
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	370c      	adds	r7, #12
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a74:	4770      	bx	lr

08008a76 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008a76:	b580      	push	{r7, lr}
 8008a78:	b082      	sub	sp, #8
 8008a7a:	af00      	add	r7, sp, #0
 8008a7c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a84:	b2db      	uxtb	r3, r3
 8008a86:	2b03      	cmp	r3, #3
 8008a88:	d110      	bne.n	8008aac <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d00b      	beq.n	8008aac <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a9a:	69db      	ldr	r3, [r3, #28]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d005      	beq.n	8008aac <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008aa6:	69db      	ldr	r3, [r3, #28]
 8008aa8:	6878      	ldr	r0, [r7, #4]
 8008aaa:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008aac:	2300      	movs	r3, #0
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	3708      	adds	r7, #8
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bd80      	pop	{r7, pc}

08008ab6 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008ab6:	b580      	push	{r7, lr}
 8008ab8:	b082      	sub	sp, #8
 8008aba:	af00      	add	r7, sp, #0
 8008abc:	6078      	str	r0, [r7, #4]
 8008abe:	460b      	mov	r3, r1
 8008ac0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	32ae      	adds	r2, #174	@ 0xae
 8008acc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d101      	bne.n	8008ad8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008ad4:	2303      	movs	r3, #3
 8008ad6:	e01c      	b.n	8008b12 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ade:	b2db      	uxtb	r3, r3
 8008ae0:	2b03      	cmp	r3, #3
 8008ae2:	d115      	bne.n	8008b10 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	32ae      	adds	r2, #174	@ 0xae
 8008aee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008af2:	6a1b      	ldr	r3, [r3, #32]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d00b      	beq.n	8008b10 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	32ae      	adds	r2, #174	@ 0xae
 8008b02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b06:	6a1b      	ldr	r3, [r3, #32]
 8008b08:	78fa      	ldrb	r2, [r7, #3]
 8008b0a:	4611      	mov	r1, r2
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008b10:	2300      	movs	r3, #0
}
 8008b12:	4618      	mov	r0, r3
 8008b14:	3708      	adds	r7, #8
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bd80      	pop	{r7, pc}

08008b1a <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008b1a:	b580      	push	{r7, lr}
 8008b1c:	b082      	sub	sp, #8
 8008b1e:	af00      	add	r7, sp, #0
 8008b20:	6078      	str	r0, [r7, #4]
 8008b22:	460b      	mov	r3, r1
 8008b24:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	32ae      	adds	r2, #174	@ 0xae
 8008b30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d101      	bne.n	8008b3c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008b38:	2303      	movs	r3, #3
 8008b3a:	e01c      	b.n	8008b76 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b42:	b2db      	uxtb	r3, r3
 8008b44:	2b03      	cmp	r3, #3
 8008b46:	d115      	bne.n	8008b74 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	32ae      	adds	r2, #174	@ 0xae
 8008b52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d00b      	beq.n	8008b74 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	32ae      	adds	r2, #174	@ 0xae
 8008b66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b6c:	78fa      	ldrb	r2, [r7, #3]
 8008b6e:	4611      	mov	r1, r2
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008b74:	2300      	movs	r3, #0
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	3708      	adds	r7, #8
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bd80      	pop	{r7, pc}

08008b7e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008b7e:	b480      	push	{r7}
 8008b80:	b083      	sub	sp, #12
 8008b82:	af00      	add	r7, sp, #0
 8008b84:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008b86:	2300      	movs	r3, #0
}
 8008b88:	4618      	mov	r0, r3
 8008b8a:	370c      	adds	r7, #12
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b92:	4770      	bx	lr

08008b94 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b084      	sub	sp, #16
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2201      	movs	r2, #1
 8008ba4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d00e      	beq.n	8008bd0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008bb8:	685b      	ldr	r3, [r3, #4]
 8008bba:	687a      	ldr	r2, [r7, #4]
 8008bbc:	6852      	ldr	r2, [r2, #4]
 8008bbe:	b2d2      	uxtb	r2, r2
 8008bc0:	4611      	mov	r1, r2
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	4798      	blx	r3
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d001      	beq.n	8008bd0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008bcc:	2303      	movs	r3, #3
 8008bce:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008bd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	3710      	adds	r7, #16
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bd80      	pop	{r7, pc}

08008bda <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008bda:	b480      	push	{r7}
 8008bdc:	b083      	sub	sp, #12
 8008bde:	af00      	add	r7, sp, #0
 8008be0:	6078      	str	r0, [r7, #4]
 8008be2:	460b      	mov	r3, r1
 8008be4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008be6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008be8:	4618      	mov	r0, r3
 8008bea:	370c      	adds	r7, #12
 8008bec:	46bd      	mov	sp, r7
 8008bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf2:	4770      	bx	lr

08008bf4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008bf4:	b480      	push	{r7}
 8008bf6:	b083      	sub	sp, #12
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
 8008bfc:	460b      	mov	r3, r1
 8008bfe:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008c00:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008c02:	4618      	mov	r0, r3
 8008c04:	370c      	adds	r7, #12
 8008c06:	46bd      	mov	sp, r7
 8008c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0c:	4770      	bx	lr

08008c0e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008c0e:	b580      	push	{r7, lr}
 8008c10:	b086      	sub	sp, #24
 8008c12:	af00      	add	r7, sp, #0
 8008c14:	6078      	str	r0, [r7, #4]
 8008c16:	460b      	mov	r3, r1
 8008c18:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008c22:	2300      	movs	r3, #0
 8008c24:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	885b      	ldrh	r3, [r3, #2]
 8008c2a:	b29b      	uxth	r3, r3
 8008c2c:	68fa      	ldr	r2, [r7, #12]
 8008c2e:	7812      	ldrb	r2, [r2, #0]
 8008c30:	4293      	cmp	r3, r2
 8008c32:	d91f      	bls.n	8008c74 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	781b      	ldrb	r3, [r3, #0]
 8008c38:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008c3a:	e013      	b.n	8008c64 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008c3c:	f107 030a 	add.w	r3, r7, #10
 8008c40:	4619      	mov	r1, r3
 8008c42:	6978      	ldr	r0, [r7, #20]
 8008c44:	f000 f81b 	bl	8008c7e <USBD_GetNextDesc>
 8008c48:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008c4a:	697b      	ldr	r3, [r7, #20]
 8008c4c:	785b      	ldrb	r3, [r3, #1]
 8008c4e:	2b05      	cmp	r3, #5
 8008c50:	d108      	bne.n	8008c64 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008c52:	697b      	ldr	r3, [r7, #20]
 8008c54:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008c56:	693b      	ldr	r3, [r7, #16]
 8008c58:	789b      	ldrb	r3, [r3, #2]
 8008c5a:	78fa      	ldrb	r2, [r7, #3]
 8008c5c:	429a      	cmp	r2, r3
 8008c5e:	d008      	beq.n	8008c72 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008c60:	2300      	movs	r3, #0
 8008c62:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	885b      	ldrh	r3, [r3, #2]
 8008c68:	b29a      	uxth	r2, r3
 8008c6a:	897b      	ldrh	r3, [r7, #10]
 8008c6c:	429a      	cmp	r2, r3
 8008c6e:	d8e5      	bhi.n	8008c3c <USBD_GetEpDesc+0x2e>
 8008c70:	e000      	b.n	8008c74 <USBD_GetEpDesc+0x66>
          break;
 8008c72:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008c74:	693b      	ldr	r3, [r7, #16]
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	3718      	adds	r7, #24
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}

08008c7e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008c7e:	b480      	push	{r7}
 8008c80:	b085      	sub	sp, #20
 8008c82:	af00      	add	r7, sp, #0
 8008c84:	6078      	str	r0, [r7, #4]
 8008c86:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	881b      	ldrh	r3, [r3, #0]
 8008c90:	68fa      	ldr	r2, [r7, #12]
 8008c92:	7812      	ldrb	r2, [r2, #0]
 8008c94:	4413      	add	r3, r2
 8008c96:	b29a      	uxth	r2, r3
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	781b      	ldrb	r3, [r3, #0]
 8008ca0:	461a      	mov	r2, r3
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	4413      	add	r3, r2
 8008ca6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008ca8:	68fb      	ldr	r3, [r7, #12]
}
 8008caa:	4618      	mov	r0, r3
 8008cac:	3714      	adds	r7, #20
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb4:	4770      	bx	lr

08008cb6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008cb6:	b480      	push	{r7}
 8008cb8:	b087      	sub	sp, #28
 8008cba:	af00      	add	r7, sp, #0
 8008cbc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008cc2:	697b      	ldr	r3, [r7, #20]
 8008cc4:	781b      	ldrb	r3, [r3, #0]
 8008cc6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008cc8:	697b      	ldr	r3, [r7, #20]
 8008cca:	3301      	adds	r3, #1
 8008ccc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008cce:	697b      	ldr	r3, [r7, #20]
 8008cd0:	781b      	ldrb	r3, [r3, #0]
 8008cd2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008cd4:	8a3b      	ldrh	r3, [r7, #16]
 8008cd6:	021b      	lsls	r3, r3, #8
 8008cd8:	b21a      	sxth	r2, r3
 8008cda:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008cde:	4313      	orrs	r3, r2
 8008ce0:	b21b      	sxth	r3, r3
 8008ce2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008ce4:	89fb      	ldrh	r3, [r7, #14]
}
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	371c      	adds	r7, #28
 8008cea:	46bd      	mov	sp, r7
 8008cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf0:	4770      	bx	lr
	...

08008cf4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b084      	sub	sp, #16
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
 8008cfc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008cfe:	2300      	movs	r3, #0
 8008d00:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	781b      	ldrb	r3, [r3, #0]
 8008d06:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008d0a:	2b40      	cmp	r3, #64	@ 0x40
 8008d0c:	d005      	beq.n	8008d1a <USBD_StdDevReq+0x26>
 8008d0e:	2b40      	cmp	r3, #64	@ 0x40
 8008d10:	d857      	bhi.n	8008dc2 <USBD_StdDevReq+0xce>
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d00f      	beq.n	8008d36 <USBD_StdDevReq+0x42>
 8008d16:	2b20      	cmp	r3, #32
 8008d18:	d153      	bne.n	8008dc2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	32ae      	adds	r2, #174	@ 0xae
 8008d24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d28:	689b      	ldr	r3, [r3, #8]
 8008d2a:	6839      	ldr	r1, [r7, #0]
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	4798      	blx	r3
 8008d30:	4603      	mov	r3, r0
 8008d32:	73fb      	strb	r3, [r7, #15]
      break;
 8008d34:	e04a      	b.n	8008dcc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	785b      	ldrb	r3, [r3, #1]
 8008d3a:	2b09      	cmp	r3, #9
 8008d3c:	d83b      	bhi.n	8008db6 <USBD_StdDevReq+0xc2>
 8008d3e:	a201      	add	r2, pc, #4	@ (adr r2, 8008d44 <USBD_StdDevReq+0x50>)
 8008d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d44:	08008d99 	.word	0x08008d99
 8008d48:	08008dad 	.word	0x08008dad
 8008d4c:	08008db7 	.word	0x08008db7
 8008d50:	08008da3 	.word	0x08008da3
 8008d54:	08008db7 	.word	0x08008db7
 8008d58:	08008d77 	.word	0x08008d77
 8008d5c:	08008d6d 	.word	0x08008d6d
 8008d60:	08008db7 	.word	0x08008db7
 8008d64:	08008d8f 	.word	0x08008d8f
 8008d68:	08008d81 	.word	0x08008d81
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008d6c:	6839      	ldr	r1, [r7, #0]
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f000 fa3c 	bl	80091ec <USBD_GetDescriptor>
          break;
 8008d74:	e024      	b.n	8008dc0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008d76:	6839      	ldr	r1, [r7, #0]
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f000 fba1 	bl	80094c0 <USBD_SetAddress>
          break;
 8008d7e:	e01f      	b.n	8008dc0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008d80:	6839      	ldr	r1, [r7, #0]
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f000 fbe0 	bl	8009548 <USBD_SetConfig>
 8008d88:	4603      	mov	r3, r0
 8008d8a:	73fb      	strb	r3, [r7, #15]
          break;
 8008d8c:	e018      	b.n	8008dc0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008d8e:	6839      	ldr	r1, [r7, #0]
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	f000 fc83 	bl	800969c <USBD_GetConfig>
          break;
 8008d96:	e013      	b.n	8008dc0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008d98:	6839      	ldr	r1, [r7, #0]
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f000 fcb4 	bl	8009708 <USBD_GetStatus>
          break;
 8008da0:	e00e      	b.n	8008dc0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008da2:	6839      	ldr	r1, [r7, #0]
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	f000 fce3 	bl	8009770 <USBD_SetFeature>
          break;
 8008daa:	e009      	b.n	8008dc0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008dac:	6839      	ldr	r1, [r7, #0]
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f000 fd07 	bl	80097c2 <USBD_ClrFeature>
          break;
 8008db4:	e004      	b.n	8008dc0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008db6:	6839      	ldr	r1, [r7, #0]
 8008db8:	6878      	ldr	r0, [r7, #4]
 8008dba:	f000 fd5e 	bl	800987a <USBD_CtlError>
          break;
 8008dbe:	bf00      	nop
      }
      break;
 8008dc0:	e004      	b.n	8008dcc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008dc2:	6839      	ldr	r1, [r7, #0]
 8008dc4:	6878      	ldr	r0, [r7, #4]
 8008dc6:	f000 fd58 	bl	800987a <USBD_CtlError>
      break;
 8008dca:	bf00      	nop
  }

  return ret;
 8008dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dce:	4618      	mov	r0, r3
 8008dd0:	3710      	adds	r7, #16
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bd80      	pop	{r7, pc}
 8008dd6:	bf00      	nop

08008dd8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b084      	sub	sp, #16
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
 8008de0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008de2:	2300      	movs	r3, #0
 8008de4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	781b      	ldrb	r3, [r3, #0]
 8008dea:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008dee:	2b40      	cmp	r3, #64	@ 0x40
 8008df0:	d005      	beq.n	8008dfe <USBD_StdItfReq+0x26>
 8008df2:	2b40      	cmp	r3, #64	@ 0x40
 8008df4:	d852      	bhi.n	8008e9c <USBD_StdItfReq+0xc4>
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d001      	beq.n	8008dfe <USBD_StdItfReq+0x26>
 8008dfa:	2b20      	cmp	r3, #32
 8008dfc:	d14e      	bne.n	8008e9c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e04:	b2db      	uxtb	r3, r3
 8008e06:	3b01      	subs	r3, #1
 8008e08:	2b02      	cmp	r3, #2
 8008e0a:	d840      	bhi.n	8008e8e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	889b      	ldrh	r3, [r3, #4]
 8008e10:	b2db      	uxtb	r3, r3
 8008e12:	2b01      	cmp	r3, #1
 8008e14:	d836      	bhi.n	8008e84 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	889b      	ldrh	r3, [r3, #4]
 8008e1a:	b2db      	uxtb	r3, r3
 8008e1c:	4619      	mov	r1, r3
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f7ff fedb 	bl	8008bda <USBD_CoreFindIF>
 8008e24:	4603      	mov	r3, r0
 8008e26:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008e28:	7bbb      	ldrb	r3, [r7, #14]
 8008e2a:	2bff      	cmp	r3, #255	@ 0xff
 8008e2c:	d01d      	beq.n	8008e6a <USBD_StdItfReq+0x92>
 8008e2e:	7bbb      	ldrb	r3, [r7, #14]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d11a      	bne.n	8008e6a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008e34:	7bba      	ldrb	r2, [r7, #14]
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	32ae      	adds	r2, #174	@ 0xae
 8008e3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e3e:	689b      	ldr	r3, [r3, #8]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d00f      	beq.n	8008e64 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008e44:	7bba      	ldrb	r2, [r7, #14]
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008e4c:	7bba      	ldrb	r2, [r7, #14]
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	32ae      	adds	r2, #174	@ 0xae
 8008e52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e56:	689b      	ldr	r3, [r3, #8]
 8008e58:	6839      	ldr	r1, [r7, #0]
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	4798      	blx	r3
 8008e5e:	4603      	mov	r3, r0
 8008e60:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008e62:	e004      	b.n	8008e6e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008e64:	2303      	movs	r3, #3
 8008e66:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008e68:	e001      	b.n	8008e6e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008e6a:	2303      	movs	r3, #3
 8008e6c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	88db      	ldrh	r3, [r3, #6]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d110      	bne.n	8008e98 <USBD_StdItfReq+0xc0>
 8008e76:	7bfb      	ldrb	r3, [r7, #15]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d10d      	bne.n	8008e98 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	f000 fdd3 	bl	8009a28 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008e82:	e009      	b.n	8008e98 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008e84:	6839      	ldr	r1, [r7, #0]
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f000 fcf7 	bl	800987a <USBD_CtlError>
          break;
 8008e8c:	e004      	b.n	8008e98 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008e8e:	6839      	ldr	r1, [r7, #0]
 8008e90:	6878      	ldr	r0, [r7, #4]
 8008e92:	f000 fcf2 	bl	800987a <USBD_CtlError>
          break;
 8008e96:	e000      	b.n	8008e9a <USBD_StdItfReq+0xc2>
          break;
 8008e98:	bf00      	nop
      }
      break;
 8008e9a:	e004      	b.n	8008ea6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008e9c:	6839      	ldr	r1, [r7, #0]
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f000 fceb 	bl	800987a <USBD_CtlError>
      break;
 8008ea4:	bf00      	nop
  }

  return ret;
 8008ea6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	3710      	adds	r7, #16
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bd80      	pop	{r7, pc}

08008eb0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b084      	sub	sp, #16
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
 8008eb8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008eba:	2300      	movs	r3, #0
 8008ebc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	889b      	ldrh	r3, [r3, #4]
 8008ec2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	781b      	ldrb	r3, [r3, #0]
 8008ec8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008ecc:	2b40      	cmp	r3, #64	@ 0x40
 8008ece:	d007      	beq.n	8008ee0 <USBD_StdEPReq+0x30>
 8008ed0:	2b40      	cmp	r3, #64	@ 0x40
 8008ed2:	f200 817f 	bhi.w	80091d4 <USBD_StdEPReq+0x324>
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d02a      	beq.n	8008f30 <USBD_StdEPReq+0x80>
 8008eda:	2b20      	cmp	r3, #32
 8008edc:	f040 817a 	bne.w	80091d4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008ee0:	7bbb      	ldrb	r3, [r7, #14]
 8008ee2:	4619      	mov	r1, r3
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	f7ff fe85 	bl	8008bf4 <USBD_CoreFindEP>
 8008eea:	4603      	mov	r3, r0
 8008eec:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008eee:	7b7b      	ldrb	r3, [r7, #13]
 8008ef0:	2bff      	cmp	r3, #255	@ 0xff
 8008ef2:	f000 8174 	beq.w	80091de <USBD_StdEPReq+0x32e>
 8008ef6:	7b7b      	ldrb	r3, [r7, #13]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	f040 8170 	bne.w	80091de <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008efe:	7b7a      	ldrb	r2, [r7, #13]
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008f06:	7b7a      	ldrb	r2, [r7, #13]
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	32ae      	adds	r2, #174	@ 0xae
 8008f0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f10:	689b      	ldr	r3, [r3, #8]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	f000 8163 	beq.w	80091de <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008f18:	7b7a      	ldrb	r2, [r7, #13]
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	32ae      	adds	r2, #174	@ 0xae
 8008f1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f22:	689b      	ldr	r3, [r3, #8]
 8008f24:	6839      	ldr	r1, [r7, #0]
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	4798      	blx	r3
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008f2e:	e156      	b.n	80091de <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	785b      	ldrb	r3, [r3, #1]
 8008f34:	2b03      	cmp	r3, #3
 8008f36:	d008      	beq.n	8008f4a <USBD_StdEPReq+0x9a>
 8008f38:	2b03      	cmp	r3, #3
 8008f3a:	f300 8145 	bgt.w	80091c8 <USBD_StdEPReq+0x318>
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	f000 809b 	beq.w	800907a <USBD_StdEPReq+0x1ca>
 8008f44:	2b01      	cmp	r3, #1
 8008f46:	d03c      	beq.n	8008fc2 <USBD_StdEPReq+0x112>
 8008f48:	e13e      	b.n	80091c8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f50:	b2db      	uxtb	r3, r3
 8008f52:	2b02      	cmp	r3, #2
 8008f54:	d002      	beq.n	8008f5c <USBD_StdEPReq+0xac>
 8008f56:	2b03      	cmp	r3, #3
 8008f58:	d016      	beq.n	8008f88 <USBD_StdEPReq+0xd8>
 8008f5a:	e02c      	b.n	8008fb6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008f5c:	7bbb      	ldrb	r3, [r7, #14]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d00d      	beq.n	8008f7e <USBD_StdEPReq+0xce>
 8008f62:	7bbb      	ldrb	r3, [r7, #14]
 8008f64:	2b80      	cmp	r3, #128	@ 0x80
 8008f66:	d00a      	beq.n	8008f7e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008f68:	7bbb      	ldrb	r3, [r7, #14]
 8008f6a:	4619      	mov	r1, r3
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	f001 f987 	bl	800a280 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008f72:	2180      	movs	r1, #128	@ 0x80
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	f001 f983 	bl	800a280 <USBD_LL_StallEP>
 8008f7a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008f7c:	e020      	b.n	8008fc0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008f7e:	6839      	ldr	r1, [r7, #0]
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	f000 fc7a 	bl	800987a <USBD_CtlError>
              break;
 8008f86:	e01b      	b.n	8008fc0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	885b      	ldrh	r3, [r3, #2]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d10e      	bne.n	8008fae <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008f90:	7bbb      	ldrb	r3, [r7, #14]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d00b      	beq.n	8008fae <USBD_StdEPReq+0xfe>
 8008f96:	7bbb      	ldrb	r3, [r7, #14]
 8008f98:	2b80      	cmp	r3, #128	@ 0x80
 8008f9a:	d008      	beq.n	8008fae <USBD_StdEPReq+0xfe>
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	88db      	ldrh	r3, [r3, #6]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d104      	bne.n	8008fae <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008fa4:	7bbb      	ldrb	r3, [r7, #14]
 8008fa6:	4619      	mov	r1, r3
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	f001 f969 	bl	800a280 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f000 fd3a 	bl	8009a28 <USBD_CtlSendStatus>

              break;
 8008fb4:	e004      	b.n	8008fc0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008fb6:	6839      	ldr	r1, [r7, #0]
 8008fb8:	6878      	ldr	r0, [r7, #4]
 8008fba:	f000 fc5e 	bl	800987a <USBD_CtlError>
              break;
 8008fbe:	bf00      	nop
          }
          break;
 8008fc0:	e107      	b.n	80091d2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008fc8:	b2db      	uxtb	r3, r3
 8008fca:	2b02      	cmp	r3, #2
 8008fcc:	d002      	beq.n	8008fd4 <USBD_StdEPReq+0x124>
 8008fce:	2b03      	cmp	r3, #3
 8008fd0:	d016      	beq.n	8009000 <USBD_StdEPReq+0x150>
 8008fd2:	e04b      	b.n	800906c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008fd4:	7bbb      	ldrb	r3, [r7, #14]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d00d      	beq.n	8008ff6 <USBD_StdEPReq+0x146>
 8008fda:	7bbb      	ldrb	r3, [r7, #14]
 8008fdc:	2b80      	cmp	r3, #128	@ 0x80
 8008fde:	d00a      	beq.n	8008ff6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008fe0:	7bbb      	ldrb	r3, [r7, #14]
 8008fe2:	4619      	mov	r1, r3
 8008fe4:	6878      	ldr	r0, [r7, #4]
 8008fe6:	f001 f94b 	bl	800a280 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008fea:	2180      	movs	r1, #128	@ 0x80
 8008fec:	6878      	ldr	r0, [r7, #4]
 8008fee:	f001 f947 	bl	800a280 <USBD_LL_StallEP>
 8008ff2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008ff4:	e040      	b.n	8009078 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008ff6:	6839      	ldr	r1, [r7, #0]
 8008ff8:	6878      	ldr	r0, [r7, #4]
 8008ffa:	f000 fc3e 	bl	800987a <USBD_CtlError>
              break;
 8008ffe:	e03b      	b.n	8009078 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	885b      	ldrh	r3, [r3, #2]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d136      	bne.n	8009076 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009008:	7bbb      	ldrb	r3, [r7, #14]
 800900a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800900e:	2b00      	cmp	r3, #0
 8009010:	d004      	beq.n	800901c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009012:	7bbb      	ldrb	r3, [r7, #14]
 8009014:	4619      	mov	r1, r3
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f001 f951 	bl	800a2be <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	f000 fd03 	bl	8009a28 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009022:	7bbb      	ldrb	r3, [r7, #14]
 8009024:	4619      	mov	r1, r3
 8009026:	6878      	ldr	r0, [r7, #4]
 8009028:	f7ff fde4 	bl	8008bf4 <USBD_CoreFindEP>
 800902c:	4603      	mov	r3, r0
 800902e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009030:	7b7b      	ldrb	r3, [r7, #13]
 8009032:	2bff      	cmp	r3, #255	@ 0xff
 8009034:	d01f      	beq.n	8009076 <USBD_StdEPReq+0x1c6>
 8009036:	7b7b      	ldrb	r3, [r7, #13]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d11c      	bne.n	8009076 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800903c:	7b7a      	ldrb	r2, [r7, #13]
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009044:	7b7a      	ldrb	r2, [r7, #13]
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	32ae      	adds	r2, #174	@ 0xae
 800904a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800904e:	689b      	ldr	r3, [r3, #8]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d010      	beq.n	8009076 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009054:	7b7a      	ldrb	r2, [r7, #13]
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	32ae      	adds	r2, #174	@ 0xae
 800905a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800905e:	689b      	ldr	r3, [r3, #8]
 8009060:	6839      	ldr	r1, [r7, #0]
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	4798      	blx	r3
 8009066:	4603      	mov	r3, r0
 8009068:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800906a:	e004      	b.n	8009076 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800906c:	6839      	ldr	r1, [r7, #0]
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	f000 fc03 	bl	800987a <USBD_CtlError>
              break;
 8009074:	e000      	b.n	8009078 <USBD_StdEPReq+0x1c8>
              break;
 8009076:	bf00      	nop
          }
          break;
 8009078:	e0ab      	b.n	80091d2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009080:	b2db      	uxtb	r3, r3
 8009082:	2b02      	cmp	r3, #2
 8009084:	d002      	beq.n	800908c <USBD_StdEPReq+0x1dc>
 8009086:	2b03      	cmp	r3, #3
 8009088:	d032      	beq.n	80090f0 <USBD_StdEPReq+0x240>
 800908a:	e097      	b.n	80091bc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800908c:	7bbb      	ldrb	r3, [r7, #14]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d007      	beq.n	80090a2 <USBD_StdEPReq+0x1f2>
 8009092:	7bbb      	ldrb	r3, [r7, #14]
 8009094:	2b80      	cmp	r3, #128	@ 0x80
 8009096:	d004      	beq.n	80090a2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009098:	6839      	ldr	r1, [r7, #0]
 800909a:	6878      	ldr	r0, [r7, #4]
 800909c:	f000 fbed 	bl	800987a <USBD_CtlError>
                break;
 80090a0:	e091      	b.n	80091c6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80090a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	da0b      	bge.n	80090c2 <USBD_StdEPReq+0x212>
 80090aa:	7bbb      	ldrb	r3, [r7, #14]
 80090ac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80090b0:	4613      	mov	r3, r2
 80090b2:	009b      	lsls	r3, r3, #2
 80090b4:	4413      	add	r3, r2
 80090b6:	009b      	lsls	r3, r3, #2
 80090b8:	3310      	adds	r3, #16
 80090ba:	687a      	ldr	r2, [r7, #4]
 80090bc:	4413      	add	r3, r2
 80090be:	3304      	adds	r3, #4
 80090c0:	e00b      	b.n	80090da <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80090c2:	7bbb      	ldrb	r3, [r7, #14]
 80090c4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80090c8:	4613      	mov	r3, r2
 80090ca:	009b      	lsls	r3, r3, #2
 80090cc:	4413      	add	r3, r2
 80090ce:	009b      	lsls	r3, r3, #2
 80090d0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80090d4:	687a      	ldr	r2, [r7, #4]
 80090d6:	4413      	add	r3, r2
 80090d8:	3304      	adds	r3, #4
 80090da:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	2200      	movs	r2, #0
 80090e0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80090e2:	68bb      	ldr	r3, [r7, #8]
 80090e4:	2202      	movs	r2, #2
 80090e6:	4619      	mov	r1, r3
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	f000 fc43 	bl	8009974 <USBD_CtlSendData>
              break;
 80090ee:	e06a      	b.n	80091c6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80090f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	da11      	bge.n	800911c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80090f8:	7bbb      	ldrb	r3, [r7, #14]
 80090fa:	f003 020f 	and.w	r2, r3, #15
 80090fe:	6879      	ldr	r1, [r7, #4]
 8009100:	4613      	mov	r3, r2
 8009102:	009b      	lsls	r3, r3, #2
 8009104:	4413      	add	r3, r2
 8009106:	009b      	lsls	r3, r3, #2
 8009108:	440b      	add	r3, r1
 800910a:	3324      	adds	r3, #36	@ 0x24
 800910c:	881b      	ldrh	r3, [r3, #0]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d117      	bne.n	8009142 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009112:	6839      	ldr	r1, [r7, #0]
 8009114:	6878      	ldr	r0, [r7, #4]
 8009116:	f000 fbb0 	bl	800987a <USBD_CtlError>
                  break;
 800911a:	e054      	b.n	80091c6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800911c:	7bbb      	ldrb	r3, [r7, #14]
 800911e:	f003 020f 	and.w	r2, r3, #15
 8009122:	6879      	ldr	r1, [r7, #4]
 8009124:	4613      	mov	r3, r2
 8009126:	009b      	lsls	r3, r3, #2
 8009128:	4413      	add	r3, r2
 800912a:	009b      	lsls	r3, r3, #2
 800912c:	440b      	add	r3, r1
 800912e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009132:	881b      	ldrh	r3, [r3, #0]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d104      	bne.n	8009142 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009138:	6839      	ldr	r1, [r7, #0]
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	f000 fb9d 	bl	800987a <USBD_CtlError>
                  break;
 8009140:	e041      	b.n	80091c6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009142:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009146:	2b00      	cmp	r3, #0
 8009148:	da0b      	bge.n	8009162 <USBD_StdEPReq+0x2b2>
 800914a:	7bbb      	ldrb	r3, [r7, #14]
 800914c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009150:	4613      	mov	r3, r2
 8009152:	009b      	lsls	r3, r3, #2
 8009154:	4413      	add	r3, r2
 8009156:	009b      	lsls	r3, r3, #2
 8009158:	3310      	adds	r3, #16
 800915a:	687a      	ldr	r2, [r7, #4]
 800915c:	4413      	add	r3, r2
 800915e:	3304      	adds	r3, #4
 8009160:	e00b      	b.n	800917a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009162:	7bbb      	ldrb	r3, [r7, #14]
 8009164:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009168:	4613      	mov	r3, r2
 800916a:	009b      	lsls	r3, r3, #2
 800916c:	4413      	add	r3, r2
 800916e:	009b      	lsls	r3, r3, #2
 8009170:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009174:	687a      	ldr	r2, [r7, #4]
 8009176:	4413      	add	r3, r2
 8009178:	3304      	adds	r3, #4
 800917a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800917c:	7bbb      	ldrb	r3, [r7, #14]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d002      	beq.n	8009188 <USBD_StdEPReq+0x2d8>
 8009182:	7bbb      	ldrb	r3, [r7, #14]
 8009184:	2b80      	cmp	r3, #128	@ 0x80
 8009186:	d103      	bne.n	8009190 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009188:	68bb      	ldr	r3, [r7, #8]
 800918a:	2200      	movs	r2, #0
 800918c:	601a      	str	r2, [r3, #0]
 800918e:	e00e      	b.n	80091ae <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009190:	7bbb      	ldrb	r3, [r7, #14]
 8009192:	4619      	mov	r1, r3
 8009194:	6878      	ldr	r0, [r7, #4]
 8009196:	f001 f8b1 	bl	800a2fc <USBD_LL_IsStallEP>
 800919a:	4603      	mov	r3, r0
 800919c:	2b00      	cmp	r3, #0
 800919e:	d003      	beq.n	80091a8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	2201      	movs	r2, #1
 80091a4:	601a      	str	r2, [r3, #0]
 80091a6:	e002      	b.n	80091ae <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	2200      	movs	r2, #0
 80091ac:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80091ae:	68bb      	ldr	r3, [r7, #8]
 80091b0:	2202      	movs	r2, #2
 80091b2:	4619      	mov	r1, r3
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	f000 fbdd 	bl	8009974 <USBD_CtlSendData>
              break;
 80091ba:	e004      	b.n	80091c6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80091bc:	6839      	ldr	r1, [r7, #0]
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	f000 fb5b 	bl	800987a <USBD_CtlError>
              break;
 80091c4:	bf00      	nop
          }
          break;
 80091c6:	e004      	b.n	80091d2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80091c8:	6839      	ldr	r1, [r7, #0]
 80091ca:	6878      	ldr	r0, [r7, #4]
 80091cc:	f000 fb55 	bl	800987a <USBD_CtlError>
          break;
 80091d0:	bf00      	nop
      }
      break;
 80091d2:	e005      	b.n	80091e0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80091d4:	6839      	ldr	r1, [r7, #0]
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	f000 fb4f 	bl	800987a <USBD_CtlError>
      break;
 80091dc:	e000      	b.n	80091e0 <USBD_StdEPReq+0x330>
      break;
 80091de:	bf00      	nop
  }

  return ret;
 80091e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	3710      	adds	r7, #16
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}
	...

080091ec <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b084      	sub	sp, #16
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
 80091f4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80091f6:	2300      	movs	r3, #0
 80091f8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80091fa:	2300      	movs	r3, #0
 80091fc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80091fe:	2300      	movs	r3, #0
 8009200:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	885b      	ldrh	r3, [r3, #2]
 8009206:	0a1b      	lsrs	r3, r3, #8
 8009208:	b29b      	uxth	r3, r3
 800920a:	3b01      	subs	r3, #1
 800920c:	2b06      	cmp	r3, #6
 800920e:	f200 8128 	bhi.w	8009462 <USBD_GetDescriptor+0x276>
 8009212:	a201      	add	r2, pc, #4	@ (adr r2, 8009218 <USBD_GetDescriptor+0x2c>)
 8009214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009218:	08009235 	.word	0x08009235
 800921c:	0800924d 	.word	0x0800924d
 8009220:	0800928d 	.word	0x0800928d
 8009224:	08009463 	.word	0x08009463
 8009228:	08009463 	.word	0x08009463
 800922c:	08009403 	.word	0x08009403
 8009230:	0800942f 	.word	0x0800942f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	687a      	ldr	r2, [r7, #4]
 800923e:	7c12      	ldrb	r2, [r2, #16]
 8009240:	f107 0108 	add.w	r1, r7, #8
 8009244:	4610      	mov	r0, r2
 8009246:	4798      	blx	r3
 8009248:	60f8      	str	r0, [r7, #12]
      break;
 800924a:	e112      	b.n	8009472 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	7c1b      	ldrb	r3, [r3, #16]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d10d      	bne.n	8009270 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800925a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800925c:	f107 0208 	add.w	r2, r7, #8
 8009260:	4610      	mov	r0, r2
 8009262:	4798      	blx	r3
 8009264:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	3301      	adds	r3, #1
 800926a:	2202      	movs	r2, #2
 800926c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800926e:	e100      	b.n	8009472 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009278:	f107 0208 	add.w	r2, r7, #8
 800927c:	4610      	mov	r0, r2
 800927e:	4798      	blx	r3
 8009280:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	3301      	adds	r3, #1
 8009286:	2202      	movs	r2, #2
 8009288:	701a      	strb	r2, [r3, #0]
      break;
 800928a:	e0f2      	b.n	8009472 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	885b      	ldrh	r3, [r3, #2]
 8009290:	b2db      	uxtb	r3, r3
 8009292:	2b05      	cmp	r3, #5
 8009294:	f200 80ac 	bhi.w	80093f0 <USBD_GetDescriptor+0x204>
 8009298:	a201      	add	r2, pc, #4	@ (adr r2, 80092a0 <USBD_GetDescriptor+0xb4>)
 800929a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800929e:	bf00      	nop
 80092a0:	080092b9 	.word	0x080092b9
 80092a4:	080092ed 	.word	0x080092ed
 80092a8:	08009321 	.word	0x08009321
 80092ac:	08009355 	.word	0x08009355
 80092b0:	08009389 	.word	0x08009389
 80092b4:	080093bd 	.word	0x080093bd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80092be:	685b      	ldr	r3, [r3, #4]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d00b      	beq.n	80092dc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80092ca:	685b      	ldr	r3, [r3, #4]
 80092cc:	687a      	ldr	r2, [r7, #4]
 80092ce:	7c12      	ldrb	r2, [r2, #16]
 80092d0:	f107 0108 	add.w	r1, r7, #8
 80092d4:	4610      	mov	r0, r2
 80092d6:	4798      	blx	r3
 80092d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80092da:	e091      	b.n	8009400 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80092dc:	6839      	ldr	r1, [r7, #0]
 80092de:	6878      	ldr	r0, [r7, #4]
 80092e0:	f000 facb 	bl	800987a <USBD_CtlError>
            err++;
 80092e4:	7afb      	ldrb	r3, [r7, #11]
 80092e6:	3301      	adds	r3, #1
 80092e8:	72fb      	strb	r3, [r7, #11]
          break;
 80092ea:	e089      	b.n	8009400 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80092f2:	689b      	ldr	r3, [r3, #8]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d00b      	beq.n	8009310 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80092fe:	689b      	ldr	r3, [r3, #8]
 8009300:	687a      	ldr	r2, [r7, #4]
 8009302:	7c12      	ldrb	r2, [r2, #16]
 8009304:	f107 0108 	add.w	r1, r7, #8
 8009308:	4610      	mov	r0, r2
 800930a:	4798      	blx	r3
 800930c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800930e:	e077      	b.n	8009400 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009310:	6839      	ldr	r1, [r7, #0]
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f000 fab1 	bl	800987a <USBD_CtlError>
            err++;
 8009318:	7afb      	ldrb	r3, [r7, #11]
 800931a:	3301      	adds	r3, #1
 800931c:	72fb      	strb	r3, [r7, #11]
          break;
 800931e:	e06f      	b.n	8009400 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009326:	68db      	ldr	r3, [r3, #12]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d00b      	beq.n	8009344 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009332:	68db      	ldr	r3, [r3, #12]
 8009334:	687a      	ldr	r2, [r7, #4]
 8009336:	7c12      	ldrb	r2, [r2, #16]
 8009338:	f107 0108 	add.w	r1, r7, #8
 800933c:	4610      	mov	r0, r2
 800933e:	4798      	blx	r3
 8009340:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009342:	e05d      	b.n	8009400 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009344:	6839      	ldr	r1, [r7, #0]
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	f000 fa97 	bl	800987a <USBD_CtlError>
            err++;
 800934c:	7afb      	ldrb	r3, [r7, #11]
 800934e:	3301      	adds	r3, #1
 8009350:	72fb      	strb	r3, [r7, #11]
          break;
 8009352:	e055      	b.n	8009400 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800935a:	691b      	ldr	r3, [r3, #16]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d00b      	beq.n	8009378 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009366:	691b      	ldr	r3, [r3, #16]
 8009368:	687a      	ldr	r2, [r7, #4]
 800936a:	7c12      	ldrb	r2, [r2, #16]
 800936c:	f107 0108 	add.w	r1, r7, #8
 8009370:	4610      	mov	r0, r2
 8009372:	4798      	blx	r3
 8009374:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009376:	e043      	b.n	8009400 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009378:	6839      	ldr	r1, [r7, #0]
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f000 fa7d 	bl	800987a <USBD_CtlError>
            err++;
 8009380:	7afb      	ldrb	r3, [r7, #11]
 8009382:	3301      	adds	r3, #1
 8009384:	72fb      	strb	r3, [r7, #11]
          break;
 8009386:	e03b      	b.n	8009400 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800938e:	695b      	ldr	r3, [r3, #20]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d00b      	beq.n	80093ac <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800939a:	695b      	ldr	r3, [r3, #20]
 800939c:	687a      	ldr	r2, [r7, #4]
 800939e:	7c12      	ldrb	r2, [r2, #16]
 80093a0:	f107 0108 	add.w	r1, r7, #8
 80093a4:	4610      	mov	r0, r2
 80093a6:	4798      	blx	r3
 80093a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80093aa:	e029      	b.n	8009400 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80093ac:	6839      	ldr	r1, [r7, #0]
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	f000 fa63 	bl	800987a <USBD_CtlError>
            err++;
 80093b4:	7afb      	ldrb	r3, [r7, #11]
 80093b6:	3301      	adds	r3, #1
 80093b8:	72fb      	strb	r3, [r7, #11]
          break;
 80093ba:	e021      	b.n	8009400 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80093c2:	699b      	ldr	r3, [r3, #24]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d00b      	beq.n	80093e0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80093ce:	699b      	ldr	r3, [r3, #24]
 80093d0:	687a      	ldr	r2, [r7, #4]
 80093d2:	7c12      	ldrb	r2, [r2, #16]
 80093d4:	f107 0108 	add.w	r1, r7, #8
 80093d8:	4610      	mov	r0, r2
 80093da:	4798      	blx	r3
 80093dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80093de:	e00f      	b.n	8009400 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80093e0:	6839      	ldr	r1, [r7, #0]
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f000 fa49 	bl	800987a <USBD_CtlError>
            err++;
 80093e8:	7afb      	ldrb	r3, [r7, #11]
 80093ea:	3301      	adds	r3, #1
 80093ec:	72fb      	strb	r3, [r7, #11]
          break;
 80093ee:	e007      	b.n	8009400 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80093f0:	6839      	ldr	r1, [r7, #0]
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	f000 fa41 	bl	800987a <USBD_CtlError>
          err++;
 80093f8:	7afb      	ldrb	r3, [r7, #11]
 80093fa:	3301      	adds	r3, #1
 80093fc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80093fe:	bf00      	nop
      }
      break;
 8009400:	e037      	b.n	8009472 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	7c1b      	ldrb	r3, [r3, #16]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d109      	bne.n	800941e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009410:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009412:	f107 0208 	add.w	r2, r7, #8
 8009416:	4610      	mov	r0, r2
 8009418:	4798      	blx	r3
 800941a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800941c:	e029      	b.n	8009472 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800941e:	6839      	ldr	r1, [r7, #0]
 8009420:	6878      	ldr	r0, [r7, #4]
 8009422:	f000 fa2a 	bl	800987a <USBD_CtlError>
        err++;
 8009426:	7afb      	ldrb	r3, [r7, #11]
 8009428:	3301      	adds	r3, #1
 800942a:	72fb      	strb	r3, [r7, #11]
      break;
 800942c:	e021      	b.n	8009472 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	7c1b      	ldrb	r3, [r3, #16]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d10d      	bne.n	8009452 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800943c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800943e:	f107 0208 	add.w	r2, r7, #8
 8009442:	4610      	mov	r0, r2
 8009444:	4798      	blx	r3
 8009446:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	3301      	adds	r3, #1
 800944c:	2207      	movs	r2, #7
 800944e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009450:	e00f      	b.n	8009472 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009452:	6839      	ldr	r1, [r7, #0]
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	f000 fa10 	bl	800987a <USBD_CtlError>
        err++;
 800945a:	7afb      	ldrb	r3, [r7, #11]
 800945c:	3301      	adds	r3, #1
 800945e:	72fb      	strb	r3, [r7, #11]
      break;
 8009460:	e007      	b.n	8009472 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009462:	6839      	ldr	r1, [r7, #0]
 8009464:	6878      	ldr	r0, [r7, #4]
 8009466:	f000 fa08 	bl	800987a <USBD_CtlError>
      err++;
 800946a:	7afb      	ldrb	r3, [r7, #11]
 800946c:	3301      	adds	r3, #1
 800946e:	72fb      	strb	r3, [r7, #11]
      break;
 8009470:	bf00      	nop
  }

  if (err != 0U)
 8009472:	7afb      	ldrb	r3, [r7, #11]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d11e      	bne.n	80094b6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	88db      	ldrh	r3, [r3, #6]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d016      	beq.n	80094ae <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009480:	893b      	ldrh	r3, [r7, #8]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d00e      	beq.n	80094a4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	88da      	ldrh	r2, [r3, #6]
 800948a:	893b      	ldrh	r3, [r7, #8]
 800948c:	4293      	cmp	r3, r2
 800948e:	bf28      	it	cs
 8009490:	4613      	movcs	r3, r2
 8009492:	b29b      	uxth	r3, r3
 8009494:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009496:	893b      	ldrh	r3, [r7, #8]
 8009498:	461a      	mov	r2, r3
 800949a:	68f9      	ldr	r1, [r7, #12]
 800949c:	6878      	ldr	r0, [r7, #4]
 800949e:	f000 fa69 	bl	8009974 <USBD_CtlSendData>
 80094a2:	e009      	b.n	80094b8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80094a4:	6839      	ldr	r1, [r7, #0]
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	f000 f9e7 	bl	800987a <USBD_CtlError>
 80094ac:	e004      	b.n	80094b8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80094ae:	6878      	ldr	r0, [r7, #4]
 80094b0:	f000 faba 	bl	8009a28 <USBD_CtlSendStatus>
 80094b4:	e000      	b.n	80094b8 <USBD_GetDescriptor+0x2cc>
    return;
 80094b6:	bf00      	nop
  }
}
 80094b8:	3710      	adds	r7, #16
 80094ba:	46bd      	mov	sp, r7
 80094bc:	bd80      	pop	{r7, pc}
 80094be:	bf00      	nop

080094c0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b084      	sub	sp, #16
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
 80094c8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	889b      	ldrh	r3, [r3, #4]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d131      	bne.n	8009536 <USBD_SetAddress+0x76>
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	88db      	ldrh	r3, [r3, #6]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d12d      	bne.n	8009536 <USBD_SetAddress+0x76>
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	885b      	ldrh	r3, [r3, #2]
 80094de:	2b7f      	cmp	r3, #127	@ 0x7f
 80094e0:	d829      	bhi.n	8009536 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	885b      	ldrh	r3, [r3, #2]
 80094e6:	b2db      	uxtb	r3, r3
 80094e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80094ec:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80094f4:	b2db      	uxtb	r3, r3
 80094f6:	2b03      	cmp	r3, #3
 80094f8:	d104      	bne.n	8009504 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80094fa:	6839      	ldr	r1, [r7, #0]
 80094fc:	6878      	ldr	r0, [r7, #4]
 80094fe:	f000 f9bc 	bl	800987a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009502:	e01d      	b.n	8009540 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	7bfa      	ldrb	r2, [r7, #15]
 8009508:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800950c:	7bfb      	ldrb	r3, [r7, #15]
 800950e:	4619      	mov	r1, r3
 8009510:	6878      	ldr	r0, [r7, #4]
 8009512:	f000 ff1f 	bl	800a354 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f000 fa86 	bl	8009a28 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800951c:	7bfb      	ldrb	r3, [r7, #15]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d004      	beq.n	800952c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2202      	movs	r2, #2
 8009526:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800952a:	e009      	b.n	8009540 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2201      	movs	r2, #1
 8009530:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009534:	e004      	b.n	8009540 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009536:	6839      	ldr	r1, [r7, #0]
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f000 f99e 	bl	800987a <USBD_CtlError>
  }
}
 800953e:	bf00      	nop
 8009540:	bf00      	nop
 8009542:	3710      	adds	r7, #16
 8009544:	46bd      	mov	sp, r7
 8009546:	bd80      	pop	{r7, pc}

08009548 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b084      	sub	sp, #16
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
 8009550:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009552:	2300      	movs	r3, #0
 8009554:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	885b      	ldrh	r3, [r3, #2]
 800955a:	b2da      	uxtb	r2, r3
 800955c:	4b4e      	ldr	r3, [pc, #312]	@ (8009698 <USBD_SetConfig+0x150>)
 800955e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009560:	4b4d      	ldr	r3, [pc, #308]	@ (8009698 <USBD_SetConfig+0x150>)
 8009562:	781b      	ldrb	r3, [r3, #0]
 8009564:	2b01      	cmp	r3, #1
 8009566:	d905      	bls.n	8009574 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009568:	6839      	ldr	r1, [r7, #0]
 800956a:	6878      	ldr	r0, [r7, #4]
 800956c:	f000 f985 	bl	800987a <USBD_CtlError>
    return USBD_FAIL;
 8009570:	2303      	movs	r3, #3
 8009572:	e08c      	b.n	800968e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800957a:	b2db      	uxtb	r3, r3
 800957c:	2b02      	cmp	r3, #2
 800957e:	d002      	beq.n	8009586 <USBD_SetConfig+0x3e>
 8009580:	2b03      	cmp	r3, #3
 8009582:	d029      	beq.n	80095d8 <USBD_SetConfig+0x90>
 8009584:	e075      	b.n	8009672 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009586:	4b44      	ldr	r3, [pc, #272]	@ (8009698 <USBD_SetConfig+0x150>)
 8009588:	781b      	ldrb	r3, [r3, #0]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d020      	beq.n	80095d0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800958e:	4b42      	ldr	r3, [pc, #264]	@ (8009698 <USBD_SetConfig+0x150>)
 8009590:	781b      	ldrb	r3, [r3, #0]
 8009592:	461a      	mov	r2, r3
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009598:	4b3f      	ldr	r3, [pc, #252]	@ (8009698 <USBD_SetConfig+0x150>)
 800959a:	781b      	ldrb	r3, [r3, #0]
 800959c:	4619      	mov	r1, r3
 800959e:	6878      	ldr	r0, [r7, #4]
 80095a0:	f7fe ffe3 	bl	800856a <USBD_SetClassConfig>
 80095a4:	4603      	mov	r3, r0
 80095a6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80095a8:	7bfb      	ldrb	r3, [r7, #15]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d008      	beq.n	80095c0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80095ae:	6839      	ldr	r1, [r7, #0]
 80095b0:	6878      	ldr	r0, [r7, #4]
 80095b2:	f000 f962 	bl	800987a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2202      	movs	r2, #2
 80095ba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80095be:	e065      	b.n	800968c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	f000 fa31 	bl	8009a28 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2203      	movs	r2, #3
 80095ca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80095ce:	e05d      	b.n	800968c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80095d0:	6878      	ldr	r0, [r7, #4]
 80095d2:	f000 fa29 	bl	8009a28 <USBD_CtlSendStatus>
      break;
 80095d6:	e059      	b.n	800968c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80095d8:	4b2f      	ldr	r3, [pc, #188]	@ (8009698 <USBD_SetConfig+0x150>)
 80095da:	781b      	ldrb	r3, [r3, #0]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d112      	bne.n	8009606 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2202      	movs	r2, #2
 80095e4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80095e8:	4b2b      	ldr	r3, [pc, #172]	@ (8009698 <USBD_SetConfig+0x150>)
 80095ea:	781b      	ldrb	r3, [r3, #0]
 80095ec:	461a      	mov	r2, r3
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80095f2:	4b29      	ldr	r3, [pc, #164]	@ (8009698 <USBD_SetConfig+0x150>)
 80095f4:	781b      	ldrb	r3, [r3, #0]
 80095f6:	4619      	mov	r1, r3
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	f7fe ffd2 	bl	80085a2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80095fe:	6878      	ldr	r0, [r7, #4]
 8009600:	f000 fa12 	bl	8009a28 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009604:	e042      	b.n	800968c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009606:	4b24      	ldr	r3, [pc, #144]	@ (8009698 <USBD_SetConfig+0x150>)
 8009608:	781b      	ldrb	r3, [r3, #0]
 800960a:	461a      	mov	r2, r3
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	685b      	ldr	r3, [r3, #4]
 8009610:	429a      	cmp	r2, r3
 8009612:	d02a      	beq.n	800966a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	685b      	ldr	r3, [r3, #4]
 8009618:	b2db      	uxtb	r3, r3
 800961a:	4619      	mov	r1, r3
 800961c:	6878      	ldr	r0, [r7, #4]
 800961e:	f7fe ffc0 	bl	80085a2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009622:	4b1d      	ldr	r3, [pc, #116]	@ (8009698 <USBD_SetConfig+0x150>)
 8009624:	781b      	ldrb	r3, [r3, #0]
 8009626:	461a      	mov	r2, r3
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800962c:	4b1a      	ldr	r3, [pc, #104]	@ (8009698 <USBD_SetConfig+0x150>)
 800962e:	781b      	ldrb	r3, [r3, #0]
 8009630:	4619      	mov	r1, r3
 8009632:	6878      	ldr	r0, [r7, #4]
 8009634:	f7fe ff99 	bl	800856a <USBD_SetClassConfig>
 8009638:	4603      	mov	r3, r0
 800963a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800963c:	7bfb      	ldrb	r3, [r7, #15]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d00f      	beq.n	8009662 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009642:	6839      	ldr	r1, [r7, #0]
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	f000 f918 	bl	800987a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	685b      	ldr	r3, [r3, #4]
 800964e:	b2db      	uxtb	r3, r3
 8009650:	4619      	mov	r1, r3
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	f7fe ffa5 	bl	80085a2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2202      	movs	r2, #2
 800965c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009660:	e014      	b.n	800968c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009662:	6878      	ldr	r0, [r7, #4]
 8009664:	f000 f9e0 	bl	8009a28 <USBD_CtlSendStatus>
      break;
 8009668:	e010      	b.n	800968c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800966a:	6878      	ldr	r0, [r7, #4]
 800966c:	f000 f9dc 	bl	8009a28 <USBD_CtlSendStatus>
      break;
 8009670:	e00c      	b.n	800968c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009672:	6839      	ldr	r1, [r7, #0]
 8009674:	6878      	ldr	r0, [r7, #4]
 8009676:	f000 f900 	bl	800987a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800967a:	4b07      	ldr	r3, [pc, #28]	@ (8009698 <USBD_SetConfig+0x150>)
 800967c:	781b      	ldrb	r3, [r3, #0]
 800967e:	4619      	mov	r1, r3
 8009680:	6878      	ldr	r0, [r7, #4]
 8009682:	f7fe ff8e 	bl	80085a2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009686:	2303      	movs	r3, #3
 8009688:	73fb      	strb	r3, [r7, #15]
      break;
 800968a:	bf00      	nop
  }

  return ret;
 800968c:	7bfb      	ldrb	r3, [r7, #15]
}
 800968e:	4618      	mov	r0, r3
 8009690:	3710      	adds	r7, #16
 8009692:	46bd      	mov	sp, r7
 8009694:	bd80      	pop	{r7, pc}
 8009696:	bf00      	nop
 8009698:	2000077c 	.word	0x2000077c

0800969c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b082      	sub	sp, #8
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
 80096a4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	88db      	ldrh	r3, [r3, #6]
 80096aa:	2b01      	cmp	r3, #1
 80096ac:	d004      	beq.n	80096b8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80096ae:	6839      	ldr	r1, [r7, #0]
 80096b0:	6878      	ldr	r0, [r7, #4]
 80096b2:	f000 f8e2 	bl	800987a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80096b6:	e023      	b.n	8009700 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80096be:	b2db      	uxtb	r3, r3
 80096c0:	2b02      	cmp	r3, #2
 80096c2:	dc02      	bgt.n	80096ca <USBD_GetConfig+0x2e>
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	dc03      	bgt.n	80096d0 <USBD_GetConfig+0x34>
 80096c8:	e015      	b.n	80096f6 <USBD_GetConfig+0x5a>
 80096ca:	2b03      	cmp	r3, #3
 80096cc:	d00b      	beq.n	80096e6 <USBD_GetConfig+0x4a>
 80096ce:	e012      	b.n	80096f6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2200      	movs	r2, #0
 80096d4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	3308      	adds	r3, #8
 80096da:	2201      	movs	r2, #1
 80096dc:	4619      	mov	r1, r3
 80096de:	6878      	ldr	r0, [r7, #4]
 80096e0:	f000 f948 	bl	8009974 <USBD_CtlSendData>
        break;
 80096e4:	e00c      	b.n	8009700 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	3304      	adds	r3, #4
 80096ea:	2201      	movs	r2, #1
 80096ec:	4619      	mov	r1, r3
 80096ee:	6878      	ldr	r0, [r7, #4]
 80096f0:	f000 f940 	bl	8009974 <USBD_CtlSendData>
        break;
 80096f4:	e004      	b.n	8009700 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80096f6:	6839      	ldr	r1, [r7, #0]
 80096f8:	6878      	ldr	r0, [r7, #4]
 80096fa:	f000 f8be 	bl	800987a <USBD_CtlError>
        break;
 80096fe:	bf00      	nop
}
 8009700:	bf00      	nop
 8009702:	3708      	adds	r7, #8
 8009704:	46bd      	mov	sp, r7
 8009706:	bd80      	pop	{r7, pc}

08009708 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b082      	sub	sp, #8
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
 8009710:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009718:	b2db      	uxtb	r3, r3
 800971a:	3b01      	subs	r3, #1
 800971c:	2b02      	cmp	r3, #2
 800971e:	d81e      	bhi.n	800975e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	88db      	ldrh	r3, [r3, #6]
 8009724:	2b02      	cmp	r3, #2
 8009726:	d004      	beq.n	8009732 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009728:	6839      	ldr	r1, [r7, #0]
 800972a:	6878      	ldr	r0, [r7, #4]
 800972c:	f000 f8a5 	bl	800987a <USBD_CtlError>
        break;
 8009730:	e01a      	b.n	8009768 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	2201      	movs	r2, #1
 8009736:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800973e:	2b00      	cmp	r3, #0
 8009740:	d005      	beq.n	800974e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	68db      	ldr	r3, [r3, #12]
 8009746:	f043 0202 	orr.w	r2, r3, #2
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	330c      	adds	r3, #12
 8009752:	2202      	movs	r2, #2
 8009754:	4619      	mov	r1, r3
 8009756:	6878      	ldr	r0, [r7, #4]
 8009758:	f000 f90c 	bl	8009974 <USBD_CtlSendData>
      break;
 800975c:	e004      	b.n	8009768 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800975e:	6839      	ldr	r1, [r7, #0]
 8009760:	6878      	ldr	r0, [r7, #4]
 8009762:	f000 f88a 	bl	800987a <USBD_CtlError>
      break;
 8009766:	bf00      	nop
  }
}
 8009768:	bf00      	nop
 800976a:	3708      	adds	r7, #8
 800976c:	46bd      	mov	sp, r7
 800976e:	bd80      	pop	{r7, pc}

08009770 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b082      	sub	sp, #8
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
 8009778:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	885b      	ldrh	r3, [r3, #2]
 800977e:	2b01      	cmp	r3, #1
 8009780:	d107      	bne.n	8009792 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	2201      	movs	r2, #1
 8009786:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800978a:	6878      	ldr	r0, [r7, #4]
 800978c:	f000 f94c 	bl	8009a28 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009790:	e013      	b.n	80097ba <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	885b      	ldrh	r3, [r3, #2]
 8009796:	2b02      	cmp	r3, #2
 8009798:	d10b      	bne.n	80097b2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	889b      	ldrh	r3, [r3, #4]
 800979e:	0a1b      	lsrs	r3, r3, #8
 80097a0:	b29b      	uxth	r3, r3
 80097a2:	b2da      	uxtb	r2, r3
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	f000 f93c 	bl	8009a28 <USBD_CtlSendStatus>
}
 80097b0:	e003      	b.n	80097ba <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80097b2:	6839      	ldr	r1, [r7, #0]
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f000 f860 	bl	800987a <USBD_CtlError>
}
 80097ba:	bf00      	nop
 80097bc:	3708      	adds	r7, #8
 80097be:	46bd      	mov	sp, r7
 80097c0:	bd80      	pop	{r7, pc}

080097c2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097c2:	b580      	push	{r7, lr}
 80097c4:	b082      	sub	sp, #8
 80097c6:	af00      	add	r7, sp, #0
 80097c8:	6078      	str	r0, [r7, #4]
 80097ca:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80097d2:	b2db      	uxtb	r3, r3
 80097d4:	3b01      	subs	r3, #1
 80097d6:	2b02      	cmp	r3, #2
 80097d8:	d80b      	bhi.n	80097f2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	885b      	ldrh	r3, [r3, #2]
 80097de:	2b01      	cmp	r3, #1
 80097e0:	d10c      	bne.n	80097fc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2200      	movs	r2, #0
 80097e6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80097ea:	6878      	ldr	r0, [r7, #4]
 80097ec:	f000 f91c 	bl	8009a28 <USBD_CtlSendStatus>
      }
      break;
 80097f0:	e004      	b.n	80097fc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80097f2:	6839      	ldr	r1, [r7, #0]
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	f000 f840 	bl	800987a <USBD_CtlError>
      break;
 80097fa:	e000      	b.n	80097fe <USBD_ClrFeature+0x3c>
      break;
 80097fc:	bf00      	nop
  }
}
 80097fe:	bf00      	nop
 8009800:	3708      	adds	r7, #8
 8009802:	46bd      	mov	sp, r7
 8009804:	bd80      	pop	{r7, pc}

08009806 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009806:	b580      	push	{r7, lr}
 8009808:	b084      	sub	sp, #16
 800980a:	af00      	add	r7, sp, #0
 800980c:	6078      	str	r0, [r7, #4]
 800980e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	781a      	ldrb	r2, [r3, #0]
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	3301      	adds	r3, #1
 8009820:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	781a      	ldrb	r2, [r3, #0]
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	3301      	adds	r3, #1
 800982e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009830:	68f8      	ldr	r0, [r7, #12]
 8009832:	f7ff fa40 	bl	8008cb6 <SWAPBYTE>
 8009836:	4603      	mov	r3, r0
 8009838:	461a      	mov	r2, r3
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	3301      	adds	r3, #1
 8009842:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	3301      	adds	r3, #1
 8009848:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800984a:	68f8      	ldr	r0, [r7, #12]
 800984c:	f7ff fa33 	bl	8008cb6 <SWAPBYTE>
 8009850:	4603      	mov	r3, r0
 8009852:	461a      	mov	r2, r3
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	3301      	adds	r3, #1
 800985c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	3301      	adds	r3, #1
 8009862:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009864:	68f8      	ldr	r0, [r7, #12]
 8009866:	f7ff fa26 	bl	8008cb6 <SWAPBYTE>
 800986a:	4603      	mov	r3, r0
 800986c:	461a      	mov	r2, r3
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	80da      	strh	r2, [r3, #6]
}
 8009872:	bf00      	nop
 8009874:	3710      	adds	r7, #16
 8009876:	46bd      	mov	sp, r7
 8009878:	bd80      	pop	{r7, pc}

0800987a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800987a:	b580      	push	{r7, lr}
 800987c:	b082      	sub	sp, #8
 800987e:	af00      	add	r7, sp, #0
 8009880:	6078      	str	r0, [r7, #4]
 8009882:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009884:	2180      	movs	r1, #128	@ 0x80
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f000 fcfa 	bl	800a280 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800988c:	2100      	movs	r1, #0
 800988e:	6878      	ldr	r0, [r7, #4]
 8009890:	f000 fcf6 	bl	800a280 <USBD_LL_StallEP>
}
 8009894:	bf00      	nop
 8009896:	3708      	adds	r7, #8
 8009898:	46bd      	mov	sp, r7
 800989a:	bd80      	pop	{r7, pc}

0800989c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b086      	sub	sp, #24
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	60f8      	str	r0, [r7, #12]
 80098a4:	60b9      	str	r1, [r7, #8]
 80098a6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80098a8:	2300      	movs	r3, #0
 80098aa:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d042      	beq.n	8009938 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80098b6:	6938      	ldr	r0, [r7, #16]
 80098b8:	f000 f842 	bl	8009940 <USBD_GetLen>
 80098bc:	4603      	mov	r3, r0
 80098be:	3301      	adds	r3, #1
 80098c0:	005b      	lsls	r3, r3, #1
 80098c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80098c6:	d808      	bhi.n	80098da <USBD_GetString+0x3e>
 80098c8:	6938      	ldr	r0, [r7, #16]
 80098ca:	f000 f839 	bl	8009940 <USBD_GetLen>
 80098ce:	4603      	mov	r3, r0
 80098d0:	3301      	adds	r3, #1
 80098d2:	b29b      	uxth	r3, r3
 80098d4:	005b      	lsls	r3, r3, #1
 80098d6:	b29a      	uxth	r2, r3
 80098d8:	e001      	b.n	80098de <USBD_GetString+0x42>
 80098da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80098e2:	7dfb      	ldrb	r3, [r7, #23]
 80098e4:	68ba      	ldr	r2, [r7, #8]
 80098e6:	4413      	add	r3, r2
 80098e8:	687a      	ldr	r2, [r7, #4]
 80098ea:	7812      	ldrb	r2, [r2, #0]
 80098ec:	701a      	strb	r2, [r3, #0]
  idx++;
 80098ee:	7dfb      	ldrb	r3, [r7, #23]
 80098f0:	3301      	adds	r3, #1
 80098f2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80098f4:	7dfb      	ldrb	r3, [r7, #23]
 80098f6:	68ba      	ldr	r2, [r7, #8]
 80098f8:	4413      	add	r3, r2
 80098fa:	2203      	movs	r2, #3
 80098fc:	701a      	strb	r2, [r3, #0]
  idx++;
 80098fe:	7dfb      	ldrb	r3, [r7, #23]
 8009900:	3301      	adds	r3, #1
 8009902:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009904:	e013      	b.n	800992e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8009906:	7dfb      	ldrb	r3, [r7, #23]
 8009908:	68ba      	ldr	r2, [r7, #8]
 800990a:	4413      	add	r3, r2
 800990c:	693a      	ldr	r2, [r7, #16]
 800990e:	7812      	ldrb	r2, [r2, #0]
 8009910:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009912:	693b      	ldr	r3, [r7, #16]
 8009914:	3301      	adds	r3, #1
 8009916:	613b      	str	r3, [r7, #16]
    idx++;
 8009918:	7dfb      	ldrb	r3, [r7, #23]
 800991a:	3301      	adds	r3, #1
 800991c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800991e:	7dfb      	ldrb	r3, [r7, #23]
 8009920:	68ba      	ldr	r2, [r7, #8]
 8009922:	4413      	add	r3, r2
 8009924:	2200      	movs	r2, #0
 8009926:	701a      	strb	r2, [r3, #0]
    idx++;
 8009928:	7dfb      	ldrb	r3, [r7, #23]
 800992a:	3301      	adds	r3, #1
 800992c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800992e:	693b      	ldr	r3, [r7, #16]
 8009930:	781b      	ldrb	r3, [r3, #0]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d1e7      	bne.n	8009906 <USBD_GetString+0x6a>
 8009936:	e000      	b.n	800993a <USBD_GetString+0x9e>
    return;
 8009938:	bf00      	nop
  }
}
 800993a:	3718      	adds	r7, #24
 800993c:	46bd      	mov	sp, r7
 800993e:	bd80      	pop	{r7, pc}

08009940 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009940:	b480      	push	{r7}
 8009942:	b085      	sub	sp, #20
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009948:	2300      	movs	r3, #0
 800994a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009950:	e005      	b.n	800995e <USBD_GetLen+0x1e>
  {
    len++;
 8009952:	7bfb      	ldrb	r3, [r7, #15]
 8009954:	3301      	adds	r3, #1
 8009956:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009958:	68bb      	ldr	r3, [r7, #8]
 800995a:	3301      	adds	r3, #1
 800995c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800995e:	68bb      	ldr	r3, [r7, #8]
 8009960:	781b      	ldrb	r3, [r3, #0]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d1f5      	bne.n	8009952 <USBD_GetLen+0x12>
  }

  return len;
 8009966:	7bfb      	ldrb	r3, [r7, #15]
}
 8009968:	4618      	mov	r0, r3
 800996a:	3714      	adds	r7, #20
 800996c:	46bd      	mov	sp, r7
 800996e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009972:	4770      	bx	lr

08009974 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b084      	sub	sp, #16
 8009978:	af00      	add	r7, sp, #0
 800997a:	60f8      	str	r0, [r7, #12]
 800997c:	60b9      	str	r1, [r7, #8]
 800997e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	2202      	movs	r2, #2
 8009984:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	687a      	ldr	r2, [r7, #4]
 800998c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	687a      	ldr	r2, [r7, #4]
 8009992:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	68ba      	ldr	r2, [r7, #8]
 8009998:	2100      	movs	r1, #0
 800999a:	68f8      	ldr	r0, [r7, #12]
 800999c:	f000 fcf9 	bl	800a392 <USBD_LL_Transmit>

  return USBD_OK;
 80099a0:	2300      	movs	r3, #0
}
 80099a2:	4618      	mov	r0, r3
 80099a4:	3710      	adds	r7, #16
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bd80      	pop	{r7, pc}

080099aa <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80099aa:	b580      	push	{r7, lr}
 80099ac:	b084      	sub	sp, #16
 80099ae:	af00      	add	r7, sp, #0
 80099b0:	60f8      	str	r0, [r7, #12]
 80099b2:	60b9      	str	r1, [r7, #8]
 80099b4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	68ba      	ldr	r2, [r7, #8]
 80099ba:	2100      	movs	r1, #0
 80099bc:	68f8      	ldr	r0, [r7, #12]
 80099be:	f000 fce8 	bl	800a392 <USBD_LL_Transmit>

  return USBD_OK;
 80099c2:	2300      	movs	r3, #0
}
 80099c4:	4618      	mov	r0, r3
 80099c6:	3710      	adds	r7, #16
 80099c8:	46bd      	mov	sp, r7
 80099ca:	bd80      	pop	{r7, pc}

080099cc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b084      	sub	sp, #16
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	60f8      	str	r0, [r7, #12]
 80099d4:	60b9      	str	r1, [r7, #8]
 80099d6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	2203      	movs	r2, #3
 80099dc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	687a      	ldr	r2, [r7, #4]
 80099e4:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	687a      	ldr	r2, [r7, #4]
 80099ec:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	68ba      	ldr	r2, [r7, #8]
 80099f4:	2100      	movs	r1, #0
 80099f6:	68f8      	ldr	r0, [r7, #12]
 80099f8:	f000 fcec 	bl	800a3d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80099fc:	2300      	movs	r3, #0
}
 80099fe:	4618      	mov	r0, r3
 8009a00:	3710      	adds	r7, #16
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bd80      	pop	{r7, pc}

08009a06 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009a06:	b580      	push	{r7, lr}
 8009a08:	b084      	sub	sp, #16
 8009a0a:	af00      	add	r7, sp, #0
 8009a0c:	60f8      	str	r0, [r7, #12]
 8009a0e:	60b9      	str	r1, [r7, #8]
 8009a10:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	68ba      	ldr	r2, [r7, #8]
 8009a16:	2100      	movs	r1, #0
 8009a18:	68f8      	ldr	r0, [r7, #12]
 8009a1a:	f000 fcdb 	bl	800a3d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009a1e:	2300      	movs	r3, #0
}
 8009a20:	4618      	mov	r0, r3
 8009a22:	3710      	adds	r7, #16
 8009a24:	46bd      	mov	sp, r7
 8009a26:	bd80      	pop	{r7, pc}

08009a28 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b082      	sub	sp, #8
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	2204      	movs	r2, #4
 8009a34:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009a38:	2300      	movs	r3, #0
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	2100      	movs	r1, #0
 8009a3e:	6878      	ldr	r0, [r7, #4]
 8009a40:	f000 fca7 	bl	800a392 <USBD_LL_Transmit>

  return USBD_OK;
 8009a44:	2300      	movs	r3, #0
}
 8009a46:	4618      	mov	r0, r3
 8009a48:	3708      	adds	r7, #8
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	bd80      	pop	{r7, pc}

08009a4e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009a4e:	b580      	push	{r7, lr}
 8009a50:	b082      	sub	sp, #8
 8009a52:	af00      	add	r7, sp, #0
 8009a54:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	2205      	movs	r2, #5
 8009a5a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009a5e:	2300      	movs	r3, #0
 8009a60:	2200      	movs	r2, #0
 8009a62:	2100      	movs	r1, #0
 8009a64:	6878      	ldr	r0, [r7, #4]
 8009a66:	f000 fcb5 	bl	800a3d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009a6a:	2300      	movs	r3, #0
}
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	3708      	adds	r7, #8
 8009a70:	46bd      	mov	sp, r7
 8009a72:	bd80      	pop	{r7, pc}

08009a74 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009a78:	2200      	movs	r2, #0
 8009a7a:	4912      	ldr	r1, [pc, #72]	@ (8009ac4 <MX_USB_DEVICE_Init+0x50>)
 8009a7c:	4812      	ldr	r0, [pc, #72]	@ (8009ac8 <MX_USB_DEVICE_Init+0x54>)
 8009a7e:	f7fe fcf7 	bl	8008470 <USBD_Init>
 8009a82:	4603      	mov	r3, r0
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d001      	beq.n	8009a8c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009a88:	f7f7 fd20 	bl	80014cc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009a8c:	490f      	ldr	r1, [pc, #60]	@ (8009acc <MX_USB_DEVICE_Init+0x58>)
 8009a8e:	480e      	ldr	r0, [pc, #56]	@ (8009ac8 <MX_USB_DEVICE_Init+0x54>)
 8009a90:	f7fe fd1e 	bl	80084d0 <USBD_RegisterClass>
 8009a94:	4603      	mov	r3, r0
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d001      	beq.n	8009a9e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009a9a:	f7f7 fd17 	bl	80014cc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009a9e:	490c      	ldr	r1, [pc, #48]	@ (8009ad0 <MX_USB_DEVICE_Init+0x5c>)
 8009aa0:	4809      	ldr	r0, [pc, #36]	@ (8009ac8 <MX_USB_DEVICE_Init+0x54>)
 8009aa2:	f7fe fc15 	bl	80082d0 <USBD_CDC_RegisterInterface>
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d001      	beq.n	8009ab0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009aac:	f7f7 fd0e 	bl	80014cc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009ab0:	4805      	ldr	r0, [pc, #20]	@ (8009ac8 <MX_USB_DEVICE_Init+0x54>)
 8009ab2:	f7fe fd43 	bl	800853c <USBD_Start>
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d001      	beq.n	8009ac0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009abc:	f7f7 fd06 	bl	80014cc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009ac0:	bf00      	nop
 8009ac2:	bd80      	pop	{r7, pc}
 8009ac4:	200000ac 	.word	0x200000ac
 8009ac8:	20000780 	.word	0x20000780
 8009acc:	20000018 	.word	0x20000018
 8009ad0:	20000098 	.word	0x20000098

08009ad4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009ad8:	2200      	movs	r2, #0
 8009ada:	4905      	ldr	r1, [pc, #20]	@ (8009af0 <CDC_Init_FS+0x1c>)
 8009adc:	4805      	ldr	r0, [pc, #20]	@ (8009af4 <CDC_Init_FS+0x20>)
 8009ade:	f7fe fc11 	bl	8008304 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009ae2:	4905      	ldr	r1, [pc, #20]	@ (8009af8 <CDC_Init_FS+0x24>)
 8009ae4:	4803      	ldr	r0, [pc, #12]	@ (8009af4 <CDC_Init_FS+0x20>)
 8009ae6:	f7fe fc2f 	bl	8008348 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009aea:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009aec:	4618      	mov	r0, r3
 8009aee:	bd80      	pop	{r7, pc}
 8009af0:	2000125c 	.word	0x2000125c
 8009af4:	20000780 	.word	0x20000780
 8009af8:	20000a5c 	.word	0x20000a5c

08009afc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009afc:	b480      	push	{r7}
 8009afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009b00:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009b02:	4618      	mov	r0, r3
 8009b04:	46bd      	mov	sp, r7
 8009b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0a:	4770      	bx	lr

08009b0c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009b0c:	b480      	push	{r7}
 8009b0e:	b083      	sub	sp, #12
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	4603      	mov	r3, r0
 8009b14:	6039      	str	r1, [r7, #0]
 8009b16:	71fb      	strb	r3, [r7, #7]
 8009b18:	4613      	mov	r3, r2
 8009b1a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009b1c:	79fb      	ldrb	r3, [r7, #7]
 8009b1e:	2b23      	cmp	r3, #35	@ 0x23
 8009b20:	d84a      	bhi.n	8009bb8 <CDC_Control_FS+0xac>
 8009b22:	a201      	add	r2, pc, #4	@ (adr r2, 8009b28 <CDC_Control_FS+0x1c>)
 8009b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b28:	08009bb9 	.word	0x08009bb9
 8009b2c:	08009bb9 	.word	0x08009bb9
 8009b30:	08009bb9 	.word	0x08009bb9
 8009b34:	08009bb9 	.word	0x08009bb9
 8009b38:	08009bb9 	.word	0x08009bb9
 8009b3c:	08009bb9 	.word	0x08009bb9
 8009b40:	08009bb9 	.word	0x08009bb9
 8009b44:	08009bb9 	.word	0x08009bb9
 8009b48:	08009bb9 	.word	0x08009bb9
 8009b4c:	08009bb9 	.word	0x08009bb9
 8009b50:	08009bb9 	.word	0x08009bb9
 8009b54:	08009bb9 	.word	0x08009bb9
 8009b58:	08009bb9 	.word	0x08009bb9
 8009b5c:	08009bb9 	.word	0x08009bb9
 8009b60:	08009bb9 	.word	0x08009bb9
 8009b64:	08009bb9 	.word	0x08009bb9
 8009b68:	08009bb9 	.word	0x08009bb9
 8009b6c:	08009bb9 	.word	0x08009bb9
 8009b70:	08009bb9 	.word	0x08009bb9
 8009b74:	08009bb9 	.word	0x08009bb9
 8009b78:	08009bb9 	.word	0x08009bb9
 8009b7c:	08009bb9 	.word	0x08009bb9
 8009b80:	08009bb9 	.word	0x08009bb9
 8009b84:	08009bb9 	.word	0x08009bb9
 8009b88:	08009bb9 	.word	0x08009bb9
 8009b8c:	08009bb9 	.word	0x08009bb9
 8009b90:	08009bb9 	.word	0x08009bb9
 8009b94:	08009bb9 	.word	0x08009bb9
 8009b98:	08009bb9 	.word	0x08009bb9
 8009b9c:	08009bb9 	.word	0x08009bb9
 8009ba0:	08009bb9 	.word	0x08009bb9
 8009ba4:	08009bb9 	.word	0x08009bb9
 8009ba8:	08009bb9 	.word	0x08009bb9
 8009bac:	08009bb9 	.word	0x08009bb9
 8009bb0:	08009bb9 	.word	0x08009bb9
 8009bb4:	08009bb9 	.word	0x08009bb9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009bb8:	bf00      	nop
  }

  return (USBD_OK);
 8009bba:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	370c      	adds	r7, #12
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc6:	4770      	bx	lr

08009bc8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b082      	sub	sp, #8
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
 8009bd0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009bd2:	6879      	ldr	r1, [r7, #4]
 8009bd4:	4805      	ldr	r0, [pc, #20]	@ (8009bec <CDC_Receive_FS+0x24>)
 8009bd6:	f7fe fbb7 	bl	8008348 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009bda:	4804      	ldr	r0, [pc, #16]	@ (8009bec <CDC_Receive_FS+0x24>)
 8009bdc:	f7fe fc12 	bl	8008404 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009be0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009be2:	4618      	mov	r0, r3
 8009be4:	3708      	adds	r7, #8
 8009be6:	46bd      	mov	sp, r7
 8009be8:	bd80      	pop	{r7, pc}
 8009bea:	bf00      	nop
 8009bec:	20000780 	.word	0x20000780

08009bf0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b084      	sub	sp, #16
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
 8009bf8:	460b      	mov	r3, r1
 8009bfa:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009c00:	4b0d      	ldr	r3, [pc, #52]	@ (8009c38 <CDC_Transmit_FS+0x48>)
 8009c02:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009c06:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009c08:	68bb      	ldr	r3, [r7, #8]
 8009c0a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d001      	beq.n	8009c16 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009c12:	2301      	movs	r3, #1
 8009c14:	e00b      	b.n	8009c2e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009c16:	887b      	ldrh	r3, [r7, #2]
 8009c18:	461a      	mov	r2, r3
 8009c1a:	6879      	ldr	r1, [r7, #4]
 8009c1c:	4806      	ldr	r0, [pc, #24]	@ (8009c38 <CDC_Transmit_FS+0x48>)
 8009c1e:	f7fe fb71 	bl	8008304 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009c22:	4805      	ldr	r0, [pc, #20]	@ (8009c38 <CDC_Transmit_FS+0x48>)
 8009c24:	f7fe fbae 	bl	8008384 <USBD_CDC_TransmitPacket>
 8009c28:	4603      	mov	r3, r0
 8009c2a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c2e:	4618      	mov	r0, r3
 8009c30:	3710      	adds	r7, #16
 8009c32:	46bd      	mov	sp, r7
 8009c34:	bd80      	pop	{r7, pc}
 8009c36:	bf00      	nop
 8009c38:	20000780 	.word	0x20000780

08009c3c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009c3c:	b480      	push	{r7}
 8009c3e:	b087      	sub	sp, #28
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	60f8      	str	r0, [r7, #12]
 8009c44:	60b9      	str	r1, [r7, #8]
 8009c46:	4613      	mov	r3, r2
 8009c48:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009c4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009c52:	4618      	mov	r0, r3
 8009c54:	371c      	adds	r7, #28
 8009c56:	46bd      	mov	sp, r7
 8009c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5c:	4770      	bx	lr
	...

08009c60 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c60:	b480      	push	{r7}
 8009c62:	b083      	sub	sp, #12
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	4603      	mov	r3, r0
 8009c68:	6039      	str	r1, [r7, #0]
 8009c6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009c6c:	683b      	ldr	r3, [r7, #0]
 8009c6e:	2212      	movs	r2, #18
 8009c70:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009c72:	4b03      	ldr	r3, [pc, #12]	@ (8009c80 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009c74:	4618      	mov	r0, r3
 8009c76:	370c      	adds	r7, #12
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7e:	4770      	bx	lr
 8009c80:	200000c8 	.word	0x200000c8

08009c84 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c84:	b480      	push	{r7}
 8009c86:	b083      	sub	sp, #12
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	6039      	str	r1, [r7, #0]
 8009c8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009c90:	683b      	ldr	r3, [r7, #0]
 8009c92:	2204      	movs	r2, #4
 8009c94:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009c96:	4b03      	ldr	r3, [pc, #12]	@ (8009ca4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009c98:	4618      	mov	r0, r3
 8009c9a:	370c      	adds	r7, #12
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca2:	4770      	bx	lr
 8009ca4:	200000dc 	.word	0x200000dc

08009ca8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b082      	sub	sp, #8
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	4603      	mov	r3, r0
 8009cb0:	6039      	str	r1, [r7, #0]
 8009cb2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009cb4:	79fb      	ldrb	r3, [r7, #7]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d105      	bne.n	8009cc6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009cba:	683a      	ldr	r2, [r7, #0]
 8009cbc:	4907      	ldr	r1, [pc, #28]	@ (8009cdc <USBD_FS_ProductStrDescriptor+0x34>)
 8009cbe:	4808      	ldr	r0, [pc, #32]	@ (8009ce0 <USBD_FS_ProductStrDescriptor+0x38>)
 8009cc0:	f7ff fdec 	bl	800989c <USBD_GetString>
 8009cc4:	e004      	b.n	8009cd0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009cc6:	683a      	ldr	r2, [r7, #0]
 8009cc8:	4904      	ldr	r1, [pc, #16]	@ (8009cdc <USBD_FS_ProductStrDescriptor+0x34>)
 8009cca:	4805      	ldr	r0, [pc, #20]	@ (8009ce0 <USBD_FS_ProductStrDescriptor+0x38>)
 8009ccc:	f7ff fde6 	bl	800989c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009cd0:	4b02      	ldr	r3, [pc, #8]	@ (8009cdc <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	3708      	adds	r7, #8
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bd80      	pop	{r7, pc}
 8009cda:	bf00      	nop
 8009cdc:	20001a5c 	.word	0x20001a5c
 8009ce0:	0800d1c0 	.word	0x0800d1c0

08009ce4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b082      	sub	sp, #8
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	4603      	mov	r3, r0
 8009cec:	6039      	str	r1, [r7, #0]
 8009cee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009cf0:	683a      	ldr	r2, [r7, #0]
 8009cf2:	4904      	ldr	r1, [pc, #16]	@ (8009d04 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009cf4:	4804      	ldr	r0, [pc, #16]	@ (8009d08 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009cf6:	f7ff fdd1 	bl	800989c <USBD_GetString>
  return USBD_StrDesc;
 8009cfa:	4b02      	ldr	r3, [pc, #8]	@ (8009d04 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	3708      	adds	r7, #8
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bd80      	pop	{r7, pc}
 8009d04:	20001a5c 	.word	0x20001a5c
 8009d08:	0800d1d8 	.word	0x0800d1d8

08009d0c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b082      	sub	sp, #8
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	4603      	mov	r3, r0
 8009d14:	6039      	str	r1, [r7, #0]
 8009d16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	221a      	movs	r2, #26
 8009d1c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009d1e:	f000 f843 	bl	8009da8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009d22:	4b02      	ldr	r3, [pc, #8]	@ (8009d2c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009d24:	4618      	mov	r0, r3
 8009d26:	3708      	adds	r7, #8
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bd80      	pop	{r7, pc}
 8009d2c:	200000e0 	.word	0x200000e0

08009d30 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b082      	sub	sp, #8
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	4603      	mov	r3, r0
 8009d38:	6039      	str	r1, [r7, #0]
 8009d3a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009d3c:	79fb      	ldrb	r3, [r7, #7]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d105      	bne.n	8009d4e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009d42:	683a      	ldr	r2, [r7, #0]
 8009d44:	4907      	ldr	r1, [pc, #28]	@ (8009d64 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009d46:	4808      	ldr	r0, [pc, #32]	@ (8009d68 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009d48:	f7ff fda8 	bl	800989c <USBD_GetString>
 8009d4c:	e004      	b.n	8009d58 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009d4e:	683a      	ldr	r2, [r7, #0]
 8009d50:	4904      	ldr	r1, [pc, #16]	@ (8009d64 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009d52:	4805      	ldr	r0, [pc, #20]	@ (8009d68 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009d54:	f7ff fda2 	bl	800989c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009d58:	4b02      	ldr	r3, [pc, #8]	@ (8009d64 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	3708      	adds	r7, #8
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	bd80      	pop	{r7, pc}
 8009d62:	bf00      	nop
 8009d64:	20001a5c 	.word	0x20001a5c
 8009d68:	0800d1ec 	.word	0x0800d1ec

08009d6c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b082      	sub	sp, #8
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	4603      	mov	r3, r0
 8009d74:	6039      	str	r1, [r7, #0]
 8009d76:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009d78:	79fb      	ldrb	r3, [r7, #7]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d105      	bne.n	8009d8a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009d7e:	683a      	ldr	r2, [r7, #0]
 8009d80:	4907      	ldr	r1, [pc, #28]	@ (8009da0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009d82:	4808      	ldr	r0, [pc, #32]	@ (8009da4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009d84:	f7ff fd8a 	bl	800989c <USBD_GetString>
 8009d88:	e004      	b.n	8009d94 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009d8a:	683a      	ldr	r2, [r7, #0]
 8009d8c:	4904      	ldr	r1, [pc, #16]	@ (8009da0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009d8e:	4805      	ldr	r0, [pc, #20]	@ (8009da4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009d90:	f7ff fd84 	bl	800989c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009d94:	4b02      	ldr	r3, [pc, #8]	@ (8009da0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009d96:	4618      	mov	r0, r3
 8009d98:	3708      	adds	r7, #8
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}
 8009d9e:	bf00      	nop
 8009da0:	20001a5c 	.word	0x20001a5c
 8009da4:	0800d1f8 	.word	0x0800d1f8

08009da8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b084      	sub	sp, #16
 8009dac:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009dae:	4b0f      	ldr	r3, [pc, #60]	@ (8009dec <Get_SerialNum+0x44>)
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009db4:	4b0e      	ldr	r3, [pc, #56]	@ (8009df0 <Get_SerialNum+0x48>)
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009dba:	4b0e      	ldr	r3, [pc, #56]	@ (8009df4 <Get_SerialNum+0x4c>)
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009dc0:	68fa      	ldr	r2, [r7, #12]
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	4413      	add	r3, r2
 8009dc6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d009      	beq.n	8009de2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009dce:	2208      	movs	r2, #8
 8009dd0:	4909      	ldr	r1, [pc, #36]	@ (8009df8 <Get_SerialNum+0x50>)
 8009dd2:	68f8      	ldr	r0, [r7, #12]
 8009dd4:	f000 f814 	bl	8009e00 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009dd8:	2204      	movs	r2, #4
 8009dda:	4908      	ldr	r1, [pc, #32]	@ (8009dfc <Get_SerialNum+0x54>)
 8009ddc:	68b8      	ldr	r0, [r7, #8]
 8009dde:	f000 f80f 	bl	8009e00 <IntToUnicode>
  }
}
 8009de2:	bf00      	nop
 8009de4:	3710      	adds	r7, #16
 8009de6:	46bd      	mov	sp, r7
 8009de8:	bd80      	pop	{r7, pc}
 8009dea:	bf00      	nop
 8009dec:	1fff7a10 	.word	0x1fff7a10
 8009df0:	1fff7a14 	.word	0x1fff7a14
 8009df4:	1fff7a18 	.word	0x1fff7a18
 8009df8:	200000e2 	.word	0x200000e2
 8009dfc:	200000f2 	.word	0x200000f2

08009e00 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009e00:	b480      	push	{r7}
 8009e02:	b087      	sub	sp, #28
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	60f8      	str	r0, [r7, #12]
 8009e08:	60b9      	str	r1, [r7, #8]
 8009e0a:	4613      	mov	r3, r2
 8009e0c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009e0e:	2300      	movs	r3, #0
 8009e10:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009e12:	2300      	movs	r3, #0
 8009e14:	75fb      	strb	r3, [r7, #23]
 8009e16:	e027      	b.n	8009e68 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	0f1b      	lsrs	r3, r3, #28
 8009e1c:	2b09      	cmp	r3, #9
 8009e1e:	d80b      	bhi.n	8009e38 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	0f1b      	lsrs	r3, r3, #28
 8009e24:	b2da      	uxtb	r2, r3
 8009e26:	7dfb      	ldrb	r3, [r7, #23]
 8009e28:	005b      	lsls	r3, r3, #1
 8009e2a:	4619      	mov	r1, r3
 8009e2c:	68bb      	ldr	r3, [r7, #8]
 8009e2e:	440b      	add	r3, r1
 8009e30:	3230      	adds	r2, #48	@ 0x30
 8009e32:	b2d2      	uxtb	r2, r2
 8009e34:	701a      	strb	r2, [r3, #0]
 8009e36:	e00a      	b.n	8009e4e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	0f1b      	lsrs	r3, r3, #28
 8009e3c:	b2da      	uxtb	r2, r3
 8009e3e:	7dfb      	ldrb	r3, [r7, #23]
 8009e40:	005b      	lsls	r3, r3, #1
 8009e42:	4619      	mov	r1, r3
 8009e44:	68bb      	ldr	r3, [r7, #8]
 8009e46:	440b      	add	r3, r1
 8009e48:	3237      	adds	r2, #55	@ 0x37
 8009e4a:	b2d2      	uxtb	r2, r2
 8009e4c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	011b      	lsls	r3, r3, #4
 8009e52:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009e54:	7dfb      	ldrb	r3, [r7, #23]
 8009e56:	005b      	lsls	r3, r3, #1
 8009e58:	3301      	adds	r3, #1
 8009e5a:	68ba      	ldr	r2, [r7, #8]
 8009e5c:	4413      	add	r3, r2
 8009e5e:	2200      	movs	r2, #0
 8009e60:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009e62:	7dfb      	ldrb	r3, [r7, #23]
 8009e64:	3301      	adds	r3, #1
 8009e66:	75fb      	strb	r3, [r7, #23]
 8009e68:	7dfa      	ldrb	r2, [r7, #23]
 8009e6a:	79fb      	ldrb	r3, [r7, #7]
 8009e6c:	429a      	cmp	r2, r3
 8009e6e:	d3d3      	bcc.n	8009e18 <IntToUnicode+0x18>
  }
}
 8009e70:	bf00      	nop
 8009e72:	bf00      	nop
 8009e74:	371c      	adds	r7, #28
 8009e76:	46bd      	mov	sp, r7
 8009e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7c:	4770      	bx	lr
	...

08009e80 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b08a      	sub	sp, #40	@ 0x28
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009e88:	f107 0314 	add.w	r3, r7, #20
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	601a      	str	r2, [r3, #0]
 8009e90:	605a      	str	r2, [r3, #4]
 8009e92:	609a      	str	r2, [r3, #8]
 8009e94:	60da      	str	r2, [r3, #12]
 8009e96:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009ea0:	d147      	bne.n	8009f32 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	613b      	str	r3, [r7, #16]
 8009ea6:	4b25      	ldr	r3, [pc, #148]	@ (8009f3c <HAL_PCD_MspInit+0xbc>)
 8009ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009eaa:	4a24      	ldr	r2, [pc, #144]	@ (8009f3c <HAL_PCD_MspInit+0xbc>)
 8009eac:	f043 0301 	orr.w	r3, r3, #1
 8009eb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8009eb2:	4b22      	ldr	r3, [pc, #136]	@ (8009f3c <HAL_PCD_MspInit+0xbc>)
 8009eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009eb6:	f003 0301 	and.w	r3, r3, #1
 8009eba:	613b      	str	r3, [r7, #16]
 8009ebc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8009ebe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009ec2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ec8:	2300      	movs	r3, #0
 8009eca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8009ecc:	f107 0314 	add.w	r3, r7, #20
 8009ed0:	4619      	mov	r1, r3
 8009ed2:	481b      	ldr	r0, [pc, #108]	@ (8009f40 <HAL_PCD_MspInit+0xc0>)
 8009ed4:	f7f8 f89e 	bl	8002014 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009ed8:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8009edc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009ede:	2302      	movs	r3, #2
 8009ee0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009eea:	230a      	movs	r3, #10
 8009eec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009eee:	f107 0314 	add.w	r3, r7, #20
 8009ef2:	4619      	mov	r1, r3
 8009ef4:	4812      	ldr	r0, [pc, #72]	@ (8009f40 <HAL_PCD_MspInit+0xc0>)
 8009ef6:	f7f8 f88d 	bl	8002014 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009efa:	4b10      	ldr	r3, [pc, #64]	@ (8009f3c <HAL_PCD_MspInit+0xbc>)
 8009efc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009efe:	4a0f      	ldr	r2, [pc, #60]	@ (8009f3c <HAL_PCD_MspInit+0xbc>)
 8009f00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009f04:	6353      	str	r3, [r2, #52]	@ 0x34
 8009f06:	2300      	movs	r3, #0
 8009f08:	60fb      	str	r3, [r7, #12]
 8009f0a:	4b0c      	ldr	r3, [pc, #48]	@ (8009f3c <HAL_PCD_MspInit+0xbc>)
 8009f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f0e:	4a0b      	ldr	r2, [pc, #44]	@ (8009f3c <HAL_PCD_MspInit+0xbc>)
 8009f10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009f14:	6453      	str	r3, [r2, #68]	@ 0x44
 8009f16:	4b09      	ldr	r3, [pc, #36]	@ (8009f3c <HAL_PCD_MspInit+0xbc>)
 8009f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009f1e:	60fb      	str	r3, [r7, #12]
 8009f20:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009f22:	2200      	movs	r2, #0
 8009f24:	2100      	movs	r1, #0
 8009f26:	2043      	movs	r0, #67	@ 0x43
 8009f28:	f7f8 f83d 	bl	8001fa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009f2c:	2043      	movs	r0, #67	@ 0x43
 8009f2e:	f7f8 f856 	bl	8001fde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009f32:	bf00      	nop
 8009f34:	3728      	adds	r7, #40	@ 0x28
 8009f36:	46bd      	mov	sp, r7
 8009f38:	bd80      	pop	{r7, pc}
 8009f3a:	bf00      	nop
 8009f3c:	40023800 	.word	0x40023800
 8009f40:	40020000 	.word	0x40020000

08009f44 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b082      	sub	sp, #8
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009f58:	4619      	mov	r1, r3
 8009f5a:	4610      	mov	r0, r2
 8009f5c:	f7fe fb3b 	bl	80085d6 <USBD_LL_SetupStage>
}
 8009f60:	bf00      	nop
 8009f62:	3708      	adds	r7, #8
 8009f64:	46bd      	mov	sp, r7
 8009f66:	bd80      	pop	{r7, pc}

08009f68 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b082      	sub	sp, #8
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
 8009f70:	460b      	mov	r3, r1
 8009f72:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009f7a:	78fa      	ldrb	r2, [r7, #3]
 8009f7c:	6879      	ldr	r1, [r7, #4]
 8009f7e:	4613      	mov	r3, r2
 8009f80:	00db      	lsls	r3, r3, #3
 8009f82:	4413      	add	r3, r2
 8009f84:	009b      	lsls	r3, r3, #2
 8009f86:	440b      	add	r3, r1
 8009f88:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009f8c:	681a      	ldr	r2, [r3, #0]
 8009f8e:	78fb      	ldrb	r3, [r7, #3]
 8009f90:	4619      	mov	r1, r3
 8009f92:	f7fe fb75 	bl	8008680 <USBD_LL_DataOutStage>
}
 8009f96:	bf00      	nop
 8009f98:	3708      	adds	r7, #8
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	bd80      	pop	{r7, pc}

08009f9e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f9e:	b580      	push	{r7, lr}
 8009fa0:	b082      	sub	sp, #8
 8009fa2:	af00      	add	r7, sp, #0
 8009fa4:	6078      	str	r0, [r7, #4]
 8009fa6:	460b      	mov	r3, r1
 8009fa8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009fb0:	78fa      	ldrb	r2, [r7, #3]
 8009fb2:	6879      	ldr	r1, [r7, #4]
 8009fb4:	4613      	mov	r3, r2
 8009fb6:	00db      	lsls	r3, r3, #3
 8009fb8:	4413      	add	r3, r2
 8009fba:	009b      	lsls	r3, r3, #2
 8009fbc:	440b      	add	r3, r1
 8009fbe:	3320      	adds	r3, #32
 8009fc0:	681a      	ldr	r2, [r3, #0]
 8009fc2:	78fb      	ldrb	r3, [r7, #3]
 8009fc4:	4619      	mov	r1, r3
 8009fc6:	f7fe fc0e 	bl	80087e6 <USBD_LL_DataInStage>
}
 8009fca:	bf00      	nop
 8009fcc:	3708      	adds	r7, #8
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	bd80      	pop	{r7, pc}

08009fd2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fd2:	b580      	push	{r7, lr}
 8009fd4:	b082      	sub	sp, #8
 8009fd6:	af00      	add	r7, sp, #0
 8009fd8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	f7fe fd48 	bl	8008a76 <USBD_LL_SOF>
}
 8009fe6:	bf00      	nop
 8009fe8:	3708      	adds	r7, #8
 8009fea:	46bd      	mov	sp, r7
 8009fec:	bd80      	pop	{r7, pc}

08009fee <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fee:	b580      	push	{r7, lr}
 8009ff0:	b084      	sub	sp, #16
 8009ff2:	af00      	add	r7, sp, #0
 8009ff4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009ff6:	2301      	movs	r3, #1
 8009ff8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	79db      	ldrb	r3, [r3, #7]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d102      	bne.n	800a008 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a002:	2300      	movs	r3, #0
 800a004:	73fb      	strb	r3, [r7, #15]
 800a006:	e008      	b.n	800a01a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	79db      	ldrb	r3, [r3, #7]
 800a00c:	2b02      	cmp	r3, #2
 800a00e:	d102      	bne.n	800a016 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a010:	2301      	movs	r3, #1
 800a012:	73fb      	strb	r3, [r7, #15]
 800a014:	e001      	b.n	800a01a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a016:	f7f7 fa59 	bl	80014cc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a020:	7bfa      	ldrb	r2, [r7, #15]
 800a022:	4611      	mov	r1, r2
 800a024:	4618      	mov	r0, r3
 800a026:	f7fe fce2 	bl	80089ee <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a030:	4618      	mov	r0, r3
 800a032:	f7fe fc8a 	bl	800894a <USBD_LL_Reset>
}
 800a036:	bf00      	nop
 800a038:	3710      	adds	r7, #16
 800a03a:	46bd      	mov	sp, r7
 800a03c:	bd80      	pop	{r7, pc}
	...

0800a040 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b082      	sub	sp, #8
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a04e:	4618      	mov	r0, r3
 800a050:	f7fe fcdd 	bl	8008a0e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	687a      	ldr	r2, [r7, #4]
 800a060:	6812      	ldr	r2, [r2, #0]
 800a062:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a066:	f043 0301 	orr.w	r3, r3, #1
 800a06a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	7adb      	ldrb	r3, [r3, #11]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d005      	beq.n	800a080 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a074:	4b04      	ldr	r3, [pc, #16]	@ (800a088 <HAL_PCD_SuspendCallback+0x48>)
 800a076:	691b      	ldr	r3, [r3, #16]
 800a078:	4a03      	ldr	r2, [pc, #12]	@ (800a088 <HAL_PCD_SuspendCallback+0x48>)
 800a07a:	f043 0306 	orr.w	r3, r3, #6
 800a07e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a080:	bf00      	nop
 800a082:	3708      	adds	r7, #8
 800a084:	46bd      	mov	sp, r7
 800a086:	bd80      	pop	{r7, pc}
 800a088:	e000ed00 	.word	0xe000ed00

0800a08c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b082      	sub	sp, #8
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a09a:	4618      	mov	r0, r3
 800a09c:	f7fe fcd3 	bl	8008a46 <USBD_LL_Resume>
}
 800a0a0:	bf00      	nop
 800a0a2:	3708      	adds	r7, #8
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	bd80      	pop	{r7, pc}

0800a0a8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b082      	sub	sp, #8
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
 800a0b0:	460b      	mov	r3, r1
 800a0b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a0ba:	78fa      	ldrb	r2, [r7, #3]
 800a0bc:	4611      	mov	r1, r2
 800a0be:	4618      	mov	r0, r3
 800a0c0:	f7fe fd2b 	bl	8008b1a <USBD_LL_IsoOUTIncomplete>
}
 800a0c4:	bf00      	nop
 800a0c6:	3708      	adds	r7, #8
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	bd80      	pop	{r7, pc}

0800a0cc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b082      	sub	sp, #8
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
 800a0d4:	460b      	mov	r3, r1
 800a0d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a0de:	78fa      	ldrb	r2, [r7, #3]
 800a0e0:	4611      	mov	r1, r2
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	f7fe fce7 	bl	8008ab6 <USBD_LL_IsoINIncomplete>
}
 800a0e8:	bf00      	nop
 800a0ea:	3708      	adds	r7, #8
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	bd80      	pop	{r7, pc}

0800a0f0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b082      	sub	sp, #8
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a0fe:	4618      	mov	r0, r3
 800a100:	f7fe fd3d 	bl	8008b7e <USBD_LL_DevConnected>
}
 800a104:	bf00      	nop
 800a106:	3708      	adds	r7, #8
 800a108:	46bd      	mov	sp, r7
 800a10a:	bd80      	pop	{r7, pc}

0800a10c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b082      	sub	sp, #8
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a11a:	4618      	mov	r0, r3
 800a11c:	f7fe fd3a 	bl	8008b94 <USBD_LL_DevDisconnected>
}
 800a120:	bf00      	nop
 800a122:	3708      	adds	r7, #8
 800a124:	46bd      	mov	sp, r7
 800a126:	bd80      	pop	{r7, pc}

0800a128 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b082      	sub	sp, #8
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	781b      	ldrb	r3, [r3, #0]
 800a134:	2b00      	cmp	r3, #0
 800a136:	d13c      	bne.n	800a1b2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a138:	4a20      	ldr	r2, [pc, #128]	@ (800a1bc <USBD_LL_Init+0x94>)
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	4a1e      	ldr	r2, [pc, #120]	@ (800a1bc <USBD_LL_Init+0x94>)
 800a144:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a148:	4b1c      	ldr	r3, [pc, #112]	@ (800a1bc <USBD_LL_Init+0x94>)
 800a14a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800a14e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a150:	4b1a      	ldr	r3, [pc, #104]	@ (800a1bc <USBD_LL_Init+0x94>)
 800a152:	2204      	movs	r2, #4
 800a154:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a156:	4b19      	ldr	r3, [pc, #100]	@ (800a1bc <USBD_LL_Init+0x94>)
 800a158:	2202      	movs	r2, #2
 800a15a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a15c:	4b17      	ldr	r3, [pc, #92]	@ (800a1bc <USBD_LL_Init+0x94>)
 800a15e:	2200      	movs	r2, #0
 800a160:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a162:	4b16      	ldr	r3, [pc, #88]	@ (800a1bc <USBD_LL_Init+0x94>)
 800a164:	2202      	movs	r2, #2
 800a166:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a168:	4b14      	ldr	r3, [pc, #80]	@ (800a1bc <USBD_LL_Init+0x94>)
 800a16a:	2200      	movs	r2, #0
 800a16c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a16e:	4b13      	ldr	r3, [pc, #76]	@ (800a1bc <USBD_LL_Init+0x94>)
 800a170:	2200      	movs	r2, #0
 800a172:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a174:	4b11      	ldr	r3, [pc, #68]	@ (800a1bc <USBD_LL_Init+0x94>)
 800a176:	2200      	movs	r2, #0
 800a178:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800a17a:	4b10      	ldr	r3, [pc, #64]	@ (800a1bc <USBD_LL_Init+0x94>)
 800a17c:	2201      	movs	r2, #1
 800a17e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a180:	4b0e      	ldr	r3, [pc, #56]	@ (800a1bc <USBD_LL_Init+0x94>)
 800a182:	2200      	movs	r2, #0
 800a184:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a186:	480d      	ldr	r0, [pc, #52]	@ (800a1bc <USBD_LL_Init+0x94>)
 800a188:	f7f9 fde0 	bl	8003d4c <HAL_PCD_Init>
 800a18c:	4603      	mov	r3, r0
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d001      	beq.n	800a196 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a192:	f7f7 f99b 	bl	80014cc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a196:	2180      	movs	r1, #128	@ 0x80
 800a198:	4808      	ldr	r0, [pc, #32]	@ (800a1bc <USBD_LL_Init+0x94>)
 800a19a:	f7fb f80c 	bl	80051b6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a19e:	2240      	movs	r2, #64	@ 0x40
 800a1a0:	2100      	movs	r1, #0
 800a1a2:	4806      	ldr	r0, [pc, #24]	@ (800a1bc <USBD_LL_Init+0x94>)
 800a1a4:	f7fa ffc0 	bl	8005128 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a1a8:	2280      	movs	r2, #128	@ 0x80
 800a1aa:	2101      	movs	r1, #1
 800a1ac:	4803      	ldr	r0, [pc, #12]	@ (800a1bc <USBD_LL_Init+0x94>)
 800a1ae:	f7fa ffbb 	bl	8005128 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a1b2:	2300      	movs	r3, #0
}
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	3708      	adds	r7, #8
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	bd80      	pop	{r7, pc}
 800a1bc:	20001c5c 	.word	0x20001c5c

0800a1c0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b084      	sub	sp, #16
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	f7f9 fec7 	bl	8003f6a <HAL_PCD_Start>
 800a1dc:	4603      	mov	r3, r0
 800a1de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a1e0:	7bfb      	ldrb	r3, [r7, #15]
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	f000 f942 	bl	800a46c <USBD_Get_USB_Status>
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a1ec:	7bbb      	ldrb	r3, [r7, #14]
}
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	3710      	adds	r7, #16
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	bd80      	pop	{r7, pc}

0800a1f6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a1f6:	b580      	push	{r7, lr}
 800a1f8:	b084      	sub	sp, #16
 800a1fa:	af00      	add	r7, sp, #0
 800a1fc:	6078      	str	r0, [r7, #4]
 800a1fe:	4608      	mov	r0, r1
 800a200:	4611      	mov	r1, r2
 800a202:	461a      	mov	r2, r3
 800a204:	4603      	mov	r3, r0
 800a206:	70fb      	strb	r3, [r7, #3]
 800a208:	460b      	mov	r3, r1
 800a20a:	70bb      	strb	r3, [r7, #2]
 800a20c:	4613      	mov	r3, r2
 800a20e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a210:	2300      	movs	r3, #0
 800a212:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a214:	2300      	movs	r3, #0
 800a216:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a21e:	78bb      	ldrb	r3, [r7, #2]
 800a220:	883a      	ldrh	r2, [r7, #0]
 800a222:	78f9      	ldrb	r1, [r7, #3]
 800a224:	f7fa fb9b 	bl	800495e <HAL_PCD_EP_Open>
 800a228:	4603      	mov	r3, r0
 800a22a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a22c:	7bfb      	ldrb	r3, [r7, #15]
 800a22e:	4618      	mov	r0, r3
 800a230:	f000 f91c 	bl	800a46c <USBD_Get_USB_Status>
 800a234:	4603      	mov	r3, r0
 800a236:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a238:	7bbb      	ldrb	r3, [r7, #14]
}
 800a23a:	4618      	mov	r0, r3
 800a23c:	3710      	adds	r7, #16
 800a23e:	46bd      	mov	sp, r7
 800a240:	bd80      	pop	{r7, pc}

0800a242 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a242:	b580      	push	{r7, lr}
 800a244:	b084      	sub	sp, #16
 800a246:	af00      	add	r7, sp, #0
 800a248:	6078      	str	r0, [r7, #4]
 800a24a:	460b      	mov	r3, r1
 800a24c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a24e:	2300      	movs	r3, #0
 800a250:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a252:	2300      	movs	r3, #0
 800a254:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a25c:	78fa      	ldrb	r2, [r7, #3]
 800a25e:	4611      	mov	r1, r2
 800a260:	4618      	mov	r0, r3
 800a262:	f7fa fbe6 	bl	8004a32 <HAL_PCD_EP_Close>
 800a266:	4603      	mov	r3, r0
 800a268:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a26a:	7bfb      	ldrb	r3, [r7, #15]
 800a26c:	4618      	mov	r0, r3
 800a26e:	f000 f8fd 	bl	800a46c <USBD_Get_USB_Status>
 800a272:	4603      	mov	r3, r0
 800a274:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a276:	7bbb      	ldrb	r3, [r7, #14]
}
 800a278:	4618      	mov	r0, r3
 800a27a:	3710      	adds	r7, #16
 800a27c:	46bd      	mov	sp, r7
 800a27e:	bd80      	pop	{r7, pc}

0800a280 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a280:	b580      	push	{r7, lr}
 800a282:	b084      	sub	sp, #16
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
 800a288:	460b      	mov	r3, r1
 800a28a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a28c:	2300      	movs	r3, #0
 800a28e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a290:	2300      	movs	r3, #0
 800a292:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a29a:	78fa      	ldrb	r2, [r7, #3]
 800a29c:	4611      	mov	r1, r2
 800a29e:	4618      	mov	r0, r3
 800a2a0:	f7fa fc9e 	bl	8004be0 <HAL_PCD_EP_SetStall>
 800a2a4:	4603      	mov	r3, r0
 800a2a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2a8:	7bfb      	ldrb	r3, [r7, #15]
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	f000 f8de 	bl	800a46c <USBD_Get_USB_Status>
 800a2b0:	4603      	mov	r3, r0
 800a2b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2b4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	3710      	adds	r7, #16
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bd80      	pop	{r7, pc}

0800a2be <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a2be:	b580      	push	{r7, lr}
 800a2c0:	b084      	sub	sp, #16
 800a2c2:	af00      	add	r7, sp, #0
 800a2c4:	6078      	str	r0, [r7, #4]
 800a2c6:	460b      	mov	r3, r1
 800a2c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a2d8:	78fa      	ldrb	r2, [r7, #3]
 800a2da:	4611      	mov	r1, r2
 800a2dc:	4618      	mov	r0, r3
 800a2de:	f7fa fce2 	bl	8004ca6 <HAL_PCD_EP_ClrStall>
 800a2e2:	4603      	mov	r3, r0
 800a2e4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2e6:	7bfb      	ldrb	r3, [r7, #15]
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	f000 f8bf 	bl	800a46c <USBD_Get_USB_Status>
 800a2ee:	4603      	mov	r3, r0
 800a2f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2f2:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	3710      	adds	r7, #16
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	bd80      	pop	{r7, pc}

0800a2fc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a2fc:	b480      	push	{r7}
 800a2fe:	b085      	sub	sp, #20
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
 800a304:	460b      	mov	r3, r1
 800a306:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a30e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a310:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a314:	2b00      	cmp	r3, #0
 800a316:	da0b      	bge.n	800a330 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a318:	78fb      	ldrb	r3, [r7, #3]
 800a31a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a31e:	68f9      	ldr	r1, [r7, #12]
 800a320:	4613      	mov	r3, r2
 800a322:	00db      	lsls	r3, r3, #3
 800a324:	4413      	add	r3, r2
 800a326:	009b      	lsls	r3, r3, #2
 800a328:	440b      	add	r3, r1
 800a32a:	3316      	adds	r3, #22
 800a32c:	781b      	ldrb	r3, [r3, #0]
 800a32e:	e00b      	b.n	800a348 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a330:	78fb      	ldrb	r3, [r7, #3]
 800a332:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a336:	68f9      	ldr	r1, [r7, #12]
 800a338:	4613      	mov	r3, r2
 800a33a:	00db      	lsls	r3, r3, #3
 800a33c:	4413      	add	r3, r2
 800a33e:	009b      	lsls	r3, r3, #2
 800a340:	440b      	add	r3, r1
 800a342:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800a346:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a348:	4618      	mov	r0, r3
 800a34a:	3714      	adds	r7, #20
 800a34c:	46bd      	mov	sp, r7
 800a34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a352:	4770      	bx	lr

0800a354 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b084      	sub	sp, #16
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
 800a35c:	460b      	mov	r3, r1
 800a35e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a360:	2300      	movs	r3, #0
 800a362:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a364:	2300      	movs	r3, #0
 800a366:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a36e:	78fa      	ldrb	r2, [r7, #3]
 800a370:	4611      	mov	r1, r2
 800a372:	4618      	mov	r0, r3
 800a374:	f7fa facf 	bl	8004916 <HAL_PCD_SetAddress>
 800a378:	4603      	mov	r3, r0
 800a37a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a37c:	7bfb      	ldrb	r3, [r7, #15]
 800a37e:	4618      	mov	r0, r3
 800a380:	f000 f874 	bl	800a46c <USBD_Get_USB_Status>
 800a384:	4603      	mov	r3, r0
 800a386:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a388:	7bbb      	ldrb	r3, [r7, #14]
}
 800a38a:	4618      	mov	r0, r3
 800a38c:	3710      	adds	r7, #16
 800a38e:	46bd      	mov	sp, r7
 800a390:	bd80      	pop	{r7, pc}

0800a392 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a392:	b580      	push	{r7, lr}
 800a394:	b086      	sub	sp, #24
 800a396:	af00      	add	r7, sp, #0
 800a398:	60f8      	str	r0, [r7, #12]
 800a39a:	607a      	str	r2, [r7, #4]
 800a39c:	603b      	str	r3, [r7, #0]
 800a39e:	460b      	mov	r3, r1
 800a3a0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a3b0:	7af9      	ldrb	r1, [r7, #11]
 800a3b2:	683b      	ldr	r3, [r7, #0]
 800a3b4:	687a      	ldr	r2, [r7, #4]
 800a3b6:	f7fa fbd9 	bl	8004b6c <HAL_PCD_EP_Transmit>
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a3be:	7dfb      	ldrb	r3, [r7, #23]
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	f000 f853 	bl	800a46c <USBD_Get_USB_Status>
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a3ca:	7dbb      	ldrb	r3, [r7, #22]
}
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	3718      	adds	r7, #24
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	bd80      	pop	{r7, pc}

0800a3d4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b086      	sub	sp, #24
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	60f8      	str	r0, [r7, #12]
 800a3dc:	607a      	str	r2, [r7, #4]
 800a3de:	603b      	str	r3, [r7, #0]
 800a3e0:	460b      	mov	r3, r1
 800a3e2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a3f2:	7af9      	ldrb	r1, [r7, #11]
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	687a      	ldr	r2, [r7, #4]
 800a3f8:	f7fa fb65 	bl	8004ac6 <HAL_PCD_EP_Receive>
 800a3fc:	4603      	mov	r3, r0
 800a3fe:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a400:	7dfb      	ldrb	r3, [r7, #23]
 800a402:	4618      	mov	r0, r3
 800a404:	f000 f832 	bl	800a46c <USBD_Get_USB_Status>
 800a408:	4603      	mov	r3, r0
 800a40a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a40c:	7dbb      	ldrb	r3, [r7, #22]
}
 800a40e:	4618      	mov	r0, r3
 800a410:	3718      	adds	r7, #24
 800a412:	46bd      	mov	sp, r7
 800a414:	bd80      	pop	{r7, pc}

0800a416 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a416:	b580      	push	{r7, lr}
 800a418:	b082      	sub	sp, #8
 800a41a:	af00      	add	r7, sp, #0
 800a41c:	6078      	str	r0, [r7, #4]
 800a41e:	460b      	mov	r3, r1
 800a420:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a428:	78fa      	ldrb	r2, [r7, #3]
 800a42a:	4611      	mov	r1, r2
 800a42c:	4618      	mov	r0, r3
 800a42e:	f7fa fb85 	bl	8004b3c <HAL_PCD_EP_GetRxCount>
 800a432:	4603      	mov	r3, r0
}
 800a434:	4618      	mov	r0, r3
 800a436:	3708      	adds	r7, #8
 800a438:	46bd      	mov	sp, r7
 800a43a:	bd80      	pop	{r7, pc}

0800a43c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a43c:	b480      	push	{r7}
 800a43e:	b083      	sub	sp, #12
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a444:	4b03      	ldr	r3, [pc, #12]	@ (800a454 <USBD_static_malloc+0x18>)
}
 800a446:	4618      	mov	r0, r3
 800a448:	370c      	adds	r7, #12
 800a44a:	46bd      	mov	sp, r7
 800a44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a450:	4770      	bx	lr
 800a452:	bf00      	nop
 800a454:	20002140 	.word	0x20002140

0800a458 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a458:	b480      	push	{r7}
 800a45a:	b083      	sub	sp, #12
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]

}
 800a460:	bf00      	nop
 800a462:	370c      	adds	r7, #12
 800a464:	46bd      	mov	sp, r7
 800a466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46a:	4770      	bx	lr

0800a46c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a46c:	b480      	push	{r7}
 800a46e:	b085      	sub	sp, #20
 800a470:	af00      	add	r7, sp, #0
 800a472:	4603      	mov	r3, r0
 800a474:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a476:	2300      	movs	r3, #0
 800a478:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a47a:	79fb      	ldrb	r3, [r7, #7]
 800a47c:	2b03      	cmp	r3, #3
 800a47e:	d817      	bhi.n	800a4b0 <USBD_Get_USB_Status+0x44>
 800a480:	a201      	add	r2, pc, #4	@ (adr r2, 800a488 <USBD_Get_USB_Status+0x1c>)
 800a482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a486:	bf00      	nop
 800a488:	0800a499 	.word	0x0800a499
 800a48c:	0800a49f 	.word	0x0800a49f
 800a490:	0800a4a5 	.word	0x0800a4a5
 800a494:	0800a4ab 	.word	0x0800a4ab
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a498:	2300      	movs	r3, #0
 800a49a:	73fb      	strb	r3, [r7, #15]
    break;
 800a49c:	e00b      	b.n	800a4b6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a49e:	2303      	movs	r3, #3
 800a4a0:	73fb      	strb	r3, [r7, #15]
    break;
 800a4a2:	e008      	b.n	800a4b6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a4a4:	2301      	movs	r3, #1
 800a4a6:	73fb      	strb	r3, [r7, #15]
    break;
 800a4a8:	e005      	b.n	800a4b6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a4aa:	2303      	movs	r3, #3
 800a4ac:	73fb      	strb	r3, [r7, #15]
    break;
 800a4ae:	e002      	b.n	800a4b6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a4b0:	2303      	movs	r3, #3
 800a4b2:	73fb      	strb	r3, [r7, #15]
    break;
 800a4b4:	bf00      	nop
  }
  return usb_status;
 800a4b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	3714      	adds	r7, #20
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c2:	4770      	bx	lr

0800a4c4 <__cvt>:
 800a4c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a4c8:	ec57 6b10 	vmov	r6, r7, d0
 800a4cc:	2f00      	cmp	r7, #0
 800a4ce:	460c      	mov	r4, r1
 800a4d0:	4619      	mov	r1, r3
 800a4d2:	463b      	mov	r3, r7
 800a4d4:	bfbb      	ittet	lt
 800a4d6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a4da:	461f      	movlt	r7, r3
 800a4dc:	2300      	movge	r3, #0
 800a4de:	232d      	movlt	r3, #45	@ 0x2d
 800a4e0:	700b      	strb	r3, [r1, #0]
 800a4e2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a4e4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a4e8:	4691      	mov	r9, r2
 800a4ea:	f023 0820 	bic.w	r8, r3, #32
 800a4ee:	bfbc      	itt	lt
 800a4f0:	4632      	movlt	r2, r6
 800a4f2:	4616      	movlt	r6, r2
 800a4f4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a4f8:	d005      	beq.n	800a506 <__cvt+0x42>
 800a4fa:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a4fe:	d100      	bne.n	800a502 <__cvt+0x3e>
 800a500:	3401      	adds	r4, #1
 800a502:	2102      	movs	r1, #2
 800a504:	e000      	b.n	800a508 <__cvt+0x44>
 800a506:	2103      	movs	r1, #3
 800a508:	ab03      	add	r3, sp, #12
 800a50a:	9301      	str	r3, [sp, #4]
 800a50c:	ab02      	add	r3, sp, #8
 800a50e:	9300      	str	r3, [sp, #0]
 800a510:	ec47 6b10 	vmov	d0, r6, r7
 800a514:	4653      	mov	r3, sl
 800a516:	4622      	mov	r2, r4
 800a518:	f000 fe5a 	bl	800b1d0 <_dtoa_r>
 800a51c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a520:	4605      	mov	r5, r0
 800a522:	d119      	bne.n	800a558 <__cvt+0x94>
 800a524:	f019 0f01 	tst.w	r9, #1
 800a528:	d00e      	beq.n	800a548 <__cvt+0x84>
 800a52a:	eb00 0904 	add.w	r9, r0, r4
 800a52e:	2200      	movs	r2, #0
 800a530:	2300      	movs	r3, #0
 800a532:	4630      	mov	r0, r6
 800a534:	4639      	mov	r1, r7
 800a536:	f7f6 fac7 	bl	8000ac8 <__aeabi_dcmpeq>
 800a53a:	b108      	cbz	r0, 800a540 <__cvt+0x7c>
 800a53c:	f8cd 900c 	str.w	r9, [sp, #12]
 800a540:	2230      	movs	r2, #48	@ 0x30
 800a542:	9b03      	ldr	r3, [sp, #12]
 800a544:	454b      	cmp	r3, r9
 800a546:	d31e      	bcc.n	800a586 <__cvt+0xc2>
 800a548:	9b03      	ldr	r3, [sp, #12]
 800a54a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a54c:	1b5b      	subs	r3, r3, r5
 800a54e:	4628      	mov	r0, r5
 800a550:	6013      	str	r3, [r2, #0]
 800a552:	b004      	add	sp, #16
 800a554:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a558:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a55c:	eb00 0904 	add.w	r9, r0, r4
 800a560:	d1e5      	bne.n	800a52e <__cvt+0x6a>
 800a562:	7803      	ldrb	r3, [r0, #0]
 800a564:	2b30      	cmp	r3, #48	@ 0x30
 800a566:	d10a      	bne.n	800a57e <__cvt+0xba>
 800a568:	2200      	movs	r2, #0
 800a56a:	2300      	movs	r3, #0
 800a56c:	4630      	mov	r0, r6
 800a56e:	4639      	mov	r1, r7
 800a570:	f7f6 faaa 	bl	8000ac8 <__aeabi_dcmpeq>
 800a574:	b918      	cbnz	r0, 800a57e <__cvt+0xba>
 800a576:	f1c4 0401 	rsb	r4, r4, #1
 800a57a:	f8ca 4000 	str.w	r4, [sl]
 800a57e:	f8da 3000 	ldr.w	r3, [sl]
 800a582:	4499      	add	r9, r3
 800a584:	e7d3      	b.n	800a52e <__cvt+0x6a>
 800a586:	1c59      	adds	r1, r3, #1
 800a588:	9103      	str	r1, [sp, #12]
 800a58a:	701a      	strb	r2, [r3, #0]
 800a58c:	e7d9      	b.n	800a542 <__cvt+0x7e>

0800a58e <__exponent>:
 800a58e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a590:	2900      	cmp	r1, #0
 800a592:	bfba      	itte	lt
 800a594:	4249      	neglt	r1, r1
 800a596:	232d      	movlt	r3, #45	@ 0x2d
 800a598:	232b      	movge	r3, #43	@ 0x2b
 800a59a:	2909      	cmp	r1, #9
 800a59c:	7002      	strb	r2, [r0, #0]
 800a59e:	7043      	strb	r3, [r0, #1]
 800a5a0:	dd29      	ble.n	800a5f6 <__exponent+0x68>
 800a5a2:	f10d 0307 	add.w	r3, sp, #7
 800a5a6:	461d      	mov	r5, r3
 800a5a8:	270a      	movs	r7, #10
 800a5aa:	461a      	mov	r2, r3
 800a5ac:	fbb1 f6f7 	udiv	r6, r1, r7
 800a5b0:	fb07 1416 	mls	r4, r7, r6, r1
 800a5b4:	3430      	adds	r4, #48	@ 0x30
 800a5b6:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a5ba:	460c      	mov	r4, r1
 800a5bc:	2c63      	cmp	r4, #99	@ 0x63
 800a5be:	f103 33ff 	add.w	r3, r3, #4294967295
 800a5c2:	4631      	mov	r1, r6
 800a5c4:	dcf1      	bgt.n	800a5aa <__exponent+0x1c>
 800a5c6:	3130      	adds	r1, #48	@ 0x30
 800a5c8:	1e94      	subs	r4, r2, #2
 800a5ca:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a5ce:	1c41      	adds	r1, r0, #1
 800a5d0:	4623      	mov	r3, r4
 800a5d2:	42ab      	cmp	r3, r5
 800a5d4:	d30a      	bcc.n	800a5ec <__exponent+0x5e>
 800a5d6:	f10d 0309 	add.w	r3, sp, #9
 800a5da:	1a9b      	subs	r3, r3, r2
 800a5dc:	42ac      	cmp	r4, r5
 800a5de:	bf88      	it	hi
 800a5e0:	2300      	movhi	r3, #0
 800a5e2:	3302      	adds	r3, #2
 800a5e4:	4403      	add	r3, r0
 800a5e6:	1a18      	subs	r0, r3, r0
 800a5e8:	b003      	add	sp, #12
 800a5ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a5ec:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a5f0:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a5f4:	e7ed      	b.n	800a5d2 <__exponent+0x44>
 800a5f6:	2330      	movs	r3, #48	@ 0x30
 800a5f8:	3130      	adds	r1, #48	@ 0x30
 800a5fa:	7083      	strb	r3, [r0, #2]
 800a5fc:	70c1      	strb	r1, [r0, #3]
 800a5fe:	1d03      	adds	r3, r0, #4
 800a600:	e7f1      	b.n	800a5e6 <__exponent+0x58>
	...

0800a604 <_printf_float>:
 800a604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a608:	b08d      	sub	sp, #52	@ 0x34
 800a60a:	460c      	mov	r4, r1
 800a60c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a610:	4616      	mov	r6, r2
 800a612:	461f      	mov	r7, r3
 800a614:	4605      	mov	r5, r0
 800a616:	f000 fcdb 	bl	800afd0 <_localeconv_r>
 800a61a:	6803      	ldr	r3, [r0, #0]
 800a61c:	9304      	str	r3, [sp, #16]
 800a61e:	4618      	mov	r0, r3
 800a620:	f7f5 fe26 	bl	8000270 <strlen>
 800a624:	2300      	movs	r3, #0
 800a626:	930a      	str	r3, [sp, #40]	@ 0x28
 800a628:	f8d8 3000 	ldr.w	r3, [r8]
 800a62c:	9005      	str	r0, [sp, #20]
 800a62e:	3307      	adds	r3, #7
 800a630:	f023 0307 	bic.w	r3, r3, #7
 800a634:	f103 0208 	add.w	r2, r3, #8
 800a638:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a63c:	f8d4 b000 	ldr.w	fp, [r4]
 800a640:	f8c8 2000 	str.w	r2, [r8]
 800a644:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a648:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a64c:	9307      	str	r3, [sp, #28]
 800a64e:	f8cd 8018 	str.w	r8, [sp, #24]
 800a652:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a656:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a65a:	4b9c      	ldr	r3, [pc, #624]	@ (800a8cc <_printf_float+0x2c8>)
 800a65c:	f04f 32ff 	mov.w	r2, #4294967295
 800a660:	f7f6 fa64 	bl	8000b2c <__aeabi_dcmpun>
 800a664:	bb70      	cbnz	r0, 800a6c4 <_printf_float+0xc0>
 800a666:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a66a:	4b98      	ldr	r3, [pc, #608]	@ (800a8cc <_printf_float+0x2c8>)
 800a66c:	f04f 32ff 	mov.w	r2, #4294967295
 800a670:	f7f6 fa3e 	bl	8000af0 <__aeabi_dcmple>
 800a674:	bb30      	cbnz	r0, 800a6c4 <_printf_float+0xc0>
 800a676:	2200      	movs	r2, #0
 800a678:	2300      	movs	r3, #0
 800a67a:	4640      	mov	r0, r8
 800a67c:	4649      	mov	r1, r9
 800a67e:	f7f6 fa2d 	bl	8000adc <__aeabi_dcmplt>
 800a682:	b110      	cbz	r0, 800a68a <_printf_float+0x86>
 800a684:	232d      	movs	r3, #45	@ 0x2d
 800a686:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a68a:	4a91      	ldr	r2, [pc, #580]	@ (800a8d0 <_printf_float+0x2cc>)
 800a68c:	4b91      	ldr	r3, [pc, #580]	@ (800a8d4 <_printf_float+0x2d0>)
 800a68e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a692:	bf94      	ite	ls
 800a694:	4690      	movls	r8, r2
 800a696:	4698      	movhi	r8, r3
 800a698:	2303      	movs	r3, #3
 800a69a:	6123      	str	r3, [r4, #16]
 800a69c:	f02b 0304 	bic.w	r3, fp, #4
 800a6a0:	6023      	str	r3, [r4, #0]
 800a6a2:	f04f 0900 	mov.w	r9, #0
 800a6a6:	9700      	str	r7, [sp, #0]
 800a6a8:	4633      	mov	r3, r6
 800a6aa:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a6ac:	4621      	mov	r1, r4
 800a6ae:	4628      	mov	r0, r5
 800a6b0:	f000 f9d2 	bl	800aa58 <_printf_common>
 800a6b4:	3001      	adds	r0, #1
 800a6b6:	f040 808d 	bne.w	800a7d4 <_printf_float+0x1d0>
 800a6ba:	f04f 30ff 	mov.w	r0, #4294967295
 800a6be:	b00d      	add	sp, #52	@ 0x34
 800a6c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6c4:	4642      	mov	r2, r8
 800a6c6:	464b      	mov	r3, r9
 800a6c8:	4640      	mov	r0, r8
 800a6ca:	4649      	mov	r1, r9
 800a6cc:	f7f6 fa2e 	bl	8000b2c <__aeabi_dcmpun>
 800a6d0:	b140      	cbz	r0, 800a6e4 <_printf_float+0xe0>
 800a6d2:	464b      	mov	r3, r9
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	bfbc      	itt	lt
 800a6d8:	232d      	movlt	r3, #45	@ 0x2d
 800a6da:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a6de:	4a7e      	ldr	r2, [pc, #504]	@ (800a8d8 <_printf_float+0x2d4>)
 800a6e0:	4b7e      	ldr	r3, [pc, #504]	@ (800a8dc <_printf_float+0x2d8>)
 800a6e2:	e7d4      	b.n	800a68e <_printf_float+0x8a>
 800a6e4:	6863      	ldr	r3, [r4, #4]
 800a6e6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a6ea:	9206      	str	r2, [sp, #24]
 800a6ec:	1c5a      	adds	r2, r3, #1
 800a6ee:	d13b      	bne.n	800a768 <_printf_float+0x164>
 800a6f0:	2306      	movs	r3, #6
 800a6f2:	6063      	str	r3, [r4, #4]
 800a6f4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	6022      	str	r2, [r4, #0]
 800a6fc:	9303      	str	r3, [sp, #12]
 800a6fe:	ab0a      	add	r3, sp, #40	@ 0x28
 800a700:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a704:	ab09      	add	r3, sp, #36	@ 0x24
 800a706:	9300      	str	r3, [sp, #0]
 800a708:	6861      	ldr	r1, [r4, #4]
 800a70a:	ec49 8b10 	vmov	d0, r8, r9
 800a70e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a712:	4628      	mov	r0, r5
 800a714:	f7ff fed6 	bl	800a4c4 <__cvt>
 800a718:	9b06      	ldr	r3, [sp, #24]
 800a71a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a71c:	2b47      	cmp	r3, #71	@ 0x47
 800a71e:	4680      	mov	r8, r0
 800a720:	d129      	bne.n	800a776 <_printf_float+0x172>
 800a722:	1cc8      	adds	r0, r1, #3
 800a724:	db02      	blt.n	800a72c <_printf_float+0x128>
 800a726:	6863      	ldr	r3, [r4, #4]
 800a728:	4299      	cmp	r1, r3
 800a72a:	dd41      	ble.n	800a7b0 <_printf_float+0x1ac>
 800a72c:	f1aa 0a02 	sub.w	sl, sl, #2
 800a730:	fa5f fa8a 	uxtb.w	sl, sl
 800a734:	3901      	subs	r1, #1
 800a736:	4652      	mov	r2, sl
 800a738:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a73c:	9109      	str	r1, [sp, #36]	@ 0x24
 800a73e:	f7ff ff26 	bl	800a58e <__exponent>
 800a742:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a744:	1813      	adds	r3, r2, r0
 800a746:	2a01      	cmp	r2, #1
 800a748:	4681      	mov	r9, r0
 800a74a:	6123      	str	r3, [r4, #16]
 800a74c:	dc02      	bgt.n	800a754 <_printf_float+0x150>
 800a74e:	6822      	ldr	r2, [r4, #0]
 800a750:	07d2      	lsls	r2, r2, #31
 800a752:	d501      	bpl.n	800a758 <_printf_float+0x154>
 800a754:	3301      	adds	r3, #1
 800a756:	6123      	str	r3, [r4, #16]
 800a758:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d0a2      	beq.n	800a6a6 <_printf_float+0xa2>
 800a760:	232d      	movs	r3, #45	@ 0x2d
 800a762:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a766:	e79e      	b.n	800a6a6 <_printf_float+0xa2>
 800a768:	9a06      	ldr	r2, [sp, #24]
 800a76a:	2a47      	cmp	r2, #71	@ 0x47
 800a76c:	d1c2      	bne.n	800a6f4 <_printf_float+0xf0>
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d1c0      	bne.n	800a6f4 <_printf_float+0xf0>
 800a772:	2301      	movs	r3, #1
 800a774:	e7bd      	b.n	800a6f2 <_printf_float+0xee>
 800a776:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a77a:	d9db      	bls.n	800a734 <_printf_float+0x130>
 800a77c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a780:	d118      	bne.n	800a7b4 <_printf_float+0x1b0>
 800a782:	2900      	cmp	r1, #0
 800a784:	6863      	ldr	r3, [r4, #4]
 800a786:	dd0b      	ble.n	800a7a0 <_printf_float+0x19c>
 800a788:	6121      	str	r1, [r4, #16]
 800a78a:	b913      	cbnz	r3, 800a792 <_printf_float+0x18e>
 800a78c:	6822      	ldr	r2, [r4, #0]
 800a78e:	07d0      	lsls	r0, r2, #31
 800a790:	d502      	bpl.n	800a798 <_printf_float+0x194>
 800a792:	3301      	adds	r3, #1
 800a794:	440b      	add	r3, r1
 800a796:	6123      	str	r3, [r4, #16]
 800a798:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a79a:	f04f 0900 	mov.w	r9, #0
 800a79e:	e7db      	b.n	800a758 <_printf_float+0x154>
 800a7a0:	b913      	cbnz	r3, 800a7a8 <_printf_float+0x1a4>
 800a7a2:	6822      	ldr	r2, [r4, #0]
 800a7a4:	07d2      	lsls	r2, r2, #31
 800a7a6:	d501      	bpl.n	800a7ac <_printf_float+0x1a8>
 800a7a8:	3302      	adds	r3, #2
 800a7aa:	e7f4      	b.n	800a796 <_printf_float+0x192>
 800a7ac:	2301      	movs	r3, #1
 800a7ae:	e7f2      	b.n	800a796 <_printf_float+0x192>
 800a7b0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a7b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a7b6:	4299      	cmp	r1, r3
 800a7b8:	db05      	blt.n	800a7c6 <_printf_float+0x1c2>
 800a7ba:	6823      	ldr	r3, [r4, #0]
 800a7bc:	6121      	str	r1, [r4, #16]
 800a7be:	07d8      	lsls	r0, r3, #31
 800a7c0:	d5ea      	bpl.n	800a798 <_printf_float+0x194>
 800a7c2:	1c4b      	adds	r3, r1, #1
 800a7c4:	e7e7      	b.n	800a796 <_printf_float+0x192>
 800a7c6:	2900      	cmp	r1, #0
 800a7c8:	bfd4      	ite	le
 800a7ca:	f1c1 0202 	rsble	r2, r1, #2
 800a7ce:	2201      	movgt	r2, #1
 800a7d0:	4413      	add	r3, r2
 800a7d2:	e7e0      	b.n	800a796 <_printf_float+0x192>
 800a7d4:	6823      	ldr	r3, [r4, #0]
 800a7d6:	055a      	lsls	r2, r3, #21
 800a7d8:	d407      	bmi.n	800a7ea <_printf_float+0x1e6>
 800a7da:	6923      	ldr	r3, [r4, #16]
 800a7dc:	4642      	mov	r2, r8
 800a7de:	4631      	mov	r1, r6
 800a7e0:	4628      	mov	r0, r5
 800a7e2:	47b8      	blx	r7
 800a7e4:	3001      	adds	r0, #1
 800a7e6:	d12b      	bne.n	800a840 <_printf_float+0x23c>
 800a7e8:	e767      	b.n	800a6ba <_printf_float+0xb6>
 800a7ea:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a7ee:	f240 80dd 	bls.w	800a9ac <_printf_float+0x3a8>
 800a7f2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	f7f6 f965 	bl	8000ac8 <__aeabi_dcmpeq>
 800a7fe:	2800      	cmp	r0, #0
 800a800:	d033      	beq.n	800a86a <_printf_float+0x266>
 800a802:	4a37      	ldr	r2, [pc, #220]	@ (800a8e0 <_printf_float+0x2dc>)
 800a804:	2301      	movs	r3, #1
 800a806:	4631      	mov	r1, r6
 800a808:	4628      	mov	r0, r5
 800a80a:	47b8      	blx	r7
 800a80c:	3001      	adds	r0, #1
 800a80e:	f43f af54 	beq.w	800a6ba <_printf_float+0xb6>
 800a812:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a816:	4543      	cmp	r3, r8
 800a818:	db02      	blt.n	800a820 <_printf_float+0x21c>
 800a81a:	6823      	ldr	r3, [r4, #0]
 800a81c:	07d8      	lsls	r0, r3, #31
 800a81e:	d50f      	bpl.n	800a840 <_printf_float+0x23c>
 800a820:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a824:	4631      	mov	r1, r6
 800a826:	4628      	mov	r0, r5
 800a828:	47b8      	blx	r7
 800a82a:	3001      	adds	r0, #1
 800a82c:	f43f af45 	beq.w	800a6ba <_printf_float+0xb6>
 800a830:	f04f 0900 	mov.w	r9, #0
 800a834:	f108 38ff 	add.w	r8, r8, #4294967295
 800a838:	f104 0a1a 	add.w	sl, r4, #26
 800a83c:	45c8      	cmp	r8, r9
 800a83e:	dc09      	bgt.n	800a854 <_printf_float+0x250>
 800a840:	6823      	ldr	r3, [r4, #0]
 800a842:	079b      	lsls	r3, r3, #30
 800a844:	f100 8103 	bmi.w	800aa4e <_printf_float+0x44a>
 800a848:	68e0      	ldr	r0, [r4, #12]
 800a84a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a84c:	4298      	cmp	r0, r3
 800a84e:	bfb8      	it	lt
 800a850:	4618      	movlt	r0, r3
 800a852:	e734      	b.n	800a6be <_printf_float+0xba>
 800a854:	2301      	movs	r3, #1
 800a856:	4652      	mov	r2, sl
 800a858:	4631      	mov	r1, r6
 800a85a:	4628      	mov	r0, r5
 800a85c:	47b8      	blx	r7
 800a85e:	3001      	adds	r0, #1
 800a860:	f43f af2b 	beq.w	800a6ba <_printf_float+0xb6>
 800a864:	f109 0901 	add.w	r9, r9, #1
 800a868:	e7e8      	b.n	800a83c <_printf_float+0x238>
 800a86a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	dc39      	bgt.n	800a8e4 <_printf_float+0x2e0>
 800a870:	4a1b      	ldr	r2, [pc, #108]	@ (800a8e0 <_printf_float+0x2dc>)
 800a872:	2301      	movs	r3, #1
 800a874:	4631      	mov	r1, r6
 800a876:	4628      	mov	r0, r5
 800a878:	47b8      	blx	r7
 800a87a:	3001      	adds	r0, #1
 800a87c:	f43f af1d 	beq.w	800a6ba <_printf_float+0xb6>
 800a880:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a884:	ea59 0303 	orrs.w	r3, r9, r3
 800a888:	d102      	bne.n	800a890 <_printf_float+0x28c>
 800a88a:	6823      	ldr	r3, [r4, #0]
 800a88c:	07d9      	lsls	r1, r3, #31
 800a88e:	d5d7      	bpl.n	800a840 <_printf_float+0x23c>
 800a890:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a894:	4631      	mov	r1, r6
 800a896:	4628      	mov	r0, r5
 800a898:	47b8      	blx	r7
 800a89a:	3001      	adds	r0, #1
 800a89c:	f43f af0d 	beq.w	800a6ba <_printf_float+0xb6>
 800a8a0:	f04f 0a00 	mov.w	sl, #0
 800a8a4:	f104 0b1a 	add.w	fp, r4, #26
 800a8a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8aa:	425b      	negs	r3, r3
 800a8ac:	4553      	cmp	r3, sl
 800a8ae:	dc01      	bgt.n	800a8b4 <_printf_float+0x2b0>
 800a8b0:	464b      	mov	r3, r9
 800a8b2:	e793      	b.n	800a7dc <_printf_float+0x1d8>
 800a8b4:	2301      	movs	r3, #1
 800a8b6:	465a      	mov	r2, fp
 800a8b8:	4631      	mov	r1, r6
 800a8ba:	4628      	mov	r0, r5
 800a8bc:	47b8      	blx	r7
 800a8be:	3001      	adds	r0, #1
 800a8c0:	f43f aefb 	beq.w	800a6ba <_printf_float+0xb6>
 800a8c4:	f10a 0a01 	add.w	sl, sl, #1
 800a8c8:	e7ee      	b.n	800a8a8 <_printf_float+0x2a4>
 800a8ca:	bf00      	nop
 800a8cc:	7fefffff 	.word	0x7fefffff
 800a8d0:	0800d520 	.word	0x0800d520
 800a8d4:	0800d524 	.word	0x0800d524
 800a8d8:	0800d528 	.word	0x0800d528
 800a8dc:	0800d52c 	.word	0x0800d52c
 800a8e0:	0800d530 	.word	0x0800d530
 800a8e4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a8e6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a8ea:	4553      	cmp	r3, sl
 800a8ec:	bfa8      	it	ge
 800a8ee:	4653      	movge	r3, sl
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	4699      	mov	r9, r3
 800a8f4:	dc36      	bgt.n	800a964 <_printf_float+0x360>
 800a8f6:	f04f 0b00 	mov.w	fp, #0
 800a8fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a8fe:	f104 021a 	add.w	r2, r4, #26
 800a902:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a904:	9306      	str	r3, [sp, #24]
 800a906:	eba3 0309 	sub.w	r3, r3, r9
 800a90a:	455b      	cmp	r3, fp
 800a90c:	dc31      	bgt.n	800a972 <_printf_float+0x36e>
 800a90e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a910:	459a      	cmp	sl, r3
 800a912:	dc3a      	bgt.n	800a98a <_printf_float+0x386>
 800a914:	6823      	ldr	r3, [r4, #0]
 800a916:	07da      	lsls	r2, r3, #31
 800a918:	d437      	bmi.n	800a98a <_printf_float+0x386>
 800a91a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a91c:	ebaa 0903 	sub.w	r9, sl, r3
 800a920:	9b06      	ldr	r3, [sp, #24]
 800a922:	ebaa 0303 	sub.w	r3, sl, r3
 800a926:	4599      	cmp	r9, r3
 800a928:	bfa8      	it	ge
 800a92a:	4699      	movge	r9, r3
 800a92c:	f1b9 0f00 	cmp.w	r9, #0
 800a930:	dc33      	bgt.n	800a99a <_printf_float+0x396>
 800a932:	f04f 0800 	mov.w	r8, #0
 800a936:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a93a:	f104 0b1a 	add.w	fp, r4, #26
 800a93e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a940:	ebaa 0303 	sub.w	r3, sl, r3
 800a944:	eba3 0309 	sub.w	r3, r3, r9
 800a948:	4543      	cmp	r3, r8
 800a94a:	f77f af79 	ble.w	800a840 <_printf_float+0x23c>
 800a94e:	2301      	movs	r3, #1
 800a950:	465a      	mov	r2, fp
 800a952:	4631      	mov	r1, r6
 800a954:	4628      	mov	r0, r5
 800a956:	47b8      	blx	r7
 800a958:	3001      	adds	r0, #1
 800a95a:	f43f aeae 	beq.w	800a6ba <_printf_float+0xb6>
 800a95e:	f108 0801 	add.w	r8, r8, #1
 800a962:	e7ec      	b.n	800a93e <_printf_float+0x33a>
 800a964:	4642      	mov	r2, r8
 800a966:	4631      	mov	r1, r6
 800a968:	4628      	mov	r0, r5
 800a96a:	47b8      	blx	r7
 800a96c:	3001      	adds	r0, #1
 800a96e:	d1c2      	bne.n	800a8f6 <_printf_float+0x2f2>
 800a970:	e6a3      	b.n	800a6ba <_printf_float+0xb6>
 800a972:	2301      	movs	r3, #1
 800a974:	4631      	mov	r1, r6
 800a976:	4628      	mov	r0, r5
 800a978:	9206      	str	r2, [sp, #24]
 800a97a:	47b8      	blx	r7
 800a97c:	3001      	adds	r0, #1
 800a97e:	f43f ae9c 	beq.w	800a6ba <_printf_float+0xb6>
 800a982:	9a06      	ldr	r2, [sp, #24]
 800a984:	f10b 0b01 	add.w	fp, fp, #1
 800a988:	e7bb      	b.n	800a902 <_printf_float+0x2fe>
 800a98a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a98e:	4631      	mov	r1, r6
 800a990:	4628      	mov	r0, r5
 800a992:	47b8      	blx	r7
 800a994:	3001      	adds	r0, #1
 800a996:	d1c0      	bne.n	800a91a <_printf_float+0x316>
 800a998:	e68f      	b.n	800a6ba <_printf_float+0xb6>
 800a99a:	9a06      	ldr	r2, [sp, #24]
 800a99c:	464b      	mov	r3, r9
 800a99e:	4442      	add	r2, r8
 800a9a0:	4631      	mov	r1, r6
 800a9a2:	4628      	mov	r0, r5
 800a9a4:	47b8      	blx	r7
 800a9a6:	3001      	adds	r0, #1
 800a9a8:	d1c3      	bne.n	800a932 <_printf_float+0x32e>
 800a9aa:	e686      	b.n	800a6ba <_printf_float+0xb6>
 800a9ac:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a9b0:	f1ba 0f01 	cmp.w	sl, #1
 800a9b4:	dc01      	bgt.n	800a9ba <_printf_float+0x3b6>
 800a9b6:	07db      	lsls	r3, r3, #31
 800a9b8:	d536      	bpl.n	800aa28 <_printf_float+0x424>
 800a9ba:	2301      	movs	r3, #1
 800a9bc:	4642      	mov	r2, r8
 800a9be:	4631      	mov	r1, r6
 800a9c0:	4628      	mov	r0, r5
 800a9c2:	47b8      	blx	r7
 800a9c4:	3001      	adds	r0, #1
 800a9c6:	f43f ae78 	beq.w	800a6ba <_printf_float+0xb6>
 800a9ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a9ce:	4631      	mov	r1, r6
 800a9d0:	4628      	mov	r0, r5
 800a9d2:	47b8      	blx	r7
 800a9d4:	3001      	adds	r0, #1
 800a9d6:	f43f ae70 	beq.w	800a6ba <_printf_float+0xb6>
 800a9da:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a9de:	2200      	movs	r2, #0
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a9e6:	f7f6 f86f 	bl	8000ac8 <__aeabi_dcmpeq>
 800a9ea:	b9c0      	cbnz	r0, 800aa1e <_printf_float+0x41a>
 800a9ec:	4653      	mov	r3, sl
 800a9ee:	f108 0201 	add.w	r2, r8, #1
 800a9f2:	4631      	mov	r1, r6
 800a9f4:	4628      	mov	r0, r5
 800a9f6:	47b8      	blx	r7
 800a9f8:	3001      	adds	r0, #1
 800a9fa:	d10c      	bne.n	800aa16 <_printf_float+0x412>
 800a9fc:	e65d      	b.n	800a6ba <_printf_float+0xb6>
 800a9fe:	2301      	movs	r3, #1
 800aa00:	465a      	mov	r2, fp
 800aa02:	4631      	mov	r1, r6
 800aa04:	4628      	mov	r0, r5
 800aa06:	47b8      	blx	r7
 800aa08:	3001      	adds	r0, #1
 800aa0a:	f43f ae56 	beq.w	800a6ba <_printf_float+0xb6>
 800aa0e:	f108 0801 	add.w	r8, r8, #1
 800aa12:	45d0      	cmp	r8, sl
 800aa14:	dbf3      	blt.n	800a9fe <_printf_float+0x3fa>
 800aa16:	464b      	mov	r3, r9
 800aa18:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800aa1c:	e6df      	b.n	800a7de <_printf_float+0x1da>
 800aa1e:	f04f 0800 	mov.w	r8, #0
 800aa22:	f104 0b1a 	add.w	fp, r4, #26
 800aa26:	e7f4      	b.n	800aa12 <_printf_float+0x40e>
 800aa28:	2301      	movs	r3, #1
 800aa2a:	4642      	mov	r2, r8
 800aa2c:	e7e1      	b.n	800a9f2 <_printf_float+0x3ee>
 800aa2e:	2301      	movs	r3, #1
 800aa30:	464a      	mov	r2, r9
 800aa32:	4631      	mov	r1, r6
 800aa34:	4628      	mov	r0, r5
 800aa36:	47b8      	blx	r7
 800aa38:	3001      	adds	r0, #1
 800aa3a:	f43f ae3e 	beq.w	800a6ba <_printf_float+0xb6>
 800aa3e:	f108 0801 	add.w	r8, r8, #1
 800aa42:	68e3      	ldr	r3, [r4, #12]
 800aa44:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800aa46:	1a5b      	subs	r3, r3, r1
 800aa48:	4543      	cmp	r3, r8
 800aa4a:	dcf0      	bgt.n	800aa2e <_printf_float+0x42a>
 800aa4c:	e6fc      	b.n	800a848 <_printf_float+0x244>
 800aa4e:	f04f 0800 	mov.w	r8, #0
 800aa52:	f104 0919 	add.w	r9, r4, #25
 800aa56:	e7f4      	b.n	800aa42 <_printf_float+0x43e>

0800aa58 <_printf_common>:
 800aa58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa5c:	4616      	mov	r6, r2
 800aa5e:	4698      	mov	r8, r3
 800aa60:	688a      	ldr	r2, [r1, #8]
 800aa62:	690b      	ldr	r3, [r1, #16]
 800aa64:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800aa68:	4293      	cmp	r3, r2
 800aa6a:	bfb8      	it	lt
 800aa6c:	4613      	movlt	r3, r2
 800aa6e:	6033      	str	r3, [r6, #0]
 800aa70:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800aa74:	4607      	mov	r7, r0
 800aa76:	460c      	mov	r4, r1
 800aa78:	b10a      	cbz	r2, 800aa7e <_printf_common+0x26>
 800aa7a:	3301      	adds	r3, #1
 800aa7c:	6033      	str	r3, [r6, #0]
 800aa7e:	6823      	ldr	r3, [r4, #0]
 800aa80:	0699      	lsls	r1, r3, #26
 800aa82:	bf42      	ittt	mi
 800aa84:	6833      	ldrmi	r3, [r6, #0]
 800aa86:	3302      	addmi	r3, #2
 800aa88:	6033      	strmi	r3, [r6, #0]
 800aa8a:	6825      	ldr	r5, [r4, #0]
 800aa8c:	f015 0506 	ands.w	r5, r5, #6
 800aa90:	d106      	bne.n	800aaa0 <_printf_common+0x48>
 800aa92:	f104 0a19 	add.w	sl, r4, #25
 800aa96:	68e3      	ldr	r3, [r4, #12]
 800aa98:	6832      	ldr	r2, [r6, #0]
 800aa9a:	1a9b      	subs	r3, r3, r2
 800aa9c:	42ab      	cmp	r3, r5
 800aa9e:	dc26      	bgt.n	800aaee <_printf_common+0x96>
 800aaa0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800aaa4:	6822      	ldr	r2, [r4, #0]
 800aaa6:	3b00      	subs	r3, #0
 800aaa8:	bf18      	it	ne
 800aaaa:	2301      	movne	r3, #1
 800aaac:	0692      	lsls	r2, r2, #26
 800aaae:	d42b      	bmi.n	800ab08 <_printf_common+0xb0>
 800aab0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800aab4:	4641      	mov	r1, r8
 800aab6:	4638      	mov	r0, r7
 800aab8:	47c8      	blx	r9
 800aaba:	3001      	adds	r0, #1
 800aabc:	d01e      	beq.n	800aafc <_printf_common+0xa4>
 800aabe:	6823      	ldr	r3, [r4, #0]
 800aac0:	6922      	ldr	r2, [r4, #16]
 800aac2:	f003 0306 	and.w	r3, r3, #6
 800aac6:	2b04      	cmp	r3, #4
 800aac8:	bf02      	ittt	eq
 800aaca:	68e5      	ldreq	r5, [r4, #12]
 800aacc:	6833      	ldreq	r3, [r6, #0]
 800aace:	1aed      	subeq	r5, r5, r3
 800aad0:	68a3      	ldr	r3, [r4, #8]
 800aad2:	bf0c      	ite	eq
 800aad4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aad8:	2500      	movne	r5, #0
 800aada:	4293      	cmp	r3, r2
 800aadc:	bfc4      	itt	gt
 800aade:	1a9b      	subgt	r3, r3, r2
 800aae0:	18ed      	addgt	r5, r5, r3
 800aae2:	2600      	movs	r6, #0
 800aae4:	341a      	adds	r4, #26
 800aae6:	42b5      	cmp	r5, r6
 800aae8:	d11a      	bne.n	800ab20 <_printf_common+0xc8>
 800aaea:	2000      	movs	r0, #0
 800aaec:	e008      	b.n	800ab00 <_printf_common+0xa8>
 800aaee:	2301      	movs	r3, #1
 800aaf0:	4652      	mov	r2, sl
 800aaf2:	4641      	mov	r1, r8
 800aaf4:	4638      	mov	r0, r7
 800aaf6:	47c8      	blx	r9
 800aaf8:	3001      	adds	r0, #1
 800aafa:	d103      	bne.n	800ab04 <_printf_common+0xac>
 800aafc:	f04f 30ff 	mov.w	r0, #4294967295
 800ab00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab04:	3501      	adds	r5, #1
 800ab06:	e7c6      	b.n	800aa96 <_printf_common+0x3e>
 800ab08:	18e1      	adds	r1, r4, r3
 800ab0a:	1c5a      	adds	r2, r3, #1
 800ab0c:	2030      	movs	r0, #48	@ 0x30
 800ab0e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ab12:	4422      	add	r2, r4
 800ab14:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ab18:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ab1c:	3302      	adds	r3, #2
 800ab1e:	e7c7      	b.n	800aab0 <_printf_common+0x58>
 800ab20:	2301      	movs	r3, #1
 800ab22:	4622      	mov	r2, r4
 800ab24:	4641      	mov	r1, r8
 800ab26:	4638      	mov	r0, r7
 800ab28:	47c8      	blx	r9
 800ab2a:	3001      	adds	r0, #1
 800ab2c:	d0e6      	beq.n	800aafc <_printf_common+0xa4>
 800ab2e:	3601      	adds	r6, #1
 800ab30:	e7d9      	b.n	800aae6 <_printf_common+0x8e>
	...

0800ab34 <_printf_i>:
 800ab34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ab38:	7e0f      	ldrb	r7, [r1, #24]
 800ab3a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ab3c:	2f78      	cmp	r7, #120	@ 0x78
 800ab3e:	4691      	mov	r9, r2
 800ab40:	4680      	mov	r8, r0
 800ab42:	460c      	mov	r4, r1
 800ab44:	469a      	mov	sl, r3
 800ab46:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ab4a:	d807      	bhi.n	800ab5c <_printf_i+0x28>
 800ab4c:	2f62      	cmp	r7, #98	@ 0x62
 800ab4e:	d80a      	bhi.n	800ab66 <_printf_i+0x32>
 800ab50:	2f00      	cmp	r7, #0
 800ab52:	f000 80d2 	beq.w	800acfa <_printf_i+0x1c6>
 800ab56:	2f58      	cmp	r7, #88	@ 0x58
 800ab58:	f000 80b9 	beq.w	800acce <_printf_i+0x19a>
 800ab5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ab60:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ab64:	e03a      	b.n	800abdc <_printf_i+0xa8>
 800ab66:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ab6a:	2b15      	cmp	r3, #21
 800ab6c:	d8f6      	bhi.n	800ab5c <_printf_i+0x28>
 800ab6e:	a101      	add	r1, pc, #4	@ (adr r1, 800ab74 <_printf_i+0x40>)
 800ab70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ab74:	0800abcd 	.word	0x0800abcd
 800ab78:	0800abe1 	.word	0x0800abe1
 800ab7c:	0800ab5d 	.word	0x0800ab5d
 800ab80:	0800ab5d 	.word	0x0800ab5d
 800ab84:	0800ab5d 	.word	0x0800ab5d
 800ab88:	0800ab5d 	.word	0x0800ab5d
 800ab8c:	0800abe1 	.word	0x0800abe1
 800ab90:	0800ab5d 	.word	0x0800ab5d
 800ab94:	0800ab5d 	.word	0x0800ab5d
 800ab98:	0800ab5d 	.word	0x0800ab5d
 800ab9c:	0800ab5d 	.word	0x0800ab5d
 800aba0:	0800ace1 	.word	0x0800ace1
 800aba4:	0800ac0b 	.word	0x0800ac0b
 800aba8:	0800ac9b 	.word	0x0800ac9b
 800abac:	0800ab5d 	.word	0x0800ab5d
 800abb0:	0800ab5d 	.word	0x0800ab5d
 800abb4:	0800ad03 	.word	0x0800ad03
 800abb8:	0800ab5d 	.word	0x0800ab5d
 800abbc:	0800ac0b 	.word	0x0800ac0b
 800abc0:	0800ab5d 	.word	0x0800ab5d
 800abc4:	0800ab5d 	.word	0x0800ab5d
 800abc8:	0800aca3 	.word	0x0800aca3
 800abcc:	6833      	ldr	r3, [r6, #0]
 800abce:	1d1a      	adds	r2, r3, #4
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	6032      	str	r2, [r6, #0]
 800abd4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800abd8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800abdc:	2301      	movs	r3, #1
 800abde:	e09d      	b.n	800ad1c <_printf_i+0x1e8>
 800abe0:	6833      	ldr	r3, [r6, #0]
 800abe2:	6820      	ldr	r0, [r4, #0]
 800abe4:	1d19      	adds	r1, r3, #4
 800abe6:	6031      	str	r1, [r6, #0]
 800abe8:	0606      	lsls	r6, r0, #24
 800abea:	d501      	bpl.n	800abf0 <_printf_i+0xbc>
 800abec:	681d      	ldr	r5, [r3, #0]
 800abee:	e003      	b.n	800abf8 <_printf_i+0xc4>
 800abf0:	0645      	lsls	r5, r0, #25
 800abf2:	d5fb      	bpl.n	800abec <_printf_i+0xb8>
 800abf4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800abf8:	2d00      	cmp	r5, #0
 800abfa:	da03      	bge.n	800ac04 <_printf_i+0xd0>
 800abfc:	232d      	movs	r3, #45	@ 0x2d
 800abfe:	426d      	negs	r5, r5
 800ac00:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ac04:	4859      	ldr	r0, [pc, #356]	@ (800ad6c <_printf_i+0x238>)
 800ac06:	230a      	movs	r3, #10
 800ac08:	e011      	b.n	800ac2e <_printf_i+0xfa>
 800ac0a:	6821      	ldr	r1, [r4, #0]
 800ac0c:	6833      	ldr	r3, [r6, #0]
 800ac0e:	0608      	lsls	r0, r1, #24
 800ac10:	f853 5b04 	ldr.w	r5, [r3], #4
 800ac14:	d402      	bmi.n	800ac1c <_printf_i+0xe8>
 800ac16:	0649      	lsls	r1, r1, #25
 800ac18:	bf48      	it	mi
 800ac1a:	b2ad      	uxthmi	r5, r5
 800ac1c:	2f6f      	cmp	r7, #111	@ 0x6f
 800ac1e:	4853      	ldr	r0, [pc, #332]	@ (800ad6c <_printf_i+0x238>)
 800ac20:	6033      	str	r3, [r6, #0]
 800ac22:	bf14      	ite	ne
 800ac24:	230a      	movne	r3, #10
 800ac26:	2308      	moveq	r3, #8
 800ac28:	2100      	movs	r1, #0
 800ac2a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ac2e:	6866      	ldr	r6, [r4, #4]
 800ac30:	60a6      	str	r6, [r4, #8]
 800ac32:	2e00      	cmp	r6, #0
 800ac34:	bfa2      	ittt	ge
 800ac36:	6821      	ldrge	r1, [r4, #0]
 800ac38:	f021 0104 	bicge.w	r1, r1, #4
 800ac3c:	6021      	strge	r1, [r4, #0]
 800ac3e:	b90d      	cbnz	r5, 800ac44 <_printf_i+0x110>
 800ac40:	2e00      	cmp	r6, #0
 800ac42:	d04b      	beq.n	800acdc <_printf_i+0x1a8>
 800ac44:	4616      	mov	r6, r2
 800ac46:	fbb5 f1f3 	udiv	r1, r5, r3
 800ac4a:	fb03 5711 	mls	r7, r3, r1, r5
 800ac4e:	5dc7      	ldrb	r7, [r0, r7]
 800ac50:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ac54:	462f      	mov	r7, r5
 800ac56:	42bb      	cmp	r3, r7
 800ac58:	460d      	mov	r5, r1
 800ac5a:	d9f4      	bls.n	800ac46 <_printf_i+0x112>
 800ac5c:	2b08      	cmp	r3, #8
 800ac5e:	d10b      	bne.n	800ac78 <_printf_i+0x144>
 800ac60:	6823      	ldr	r3, [r4, #0]
 800ac62:	07df      	lsls	r7, r3, #31
 800ac64:	d508      	bpl.n	800ac78 <_printf_i+0x144>
 800ac66:	6923      	ldr	r3, [r4, #16]
 800ac68:	6861      	ldr	r1, [r4, #4]
 800ac6a:	4299      	cmp	r1, r3
 800ac6c:	bfde      	ittt	le
 800ac6e:	2330      	movle	r3, #48	@ 0x30
 800ac70:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ac74:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ac78:	1b92      	subs	r2, r2, r6
 800ac7a:	6122      	str	r2, [r4, #16]
 800ac7c:	f8cd a000 	str.w	sl, [sp]
 800ac80:	464b      	mov	r3, r9
 800ac82:	aa03      	add	r2, sp, #12
 800ac84:	4621      	mov	r1, r4
 800ac86:	4640      	mov	r0, r8
 800ac88:	f7ff fee6 	bl	800aa58 <_printf_common>
 800ac8c:	3001      	adds	r0, #1
 800ac8e:	d14a      	bne.n	800ad26 <_printf_i+0x1f2>
 800ac90:	f04f 30ff 	mov.w	r0, #4294967295
 800ac94:	b004      	add	sp, #16
 800ac96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac9a:	6823      	ldr	r3, [r4, #0]
 800ac9c:	f043 0320 	orr.w	r3, r3, #32
 800aca0:	6023      	str	r3, [r4, #0]
 800aca2:	4833      	ldr	r0, [pc, #204]	@ (800ad70 <_printf_i+0x23c>)
 800aca4:	2778      	movs	r7, #120	@ 0x78
 800aca6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800acaa:	6823      	ldr	r3, [r4, #0]
 800acac:	6831      	ldr	r1, [r6, #0]
 800acae:	061f      	lsls	r7, r3, #24
 800acb0:	f851 5b04 	ldr.w	r5, [r1], #4
 800acb4:	d402      	bmi.n	800acbc <_printf_i+0x188>
 800acb6:	065f      	lsls	r7, r3, #25
 800acb8:	bf48      	it	mi
 800acba:	b2ad      	uxthmi	r5, r5
 800acbc:	6031      	str	r1, [r6, #0]
 800acbe:	07d9      	lsls	r1, r3, #31
 800acc0:	bf44      	itt	mi
 800acc2:	f043 0320 	orrmi.w	r3, r3, #32
 800acc6:	6023      	strmi	r3, [r4, #0]
 800acc8:	b11d      	cbz	r5, 800acd2 <_printf_i+0x19e>
 800acca:	2310      	movs	r3, #16
 800accc:	e7ac      	b.n	800ac28 <_printf_i+0xf4>
 800acce:	4827      	ldr	r0, [pc, #156]	@ (800ad6c <_printf_i+0x238>)
 800acd0:	e7e9      	b.n	800aca6 <_printf_i+0x172>
 800acd2:	6823      	ldr	r3, [r4, #0]
 800acd4:	f023 0320 	bic.w	r3, r3, #32
 800acd8:	6023      	str	r3, [r4, #0]
 800acda:	e7f6      	b.n	800acca <_printf_i+0x196>
 800acdc:	4616      	mov	r6, r2
 800acde:	e7bd      	b.n	800ac5c <_printf_i+0x128>
 800ace0:	6833      	ldr	r3, [r6, #0]
 800ace2:	6825      	ldr	r5, [r4, #0]
 800ace4:	6961      	ldr	r1, [r4, #20]
 800ace6:	1d18      	adds	r0, r3, #4
 800ace8:	6030      	str	r0, [r6, #0]
 800acea:	062e      	lsls	r6, r5, #24
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	d501      	bpl.n	800acf4 <_printf_i+0x1c0>
 800acf0:	6019      	str	r1, [r3, #0]
 800acf2:	e002      	b.n	800acfa <_printf_i+0x1c6>
 800acf4:	0668      	lsls	r0, r5, #25
 800acf6:	d5fb      	bpl.n	800acf0 <_printf_i+0x1bc>
 800acf8:	8019      	strh	r1, [r3, #0]
 800acfa:	2300      	movs	r3, #0
 800acfc:	6123      	str	r3, [r4, #16]
 800acfe:	4616      	mov	r6, r2
 800ad00:	e7bc      	b.n	800ac7c <_printf_i+0x148>
 800ad02:	6833      	ldr	r3, [r6, #0]
 800ad04:	1d1a      	adds	r2, r3, #4
 800ad06:	6032      	str	r2, [r6, #0]
 800ad08:	681e      	ldr	r6, [r3, #0]
 800ad0a:	6862      	ldr	r2, [r4, #4]
 800ad0c:	2100      	movs	r1, #0
 800ad0e:	4630      	mov	r0, r6
 800ad10:	f7f5 fa5e 	bl	80001d0 <memchr>
 800ad14:	b108      	cbz	r0, 800ad1a <_printf_i+0x1e6>
 800ad16:	1b80      	subs	r0, r0, r6
 800ad18:	6060      	str	r0, [r4, #4]
 800ad1a:	6863      	ldr	r3, [r4, #4]
 800ad1c:	6123      	str	r3, [r4, #16]
 800ad1e:	2300      	movs	r3, #0
 800ad20:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ad24:	e7aa      	b.n	800ac7c <_printf_i+0x148>
 800ad26:	6923      	ldr	r3, [r4, #16]
 800ad28:	4632      	mov	r2, r6
 800ad2a:	4649      	mov	r1, r9
 800ad2c:	4640      	mov	r0, r8
 800ad2e:	47d0      	blx	sl
 800ad30:	3001      	adds	r0, #1
 800ad32:	d0ad      	beq.n	800ac90 <_printf_i+0x15c>
 800ad34:	6823      	ldr	r3, [r4, #0]
 800ad36:	079b      	lsls	r3, r3, #30
 800ad38:	d413      	bmi.n	800ad62 <_printf_i+0x22e>
 800ad3a:	68e0      	ldr	r0, [r4, #12]
 800ad3c:	9b03      	ldr	r3, [sp, #12]
 800ad3e:	4298      	cmp	r0, r3
 800ad40:	bfb8      	it	lt
 800ad42:	4618      	movlt	r0, r3
 800ad44:	e7a6      	b.n	800ac94 <_printf_i+0x160>
 800ad46:	2301      	movs	r3, #1
 800ad48:	4632      	mov	r2, r6
 800ad4a:	4649      	mov	r1, r9
 800ad4c:	4640      	mov	r0, r8
 800ad4e:	47d0      	blx	sl
 800ad50:	3001      	adds	r0, #1
 800ad52:	d09d      	beq.n	800ac90 <_printf_i+0x15c>
 800ad54:	3501      	adds	r5, #1
 800ad56:	68e3      	ldr	r3, [r4, #12]
 800ad58:	9903      	ldr	r1, [sp, #12]
 800ad5a:	1a5b      	subs	r3, r3, r1
 800ad5c:	42ab      	cmp	r3, r5
 800ad5e:	dcf2      	bgt.n	800ad46 <_printf_i+0x212>
 800ad60:	e7eb      	b.n	800ad3a <_printf_i+0x206>
 800ad62:	2500      	movs	r5, #0
 800ad64:	f104 0619 	add.w	r6, r4, #25
 800ad68:	e7f5      	b.n	800ad56 <_printf_i+0x222>
 800ad6a:	bf00      	nop
 800ad6c:	0800d532 	.word	0x0800d532
 800ad70:	0800d543 	.word	0x0800d543

0800ad74 <std>:
 800ad74:	2300      	movs	r3, #0
 800ad76:	b510      	push	{r4, lr}
 800ad78:	4604      	mov	r4, r0
 800ad7a:	e9c0 3300 	strd	r3, r3, [r0]
 800ad7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ad82:	6083      	str	r3, [r0, #8]
 800ad84:	8181      	strh	r1, [r0, #12]
 800ad86:	6643      	str	r3, [r0, #100]	@ 0x64
 800ad88:	81c2      	strh	r2, [r0, #14]
 800ad8a:	6183      	str	r3, [r0, #24]
 800ad8c:	4619      	mov	r1, r3
 800ad8e:	2208      	movs	r2, #8
 800ad90:	305c      	adds	r0, #92	@ 0x5c
 800ad92:	f000 f914 	bl	800afbe <memset>
 800ad96:	4b0d      	ldr	r3, [pc, #52]	@ (800adcc <std+0x58>)
 800ad98:	6263      	str	r3, [r4, #36]	@ 0x24
 800ad9a:	4b0d      	ldr	r3, [pc, #52]	@ (800add0 <std+0x5c>)
 800ad9c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ad9e:	4b0d      	ldr	r3, [pc, #52]	@ (800add4 <std+0x60>)
 800ada0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ada2:	4b0d      	ldr	r3, [pc, #52]	@ (800add8 <std+0x64>)
 800ada4:	6323      	str	r3, [r4, #48]	@ 0x30
 800ada6:	4b0d      	ldr	r3, [pc, #52]	@ (800addc <std+0x68>)
 800ada8:	6224      	str	r4, [r4, #32]
 800adaa:	429c      	cmp	r4, r3
 800adac:	d006      	beq.n	800adbc <std+0x48>
 800adae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800adb2:	4294      	cmp	r4, r2
 800adb4:	d002      	beq.n	800adbc <std+0x48>
 800adb6:	33d0      	adds	r3, #208	@ 0xd0
 800adb8:	429c      	cmp	r4, r3
 800adba:	d105      	bne.n	800adc8 <std+0x54>
 800adbc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800adc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800adc4:	f000 b978 	b.w	800b0b8 <__retarget_lock_init_recursive>
 800adc8:	bd10      	pop	{r4, pc}
 800adca:	bf00      	nop
 800adcc:	0800af39 	.word	0x0800af39
 800add0:	0800af5b 	.word	0x0800af5b
 800add4:	0800af93 	.word	0x0800af93
 800add8:	0800afb7 	.word	0x0800afb7
 800addc:	20002360 	.word	0x20002360

0800ade0 <stdio_exit_handler>:
 800ade0:	4a02      	ldr	r2, [pc, #8]	@ (800adec <stdio_exit_handler+0xc>)
 800ade2:	4903      	ldr	r1, [pc, #12]	@ (800adf0 <stdio_exit_handler+0x10>)
 800ade4:	4803      	ldr	r0, [pc, #12]	@ (800adf4 <stdio_exit_handler+0x14>)
 800ade6:	f000 b869 	b.w	800aebc <_fwalk_sglue>
 800adea:	bf00      	nop
 800adec:	200000fc 	.word	0x200000fc
 800adf0:	0800ca15 	.word	0x0800ca15
 800adf4:	2000010c 	.word	0x2000010c

0800adf8 <cleanup_stdio>:
 800adf8:	6841      	ldr	r1, [r0, #4]
 800adfa:	4b0c      	ldr	r3, [pc, #48]	@ (800ae2c <cleanup_stdio+0x34>)
 800adfc:	4299      	cmp	r1, r3
 800adfe:	b510      	push	{r4, lr}
 800ae00:	4604      	mov	r4, r0
 800ae02:	d001      	beq.n	800ae08 <cleanup_stdio+0x10>
 800ae04:	f001 fe06 	bl	800ca14 <_fflush_r>
 800ae08:	68a1      	ldr	r1, [r4, #8]
 800ae0a:	4b09      	ldr	r3, [pc, #36]	@ (800ae30 <cleanup_stdio+0x38>)
 800ae0c:	4299      	cmp	r1, r3
 800ae0e:	d002      	beq.n	800ae16 <cleanup_stdio+0x1e>
 800ae10:	4620      	mov	r0, r4
 800ae12:	f001 fdff 	bl	800ca14 <_fflush_r>
 800ae16:	68e1      	ldr	r1, [r4, #12]
 800ae18:	4b06      	ldr	r3, [pc, #24]	@ (800ae34 <cleanup_stdio+0x3c>)
 800ae1a:	4299      	cmp	r1, r3
 800ae1c:	d004      	beq.n	800ae28 <cleanup_stdio+0x30>
 800ae1e:	4620      	mov	r0, r4
 800ae20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae24:	f001 bdf6 	b.w	800ca14 <_fflush_r>
 800ae28:	bd10      	pop	{r4, pc}
 800ae2a:	bf00      	nop
 800ae2c:	20002360 	.word	0x20002360
 800ae30:	200023c8 	.word	0x200023c8
 800ae34:	20002430 	.word	0x20002430

0800ae38 <global_stdio_init.part.0>:
 800ae38:	b510      	push	{r4, lr}
 800ae3a:	4b0b      	ldr	r3, [pc, #44]	@ (800ae68 <global_stdio_init.part.0+0x30>)
 800ae3c:	4c0b      	ldr	r4, [pc, #44]	@ (800ae6c <global_stdio_init.part.0+0x34>)
 800ae3e:	4a0c      	ldr	r2, [pc, #48]	@ (800ae70 <global_stdio_init.part.0+0x38>)
 800ae40:	601a      	str	r2, [r3, #0]
 800ae42:	4620      	mov	r0, r4
 800ae44:	2200      	movs	r2, #0
 800ae46:	2104      	movs	r1, #4
 800ae48:	f7ff ff94 	bl	800ad74 <std>
 800ae4c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ae50:	2201      	movs	r2, #1
 800ae52:	2109      	movs	r1, #9
 800ae54:	f7ff ff8e 	bl	800ad74 <std>
 800ae58:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ae5c:	2202      	movs	r2, #2
 800ae5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae62:	2112      	movs	r1, #18
 800ae64:	f7ff bf86 	b.w	800ad74 <std>
 800ae68:	20002498 	.word	0x20002498
 800ae6c:	20002360 	.word	0x20002360
 800ae70:	0800ade1 	.word	0x0800ade1

0800ae74 <__sfp_lock_acquire>:
 800ae74:	4801      	ldr	r0, [pc, #4]	@ (800ae7c <__sfp_lock_acquire+0x8>)
 800ae76:	f000 b920 	b.w	800b0ba <__retarget_lock_acquire_recursive>
 800ae7a:	bf00      	nop
 800ae7c:	200024a1 	.word	0x200024a1

0800ae80 <__sfp_lock_release>:
 800ae80:	4801      	ldr	r0, [pc, #4]	@ (800ae88 <__sfp_lock_release+0x8>)
 800ae82:	f000 b91b 	b.w	800b0bc <__retarget_lock_release_recursive>
 800ae86:	bf00      	nop
 800ae88:	200024a1 	.word	0x200024a1

0800ae8c <__sinit>:
 800ae8c:	b510      	push	{r4, lr}
 800ae8e:	4604      	mov	r4, r0
 800ae90:	f7ff fff0 	bl	800ae74 <__sfp_lock_acquire>
 800ae94:	6a23      	ldr	r3, [r4, #32]
 800ae96:	b11b      	cbz	r3, 800aea0 <__sinit+0x14>
 800ae98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae9c:	f7ff bff0 	b.w	800ae80 <__sfp_lock_release>
 800aea0:	4b04      	ldr	r3, [pc, #16]	@ (800aeb4 <__sinit+0x28>)
 800aea2:	6223      	str	r3, [r4, #32]
 800aea4:	4b04      	ldr	r3, [pc, #16]	@ (800aeb8 <__sinit+0x2c>)
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d1f5      	bne.n	800ae98 <__sinit+0xc>
 800aeac:	f7ff ffc4 	bl	800ae38 <global_stdio_init.part.0>
 800aeb0:	e7f2      	b.n	800ae98 <__sinit+0xc>
 800aeb2:	bf00      	nop
 800aeb4:	0800adf9 	.word	0x0800adf9
 800aeb8:	20002498 	.word	0x20002498

0800aebc <_fwalk_sglue>:
 800aebc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aec0:	4607      	mov	r7, r0
 800aec2:	4688      	mov	r8, r1
 800aec4:	4614      	mov	r4, r2
 800aec6:	2600      	movs	r6, #0
 800aec8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aecc:	f1b9 0901 	subs.w	r9, r9, #1
 800aed0:	d505      	bpl.n	800aede <_fwalk_sglue+0x22>
 800aed2:	6824      	ldr	r4, [r4, #0]
 800aed4:	2c00      	cmp	r4, #0
 800aed6:	d1f7      	bne.n	800aec8 <_fwalk_sglue+0xc>
 800aed8:	4630      	mov	r0, r6
 800aeda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aede:	89ab      	ldrh	r3, [r5, #12]
 800aee0:	2b01      	cmp	r3, #1
 800aee2:	d907      	bls.n	800aef4 <_fwalk_sglue+0x38>
 800aee4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aee8:	3301      	adds	r3, #1
 800aeea:	d003      	beq.n	800aef4 <_fwalk_sglue+0x38>
 800aeec:	4629      	mov	r1, r5
 800aeee:	4638      	mov	r0, r7
 800aef0:	47c0      	blx	r8
 800aef2:	4306      	orrs	r6, r0
 800aef4:	3568      	adds	r5, #104	@ 0x68
 800aef6:	e7e9      	b.n	800aecc <_fwalk_sglue+0x10>

0800aef8 <siprintf>:
 800aef8:	b40e      	push	{r1, r2, r3}
 800aefa:	b500      	push	{lr}
 800aefc:	b09c      	sub	sp, #112	@ 0x70
 800aefe:	ab1d      	add	r3, sp, #116	@ 0x74
 800af00:	9002      	str	r0, [sp, #8]
 800af02:	9006      	str	r0, [sp, #24]
 800af04:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800af08:	4809      	ldr	r0, [pc, #36]	@ (800af30 <siprintf+0x38>)
 800af0a:	9107      	str	r1, [sp, #28]
 800af0c:	9104      	str	r1, [sp, #16]
 800af0e:	4909      	ldr	r1, [pc, #36]	@ (800af34 <siprintf+0x3c>)
 800af10:	f853 2b04 	ldr.w	r2, [r3], #4
 800af14:	9105      	str	r1, [sp, #20]
 800af16:	6800      	ldr	r0, [r0, #0]
 800af18:	9301      	str	r3, [sp, #4]
 800af1a:	a902      	add	r1, sp, #8
 800af1c:	f001 fbfa 	bl	800c714 <_svfiprintf_r>
 800af20:	9b02      	ldr	r3, [sp, #8]
 800af22:	2200      	movs	r2, #0
 800af24:	701a      	strb	r2, [r3, #0]
 800af26:	b01c      	add	sp, #112	@ 0x70
 800af28:	f85d eb04 	ldr.w	lr, [sp], #4
 800af2c:	b003      	add	sp, #12
 800af2e:	4770      	bx	lr
 800af30:	20000108 	.word	0x20000108
 800af34:	ffff0208 	.word	0xffff0208

0800af38 <__sread>:
 800af38:	b510      	push	{r4, lr}
 800af3a:	460c      	mov	r4, r1
 800af3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af40:	f000 f86c 	bl	800b01c <_read_r>
 800af44:	2800      	cmp	r0, #0
 800af46:	bfab      	itete	ge
 800af48:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800af4a:	89a3      	ldrhlt	r3, [r4, #12]
 800af4c:	181b      	addge	r3, r3, r0
 800af4e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800af52:	bfac      	ite	ge
 800af54:	6563      	strge	r3, [r4, #84]	@ 0x54
 800af56:	81a3      	strhlt	r3, [r4, #12]
 800af58:	bd10      	pop	{r4, pc}

0800af5a <__swrite>:
 800af5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af5e:	461f      	mov	r7, r3
 800af60:	898b      	ldrh	r3, [r1, #12]
 800af62:	05db      	lsls	r3, r3, #23
 800af64:	4605      	mov	r5, r0
 800af66:	460c      	mov	r4, r1
 800af68:	4616      	mov	r6, r2
 800af6a:	d505      	bpl.n	800af78 <__swrite+0x1e>
 800af6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af70:	2302      	movs	r3, #2
 800af72:	2200      	movs	r2, #0
 800af74:	f000 f840 	bl	800aff8 <_lseek_r>
 800af78:	89a3      	ldrh	r3, [r4, #12]
 800af7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af7e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800af82:	81a3      	strh	r3, [r4, #12]
 800af84:	4632      	mov	r2, r6
 800af86:	463b      	mov	r3, r7
 800af88:	4628      	mov	r0, r5
 800af8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af8e:	f000 b857 	b.w	800b040 <_write_r>

0800af92 <__sseek>:
 800af92:	b510      	push	{r4, lr}
 800af94:	460c      	mov	r4, r1
 800af96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af9a:	f000 f82d 	bl	800aff8 <_lseek_r>
 800af9e:	1c43      	adds	r3, r0, #1
 800afa0:	89a3      	ldrh	r3, [r4, #12]
 800afa2:	bf15      	itete	ne
 800afa4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800afa6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800afaa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800afae:	81a3      	strheq	r3, [r4, #12]
 800afb0:	bf18      	it	ne
 800afb2:	81a3      	strhne	r3, [r4, #12]
 800afb4:	bd10      	pop	{r4, pc}

0800afb6 <__sclose>:
 800afb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afba:	f000 b80d 	b.w	800afd8 <_close_r>

0800afbe <memset>:
 800afbe:	4402      	add	r2, r0
 800afc0:	4603      	mov	r3, r0
 800afc2:	4293      	cmp	r3, r2
 800afc4:	d100      	bne.n	800afc8 <memset+0xa>
 800afc6:	4770      	bx	lr
 800afc8:	f803 1b01 	strb.w	r1, [r3], #1
 800afcc:	e7f9      	b.n	800afc2 <memset+0x4>
	...

0800afd0 <_localeconv_r>:
 800afd0:	4800      	ldr	r0, [pc, #0]	@ (800afd4 <_localeconv_r+0x4>)
 800afd2:	4770      	bx	lr
 800afd4:	20000248 	.word	0x20000248

0800afd8 <_close_r>:
 800afd8:	b538      	push	{r3, r4, r5, lr}
 800afda:	4d06      	ldr	r5, [pc, #24]	@ (800aff4 <_close_r+0x1c>)
 800afdc:	2300      	movs	r3, #0
 800afde:	4604      	mov	r4, r0
 800afe0:	4608      	mov	r0, r1
 800afe2:	602b      	str	r3, [r5, #0]
 800afe4:	f7f6 fdc0 	bl	8001b68 <_close>
 800afe8:	1c43      	adds	r3, r0, #1
 800afea:	d102      	bne.n	800aff2 <_close_r+0x1a>
 800afec:	682b      	ldr	r3, [r5, #0]
 800afee:	b103      	cbz	r3, 800aff2 <_close_r+0x1a>
 800aff0:	6023      	str	r3, [r4, #0]
 800aff2:	bd38      	pop	{r3, r4, r5, pc}
 800aff4:	2000249c 	.word	0x2000249c

0800aff8 <_lseek_r>:
 800aff8:	b538      	push	{r3, r4, r5, lr}
 800affa:	4d07      	ldr	r5, [pc, #28]	@ (800b018 <_lseek_r+0x20>)
 800affc:	4604      	mov	r4, r0
 800affe:	4608      	mov	r0, r1
 800b000:	4611      	mov	r1, r2
 800b002:	2200      	movs	r2, #0
 800b004:	602a      	str	r2, [r5, #0]
 800b006:	461a      	mov	r2, r3
 800b008:	f7f6 fdd5 	bl	8001bb6 <_lseek>
 800b00c:	1c43      	adds	r3, r0, #1
 800b00e:	d102      	bne.n	800b016 <_lseek_r+0x1e>
 800b010:	682b      	ldr	r3, [r5, #0]
 800b012:	b103      	cbz	r3, 800b016 <_lseek_r+0x1e>
 800b014:	6023      	str	r3, [r4, #0]
 800b016:	bd38      	pop	{r3, r4, r5, pc}
 800b018:	2000249c 	.word	0x2000249c

0800b01c <_read_r>:
 800b01c:	b538      	push	{r3, r4, r5, lr}
 800b01e:	4d07      	ldr	r5, [pc, #28]	@ (800b03c <_read_r+0x20>)
 800b020:	4604      	mov	r4, r0
 800b022:	4608      	mov	r0, r1
 800b024:	4611      	mov	r1, r2
 800b026:	2200      	movs	r2, #0
 800b028:	602a      	str	r2, [r5, #0]
 800b02a:	461a      	mov	r2, r3
 800b02c:	f7f6 fd63 	bl	8001af6 <_read>
 800b030:	1c43      	adds	r3, r0, #1
 800b032:	d102      	bne.n	800b03a <_read_r+0x1e>
 800b034:	682b      	ldr	r3, [r5, #0]
 800b036:	b103      	cbz	r3, 800b03a <_read_r+0x1e>
 800b038:	6023      	str	r3, [r4, #0]
 800b03a:	bd38      	pop	{r3, r4, r5, pc}
 800b03c:	2000249c 	.word	0x2000249c

0800b040 <_write_r>:
 800b040:	b538      	push	{r3, r4, r5, lr}
 800b042:	4d07      	ldr	r5, [pc, #28]	@ (800b060 <_write_r+0x20>)
 800b044:	4604      	mov	r4, r0
 800b046:	4608      	mov	r0, r1
 800b048:	4611      	mov	r1, r2
 800b04a:	2200      	movs	r2, #0
 800b04c:	602a      	str	r2, [r5, #0]
 800b04e:	461a      	mov	r2, r3
 800b050:	f7f6 fd6e 	bl	8001b30 <_write>
 800b054:	1c43      	adds	r3, r0, #1
 800b056:	d102      	bne.n	800b05e <_write_r+0x1e>
 800b058:	682b      	ldr	r3, [r5, #0]
 800b05a:	b103      	cbz	r3, 800b05e <_write_r+0x1e>
 800b05c:	6023      	str	r3, [r4, #0]
 800b05e:	bd38      	pop	{r3, r4, r5, pc}
 800b060:	2000249c 	.word	0x2000249c

0800b064 <__errno>:
 800b064:	4b01      	ldr	r3, [pc, #4]	@ (800b06c <__errno+0x8>)
 800b066:	6818      	ldr	r0, [r3, #0]
 800b068:	4770      	bx	lr
 800b06a:	bf00      	nop
 800b06c:	20000108 	.word	0x20000108

0800b070 <__libc_init_array>:
 800b070:	b570      	push	{r4, r5, r6, lr}
 800b072:	4d0d      	ldr	r5, [pc, #52]	@ (800b0a8 <__libc_init_array+0x38>)
 800b074:	4c0d      	ldr	r4, [pc, #52]	@ (800b0ac <__libc_init_array+0x3c>)
 800b076:	1b64      	subs	r4, r4, r5
 800b078:	10a4      	asrs	r4, r4, #2
 800b07a:	2600      	movs	r6, #0
 800b07c:	42a6      	cmp	r6, r4
 800b07e:	d109      	bne.n	800b094 <__libc_init_array+0x24>
 800b080:	4d0b      	ldr	r5, [pc, #44]	@ (800b0b0 <__libc_init_array+0x40>)
 800b082:	4c0c      	ldr	r4, [pc, #48]	@ (800b0b4 <__libc_init_array+0x44>)
 800b084:	f002 f864 	bl	800d150 <_init>
 800b088:	1b64      	subs	r4, r4, r5
 800b08a:	10a4      	asrs	r4, r4, #2
 800b08c:	2600      	movs	r6, #0
 800b08e:	42a6      	cmp	r6, r4
 800b090:	d105      	bne.n	800b09e <__libc_init_array+0x2e>
 800b092:	bd70      	pop	{r4, r5, r6, pc}
 800b094:	f855 3b04 	ldr.w	r3, [r5], #4
 800b098:	4798      	blx	r3
 800b09a:	3601      	adds	r6, #1
 800b09c:	e7ee      	b.n	800b07c <__libc_init_array+0xc>
 800b09e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b0a2:	4798      	blx	r3
 800b0a4:	3601      	adds	r6, #1
 800b0a6:	e7f2      	b.n	800b08e <__libc_init_array+0x1e>
 800b0a8:	0800d898 	.word	0x0800d898
 800b0ac:	0800d898 	.word	0x0800d898
 800b0b0:	0800d898 	.word	0x0800d898
 800b0b4:	0800d89c 	.word	0x0800d89c

0800b0b8 <__retarget_lock_init_recursive>:
 800b0b8:	4770      	bx	lr

0800b0ba <__retarget_lock_acquire_recursive>:
 800b0ba:	4770      	bx	lr

0800b0bc <__retarget_lock_release_recursive>:
 800b0bc:	4770      	bx	lr

0800b0be <quorem>:
 800b0be:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0c2:	6903      	ldr	r3, [r0, #16]
 800b0c4:	690c      	ldr	r4, [r1, #16]
 800b0c6:	42a3      	cmp	r3, r4
 800b0c8:	4607      	mov	r7, r0
 800b0ca:	db7e      	blt.n	800b1ca <quorem+0x10c>
 800b0cc:	3c01      	subs	r4, #1
 800b0ce:	f101 0814 	add.w	r8, r1, #20
 800b0d2:	00a3      	lsls	r3, r4, #2
 800b0d4:	f100 0514 	add.w	r5, r0, #20
 800b0d8:	9300      	str	r3, [sp, #0]
 800b0da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b0de:	9301      	str	r3, [sp, #4]
 800b0e0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b0e4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b0e8:	3301      	adds	r3, #1
 800b0ea:	429a      	cmp	r2, r3
 800b0ec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b0f0:	fbb2 f6f3 	udiv	r6, r2, r3
 800b0f4:	d32e      	bcc.n	800b154 <quorem+0x96>
 800b0f6:	f04f 0a00 	mov.w	sl, #0
 800b0fa:	46c4      	mov	ip, r8
 800b0fc:	46ae      	mov	lr, r5
 800b0fe:	46d3      	mov	fp, sl
 800b100:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b104:	b298      	uxth	r0, r3
 800b106:	fb06 a000 	mla	r0, r6, r0, sl
 800b10a:	0c02      	lsrs	r2, r0, #16
 800b10c:	0c1b      	lsrs	r3, r3, #16
 800b10e:	fb06 2303 	mla	r3, r6, r3, r2
 800b112:	f8de 2000 	ldr.w	r2, [lr]
 800b116:	b280      	uxth	r0, r0
 800b118:	b292      	uxth	r2, r2
 800b11a:	1a12      	subs	r2, r2, r0
 800b11c:	445a      	add	r2, fp
 800b11e:	f8de 0000 	ldr.w	r0, [lr]
 800b122:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b126:	b29b      	uxth	r3, r3
 800b128:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b12c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b130:	b292      	uxth	r2, r2
 800b132:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b136:	45e1      	cmp	r9, ip
 800b138:	f84e 2b04 	str.w	r2, [lr], #4
 800b13c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b140:	d2de      	bcs.n	800b100 <quorem+0x42>
 800b142:	9b00      	ldr	r3, [sp, #0]
 800b144:	58eb      	ldr	r3, [r5, r3]
 800b146:	b92b      	cbnz	r3, 800b154 <quorem+0x96>
 800b148:	9b01      	ldr	r3, [sp, #4]
 800b14a:	3b04      	subs	r3, #4
 800b14c:	429d      	cmp	r5, r3
 800b14e:	461a      	mov	r2, r3
 800b150:	d32f      	bcc.n	800b1b2 <quorem+0xf4>
 800b152:	613c      	str	r4, [r7, #16]
 800b154:	4638      	mov	r0, r7
 800b156:	f001 f979 	bl	800c44c <__mcmp>
 800b15a:	2800      	cmp	r0, #0
 800b15c:	db25      	blt.n	800b1aa <quorem+0xec>
 800b15e:	4629      	mov	r1, r5
 800b160:	2000      	movs	r0, #0
 800b162:	f858 2b04 	ldr.w	r2, [r8], #4
 800b166:	f8d1 c000 	ldr.w	ip, [r1]
 800b16a:	fa1f fe82 	uxth.w	lr, r2
 800b16e:	fa1f f38c 	uxth.w	r3, ip
 800b172:	eba3 030e 	sub.w	r3, r3, lr
 800b176:	4403      	add	r3, r0
 800b178:	0c12      	lsrs	r2, r2, #16
 800b17a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b17e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b182:	b29b      	uxth	r3, r3
 800b184:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b188:	45c1      	cmp	r9, r8
 800b18a:	f841 3b04 	str.w	r3, [r1], #4
 800b18e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b192:	d2e6      	bcs.n	800b162 <quorem+0xa4>
 800b194:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b198:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b19c:	b922      	cbnz	r2, 800b1a8 <quorem+0xea>
 800b19e:	3b04      	subs	r3, #4
 800b1a0:	429d      	cmp	r5, r3
 800b1a2:	461a      	mov	r2, r3
 800b1a4:	d30b      	bcc.n	800b1be <quorem+0x100>
 800b1a6:	613c      	str	r4, [r7, #16]
 800b1a8:	3601      	adds	r6, #1
 800b1aa:	4630      	mov	r0, r6
 800b1ac:	b003      	add	sp, #12
 800b1ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1b2:	6812      	ldr	r2, [r2, #0]
 800b1b4:	3b04      	subs	r3, #4
 800b1b6:	2a00      	cmp	r2, #0
 800b1b8:	d1cb      	bne.n	800b152 <quorem+0x94>
 800b1ba:	3c01      	subs	r4, #1
 800b1bc:	e7c6      	b.n	800b14c <quorem+0x8e>
 800b1be:	6812      	ldr	r2, [r2, #0]
 800b1c0:	3b04      	subs	r3, #4
 800b1c2:	2a00      	cmp	r2, #0
 800b1c4:	d1ef      	bne.n	800b1a6 <quorem+0xe8>
 800b1c6:	3c01      	subs	r4, #1
 800b1c8:	e7ea      	b.n	800b1a0 <quorem+0xe2>
 800b1ca:	2000      	movs	r0, #0
 800b1cc:	e7ee      	b.n	800b1ac <quorem+0xee>
	...

0800b1d0 <_dtoa_r>:
 800b1d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1d4:	69c7      	ldr	r7, [r0, #28]
 800b1d6:	b099      	sub	sp, #100	@ 0x64
 800b1d8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b1dc:	ec55 4b10 	vmov	r4, r5, d0
 800b1e0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800b1e2:	9109      	str	r1, [sp, #36]	@ 0x24
 800b1e4:	4683      	mov	fp, r0
 800b1e6:	920e      	str	r2, [sp, #56]	@ 0x38
 800b1e8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b1ea:	b97f      	cbnz	r7, 800b20c <_dtoa_r+0x3c>
 800b1ec:	2010      	movs	r0, #16
 800b1ee:	f000 fdfd 	bl	800bdec <malloc>
 800b1f2:	4602      	mov	r2, r0
 800b1f4:	f8cb 001c 	str.w	r0, [fp, #28]
 800b1f8:	b920      	cbnz	r0, 800b204 <_dtoa_r+0x34>
 800b1fa:	4ba7      	ldr	r3, [pc, #668]	@ (800b498 <_dtoa_r+0x2c8>)
 800b1fc:	21ef      	movs	r1, #239	@ 0xef
 800b1fe:	48a7      	ldr	r0, [pc, #668]	@ (800b49c <_dtoa_r+0x2cc>)
 800b200:	f001 fc68 	bl	800cad4 <__assert_func>
 800b204:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b208:	6007      	str	r7, [r0, #0]
 800b20a:	60c7      	str	r7, [r0, #12]
 800b20c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b210:	6819      	ldr	r1, [r3, #0]
 800b212:	b159      	cbz	r1, 800b22c <_dtoa_r+0x5c>
 800b214:	685a      	ldr	r2, [r3, #4]
 800b216:	604a      	str	r2, [r1, #4]
 800b218:	2301      	movs	r3, #1
 800b21a:	4093      	lsls	r3, r2
 800b21c:	608b      	str	r3, [r1, #8]
 800b21e:	4658      	mov	r0, fp
 800b220:	f000 feda 	bl	800bfd8 <_Bfree>
 800b224:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b228:	2200      	movs	r2, #0
 800b22a:	601a      	str	r2, [r3, #0]
 800b22c:	1e2b      	subs	r3, r5, #0
 800b22e:	bfb9      	ittee	lt
 800b230:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b234:	9303      	strlt	r3, [sp, #12]
 800b236:	2300      	movge	r3, #0
 800b238:	6033      	strge	r3, [r6, #0]
 800b23a:	9f03      	ldr	r7, [sp, #12]
 800b23c:	4b98      	ldr	r3, [pc, #608]	@ (800b4a0 <_dtoa_r+0x2d0>)
 800b23e:	bfbc      	itt	lt
 800b240:	2201      	movlt	r2, #1
 800b242:	6032      	strlt	r2, [r6, #0]
 800b244:	43bb      	bics	r3, r7
 800b246:	d112      	bne.n	800b26e <_dtoa_r+0x9e>
 800b248:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b24a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b24e:	6013      	str	r3, [r2, #0]
 800b250:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b254:	4323      	orrs	r3, r4
 800b256:	f000 854d 	beq.w	800bcf4 <_dtoa_r+0xb24>
 800b25a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b25c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800b4b4 <_dtoa_r+0x2e4>
 800b260:	2b00      	cmp	r3, #0
 800b262:	f000 854f 	beq.w	800bd04 <_dtoa_r+0xb34>
 800b266:	f10a 0303 	add.w	r3, sl, #3
 800b26a:	f000 bd49 	b.w	800bd00 <_dtoa_r+0xb30>
 800b26e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b272:	2200      	movs	r2, #0
 800b274:	ec51 0b17 	vmov	r0, r1, d7
 800b278:	2300      	movs	r3, #0
 800b27a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800b27e:	f7f5 fc23 	bl	8000ac8 <__aeabi_dcmpeq>
 800b282:	4680      	mov	r8, r0
 800b284:	b158      	cbz	r0, 800b29e <_dtoa_r+0xce>
 800b286:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b288:	2301      	movs	r3, #1
 800b28a:	6013      	str	r3, [r2, #0]
 800b28c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b28e:	b113      	cbz	r3, 800b296 <_dtoa_r+0xc6>
 800b290:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b292:	4b84      	ldr	r3, [pc, #528]	@ (800b4a4 <_dtoa_r+0x2d4>)
 800b294:	6013      	str	r3, [r2, #0]
 800b296:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800b4b8 <_dtoa_r+0x2e8>
 800b29a:	f000 bd33 	b.w	800bd04 <_dtoa_r+0xb34>
 800b29e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b2a2:	aa16      	add	r2, sp, #88	@ 0x58
 800b2a4:	a917      	add	r1, sp, #92	@ 0x5c
 800b2a6:	4658      	mov	r0, fp
 800b2a8:	f001 f980 	bl	800c5ac <__d2b>
 800b2ac:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b2b0:	4681      	mov	r9, r0
 800b2b2:	2e00      	cmp	r6, #0
 800b2b4:	d077      	beq.n	800b3a6 <_dtoa_r+0x1d6>
 800b2b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b2b8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800b2bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b2c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b2c4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b2c8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b2cc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b2d0:	4619      	mov	r1, r3
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	4b74      	ldr	r3, [pc, #464]	@ (800b4a8 <_dtoa_r+0x2d8>)
 800b2d6:	f7f4 ffd7 	bl	8000288 <__aeabi_dsub>
 800b2da:	a369      	add	r3, pc, #420	@ (adr r3, 800b480 <_dtoa_r+0x2b0>)
 800b2dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2e0:	f7f5 f98a 	bl	80005f8 <__aeabi_dmul>
 800b2e4:	a368      	add	r3, pc, #416	@ (adr r3, 800b488 <_dtoa_r+0x2b8>)
 800b2e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2ea:	f7f4 ffcf 	bl	800028c <__adddf3>
 800b2ee:	4604      	mov	r4, r0
 800b2f0:	4630      	mov	r0, r6
 800b2f2:	460d      	mov	r5, r1
 800b2f4:	f7f5 f916 	bl	8000524 <__aeabi_i2d>
 800b2f8:	a365      	add	r3, pc, #404	@ (adr r3, 800b490 <_dtoa_r+0x2c0>)
 800b2fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2fe:	f7f5 f97b 	bl	80005f8 <__aeabi_dmul>
 800b302:	4602      	mov	r2, r0
 800b304:	460b      	mov	r3, r1
 800b306:	4620      	mov	r0, r4
 800b308:	4629      	mov	r1, r5
 800b30a:	f7f4 ffbf 	bl	800028c <__adddf3>
 800b30e:	4604      	mov	r4, r0
 800b310:	460d      	mov	r5, r1
 800b312:	f7f5 fc21 	bl	8000b58 <__aeabi_d2iz>
 800b316:	2200      	movs	r2, #0
 800b318:	4607      	mov	r7, r0
 800b31a:	2300      	movs	r3, #0
 800b31c:	4620      	mov	r0, r4
 800b31e:	4629      	mov	r1, r5
 800b320:	f7f5 fbdc 	bl	8000adc <__aeabi_dcmplt>
 800b324:	b140      	cbz	r0, 800b338 <_dtoa_r+0x168>
 800b326:	4638      	mov	r0, r7
 800b328:	f7f5 f8fc 	bl	8000524 <__aeabi_i2d>
 800b32c:	4622      	mov	r2, r4
 800b32e:	462b      	mov	r3, r5
 800b330:	f7f5 fbca 	bl	8000ac8 <__aeabi_dcmpeq>
 800b334:	b900      	cbnz	r0, 800b338 <_dtoa_r+0x168>
 800b336:	3f01      	subs	r7, #1
 800b338:	2f16      	cmp	r7, #22
 800b33a:	d851      	bhi.n	800b3e0 <_dtoa_r+0x210>
 800b33c:	4b5b      	ldr	r3, [pc, #364]	@ (800b4ac <_dtoa_r+0x2dc>)
 800b33e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b342:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b346:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b34a:	f7f5 fbc7 	bl	8000adc <__aeabi_dcmplt>
 800b34e:	2800      	cmp	r0, #0
 800b350:	d048      	beq.n	800b3e4 <_dtoa_r+0x214>
 800b352:	3f01      	subs	r7, #1
 800b354:	2300      	movs	r3, #0
 800b356:	9312      	str	r3, [sp, #72]	@ 0x48
 800b358:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b35a:	1b9b      	subs	r3, r3, r6
 800b35c:	1e5a      	subs	r2, r3, #1
 800b35e:	bf44      	itt	mi
 800b360:	f1c3 0801 	rsbmi	r8, r3, #1
 800b364:	2300      	movmi	r3, #0
 800b366:	9208      	str	r2, [sp, #32]
 800b368:	bf54      	ite	pl
 800b36a:	f04f 0800 	movpl.w	r8, #0
 800b36e:	9308      	strmi	r3, [sp, #32]
 800b370:	2f00      	cmp	r7, #0
 800b372:	db39      	blt.n	800b3e8 <_dtoa_r+0x218>
 800b374:	9b08      	ldr	r3, [sp, #32]
 800b376:	970f      	str	r7, [sp, #60]	@ 0x3c
 800b378:	443b      	add	r3, r7
 800b37a:	9308      	str	r3, [sp, #32]
 800b37c:	2300      	movs	r3, #0
 800b37e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b380:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b382:	2b09      	cmp	r3, #9
 800b384:	d864      	bhi.n	800b450 <_dtoa_r+0x280>
 800b386:	2b05      	cmp	r3, #5
 800b388:	bfc4      	itt	gt
 800b38a:	3b04      	subgt	r3, #4
 800b38c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800b38e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b390:	f1a3 0302 	sub.w	r3, r3, #2
 800b394:	bfcc      	ite	gt
 800b396:	2400      	movgt	r4, #0
 800b398:	2401      	movle	r4, #1
 800b39a:	2b03      	cmp	r3, #3
 800b39c:	d863      	bhi.n	800b466 <_dtoa_r+0x296>
 800b39e:	e8df f003 	tbb	[pc, r3]
 800b3a2:	372a      	.short	0x372a
 800b3a4:	5535      	.short	0x5535
 800b3a6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800b3aa:	441e      	add	r6, r3
 800b3ac:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b3b0:	2b20      	cmp	r3, #32
 800b3b2:	bfc1      	itttt	gt
 800b3b4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b3b8:	409f      	lslgt	r7, r3
 800b3ba:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b3be:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b3c2:	bfd6      	itet	le
 800b3c4:	f1c3 0320 	rsble	r3, r3, #32
 800b3c8:	ea47 0003 	orrgt.w	r0, r7, r3
 800b3cc:	fa04 f003 	lslle.w	r0, r4, r3
 800b3d0:	f7f5 f898 	bl	8000504 <__aeabi_ui2d>
 800b3d4:	2201      	movs	r2, #1
 800b3d6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b3da:	3e01      	subs	r6, #1
 800b3dc:	9214      	str	r2, [sp, #80]	@ 0x50
 800b3de:	e777      	b.n	800b2d0 <_dtoa_r+0x100>
 800b3e0:	2301      	movs	r3, #1
 800b3e2:	e7b8      	b.n	800b356 <_dtoa_r+0x186>
 800b3e4:	9012      	str	r0, [sp, #72]	@ 0x48
 800b3e6:	e7b7      	b.n	800b358 <_dtoa_r+0x188>
 800b3e8:	427b      	negs	r3, r7
 800b3ea:	930a      	str	r3, [sp, #40]	@ 0x28
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	eba8 0807 	sub.w	r8, r8, r7
 800b3f2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b3f4:	e7c4      	b.n	800b380 <_dtoa_r+0x1b0>
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b3fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	dc35      	bgt.n	800b46c <_dtoa_r+0x29c>
 800b400:	2301      	movs	r3, #1
 800b402:	9300      	str	r3, [sp, #0]
 800b404:	9307      	str	r3, [sp, #28]
 800b406:	461a      	mov	r2, r3
 800b408:	920e      	str	r2, [sp, #56]	@ 0x38
 800b40a:	e00b      	b.n	800b424 <_dtoa_r+0x254>
 800b40c:	2301      	movs	r3, #1
 800b40e:	e7f3      	b.n	800b3f8 <_dtoa_r+0x228>
 800b410:	2300      	movs	r3, #0
 800b412:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b414:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b416:	18fb      	adds	r3, r7, r3
 800b418:	9300      	str	r3, [sp, #0]
 800b41a:	3301      	adds	r3, #1
 800b41c:	2b01      	cmp	r3, #1
 800b41e:	9307      	str	r3, [sp, #28]
 800b420:	bfb8      	it	lt
 800b422:	2301      	movlt	r3, #1
 800b424:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b428:	2100      	movs	r1, #0
 800b42a:	2204      	movs	r2, #4
 800b42c:	f102 0514 	add.w	r5, r2, #20
 800b430:	429d      	cmp	r5, r3
 800b432:	d91f      	bls.n	800b474 <_dtoa_r+0x2a4>
 800b434:	6041      	str	r1, [r0, #4]
 800b436:	4658      	mov	r0, fp
 800b438:	f000 fd8e 	bl	800bf58 <_Balloc>
 800b43c:	4682      	mov	sl, r0
 800b43e:	2800      	cmp	r0, #0
 800b440:	d13c      	bne.n	800b4bc <_dtoa_r+0x2ec>
 800b442:	4b1b      	ldr	r3, [pc, #108]	@ (800b4b0 <_dtoa_r+0x2e0>)
 800b444:	4602      	mov	r2, r0
 800b446:	f240 11af 	movw	r1, #431	@ 0x1af
 800b44a:	e6d8      	b.n	800b1fe <_dtoa_r+0x2e>
 800b44c:	2301      	movs	r3, #1
 800b44e:	e7e0      	b.n	800b412 <_dtoa_r+0x242>
 800b450:	2401      	movs	r4, #1
 800b452:	2300      	movs	r3, #0
 800b454:	9309      	str	r3, [sp, #36]	@ 0x24
 800b456:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b458:	f04f 33ff 	mov.w	r3, #4294967295
 800b45c:	9300      	str	r3, [sp, #0]
 800b45e:	9307      	str	r3, [sp, #28]
 800b460:	2200      	movs	r2, #0
 800b462:	2312      	movs	r3, #18
 800b464:	e7d0      	b.n	800b408 <_dtoa_r+0x238>
 800b466:	2301      	movs	r3, #1
 800b468:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b46a:	e7f5      	b.n	800b458 <_dtoa_r+0x288>
 800b46c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b46e:	9300      	str	r3, [sp, #0]
 800b470:	9307      	str	r3, [sp, #28]
 800b472:	e7d7      	b.n	800b424 <_dtoa_r+0x254>
 800b474:	3101      	adds	r1, #1
 800b476:	0052      	lsls	r2, r2, #1
 800b478:	e7d8      	b.n	800b42c <_dtoa_r+0x25c>
 800b47a:	bf00      	nop
 800b47c:	f3af 8000 	nop.w
 800b480:	636f4361 	.word	0x636f4361
 800b484:	3fd287a7 	.word	0x3fd287a7
 800b488:	8b60c8b3 	.word	0x8b60c8b3
 800b48c:	3fc68a28 	.word	0x3fc68a28
 800b490:	509f79fb 	.word	0x509f79fb
 800b494:	3fd34413 	.word	0x3fd34413
 800b498:	0800d561 	.word	0x0800d561
 800b49c:	0800d578 	.word	0x0800d578
 800b4a0:	7ff00000 	.word	0x7ff00000
 800b4a4:	0800d531 	.word	0x0800d531
 800b4a8:	3ff80000 	.word	0x3ff80000
 800b4ac:	0800d670 	.word	0x0800d670
 800b4b0:	0800d5d0 	.word	0x0800d5d0
 800b4b4:	0800d55d 	.word	0x0800d55d
 800b4b8:	0800d530 	.word	0x0800d530
 800b4bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b4c0:	6018      	str	r0, [r3, #0]
 800b4c2:	9b07      	ldr	r3, [sp, #28]
 800b4c4:	2b0e      	cmp	r3, #14
 800b4c6:	f200 80a4 	bhi.w	800b612 <_dtoa_r+0x442>
 800b4ca:	2c00      	cmp	r4, #0
 800b4cc:	f000 80a1 	beq.w	800b612 <_dtoa_r+0x442>
 800b4d0:	2f00      	cmp	r7, #0
 800b4d2:	dd33      	ble.n	800b53c <_dtoa_r+0x36c>
 800b4d4:	4bad      	ldr	r3, [pc, #692]	@ (800b78c <_dtoa_r+0x5bc>)
 800b4d6:	f007 020f 	and.w	r2, r7, #15
 800b4da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b4de:	ed93 7b00 	vldr	d7, [r3]
 800b4e2:	05f8      	lsls	r0, r7, #23
 800b4e4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b4e8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b4ec:	d516      	bpl.n	800b51c <_dtoa_r+0x34c>
 800b4ee:	4ba8      	ldr	r3, [pc, #672]	@ (800b790 <_dtoa_r+0x5c0>)
 800b4f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b4f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b4f8:	f7f5 f9a8 	bl	800084c <__aeabi_ddiv>
 800b4fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b500:	f004 040f 	and.w	r4, r4, #15
 800b504:	2603      	movs	r6, #3
 800b506:	4da2      	ldr	r5, [pc, #648]	@ (800b790 <_dtoa_r+0x5c0>)
 800b508:	b954      	cbnz	r4, 800b520 <_dtoa_r+0x350>
 800b50a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b50e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b512:	f7f5 f99b 	bl	800084c <__aeabi_ddiv>
 800b516:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b51a:	e028      	b.n	800b56e <_dtoa_r+0x39e>
 800b51c:	2602      	movs	r6, #2
 800b51e:	e7f2      	b.n	800b506 <_dtoa_r+0x336>
 800b520:	07e1      	lsls	r1, r4, #31
 800b522:	d508      	bpl.n	800b536 <_dtoa_r+0x366>
 800b524:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b528:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b52c:	f7f5 f864 	bl	80005f8 <__aeabi_dmul>
 800b530:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b534:	3601      	adds	r6, #1
 800b536:	1064      	asrs	r4, r4, #1
 800b538:	3508      	adds	r5, #8
 800b53a:	e7e5      	b.n	800b508 <_dtoa_r+0x338>
 800b53c:	f000 80d2 	beq.w	800b6e4 <_dtoa_r+0x514>
 800b540:	427c      	negs	r4, r7
 800b542:	4b92      	ldr	r3, [pc, #584]	@ (800b78c <_dtoa_r+0x5bc>)
 800b544:	4d92      	ldr	r5, [pc, #584]	@ (800b790 <_dtoa_r+0x5c0>)
 800b546:	f004 020f 	and.w	r2, r4, #15
 800b54a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b54e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b552:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b556:	f7f5 f84f 	bl	80005f8 <__aeabi_dmul>
 800b55a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b55e:	1124      	asrs	r4, r4, #4
 800b560:	2300      	movs	r3, #0
 800b562:	2602      	movs	r6, #2
 800b564:	2c00      	cmp	r4, #0
 800b566:	f040 80b2 	bne.w	800b6ce <_dtoa_r+0x4fe>
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d1d3      	bne.n	800b516 <_dtoa_r+0x346>
 800b56e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b570:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b574:	2b00      	cmp	r3, #0
 800b576:	f000 80b7 	beq.w	800b6e8 <_dtoa_r+0x518>
 800b57a:	4b86      	ldr	r3, [pc, #536]	@ (800b794 <_dtoa_r+0x5c4>)
 800b57c:	2200      	movs	r2, #0
 800b57e:	4620      	mov	r0, r4
 800b580:	4629      	mov	r1, r5
 800b582:	f7f5 faab 	bl	8000adc <__aeabi_dcmplt>
 800b586:	2800      	cmp	r0, #0
 800b588:	f000 80ae 	beq.w	800b6e8 <_dtoa_r+0x518>
 800b58c:	9b07      	ldr	r3, [sp, #28]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	f000 80aa 	beq.w	800b6e8 <_dtoa_r+0x518>
 800b594:	9b00      	ldr	r3, [sp, #0]
 800b596:	2b00      	cmp	r3, #0
 800b598:	dd37      	ble.n	800b60a <_dtoa_r+0x43a>
 800b59a:	1e7b      	subs	r3, r7, #1
 800b59c:	9304      	str	r3, [sp, #16]
 800b59e:	4620      	mov	r0, r4
 800b5a0:	4b7d      	ldr	r3, [pc, #500]	@ (800b798 <_dtoa_r+0x5c8>)
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	4629      	mov	r1, r5
 800b5a6:	f7f5 f827 	bl	80005f8 <__aeabi_dmul>
 800b5aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b5ae:	9c00      	ldr	r4, [sp, #0]
 800b5b0:	3601      	adds	r6, #1
 800b5b2:	4630      	mov	r0, r6
 800b5b4:	f7f4 ffb6 	bl	8000524 <__aeabi_i2d>
 800b5b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b5bc:	f7f5 f81c 	bl	80005f8 <__aeabi_dmul>
 800b5c0:	4b76      	ldr	r3, [pc, #472]	@ (800b79c <_dtoa_r+0x5cc>)
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	f7f4 fe62 	bl	800028c <__adddf3>
 800b5c8:	4605      	mov	r5, r0
 800b5ca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b5ce:	2c00      	cmp	r4, #0
 800b5d0:	f040 808d 	bne.w	800b6ee <_dtoa_r+0x51e>
 800b5d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b5d8:	4b71      	ldr	r3, [pc, #452]	@ (800b7a0 <_dtoa_r+0x5d0>)
 800b5da:	2200      	movs	r2, #0
 800b5dc:	f7f4 fe54 	bl	8000288 <__aeabi_dsub>
 800b5e0:	4602      	mov	r2, r0
 800b5e2:	460b      	mov	r3, r1
 800b5e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b5e8:	462a      	mov	r2, r5
 800b5ea:	4633      	mov	r3, r6
 800b5ec:	f7f5 fa94 	bl	8000b18 <__aeabi_dcmpgt>
 800b5f0:	2800      	cmp	r0, #0
 800b5f2:	f040 828b 	bne.w	800bb0c <_dtoa_r+0x93c>
 800b5f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b5fa:	462a      	mov	r2, r5
 800b5fc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b600:	f7f5 fa6c 	bl	8000adc <__aeabi_dcmplt>
 800b604:	2800      	cmp	r0, #0
 800b606:	f040 8128 	bne.w	800b85a <_dtoa_r+0x68a>
 800b60a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b60e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b612:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b614:	2b00      	cmp	r3, #0
 800b616:	f2c0 815a 	blt.w	800b8ce <_dtoa_r+0x6fe>
 800b61a:	2f0e      	cmp	r7, #14
 800b61c:	f300 8157 	bgt.w	800b8ce <_dtoa_r+0x6fe>
 800b620:	4b5a      	ldr	r3, [pc, #360]	@ (800b78c <_dtoa_r+0x5bc>)
 800b622:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b626:	ed93 7b00 	vldr	d7, [r3]
 800b62a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	ed8d 7b00 	vstr	d7, [sp]
 800b632:	da03      	bge.n	800b63c <_dtoa_r+0x46c>
 800b634:	9b07      	ldr	r3, [sp, #28]
 800b636:	2b00      	cmp	r3, #0
 800b638:	f340 8101 	ble.w	800b83e <_dtoa_r+0x66e>
 800b63c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b640:	4656      	mov	r6, sl
 800b642:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b646:	4620      	mov	r0, r4
 800b648:	4629      	mov	r1, r5
 800b64a:	f7f5 f8ff 	bl	800084c <__aeabi_ddiv>
 800b64e:	f7f5 fa83 	bl	8000b58 <__aeabi_d2iz>
 800b652:	4680      	mov	r8, r0
 800b654:	f7f4 ff66 	bl	8000524 <__aeabi_i2d>
 800b658:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b65c:	f7f4 ffcc 	bl	80005f8 <__aeabi_dmul>
 800b660:	4602      	mov	r2, r0
 800b662:	460b      	mov	r3, r1
 800b664:	4620      	mov	r0, r4
 800b666:	4629      	mov	r1, r5
 800b668:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b66c:	f7f4 fe0c 	bl	8000288 <__aeabi_dsub>
 800b670:	f806 4b01 	strb.w	r4, [r6], #1
 800b674:	9d07      	ldr	r5, [sp, #28]
 800b676:	eba6 040a 	sub.w	r4, r6, sl
 800b67a:	42a5      	cmp	r5, r4
 800b67c:	4602      	mov	r2, r0
 800b67e:	460b      	mov	r3, r1
 800b680:	f040 8117 	bne.w	800b8b2 <_dtoa_r+0x6e2>
 800b684:	f7f4 fe02 	bl	800028c <__adddf3>
 800b688:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b68c:	4604      	mov	r4, r0
 800b68e:	460d      	mov	r5, r1
 800b690:	f7f5 fa42 	bl	8000b18 <__aeabi_dcmpgt>
 800b694:	2800      	cmp	r0, #0
 800b696:	f040 80f9 	bne.w	800b88c <_dtoa_r+0x6bc>
 800b69a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b69e:	4620      	mov	r0, r4
 800b6a0:	4629      	mov	r1, r5
 800b6a2:	f7f5 fa11 	bl	8000ac8 <__aeabi_dcmpeq>
 800b6a6:	b118      	cbz	r0, 800b6b0 <_dtoa_r+0x4e0>
 800b6a8:	f018 0f01 	tst.w	r8, #1
 800b6ac:	f040 80ee 	bne.w	800b88c <_dtoa_r+0x6bc>
 800b6b0:	4649      	mov	r1, r9
 800b6b2:	4658      	mov	r0, fp
 800b6b4:	f000 fc90 	bl	800bfd8 <_Bfree>
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	7033      	strb	r3, [r6, #0]
 800b6bc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b6be:	3701      	adds	r7, #1
 800b6c0:	601f      	str	r7, [r3, #0]
 800b6c2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	f000 831d 	beq.w	800bd04 <_dtoa_r+0xb34>
 800b6ca:	601e      	str	r6, [r3, #0]
 800b6cc:	e31a      	b.n	800bd04 <_dtoa_r+0xb34>
 800b6ce:	07e2      	lsls	r2, r4, #31
 800b6d0:	d505      	bpl.n	800b6de <_dtoa_r+0x50e>
 800b6d2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b6d6:	f7f4 ff8f 	bl	80005f8 <__aeabi_dmul>
 800b6da:	3601      	adds	r6, #1
 800b6dc:	2301      	movs	r3, #1
 800b6de:	1064      	asrs	r4, r4, #1
 800b6e0:	3508      	adds	r5, #8
 800b6e2:	e73f      	b.n	800b564 <_dtoa_r+0x394>
 800b6e4:	2602      	movs	r6, #2
 800b6e6:	e742      	b.n	800b56e <_dtoa_r+0x39e>
 800b6e8:	9c07      	ldr	r4, [sp, #28]
 800b6ea:	9704      	str	r7, [sp, #16]
 800b6ec:	e761      	b.n	800b5b2 <_dtoa_r+0x3e2>
 800b6ee:	4b27      	ldr	r3, [pc, #156]	@ (800b78c <_dtoa_r+0x5bc>)
 800b6f0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b6f2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b6f6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b6fa:	4454      	add	r4, sl
 800b6fc:	2900      	cmp	r1, #0
 800b6fe:	d053      	beq.n	800b7a8 <_dtoa_r+0x5d8>
 800b700:	4928      	ldr	r1, [pc, #160]	@ (800b7a4 <_dtoa_r+0x5d4>)
 800b702:	2000      	movs	r0, #0
 800b704:	f7f5 f8a2 	bl	800084c <__aeabi_ddiv>
 800b708:	4633      	mov	r3, r6
 800b70a:	462a      	mov	r2, r5
 800b70c:	f7f4 fdbc 	bl	8000288 <__aeabi_dsub>
 800b710:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b714:	4656      	mov	r6, sl
 800b716:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b71a:	f7f5 fa1d 	bl	8000b58 <__aeabi_d2iz>
 800b71e:	4605      	mov	r5, r0
 800b720:	f7f4 ff00 	bl	8000524 <__aeabi_i2d>
 800b724:	4602      	mov	r2, r0
 800b726:	460b      	mov	r3, r1
 800b728:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b72c:	f7f4 fdac 	bl	8000288 <__aeabi_dsub>
 800b730:	3530      	adds	r5, #48	@ 0x30
 800b732:	4602      	mov	r2, r0
 800b734:	460b      	mov	r3, r1
 800b736:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b73a:	f806 5b01 	strb.w	r5, [r6], #1
 800b73e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b742:	f7f5 f9cb 	bl	8000adc <__aeabi_dcmplt>
 800b746:	2800      	cmp	r0, #0
 800b748:	d171      	bne.n	800b82e <_dtoa_r+0x65e>
 800b74a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b74e:	4911      	ldr	r1, [pc, #68]	@ (800b794 <_dtoa_r+0x5c4>)
 800b750:	2000      	movs	r0, #0
 800b752:	f7f4 fd99 	bl	8000288 <__aeabi_dsub>
 800b756:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b75a:	f7f5 f9bf 	bl	8000adc <__aeabi_dcmplt>
 800b75e:	2800      	cmp	r0, #0
 800b760:	f040 8095 	bne.w	800b88e <_dtoa_r+0x6be>
 800b764:	42a6      	cmp	r6, r4
 800b766:	f43f af50 	beq.w	800b60a <_dtoa_r+0x43a>
 800b76a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b76e:	4b0a      	ldr	r3, [pc, #40]	@ (800b798 <_dtoa_r+0x5c8>)
 800b770:	2200      	movs	r2, #0
 800b772:	f7f4 ff41 	bl	80005f8 <__aeabi_dmul>
 800b776:	4b08      	ldr	r3, [pc, #32]	@ (800b798 <_dtoa_r+0x5c8>)
 800b778:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b77c:	2200      	movs	r2, #0
 800b77e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b782:	f7f4 ff39 	bl	80005f8 <__aeabi_dmul>
 800b786:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b78a:	e7c4      	b.n	800b716 <_dtoa_r+0x546>
 800b78c:	0800d670 	.word	0x0800d670
 800b790:	0800d648 	.word	0x0800d648
 800b794:	3ff00000 	.word	0x3ff00000
 800b798:	40240000 	.word	0x40240000
 800b79c:	401c0000 	.word	0x401c0000
 800b7a0:	40140000 	.word	0x40140000
 800b7a4:	3fe00000 	.word	0x3fe00000
 800b7a8:	4631      	mov	r1, r6
 800b7aa:	4628      	mov	r0, r5
 800b7ac:	f7f4 ff24 	bl	80005f8 <__aeabi_dmul>
 800b7b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b7b4:	9415      	str	r4, [sp, #84]	@ 0x54
 800b7b6:	4656      	mov	r6, sl
 800b7b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b7bc:	f7f5 f9cc 	bl	8000b58 <__aeabi_d2iz>
 800b7c0:	4605      	mov	r5, r0
 800b7c2:	f7f4 feaf 	bl	8000524 <__aeabi_i2d>
 800b7c6:	4602      	mov	r2, r0
 800b7c8:	460b      	mov	r3, r1
 800b7ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b7ce:	f7f4 fd5b 	bl	8000288 <__aeabi_dsub>
 800b7d2:	3530      	adds	r5, #48	@ 0x30
 800b7d4:	f806 5b01 	strb.w	r5, [r6], #1
 800b7d8:	4602      	mov	r2, r0
 800b7da:	460b      	mov	r3, r1
 800b7dc:	42a6      	cmp	r6, r4
 800b7de:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b7e2:	f04f 0200 	mov.w	r2, #0
 800b7e6:	d124      	bne.n	800b832 <_dtoa_r+0x662>
 800b7e8:	4bac      	ldr	r3, [pc, #688]	@ (800ba9c <_dtoa_r+0x8cc>)
 800b7ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b7ee:	f7f4 fd4d 	bl	800028c <__adddf3>
 800b7f2:	4602      	mov	r2, r0
 800b7f4:	460b      	mov	r3, r1
 800b7f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b7fa:	f7f5 f98d 	bl	8000b18 <__aeabi_dcmpgt>
 800b7fe:	2800      	cmp	r0, #0
 800b800:	d145      	bne.n	800b88e <_dtoa_r+0x6be>
 800b802:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b806:	49a5      	ldr	r1, [pc, #660]	@ (800ba9c <_dtoa_r+0x8cc>)
 800b808:	2000      	movs	r0, #0
 800b80a:	f7f4 fd3d 	bl	8000288 <__aeabi_dsub>
 800b80e:	4602      	mov	r2, r0
 800b810:	460b      	mov	r3, r1
 800b812:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b816:	f7f5 f961 	bl	8000adc <__aeabi_dcmplt>
 800b81a:	2800      	cmp	r0, #0
 800b81c:	f43f aef5 	beq.w	800b60a <_dtoa_r+0x43a>
 800b820:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800b822:	1e73      	subs	r3, r6, #1
 800b824:	9315      	str	r3, [sp, #84]	@ 0x54
 800b826:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b82a:	2b30      	cmp	r3, #48	@ 0x30
 800b82c:	d0f8      	beq.n	800b820 <_dtoa_r+0x650>
 800b82e:	9f04      	ldr	r7, [sp, #16]
 800b830:	e73e      	b.n	800b6b0 <_dtoa_r+0x4e0>
 800b832:	4b9b      	ldr	r3, [pc, #620]	@ (800baa0 <_dtoa_r+0x8d0>)
 800b834:	f7f4 fee0 	bl	80005f8 <__aeabi_dmul>
 800b838:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b83c:	e7bc      	b.n	800b7b8 <_dtoa_r+0x5e8>
 800b83e:	d10c      	bne.n	800b85a <_dtoa_r+0x68a>
 800b840:	4b98      	ldr	r3, [pc, #608]	@ (800baa4 <_dtoa_r+0x8d4>)
 800b842:	2200      	movs	r2, #0
 800b844:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b848:	f7f4 fed6 	bl	80005f8 <__aeabi_dmul>
 800b84c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b850:	f7f5 f958 	bl	8000b04 <__aeabi_dcmpge>
 800b854:	2800      	cmp	r0, #0
 800b856:	f000 8157 	beq.w	800bb08 <_dtoa_r+0x938>
 800b85a:	2400      	movs	r4, #0
 800b85c:	4625      	mov	r5, r4
 800b85e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b860:	43db      	mvns	r3, r3
 800b862:	9304      	str	r3, [sp, #16]
 800b864:	4656      	mov	r6, sl
 800b866:	2700      	movs	r7, #0
 800b868:	4621      	mov	r1, r4
 800b86a:	4658      	mov	r0, fp
 800b86c:	f000 fbb4 	bl	800bfd8 <_Bfree>
 800b870:	2d00      	cmp	r5, #0
 800b872:	d0dc      	beq.n	800b82e <_dtoa_r+0x65e>
 800b874:	b12f      	cbz	r7, 800b882 <_dtoa_r+0x6b2>
 800b876:	42af      	cmp	r7, r5
 800b878:	d003      	beq.n	800b882 <_dtoa_r+0x6b2>
 800b87a:	4639      	mov	r1, r7
 800b87c:	4658      	mov	r0, fp
 800b87e:	f000 fbab 	bl	800bfd8 <_Bfree>
 800b882:	4629      	mov	r1, r5
 800b884:	4658      	mov	r0, fp
 800b886:	f000 fba7 	bl	800bfd8 <_Bfree>
 800b88a:	e7d0      	b.n	800b82e <_dtoa_r+0x65e>
 800b88c:	9704      	str	r7, [sp, #16]
 800b88e:	4633      	mov	r3, r6
 800b890:	461e      	mov	r6, r3
 800b892:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b896:	2a39      	cmp	r2, #57	@ 0x39
 800b898:	d107      	bne.n	800b8aa <_dtoa_r+0x6da>
 800b89a:	459a      	cmp	sl, r3
 800b89c:	d1f8      	bne.n	800b890 <_dtoa_r+0x6c0>
 800b89e:	9a04      	ldr	r2, [sp, #16]
 800b8a0:	3201      	adds	r2, #1
 800b8a2:	9204      	str	r2, [sp, #16]
 800b8a4:	2230      	movs	r2, #48	@ 0x30
 800b8a6:	f88a 2000 	strb.w	r2, [sl]
 800b8aa:	781a      	ldrb	r2, [r3, #0]
 800b8ac:	3201      	adds	r2, #1
 800b8ae:	701a      	strb	r2, [r3, #0]
 800b8b0:	e7bd      	b.n	800b82e <_dtoa_r+0x65e>
 800b8b2:	4b7b      	ldr	r3, [pc, #492]	@ (800baa0 <_dtoa_r+0x8d0>)
 800b8b4:	2200      	movs	r2, #0
 800b8b6:	f7f4 fe9f 	bl	80005f8 <__aeabi_dmul>
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	2300      	movs	r3, #0
 800b8be:	4604      	mov	r4, r0
 800b8c0:	460d      	mov	r5, r1
 800b8c2:	f7f5 f901 	bl	8000ac8 <__aeabi_dcmpeq>
 800b8c6:	2800      	cmp	r0, #0
 800b8c8:	f43f aebb 	beq.w	800b642 <_dtoa_r+0x472>
 800b8cc:	e6f0      	b.n	800b6b0 <_dtoa_r+0x4e0>
 800b8ce:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b8d0:	2a00      	cmp	r2, #0
 800b8d2:	f000 80db 	beq.w	800ba8c <_dtoa_r+0x8bc>
 800b8d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b8d8:	2a01      	cmp	r2, #1
 800b8da:	f300 80bf 	bgt.w	800ba5c <_dtoa_r+0x88c>
 800b8de:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b8e0:	2a00      	cmp	r2, #0
 800b8e2:	f000 80b7 	beq.w	800ba54 <_dtoa_r+0x884>
 800b8e6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b8ea:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b8ec:	4646      	mov	r6, r8
 800b8ee:	9a08      	ldr	r2, [sp, #32]
 800b8f0:	2101      	movs	r1, #1
 800b8f2:	441a      	add	r2, r3
 800b8f4:	4658      	mov	r0, fp
 800b8f6:	4498      	add	r8, r3
 800b8f8:	9208      	str	r2, [sp, #32]
 800b8fa:	f000 fc21 	bl	800c140 <__i2b>
 800b8fe:	4605      	mov	r5, r0
 800b900:	b15e      	cbz	r6, 800b91a <_dtoa_r+0x74a>
 800b902:	9b08      	ldr	r3, [sp, #32]
 800b904:	2b00      	cmp	r3, #0
 800b906:	dd08      	ble.n	800b91a <_dtoa_r+0x74a>
 800b908:	42b3      	cmp	r3, r6
 800b90a:	9a08      	ldr	r2, [sp, #32]
 800b90c:	bfa8      	it	ge
 800b90e:	4633      	movge	r3, r6
 800b910:	eba8 0803 	sub.w	r8, r8, r3
 800b914:	1af6      	subs	r6, r6, r3
 800b916:	1ad3      	subs	r3, r2, r3
 800b918:	9308      	str	r3, [sp, #32]
 800b91a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b91c:	b1f3      	cbz	r3, 800b95c <_dtoa_r+0x78c>
 800b91e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b920:	2b00      	cmp	r3, #0
 800b922:	f000 80b7 	beq.w	800ba94 <_dtoa_r+0x8c4>
 800b926:	b18c      	cbz	r4, 800b94c <_dtoa_r+0x77c>
 800b928:	4629      	mov	r1, r5
 800b92a:	4622      	mov	r2, r4
 800b92c:	4658      	mov	r0, fp
 800b92e:	f000 fcc7 	bl	800c2c0 <__pow5mult>
 800b932:	464a      	mov	r2, r9
 800b934:	4601      	mov	r1, r0
 800b936:	4605      	mov	r5, r0
 800b938:	4658      	mov	r0, fp
 800b93a:	f000 fc17 	bl	800c16c <__multiply>
 800b93e:	4649      	mov	r1, r9
 800b940:	9004      	str	r0, [sp, #16]
 800b942:	4658      	mov	r0, fp
 800b944:	f000 fb48 	bl	800bfd8 <_Bfree>
 800b948:	9b04      	ldr	r3, [sp, #16]
 800b94a:	4699      	mov	r9, r3
 800b94c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b94e:	1b1a      	subs	r2, r3, r4
 800b950:	d004      	beq.n	800b95c <_dtoa_r+0x78c>
 800b952:	4649      	mov	r1, r9
 800b954:	4658      	mov	r0, fp
 800b956:	f000 fcb3 	bl	800c2c0 <__pow5mult>
 800b95a:	4681      	mov	r9, r0
 800b95c:	2101      	movs	r1, #1
 800b95e:	4658      	mov	r0, fp
 800b960:	f000 fbee 	bl	800c140 <__i2b>
 800b964:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b966:	4604      	mov	r4, r0
 800b968:	2b00      	cmp	r3, #0
 800b96a:	f000 81cf 	beq.w	800bd0c <_dtoa_r+0xb3c>
 800b96e:	461a      	mov	r2, r3
 800b970:	4601      	mov	r1, r0
 800b972:	4658      	mov	r0, fp
 800b974:	f000 fca4 	bl	800c2c0 <__pow5mult>
 800b978:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b97a:	2b01      	cmp	r3, #1
 800b97c:	4604      	mov	r4, r0
 800b97e:	f300 8095 	bgt.w	800baac <_dtoa_r+0x8dc>
 800b982:	9b02      	ldr	r3, [sp, #8]
 800b984:	2b00      	cmp	r3, #0
 800b986:	f040 8087 	bne.w	800ba98 <_dtoa_r+0x8c8>
 800b98a:	9b03      	ldr	r3, [sp, #12]
 800b98c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b990:	2b00      	cmp	r3, #0
 800b992:	f040 8089 	bne.w	800baa8 <_dtoa_r+0x8d8>
 800b996:	9b03      	ldr	r3, [sp, #12]
 800b998:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b99c:	0d1b      	lsrs	r3, r3, #20
 800b99e:	051b      	lsls	r3, r3, #20
 800b9a0:	b12b      	cbz	r3, 800b9ae <_dtoa_r+0x7de>
 800b9a2:	9b08      	ldr	r3, [sp, #32]
 800b9a4:	3301      	adds	r3, #1
 800b9a6:	9308      	str	r3, [sp, #32]
 800b9a8:	f108 0801 	add.w	r8, r8, #1
 800b9ac:	2301      	movs	r3, #1
 800b9ae:	930a      	str	r3, [sp, #40]	@ 0x28
 800b9b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	f000 81b0 	beq.w	800bd18 <_dtoa_r+0xb48>
 800b9b8:	6923      	ldr	r3, [r4, #16]
 800b9ba:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b9be:	6918      	ldr	r0, [r3, #16]
 800b9c0:	f000 fb72 	bl	800c0a8 <__hi0bits>
 800b9c4:	f1c0 0020 	rsb	r0, r0, #32
 800b9c8:	9b08      	ldr	r3, [sp, #32]
 800b9ca:	4418      	add	r0, r3
 800b9cc:	f010 001f 	ands.w	r0, r0, #31
 800b9d0:	d077      	beq.n	800bac2 <_dtoa_r+0x8f2>
 800b9d2:	f1c0 0320 	rsb	r3, r0, #32
 800b9d6:	2b04      	cmp	r3, #4
 800b9d8:	dd6b      	ble.n	800bab2 <_dtoa_r+0x8e2>
 800b9da:	9b08      	ldr	r3, [sp, #32]
 800b9dc:	f1c0 001c 	rsb	r0, r0, #28
 800b9e0:	4403      	add	r3, r0
 800b9e2:	4480      	add	r8, r0
 800b9e4:	4406      	add	r6, r0
 800b9e6:	9308      	str	r3, [sp, #32]
 800b9e8:	f1b8 0f00 	cmp.w	r8, #0
 800b9ec:	dd05      	ble.n	800b9fa <_dtoa_r+0x82a>
 800b9ee:	4649      	mov	r1, r9
 800b9f0:	4642      	mov	r2, r8
 800b9f2:	4658      	mov	r0, fp
 800b9f4:	f000 fcbe 	bl	800c374 <__lshift>
 800b9f8:	4681      	mov	r9, r0
 800b9fa:	9b08      	ldr	r3, [sp, #32]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	dd05      	ble.n	800ba0c <_dtoa_r+0x83c>
 800ba00:	4621      	mov	r1, r4
 800ba02:	461a      	mov	r2, r3
 800ba04:	4658      	mov	r0, fp
 800ba06:	f000 fcb5 	bl	800c374 <__lshift>
 800ba0a:	4604      	mov	r4, r0
 800ba0c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d059      	beq.n	800bac6 <_dtoa_r+0x8f6>
 800ba12:	4621      	mov	r1, r4
 800ba14:	4648      	mov	r0, r9
 800ba16:	f000 fd19 	bl	800c44c <__mcmp>
 800ba1a:	2800      	cmp	r0, #0
 800ba1c:	da53      	bge.n	800bac6 <_dtoa_r+0x8f6>
 800ba1e:	1e7b      	subs	r3, r7, #1
 800ba20:	9304      	str	r3, [sp, #16]
 800ba22:	4649      	mov	r1, r9
 800ba24:	2300      	movs	r3, #0
 800ba26:	220a      	movs	r2, #10
 800ba28:	4658      	mov	r0, fp
 800ba2a:	f000 faf7 	bl	800c01c <__multadd>
 800ba2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ba30:	4681      	mov	r9, r0
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	f000 8172 	beq.w	800bd1c <_dtoa_r+0xb4c>
 800ba38:	2300      	movs	r3, #0
 800ba3a:	4629      	mov	r1, r5
 800ba3c:	220a      	movs	r2, #10
 800ba3e:	4658      	mov	r0, fp
 800ba40:	f000 faec 	bl	800c01c <__multadd>
 800ba44:	9b00      	ldr	r3, [sp, #0]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	4605      	mov	r5, r0
 800ba4a:	dc67      	bgt.n	800bb1c <_dtoa_r+0x94c>
 800ba4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba4e:	2b02      	cmp	r3, #2
 800ba50:	dc41      	bgt.n	800bad6 <_dtoa_r+0x906>
 800ba52:	e063      	b.n	800bb1c <_dtoa_r+0x94c>
 800ba54:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ba56:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ba5a:	e746      	b.n	800b8ea <_dtoa_r+0x71a>
 800ba5c:	9b07      	ldr	r3, [sp, #28]
 800ba5e:	1e5c      	subs	r4, r3, #1
 800ba60:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ba62:	42a3      	cmp	r3, r4
 800ba64:	bfbf      	itttt	lt
 800ba66:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800ba68:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800ba6a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800ba6c:	1ae3      	sublt	r3, r4, r3
 800ba6e:	bfb4      	ite	lt
 800ba70:	18d2      	addlt	r2, r2, r3
 800ba72:	1b1c      	subge	r4, r3, r4
 800ba74:	9b07      	ldr	r3, [sp, #28]
 800ba76:	bfbc      	itt	lt
 800ba78:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800ba7a:	2400      	movlt	r4, #0
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	bfb5      	itete	lt
 800ba80:	eba8 0603 	sublt.w	r6, r8, r3
 800ba84:	9b07      	ldrge	r3, [sp, #28]
 800ba86:	2300      	movlt	r3, #0
 800ba88:	4646      	movge	r6, r8
 800ba8a:	e730      	b.n	800b8ee <_dtoa_r+0x71e>
 800ba8c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ba8e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800ba90:	4646      	mov	r6, r8
 800ba92:	e735      	b.n	800b900 <_dtoa_r+0x730>
 800ba94:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ba96:	e75c      	b.n	800b952 <_dtoa_r+0x782>
 800ba98:	2300      	movs	r3, #0
 800ba9a:	e788      	b.n	800b9ae <_dtoa_r+0x7de>
 800ba9c:	3fe00000 	.word	0x3fe00000
 800baa0:	40240000 	.word	0x40240000
 800baa4:	40140000 	.word	0x40140000
 800baa8:	9b02      	ldr	r3, [sp, #8]
 800baaa:	e780      	b.n	800b9ae <_dtoa_r+0x7de>
 800baac:	2300      	movs	r3, #0
 800baae:	930a      	str	r3, [sp, #40]	@ 0x28
 800bab0:	e782      	b.n	800b9b8 <_dtoa_r+0x7e8>
 800bab2:	d099      	beq.n	800b9e8 <_dtoa_r+0x818>
 800bab4:	9a08      	ldr	r2, [sp, #32]
 800bab6:	331c      	adds	r3, #28
 800bab8:	441a      	add	r2, r3
 800baba:	4498      	add	r8, r3
 800babc:	441e      	add	r6, r3
 800babe:	9208      	str	r2, [sp, #32]
 800bac0:	e792      	b.n	800b9e8 <_dtoa_r+0x818>
 800bac2:	4603      	mov	r3, r0
 800bac4:	e7f6      	b.n	800bab4 <_dtoa_r+0x8e4>
 800bac6:	9b07      	ldr	r3, [sp, #28]
 800bac8:	9704      	str	r7, [sp, #16]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	dc20      	bgt.n	800bb10 <_dtoa_r+0x940>
 800bace:	9300      	str	r3, [sp, #0]
 800bad0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bad2:	2b02      	cmp	r3, #2
 800bad4:	dd1e      	ble.n	800bb14 <_dtoa_r+0x944>
 800bad6:	9b00      	ldr	r3, [sp, #0]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	f47f aec0 	bne.w	800b85e <_dtoa_r+0x68e>
 800bade:	4621      	mov	r1, r4
 800bae0:	2205      	movs	r2, #5
 800bae2:	4658      	mov	r0, fp
 800bae4:	f000 fa9a 	bl	800c01c <__multadd>
 800bae8:	4601      	mov	r1, r0
 800baea:	4604      	mov	r4, r0
 800baec:	4648      	mov	r0, r9
 800baee:	f000 fcad 	bl	800c44c <__mcmp>
 800baf2:	2800      	cmp	r0, #0
 800baf4:	f77f aeb3 	ble.w	800b85e <_dtoa_r+0x68e>
 800baf8:	4656      	mov	r6, sl
 800bafa:	2331      	movs	r3, #49	@ 0x31
 800bafc:	f806 3b01 	strb.w	r3, [r6], #1
 800bb00:	9b04      	ldr	r3, [sp, #16]
 800bb02:	3301      	adds	r3, #1
 800bb04:	9304      	str	r3, [sp, #16]
 800bb06:	e6ae      	b.n	800b866 <_dtoa_r+0x696>
 800bb08:	9c07      	ldr	r4, [sp, #28]
 800bb0a:	9704      	str	r7, [sp, #16]
 800bb0c:	4625      	mov	r5, r4
 800bb0e:	e7f3      	b.n	800baf8 <_dtoa_r+0x928>
 800bb10:	9b07      	ldr	r3, [sp, #28]
 800bb12:	9300      	str	r3, [sp, #0]
 800bb14:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	f000 8104 	beq.w	800bd24 <_dtoa_r+0xb54>
 800bb1c:	2e00      	cmp	r6, #0
 800bb1e:	dd05      	ble.n	800bb2c <_dtoa_r+0x95c>
 800bb20:	4629      	mov	r1, r5
 800bb22:	4632      	mov	r2, r6
 800bb24:	4658      	mov	r0, fp
 800bb26:	f000 fc25 	bl	800c374 <__lshift>
 800bb2a:	4605      	mov	r5, r0
 800bb2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d05a      	beq.n	800bbe8 <_dtoa_r+0xa18>
 800bb32:	6869      	ldr	r1, [r5, #4]
 800bb34:	4658      	mov	r0, fp
 800bb36:	f000 fa0f 	bl	800bf58 <_Balloc>
 800bb3a:	4606      	mov	r6, r0
 800bb3c:	b928      	cbnz	r0, 800bb4a <_dtoa_r+0x97a>
 800bb3e:	4b84      	ldr	r3, [pc, #528]	@ (800bd50 <_dtoa_r+0xb80>)
 800bb40:	4602      	mov	r2, r0
 800bb42:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800bb46:	f7ff bb5a 	b.w	800b1fe <_dtoa_r+0x2e>
 800bb4a:	692a      	ldr	r2, [r5, #16]
 800bb4c:	3202      	adds	r2, #2
 800bb4e:	0092      	lsls	r2, r2, #2
 800bb50:	f105 010c 	add.w	r1, r5, #12
 800bb54:	300c      	adds	r0, #12
 800bb56:	f000 ffaf 	bl	800cab8 <memcpy>
 800bb5a:	2201      	movs	r2, #1
 800bb5c:	4631      	mov	r1, r6
 800bb5e:	4658      	mov	r0, fp
 800bb60:	f000 fc08 	bl	800c374 <__lshift>
 800bb64:	f10a 0301 	add.w	r3, sl, #1
 800bb68:	9307      	str	r3, [sp, #28]
 800bb6a:	9b00      	ldr	r3, [sp, #0]
 800bb6c:	4453      	add	r3, sl
 800bb6e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bb70:	9b02      	ldr	r3, [sp, #8]
 800bb72:	f003 0301 	and.w	r3, r3, #1
 800bb76:	462f      	mov	r7, r5
 800bb78:	930a      	str	r3, [sp, #40]	@ 0x28
 800bb7a:	4605      	mov	r5, r0
 800bb7c:	9b07      	ldr	r3, [sp, #28]
 800bb7e:	4621      	mov	r1, r4
 800bb80:	3b01      	subs	r3, #1
 800bb82:	4648      	mov	r0, r9
 800bb84:	9300      	str	r3, [sp, #0]
 800bb86:	f7ff fa9a 	bl	800b0be <quorem>
 800bb8a:	4639      	mov	r1, r7
 800bb8c:	9002      	str	r0, [sp, #8]
 800bb8e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800bb92:	4648      	mov	r0, r9
 800bb94:	f000 fc5a 	bl	800c44c <__mcmp>
 800bb98:	462a      	mov	r2, r5
 800bb9a:	9008      	str	r0, [sp, #32]
 800bb9c:	4621      	mov	r1, r4
 800bb9e:	4658      	mov	r0, fp
 800bba0:	f000 fc70 	bl	800c484 <__mdiff>
 800bba4:	68c2      	ldr	r2, [r0, #12]
 800bba6:	4606      	mov	r6, r0
 800bba8:	bb02      	cbnz	r2, 800bbec <_dtoa_r+0xa1c>
 800bbaa:	4601      	mov	r1, r0
 800bbac:	4648      	mov	r0, r9
 800bbae:	f000 fc4d 	bl	800c44c <__mcmp>
 800bbb2:	4602      	mov	r2, r0
 800bbb4:	4631      	mov	r1, r6
 800bbb6:	4658      	mov	r0, fp
 800bbb8:	920e      	str	r2, [sp, #56]	@ 0x38
 800bbba:	f000 fa0d 	bl	800bfd8 <_Bfree>
 800bbbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bbc0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bbc2:	9e07      	ldr	r6, [sp, #28]
 800bbc4:	ea43 0102 	orr.w	r1, r3, r2
 800bbc8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bbca:	4319      	orrs	r1, r3
 800bbcc:	d110      	bne.n	800bbf0 <_dtoa_r+0xa20>
 800bbce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bbd2:	d029      	beq.n	800bc28 <_dtoa_r+0xa58>
 800bbd4:	9b08      	ldr	r3, [sp, #32]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	dd02      	ble.n	800bbe0 <_dtoa_r+0xa10>
 800bbda:	9b02      	ldr	r3, [sp, #8]
 800bbdc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800bbe0:	9b00      	ldr	r3, [sp, #0]
 800bbe2:	f883 8000 	strb.w	r8, [r3]
 800bbe6:	e63f      	b.n	800b868 <_dtoa_r+0x698>
 800bbe8:	4628      	mov	r0, r5
 800bbea:	e7bb      	b.n	800bb64 <_dtoa_r+0x994>
 800bbec:	2201      	movs	r2, #1
 800bbee:	e7e1      	b.n	800bbb4 <_dtoa_r+0x9e4>
 800bbf0:	9b08      	ldr	r3, [sp, #32]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	db04      	blt.n	800bc00 <_dtoa_r+0xa30>
 800bbf6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bbf8:	430b      	orrs	r3, r1
 800bbfa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bbfc:	430b      	orrs	r3, r1
 800bbfe:	d120      	bne.n	800bc42 <_dtoa_r+0xa72>
 800bc00:	2a00      	cmp	r2, #0
 800bc02:	dded      	ble.n	800bbe0 <_dtoa_r+0xa10>
 800bc04:	4649      	mov	r1, r9
 800bc06:	2201      	movs	r2, #1
 800bc08:	4658      	mov	r0, fp
 800bc0a:	f000 fbb3 	bl	800c374 <__lshift>
 800bc0e:	4621      	mov	r1, r4
 800bc10:	4681      	mov	r9, r0
 800bc12:	f000 fc1b 	bl	800c44c <__mcmp>
 800bc16:	2800      	cmp	r0, #0
 800bc18:	dc03      	bgt.n	800bc22 <_dtoa_r+0xa52>
 800bc1a:	d1e1      	bne.n	800bbe0 <_dtoa_r+0xa10>
 800bc1c:	f018 0f01 	tst.w	r8, #1
 800bc20:	d0de      	beq.n	800bbe0 <_dtoa_r+0xa10>
 800bc22:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bc26:	d1d8      	bne.n	800bbda <_dtoa_r+0xa0a>
 800bc28:	9a00      	ldr	r2, [sp, #0]
 800bc2a:	2339      	movs	r3, #57	@ 0x39
 800bc2c:	7013      	strb	r3, [r2, #0]
 800bc2e:	4633      	mov	r3, r6
 800bc30:	461e      	mov	r6, r3
 800bc32:	3b01      	subs	r3, #1
 800bc34:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800bc38:	2a39      	cmp	r2, #57	@ 0x39
 800bc3a:	d052      	beq.n	800bce2 <_dtoa_r+0xb12>
 800bc3c:	3201      	adds	r2, #1
 800bc3e:	701a      	strb	r2, [r3, #0]
 800bc40:	e612      	b.n	800b868 <_dtoa_r+0x698>
 800bc42:	2a00      	cmp	r2, #0
 800bc44:	dd07      	ble.n	800bc56 <_dtoa_r+0xa86>
 800bc46:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bc4a:	d0ed      	beq.n	800bc28 <_dtoa_r+0xa58>
 800bc4c:	9a00      	ldr	r2, [sp, #0]
 800bc4e:	f108 0301 	add.w	r3, r8, #1
 800bc52:	7013      	strb	r3, [r2, #0]
 800bc54:	e608      	b.n	800b868 <_dtoa_r+0x698>
 800bc56:	9b07      	ldr	r3, [sp, #28]
 800bc58:	9a07      	ldr	r2, [sp, #28]
 800bc5a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800bc5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bc60:	4293      	cmp	r3, r2
 800bc62:	d028      	beq.n	800bcb6 <_dtoa_r+0xae6>
 800bc64:	4649      	mov	r1, r9
 800bc66:	2300      	movs	r3, #0
 800bc68:	220a      	movs	r2, #10
 800bc6a:	4658      	mov	r0, fp
 800bc6c:	f000 f9d6 	bl	800c01c <__multadd>
 800bc70:	42af      	cmp	r7, r5
 800bc72:	4681      	mov	r9, r0
 800bc74:	f04f 0300 	mov.w	r3, #0
 800bc78:	f04f 020a 	mov.w	r2, #10
 800bc7c:	4639      	mov	r1, r7
 800bc7e:	4658      	mov	r0, fp
 800bc80:	d107      	bne.n	800bc92 <_dtoa_r+0xac2>
 800bc82:	f000 f9cb 	bl	800c01c <__multadd>
 800bc86:	4607      	mov	r7, r0
 800bc88:	4605      	mov	r5, r0
 800bc8a:	9b07      	ldr	r3, [sp, #28]
 800bc8c:	3301      	adds	r3, #1
 800bc8e:	9307      	str	r3, [sp, #28]
 800bc90:	e774      	b.n	800bb7c <_dtoa_r+0x9ac>
 800bc92:	f000 f9c3 	bl	800c01c <__multadd>
 800bc96:	4629      	mov	r1, r5
 800bc98:	4607      	mov	r7, r0
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	220a      	movs	r2, #10
 800bc9e:	4658      	mov	r0, fp
 800bca0:	f000 f9bc 	bl	800c01c <__multadd>
 800bca4:	4605      	mov	r5, r0
 800bca6:	e7f0      	b.n	800bc8a <_dtoa_r+0xaba>
 800bca8:	9b00      	ldr	r3, [sp, #0]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	bfcc      	ite	gt
 800bcae:	461e      	movgt	r6, r3
 800bcb0:	2601      	movle	r6, #1
 800bcb2:	4456      	add	r6, sl
 800bcb4:	2700      	movs	r7, #0
 800bcb6:	4649      	mov	r1, r9
 800bcb8:	2201      	movs	r2, #1
 800bcba:	4658      	mov	r0, fp
 800bcbc:	f000 fb5a 	bl	800c374 <__lshift>
 800bcc0:	4621      	mov	r1, r4
 800bcc2:	4681      	mov	r9, r0
 800bcc4:	f000 fbc2 	bl	800c44c <__mcmp>
 800bcc8:	2800      	cmp	r0, #0
 800bcca:	dcb0      	bgt.n	800bc2e <_dtoa_r+0xa5e>
 800bccc:	d102      	bne.n	800bcd4 <_dtoa_r+0xb04>
 800bcce:	f018 0f01 	tst.w	r8, #1
 800bcd2:	d1ac      	bne.n	800bc2e <_dtoa_r+0xa5e>
 800bcd4:	4633      	mov	r3, r6
 800bcd6:	461e      	mov	r6, r3
 800bcd8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bcdc:	2a30      	cmp	r2, #48	@ 0x30
 800bcde:	d0fa      	beq.n	800bcd6 <_dtoa_r+0xb06>
 800bce0:	e5c2      	b.n	800b868 <_dtoa_r+0x698>
 800bce2:	459a      	cmp	sl, r3
 800bce4:	d1a4      	bne.n	800bc30 <_dtoa_r+0xa60>
 800bce6:	9b04      	ldr	r3, [sp, #16]
 800bce8:	3301      	adds	r3, #1
 800bcea:	9304      	str	r3, [sp, #16]
 800bcec:	2331      	movs	r3, #49	@ 0x31
 800bcee:	f88a 3000 	strb.w	r3, [sl]
 800bcf2:	e5b9      	b.n	800b868 <_dtoa_r+0x698>
 800bcf4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bcf6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800bd54 <_dtoa_r+0xb84>
 800bcfa:	b11b      	cbz	r3, 800bd04 <_dtoa_r+0xb34>
 800bcfc:	f10a 0308 	add.w	r3, sl, #8
 800bd00:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800bd02:	6013      	str	r3, [r2, #0]
 800bd04:	4650      	mov	r0, sl
 800bd06:	b019      	add	sp, #100	@ 0x64
 800bd08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd0e:	2b01      	cmp	r3, #1
 800bd10:	f77f ae37 	ble.w	800b982 <_dtoa_r+0x7b2>
 800bd14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bd16:	930a      	str	r3, [sp, #40]	@ 0x28
 800bd18:	2001      	movs	r0, #1
 800bd1a:	e655      	b.n	800b9c8 <_dtoa_r+0x7f8>
 800bd1c:	9b00      	ldr	r3, [sp, #0]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	f77f aed6 	ble.w	800bad0 <_dtoa_r+0x900>
 800bd24:	4656      	mov	r6, sl
 800bd26:	4621      	mov	r1, r4
 800bd28:	4648      	mov	r0, r9
 800bd2a:	f7ff f9c8 	bl	800b0be <quorem>
 800bd2e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800bd32:	f806 8b01 	strb.w	r8, [r6], #1
 800bd36:	9b00      	ldr	r3, [sp, #0]
 800bd38:	eba6 020a 	sub.w	r2, r6, sl
 800bd3c:	4293      	cmp	r3, r2
 800bd3e:	ddb3      	ble.n	800bca8 <_dtoa_r+0xad8>
 800bd40:	4649      	mov	r1, r9
 800bd42:	2300      	movs	r3, #0
 800bd44:	220a      	movs	r2, #10
 800bd46:	4658      	mov	r0, fp
 800bd48:	f000 f968 	bl	800c01c <__multadd>
 800bd4c:	4681      	mov	r9, r0
 800bd4e:	e7ea      	b.n	800bd26 <_dtoa_r+0xb56>
 800bd50:	0800d5d0 	.word	0x0800d5d0
 800bd54:	0800d554 	.word	0x0800d554

0800bd58 <_free_r>:
 800bd58:	b538      	push	{r3, r4, r5, lr}
 800bd5a:	4605      	mov	r5, r0
 800bd5c:	2900      	cmp	r1, #0
 800bd5e:	d041      	beq.n	800bde4 <_free_r+0x8c>
 800bd60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bd64:	1f0c      	subs	r4, r1, #4
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	bfb8      	it	lt
 800bd6a:	18e4      	addlt	r4, r4, r3
 800bd6c:	f000 f8e8 	bl	800bf40 <__malloc_lock>
 800bd70:	4a1d      	ldr	r2, [pc, #116]	@ (800bde8 <_free_r+0x90>)
 800bd72:	6813      	ldr	r3, [r2, #0]
 800bd74:	b933      	cbnz	r3, 800bd84 <_free_r+0x2c>
 800bd76:	6063      	str	r3, [r4, #4]
 800bd78:	6014      	str	r4, [r2, #0]
 800bd7a:	4628      	mov	r0, r5
 800bd7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bd80:	f000 b8e4 	b.w	800bf4c <__malloc_unlock>
 800bd84:	42a3      	cmp	r3, r4
 800bd86:	d908      	bls.n	800bd9a <_free_r+0x42>
 800bd88:	6820      	ldr	r0, [r4, #0]
 800bd8a:	1821      	adds	r1, r4, r0
 800bd8c:	428b      	cmp	r3, r1
 800bd8e:	bf01      	itttt	eq
 800bd90:	6819      	ldreq	r1, [r3, #0]
 800bd92:	685b      	ldreq	r3, [r3, #4]
 800bd94:	1809      	addeq	r1, r1, r0
 800bd96:	6021      	streq	r1, [r4, #0]
 800bd98:	e7ed      	b.n	800bd76 <_free_r+0x1e>
 800bd9a:	461a      	mov	r2, r3
 800bd9c:	685b      	ldr	r3, [r3, #4]
 800bd9e:	b10b      	cbz	r3, 800bda4 <_free_r+0x4c>
 800bda0:	42a3      	cmp	r3, r4
 800bda2:	d9fa      	bls.n	800bd9a <_free_r+0x42>
 800bda4:	6811      	ldr	r1, [r2, #0]
 800bda6:	1850      	adds	r0, r2, r1
 800bda8:	42a0      	cmp	r0, r4
 800bdaa:	d10b      	bne.n	800bdc4 <_free_r+0x6c>
 800bdac:	6820      	ldr	r0, [r4, #0]
 800bdae:	4401      	add	r1, r0
 800bdb0:	1850      	adds	r0, r2, r1
 800bdb2:	4283      	cmp	r3, r0
 800bdb4:	6011      	str	r1, [r2, #0]
 800bdb6:	d1e0      	bne.n	800bd7a <_free_r+0x22>
 800bdb8:	6818      	ldr	r0, [r3, #0]
 800bdba:	685b      	ldr	r3, [r3, #4]
 800bdbc:	6053      	str	r3, [r2, #4]
 800bdbe:	4408      	add	r0, r1
 800bdc0:	6010      	str	r0, [r2, #0]
 800bdc2:	e7da      	b.n	800bd7a <_free_r+0x22>
 800bdc4:	d902      	bls.n	800bdcc <_free_r+0x74>
 800bdc6:	230c      	movs	r3, #12
 800bdc8:	602b      	str	r3, [r5, #0]
 800bdca:	e7d6      	b.n	800bd7a <_free_r+0x22>
 800bdcc:	6820      	ldr	r0, [r4, #0]
 800bdce:	1821      	adds	r1, r4, r0
 800bdd0:	428b      	cmp	r3, r1
 800bdd2:	bf04      	itt	eq
 800bdd4:	6819      	ldreq	r1, [r3, #0]
 800bdd6:	685b      	ldreq	r3, [r3, #4]
 800bdd8:	6063      	str	r3, [r4, #4]
 800bdda:	bf04      	itt	eq
 800bddc:	1809      	addeq	r1, r1, r0
 800bdde:	6021      	streq	r1, [r4, #0]
 800bde0:	6054      	str	r4, [r2, #4]
 800bde2:	e7ca      	b.n	800bd7a <_free_r+0x22>
 800bde4:	bd38      	pop	{r3, r4, r5, pc}
 800bde6:	bf00      	nop
 800bde8:	200024a8 	.word	0x200024a8

0800bdec <malloc>:
 800bdec:	4b02      	ldr	r3, [pc, #8]	@ (800bdf8 <malloc+0xc>)
 800bdee:	4601      	mov	r1, r0
 800bdf0:	6818      	ldr	r0, [r3, #0]
 800bdf2:	f000 b825 	b.w	800be40 <_malloc_r>
 800bdf6:	bf00      	nop
 800bdf8:	20000108 	.word	0x20000108

0800bdfc <sbrk_aligned>:
 800bdfc:	b570      	push	{r4, r5, r6, lr}
 800bdfe:	4e0f      	ldr	r6, [pc, #60]	@ (800be3c <sbrk_aligned+0x40>)
 800be00:	460c      	mov	r4, r1
 800be02:	6831      	ldr	r1, [r6, #0]
 800be04:	4605      	mov	r5, r0
 800be06:	b911      	cbnz	r1, 800be0e <sbrk_aligned+0x12>
 800be08:	f000 fe46 	bl	800ca98 <_sbrk_r>
 800be0c:	6030      	str	r0, [r6, #0]
 800be0e:	4621      	mov	r1, r4
 800be10:	4628      	mov	r0, r5
 800be12:	f000 fe41 	bl	800ca98 <_sbrk_r>
 800be16:	1c43      	adds	r3, r0, #1
 800be18:	d103      	bne.n	800be22 <sbrk_aligned+0x26>
 800be1a:	f04f 34ff 	mov.w	r4, #4294967295
 800be1e:	4620      	mov	r0, r4
 800be20:	bd70      	pop	{r4, r5, r6, pc}
 800be22:	1cc4      	adds	r4, r0, #3
 800be24:	f024 0403 	bic.w	r4, r4, #3
 800be28:	42a0      	cmp	r0, r4
 800be2a:	d0f8      	beq.n	800be1e <sbrk_aligned+0x22>
 800be2c:	1a21      	subs	r1, r4, r0
 800be2e:	4628      	mov	r0, r5
 800be30:	f000 fe32 	bl	800ca98 <_sbrk_r>
 800be34:	3001      	adds	r0, #1
 800be36:	d1f2      	bne.n	800be1e <sbrk_aligned+0x22>
 800be38:	e7ef      	b.n	800be1a <sbrk_aligned+0x1e>
 800be3a:	bf00      	nop
 800be3c:	200024a4 	.word	0x200024a4

0800be40 <_malloc_r>:
 800be40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be44:	1ccd      	adds	r5, r1, #3
 800be46:	f025 0503 	bic.w	r5, r5, #3
 800be4a:	3508      	adds	r5, #8
 800be4c:	2d0c      	cmp	r5, #12
 800be4e:	bf38      	it	cc
 800be50:	250c      	movcc	r5, #12
 800be52:	2d00      	cmp	r5, #0
 800be54:	4606      	mov	r6, r0
 800be56:	db01      	blt.n	800be5c <_malloc_r+0x1c>
 800be58:	42a9      	cmp	r1, r5
 800be5a:	d904      	bls.n	800be66 <_malloc_r+0x26>
 800be5c:	230c      	movs	r3, #12
 800be5e:	6033      	str	r3, [r6, #0]
 800be60:	2000      	movs	r0, #0
 800be62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be66:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bf3c <_malloc_r+0xfc>
 800be6a:	f000 f869 	bl	800bf40 <__malloc_lock>
 800be6e:	f8d8 3000 	ldr.w	r3, [r8]
 800be72:	461c      	mov	r4, r3
 800be74:	bb44      	cbnz	r4, 800bec8 <_malloc_r+0x88>
 800be76:	4629      	mov	r1, r5
 800be78:	4630      	mov	r0, r6
 800be7a:	f7ff ffbf 	bl	800bdfc <sbrk_aligned>
 800be7e:	1c43      	adds	r3, r0, #1
 800be80:	4604      	mov	r4, r0
 800be82:	d158      	bne.n	800bf36 <_malloc_r+0xf6>
 800be84:	f8d8 4000 	ldr.w	r4, [r8]
 800be88:	4627      	mov	r7, r4
 800be8a:	2f00      	cmp	r7, #0
 800be8c:	d143      	bne.n	800bf16 <_malloc_r+0xd6>
 800be8e:	2c00      	cmp	r4, #0
 800be90:	d04b      	beq.n	800bf2a <_malloc_r+0xea>
 800be92:	6823      	ldr	r3, [r4, #0]
 800be94:	4639      	mov	r1, r7
 800be96:	4630      	mov	r0, r6
 800be98:	eb04 0903 	add.w	r9, r4, r3
 800be9c:	f000 fdfc 	bl	800ca98 <_sbrk_r>
 800bea0:	4581      	cmp	r9, r0
 800bea2:	d142      	bne.n	800bf2a <_malloc_r+0xea>
 800bea4:	6821      	ldr	r1, [r4, #0]
 800bea6:	1a6d      	subs	r5, r5, r1
 800bea8:	4629      	mov	r1, r5
 800beaa:	4630      	mov	r0, r6
 800beac:	f7ff ffa6 	bl	800bdfc <sbrk_aligned>
 800beb0:	3001      	adds	r0, #1
 800beb2:	d03a      	beq.n	800bf2a <_malloc_r+0xea>
 800beb4:	6823      	ldr	r3, [r4, #0]
 800beb6:	442b      	add	r3, r5
 800beb8:	6023      	str	r3, [r4, #0]
 800beba:	f8d8 3000 	ldr.w	r3, [r8]
 800bebe:	685a      	ldr	r2, [r3, #4]
 800bec0:	bb62      	cbnz	r2, 800bf1c <_malloc_r+0xdc>
 800bec2:	f8c8 7000 	str.w	r7, [r8]
 800bec6:	e00f      	b.n	800bee8 <_malloc_r+0xa8>
 800bec8:	6822      	ldr	r2, [r4, #0]
 800beca:	1b52      	subs	r2, r2, r5
 800becc:	d420      	bmi.n	800bf10 <_malloc_r+0xd0>
 800bece:	2a0b      	cmp	r2, #11
 800bed0:	d917      	bls.n	800bf02 <_malloc_r+0xc2>
 800bed2:	1961      	adds	r1, r4, r5
 800bed4:	42a3      	cmp	r3, r4
 800bed6:	6025      	str	r5, [r4, #0]
 800bed8:	bf18      	it	ne
 800beda:	6059      	strne	r1, [r3, #4]
 800bedc:	6863      	ldr	r3, [r4, #4]
 800bede:	bf08      	it	eq
 800bee0:	f8c8 1000 	streq.w	r1, [r8]
 800bee4:	5162      	str	r2, [r4, r5]
 800bee6:	604b      	str	r3, [r1, #4]
 800bee8:	4630      	mov	r0, r6
 800beea:	f000 f82f 	bl	800bf4c <__malloc_unlock>
 800beee:	f104 000b 	add.w	r0, r4, #11
 800bef2:	1d23      	adds	r3, r4, #4
 800bef4:	f020 0007 	bic.w	r0, r0, #7
 800bef8:	1ac2      	subs	r2, r0, r3
 800befa:	bf1c      	itt	ne
 800befc:	1a1b      	subne	r3, r3, r0
 800befe:	50a3      	strne	r3, [r4, r2]
 800bf00:	e7af      	b.n	800be62 <_malloc_r+0x22>
 800bf02:	6862      	ldr	r2, [r4, #4]
 800bf04:	42a3      	cmp	r3, r4
 800bf06:	bf0c      	ite	eq
 800bf08:	f8c8 2000 	streq.w	r2, [r8]
 800bf0c:	605a      	strne	r2, [r3, #4]
 800bf0e:	e7eb      	b.n	800bee8 <_malloc_r+0xa8>
 800bf10:	4623      	mov	r3, r4
 800bf12:	6864      	ldr	r4, [r4, #4]
 800bf14:	e7ae      	b.n	800be74 <_malloc_r+0x34>
 800bf16:	463c      	mov	r4, r7
 800bf18:	687f      	ldr	r7, [r7, #4]
 800bf1a:	e7b6      	b.n	800be8a <_malloc_r+0x4a>
 800bf1c:	461a      	mov	r2, r3
 800bf1e:	685b      	ldr	r3, [r3, #4]
 800bf20:	42a3      	cmp	r3, r4
 800bf22:	d1fb      	bne.n	800bf1c <_malloc_r+0xdc>
 800bf24:	2300      	movs	r3, #0
 800bf26:	6053      	str	r3, [r2, #4]
 800bf28:	e7de      	b.n	800bee8 <_malloc_r+0xa8>
 800bf2a:	230c      	movs	r3, #12
 800bf2c:	6033      	str	r3, [r6, #0]
 800bf2e:	4630      	mov	r0, r6
 800bf30:	f000 f80c 	bl	800bf4c <__malloc_unlock>
 800bf34:	e794      	b.n	800be60 <_malloc_r+0x20>
 800bf36:	6005      	str	r5, [r0, #0]
 800bf38:	e7d6      	b.n	800bee8 <_malloc_r+0xa8>
 800bf3a:	bf00      	nop
 800bf3c:	200024a8 	.word	0x200024a8

0800bf40 <__malloc_lock>:
 800bf40:	4801      	ldr	r0, [pc, #4]	@ (800bf48 <__malloc_lock+0x8>)
 800bf42:	f7ff b8ba 	b.w	800b0ba <__retarget_lock_acquire_recursive>
 800bf46:	bf00      	nop
 800bf48:	200024a0 	.word	0x200024a0

0800bf4c <__malloc_unlock>:
 800bf4c:	4801      	ldr	r0, [pc, #4]	@ (800bf54 <__malloc_unlock+0x8>)
 800bf4e:	f7ff b8b5 	b.w	800b0bc <__retarget_lock_release_recursive>
 800bf52:	bf00      	nop
 800bf54:	200024a0 	.word	0x200024a0

0800bf58 <_Balloc>:
 800bf58:	b570      	push	{r4, r5, r6, lr}
 800bf5a:	69c6      	ldr	r6, [r0, #28]
 800bf5c:	4604      	mov	r4, r0
 800bf5e:	460d      	mov	r5, r1
 800bf60:	b976      	cbnz	r6, 800bf80 <_Balloc+0x28>
 800bf62:	2010      	movs	r0, #16
 800bf64:	f7ff ff42 	bl	800bdec <malloc>
 800bf68:	4602      	mov	r2, r0
 800bf6a:	61e0      	str	r0, [r4, #28]
 800bf6c:	b920      	cbnz	r0, 800bf78 <_Balloc+0x20>
 800bf6e:	4b18      	ldr	r3, [pc, #96]	@ (800bfd0 <_Balloc+0x78>)
 800bf70:	4818      	ldr	r0, [pc, #96]	@ (800bfd4 <_Balloc+0x7c>)
 800bf72:	216b      	movs	r1, #107	@ 0x6b
 800bf74:	f000 fdae 	bl	800cad4 <__assert_func>
 800bf78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bf7c:	6006      	str	r6, [r0, #0]
 800bf7e:	60c6      	str	r6, [r0, #12]
 800bf80:	69e6      	ldr	r6, [r4, #28]
 800bf82:	68f3      	ldr	r3, [r6, #12]
 800bf84:	b183      	cbz	r3, 800bfa8 <_Balloc+0x50>
 800bf86:	69e3      	ldr	r3, [r4, #28]
 800bf88:	68db      	ldr	r3, [r3, #12]
 800bf8a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bf8e:	b9b8      	cbnz	r0, 800bfc0 <_Balloc+0x68>
 800bf90:	2101      	movs	r1, #1
 800bf92:	fa01 f605 	lsl.w	r6, r1, r5
 800bf96:	1d72      	adds	r2, r6, #5
 800bf98:	0092      	lsls	r2, r2, #2
 800bf9a:	4620      	mov	r0, r4
 800bf9c:	f000 fdb8 	bl	800cb10 <_calloc_r>
 800bfa0:	b160      	cbz	r0, 800bfbc <_Balloc+0x64>
 800bfa2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bfa6:	e00e      	b.n	800bfc6 <_Balloc+0x6e>
 800bfa8:	2221      	movs	r2, #33	@ 0x21
 800bfaa:	2104      	movs	r1, #4
 800bfac:	4620      	mov	r0, r4
 800bfae:	f000 fdaf 	bl	800cb10 <_calloc_r>
 800bfb2:	69e3      	ldr	r3, [r4, #28]
 800bfb4:	60f0      	str	r0, [r6, #12]
 800bfb6:	68db      	ldr	r3, [r3, #12]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d1e4      	bne.n	800bf86 <_Balloc+0x2e>
 800bfbc:	2000      	movs	r0, #0
 800bfbe:	bd70      	pop	{r4, r5, r6, pc}
 800bfc0:	6802      	ldr	r2, [r0, #0]
 800bfc2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bfc6:	2300      	movs	r3, #0
 800bfc8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bfcc:	e7f7      	b.n	800bfbe <_Balloc+0x66>
 800bfce:	bf00      	nop
 800bfd0:	0800d561 	.word	0x0800d561
 800bfd4:	0800d5e1 	.word	0x0800d5e1

0800bfd8 <_Bfree>:
 800bfd8:	b570      	push	{r4, r5, r6, lr}
 800bfda:	69c6      	ldr	r6, [r0, #28]
 800bfdc:	4605      	mov	r5, r0
 800bfde:	460c      	mov	r4, r1
 800bfe0:	b976      	cbnz	r6, 800c000 <_Bfree+0x28>
 800bfe2:	2010      	movs	r0, #16
 800bfe4:	f7ff ff02 	bl	800bdec <malloc>
 800bfe8:	4602      	mov	r2, r0
 800bfea:	61e8      	str	r0, [r5, #28]
 800bfec:	b920      	cbnz	r0, 800bff8 <_Bfree+0x20>
 800bfee:	4b09      	ldr	r3, [pc, #36]	@ (800c014 <_Bfree+0x3c>)
 800bff0:	4809      	ldr	r0, [pc, #36]	@ (800c018 <_Bfree+0x40>)
 800bff2:	218f      	movs	r1, #143	@ 0x8f
 800bff4:	f000 fd6e 	bl	800cad4 <__assert_func>
 800bff8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bffc:	6006      	str	r6, [r0, #0]
 800bffe:	60c6      	str	r6, [r0, #12]
 800c000:	b13c      	cbz	r4, 800c012 <_Bfree+0x3a>
 800c002:	69eb      	ldr	r3, [r5, #28]
 800c004:	6862      	ldr	r2, [r4, #4]
 800c006:	68db      	ldr	r3, [r3, #12]
 800c008:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c00c:	6021      	str	r1, [r4, #0]
 800c00e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c012:	bd70      	pop	{r4, r5, r6, pc}
 800c014:	0800d561 	.word	0x0800d561
 800c018:	0800d5e1 	.word	0x0800d5e1

0800c01c <__multadd>:
 800c01c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c020:	690d      	ldr	r5, [r1, #16]
 800c022:	4607      	mov	r7, r0
 800c024:	460c      	mov	r4, r1
 800c026:	461e      	mov	r6, r3
 800c028:	f101 0c14 	add.w	ip, r1, #20
 800c02c:	2000      	movs	r0, #0
 800c02e:	f8dc 3000 	ldr.w	r3, [ip]
 800c032:	b299      	uxth	r1, r3
 800c034:	fb02 6101 	mla	r1, r2, r1, r6
 800c038:	0c1e      	lsrs	r6, r3, #16
 800c03a:	0c0b      	lsrs	r3, r1, #16
 800c03c:	fb02 3306 	mla	r3, r2, r6, r3
 800c040:	b289      	uxth	r1, r1
 800c042:	3001      	adds	r0, #1
 800c044:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c048:	4285      	cmp	r5, r0
 800c04a:	f84c 1b04 	str.w	r1, [ip], #4
 800c04e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c052:	dcec      	bgt.n	800c02e <__multadd+0x12>
 800c054:	b30e      	cbz	r6, 800c09a <__multadd+0x7e>
 800c056:	68a3      	ldr	r3, [r4, #8]
 800c058:	42ab      	cmp	r3, r5
 800c05a:	dc19      	bgt.n	800c090 <__multadd+0x74>
 800c05c:	6861      	ldr	r1, [r4, #4]
 800c05e:	4638      	mov	r0, r7
 800c060:	3101      	adds	r1, #1
 800c062:	f7ff ff79 	bl	800bf58 <_Balloc>
 800c066:	4680      	mov	r8, r0
 800c068:	b928      	cbnz	r0, 800c076 <__multadd+0x5a>
 800c06a:	4602      	mov	r2, r0
 800c06c:	4b0c      	ldr	r3, [pc, #48]	@ (800c0a0 <__multadd+0x84>)
 800c06e:	480d      	ldr	r0, [pc, #52]	@ (800c0a4 <__multadd+0x88>)
 800c070:	21ba      	movs	r1, #186	@ 0xba
 800c072:	f000 fd2f 	bl	800cad4 <__assert_func>
 800c076:	6922      	ldr	r2, [r4, #16]
 800c078:	3202      	adds	r2, #2
 800c07a:	f104 010c 	add.w	r1, r4, #12
 800c07e:	0092      	lsls	r2, r2, #2
 800c080:	300c      	adds	r0, #12
 800c082:	f000 fd19 	bl	800cab8 <memcpy>
 800c086:	4621      	mov	r1, r4
 800c088:	4638      	mov	r0, r7
 800c08a:	f7ff ffa5 	bl	800bfd8 <_Bfree>
 800c08e:	4644      	mov	r4, r8
 800c090:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c094:	3501      	adds	r5, #1
 800c096:	615e      	str	r6, [r3, #20]
 800c098:	6125      	str	r5, [r4, #16]
 800c09a:	4620      	mov	r0, r4
 800c09c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0a0:	0800d5d0 	.word	0x0800d5d0
 800c0a4:	0800d5e1 	.word	0x0800d5e1

0800c0a8 <__hi0bits>:
 800c0a8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c0ac:	4603      	mov	r3, r0
 800c0ae:	bf36      	itet	cc
 800c0b0:	0403      	lslcc	r3, r0, #16
 800c0b2:	2000      	movcs	r0, #0
 800c0b4:	2010      	movcc	r0, #16
 800c0b6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c0ba:	bf3c      	itt	cc
 800c0bc:	021b      	lslcc	r3, r3, #8
 800c0be:	3008      	addcc	r0, #8
 800c0c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c0c4:	bf3c      	itt	cc
 800c0c6:	011b      	lslcc	r3, r3, #4
 800c0c8:	3004      	addcc	r0, #4
 800c0ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c0ce:	bf3c      	itt	cc
 800c0d0:	009b      	lslcc	r3, r3, #2
 800c0d2:	3002      	addcc	r0, #2
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	db05      	blt.n	800c0e4 <__hi0bits+0x3c>
 800c0d8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c0dc:	f100 0001 	add.w	r0, r0, #1
 800c0e0:	bf08      	it	eq
 800c0e2:	2020      	moveq	r0, #32
 800c0e4:	4770      	bx	lr

0800c0e6 <__lo0bits>:
 800c0e6:	6803      	ldr	r3, [r0, #0]
 800c0e8:	4602      	mov	r2, r0
 800c0ea:	f013 0007 	ands.w	r0, r3, #7
 800c0ee:	d00b      	beq.n	800c108 <__lo0bits+0x22>
 800c0f0:	07d9      	lsls	r1, r3, #31
 800c0f2:	d421      	bmi.n	800c138 <__lo0bits+0x52>
 800c0f4:	0798      	lsls	r0, r3, #30
 800c0f6:	bf49      	itett	mi
 800c0f8:	085b      	lsrmi	r3, r3, #1
 800c0fa:	089b      	lsrpl	r3, r3, #2
 800c0fc:	2001      	movmi	r0, #1
 800c0fe:	6013      	strmi	r3, [r2, #0]
 800c100:	bf5c      	itt	pl
 800c102:	6013      	strpl	r3, [r2, #0]
 800c104:	2002      	movpl	r0, #2
 800c106:	4770      	bx	lr
 800c108:	b299      	uxth	r1, r3
 800c10a:	b909      	cbnz	r1, 800c110 <__lo0bits+0x2a>
 800c10c:	0c1b      	lsrs	r3, r3, #16
 800c10e:	2010      	movs	r0, #16
 800c110:	b2d9      	uxtb	r1, r3
 800c112:	b909      	cbnz	r1, 800c118 <__lo0bits+0x32>
 800c114:	3008      	adds	r0, #8
 800c116:	0a1b      	lsrs	r3, r3, #8
 800c118:	0719      	lsls	r1, r3, #28
 800c11a:	bf04      	itt	eq
 800c11c:	091b      	lsreq	r3, r3, #4
 800c11e:	3004      	addeq	r0, #4
 800c120:	0799      	lsls	r1, r3, #30
 800c122:	bf04      	itt	eq
 800c124:	089b      	lsreq	r3, r3, #2
 800c126:	3002      	addeq	r0, #2
 800c128:	07d9      	lsls	r1, r3, #31
 800c12a:	d403      	bmi.n	800c134 <__lo0bits+0x4e>
 800c12c:	085b      	lsrs	r3, r3, #1
 800c12e:	f100 0001 	add.w	r0, r0, #1
 800c132:	d003      	beq.n	800c13c <__lo0bits+0x56>
 800c134:	6013      	str	r3, [r2, #0]
 800c136:	4770      	bx	lr
 800c138:	2000      	movs	r0, #0
 800c13a:	4770      	bx	lr
 800c13c:	2020      	movs	r0, #32
 800c13e:	4770      	bx	lr

0800c140 <__i2b>:
 800c140:	b510      	push	{r4, lr}
 800c142:	460c      	mov	r4, r1
 800c144:	2101      	movs	r1, #1
 800c146:	f7ff ff07 	bl	800bf58 <_Balloc>
 800c14a:	4602      	mov	r2, r0
 800c14c:	b928      	cbnz	r0, 800c15a <__i2b+0x1a>
 800c14e:	4b05      	ldr	r3, [pc, #20]	@ (800c164 <__i2b+0x24>)
 800c150:	4805      	ldr	r0, [pc, #20]	@ (800c168 <__i2b+0x28>)
 800c152:	f240 1145 	movw	r1, #325	@ 0x145
 800c156:	f000 fcbd 	bl	800cad4 <__assert_func>
 800c15a:	2301      	movs	r3, #1
 800c15c:	6144      	str	r4, [r0, #20]
 800c15e:	6103      	str	r3, [r0, #16]
 800c160:	bd10      	pop	{r4, pc}
 800c162:	bf00      	nop
 800c164:	0800d5d0 	.word	0x0800d5d0
 800c168:	0800d5e1 	.word	0x0800d5e1

0800c16c <__multiply>:
 800c16c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c170:	4614      	mov	r4, r2
 800c172:	690a      	ldr	r2, [r1, #16]
 800c174:	6923      	ldr	r3, [r4, #16]
 800c176:	429a      	cmp	r2, r3
 800c178:	bfa8      	it	ge
 800c17a:	4623      	movge	r3, r4
 800c17c:	460f      	mov	r7, r1
 800c17e:	bfa4      	itt	ge
 800c180:	460c      	movge	r4, r1
 800c182:	461f      	movge	r7, r3
 800c184:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c188:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c18c:	68a3      	ldr	r3, [r4, #8]
 800c18e:	6861      	ldr	r1, [r4, #4]
 800c190:	eb0a 0609 	add.w	r6, sl, r9
 800c194:	42b3      	cmp	r3, r6
 800c196:	b085      	sub	sp, #20
 800c198:	bfb8      	it	lt
 800c19a:	3101      	addlt	r1, #1
 800c19c:	f7ff fedc 	bl	800bf58 <_Balloc>
 800c1a0:	b930      	cbnz	r0, 800c1b0 <__multiply+0x44>
 800c1a2:	4602      	mov	r2, r0
 800c1a4:	4b44      	ldr	r3, [pc, #272]	@ (800c2b8 <__multiply+0x14c>)
 800c1a6:	4845      	ldr	r0, [pc, #276]	@ (800c2bc <__multiply+0x150>)
 800c1a8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c1ac:	f000 fc92 	bl	800cad4 <__assert_func>
 800c1b0:	f100 0514 	add.w	r5, r0, #20
 800c1b4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c1b8:	462b      	mov	r3, r5
 800c1ba:	2200      	movs	r2, #0
 800c1bc:	4543      	cmp	r3, r8
 800c1be:	d321      	bcc.n	800c204 <__multiply+0x98>
 800c1c0:	f107 0114 	add.w	r1, r7, #20
 800c1c4:	f104 0214 	add.w	r2, r4, #20
 800c1c8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c1cc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c1d0:	9302      	str	r3, [sp, #8]
 800c1d2:	1b13      	subs	r3, r2, r4
 800c1d4:	3b15      	subs	r3, #21
 800c1d6:	f023 0303 	bic.w	r3, r3, #3
 800c1da:	3304      	adds	r3, #4
 800c1dc:	f104 0715 	add.w	r7, r4, #21
 800c1e0:	42ba      	cmp	r2, r7
 800c1e2:	bf38      	it	cc
 800c1e4:	2304      	movcc	r3, #4
 800c1e6:	9301      	str	r3, [sp, #4]
 800c1e8:	9b02      	ldr	r3, [sp, #8]
 800c1ea:	9103      	str	r1, [sp, #12]
 800c1ec:	428b      	cmp	r3, r1
 800c1ee:	d80c      	bhi.n	800c20a <__multiply+0x9e>
 800c1f0:	2e00      	cmp	r6, #0
 800c1f2:	dd03      	ble.n	800c1fc <__multiply+0x90>
 800c1f4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d05b      	beq.n	800c2b4 <__multiply+0x148>
 800c1fc:	6106      	str	r6, [r0, #16]
 800c1fe:	b005      	add	sp, #20
 800c200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c204:	f843 2b04 	str.w	r2, [r3], #4
 800c208:	e7d8      	b.n	800c1bc <__multiply+0x50>
 800c20a:	f8b1 a000 	ldrh.w	sl, [r1]
 800c20e:	f1ba 0f00 	cmp.w	sl, #0
 800c212:	d024      	beq.n	800c25e <__multiply+0xf2>
 800c214:	f104 0e14 	add.w	lr, r4, #20
 800c218:	46a9      	mov	r9, r5
 800c21a:	f04f 0c00 	mov.w	ip, #0
 800c21e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c222:	f8d9 3000 	ldr.w	r3, [r9]
 800c226:	fa1f fb87 	uxth.w	fp, r7
 800c22a:	b29b      	uxth	r3, r3
 800c22c:	fb0a 330b 	mla	r3, sl, fp, r3
 800c230:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c234:	f8d9 7000 	ldr.w	r7, [r9]
 800c238:	4463      	add	r3, ip
 800c23a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c23e:	fb0a c70b 	mla	r7, sl, fp, ip
 800c242:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c246:	b29b      	uxth	r3, r3
 800c248:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c24c:	4572      	cmp	r2, lr
 800c24e:	f849 3b04 	str.w	r3, [r9], #4
 800c252:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c256:	d8e2      	bhi.n	800c21e <__multiply+0xb2>
 800c258:	9b01      	ldr	r3, [sp, #4]
 800c25a:	f845 c003 	str.w	ip, [r5, r3]
 800c25e:	9b03      	ldr	r3, [sp, #12]
 800c260:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c264:	3104      	adds	r1, #4
 800c266:	f1b9 0f00 	cmp.w	r9, #0
 800c26a:	d021      	beq.n	800c2b0 <__multiply+0x144>
 800c26c:	682b      	ldr	r3, [r5, #0]
 800c26e:	f104 0c14 	add.w	ip, r4, #20
 800c272:	46ae      	mov	lr, r5
 800c274:	f04f 0a00 	mov.w	sl, #0
 800c278:	f8bc b000 	ldrh.w	fp, [ip]
 800c27c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c280:	fb09 770b 	mla	r7, r9, fp, r7
 800c284:	4457      	add	r7, sl
 800c286:	b29b      	uxth	r3, r3
 800c288:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c28c:	f84e 3b04 	str.w	r3, [lr], #4
 800c290:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c294:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c298:	f8be 3000 	ldrh.w	r3, [lr]
 800c29c:	fb09 330a 	mla	r3, r9, sl, r3
 800c2a0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c2a4:	4562      	cmp	r2, ip
 800c2a6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c2aa:	d8e5      	bhi.n	800c278 <__multiply+0x10c>
 800c2ac:	9f01      	ldr	r7, [sp, #4]
 800c2ae:	51eb      	str	r3, [r5, r7]
 800c2b0:	3504      	adds	r5, #4
 800c2b2:	e799      	b.n	800c1e8 <__multiply+0x7c>
 800c2b4:	3e01      	subs	r6, #1
 800c2b6:	e79b      	b.n	800c1f0 <__multiply+0x84>
 800c2b8:	0800d5d0 	.word	0x0800d5d0
 800c2bc:	0800d5e1 	.word	0x0800d5e1

0800c2c0 <__pow5mult>:
 800c2c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2c4:	4615      	mov	r5, r2
 800c2c6:	f012 0203 	ands.w	r2, r2, #3
 800c2ca:	4607      	mov	r7, r0
 800c2cc:	460e      	mov	r6, r1
 800c2ce:	d007      	beq.n	800c2e0 <__pow5mult+0x20>
 800c2d0:	4c25      	ldr	r4, [pc, #148]	@ (800c368 <__pow5mult+0xa8>)
 800c2d2:	3a01      	subs	r2, #1
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c2da:	f7ff fe9f 	bl	800c01c <__multadd>
 800c2de:	4606      	mov	r6, r0
 800c2e0:	10ad      	asrs	r5, r5, #2
 800c2e2:	d03d      	beq.n	800c360 <__pow5mult+0xa0>
 800c2e4:	69fc      	ldr	r4, [r7, #28]
 800c2e6:	b97c      	cbnz	r4, 800c308 <__pow5mult+0x48>
 800c2e8:	2010      	movs	r0, #16
 800c2ea:	f7ff fd7f 	bl	800bdec <malloc>
 800c2ee:	4602      	mov	r2, r0
 800c2f0:	61f8      	str	r0, [r7, #28]
 800c2f2:	b928      	cbnz	r0, 800c300 <__pow5mult+0x40>
 800c2f4:	4b1d      	ldr	r3, [pc, #116]	@ (800c36c <__pow5mult+0xac>)
 800c2f6:	481e      	ldr	r0, [pc, #120]	@ (800c370 <__pow5mult+0xb0>)
 800c2f8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c2fc:	f000 fbea 	bl	800cad4 <__assert_func>
 800c300:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c304:	6004      	str	r4, [r0, #0]
 800c306:	60c4      	str	r4, [r0, #12]
 800c308:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c30c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c310:	b94c      	cbnz	r4, 800c326 <__pow5mult+0x66>
 800c312:	f240 2171 	movw	r1, #625	@ 0x271
 800c316:	4638      	mov	r0, r7
 800c318:	f7ff ff12 	bl	800c140 <__i2b>
 800c31c:	2300      	movs	r3, #0
 800c31e:	f8c8 0008 	str.w	r0, [r8, #8]
 800c322:	4604      	mov	r4, r0
 800c324:	6003      	str	r3, [r0, #0]
 800c326:	f04f 0900 	mov.w	r9, #0
 800c32a:	07eb      	lsls	r3, r5, #31
 800c32c:	d50a      	bpl.n	800c344 <__pow5mult+0x84>
 800c32e:	4631      	mov	r1, r6
 800c330:	4622      	mov	r2, r4
 800c332:	4638      	mov	r0, r7
 800c334:	f7ff ff1a 	bl	800c16c <__multiply>
 800c338:	4631      	mov	r1, r6
 800c33a:	4680      	mov	r8, r0
 800c33c:	4638      	mov	r0, r7
 800c33e:	f7ff fe4b 	bl	800bfd8 <_Bfree>
 800c342:	4646      	mov	r6, r8
 800c344:	106d      	asrs	r5, r5, #1
 800c346:	d00b      	beq.n	800c360 <__pow5mult+0xa0>
 800c348:	6820      	ldr	r0, [r4, #0]
 800c34a:	b938      	cbnz	r0, 800c35c <__pow5mult+0x9c>
 800c34c:	4622      	mov	r2, r4
 800c34e:	4621      	mov	r1, r4
 800c350:	4638      	mov	r0, r7
 800c352:	f7ff ff0b 	bl	800c16c <__multiply>
 800c356:	6020      	str	r0, [r4, #0]
 800c358:	f8c0 9000 	str.w	r9, [r0]
 800c35c:	4604      	mov	r4, r0
 800c35e:	e7e4      	b.n	800c32a <__pow5mult+0x6a>
 800c360:	4630      	mov	r0, r6
 800c362:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c366:	bf00      	nop
 800c368:	0800d63c 	.word	0x0800d63c
 800c36c:	0800d561 	.word	0x0800d561
 800c370:	0800d5e1 	.word	0x0800d5e1

0800c374 <__lshift>:
 800c374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c378:	460c      	mov	r4, r1
 800c37a:	6849      	ldr	r1, [r1, #4]
 800c37c:	6923      	ldr	r3, [r4, #16]
 800c37e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c382:	68a3      	ldr	r3, [r4, #8]
 800c384:	4607      	mov	r7, r0
 800c386:	4691      	mov	r9, r2
 800c388:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c38c:	f108 0601 	add.w	r6, r8, #1
 800c390:	42b3      	cmp	r3, r6
 800c392:	db0b      	blt.n	800c3ac <__lshift+0x38>
 800c394:	4638      	mov	r0, r7
 800c396:	f7ff fddf 	bl	800bf58 <_Balloc>
 800c39a:	4605      	mov	r5, r0
 800c39c:	b948      	cbnz	r0, 800c3b2 <__lshift+0x3e>
 800c39e:	4602      	mov	r2, r0
 800c3a0:	4b28      	ldr	r3, [pc, #160]	@ (800c444 <__lshift+0xd0>)
 800c3a2:	4829      	ldr	r0, [pc, #164]	@ (800c448 <__lshift+0xd4>)
 800c3a4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c3a8:	f000 fb94 	bl	800cad4 <__assert_func>
 800c3ac:	3101      	adds	r1, #1
 800c3ae:	005b      	lsls	r3, r3, #1
 800c3b0:	e7ee      	b.n	800c390 <__lshift+0x1c>
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	f100 0114 	add.w	r1, r0, #20
 800c3b8:	f100 0210 	add.w	r2, r0, #16
 800c3bc:	4618      	mov	r0, r3
 800c3be:	4553      	cmp	r3, sl
 800c3c0:	db33      	blt.n	800c42a <__lshift+0xb6>
 800c3c2:	6920      	ldr	r0, [r4, #16]
 800c3c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c3c8:	f104 0314 	add.w	r3, r4, #20
 800c3cc:	f019 091f 	ands.w	r9, r9, #31
 800c3d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c3d4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c3d8:	d02b      	beq.n	800c432 <__lshift+0xbe>
 800c3da:	f1c9 0e20 	rsb	lr, r9, #32
 800c3de:	468a      	mov	sl, r1
 800c3e0:	2200      	movs	r2, #0
 800c3e2:	6818      	ldr	r0, [r3, #0]
 800c3e4:	fa00 f009 	lsl.w	r0, r0, r9
 800c3e8:	4310      	orrs	r0, r2
 800c3ea:	f84a 0b04 	str.w	r0, [sl], #4
 800c3ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800c3f2:	459c      	cmp	ip, r3
 800c3f4:	fa22 f20e 	lsr.w	r2, r2, lr
 800c3f8:	d8f3      	bhi.n	800c3e2 <__lshift+0x6e>
 800c3fa:	ebac 0304 	sub.w	r3, ip, r4
 800c3fe:	3b15      	subs	r3, #21
 800c400:	f023 0303 	bic.w	r3, r3, #3
 800c404:	3304      	adds	r3, #4
 800c406:	f104 0015 	add.w	r0, r4, #21
 800c40a:	4584      	cmp	ip, r0
 800c40c:	bf38      	it	cc
 800c40e:	2304      	movcc	r3, #4
 800c410:	50ca      	str	r2, [r1, r3]
 800c412:	b10a      	cbz	r2, 800c418 <__lshift+0xa4>
 800c414:	f108 0602 	add.w	r6, r8, #2
 800c418:	3e01      	subs	r6, #1
 800c41a:	4638      	mov	r0, r7
 800c41c:	612e      	str	r6, [r5, #16]
 800c41e:	4621      	mov	r1, r4
 800c420:	f7ff fdda 	bl	800bfd8 <_Bfree>
 800c424:	4628      	mov	r0, r5
 800c426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c42a:	f842 0f04 	str.w	r0, [r2, #4]!
 800c42e:	3301      	adds	r3, #1
 800c430:	e7c5      	b.n	800c3be <__lshift+0x4a>
 800c432:	3904      	subs	r1, #4
 800c434:	f853 2b04 	ldr.w	r2, [r3], #4
 800c438:	f841 2f04 	str.w	r2, [r1, #4]!
 800c43c:	459c      	cmp	ip, r3
 800c43e:	d8f9      	bhi.n	800c434 <__lshift+0xc0>
 800c440:	e7ea      	b.n	800c418 <__lshift+0xa4>
 800c442:	bf00      	nop
 800c444:	0800d5d0 	.word	0x0800d5d0
 800c448:	0800d5e1 	.word	0x0800d5e1

0800c44c <__mcmp>:
 800c44c:	690a      	ldr	r2, [r1, #16]
 800c44e:	4603      	mov	r3, r0
 800c450:	6900      	ldr	r0, [r0, #16]
 800c452:	1a80      	subs	r0, r0, r2
 800c454:	b530      	push	{r4, r5, lr}
 800c456:	d10e      	bne.n	800c476 <__mcmp+0x2a>
 800c458:	3314      	adds	r3, #20
 800c45a:	3114      	adds	r1, #20
 800c45c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c460:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c464:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c468:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c46c:	4295      	cmp	r5, r2
 800c46e:	d003      	beq.n	800c478 <__mcmp+0x2c>
 800c470:	d205      	bcs.n	800c47e <__mcmp+0x32>
 800c472:	f04f 30ff 	mov.w	r0, #4294967295
 800c476:	bd30      	pop	{r4, r5, pc}
 800c478:	42a3      	cmp	r3, r4
 800c47a:	d3f3      	bcc.n	800c464 <__mcmp+0x18>
 800c47c:	e7fb      	b.n	800c476 <__mcmp+0x2a>
 800c47e:	2001      	movs	r0, #1
 800c480:	e7f9      	b.n	800c476 <__mcmp+0x2a>
	...

0800c484 <__mdiff>:
 800c484:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c488:	4689      	mov	r9, r1
 800c48a:	4606      	mov	r6, r0
 800c48c:	4611      	mov	r1, r2
 800c48e:	4648      	mov	r0, r9
 800c490:	4614      	mov	r4, r2
 800c492:	f7ff ffdb 	bl	800c44c <__mcmp>
 800c496:	1e05      	subs	r5, r0, #0
 800c498:	d112      	bne.n	800c4c0 <__mdiff+0x3c>
 800c49a:	4629      	mov	r1, r5
 800c49c:	4630      	mov	r0, r6
 800c49e:	f7ff fd5b 	bl	800bf58 <_Balloc>
 800c4a2:	4602      	mov	r2, r0
 800c4a4:	b928      	cbnz	r0, 800c4b2 <__mdiff+0x2e>
 800c4a6:	4b3f      	ldr	r3, [pc, #252]	@ (800c5a4 <__mdiff+0x120>)
 800c4a8:	f240 2137 	movw	r1, #567	@ 0x237
 800c4ac:	483e      	ldr	r0, [pc, #248]	@ (800c5a8 <__mdiff+0x124>)
 800c4ae:	f000 fb11 	bl	800cad4 <__assert_func>
 800c4b2:	2301      	movs	r3, #1
 800c4b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c4b8:	4610      	mov	r0, r2
 800c4ba:	b003      	add	sp, #12
 800c4bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4c0:	bfbc      	itt	lt
 800c4c2:	464b      	movlt	r3, r9
 800c4c4:	46a1      	movlt	r9, r4
 800c4c6:	4630      	mov	r0, r6
 800c4c8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c4cc:	bfba      	itte	lt
 800c4ce:	461c      	movlt	r4, r3
 800c4d0:	2501      	movlt	r5, #1
 800c4d2:	2500      	movge	r5, #0
 800c4d4:	f7ff fd40 	bl	800bf58 <_Balloc>
 800c4d8:	4602      	mov	r2, r0
 800c4da:	b918      	cbnz	r0, 800c4e4 <__mdiff+0x60>
 800c4dc:	4b31      	ldr	r3, [pc, #196]	@ (800c5a4 <__mdiff+0x120>)
 800c4de:	f240 2145 	movw	r1, #581	@ 0x245
 800c4e2:	e7e3      	b.n	800c4ac <__mdiff+0x28>
 800c4e4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c4e8:	6926      	ldr	r6, [r4, #16]
 800c4ea:	60c5      	str	r5, [r0, #12]
 800c4ec:	f109 0310 	add.w	r3, r9, #16
 800c4f0:	f109 0514 	add.w	r5, r9, #20
 800c4f4:	f104 0e14 	add.w	lr, r4, #20
 800c4f8:	f100 0b14 	add.w	fp, r0, #20
 800c4fc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c500:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c504:	9301      	str	r3, [sp, #4]
 800c506:	46d9      	mov	r9, fp
 800c508:	f04f 0c00 	mov.w	ip, #0
 800c50c:	9b01      	ldr	r3, [sp, #4]
 800c50e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c512:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c516:	9301      	str	r3, [sp, #4]
 800c518:	fa1f f38a 	uxth.w	r3, sl
 800c51c:	4619      	mov	r1, r3
 800c51e:	b283      	uxth	r3, r0
 800c520:	1acb      	subs	r3, r1, r3
 800c522:	0c00      	lsrs	r0, r0, #16
 800c524:	4463      	add	r3, ip
 800c526:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c52a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c52e:	b29b      	uxth	r3, r3
 800c530:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c534:	4576      	cmp	r6, lr
 800c536:	f849 3b04 	str.w	r3, [r9], #4
 800c53a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c53e:	d8e5      	bhi.n	800c50c <__mdiff+0x88>
 800c540:	1b33      	subs	r3, r6, r4
 800c542:	3b15      	subs	r3, #21
 800c544:	f023 0303 	bic.w	r3, r3, #3
 800c548:	3415      	adds	r4, #21
 800c54a:	3304      	adds	r3, #4
 800c54c:	42a6      	cmp	r6, r4
 800c54e:	bf38      	it	cc
 800c550:	2304      	movcc	r3, #4
 800c552:	441d      	add	r5, r3
 800c554:	445b      	add	r3, fp
 800c556:	461e      	mov	r6, r3
 800c558:	462c      	mov	r4, r5
 800c55a:	4544      	cmp	r4, r8
 800c55c:	d30e      	bcc.n	800c57c <__mdiff+0xf8>
 800c55e:	f108 0103 	add.w	r1, r8, #3
 800c562:	1b49      	subs	r1, r1, r5
 800c564:	f021 0103 	bic.w	r1, r1, #3
 800c568:	3d03      	subs	r5, #3
 800c56a:	45a8      	cmp	r8, r5
 800c56c:	bf38      	it	cc
 800c56e:	2100      	movcc	r1, #0
 800c570:	440b      	add	r3, r1
 800c572:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c576:	b191      	cbz	r1, 800c59e <__mdiff+0x11a>
 800c578:	6117      	str	r7, [r2, #16]
 800c57a:	e79d      	b.n	800c4b8 <__mdiff+0x34>
 800c57c:	f854 1b04 	ldr.w	r1, [r4], #4
 800c580:	46e6      	mov	lr, ip
 800c582:	0c08      	lsrs	r0, r1, #16
 800c584:	fa1c fc81 	uxtah	ip, ip, r1
 800c588:	4471      	add	r1, lr
 800c58a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c58e:	b289      	uxth	r1, r1
 800c590:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c594:	f846 1b04 	str.w	r1, [r6], #4
 800c598:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c59c:	e7dd      	b.n	800c55a <__mdiff+0xd6>
 800c59e:	3f01      	subs	r7, #1
 800c5a0:	e7e7      	b.n	800c572 <__mdiff+0xee>
 800c5a2:	bf00      	nop
 800c5a4:	0800d5d0 	.word	0x0800d5d0
 800c5a8:	0800d5e1 	.word	0x0800d5e1

0800c5ac <__d2b>:
 800c5ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c5b0:	460f      	mov	r7, r1
 800c5b2:	2101      	movs	r1, #1
 800c5b4:	ec59 8b10 	vmov	r8, r9, d0
 800c5b8:	4616      	mov	r6, r2
 800c5ba:	f7ff fccd 	bl	800bf58 <_Balloc>
 800c5be:	4604      	mov	r4, r0
 800c5c0:	b930      	cbnz	r0, 800c5d0 <__d2b+0x24>
 800c5c2:	4602      	mov	r2, r0
 800c5c4:	4b23      	ldr	r3, [pc, #140]	@ (800c654 <__d2b+0xa8>)
 800c5c6:	4824      	ldr	r0, [pc, #144]	@ (800c658 <__d2b+0xac>)
 800c5c8:	f240 310f 	movw	r1, #783	@ 0x30f
 800c5cc:	f000 fa82 	bl	800cad4 <__assert_func>
 800c5d0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c5d4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c5d8:	b10d      	cbz	r5, 800c5de <__d2b+0x32>
 800c5da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c5de:	9301      	str	r3, [sp, #4]
 800c5e0:	f1b8 0300 	subs.w	r3, r8, #0
 800c5e4:	d023      	beq.n	800c62e <__d2b+0x82>
 800c5e6:	4668      	mov	r0, sp
 800c5e8:	9300      	str	r3, [sp, #0]
 800c5ea:	f7ff fd7c 	bl	800c0e6 <__lo0bits>
 800c5ee:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c5f2:	b1d0      	cbz	r0, 800c62a <__d2b+0x7e>
 800c5f4:	f1c0 0320 	rsb	r3, r0, #32
 800c5f8:	fa02 f303 	lsl.w	r3, r2, r3
 800c5fc:	430b      	orrs	r3, r1
 800c5fe:	40c2      	lsrs	r2, r0
 800c600:	6163      	str	r3, [r4, #20]
 800c602:	9201      	str	r2, [sp, #4]
 800c604:	9b01      	ldr	r3, [sp, #4]
 800c606:	61a3      	str	r3, [r4, #24]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	bf0c      	ite	eq
 800c60c:	2201      	moveq	r2, #1
 800c60e:	2202      	movne	r2, #2
 800c610:	6122      	str	r2, [r4, #16]
 800c612:	b1a5      	cbz	r5, 800c63e <__d2b+0x92>
 800c614:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c618:	4405      	add	r5, r0
 800c61a:	603d      	str	r5, [r7, #0]
 800c61c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c620:	6030      	str	r0, [r6, #0]
 800c622:	4620      	mov	r0, r4
 800c624:	b003      	add	sp, #12
 800c626:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c62a:	6161      	str	r1, [r4, #20]
 800c62c:	e7ea      	b.n	800c604 <__d2b+0x58>
 800c62e:	a801      	add	r0, sp, #4
 800c630:	f7ff fd59 	bl	800c0e6 <__lo0bits>
 800c634:	9b01      	ldr	r3, [sp, #4]
 800c636:	6163      	str	r3, [r4, #20]
 800c638:	3020      	adds	r0, #32
 800c63a:	2201      	movs	r2, #1
 800c63c:	e7e8      	b.n	800c610 <__d2b+0x64>
 800c63e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c642:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c646:	6038      	str	r0, [r7, #0]
 800c648:	6918      	ldr	r0, [r3, #16]
 800c64a:	f7ff fd2d 	bl	800c0a8 <__hi0bits>
 800c64e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c652:	e7e5      	b.n	800c620 <__d2b+0x74>
 800c654:	0800d5d0 	.word	0x0800d5d0
 800c658:	0800d5e1 	.word	0x0800d5e1

0800c65c <__ssputs_r>:
 800c65c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c660:	688e      	ldr	r6, [r1, #8]
 800c662:	461f      	mov	r7, r3
 800c664:	42be      	cmp	r6, r7
 800c666:	680b      	ldr	r3, [r1, #0]
 800c668:	4682      	mov	sl, r0
 800c66a:	460c      	mov	r4, r1
 800c66c:	4690      	mov	r8, r2
 800c66e:	d82d      	bhi.n	800c6cc <__ssputs_r+0x70>
 800c670:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c674:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c678:	d026      	beq.n	800c6c8 <__ssputs_r+0x6c>
 800c67a:	6965      	ldr	r5, [r4, #20]
 800c67c:	6909      	ldr	r1, [r1, #16]
 800c67e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c682:	eba3 0901 	sub.w	r9, r3, r1
 800c686:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c68a:	1c7b      	adds	r3, r7, #1
 800c68c:	444b      	add	r3, r9
 800c68e:	106d      	asrs	r5, r5, #1
 800c690:	429d      	cmp	r5, r3
 800c692:	bf38      	it	cc
 800c694:	461d      	movcc	r5, r3
 800c696:	0553      	lsls	r3, r2, #21
 800c698:	d527      	bpl.n	800c6ea <__ssputs_r+0x8e>
 800c69a:	4629      	mov	r1, r5
 800c69c:	f7ff fbd0 	bl	800be40 <_malloc_r>
 800c6a0:	4606      	mov	r6, r0
 800c6a2:	b360      	cbz	r0, 800c6fe <__ssputs_r+0xa2>
 800c6a4:	6921      	ldr	r1, [r4, #16]
 800c6a6:	464a      	mov	r2, r9
 800c6a8:	f000 fa06 	bl	800cab8 <memcpy>
 800c6ac:	89a3      	ldrh	r3, [r4, #12]
 800c6ae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c6b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c6b6:	81a3      	strh	r3, [r4, #12]
 800c6b8:	6126      	str	r6, [r4, #16]
 800c6ba:	6165      	str	r5, [r4, #20]
 800c6bc:	444e      	add	r6, r9
 800c6be:	eba5 0509 	sub.w	r5, r5, r9
 800c6c2:	6026      	str	r6, [r4, #0]
 800c6c4:	60a5      	str	r5, [r4, #8]
 800c6c6:	463e      	mov	r6, r7
 800c6c8:	42be      	cmp	r6, r7
 800c6ca:	d900      	bls.n	800c6ce <__ssputs_r+0x72>
 800c6cc:	463e      	mov	r6, r7
 800c6ce:	6820      	ldr	r0, [r4, #0]
 800c6d0:	4632      	mov	r2, r6
 800c6d2:	4641      	mov	r1, r8
 800c6d4:	f000 f9c6 	bl	800ca64 <memmove>
 800c6d8:	68a3      	ldr	r3, [r4, #8]
 800c6da:	1b9b      	subs	r3, r3, r6
 800c6dc:	60a3      	str	r3, [r4, #8]
 800c6de:	6823      	ldr	r3, [r4, #0]
 800c6e0:	4433      	add	r3, r6
 800c6e2:	6023      	str	r3, [r4, #0]
 800c6e4:	2000      	movs	r0, #0
 800c6e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6ea:	462a      	mov	r2, r5
 800c6ec:	f000 fa36 	bl	800cb5c <_realloc_r>
 800c6f0:	4606      	mov	r6, r0
 800c6f2:	2800      	cmp	r0, #0
 800c6f4:	d1e0      	bne.n	800c6b8 <__ssputs_r+0x5c>
 800c6f6:	6921      	ldr	r1, [r4, #16]
 800c6f8:	4650      	mov	r0, sl
 800c6fa:	f7ff fb2d 	bl	800bd58 <_free_r>
 800c6fe:	230c      	movs	r3, #12
 800c700:	f8ca 3000 	str.w	r3, [sl]
 800c704:	89a3      	ldrh	r3, [r4, #12]
 800c706:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c70a:	81a3      	strh	r3, [r4, #12]
 800c70c:	f04f 30ff 	mov.w	r0, #4294967295
 800c710:	e7e9      	b.n	800c6e6 <__ssputs_r+0x8a>
	...

0800c714 <_svfiprintf_r>:
 800c714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c718:	4698      	mov	r8, r3
 800c71a:	898b      	ldrh	r3, [r1, #12]
 800c71c:	061b      	lsls	r3, r3, #24
 800c71e:	b09d      	sub	sp, #116	@ 0x74
 800c720:	4607      	mov	r7, r0
 800c722:	460d      	mov	r5, r1
 800c724:	4614      	mov	r4, r2
 800c726:	d510      	bpl.n	800c74a <_svfiprintf_r+0x36>
 800c728:	690b      	ldr	r3, [r1, #16]
 800c72a:	b973      	cbnz	r3, 800c74a <_svfiprintf_r+0x36>
 800c72c:	2140      	movs	r1, #64	@ 0x40
 800c72e:	f7ff fb87 	bl	800be40 <_malloc_r>
 800c732:	6028      	str	r0, [r5, #0]
 800c734:	6128      	str	r0, [r5, #16]
 800c736:	b930      	cbnz	r0, 800c746 <_svfiprintf_r+0x32>
 800c738:	230c      	movs	r3, #12
 800c73a:	603b      	str	r3, [r7, #0]
 800c73c:	f04f 30ff 	mov.w	r0, #4294967295
 800c740:	b01d      	add	sp, #116	@ 0x74
 800c742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c746:	2340      	movs	r3, #64	@ 0x40
 800c748:	616b      	str	r3, [r5, #20]
 800c74a:	2300      	movs	r3, #0
 800c74c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c74e:	2320      	movs	r3, #32
 800c750:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c754:	f8cd 800c 	str.w	r8, [sp, #12]
 800c758:	2330      	movs	r3, #48	@ 0x30
 800c75a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c8f8 <_svfiprintf_r+0x1e4>
 800c75e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c762:	f04f 0901 	mov.w	r9, #1
 800c766:	4623      	mov	r3, r4
 800c768:	469a      	mov	sl, r3
 800c76a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c76e:	b10a      	cbz	r2, 800c774 <_svfiprintf_r+0x60>
 800c770:	2a25      	cmp	r2, #37	@ 0x25
 800c772:	d1f9      	bne.n	800c768 <_svfiprintf_r+0x54>
 800c774:	ebba 0b04 	subs.w	fp, sl, r4
 800c778:	d00b      	beq.n	800c792 <_svfiprintf_r+0x7e>
 800c77a:	465b      	mov	r3, fp
 800c77c:	4622      	mov	r2, r4
 800c77e:	4629      	mov	r1, r5
 800c780:	4638      	mov	r0, r7
 800c782:	f7ff ff6b 	bl	800c65c <__ssputs_r>
 800c786:	3001      	adds	r0, #1
 800c788:	f000 80a7 	beq.w	800c8da <_svfiprintf_r+0x1c6>
 800c78c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c78e:	445a      	add	r2, fp
 800c790:	9209      	str	r2, [sp, #36]	@ 0x24
 800c792:	f89a 3000 	ldrb.w	r3, [sl]
 800c796:	2b00      	cmp	r3, #0
 800c798:	f000 809f 	beq.w	800c8da <_svfiprintf_r+0x1c6>
 800c79c:	2300      	movs	r3, #0
 800c79e:	f04f 32ff 	mov.w	r2, #4294967295
 800c7a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c7a6:	f10a 0a01 	add.w	sl, sl, #1
 800c7aa:	9304      	str	r3, [sp, #16]
 800c7ac:	9307      	str	r3, [sp, #28]
 800c7ae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c7b2:	931a      	str	r3, [sp, #104]	@ 0x68
 800c7b4:	4654      	mov	r4, sl
 800c7b6:	2205      	movs	r2, #5
 800c7b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7bc:	484e      	ldr	r0, [pc, #312]	@ (800c8f8 <_svfiprintf_r+0x1e4>)
 800c7be:	f7f3 fd07 	bl	80001d0 <memchr>
 800c7c2:	9a04      	ldr	r2, [sp, #16]
 800c7c4:	b9d8      	cbnz	r0, 800c7fe <_svfiprintf_r+0xea>
 800c7c6:	06d0      	lsls	r0, r2, #27
 800c7c8:	bf44      	itt	mi
 800c7ca:	2320      	movmi	r3, #32
 800c7cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c7d0:	0711      	lsls	r1, r2, #28
 800c7d2:	bf44      	itt	mi
 800c7d4:	232b      	movmi	r3, #43	@ 0x2b
 800c7d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c7da:	f89a 3000 	ldrb.w	r3, [sl]
 800c7de:	2b2a      	cmp	r3, #42	@ 0x2a
 800c7e0:	d015      	beq.n	800c80e <_svfiprintf_r+0xfa>
 800c7e2:	9a07      	ldr	r2, [sp, #28]
 800c7e4:	4654      	mov	r4, sl
 800c7e6:	2000      	movs	r0, #0
 800c7e8:	f04f 0c0a 	mov.w	ip, #10
 800c7ec:	4621      	mov	r1, r4
 800c7ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c7f2:	3b30      	subs	r3, #48	@ 0x30
 800c7f4:	2b09      	cmp	r3, #9
 800c7f6:	d94b      	bls.n	800c890 <_svfiprintf_r+0x17c>
 800c7f8:	b1b0      	cbz	r0, 800c828 <_svfiprintf_r+0x114>
 800c7fa:	9207      	str	r2, [sp, #28]
 800c7fc:	e014      	b.n	800c828 <_svfiprintf_r+0x114>
 800c7fe:	eba0 0308 	sub.w	r3, r0, r8
 800c802:	fa09 f303 	lsl.w	r3, r9, r3
 800c806:	4313      	orrs	r3, r2
 800c808:	9304      	str	r3, [sp, #16]
 800c80a:	46a2      	mov	sl, r4
 800c80c:	e7d2      	b.n	800c7b4 <_svfiprintf_r+0xa0>
 800c80e:	9b03      	ldr	r3, [sp, #12]
 800c810:	1d19      	adds	r1, r3, #4
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	9103      	str	r1, [sp, #12]
 800c816:	2b00      	cmp	r3, #0
 800c818:	bfbb      	ittet	lt
 800c81a:	425b      	neglt	r3, r3
 800c81c:	f042 0202 	orrlt.w	r2, r2, #2
 800c820:	9307      	strge	r3, [sp, #28]
 800c822:	9307      	strlt	r3, [sp, #28]
 800c824:	bfb8      	it	lt
 800c826:	9204      	strlt	r2, [sp, #16]
 800c828:	7823      	ldrb	r3, [r4, #0]
 800c82a:	2b2e      	cmp	r3, #46	@ 0x2e
 800c82c:	d10a      	bne.n	800c844 <_svfiprintf_r+0x130>
 800c82e:	7863      	ldrb	r3, [r4, #1]
 800c830:	2b2a      	cmp	r3, #42	@ 0x2a
 800c832:	d132      	bne.n	800c89a <_svfiprintf_r+0x186>
 800c834:	9b03      	ldr	r3, [sp, #12]
 800c836:	1d1a      	adds	r2, r3, #4
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	9203      	str	r2, [sp, #12]
 800c83c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c840:	3402      	adds	r4, #2
 800c842:	9305      	str	r3, [sp, #20]
 800c844:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c908 <_svfiprintf_r+0x1f4>
 800c848:	7821      	ldrb	r1, [r4, #0]
 800c84a:	2203      	movs	r2, #3
 800c84c:	4650      	mov	r0, sl
 800c84e:	f7f3 fcbf 	bl	80001d0 <memchr>
 800c852:	b138      	cbz	r0, 800c864 <_svfiprintf_r+0x150>
 800c854:	9b04      	ldr	r3, [sp, #16]
 800c856:	eba0 000a 	sub.w	r0, r0, sl
 800c85a:	2240      	movs	r2, #64	@ 0x40
 800c85c:	4082      	lsls	r2, r0
 800c85e:	4313      	orrs	r3, r2
 800c860:	3401      	adds	r4, #1
 800c862:	9304      	str	r3, [sp, #16]
 800c864:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c868:	4824      	ldr	r0, [pc, #144]	@ (800c8fc <_svfiprintf_r+0x1e8>)
 800c86a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c86e:	2206      	movs	r2, #6
 800c870:	f7f3 fcae 	bl	80001d0 <memchr>
 800c874:	2800      	cmp	r0, #0
 800c876:	d036      	beq.n	800c8e6 <_svfiprintf_r+0x1d2>
 800c878:	4b21      	ldr	r3, [pc, #132]	@ (800c900 <_svfiprintf_r+0x1ec>)
 800c87a:	bb1b      	cbnz	r3, 800c8c4 <_svfiprintf_r+0x1b0>
 800c87c:	9b03      	ldr	r3, [sp, #12]
 800c87e:	3307      	adds	r3, #7
 800c880:	f023 0307 	bic.w	r3, r3, #7
 800c884:	3308      	adds	r3, #8
 800c886:	9303      	str	r3, [sp, #12]
 800c888:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c88a:	4433      	add	r3, r6
 800c88c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c88e:	e76a      	b.n	800c766 <_svfiprintf_r+0x52>
 800c890:	fb0c 3202 	mla	r2, ip, r2, r3
 800c894:	460c      	mov	r4, r1
 800c896:	2001      	movs	r0, #1
 800c898:	e7a8      	b.n	800c7ec <_svfiprintf_r+0xd8>
 800c89a:	2300      	movs	r3, #0
 800c89c:	3401      	adds	r4, #1
 800c89e:	9305      	str	r3, [sp, #20]
 800c8a0:	4619      	mov	r1, r3
 800c8a2:	f04f 0c0a 	mov.w	ip, #10
 800c8a6:	4620      	mov	r0, r4
 800c8a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c8ac:	3a30      	subs	r2, #48	@ 0x30
 800c8ae:	2a09      	cmp	r2, #9
 800c8b0:	d903      	bls.n	800c8ba <_svfiprintf_r+0x1a6>
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d0c6      	beq.n	800c844 <_svfiprintf_r+0x130>
 800c8b6:	9105      	str	r1, [sp, #20]
 800c8b8:	e7c4      	b.n	800c844 <_svfiprintf_r+0x130>
 800c8ba:	fb0c 2101 	mla	r1, ip, r1, r2
 800c8be:	4604      	mov	r4, r0
 800c8c0:	2301      	movs	r3, #1
 800c8c2:	e7f0      	b.n	800c8a6 <_svfiprintf_r+0x192>
 800c8c4:	ab03      	add	r3, sp, #12
 800c8c6:	9300      	str	r3, [sp, #0]
 800c8c8:	462a      	mov	r2, r5
 800c8ca:	4b0e      	ldr	r3, [pc, #56]	@ (800c904 <_svfiprintf_r+0x1f0>)
 800c8cc:	a904      	add	r1, sp, #16
 800c8ce:	4638      	mov	r0, r7
 800c8d0:	f7fd fe98 	bl	800a604 <_printf_float>
 800c8d4:	1c42      	adds	r2, r0, #1
 800c8d6:	4606      	mov	r6, r0
 800c8d8:	d1d6      	bne.n	800c888 <_svfiprintf_r+0x174>
 800c8da:	89ab      	ldrh	r3, [r5, #12]
 800c8dc:	065b      	lsls	r3, r3, #25
 800c8de:	f53f af2d 	bmi.w	800c73c <_svfiprintf_r+0x28>
 800c8e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c8e4:	e72c      	b.n	800c740 <_svfiprintf_r+0x2c>
 800c8e6:	ab03      	add	r3, sp, #12
 800c8e8:	9300      	str	r3, [sp, #0]
 800c8ea:	462a      	mov	r2, r5
 800c8ec:	4b05      	ldr	r3, [pc, #20]	@ (800c904 <_svfiprintf_r+0x1f0>)
 800c8ee:	a904      	add	r1, sp, #16
 800c8f0:	4638      	mov	r0, r7
 800c8f2:	f7fe f91f 	bl	800ab34 <_printf_i>
 800c8f6:	e7ed      	b.n	800c8d4 <_svfiprintf_r+0x1c0>
 800c8f8:	0800d738 	.word	0x0800d738
 800c8fc:	0800d742 	.word	0x0800d742
 800c900:	0800a605 	.word	0x0800a605
 800c904:	0800c65d 	.word	0x0800c65d
 800c908:	0800d73e 	.word	0x0800d73e

0800c90c <__sflush_r>:
 800c90c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c914:	0716      	lsls	r6, r2, #28
 800c916:	4605      	mov	r5, r0
 800c918:	460c      	mov	r4, r1
 800c91a:	d454      	bmi.n	800c9c6 <__sflush_r+0xba>
 800c91c:	684b      	ldr	r3, [r1, #4]
 800c91e:	2b00      	cmp	r3, #0
 800c920:	dc02      	bgt.n	800c928 <__sflush_r+0x1c>
 800c922:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c924:	2b00      	cmp	r3, #0
 800c926:	dd48      	ble.n	800c9ba <__sflush_r+0xae>
 800c928:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c92a:	2e00      	cmp	r6, #0
 800c92c:	d045      	beq.n	800c9ba <__sflush_r+0xae>
 800c92e:	2300      	movs	r3, #0
 800c930:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c934:	682f      	ldr	r7, [r5, #0]
 800c936:	6a21      	ldr	r1, [r4, #32]
 800c938:	602b      	str	r3, [r5, #0]
 800c93a:	d030      	beq.n	800c99e <__sflush_r+0x92>
 800c93c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c93e:	89a3      	ldrh	r3, [r4, #12]
 800c940:	0759      	lsls	r1, r3, #29
 800c942:	d505      	bpl.n	800c950 <__sflush_r+0x44>
 800c944:	6863      	ldr	r3, [r4, #4]
 800c946:	1ad2      	subs	r2, r2, r3
 800c948:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c94a:	b10b      	cbz	r3, 800c950 <__sflush_r+0x44>
 800c94c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c94e:	1ad2      	subs	r2, r2, r3
 800c950:	2300      	movs	r3, #0
 800c952:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c954:	6a21      	ldr	r1, [r4, #32]
 800c956:	4628      	mov	r0, r5
 800c958:	47b0      	blx	r6
 800c95a:	1c43      	adds	r3, r0, #1
 800c95c:	89a3      	ldrh	r3, [r4, #12]
 800c95e:	d106      	bne.n	800c96e <__sflush_r+0x62>
 800c960:	6829      	ldr	r1, [r5, #0]
 800c962:	291d      	cmp	r1, #29
 800c964:	d82b      	bhi.n	800c9be <__sflush_r+0xb2>
 800c966:	4a2a      	ldr	r2, [pc, #168]	@ (800ca10 <__sflush_r+0x104>)
 800c968:	410a      	asrs	r2, r1
 800c96a:	07d6      	lsls	r6, r2, #31
 800c96c:	d427      	bmi.n	800c9be <__sflush_r+0xb2>
 800c96e:	2200      	movs	r2, #0
 800c970:	6062      	str	r2, [r4, #4]
 800c972:	04d9      	lsls	r1, r3, #19
 800c974:	6922      	ldr	r2, [r4, #16]
 800c976:	6022      	str	r2, [r4, #0]
 800c978:	d504      	bpl.n	800c984 <__sflush_r+0x78>
 800c97a:	1c42      	adds	r2, r0, #1
 800c97c:	d101      	bne.n	800c982 <__sflush_r+0x76>
 800c97e:	682b      	ldr	r3, [r5, #0]
 800c980:	b903      	cbnz	r3, 800c984 <__sflush_r+0x78>
 800c982:	6560      	str	r0, [r4, #84]	@ 0x54
 800c984:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c986:	602f      	str	r7, [r5, #0]
 800c988:	b1b9      	cbz	r1, 800c9ba <__sflush_r+0xae>
 800c98a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c98e:	4299      	cmp	r1, r3
 800c990:	d002      	beq.n	800c998 <__sflush_r+0x8c>
 800c992:	4628      	mov	r0, r5
 800c994:	f7ff f9e0 	bl	800bd58 <_free_r>
 800c998:	2300      	movs	r3, #0
 800c99a:	6363      	str	r3, [r4, #52]	@ 0x34
 800c99c:	e00d      	b.n	800c9ba <__sflush_r+0xae>
 800c99e:	2301      	movs	r3, #1
 800c9a0:	4628      	mov	r0, r5
 800c9a2:	47b0      	blx	r6
 800c9a4:	4602      	mov	r2, r0
 800c9a6:	1c50      	adds	r0, r2, #1
 800c9a8:	d1c9      	bne.n	800c93e <__sflush_r+0x32>
 800c9aa:	682b      	ldr	r3, [r5, #0]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d0c6      	beq.n	800c93e <__sflush_r+0x32>
 800c9b0:	2b1d      	cmp	r3, #29
 800c9b2:	d001      	beq.n	800c9b8 <__sflush_r+0xac>
 800c9b4:	2b16      	cmp	r3, #22
 800c9b6:	d11e      	bne.n	800c9f6 <__sflush_r+0xea>
 800c9b8:	602f      	str	r7, [r5, #0]
 800c9ba:	2000      	movs	r0, #0
 800c9bc:	e022      	b.n	800ca04 <__sflush_r+0xf8>
 800c9be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c9c2:	b21b      	sxth	r3, r3
 800c9c4:	e01b      	b.n	800c9fe <__sflush_r+0xf2>
 800c9c6:	690f      	ldr	r7, [r1, #16]
 800c9c8:	2f00      	cmp	r7, #0
 800c9ca:	d0f6      	beq.n	800c9ba <__sflush_r+0xae>
 800c9cc:	0793      	lsls	r3, r2, #30
 800c9ce:	680e      	ldr	r6, [r1, #0]
 800c9d0:	bf08      	it	eq
 800c9d2:	694b      	ldreq	r3, [r1, #20]
 800c9d4:	600f      	str	r7, [r1, #0]
 800c9d6:	bf18      	it	ne
 800c9d8:	2300      	movne	r3, #0
 800c9da:	eba6 0807 	sub.w	r8, r6, r7
 800c9de:	608b      	str	r3, [r1, #8]
 800c9e0:	f1b8 0f00 	cmp.w	r8, #0
 800c9e4:	dde9      	ble.n	800c9ba <__sflush_r+0xae>
 800c9e6:	6a21      	ldr	r1, [r4, #32]
 800c9e8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c9ea:	4643      	mov	r3, r8
 800c9ec:	463a      	mov	r2, r7
 800c9ee:	4628      	mov	r0, r5
 800c9f0:	47b0      	blx	r6
 800c9f2:	2800      	cmp	r0, #0
 800c9f4:	dc08      	bgt.n	800ca08 <__sflush_r+0xfc>
 800c9f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c9fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c9fe:	81a3      	strh	r3, [r4, #12]
 800ca00:	f04f 30ff 	mov.w	r0, #4294967295
 800ca04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca08:	4407      	add	r7, r0
 800ca0a:	eba8 0800 	sub.w	r8, r8, r0
 800ca0e:	e7e7      	b.n	800c9e0 <__sflush_r+0xd4>
 800ca10:	dfbffffe 	.word	0xdfbffffe

0800ca14 <_fflush_r>:
 800ca14:	b538      	push	{r3, r4, r5, lr}
 800ca16:	690b      	ldr	r3, [r1, #16]
 800ca18:	4605      	mov	r5, r0
 800ca1a:	460c      	mov	r4, r1
 800ca1c:	b913      	cbnz	r3, 800ca24 <_fflush_r+0x10>
 800ca1e:	2500      	movs	r5, #0
 800ca20:	4628      	mov	r0, r5
 800ca22:	bd38      	pop	{r3, r4, r5, pc}
 800ca24:	b118      	cbz	r0, 800ca2e <_fflush_r+0x1a>
 800ca26:	6a03      	ldr	r3, [r0, #32]
 800ca28:	b90b      	cbnz	r3, 800ca2e <_fflush_r+0x1a>
 800ca2a:	f7fe fa2f 	bl	800ae8c <__sinit>
 800ca2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d0f3      	beq.n	800ca1e <_fflush_r+0xa>
 800ca36:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ca38:	07d0      	lsls	r0, r2, #31
 800ca3a:	d404      	bmi.n	800ca46 <_fflush_r+0x32>
 800ca3c:	0599      	lsls	r1, r3, #22
 800ca3e:	d402      	bmi.n	800ca46 <_fflush_r+0x32>
 800ca40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ca42:	f7fe fb3a 	bl	800b0ba <__retarget_lock_acquire_recursive>
 800ca46:	4628      	mov	r0, r5
 800ca48:	4621      	mov	r1, r4
 800ca4a:	f7ff ff5f 	bl	800c90c <__sflush_r>
 800ca4e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ca50:	07da      	lsls	r2, r3, #31
 800ca52:	4605      	mov	r5, r0
 800ca54:	d4e4      	bmi.n	800ca20 <_fflush_r+0xc>
 800ca56:	89a3      	ldrh	r3, [r4, #12]
 800ca58:	059b      	lsls	r3, r3, #22
 800ca5a:	d4e1      	bmi.n	800ca20 <_fflush_r+0xc>
 800ca5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ca5e:	f7fe fb2d 	bl	800b0bc <__retarget_lock_release_recursive>
 800ca62:	e7dd      	b.n	800ca20 <_fflush_r+0xc>

0800ca64 <memmove>:
 800ca64:	4288      	cmp	r0, r1
 800ca66:	b510      	push	{r4, lr}
 800ca68:	eb01 0402 	add.w	r4, r1, r2
 800ca6c:	d902      	bls.n	800ca74 <memmove+0x10>
 800ca6e:	4284      	cmp	r4, r0
 800ca70:	4623      	mov	r3, r4
 800ca72:	d807      	bhi.n	800ca84 <memmove+0x20>
 800ca74:	1e43      	subs	r3, r0, #1
 800ca76:	42a1      	cmp	r1, r4
 800ca78:	d008      	beq.n	800ca8c <memmove+0x28>
 800ca7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ca7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ca82:	e7f8      	b.n	800ca76 <memmove+0x12>
 800ca84:	4402      	add	r2, r0
 800ca86:	4601      	mov	r1, r0
 800ca88:	428a      	cmp	r2, r1
 800ca8a:	d100      	bne.n	800ca8e <memmove+0x2a>
 800ca8c:	bd10      	pop	{r4, pc}
 800ca8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ca92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ca96:	e7f7      	b.n	800ca88 <memmove+0x24>

0800ca98 <_sbrk_r>:
 800ca98:	b538      	push	{r3, r4, r5, lr}
 800ca9a:	4d06      	ldr	r5, [pc, #24]	@ (800cab4 <_sbrk_r+0x1c>)
 800ca9c:	2300      	movs	r3, #0
 800ca9e:	4604      	mov	r4, r0
 800caa0:	4608      	mov	r0, r1
 800caa2:	602b      	str	r3, [r5, #0]
 800caa4:	f7f5 f894 	bl	8001bd0 <_sbrk>
 800caa8:	1c43      	adds	r3, r0, #1
 800caaa:	d102      	bne.n	800cab2 <_sbrk_r+0x1a>
 800caac:	682b      	ldr	r3, [r5, #0]
 800caae:	b103      	cbz	r3, 800cab2 <_sbrk_r+0x1a>
 800cab0:	6023      	str	r3, [r4, #0]
 800cab2:	bd38      	pop	{r3, r4, r5, pc}
 800cab4:	2000249c 	.word	0x2000249c

0800cab8 <memcpy>:
 800cab8:	440a      	add	r2, r1
 800caba:	4291      	cmp	r1, r2
 800cabc:	f100 33ff 	add.w	r3, r0, #4294967295
 800cac0:	d100      	bne.n	800cac4 <memcpy+0xc>
 800cac2:	4770      	bx	lr
 800cac4:	b510      	push	{r4, lr}
 800cac6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800caca:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cace:	4291      	cmp	r1, r2
 800cad0:	d1f9      	bne.n	800cac6 <memcpy+0xe>
 800cad2:	bd10      	pop	{r4, pc}

0800cad4 <__assert_func>:
 800cad4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cad6:	4614      	mov	r4, r2
 800cad8:	461a      	mov	r2, r3
 800cada:	4b09      	ldr	r3, [pc, #36]	@ (800cb00 <__assert_func+0x2c>)
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	4605      	mov	r5, r0
 800cae0:	68d8      	ldr	r0, [r3, #12]
 800cae2:	b954      	cbnz	r4, 800cafa <__assert_func+0x26>
 800cae4:	4b07      	ldr	r3, [pc, #28]	@ (800cb04 <__assert_func+0x30>)
 800cae6:	461c      	mov	r4, r3
 800cae8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800caec:	9100      	str	r1, [sp, #0]
 800caee:	462b      	mov	r3, r5
 800caf0:	4905      	ldr	r1, [pc, #20]	@ (800cb08 <__assert_func+0x34>)
 800caf2:	f000 f86f 	bl	800cbd4 <fiprintf>
 800caf6:	f000 f87f 	bl	800cbf8 <abort>
 800cafa:	4b04      	ldr	r3, [pc, #16]	@ (800cb0c <__assert_func+0x38>)
 800cafc:	e7f4      	b.n	800cae8 <__assert_func+0x14>
 800cafe:	bf00      	nop
 800cb00:	20000108 	.word	0x20000108
 800cb04:	0800d78e 	.word	0x0800d78e
 800cb08:	0800d760 	.word	0x0800d760
 800cb0c:	0800d753 	.word	0x0800d753

0800cb10 <_calloc_r>:
 800cb10:	b570      	push	{r4, r5, r6, lr}
 800cb12:	fba1 5402 	umull	r5, r4, r1, r2
 800cb16:	b93c      	cbnz	r4, 800cb28 <_calloc_r+0x18>
 800cb18:	4629      	mov	r1, r5
 800cb1a:	f7ff f991 	bl	800be40 <_malloc_r>
 800cb1e:	4606      	mov	r6, r0
 800cb20:	b928      	cbnz	r0, 800cb2e <_calloc_r+0x1e>
 800cb22:	2600      	movs	r6, #0
 800cb24:	4630      	mov	r0, r6
 800cb26:	bd70      	pop	{r4, r5, r6, pc}
 800cb28:	220c      	movs	r2, #12
 800cb2a:	6002      	str	r2, [r0, #0]
 800cb2c:	e7f9      	b.n	800cb22 <_calloc_r+0x12>
 800cb2e:	462a      	mov	r2, r5
 800cb30:	4621      	mov	r1, r4
 800cb32:	f7fe fa44 	bl	800afbe <memset>
 800cb36:	e7f5      	b.n	800cb24 <_calloc_r+0x14>

0800cb38 <__ascii_mbtowc>:
 800cb38:	b082      	sub	sp, #8
 800cb3a:	b901      	cbnz	r1, 800cb3e <__ascii_mbtowc+0x6>
 800cb3c:	a901      	add	r1, sp, #4
 800cb3e:	b142      	cbz	r2, 800cb52 <__ascii_mbtowc+0x1a>
 800cb40:	b14b      	cbz	r3, 800cb56 <__ascii_mbtowc+0x1e>
 800cb42:	7813      	ldrb	r3, [r2, #0]
 800cb44:	600b      	str	r3, [r1, #0]
 800cb46:	7812      	ldrb	r2, [r2, #0]
 800cb48:	1e10      	subs	r0, r2, #0
 800cb4a:	bf18      	it	ne
 800cb4c:	2001      	movne	r0, #1
 800cb4e:	b002      	add	sp, #8
 800cb50:	4770      	bx	lr
 800cb52:	4610      	mov	r0, r2
 800cb54:	e7fb      	b.n	800cb4e <__ascii_mbtowc+0x16>
 800cb56:	f06f 0001 	mvn.w	r0, #1
 800cb5a:	e7f8      	b.n	800cb4e <__ascii_mbtowc+0x16>

0800cb5c <_realloc_r>:
 800cb5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb60:	4680      	mov	r8, r0
 800cb62:	4615      	mov	r5, r2
 800cb64:	460c      	mov	r4, r1
 800cb66:	b921      	cbnz	r1, 800cb72 <_realloc_r+0x16>
 800cb68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cb6c:	4611      	mov	r1, r2
 800cb6e:	f7ff b967 	b.w	800be40 <_malloc_r>
 800cb72:	b92a      	cbnz	r2, 800cb80 <_realloc_r+0x24>
 800cb74:	f7ff f8f0 	bl	800bd58 <_free_r>
 800cb78:	2400      	movs	r4, #0
 800cb7a:	4620      	mov	r0, r4
 800cb7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb80:	f000 f841 	bl	800cc06 <_malloc_usable_size_r>
 800cb84:	4285      	cmp	r5, r0
 800cb86:	4606      	mov	r6, r0
 800cb88:	d802      	bhi.n	800cb90 <_realloc_r+0x34>
 800cb8a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800cb8e:	d8f4      	bhi.n	800cb7a <_realloc_r+0x1e>
 800cb90:	4629      	mov	r1, r5
 800cb92:	4640      	mov	r0, r8
 800cb94:	f7ff f954 	bl	800be40 <_malloc_r>
 800cb98:	4607      	mov	r7, r0
 800cb9a:	2800      	cmp	r0, #0
 800cb9c:	d0ec      	beq.n	800cb78 <_realloc_r+0x1c>
 800cb9e:	42b5      	cmp	r5, r6
 800cba0:	462a      	mov	r2, r5
 800cba2:	4621      	mov	r1, r4
 800cba4:	bf28      	it	cs
 800cba6:	4632      	movcs	r2, r6
 800cba8:	f7ff ff86 	bl	800cab8 <memcpy>
 800cbac:	4621      	mov	r1, r4
 800cbae:	4640      	mov	r0, r8
 800cbb0:	f7ff f8d2 	bl	800bd58 <_free_r>
 800cbb4:	463c      	mov	r4, r7
 800cbb6:	e7e0      	b.n	800cb7a <_realloc_r+0x1e>

0800cbb8 <__ascii_wctomb>:
 800cbb8:	4603      	mov	r3, r0
 800cbba:	4608      	mov	r0, r1
 800cbbc:	b141      	cbz	r1, 800cbd0 <__ascii_wctomb+0x18>
 800cbbe:	2aff      	cmp	r2, #255	@ 0xff
 800cbc0:	d904      	bls.n	800cbcc <__ascii_wctomb+0x14>
 800cbc2:	228a      	movs	r2, #138	@ 0x8a
 800cbc4:	601a      	str	r2, [r3, #0]
 800cbc6:	f04f 30ff 	mov.w	r0, #4294967295
 800cbca:	4770      	bx	lr
 800cbcc:	700a      	strb	r2, [r1, #0]
 800cbce:	2001      	movs	r0, #1
 800cbd0:	4770      	bx	lr
	...

0800cbd4 <fiprintf>:
 800cbd4:	b40e      	push	{r1, r2, r3}
 800cbd6:	b503      	push	{r0, r1, lr}
 800cbd8:	4601      	mov	r1, r0
 800cbda:	ab03      	add	r3, sp, #12
 800cbdc:	4805      	ldr	r0, [pc, #20]	@ (800cbf4 <fiprintf+0x20>)
 800cbde:	f853 2b04 	ldr.w	r2, [r3], #4
 800cbe2:	6800      	ldr	r0, [r0, #0]
 800cbe4:	9301      	str	r3, [sp, #4]
 800cbe6:	f000 f83f 	bl	800cc68 <_vfiprintf_r>
 800cbea:	b002      	add	sp, #8
 800cbec:	f85d eb04 	ldr.w	lr, [sp], #4
 800cbf0:	b003      	add	sp, #12
 800cbf2:	4770      	bx	lr
 800cbf4:	20000108 	.word	0x20000108

0800cbf8 <abort>:
 800cbf8:	b508      	push	{r3, lr}
 800cbfa:	2006      	movs	r0, #6
 800cbfc:	f000 fa08 	bl	800d010 <raise>
 800cc00:	2001      	movs	r0, #1
 800cc02:	f7f4 ff6d 	bl	8001ae0 <_exit>

0800cc06 <_malloc_usable_size_r>:
 800cc06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc0a:	1f18      	subs	r0, r3, #4
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	bfbc      	itt	lt
 800cc10:	580b      	ldrlt	r3, [r1, r0]
 800cc12:	18c0      	addlt	r0, r0, r3
 800cc14:	4770      	bx	lr

0800cc16 <__sfputc_r>:
 800cc16:	6893      	ldr	r3, [r2, #8]
 800cc18:	3b01      	subs	r3, #1
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	b410      	push	{r4}
 800cc1e:	6093      	str	r3, [r2, #8]
 800cc20:	da08      	bge.n	800cc34 <__sfputc_r+0x1e>
 800cc22:	6994      	ldr	r4, [r2, #24]
 800cc24:	42a3      	cmp	r3, r4
 800cc26:	db01      	blt.n	800cc2c <__sfputc_r+0x16>
 800cc28:	290a      	cmp	r1, #10
 800cc2a:	d103      	bne.n	800cc34 <__sfputc_r+0x1e>
 800cc2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cc30:	f000 b932 	b.w	800ce98 <__swbuf_r>
 800cc34:	6813      	ldr	r3, [r2, #0]
 800cc36:	1c58      	adds	r0, r3, #1
 800cc38:	6010      	str	r0, [r2, #0]
 800cc3a:	7019      	strb	r1, [r3, #0]
 800cc3c:	4608      	mov	r0, r1
 800cc3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cc42:	4770      	bx	lr

0800cc44 <__sfputs_r>:
 800cc44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc46:	4606      	mov	r6, r0
 800cc48:	460f      	mov	r7, r1
 800cc4a:	4614      	mov	r4, r2
 800cc4c:	18d5      	adds	r5, r2, r3
 800cc4e:	42ac      	cmp	r4, r5
 800cc50:	d101      	bne.n	800cc56 <__sfputs_r+0x12>
 800cc52:	2000      	movs	r0, #0
 800cc54:	e007      	b.n	800cc66 <__sfputs_r+0x22>
 800cc56:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc5a:	463a      	mov	r2, r7
 800cc5c:	4630      	mov	r0, r6
 800cc5e:	f7ff ffda 	bl	800cc16 <__sfputc_r>
 800cc62:	1c43      	adds	r3, r0, #1
 800cc64:	d1f3      	bne.n	800cc4e <__sfputs_r+0xa>
 800cc66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cc68 <_vfiprintf_r>:
 800cc68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc6c:	460d      	mov	r5, r1
 800cc6e:	b09d      	sub	sp, #116	@ 0x74
 800cc70:	4614      	mov	r4, r2
 800cc72:	4698      	mov	r8, r3
 800cc74:	4606      	mov	r6, r0
 800cc76:	b118      	cbz	r0, 800cc80 <_vfiprintf_r+0x18>
 800cc78:	6a03      	ldr	r3, [r0, #32]
 800cc7a:	b90b      	cbnz	r3, 800cc80 <_vfiprintf_r+0x18>
 800cc7c:	f7fe f906 	bl	800ae8c <__sinit>
 800cc80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cc82:	07d9      	lsls	r1, r3, #31
 800cc84:	d405      	bmi.n	800cc92 <_vfiprintf_r+0x2a>
 800cc86:	89ab      	ldrh	r3, [r5, #12]
 800cc88:	059a      	lsls	r2, r3, #22
 800cc8a:	d402      	bmi.n	800cc92 <_vfiprintf_r+0x2a>
 800cc8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cc8e:	f7fe fa14 	bl	800b0ba <__retarget_lock_acquire_recursive>
 800cc92:	89ab      	ldrh	r3, [r5, #12]
 800cc94:	071b      	lsls	r3, r3, #28
 800cc96:	d501      	bpl.n	800cc9c <_vfiprintf_r+0x34>
 800cc98:	692b      	ldr	r3, [r5, #16]
 800cc9a:	b99b      	cbnz	r3, 800ccc4 <_vfiprintf_r+0x5c>
 800cc9c:	4629      	mov	r1, r5
 800cc9e:	4630      	mov	r0, r6
 800cca0:	f000 f938 	bl	800cf14 <__swsetup_r>
 800cca4:	b170      	cbz	r0, 800ccc4 <_vfiprintf_r+0x5c>
 800cca6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cca8:	07dc      	lsls	r4, r3, #31
 800ccaa:	d504      	bpl.n	800ccb6 <_vfiprintf_r+0x4e>
 800ccac:	f04f 30ff 	mov.w	r0, #4294967295
 800ccb0:	b01d      	add	sp, #116	@ 0x74
 800ccb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccb6:	89ab      	ldrh	r3, [r5, #12]
 800ccb8:	0598      	lsls	r0, r3, #22
 800ccba:	d4f7      	bmi.n	800ccac <_vfiprintf_r+0x44>
 800ccbc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ccbe:	f7fe f9fd 	bl	800b0bc <__retarget_lock_release_recursive>
 800ccc2:	e7f3      	b.n	800ccac <_vfiprintf_r+0x44>
 800ccc4:	2300      	movs	r3, #0
 800ccc6:	9309      	str	r3, [sp, #36]	@ 0x24
 800ccc8:	2320      	movs	r3, #32
 800ccca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ccce:	f8cd 800c 	str.w	r8, [sp, #12]
 800ccd2:	2330      	movs	r3, #48	@ 0x30
 800ccd4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ce84 <_vfiprintf_r+0x21c>
 800ccd8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ccdc:	f04f 0901 	mov.w	r9, #1
 800cce0:	4623      	mov	r3, r4
 800cce2:	469a      	mov	sl, r3
 800cce4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cce8:	b10a      	cbz	r2, 800ccee <_vfiprintf_r+0x86>
 800ccea:	2a25      	cmp	r2, #37	@ 0x25
 800ccec:	d1f9      	bne.n	800cce2 <_vfiprintf_r+0x7a>
 800ccee:	ebba 0b04 	subs.w	fp, sl, r4
 800ccf2:	d00b      	beq.n	800cd0c <_vfiprintf_r+0xa4>
 800ccf4:	465b      	mov	r3, fp
 800ccf6:	4622      	mov	r2, r4
 800ccf8:	4629      	mov	r1, r5
 800ccfa:	4630      	mov	r0, r6
 800ccfc:	f7ff ffa2 	bl	800cc44 <__sfputs_r>
 800cd00:	3001      	adds	r0, #1
 800cd02:	f000 80a7 	beq.w	800ce54 <_vfiprintf_r+0x1ec>
 800cd06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cd08:	445a      	add	r2, fp
 800cd0a:	9209      	str	r2, [sp, #36]	@ 0x24
 800cd0c:	f89a 3000 	ldrb.w	r3, [sl]
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	f000 809f 	beq.w	800ce54 <_vfiprintf_r+0x1ec>
 800cd16:	2300      	movs	r3, #0
 800cd18:	f04f 32ff 	mov.w	r2, #4294967295
 800cd1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cd20:	f10a 0a01 	add.w	sl, sl, #1
 800cd24:	9304      	str	r3, [sp, #16]
 800cd26:	9307      	str	r3, [sp, #28]
 800cd28:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cd2c:	931a      	str	r3, [sp, #104]	@ 0x68
 800cd2e:	4654      	mov	r4, sl
 800cd30:	2205      	movs	r2, #5
 800cd32:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd36:	4853      	ldr	r0, [pc, #332]	@ (800ce84 <_vfiprintf_r+0x21c>)
 800cd38:	f7f3 fa4a 	bl	80001d0 <memchr>
 800cd3c:	9a04      	ldr	r2, [sp, #16]
 800cd3e:	b9d8      	cbnz	r0, 800cd78 <_vfiprintf_r+0x110>
 800cd40:	06d1      	lsls	r1, r2, #27
 800cd42:	bf44      	itt	mi
 800cd44:	2320      	movmi	r3, #32
 800cd46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cd4a:	0713      	lsls	r3, r2, #28
 800cd4c:	bf44      	itt	mi
 800cd4e:	232b      	movmi	r3, #43	@ 0x2b
 800cd50:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cd54:	f89a 3000 	ldrb.w	r3, [sl]
 800cd58:	2b2a      	cmp	r3, #42	@ 0x2a
 800cd5a:	d015      	beq.n	800cd88 <_vfiprintf_r+0x120>
 800cd5c:	9a07      	ldr	r2, [sp, #28]
 800cd5e:	4654      	mov	r4, sl
 800cd60:	2000      	movs	r0, #0
 800cd62:	f04f 0c0a 	mov.w	ip, #10
 800cd66:	4621      	mov	r1, r4
 800cd68:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cd6c:	3b30      	subs	r3, #48	@ 0x30
 800cd6e:	2b09      	cmp	r3, #9
 800cd70:	d94b      	bls.n	800ce0a <_vfiprintf_r+0x1a2>
 800cd72:	b1b0      	cbz	r0, 800cda2 <_vfiprintf_r+0x13a>
 800cd74:	9207      	str	r2, [sp, #28]
 800cd76:	e014      	b.n	800cda2 <_vfiprintf_r+0x13a>
 800cd78:	eba0 0308 	sub.w	r3, r0, r8
 800cd7c:	fa09 f303 	lsl.w	r3, r9, r3
 800cd80:	4313      	orrs	r3, r2
 800cd82:	9304      	str	r3, [sp, #16]
 800cd84:	46a2      	mov	sl, r4
 800cd86:	e7d2      	b.n	800cd2e <_vfiprintf_r+0xc6>
 800cd88:	9b03      	ldr	r3, [sp, #12]
 800cd8a:	1d19      	adds	r1, r3, #4
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	9103      	str	r1, [sp, #12]
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	bfbb      	ittet	lt
 800cd94:	425b      	neglt	r3, r3
 800cd96:	f042 0202 	orrlt.w	r2, r2, #2
 800cd9a:	9307      	strge	r3, [sp, #28]
 800cd9c:	9307      	strlt	r3, [sp, #28]
 800cd9e:	bfb8      	it	lt
 800cda0:	9204      	strlt	r2, [sp, #16]
 800cda2:	7823      	ldrb	r3, [r4, #0]
 800cda4:	2b2e      	cmp	r3, #46	@ 0x2e
 800cda6:	d10a      	bne.n	800cdbe <_vfiprintf_r+0x156>
 800cda8:	7863      	ldrb	r3, [r4, #1]
 800cdaa:	2b2a      	cmp	r3, #42	@ 0x2a
 800cdac:	d132      	bne.n	800ce14 <_vfiprintf_r+0x1ac>
 800cdae:	9b03      	ldr	r3, [sp, #12]
 800cdb0:	1d1a      	adds	r2, r3, #4
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	9203      	str	r2, [sp, #12]
 800cdb6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cdba:	3402      	adds	r4, #2
 800cdbc:	9305      	str	r3, [sp, #20]
 800cdbe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ce94 <_vfiprintf_r+0x22c>
 800cdc2:	7821      	ldrb	r1, [r4, #0]
 800cdc4:	2203      	movs	r2, #3
 800cdc6:	4650      	mov	r0, sl
 800cdc8:	f7f3 fa02 	bl	80001d0 <memchr>
 800cdcc:	b138      	cbz	r0, 800cdde <_vfiprintf_r+0x176>
 800cdce:	9b04      	ldr	r3, [sp, #16]
 800cdd0:	eba0 000a 	sub.w	r0, r0, sl
 800cdd4:	2240      	movs	r2, #64	@ 0x40
 800cdd6:	4082      	lsls	r2, r0
 800cdd8:	4313      	orrs	r3, r2
 800cdda:	3401      	adds	r4, #1
 800cddc:	9304      	str	r3, [sp, #16]
 800cdde:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cde2:	4829      	ldr	r0, [pc, #164]	@ (800ce88 <_vfiprintf_r+0x220>)
 800cde4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cde8:	2206      	movs	r2, #6
 800cdea:	f7f3 f9f1 	bl	80001d0 <memchr>
 800cdee:	2800      	cmp	r0, #0
 800cdf0:	d03f      	beq.n	800ce72 <_vfiprintf_r+0x20a>
 800cdf2:	4b26      	ldr	r3, [pc, #152]	@ (800ce8c <_vfiprintf_r+0x224>)
 800cdf4:	bb1b      	cbnz	r3, 800ce3e <_vfiprintf_r+0x1d6>
 800cdf6:	9b03      	ldr	r3, [sp, #12]
 800cdf8:	3307      	adds	r3, #7
 800cdfa:	f023 0307 	bic.w	r3, r3, #7
 800cdfe:	3308      	adds	r3, #8
 800ce00:	9303      	str	r3, [sp, #12]
 800ce02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce04:	443b      	add	r3, r7
 800ce06:	9309      	str	r3, [sp, #36]	@ 0x24
 800ce08:	e76a      	b.n	800cce0 <_vfiprintf_r+0x78>
 800ce0a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ce0e:	460c      	mov	r4, r1
 800ce10:	2001      	movs	r0, #1
 800ce12:	e7a8      	b.n	800cd66 <_vfiprintf_r+0xfe>
 800ce14:	2300      	movs	r3, #0
 800ce16:	3401      	adds	r4, #1
 800ce18:	9305      	str	r3, [sp, #20]
 800ce1a:	4619      	mov	r1, r3
 800ce1c:	f04f 0c0a 	mov.w	ip, #10
 800ce20:	4620      	mov	r0, r4
 800ce22:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ce26:	3a30      	subs	r2, #48	@ 0x30
 800ce28:	2a09      	cmp	r2, #9
 800ce2a:	d903      	bls.n	800ce34 <_vfiprintf_r+0x1cc>
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d0c6      	beq.n	800cdbe <_vfiprintf_r+0x156>
 800ce30:	9105      	str	r1, [sp, #20]
 800ce32:	e7c4      	b.n	800cdbe <_vfiprintf_r+0x156>
 800ce34:	fb0c 2101 	mla	r1, ip, r1, r2
 800ce38:	4604      	mov	r4, r0
 800ce3a:	2301      	movs	r3, #1
 800ce3c:	e7f0      	b.n	800ce20 <_vfiprintf_r+0x1b8>
 800ce3e:	ab03      	add	r3, sp, #12
 800ce40:	9300      	str	r3, [sp, #0]
 800ce42:	462a      	mov	r2, r5
 800ce44:	4b12      	ldr	r3, [pc, #72]	@ (800ce90 <_vfiprintf_r+0x228>)
 800ce46:	a904      	add	r1, sp, #16
 800ce48:	4630      	mov	r0, r6
 800ce4a:	f7fd fbdb 	bl	800a604 <_printf_float>
 800ce4e:	4607      	mov	r7, r0
 800ce50:	1c78      	adds	r0, r7, #1
 800ce52:	d1d6      	bne.n	800ce02 <_vfiprintf_r+0x19a>
 800ce54:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ce56:	07d9      	lsls	r1, r3, #31
 800ce58:	d405      	bmi.n	800ce66 <_vfiprintf_r+0x1fe>
 800ce5a:	89ab      	ldrh	r3, [r5, #12]
 800ce5c:	059a      	lsls	r2, r3, #22
 800ce5e:	d402      	bmi.n	800ce66 <_vfiprintf_r+0x1fe>
 800ce60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ce62:	f7fe f92b 	bl	800b0bc <__retarget_lock_release_recursive>
 800ce66:	89ab      	ldrh	r3, [r5, #12]
 800ce68:	065b      	lsls	r3, r3, #25
 800ce6a:	f53f af1f 	bmi.w	800ccac <_vfiprintf_r+0x44>
 800ce6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ce70:	e71e      	b.n	800ccb0 <_vfiprintf_r+0x48>
 800ce72:	ab03      	add	r3, sp, #12
 800ce74:	9300      	str	r3, [sp, #0]
 800ce76:	462a      	mov	r2, r5
 800ce78:	4b05      	ldr	r3, [pc, #20]	@ (800ce90 <_vfiprintf_r+0x228>)
 800ce7a:	a904      	add	r1, sp, #16
 800ce7c:	4630      	mov	r0, r6
 800ce7e:	f7fd fe59 	bl	800ab34 <_printf_i>
 800ce82:	e7e4      	b.n	800ce4e <_vfiprintf_r+0x1e6>
 800ce84:	0800d738 	.word	0x0800d738
 800ce88:	0800d742 	.word	0x0800d742
 800ce8c:	0800a605 	.word	0x0800a605
 800ce90:	0800cc45 	.word	0x0800cc45
 800ce94:	0800d73e 	.word	0x0800d73e

0800ce98 <__swbuf_r>:
 800ce98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce9a:	460e      	mov	r6, r1
 800ce9c:	4614      	mov	r4, r2
 800ce9e:	4605      	mov	r5, r0
 800cea0:	b118      	cbz	r0, 800ceaa <__swbuf_r+0x12>
 800cea2:	6a03      	ldr	r3, [r0, #32]
 800cea4:	b90b      	cbnz	r3, 800ceaa <__swbuf_r+0x12>
 800cea6:	f7fd fff1 	bl	800ae8c <__sinit>
 800ceaa:	69a3      	ldr	r3, [r4, #24]
 800ceac:	60a3      	str	r3, [r4, #8]
 800ceae:	89a3      	ldrh	r3, [r4, #12]
 800ceb0:	071a      	lsls	r2, r3, #28
 800ceb2:	d501      	bpl.n	800ceb8 <__swbuf_r+0x20>
 800ceb4:	6923      	ldr	r3, [r4, #16]
 800ceb6:	b943      	cbnz	r3, 800ceca <__swbuf_r+0x32>
 800ceb8:	4621      	mov	r1, r4
 800ceba:	4628      	mov	r0, r5
 800cebc:	f000 f82a 	bl	800cf14 <__swsetup_r>
 800cec0:	b118      	cbz	r0, 800ceca <__swbuf_r+0x32>
 800cec2:	f04f 37ff 	mov.w	r7, #4294967295
 800cec6:	4638      	mov	r0, r7
 800cec8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ceca:	6823      	ldr	r3, [r4, #0]
 800cecc:	6922      	ldr	r2, [r4, #16]
 800cece:	1a98      	subs	r0, r3, r2
 800ced0:	6963      	ldr	r3, [r4, #20]
 800ced2:	b2f6      	uxtb	r6, r6
 800ced4:	4283      	cmp	r3, r0
 800ced6:	4637      	mov	r7, r6
 800ced8:	dc05      	bgt.n	800cee6 <__swbuf_r+0x4e>
 800ceda:	4621      	mov	r1, r4
 800cedc:	4628      	mov	r0, r5
 800cede:	f7ff fd99 	bl	800ca14 <_fflush_r>
 800cee2:	2800      	cmp	r0, #0
 800cee4:	d1ed      	bne.n	800cec2 <__swbuf_r+0x2a>
 800cee6:	68a3      	ldr	r3, [r4, #8]
 800cee8:	3b01      	subs	r3, #1
 800ceea:	60a3      	str	r3, [r4, #8]
 800ceec:	6823      	ldr	r3, [r4, #0]
 800ceee:	1c5a      	adds	r2, r3, #1
 800cef0:	6022      	str	r2, [r4, #0]
 800cef2:	701e      	strb	r6, [r3, #0]
 800cef4:	6962      	ldr	r2, [r4, #20]
 800cef6:	1c43      	adds	r3, r0, #1
 800cef8:	429a      	cmp	r2, r3
 800cefa:	d004      	beq.n	800cf06 <__swbuf_r+0x6e>
 800cefc:	89a3      	ldrh	r3, [r4, #12]
 800cefe:	07db      	lsls	r3, r3, #31
 800cf00:	d5e1      	bpl.n	800cec6 <__swbuf_r+0x2e>
 800cf02:	2e0a      	cmp	r6, #10
 800cf04:	d1df      	bne.n	800cec6 <__swbuf_r+0x2e>
 800cf06:	4621      	mov	r1, r4
 800cf08:	4628      	mov	r0, r5
 800cf0a:	f7ff fd83 	bl	800ca14 <_fflush_r>
 800cf0e:	2800      	cmp	r0, #0
 800cf10:	d0d9      	beq.n	800cec6 <__swbuf_r+0x2e>
 800cf12:	e7d6      	b.n	800cec2 <__swbuf_r+0x2a>

0800cf14 <__swsetup_r>:
 800cf14:	b538      	push	{r3, r4, r5, lr}
 800cf16:	4b29      	ldr	r3, [pc, #164]	@ (800cfbc <__swsetup_r+0xa8>)
 800cf18:	4605      	mov	r5, r0
 800cf1a:	6818      	ldr	r0, [r3, #0]
 800cf1c:	460c      	mov	r4, r1
 800cf1e:	b118      	cbz	r0, 800cf28 <__swsetup_r+0x14>
 800cf20:	6a03      	ldr	r3, [r0, #32]
 800cf22:	b90b      	cbnz	r3, 800cf28 <__swsetup_r+0x14>
 800cf24:	f7fd ffb2 	bl	800ae8c <__sinit>
 800cf28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf2c:	0719      	lsls	r1, r3, #28
 800cf2e:	d422      	bmi.n	800cf76 <__swsetup_r+0x62>
 800cf30:	06da      	lsls	r2, r3, #27
 800cf32:	d407      	bmi.n	800cf44 <__swsetup_r+0x30>
 800cf34:	2209      	movs	r2, #9
 800cf36:	602a      	str	r2, [r5, #0]
 800cf38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cf3c:	81a3      	strh	r3, [r4, #12]
 800cf3e:	f04f 30ff 	mov.w	r0, #4294967295
 800cf42:	e033      	b.n	800cfac <__swsetup_r+0x98>
 800cf44:	0758      	lsls	r0, r3, #29
 800cf46:	d512      	bpl.n	800cf6e <__swsetup_r+0x5a>
 800cf48:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cf4a:	b141      	cbz	r1, 800cf5e <__swsetup_r+0x4a>
 800cf4c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cf50:	4299      	cmp	r1, r3
 800cf52:	d002      	beq.n	800cf5a <__swsetup_r+0x46>
 800cf54:	4628      	mov	r0, r5
 800cf56:	f7fe feff 	bl	800bd58 <_free_r>
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	6363      	str	r3, [r4, #52]	@ 0x34
 800cf5e:	89a3      	ldrh	r3, [r4, #12]
 800cf60:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800cf64:	81a3      	strh	r3, [r4, #12]
 800cf66:	2300      	movs	r3, #0
 800cf68:	6063      	str	r3, [r4, #4]
 800cf6a:	6923      	ldr	r3, [r4, #16]
 800cf6c:	6023      	str	r3, [r4, #0]
 800cf6e:	89a3      	ldrh	r3, [r4, #12]
 800cf70:	f043 0308 	orr.w	r3, r3, #8
 800cf74:	81a3      	strh	r3, [r4, #12]
 800cf76:	6923      	ldr	r3, [r4, #16]
 800cf78:	b94b      	cbnz	r3, 800cf8e <__swsetup_r+0x7a>
 800cf7a:	89a3      	ldrh	r3, [r4, #12]
 800cf7c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800cf80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cf84:	d003      	beq.n	800cf8e <__swsetup_r+0x7a>
 800cf86:	4621      	mov	r1, r4
 800cf88:	4628      	mov	r0, r5
 800cf8a:	f000 f883 	bl	800d094 <__smakebuf_r>
 800cf8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf92:	f013 0201 	ands.w	r2, r3, #1
 800cf96:	d00a      	beq.n	800cfae <__swsetup_r+0x9a>
 800cf98:	2200      	movs	r2, #0
 800cf9a:	60a2      	str	r2, [r4, #8]
 800cf9c:	6962      	ldr	r2, [r4, #20]
 800cf9e:	4252      	negs	r2, r2
 800cfa0:	61a2      	str	r2, [r4, #24]
 800cfa2:	6922      	ldr	r2, [r4, #16]
 800cfa4:	b942      	cbnz	r2, 800cfb8 <__swsetup_r+0xa4>
 800cfa6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800cfaa:	d1c5      	bne.n	800cf38 <__swsetup_r+0x24>
 800cfac:	bd38      	pop	{r3, r4, r5, pc}
 800cfae:	0799      	lsls	r1, r3, #30
 800cfb0:	bf58      	it	pl
 800cfb2:	6962      	ldrpl	r2, [r4, #20]
 800cfb4:	60a2      	str	r2, [r4, #8]
 800cfb6:	e7f4      	b.n	800cfa2 <__swsetup_r+0x8e>
 800cfb8:	2000      	movs	r0, #0
 800cfba:	e7f7      	b.n	800cfac <__swsetup_r+0x98>
 800cfbc:	20000108 	.word	0x20000108

0800cfc0 <_raise_r>:
 800cfc0:	291f      	cmp	r1, #31
 800cfc2:	b538      	push	{r3, r4, r5, lr}
 800cfc4:	4605      	mov	r5, r0
 800cfc6:	460c      	mov	r4, r1
 800cfc8:	d904      	bls.n	800cfd4 <_raise_r+0x14>
 800cfca:	2316      	movs	r3, #22
 800cfcc:	6003      	str	r3, [r0, #0]
 800cfce:	f04f 30ff 	mov.w	r0, #4294967295
 800cfd2:	bd38      	pop	{r3, r4, r5, pc}
 800cfd4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800cfd6:	b112      	cbz	r2, 800cfde <_raise_r+0x1e>
 800cfd8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cfdc:	b94b      	cbnz	r3, 800cff2 <_raise_r+0x32>
 800cfde:	4628      	mov	r0, r5
 800cfe0:	f000 f830 	bl	800d044 <_getpid_r>
 800cfe4:	4622      	mov	r2, r4
 800cfe6:	4601      	mov	r1, r0
 800cfe8:	4628      	mov	r0, r5
 800cfea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cfee:	f000 b817 	b.w	800d020 <_kill_r>
 800cff2:	2b01      	cmp	r3, #1
 800cff4:	d00a      	beq.n	800d00c <_raise_r+0x4c>
 800cff6:	1c59      	adds	r1, r3, #1
 800cff8:	d103      	bne.n	800d002 <_raise_r+0x42>
 800cffa:	2316      	movs	r3, #22
 800cffc:	6003      	str	r3, [r0, #0]
 800cffe:	2001      	movs	r0, #1
 800d000:	e7e7      	b.n	800cfd2 <_raise_r+0x12>
 800d002:	2100      	movs	r1, #0
 800d004:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d008:	4620      	mov	r0, r4
 800d00a:	4798      	blx	r3
 800d00c:	2000      	movs	r0, #0
 800d00e:	e7e0      	b.n	800cfd2 <_raise_r+0x12>

0800d010 <raise>:
 800d010:	4b02      	ldr	r3, [pc, #8]	@ (800d01c <raise+0xc>)
 800d012:	4601      	mov	r1, r0
 800d014:	6818      	ldr	r0, [r3, #0]
 800d016:	f7ff bfd3 	b.w	800cfc0 <_raise_r>
 800d01a:	bf00      	nop
 800d01c:	20000108 	.word	0x20000108

0800d020 <_kill_r>:
 800d020:	b538      	push	{r3, r4, r5, lr}
 800d022:	4d07      	ldr	r5, [pc, #28]	@ (800d040 <_kill_r+0x20>)
 800d024:	2300      	movs	r3, #0
 800d026:	4604      	mov	r4, r0
 800d028:	4608      	mov	r0, r1
 800d02a:	4611      	mov	r1, r2
 800d02c:	602b      	str	r3, [r5, #0]
 800d02e:	f7f4 fd47 	bl	8001ac0 <_kill>
 800d032:	1c43      	adds	r3, r0, #1
 800d034:	d102      	bne.n	800d03c <_kill_r+0x1c>
 800d036:	682b      	ldr	r3, [r5, #0]
 800d038:	b103      	cbz	r3, 800d03c <_kill_r+0x1c>
 800d03a:	6023      	str	r3, [r4, #0]
 800d03c:	bd38      	pop	{r3, r4, r5, pc}
 800d03e:	bf00      	nop
 800d040:	2000249c 	.word	0x2000249c

0800d044 <_getpid_r>:
 800d044:	f7f4 bd34 	b.w	8001ab0 <_getpid>

0800d048 <__swhatbuf_r>:
 800d048:	b570      	push	{r4, r5, r6, lr}
 800d04a:	460c      	mov	r4, r1
 800d04c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d050:	2900      	cmp	r1, #0
 800d052:	b096      	sub	sp, #88	@ 0x58
 800d054:	4615      	mov	r5, r2
 800d056:	461e      	mov	r6, r3
 800d058:	da0d      	bge.n	800d076 <__swhatbuf_r+0x2e>
 800d05a:	89a3      	ldrh	r3, [r4, #12]
 800d05c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d060:	f04f 0100 	mov.w	r1, #0
 800d064:	bf14      	ite	ne
 800d066:	2340      	movne	r3, #64	@ 0x40
 800d068:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d06c:	2000      	movs	r0, #0
 800d06e:	6031      	str	r1, [r6, #0]
 800d070:	602b      	str	r3, [r5, #0]
 800d072:	b016      	add	sp, #88	@ 0x58
 800d074:	bd70      	pop	{r4, r5, r6, pc}
 800d076:	466a      	mov	r2, sp
 800d078:	f000 f848 	bl	800d10c <_fstat_r>
 800d07c:	2800      	cmp	r0, #0
 800d07e:	dbec      	blt.n	800d05a <__swhatbuf_r+0x12>
 800d080:	9901      	ldr	r1, [sp, #4]
 800d082:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d086:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d08a:	4259      	negs	r1, r3
 800d08c:	4159      	adcs	r1, r3
 800d08e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d092:	e7eb      	b.n	800d06c <__swhatbuf_r+0x24>

0800d094 <__smakebuf_r>:
 800d094:	898b      	ldrh	r3, [r1, #12]
 800d096:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d098:	079d      	lsls	r5, r3, #30
 800d09a:	4606      	mov	r6, r0
 800d09c:	460c      	mov	r4, r1
 800d09e:	d507      	bpl.n	800d0b0 <__smakebuf_r+0x1c>
 800d0a0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d0a4:	6023      	str	r3, [r4, #0]
 800d0a6:	6123      	str	r3, [r4, #16]
 800d0a8:	2301      	movs	r3, #1
 800d0aa:	6163      	str	r3, [r4, #20]
 800d0ac:	b003      	add	sp, #12
 800d0ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d0b0:	ab01      	add	r3, sp, #4
 800d0b2:	466a      	mov	r2, sp
 800d0b4:	f7ff ffc8 	bl	800d048 <__swhatbuf_r>
 800d0b8:	9f00      	ldr	r7, [sp, #0]
 800d0ba:	4605      	mov	r5, r0
 800d0bc:	4639      	mov	r1, r7
 800d0be:	4630      	mov	r0, r6
 800d0c0:	f7fe febe 	bl	800be40 <_malloc_r>
 800d0c4:	b948      	cbnz	r0, 800d0da <__smakebuf_r+0x46>
 800d0c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d0ca:	059a      	lsls	r2, r3, #22
 800d0cc:	d4ee      	bmi.n	800d0ac <__smakebuf_r+0x18>
 800d0ce:	f023 0303 	bic.w	r3, r3, #3
 800d0d2:	f043 0302 	orr.w	r3, r3, #2
 800d0d6:	81a3      	strh	r3, [r4, #12]
 800d0d8:	e7e2      	b.n	800d0a0 <__smakebuf_r+0xc>
 800d0da:	89a3      	ldrh	r3, [r4, #12]
 800d0dc:	6020      	str	r0, [r4, #0]
 800d0de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d0e2:	81a3      	strh	r3, [r4, #12]
 800d0e4:	9b01      	ldr	r3, [sp, #4]
 800d0e6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d0ea:	b15b      	cbz	r3, 800d104 <__smakebuf_r+0x70>
 800d0ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d0f0:	4630      	mov	r0, r6
 800d0f2:	f000 f81d 	bl	800d130 <_isatty_r>
 800d0f6:	b128      	cbz	r0, 800d104 <__smakebuf_r+0x70>
 800d0f8:	89a3      	ldrh	r3, [r4, #12]
 800d0fa:	f023 0303 	bic.w	r3, r3, #3
 800d0fe:	f043 0301 	orr.w	r3, r3, #1
 800d102:	81a3      	strh	r3, [r4, #12]
 800d104:	89a3      	ldrh	r3, [r4, #12]
 800d106:	431d      	orrs	r5, r3
 800d108:	81a5      	strh	r5, [r4, #12]
 800d10a:	e7cf      	b.n	800d0ac <__smakebuf_r+0x18>

0800d10c <_fstat_r>:
 800d10c:	b538      	push	{r3, r4, r5, lr}
 800d10e:	4d07      	ldr	r5, [pc, #28]	@ (800d12c <_fstat_r+0x20>)
 800d110:	2300      	movs	r3, #0
 800d112:	4604      	mov	r4, r0
 800d114:	4608      	mov	r0, r1
 800d116:	4611      	mov	r1, r2
 800d118:	602b      	str	r3, [r5, #0]
 800d11a:	f7f4 fd31 	bl	8001b80 <_fstat>
 800d11e:	1c43      	adds	r3, r0, #1
 800d120:	d102      	bne.n	800d128 <_fstat_r+0x1c>
 800d122:	682b      	ldr	r3, [r5, #0]
 800d124:	b103      	cbz	r3, 800d128 <_fstat_r+0x1c>
 800d126:	6023      	str	r3, [r4, #0]
 800d128:	bd38      	pop	{r3, r4, r5, pc}
 800d12a:	bf00      	nop
 800d12c:	2000249c 	.word	0x2000249c

0800d130 <_isatty_r>:
 800d130:	b538      	push	{r3, r4, r5, lr}
 800d132:	4d06      	ldr	r5, [pc, #24]	@ (800d14c <_isatty_r+0x1c>)
 800d134:	2300      	movs	r3, #0
 800d136:	4604      	mov	r4, r0
 800d138:	4608      	mov	r0, r1
 800d13a:	602b      	str	r3, [r5, #0]
 800d13c:	f7f4 fd30 	bl	8001ba0 <_isatty>
 800d140:	1c43      	adds	r3, r0, #1
 800d142:	d102      	bne.n	800d14a <_isatty_r+0x1a>
 800d144:	682b      	ldr	r3, [r5, #0]
 800d146:	b103      	cbz	r3, 800d14a <_isatty_r+0x1a>
 800d148:	6023      	str	r3, [r4, #0]
 800d14a:	bd38      	pop	{r3, r4, r5, pc}
 800d14c:	2000249c 	.word	0x2000249c

0800d150 <_init>:
 800d150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d152:	bf00      	nop
 800d154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d156:	bc08      	pop	{r3}
 800d158:	469e      	mov	lr, r3
 800d15a:	4770      	bx	lr

0800d15c <_fini>:
 800d15c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d15e:	bf00      	nop
 800d160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d162:	bc08      	pop	{r3}
 800d164:	469e      	mov	lr, r3
 800d166:	4770      	bx	lr
